import { providers } from 'ethers';
import { SignedTransactions, Transaction } from '@0xsequence/transactions';
import { WalletContext } from '@0xsequence/network';
import { WalletConfig } from '@0xsequence/config';
import { proto } from './rpc-relayer';
export interface Relayer {
    estimateGasLimits(config: WalletConfig, context: WalletContext, ...transactions: Transaction[]): Promise<Transaction[]>;
    gasRefundOptions(config: WalletConfig, context: WalletContext, ...transactions: Transaction[]): Promise<FeeOption[]>;
    getNonce(config: WalletConfig, context: WalletContext, space?: number, blockTag?: providers.BlockTag): Promise<number>;
    relay(signedTxs: SignedTransactions): Promise<providers.TransactionResponse>;
    wait(metaTxnId: string | SignedTransactions, timeout: number): Promise<providers.TransactionResponse>;
}
export * from './local-relayer';
export * from './base-relayer';
export * from './provider-relayer';
export * from './rpc-relayer';
export { proto as RpcRelayerProto } from './rpc-relayer';
export declare type FeeOption = proto.FeeOption;
export declare function isRelayer(cand: any): cand is Relayer;
