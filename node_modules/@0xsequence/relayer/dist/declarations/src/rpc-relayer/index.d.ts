import { TransactionResponse } from '@ethersproject/providers';
import { Transaction, SignedTransactions } from '@0xsequence/transactions';
import { BaseRelayer, BaseRelayerOptions } from '../base-relayer';
import { FeeOption, Relayer } from '..';
import { WalletContext } from '@0xsequence/network';
import { WalletConfig } from '@0xsequence/config';
import * as proto from './relayer.gen';
export { proto };
export interface RpcRelayerOptions extends BaseRelayerOptions {
    url: string;
}
export declare function isRpcRelayerOptions(obj: any): obj is RpcRelayerOptions;
export declare class RpcRelayer extends BaseRelayer implements Relayer {
    private readonly service;
    constructor(options: RpcRelayerOptions);
    waitReceipt(metaTxnHash: string | SignedTransactions, wait?: number): Promise<proto.GetMetaTxnReceiptReturn>;
    estimateGasLimits(config: WalletConfig, context: WalletContext, ...transactions: Transaction[]): Promise<Transaction[]>;
    gasRefundOptions(config: WalletConfig, context: WalletContext, ...transactions: Transaction[]): Promise<FeeOption[]>;
    getNonce(config: WalletConfig, context: WalletContext, space?: number): Promise<number>;
    relay(signedTxs: SignedTransactions): Promise<TransactionResponse>;
    wait(metaTxnHash: string | SignedTransactions, wait?: number): Promise<TransactionResponse>;
}
