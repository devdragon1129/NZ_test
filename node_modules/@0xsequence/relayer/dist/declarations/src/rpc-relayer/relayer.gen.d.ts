export declare const WebRPCVersion = "v1";
export declare const WebRPCSchemaVersion = "v0.3.0";
export declare const WebRPCSchemaHash = "ab6bd1a3fe3c382e79ec52ca7d0f41c939517306";
export declare enum ETHTxnStatus {
    UNKNOWN = "UNKNOWN",
    FAILED = "FAILED",
    PARTIALLY_FAILED = "PARTIALLY_FAILED",
    SENT = "SENT",
    REVERTED = "REVERTED",
    SUCCESS = "SUCCESS",
    FINAL = "FINAL",
    DROPPED = "DROPPED"
}
export declare enum ContractType {
    UNKNOWN = "UNKNOWN",
    ERC20_TOKEN = "ERC20_TOKEN",
    ERC721_TOKEN = "ERC721_TOKEN",
    ERC1155_TOKEN = "ERC1155_TOKEN",
    META_ERC20_WRAPPER = "META_ERC20_WRAPPER",
    NIFTYSWAP = "NIFTYSWAP",
    BRIDGE = "BRIDGE"
}
export interface Version {
    webrpcVersion: string;
    schemaVersion: string;
    schemaHash: string;
    appVersion: string;
}
export interface MetaTxn {
    contract: string;
    input: string;
    digest?: string;
}
export interface TxnObj {
    to: string;
    objs: Array<TxnObj>;
    txnStatus: string;
    txnRevertReason: string;
    logs?: Array<any>;
}
export interface MetaTxnReceipt {
    id: string;
    status: string;
    revertReason: string;
    gasUsed: number;
    txnReceipt: string;
    batch: TxnObj;
}
export interface RuntimeStatus {
    healthOK: boolean;
}
export interface SequenceContext {
    factory: string;
    mainModule: string;
    mainModuleUpgradable: string;
    guestModule: string;
    utils: string;
}
export interface WalletConfig {
    address: string;
    signers: Array<WalletSigner>;
    threshold: number;
    chainId?: number;
}
export interface WalletSigner {
    address: string;
    weight: number;
}
export interface FeeOption {
    token: FeeToken;
    to: string;
    value: string;
    gasLimit: number;
}
export interface FeeToken {
    chainId: number;
    name: string;
    symbol: string;
    type: ContractType;
    decimals?: number;
    logoURL: string;
    contractAddress?: string;
    originAddress?: string;
    tokenID?: string;
}
export interface RelayerService {
    ping(headers?: object): Promise<PingReturn>;
    version(headers?: object): Promise<VersionReturn>;
    runtimeStatus(headers?: object): Promise<RuntimeStatusReturn>;
    getSequenceContext(headers?: object): Promise<GetSequenceContextReturn>;
    getChainID(headers?: object): Promise<GetChainIDReturn>;
    sendMetaTxn(args: SendMetaTxnArgs, headers?: object): Promise<SendMetaTxnReturn>;
    getMetaTxnNonce(args: GetMetaTxnNonceArgs, headers?: object): Promise<GetMetaTxnNonceReturn>;
    getMetaTxnReceipt(args: GetMetaTxnReceiptArgs, headers?: object): Promise<GetMetaTxnReceiptReturn>;
    tokenFee(headers?: object): Promise<TokenFeeReturn>;
    updateMetaTxnGasLimits(args: UpdateMetaTxnGasLimitsArgs, headers?: object): Promise<UpdateMetaTxnGasLimitsReturn>;
    feeTokens(headers?: object): Promise<FeeTokensReturn>;
    getMetaTxnNetworkFeeOptions(args: GetMetaTxnNetworkFeeOptionsArgs, headers?: object): Promise<GetMetaTxnNetworkFeeOptionsReturn>;
    pushMetaTxn(args: PushMetaTxnArgs, headers?: object): Promise<PushMetaTxnReturn>;
    getMetaTxn(args: GetMetaTxnArgs, headers?: object): Promise<GetMetaTxnReturn>;
}
export interface PingArgs {
}
export interface PingReturn {
    status: boolean;
}
export interface VersionArgs {
}
export interface VersionReturn {
    version: Version;
}
export interface RuntimeStatusArgs {
}
export interface RuntimeStatusReturn {
    status: RuntimeStatus;
}
export interface GetSequenceContextArgs {
}
export interface GetSequenceContextReturn {
    data: SequenceContext;
}
export interface GetChainIDArgs {
}
export interface GetChainIDReturn {
    chainID: number;
}
export interface SendMetaTxnArgs {
    call: MetaTxn;
}
export interface SendMetaTxnReturn {
    status: boolean;
    txnHash: string;
}
export interface GetMetaTxnNonceArgs {
    walletContractAddress: string;
    space?: string;
}
export interface GetMetaTxnNonceReturn {
    nonce: string;
}
export interface GetMetaTxnReceiptArgs {
    metaTxID: string;
}
export interface GetMetaTxnReceiptReturn {
    receipt: MetaTxnReceipt;
}
export interface TokenFeeArgs {
}
export interface TokenFeeReturn {
    isFee: boolean;
    fee: string;
}
export interface UpdateMetaTxnGasLimitsArgs {
    walletAddress: string;
    payload: string;
}
export interface UpdateMetaTxnGasLimitsReturn {
    payload: string;
}
export interface FeeTokensArgs {
}
export interface FeeTokensReturn {
    isFeeRequired: boolean;
    tokens: Array<FeeToken>;
}
export interface GetMetaTxnNetworkFeeOptionsArgs {
    walletConfig: WalletConfig;
    payload: string;
}
export interface GetMetaTxnNetworkFeeOptionsReturn {
    options: Array<FeeOption>;
}
export interface PushMetaTxnArgs {
    call: MetaTxn;
}
export interface PushMetaTxnReturn {
    status: boolean;
}
export interface GetMetaTxnArgs {
    call: MetaTxn;
}
export interface GetMetaTxnReturn {
    status: boolean;
    signedMetaTxn: MetaTxn;
}
export declare class RelayerService implements RelayerService {
    protected hostname: string;
    protected fetch: Fetch;
    protected path: string;
    constructor(hostname: string, fetch: Fetch);
    private url;
    ping: (headers?: object | undefined) => Promise<PingReturn>;
    version: (headers?: object | undefined) => Promise<VersionReturn>;
    runtimeStatus: (headers?: object | undefined) => Promise<RuntimeStatusReturn>;
    getSequenceContext: (headers?: object | undefined) => Promise<GetSequenceContextReturn>;
    getChainID: (headers?: object | undefined) => Promise<GetChainIDReturn>;
    sendMetaTxn: (args: SendMetaTxnArgs, headers?: object | undefined) => Promise<SendMetaTxnReturn>;
    getMetaTxnNonce: (args: GetMetaTxnNonceArgs, headers?: object | undefined) => Promise<GetMetaTxnNonceReturn>;
    getMetaTxnReceipt: (args: GetMetaTxnReceiptArgs, headers?: object | undefined) => Promise<GetMetaTxnReceiptReturn>;
    tokenFee: (headers?: object | undefined) => Promise<TokenFeeReturn>;
    updateMetaTxnGasLimits: (args: UpdateMetaTxnGasLimitsArgs, headers?: object | undefined) => Promise<UpdateMetaTxnGasLimitsReturn>;
    feeTokens: (headers?: object | undefined) => Promise<FeeTokensReturn>;
    getMetaTxnNetworkFeeOptions: (args: GetMetaTxnNetworkFeeOptionsArgs, headers?: object | undefined) => Promise<GetMetaTxnNetworkFeeOptionsReturn>;
    pushMetaTxn: (args: PushMetaTxnArgs, headers?: object | undefined) => Promise<PushMetaTxnReturn>;
    getMetaTxn: (args: GetMetaTxnArgs, headers?: object | undefined) => Promise<GetMetaTxnReturn>;
}
export interface WebRPCError extends Error {
    code: string;
    msg: string;
    status: number;
}
export declare type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>;
