export declare const WebRPCVersion = "v1";
export declare const WebRPCSchemaVersion = "v0.1.0";
export declare const WebRPCSchemaHash = "531b5f9feca9a458710a75e770b5ad8f4bdb77e2";
export declare enum SortOrder {
    DESC = "DESC",
    ASC = "ASC"
}
export interface Balance {
    id: number;
    contractAddress: string;
    contractAlias: string;
    accountAddress: string;
    tokenID: string;
    amountLatest: string;
    amountConfirmed: string;
    blockHash: string;
    blockHeight: number;
    updatedAt: string;
    createdAt: string;
}
export interface EtherBalance {
    accountAddress: string;
    amountLatestWei: string;
    amountConfirmedWei: string;
    lastBlockHeight: number;
}
export interface GasReceipt {
    gasFee: string;
    gasLimit: Array<string>;
}
export interface TokenTransfer {
    recipientAddress: string;
    tokenID: string;
    tokenAmount: string;
}
export interface RuntimeStatus {
    chainState: Array<any>;
}
export interface Version {
    webrpcVersion: string;
    schemaVersion: string;
    schemaHash: string;
    appVersion: string;
}
export interface Page {
    pageSize?: number;
    page?: number;
    totalRecords?: number;
    column?: string;
    before?: any;
    after?: any;
    sort?: Array<SortBy>;
}
export interface SortBy {
    column: string;
    order: SortOrder;
}
export interface ChaindService {
    ping(headers?: object): Promise<PingReturn>;
    version(headers?: object): Promise<VersionReturn>;
    runtimeStatus(headers?: object): Promise<RuntimeStatusReturn>;
    etherBalance(args: EtherBalanceArgs, headers?: object): Promise<EtherBalanceReturn>;
    contractBalanceOf(args: ContractBalanceOfArgs, headers?: object): Promise<ContractBalanceOfReturn>;
    contractBalanceOfTokenIDs(args: ContractBalanceOfTokenIDsArgs, headers?: object): Promise<ContractBalanceOfTokenIDsReturn>;
    contractBalanceSync(args: ContractBalanceSyncArgs, headers?: object): Promise<ContractBalanceSyncReturn>;
    contractBalanceSyncTokenIDs(args: ContractBalanceSyncTokenIDsArgs, headers?: object): Promise<ContractBalanceSyncTokenIDsReturn>;
    contractCall(args: ContractCallArgs, headers?: object): Promise<ContractCallReturn>;
}
export interface PingArgs {
}
export interface PingReturn {
    status: boolean;
}
export interface VersionArgs {
}
export interface VersionReturn {
    version: Version;
}
export interface RuntimeStatusArgs {
}
export interface RuntimeStatusReturn {
    status: RuntimeStatus;
}
export interface EtherBalanceArgs {
    accountAddress: string;
}
export interface EtherBalanceReturn {
    balance: EtherBalance;
}
export interface ContractBalanceOfArgs {
    contractHandle: string;
    accountAddress: string;
}
export interface ContractBalanceOfReturn {
    status: boolean;
    balances: Array<Balance>;
}
export interface ContractBalanceOfTokenIDsArgs {
    contractHandle: string;
    accountAddress: string;
    tokenIDs: Array<string>;
}
export interface ContractBalanceOfTokenIDsReturn {
    status: boolean;
    balances: Array<Balance>;
}
export interface ContractBalanceSyncArgs {
    contractHandle: string;
    accountAddress: string;
}
export interface ContractBalanceSyncReturn {
    status: boolean;
    balances: Array<Balance>;
}
export interface ContractBalanceSyncTokenIDsArgs {
    contractHandle: string;
    accountAddress: string;
    tokenIDs: Array<string>;
}
export interface ContractBalanceSyncTokenIDsReturn {
    status: boolean;
    balances: Array<Balance>;
}
export interface ContractCallArgs {
    contract: string;
    inputExpr: string;
    outputExpr: string;
    args: Array<string>;
}
export interface ContractCallReturn {
    returns: Array<string>;
}
export declare class ChaindService implements ChaindService {
    protected hostname: string;
    protected fetch: Fetch;
    protected path: string;
    constructor(hostname: string, fetch: Fetch);
    private url;
    ping: (headers?: object | undefined) => Promise<PingReturn>;
    version: (headers?: object | undefined) => Promise<VersionReturn>;
    runtimeStatus: (headers?: object | undefined) => Promise<RuntimeStatusReturn>;
    etherBalance: (args: EtherBalanceArgs, headers?: object | undefined) => Promise<EtherBalanceReturn>;
    contractBalanceOf: (args: ContractBalanceOfArgs, headers?: object | undefined) => Promise<ContractBalanceOfReturn>;
    contractBalanceOfTokenIDs: (args: ContractBalanceOfTokenIDsArgs, headers?: object | undefined) => Promise<ContractBalanceOfTokenIDsReturn>;
    contractBalanceSync: (args: ContractBalanceSyncArgs, headers?: object | undefined) => Promise<ContractBalanceSyncReturn>;
    contractBalanceSyncTokenIDs: (args: ContractBalanceSyncTokenIDsArgs, headers?: object | undefined) => Promise<ContractBalanceSyncTokenIDsReturn>;
    contractCall: (args: ContractCallArgs, headers?: object | undefined) => Promise<ContractCallReturn>;
}
export interface WebRPCError extends Error {
    code: string;
    msg: string;
    status: number;
}
export declare type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>;
