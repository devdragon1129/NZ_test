"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getIsFeatureEnabled = exports.getError = exports.getLoading = exports.getData = exports.getState = void 0;
const getState = (state) => state.features;
exports.getState = getState;
const getData = (state) => exports.getState(state).data;
exports.getData = getData;
const getLoading = (state) => exports.getState(state).loading;
exports.getLoading = getLoading;
const getError = (state) => exports.getState(state).error;
exports.getError = getError;
/**
 * Helper to get whether a feature flag is enabled or disabled.
 * It will first look into your env file for the feature flag, if it is not defined there,
 * it will look it in the requested and stored features data.
 * The env key will be determined from the application and the flag. For example, if the
 * application is "explorer" and the flag is "some-crazy-feature", it will look
 * for it as REACT_APP_FF_EXPLORER_SOME_CRAZY_FEATURE.
 *
 * @param state Redux state of the application.
 * @param app Appplication name.
 * @param feature Feature key without the application name prefix. For example for the "builder-feature".
 * You need to provide only "feature"
 *
 * @returns Whether the feature is enabled or not.
 */
const getIsFeatureEnabled = (state, app, feature) => {
    const envValue = getFromEnv(app, feature);
    if (envValue !== null) {
        return envValue;
    }
    const features = exports.getData(state);
    const appFeatures = features[app];
    if (!appFeatures) {
        throw new Error(`Application "${app}" not found`);
    }
    return !!appFeatures.flags[`${app}-${feature}`];
};
exports.getIsFeatureEnabled = getIsFeatureEnabled;
const getFromEnv = (application, flag) => {
    const envify = (word) => word.toUpperCase().replace(/-/g, '_');
    const key = `REACT_APP_FF_${envify(application)}_${envify(flag)}`;
    const value = process.env[key];
    return !value || value === '' ? null : value === '1' ? true : false;
};
//# sourceMappingURL=selectors.js.map