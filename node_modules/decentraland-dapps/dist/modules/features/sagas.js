"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFetchApplicationFeaturesIntervalGenerator = exports.featuresSaga = void 0;
const effects_1 = require("redux-saga/effects");
const actions_1 = require("./actions");
const utils_1 = require("./utils");
/**
 * Include this saga to be able to fetch feature flags for different applications.
 * By providing the polling object in the config, this saga will take care of polling every
 * certain amount of time the feature flags for the defined applications.
 * @param config Configuration for the saga
 */
function* featuresSaga(config) {
    const { polling } = config;
    yield effects_1.takeEvery(actions_1.FETCH_APPLICATION_FEATURES_REQUEST, handleFetchApplicationFeaturesRequest);
    if (polling) {
        yield effects_1.spawn(exports.getFetchApplicationFeaturesIntervalGenerator(polling));
    }
}
exports.featuresSaga = featuresSaga;
function* handleFetchApplicationFeaturesRequest(action) {
    const { apps } = action.payload;
    try {
        const features = yield effects_1.call(utils_1.fetchApplicationFeatures, apps);
        yield effects_1.put(actions_1.fetchApplicationFeaturesSuccess(apps, features));
    }
    catch (e) {
        yield effects_1.put(actions_1.fetchApplicationFeaturesFailure(apps, e.message));
    }
}
const getFetchApplicationFeaturesIntervalGenerator = (polling) => {
    return function* () {
        while (true) {
            // Fetch application features for the configured applications.
            yield effects_1.put(actions_1.fetchApplicationFeaturesRequest(polling.apps));
            // Wait for the request to finish so there is no request overlap.
            yield effects_1.race({
                success: effects_1.take(actions_1.FETCH_APPLICATION_FEATURES_SUCCESS),
                failure: effects_1.take(actions_1.FETCH_APPLICATION_FEATURES_FAILURE)
            });
            // Wait for a certain amount of time before making the next request.
            yield effects_1.delay(polling.delay);
        }
    };
};
exports.getFetchApplicationFeaturesIntervalGenerator = getFetchApplicationFeaturesIntervalGenerator;
//# sourceMappingURL=sagas.js.map