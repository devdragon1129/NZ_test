import * as React from 'react';
import { PreviewCamera, PreviewEmote, PreviewOptions } from '@dcl/schemas/dist/dapps/preview';
import { WearableBodyShape } from '@dcl/schemas/dist/platform/wearables';
import './WearablePreview.css';
export declare type WearablePreviewProps = {
    id?: string;
    contractAddress?: string;
    tokenId?: string;
    itemId?: string;
    profile?: string;
    urns?: string[];
    urls?: string[];
    base64s?: string[];
    skin?: string;
    hair?: string;
    eyes?: string;
    emote?: PreviewEmote;
    bodyShape?: WearableBodyShape;
    camera?: PreviewCamera;
    autoRotateSpeed?: number;
    zoom?: number;
    offsetX?: number;
    offsetY?: number;
    offsetZ?: number;
    wheelZoom?: number;
    wheelPrecision?: number;
    wheelStart?: number;
    transparentBackground?: boolean;
    dev?: boolean;
    hotreload?: boolean;
    baseUrl?: string;
    onLoad?: () => void;
    onError?: (error: Error) => void;
    onUpdate?: (options: PreviewOptions) => void;
};
declare type WearablePreviewState = {
    url?: string;
    isReady: boolean;
    pendingOptions: PreviewOptions | null;
    lastOptions: PreviewOptions | null;
};
export declare class WearablePreview extends React.PureComponent<WearablePreviewProps> {
    static defaultProps: {
        dev: boolean;
        baseUrl: string;
        onLoad: () => void;
        onError: () => void;
    };
    state: WearablePreviewState;
    iframe: HTMLIFrameElement | null;
    getUrl: () => string;
    getOptions: () => PreviewOptions;
    handleMessage: (event: MessageEvent) => void;
    handleUpdate: () => void;
    sendUpdate: (options: PreviewOptions) => void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(): void;
    refIframe: (iframe: HTMLIFrameElement | null) => void;
    render(): JSX.Element;
}
export {};
