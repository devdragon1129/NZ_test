"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function isLocalStorageAvailable() {
    try {
        return typeof localStorage !== 'undefined' && 'setItem' in localStorage && typeof localStorage.setItem === 'function';
    }
    catch (e) {
        return false;
    }
}
/**
 * Returns a new `StorageEngine` which saves data to the browser's LocalStorage.
 *
 * Throws if `localStorage` is not present on the `window` object.
 */
exports.default = (key, replacer, reviver) => {
    if (!isLocalStorageAvailable()) {
        throw new Error('Missing LocalStorage in window context');
    }
    return {
        load() {
            return __awaiter(this, void 0, void 0, function* () {
                const jsonState = localStorage.getItem(key);
                return JSON.parse(jsonState, reviver) || {};
            });
        },
        save(state) {
            return __awaiter(this, void 0, void 0, function* () {
                const jsonState = JSON.stringify(state, replacer);
                localStorage.setItem(key, jsonState);
            });
        }
    };
};
