"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const isFunction_1 = __importDefault(require("lodash/fp/isFunction"));
const isObject_1 = __importDefault(require("lodash/fp/isObject"));
const actions_1 = require("./actions");
const warnings_1 = require("./warnings");
function defaultTransformer(state) {
    return state;
}
function isValidAction(action) {
    const isFunc = isFunction_1.default(action);
    const isObj = isObject_1.default(action);
    const hasType = isObj && action.hasOwnProperty('type');
    if (!isFunc && isObj && hasType) {
        return true;
    }
    if (process.env.NODE_ENV !== 'production') {
        if (isFunc) {
            console.warn(warnings_1.receivedFunctionalAction());
        }
        else if (!isObj) {
            console.warn(warnings_1.receivedNonObjectAction(action));
        }
        else if (!hasType) {
            console.warn(warnings_1.missingActionType());
        }
    }
    return false;
}
function createMiddleware(engine, options = {}) {
    const opts = Object.assign({ disableDispatchSaveAction: false }, options);
    return (store) => {
        const { dispatch, getState } = store;
        return next => (action) => {
            const result = next(action);
            if (!isValidAction(action)) {
                return result;
            }
            const isOwnAction = action.type === actions_1.SAVE || action.type === actions_1.LOAD;
            const isBlacklisted = isOwnAction || (options.filterAction && !options.filterAction(action));
            if (!isBlacklisted) {
                const transform = options.transform || defaultTransformer;
                const saveState = transform(getState());
                const saveAction = actions_1.save(saveState);
                if (process.env.NODE_ENV !== 'production') {
                    if (!saveAction.meta) {
                        saveAction.meta = {};
                    }
                    saveAction.meta.origin = action;
                }
                const dispatchSave = () => dispatch(saveAction);
                engine.save(saveState).then(() => {
                    if (opts.disableDispatchSaveAction === false) {
                        return dispatchSave();
                    }
                }, e => {
                    if (options.onError) {
                        options.onError(e, store);
                    }
                    else {
                        if (process.env.NODE_ENV !== 'production') {
                            console.warn(warnings_1.defaultErrorHandler());
                        }
                        console.error(e);
                    }
                });
            }
            return result;
        };
    };
}
exports.createMiddleware = createMiddleware;
