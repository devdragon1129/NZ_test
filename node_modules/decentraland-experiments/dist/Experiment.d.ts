import Variant from './Variant';
import { SegmentEvent } from './types';
/**
 *
 */
export declare type ExperimentTracker<Value, EventProps extends {} = {}> = (event: SegmentEvent<EventProps>, currentExperiment: Experiment<Value>) => void;
/**
 *
 */
export interface ExperimentOptions<Value, State extends {} = {}, EventProps extends {} = {}> {
    /**
     * name reported to segment
     */
    name: string;
    /**
     * list of values available for the experiment
     */
    variants: Array<Variant<Value>>;
    /**
     * initial state for the experiment
     */
    initialState?: () => State;
    /**
     * this function will be call on each segment event allowing to modify
     * the experiment's state using `currentExperiment.setState({ ... })`
     * and complete the experiment using `currentExperiment.complete()`
     */
    track: ExperimentTracker<Value, EventProps>;
}
/**
 *
 */
export default class Experiment<Value, State extends {} = {}, EventProps extends {} = {}> {
    private options;
    private completed;
    private active;
    private activeVariant;
    constructor(options: ExperimentOptions<Value, State, EventProps>);
    /**
     * Name of the current Experiment
     */
    readonly name: string;
    /**
     * Value of the current variation
     */
    readonly value: Value | undefined;
    /**
     *
     */
    readonly variant: Variant<Value | undefined>;
    /**
     * Experiment state, allow to collect extra data
     */
    state: State;
    /**
     * Finish the test, marks it as completed and dispatch
     * the `experiment_conversion` event with the final state to segment
     */
    complete(): void;
    /**
     * Activate the current experiment
     */
    activate(forceVariant?: string): void;
    /**
     * Random return a varia`nt
     */
    getRandomVariant(): Variant<Value | undefined>;
    getVariant(name: string): Variant<Value | undefined> | undefined;
    /**
     * Return all available values
     */
    getAllVariants(): Variant<Value>[];
    /**
     * Modify de state using `Object.assign`
     */
    setState(patchState: Partial<State>): void;
    /**
     * Return if the experiment is completed
     */
    isCompleted(): boolean;
    /**
     * Return if the experiment is active
     */
    isActive(): boolean;
    /**
     * Execute the tracker
     */
    track(segmentEvent: SegmentEvent<EventProps>): void;
}
