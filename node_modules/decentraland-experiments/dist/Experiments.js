"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var window_1 = __importDefault(require("./window"));
var Variant_1 = require("./Variant");
exports.PERSIST_KEY = 'dcl_experiments';
var Experiments = /** @class */ (function () {
    /**
     * @param experiments - list of experiment running
     * @param _storage - to persist the same result for the user
     * @param _analytics - segment api
     */
    function Experiments(experiments, _storage, _analytics) {
        var _this = this;
        this.experiments = experiments;
        this._storage = _storage;
        this._analytics = _analytics;
        /**
         * Semaphore to handle localStorage or sessionStorage changes
         */
        this.localStorageChange = false;
        /**
         * list of active experiments
         */
        this.activeExperiments = new Set();
        /**
         * previous resolved variants
         */
        this.variantForExperiments = new Map();
        this.handleStorageChange = function () {
            if (_this.localStorageChange) {
                _this.localStorageChange = false;
            }
            else {
                _this.loadPersisted();
            }
        };
        this.handleTrackEvent = function (name, properties) {
            if (properties === void 0) { properties = {}; }
            _this.emit({ type: 'track', name: name, properties: properties });
        };
        if (this.analytics) {
            this.analytics.on('track', this.handleTrackEvent);
        }
        else {
            console.warn("Analytics is not present in the project, experiments framework will not generate any report. Follow this guide to include it: https://segment.com/docs/sources/website/analytics.js/quickstart/");
        }
        this.loadPersisted();
        if (this.isBrowserStorage()) {
            window_1.default.addEventListener('storage', this.handleStorageChange);
        }
    }
    Object.defineProperty(Experiments.prototype, "storage", {
        get: function () {
            return this._storage || window_1.default.localStorage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Experiments.prototype, "analytics", {
        get: function () {
            return this._analytics || window_1.default.analytics || null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Persist methods
     */
    Experiments.prototype.persist = function () {
        if (this.isBrowserStorage()) {
            this.localStorageChange = true;
        }
        var entries = Array.from(this.variantForExperiments.entries());
        this.storage.setItem(exports.PERSIST_KEY, JSON.stringify(entries));
    };
    Experiments.prototype.persistVariant = function (experimentName, variantName) {
        if (this.variantForExperiments.get(experimentName) !== variantName) {
            this.variantForExperiments.set(experimentName, variantName);
            this.persist();
        }
    };
    Experiments.prototype.loadPersisted = function () {
        var e_1, _a;
        var persisted = this.storage.getItem(exports.PERSIST_KEY);
        if (persisted) {
            try {
                var entries = JSON.parse(persisted);
                if (Array.isArray(entries)) {
                    try {
                        for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
                            var entry = entries_1_1.value;
                            if (Array.isArray(entry) && entry.length === 2) {
                                var _b = __read(entry, 2), key = _b[0], value = _b[1];
                                this.variantForExperiments.set(key, value);
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
            catch (err) {
                console.error("Persisted experiments cannot be loaded: ", err, persisted);
            }
        }
    };
    Experiments.prototype.isBrowserStorage = function () {
        return (this.storage === window_1.default.localStorage ||
            this.storage === window_1.default.sessionStorage);
    };
    /**
     * Event tracking methods
     */
    Experiments.prototype.emit = function (event) {
        var e_2, _a;
        if (this.activeExperiments.size > 0) {
            try {
                for (var _b = __values(this.activeExperiments.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var experiment = _c.value;
                    try {
                        // Execute track safely
                        experiment.track(event);
                    }
                    catch (err) {
                        experiment.setState({
                            error_message: err.message
                        });
                        experiment.complete();
                        console.error("Error executing track method of \"" + experiment.name + "\": ", err, experiment);
                    }
                    this.checkCompleteExperiment(experiment);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    };
    // handlePageEvent = (name: string, properties: any) => {
    //   this.emit('page', name, properties)
    // }
    // handleIdentifyEvent = (name: string, properties: any) => {
    //   this.emit('identify', name, properties)
    // }
    /**
     * report experiment methods
     */
    Experiments.prototype.activateExperiment = function (experiment) {
        var persistedVariant = this.variantForExperiments.get(experiment.name);
        try {
            // Execute activate safely
            experiment.activate(persistedVariant);
        }
        catch (err) {
            experiment.complete();
            console.error("Error executing activate method of \"" + experiment.name + "\": ", err, experiment);
        }
        if (experiment.isActive()) {
            this.persistVariant(experiment.name, experiment.variant.name);
            this.activeExperiments.add(experiment);
            if (this.analytics && experiment.variant !== Variant_1.EmptyVariant) {
                this.analytics.track('experiment_show', {
                    experiment: experiment.name,
                    variation: experiment.variant.name
                });
            }
        }
    };
    Experiments.prototype.checkCompleteExperiment = function (experiment) {
        if (experiment.isCompleted()) {
            this.activeExperiments.delete(experiment);
            if (this.analytics) {
                var experimentState = experiment.state;
                this.analytics.track('experiment_conversion', __assign({ experiment: experiment.name, variation: experiment.variant.name }, experimentState));
            }
        }
    };
    /**
     * return instance of a experiment by id
     */
    Experiments.prototype.getExperiment = function (experimentId) {
        return this.experiments && this.experiments[experimentId];
    };
    /**
     * if there are any experiment active for `experimentId` return the testing value
     * otherwise return `defaultValue`
     */
    Experiments.prototype.getCurrentValueFor = function (experimentId, defaultValue) {
        if (this.experiments && this.experiments[experimentId]) {
            var experiment = this.experiments[experimentId];
            if (!experiment.isActive()) {
                this.activateExperiment(experiment);
            }
            if (experiment.value !== undefined) {
                return experiment.value;
            }
        }
        return defaultValue;
    };
    /**
     * return an array with all values available for `experimentId`
     */
    Experiments.prototype.getAllValuesFor = function (experimentId) {
        if (this.experiments && this.experiments[experimentId]) {
            var experiment = this.experiments[experimentId];
            return experiment
                .getAllVariants()
                .map(function (variant) { return variant.value; })
                .filter(function (value) { return value !== undefined; });
        }
        return [];
    };
    /**
     * detach all experiments from segment events
     */
    Experiments.prototype.detach = function () {
        var analytics = this.analytics;
        if (analytics) {
            analytics.off('track', this.handleTrackEvent);
        }
        if (this.isBrowserStorage()) {
            window_1.default.removeEventListener('storage', this.handleStorageChange);
        }
    };
    return Experiments;
}());
exports.default = Experiments;
//# sourceMappingURL=Experiments.js.map