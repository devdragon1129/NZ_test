/// <reference types="segment-analytics" />
import Experiment from './Experiment';
import { SegmentEvent } from './types';
export interface ExperimentMap {
    [experimentId: string]: Experiment<any>;
}
export declare type PersistedVariant = [string, string][];
export declare const PERSIST_KEY = "dcl_experiments";
export default class Experiments {
    private experiments;
    private _storage?;
    private _analytics?;
    /**
     * Semaphore to handle localStorage or sessionStorage changes
     */
    private localStorageChange;
    /**
     * list of active experiments
     */
    private activeExperiments;
    /**
     * previous resolved variants
     */
    private variantForExperiments;
    /**
     * @param experiments - list of experiment running
     * @param _storage - to persist the same result for the user
     * @param _analytics - segment api
     */
    constructor(experiments: ExperimentMap, _storage?: Storage | undefined, _analytics?: SegmentAnalytics.AnalyticsJS | null | undefined);
    readonly storage: Storage;
    readonly analytics: SegmentAnalytics.AnalyticsJS | null;
    /**
     * Persist methods
     */
    persist(): void;
    persistVariant(experimentName: string, variantName: string): void;
    loadPersisted(): void;
    isBrowserStorage(): boolean;
    handleStorageChange: () => void;
    /**
     * Event tracking methods
     */
    emit(event: SegmentEvent): void;
    handleTrackEvent: (name: string, properties?: any) => void;
    /**
     * report experiment methods
     */
    activateExperiment(experiment: Experiment<any>): void;
    checkCompleteExperiment(experiment: Experiment<any>): void;
    /**
     * return instance of a experiment by id
     */
    getExperiment<Value, State extends {} = {}, EventProps extends {} = {}>(experimentId: string): Experiment<Value, State, EventProps> | undefined;
    /**
     * if there are any experiment active for `experimentId` return the testing value
     * otherwise return `defaultValue`
     */
    getCurrentValueFor<Value>(experimentId: string, defaultValue: Value): Value;
    /**
     * return an array with all values available for `experimentId`
     */
    getAllValuesFor<Value>(experimentId: string): Value[];
    /**
     * detach all experiments from segment events
     */
    detach(): void;
}
