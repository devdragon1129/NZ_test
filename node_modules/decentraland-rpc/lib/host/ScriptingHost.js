import { TransportBasedServer } from './TransportBasedServer';
import { hasOwnSymbol } from '../common/core/SymbolShim';
const hasSymbol = typeof Symbol === 'function' && Symbol.for;
const apiNameSymbol = hasSymbol ? Symbol('pluginName') : 0xfea2;
const registeredAPIs = {};
var PrivateHelpers;
(function (PrivateHelpers) {
    function _registerAPI(apiName, api) {
        const hasName = hasOwnSymbol(api, apiNameSymbol);
        if (hasName) {
            throw new Error(`The API you are trying to register is already registered`);
        }
        if (apiName in registeredAPIs) {
            throw new Error(`The API ${apiName} is already registered`);
        }
        if (typeof api !== 'function') {
            throw new Error(`The API ${apiName} is not a class, it is of type ${typeof api}`);
        }
        ;
        api[apiNameSymbol] = apiName;
        registeredAPIs[apiName] = api;
    }
    PrivateHelpers._registerAPI = _registerAPI;
    function unmountAPI(api) {
        if (api.apiWillUnmount) {
            const promise = api.apiWillUnmount();
            if (promise && 'catch' in promise) {
                promise.catch(error => console.error('Error unmounting API', { api, error }));
            }
        }
    }
    PrivateHelpers.unmountAPI = unmountAPI;
    function mountAPI(api) {
        if (api.apiDidMount) {
            const promise = api.apiDidMount();
            if (promise && 'catch' in promise) {
                promise.catch(error => console.error('Error mounting API', { api, error }));
            }
        }
    }
    PrivateHelpers.mountAPI = mountAPI;
})(PrivateHelpers || (PrivateHelpers = {}));
export var ScriptingHostEvents;
(function (ScriptingHostEvents) {
    ScriptingHostEvents["systemWillUnmount"] = "systemWillUnmount";
    ScriptingHostEvents["systemWillEnable"] = "systemWillEnable";
    ScriptingHostEvents["systemDidUnmount"] = "systemDidUnmount";
})(ScriptingHostEvents || (ScriptingHostEvents = {}));
export function getAPIName(klass) {
    return klass[apiNameSymbol] || klass.name || null;
}
export function registerAPI(apiName) {
    return function (api) {
        PrivateHelpers._registerAPI(apiName, api);
    };
}
export class ScriptingHost extends TransportBasedServer {
    constructor(worker) {
        super(worker);
        this.unmounted = false;
        this.apiInstances = new Map();
        this.expose('LoadComponents', this.RPCLoadAPIs.bind(this));
    }
    static async fromTransport(transport) {
        return new ScriptingHost(transport);
    }
    enable() {
        this.emit(ScriptingHostEvents.systemWillEnable);
        this.apiInstances.forEach(PrivateHelpers.mountAPI);
        super.enable();
    }
    getAPIInstance(api) {
        if (typeof api === 'string') {
            if (this.apiInstances.has(api)) {
                return this.apiInstances.get(api);
            }
            if (api in registeredAPIs) {
                return this.initializeAPI(registeredAPIs[api]);
            }
            return null;
        }
        else if (typeof api === 'function') {
            const apiName = getAPIName(api);
            if (apiName !== null) {
                if (this.apiInstances.has(apiName)) {
                    return this.apiInstances.get(apiName);
                }
                return this.initializeAPI(api);
            }
        }
        throw Object.assign(new Error('Cannot get instance of the specified component'), { api });
    }
    unmount() {
        if (this.unmounted)
            return;
        this.notify('SIGKILL');
        this.emit(ScriptingHostEvents.systemWillUnmount);
        try {
            this.apiInstances.forEach(PrivateHelpers.unmountAPI);
            this.apiInstances.clear();
        }
        catch (e) {
            this.emit('error', e);
        }
        this.transport.close();
        this.emit(ScriptingHostEvents.systemDidUnmount);
        this.unmounted = true;
    }
    initializeAPI(ctor) {
        const apiName = getAPIName(ctor);
        if (apiName === null) {
            throw new Error('The plugin is not registered');
        }
        if (this.apiInstances.has(apiName)) {
            return this.apiInstances.get(apiName);
        }
        const apiOptions = {
            apiName,
            on: (event, handler) => this.on(`${apiName}.${event}`, handler),
            notify: (event, params) => this.notify(`${apiName}.${event}`, params),
            expose: (event, handler) => this.expose(`${apiName}.${event}`, handler),
            getAPIInstance: (name) => {
                return this.getAPIInstance(name);
            },
            system: this
        };
        const instance = ctor.factory ? ctor.factory(ctor, apiOptions) : new ctor(apiOptions);
        this.apiInstances.set(apiName, instance);
        if (this.isEnabled) {
            PrivateHelpers.mountAPI(instance);
        }
        return instance;
    }
    async RPCLoadAPIs(apiNames) {
        if (typeof apiNames !== 'object' || !(apiNames instanceof Array)) {
            throw new TypeError('RPCLoadComponents(names) name must be an array of strings');
        }
        const notFound = apiNames
            .map(name => ({ api: this.getAPIInstance(name), name }))
            .filter($ => $.api === null)
            .map($ => $.name);
        if (notFound.length) {
            const message = `Components not found ${notFound.join(',')}`;
            throw new TypeError(message);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,