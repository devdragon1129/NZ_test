import { EventDispatcher } from '../core/EventDispatcher';
export function MemoryTransport() {
    const onConnectList = [];
    let connected = false;
    const clientEd = new EventDispatcher();
    const serverEd = new EventDispatcher();
    function configureMemoryTransport(receiver, sender) {
        return {
            sendMessage(message) {
                sender.emit('message', message);
            },
            close() {
                sender.emit('close');
            },
            onMessage(handler) {
                receiver.on('message', handler);
            },
            onClose(handler) {
                receiver.on('close', handler);
            },
            onError(handler) {
                receiver.on('error', handler);
            },
            onConnect(handler) {
                if (connected == false) {
                    onConnectList.push(handler);
                }
            }
        };
    }
    const client = configureMemoryTransport(clientEd, serverEd);
    const server = configureMemoryTransport(serverEd, clientEd);
    clientEd.on('message', () => {
        if (connected === false) {
            onConnectList.forEach($ => $());
            onConnectList.length = 0;
            connected = true;
        }
    });
    return {
        client,
        server
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWVtb3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi90cmFuc3BvcnRzL01lbW9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFFekQsTUFBTSxVQUFVLGVBQWU7SUFDN0IsTUFBTSxhQUFhLEdBQWUsRUFBRSxDQUFBO0lBQ3BDLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQTtJQUVyQixNQUFNLFFBQVEsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFBO0lBQ3RDLE1BQU0sUUFBUSxHQUFHLElBQUksZUFBZSxFQUFFLENBQUE7SUFFdEMsU0FBUyx3QkFBd0IsQ0FBQyxRQUF5QixFQUFFLE1BQXVCO1FBQ2xGLE9BQU87WUFDTCxXQUFXLENBQUMsT0FBTztnQkFDakIsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUE7WUFDakMsQ0FBQztZQUVELEtBQUs7Z0JBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUN0QixDQUFDO1lBRUQsU0FBUyxDQUFDLE9BQU87Z0JBQ2YsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUE7WUFDakMsQ0FBQztZQUVELE9BQU8sQ0FBQyxPQUFPO2dCQUNiLFFBQVEsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFBO1lBQy9CLENBQUM7WUFFRCxPQUFPLENBQUMsT0FBTztnQkFDYixRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQTtZQUMvQixDQUFDO1lBRUQsU0FBUyxDQUFDLE9BQU87Z0JBQ2YsSUFBSSxTQUFTLElBQUksS0FBSyxFQUFFO29CQUN0QixhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO2lCQUM1QjtZQUNILENBQUM7U0FDRixDQUFBO0lBQ0gsQ0FBQztJQUVELE1BQU0sTUFBTSxHQUFHLHdCQUF3QixDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQTtJQUMzRCxNQUFNLE1BQU0sR0FBRyx3QkFBd0IsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUE7SUFHM0QsUUFBUSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1FBQzFCLElBQUksU0FBUyxLQUFLLEtBQUssRUFBRTtZQUN2QixhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtZQUMvQixhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtZQUN4QixTQUFTLEdBQUcsSUFBSSxDQUFBO1NBQ2pCO0lBQ0gsQ0FBQyxDQUFDLENBQUE7SUFFRixPQUFPO1FBQ0wsTUFBTTtRQUNOLE1BQU07S0FDUCxDQUFBO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjcmlwdGluZ1RyYW5zcG9ydCB9IGZyb20gJy4uL2pzb24tcnBjL3R5cGVzJ1xuaW1wb3J0IHsgRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnLi4vY29yZS9FdmVudERpc3BhdGNoZXInXG5cbmV4cG9ydCBmdW5jdGlvbiBNZW1vcnlUcmFuc3BvcnQoKSB7XG4gIGNvbnN0IG9uQ29ubmVjdExpc3Q6IEZ1bmN0aW9uW10gPSBbXVxuICBsZXQgY29ubmVjdGVkID0gZmFsc2VcblxuICBjb25zdCBjbGllbnRFZCA9IG5ldyBFdmVudERpc3BhdGNoZXIoKVxuICBjb25zdCBzZXJ2ZXJFZCA9IG5ldyBFdmVudERpc3BhdGNoZXIoKVxuXG4gIGZ1bmN0aW9uIGNvbmZpZ3VyZU1lbW9yeVRyYW5zcG9ydChyZWNlaXZlcjogRXZlbnREaXNwYXRjaGVyLCBzZW5kZXI6IEV2ZW50RGlzcGF0Y2hlcik6IFNjcmlwdGluZ1RyYW5zcG9ydCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHNlbmRNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICAgICAgc2VuZGVyLmVtaXQoJ21lc3NhZ2UnLCBtZXNzYWdlKVxuICAgICAgfSxcblxuICAgICAgY2xvc2UoKSB7XG4gICAgICAgIHNlbmRlci5lbWl0KCdjbG9zZScpXG4gICAgICB9LFxuXG4gICAgICBvbk1lc3NhZ2UoaGFuZGxlcikge1xuICAgICAgICByZWNlaXZlci5vbignbWVzc2FnZScsIGhhbmRsZXIpXG4gICAgICB9LFxuXG4gICAgICBvbkNsb3NlKGhhbmRsZXIpIHtcbiAgICAgICAgcmVjZWl2ZXIub24oJ2Nsb3NlJywgaGFuZGxlcilcbiAgICAgIH0sXG5cbiAgICAgIG9uRXJyb3IoaGFuZGxlcikge1xuICAgICAgICByZWNlaXZlci5vbignZXJyb3InLCBoYW5kbGVyKVxuICAgICAgfSxcblxuICAgICAgb25Db25uZWN0KGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKGNvbm5lY3RlZCA9PSBmYWxzZSkge1xuICAgICAgICAgIG9uQ29ubmVjdExpc3QucHVzaChoYW5kbGVyKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY2xpZW50ID0gY29uZmlndXJlTWVtb3J5VHJhbnNwb3J0KGNsaWVudEVkLCBzZXJ2ZXJFZClcbiAgY29uc3Qgc2VydmVyID0gY29uZmlndXJlTWVtb3J5VHJhbnNwb3J0KHNlcnZlckVkLCBjbGllbnRFZClcblxuICAvLyB3ZSBzZW5kIGEgUlBDLkVuYWJsZSBtZXNzYWdlIHdoZW4gdGhlIHNlcnZlciBnZXRzIGNvbm5lY3RlZCBhcyBzdGFydCBzaWduYWxcbiAgY2xpZW50RWQub24oJ21lc3NhZ2UnLCAoKSA9PiB7XG4gICAgaWYgKGNvbm5lY3RlZCA9PT0gZmFsc2UpIHtcbiAgICAgIG9uQ29ubmVjdExpc3QuZm9yRWFjaCgkID0+ICQoKSlcbiAgICAgIG9uQ29ubmVjdExpc3QubGVuZ3RoID0gMFxuICAgICAgY29ubmVjdGVkID0gdHJ1ZVxuICAgIH1cbiAgfSlcblxuICByZXR1cm4ge1xuICAgIGNsaWVudCxcbiAgICBzZXJ2ZXJcbiAgfVxufVxuIl19