import { EventDispatcher } from '../core/EventDispatcher';
import { isPromiseLike } from '../core/isPromiseLike';
const errorColumns = { name: 1, message: 1, stack: 1, columnNumber: 1, fileName: 1, lineNumber: 1 };
function sanitizeError(error) {
    if (error instanceof Error) {
        const ret = Object.assign({}, error);
        for (let i in errorColumns) {
            ret[i] = error[i];
        }
        return ret;
    }
    else {
        return error;
    }
}
export class Server extends EventDispatcher {
    constructor(opts = {}) {
        super();
        this._exposedMethodsMap = new Map();
        this._consoleLog = false;
        this._isEnabled = false;
        this.setLogging(opts);
    }
    get isEnabled() {
        return this._isEnabled;
    }
    on(method, callback, once) {
        return super.on(method, callback, once);
    }
    once(method, callback) {
        return super.once(method, callback);
    }
    setLogging({ logConsole } = {}) {
        this._consoleLog = !!logConsole;
    }
    expose(method, handler) {
        this._exposedMethodsMap.set(method, handler);
    }
    notify(method, params) {
        if (typeof params !== 'undefined' && typeof params !== 'object') {
            throw new Error(`Server#notify Params must be structured data (Array | Object) got ${JSON.stringify(params)}`);
        }
        const clients = this.getAllClients();
        if (clients) {
            for (let client of clients) {
                this._send(client, { method, params, jsonrpc: '2.0' });
            }
        }
        else {
            throw new Error('Server does not support broadcasting. No "getAllClients: ClientType[]" returned null');
        }
    }
    enable() {
        if (!this._isEnabled) {
            this._isEnabled = true;
            this.notify('RPC.Enabled');
        }
    }
    disable() {
        if (this._isEnabled) {
            this._isEnabled = false;
        }
    }
    processMessage(from, messageStr) {
        this._logMessage(messageStr, 'receive');
        let request;
        try {
            if (typeof messageStr === 'string' && messageStr.charAt(0) === '{') {
                request = JSON.parse(messageStr);
            }
            else {
                throw new Error(`Unable to parse message ${JSON.stringify(messageStr)}`);
            }
        }
        catch (e) {
            return this._sendError(from, null, -32700, e);
        }
        if (request && request.method && typeof request.method === 'string') {
            if (request.id && typeof request.id === 'number') {
                const handler = this._exposedMethodsMap.get(request.method);
                if (handler) {
                    if (request.params && typeof request.params !== 'object') {
                        this._sendError(from, request, 32602, new Error('params is not an Array or Object'));
                    }
                    else {
                        try {
                            const result = request.params instanceof Array
                                ? handler.apply(this, request.params)
                                : handler.call(this, request.params);
                            if (isPromiseLike(result)) {
                                result
                                    .then((actualResult) => {
                                    this._send(from, {
                                        jsonrpc: '2.0',
                                        id: request.id,
                                        result: typeof actualResult === 'undefined' ? null : actualResult
                                    });
                                })
                                    .catch((error) => {
                                    this._sendError(from, request, -32603, error);
                                });
                            }
                            else {
                                this._send(from, {
                                    jsonrpc: '2.0',
                                    id: request.id,
                                    result: typeof result === 'undefined' ? null : result
                                });
                            }
                        }
                        catch (error) {
                            this._sendError(from, request, -32603, error);
                        }
                    }
                }
                else {
                    console.log(`Method ${request.method} not present in `, this._exposedMethodsMap);
                    this._sendError(from, request, -32601);
                }
            }
            else {
                this.emit(request.method, request.params);
            }
        }
        else {
            this._sendError(from, request, -32600);
        }
    }
    _logMessage(messageStr, direction) {
        if (this._consoleLog) {
            console.log(`${direction === 'send' ? 'Server > Client' : 'Server < Client'}`, messageStr);
        }
    }
    _send(receiver, message) {
        let messageStr;
        messageStr = JSON.stringify(message);
        this._logMessage(messageStr, 'send');
        this.sendMessage(receiver, messageStr);
    }
    _sendError(receiver, request, errorCode, error) {
        try {
            this._send(receiver, {
                jsonrpc: '2.0',
                id: (request && request.id) || -1,
                error: this._errorFromCode(errorCode, sanitizeError(error), request && request.method)
            });
        }
        catch (error) {
        }
    }
    _errorFromCode(code, data = null, method = null) {
        let message = '';
        switch (code) {
            case -32603:
                message = `InternalError: Internal Error when calling '${method}'`;
                break;
            case -32601:
                message = `MethodNotFound: '${method}' wasn't found`;
                break;
            case -32600:
                message = 'InvalidRequest: JSON sent is not a valid request object';
                break;
            case -32700:
                message = 'ParseError: invalid JSON received';
                break;
        }
        return { code, message, data };
    }
}
//# sourceMappingURL=data:application/json;base64,