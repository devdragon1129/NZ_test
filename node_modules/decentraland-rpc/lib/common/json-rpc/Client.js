import { EventDispatcher } from '../core/EventDispatcher';
export class Client extends EventDispatcher {
    constructor(opts) {
        super();
        this._responsePromiseMap = new Map();
        this._nextMessageId = 0;
        this._consoleLog = false;
        this._requestQueue = [];
        this._connected = false;
        this.setLogging(opts);
    }
    processMessage(messageStr) {
        let message;
        if (typeof messageStr === 'string') {
            this._logMessage(messageStr, 'receive');
            try {
                message = JSON.parse(messageStr);
            }
            catch (e) {
                return this.emit('error', e);
            }
        }
        else {
            message = messageStr;
        }
        if (!message) {
            this.emit('error', new Error(`Message cannot be null, empty or undefined`));
        }
        else if (message.id) {
            if (this._responsePromiseMap.has(message.id)) {
                const promise = this._responsePromiseMap.get(message.id);
                this._responsePromiseMap.delete(message.id);
                if ('result' in message) {
                    promise.resolve(message.result);
                }
                else if ('error' in message) {
                    const error = Object.assign(new Error('Remote error'), message.error, (message.error && message.error.data) || {});
                    promise.reject(error);
                }
                else {
                    promise.reject(Object.assign(new Error(`Response must have result or error: ${messageStr}`), {
                        code: -32700
                    }));
                }
            }
            else {
                this.emit('error', new Error(`Response with id:${message.id} has no pending request`));
            }
        }
        else if (message.method) {
            this.emit(message.method, message.params);
        }
        else {
            this.emit('error', new Error(`Invalid message: ${messageStr}`));
        }
    }
    setLogging({ logConsole } = {}) {
        this._consoleLog = !!logConsole;
    }
    call(method, params) {
        if (typeof params !== 'undefined' && typeof params !== 'object') {
            throw new Error(`Client#call Params must be structured data (Array | Object) got ${JSON.stringify(params)}`);
        }
        const id = ++this._nextMessageId;
        const message = { id, method, params, jsonrpc: '2.0' };
        return new Promise((resolve, reject) => {
            try {
                this._responsePromiseMap.set(id, { resolve, reject });
                this._send(message);
            }
            catch (error) {
                return reject(error);
            }
        });
    }
    notify(method, params) {
        if (typeof params !== 'undefined' && typeof params !== 'object') {
            throw new Error(`Client#notify Params must be structured data (Array | Object) got ${JSON.stringify(params)}`);
        }
        this._send({ method, params, jsonrpc: '2.0' });
    }
    didConnect() {
        if (this._connected === false) {
            this._connected = true;
            this._sendQueuedRequests();
        }
    }
    _send(message) {
        this._requestQueue.push(JSON.stringify(message));
        this._sendQueuedRequests();
    }
    _sendQueuedRequests() {
        if (this._connected) {
            const queue = this._requestQueue.splice(0, this._requestQueue.length);
            for (let messageStr of queue) {
                this._logMessage(messageStr, 'send');
                this.sendMessage(messageStr);
            }
        }
    }
    _logMessage(message, direction) {
        if (this._consoleLog) {
            console.log(`Client ${direction === 'send' ? '>' : '<'}`, message.toString());
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9qc29uLXJwYy9DbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBT3pELE1BQU0sT0FBZ0IsTUFBTyxTQUFRLGVBQWU7SUFPbEQsWUFBWSxJQUEyQjtRQUNyQyxLQUFLLEVBQUUsQ0FBQTtRQVBELHdCQUFtQixHQUFxQyxJQUFJLEdBQUcsRUFBRSxDQUFBO1FBQ2pFLG1CQUFjLEdBQVcsQ0FBQyxDQUFBO1FBQzFCLGdCQUFXLEdBQVksS0FBSyxDQUFBO1FBQzVCLGtCQUFhLEdBQWEsRUFBRSxDQUFBO1FBQzVCLGVBQVUsR0FBRyxLQUFLLENBQUE7UUFJeEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN2QixDQUFDO0lBSU0sY0FBYyxDQUFDLFVBQWtFO1FBQ3RGLElBQUksT0FBb0QsQ0FBQTtRQUV4RCxJQUFJLE9BQU8sVUFBVSxLQUFLLFFBQVEsRUFBRTtZQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQTtZQUd2QyxJQUFJO2dCQUNGLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO2FBQ2pDO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQTthQUM3QjtTQUNGO2FBQU07WUFDTCxPQUFPLEdBQUcsVUFBVSxDQUFBO1NBQ3JCO1FBR0QsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUMsQ0FBQTtTQUM1RTthQUFNLElBQUksT0FBTyxDQUFDLEVBQUUsRUFBRTtZQUNyQixJQUFJLElB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RSxDQUFDLENBQUE7U0FDOUU7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudERpc3BhdGNoZXIgfSBmcm9tICcuLi9jb3JlL0V2ZW50RGlzcGF0Y2hlcidcbmltcG9ydCAqIGFzIEpzb25ScGMyIGZyb20gJy4vdHlwZXMnXG5cbi8qKlxuICogQ3JlYXRlcyBhIFJQQyBDbGllbnQuXG4gKiBJdCBpcyBpbnRlbnRpb25hbCB0aGF0IENsaWVudCBkb2VzIG5vdCBjcmVhdGUgYSBXZWJTb2NrZXQgb2JqZWN0IHNpbmNlIHdlIHByZWZlciBjb21wb3NhYmlsaXR5XG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDbGllbnQgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIgaW1wbGVtZW50cyBKc29uUnBjMi5JQ2xpZW50IHtcbiAgcHJpdmF0ZSBfcmVzcG9uc2VQcm9taXNlTWFwOiBNYXA8bnVtYmVyLCBKc29uUnBjMi5SZXNvbHZhYmxlPiA9IG5ldyBNYXAoKVxuICBwcml2YXRlIF9uZXh0TWVzc2FnZUlkOiBudW1iZXIgPSAwXG4gIHByaXZhdGUgX2NvbnNvbGVMb2c6IGJvb2xlYW4gPSBmYWxzZVxuICBwcml2YXRlIF9yZXF1ZXN0UXVldWU6IHN0cmluZ1tdID0gW11cbiAgcHJpdmF0ZSBfY29ubmVjdGVkID0gZmFsc2VcblxuICBjb25zdHJ1Y3RvcihvcHRzPzogSnNvblJwYzIuSUNsaWVudE9wdHMpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5zZXRMb2dnaW5nKG9wdHMpXG4gIH1cblxuICBhYnN0cmFjdCBzZW5kTWVzc2FnZShtZXNzYWdlOiBzdHJpbmcpOiB2b2lkXG5cbiAgcHVibGljIHByb2Nlc3NNZXNzYWdlKG1lc3NhZ2VTdHI6IHN0cmluZyB8IChKc29uUnBjMi5JUmVzcG9uc2UgJiBKc29uUnBjMi5JTm90aWZpY2F0aW9uKSkge1xuICAgIGxldCBtZXNzYWdlOiBKc29uUnBjMi5JUmVzcG9uc2UgJiBKc29uUnBjMi5JTm90aWZpY2F0aW9uXG5cbiAgICBpZiAodHlwZW9mIG1lc3NhZ2VTdHIgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLl9sb2dNZXNzYWdlKG1lc3NhZ2VTdHIsICdyZWNlaXZlJylcblxuICAgICAgLy8gRW5zdXJlIEpTT04gaXMgbm90IG1hbGZvcm1lZFxuICAgICAgdHJ5IHtcbiAgICAgICAgbWVzc2FnZSA9IEpTT04ucGFyc2UobWVzc2FnZVN0cilcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW1pdCgnZXJyb3InLCBlKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtZXNzYWdlID0gbWVzc2FnZVN0clxuICAgIH1cblxuICAgIC8vIENoZWNrIHRoYXQgbWVzc2FnZXMgaXMgd2VsbCBmb3JtZWRcbiAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoYE1lc3NhZ2UgY2Fubm90IGJlIG51bGwsIGVtcHR5IG9yIHVuZGVmaW5lZGApKVxuICAgIH0gZWxzZSBpZiAobWVzc2FnZS5pZCkge1xuICAgICAgaWYgKHRoaXMuX3Jlc3BvbnNlUHJvbWlzZU1hcC5oYXMobWVzc2FnZS5pZCkpIHtcbiAgICAgICAgLy8gUmVzb2x2ZSBwcm9taXNlIGZyb20gcGVuZGluZyBtZXNzYWdlXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSB0aGlzLl9yZXNwb25zZVByb21pc2VNYXAuZ2V0KG1lc3NhZ2UuaWQpIGFzIEpzb25ScGMyLlJlc29sdmFibGVcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VQcm9taXNlTWFwLmRlbGV0ZShtZXNzYWdlLmlkKVxuXG4gICAgICAgIGlmICgncmVzdWx0JyBpbiBtZXNzYWdlKSB7XG4gICAgICAgICAgcHJvbWlzZS5yZXNvbHZlKG1lc3NhZ2UucmVzdWx0KVxuICAgICAgICB9IGVsc2UgaWYgKCdlcnJvcicgaW4gbWVzc2FnZSkge1xuICAgICAgICAgIGNvbnN0IGVycm9yID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIG5ldyBFcnJvcignUmVtb3RlIGVycm9yJyksXG4gICAgICAgICAgICBtZXNzYWdlLmVycm9yLFxuICAgICAgICAgICAgKG1lc3NhZ2UuZXJyb3IgJiYgbWVzc2FnZS5lcnJvci5kYXRhKSB8fCB7fVxuICAgICAgICAgIClcbiAgICAgICAgICBwcm9taXNlLnJlamVjdChlcnJvcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9taXNlLnJlamVjdChcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24obmV3IEVycm9yKGBSZXNwb25zZSBtdXN0IGhhdmUgcmVzdWx0IG9yIGVycm9yOiAke21lc3NhZ2VTdHJ9YCksIHtcbiAgICAgICAgICAgICAgY29kZTogSnNvblJwYzIuRXJyb3JDb2RlLlBhcnNlRXJyb3JcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKGBSZXNwb25zZSB3aXRoIGlkOiR7bWVzc2FnZS5pZH0gaGFzIG5vIHBlbmRpbmcgcmVxdWVzdGApKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobWVzc2FnZS5tZXRob2QpIHtcbiAgICAgIC8vIFNlcnZlciBoYXMgc2VudCBhIG5vdGlmaWNhdGlvblxuICAgICAgdGhpcy5lbWl0KG1lc3NhZ2UubWV0aG9kLCBtZXNzYWdlLnBhcmFtcylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcihgSW52YWxpZCBtZXNzYWdlOiAke21lc3NhZ2VTdHJ9YCkpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBsb2dnaW5nIGZvciBhbGwgcmVjZWl2ZWQgYW5kIHNlbnQgbWVzc2FnZXNcbiAgICovXG4gIHB1YmxpYyBzZXRMb2dnaW5nKHsgbG9nQ29uc29sZSB9OiBKc29uUnBjMi5JTG9nT3B0cyA9IHt9KSB7XG4gICAgdGhpcy5fY29uc29sZUxvZyA9ICEhbG9nQ29uc29sZVxuICB9XG5cbiAgY2FsbChtZXRob2Q6IHN0cmluZyk6IFByb21pc2U8YW55PlxuICBjYWxsKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IHN0cmluZyk6IG5ldmVyXG4gIGNhbGwobWV0aG9kOiBzdHJpbmcsIHBhcmFtczogbnVtYmVyKTogbmV2ZXJcbiAgY2FsbChtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBib29sZWFuKTogbmV2ZXJcbiAgY2FsbChtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBudWxsKTogbmV2ZXJcbiAgY2FsbDxUPihtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBJdGVyYWJsZTxUPik6IFByb21pc2U8YW55PlxuICBjYWxsKG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pOiBQcm9taXNlPGFueT5cbiAgY2FsbChtZXRob2Q6IHN0cmluZywgcGFyYW1zPzogYW55KSB7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwYXJhbXMgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENsaWVudCNjYWxsIFBhcmFtcyBtdXN0IGJlIHN0cnVjdHVyZWQgZGF0YSAoQXJyYXkgfCBPYmplY3QpIGdvdCAke0pTT04uc3RyaW5naWZ5KHBhcmFtcyl9YClcbiAgICB9XG5cbiAgICBjb25zdCBpZCA9ICsrdGhpcy5fbmV4dE1lc3NhZ2VJZFxuICAgIGNvbnN0IG1lc3NhZ2U6IEpzb25ScGMyLklSZXF1ZXN0ID0geyBpZCwgbWV0aG9kLCBwYXJhbXMsIGpzb25ycGM6ICcyLjAnIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLl9yZXNwb25zZVByb21pc2VNYXAuc2V0KGlkLCB7IHJlc29sdmUsIHJlamVjdCB9KVxuICAgICAgICB0aGlzLl9zZW5kKG1lc3NhZ2UpXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBub3RpZnkobWV0aG9kOiBzdHJpbmcpOiB2b2lkXG4gIG5vdGlmeShtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBzdHJpbmcpOiBuZXZlclxuICBub3RpZnkobWV0aG9kOiBzdHJpbmcsIHBhcmFtczogbnVtYmVyKTogbmV2ZXJcbiAgbm90aWZ5KG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IGJvb2xlYW4pOiBuZXZlclxuICBub3RpZnkobWV0aG9kOiBzdHJpbmcsIHBhcmFtczogbnVsbCk6IG5ldmVyXG4gIG5vdGlmeTxUPihtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBJdGVyYWJsZTxUPik6IHZvaWRcbiAgbm90aWZ5KG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pOiB2b2lkXG4gIG5vdGlmeShtZXRob2Q6IHN0cmluZywgcGFyYW1zPzogYW55KTogdm9pZCB7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwYXJhbXMgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENsaWVudCNub3RpZnkgUGFyYW1zIG11c3QgYmUgc3RydWN0dXJlZCBkYXRhIChBcnJheSB8IE9iamVjdCkgZ290ICR7SlNPTi5zdHJpbmdpZnkocGFyYW1zKX1gKVxuICAgIH1cblxuICAgIHRoaXMuX3NlbmQoeyBtZXRob2QsIHBhcmFtcywganNvbnJwYzogJzIuMCcgfSlcbiAgfVxuXG4gIHByb3RlY3RlZCBkaWRDb25uZWN0KCkge1xuICAgIGlmICh0aGlzLl9jb25uZWN0ZWQgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLl9jb25uZWN0ZWQgPSB0cnVlXG4gICAgICB0aGlzLl9zZW5kUXVldWVkUmVxdWVzdHMoKVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3NlbmQobWVzc2FnZTogSnNvblJwYzIuSU5vdGlmaWNhdGlvbiB8IEpzb25ScGMyLklSZXF1ZXN0KSB7XG4gICAgdGhpcy5fcmVxdWVzdFF1ZXVlLnB1c2goSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpXG5cbiAgICB0aGlzLl9zZW5kUXVldWVkUmVxdWVzdHMoKVxuICB9XG5cbiAgcHJpdmF0ZSBfc2VuZFF1ZXVlZFJlcXVlc3RzKCkge1xuICAgIGlmICh0aGlzLl9jb25uZWN0ZWQpIHtcbiAgICAgIGNvbnN0IHF1ZXVlID0gdGhpcy5fcmVxdWVzdFF1ZXVlLnNwbGljZSgwLCB0aGlzLl9yZXF1ZXN0UXVldWUubGVuZ3RoKVxuICAgICAgZm9yIChsZXQgbWVzc2FnZVN0ciBvZiBxdWV1ZSkge1xuICAgICAgICB0aGlzLl9sb2dNZXNzYWdlKG1lc3NhZ2VTdHIsICdzZW5kJylcbiAgICAgICAgdGhpcy5zZW5kTWVzc2FnZShtZXNzYWdlU3RyKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2xvZ01lc3NhZ2UobWVzc2FnZTogc3RyaW5nLCBkaXJlY3Rpb246ICdzZW5kJyB8ICdyZWNlaXZlJykge1xuICAgIGlmICh0aGlzLl9jb25zb2xlTG9nKSB7XG4gICAgICBjb25zb2xlLmxvZyhgQ2xpZW50ICR7ZGlyZWN0aW9uID09PSAnc2VuZCcgPyAnPicgOiAnPCd9YCwgbWVzc2FnZS50b1N0cmluZygpKVxuICAgIH1cbiAgfVxufVxuIl19