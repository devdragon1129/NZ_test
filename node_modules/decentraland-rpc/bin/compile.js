#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const webpack = require("webpack");
const webpack_sources_1 = require("webpack-sources");
const globPkg = require("glob");
const rimraf = require("rimraf");
const fs = require("fs");
const path_1 = require("path");
const TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin');
const child_process_1 = require("child_process");
const os_1 = require("os");
const ProgressBar = require("progress");
const chalk_1 = require("chalk");
const packageJson = JSON.parse(fs.readFileSync(require.resolve('../package.json')).toString());
const isWatching = process.argv.some($ => $ === '--watch');
const instrumentCoverage = process.argv.some($ => $ === '--coverage') || process.env.NODE_ENV === 'coverage';
const isProduction = process.env.NODE_ENV !== 'development' && !isWatching && !instrumentCoverage;
const webWorkerTransport = path_1.resolve(__dirname, '../lib/common/transports/WebWorker');
const entryPointWebWorker = (filename) => `
import { WebWorkerTransport } from ${JSON.stringify(webWorkerTransport)}
const imported = require(${JSON.stringify(filename)})

if (imported && imported.__esModule && imported['default']) {
  new imported['default'](WebWorkerTransport(self))
}
`;
console.log('decentraland-compiler version: ' + chalk_1.default.green(packageJson.version));
function findConfigFile(baseDir, configFileName) {
    let configFilePath = path_1.resolve(baseDir, configFileName);
    if (fs.existsSync(configFilePath)) {
        return configFilePath;
    }
    if (baseDir.length === path_1.dirname(baseDir).length) {
        return null;
    }
    return findConfigFile(path_1.resolve(baseDir, '../'), configFileName);
}
exports.findConfigFile = findConfigFile;
class ESModulePlugin {
    constructor(options) {
        this.options = options;
    }
    apply(compiler) {
        compiler.hooks.compilation.tap('ESModulePlugin', compilation => {
            compilation.hooks.afterOptimizeChunkAssets.tap('ESModulePlugin', chunks => {
                for (const chunk of chunks) {
                    if (!chunk.canBeInitial()) {
                        continue;
                    }
                    for (const file of chunk.files) {
                        compilation.assets[file] = new webpack_sources_1.ConcatSource(compilation.assets[file], '\n', `export default ${this.options.exportedMember};`);
                    }
                }
            });
        });
    }
}
function compile(opt) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((onSuccess, onError) => {
            let entry = opt.files;
            const extensions = ['.ts', '.tsx', '.js', '.json'];
            if (opt.target === 'webworker') {
                entry = entry.map($ => {
                    const file = path_1.resolve(os_1.tmpdir(), Math.random().toString() + '.WebWorker.js');
                    fs.writeFileSync(file, entryPointWebWorker($));
                    return file;
                });
            }
            entry = entry.reduce((obj, $, $$) => {
                let name = path_1.relative(opt.rootFolder, opt.files[$$]);
                extensions.forEach($ => {
                    if (name.endsWith($)) {
                        name = name.substr(0, name.length - $.length);
                    }
                });
                let target = name;
                if (target.endsWith('.js')) {
                    target = target.substr(0, target.length - 3);
                }
                obj[target] = $;
                return obj;
            }, {});
            console.log([
                `     files:`,
                ...Object.keys(entry).map(($, $$) => `            (root)/${path_1.relative(opt.rootFolder, opt.files[$$])} -> (outDir)/${$}.js`)
            ].join('\n'));
            const libraryName = opt.library || undefined;
            const plugins = [ProgressBarPlugin({})];
            let libraryTarget = 'umd';
            let target = 'web';
            if (opt.target === 'esm') {
                target = 'web';
            }
            else if (opt.target === 'this') {
                target = 'webworker';
            }
            else {
                target = opt.target;
            }
            if (opt.target === 'this') {
                libraryTarget = 'this';
            }
            else if (opt.target === 'webworker') {
                libraryTarget = 'this';
            }
            else if (opt.target === 'esm') {
                libraryTarget = 'var';
                if (libraryName) {
                    plugins.push(new ESModulePlugin({ exportedMember: libraryName }));
                }
            }
            const options = {
                entry,
                mode: isProduction ? 'production' : 'development',
                optimization: {
                    nodeEnv: isProduction ? 'production' : 'development',
                    namedModules: !isProduction,
                    minimize: isProduction
                },
                output: {
                    filename: opt.fileName,
                    path: opt.outDir,
                    libraryTarget
                },
                resolve: {
                    extensions,
                    plugins: [new TsconfigPathsPlugin({ configFile: opt.tsconfig })]
                },
                watch: isWatching,
                module: {
                    rules: [
                        {
                            test: /\.(jpe?g|png|gif|svg)$/i,
                            use: [
                                {
                                    loader: require.resolve('url-loader'),
                                    options: {
                                        limit: 512000
                                    }
                                }
                            ]
                        },
                        {
                            test: /\.tsx?$/,
                            loader: require.resolve('ts-loader'),
                            options: {
                                configFile: opt.tsconfig
                            }
                        }
                    ]
                },
                target,
                plugins
            };
            if (opt.coverage) {
                ;
                options.module.rules.push({
                    test: /\.[jt]sx?$/,
                    use: {
                        loader: 'istanbul-instrumenter-loader',
                        options: { esModules: true, sourceMaps: true }
                    },
                    enforce: 'post',
                    exclude: /node_modules|\.spec\.js$/
                });
            }
            if (libraryName) {
                options.output.library = libraryName;
            }
            if (opt.globalObject) {
                options.output.globalObject = opt.globalObject;
            }
            const compiler = webpack(options);
            if (!isWatching) {
                compiler.run((err, stats) => {
                    if (err) {
                        onError(err);
                    }
                    else {
                        onSuccess(stats);
                    }
                });
            }
            else {
                compiler.watch({ ignored: /node_modules/, aggregateTimeout: 1000 }, (err, stats) => {
                    if (stats.hasErrors() || stats.hasWarnings()) {
                        console.log(stats.toString({
                            colors: true,
                            errors: true,
                            warnings: true
                        }));
                    }
                    else {
                        console.log('OK ' + opt.outDir);
                    }
                    if (!err) {
                        onSuccess(stats);
                    }
                });
            }
        });
    });
}
exports.compile = compile;
function tsc(tsconfig) {
    return __awaiter(this, void 0, void 0, function* () {
        const tscLocation = require.resolve('typescript/lib/tsc');
        console.log(`
    Executing "tsc -p ${path_1.basename(tsconfig)}" in ${path_1.dirname(tsconfig)}
  `.trim());
        const args = [tscLocation, '-p', path_1.basename(tsconfig)];
        if (isWatching) {
            args.push('--watch');
        }
        const childProcess = child_process_1.spawn('node', args, {
            cwd: path_1.dirname(tsconfig)
        });
        if (isWatching) {
            return true;
        }
        let resolve = a => void 0;
        let reject = a => void 0;
        const semaphore = new Promise((ok, err) => {
            resolve = ok;
            reject = err;
        });
        childProcess.stdout.on('data', data => {
            console.log(`tsc stdout: ${data}`);
        });
        childProcess.stderr.on('data', data => {
            console.log(`tsc stderr: ${data}`);
        });
        childProcess.on('close', exitCode => {
            if (exitCode) {
                reject(exitCode);
            }
            else {
                resolve(exitCode);
            }
        });
        yield semaphore;
    });
}
exports.tsc = tsc;
function processFile(opt) {
    return __awaiter(this, void 0, void 0, function* () {
        const baseFiles = (opt.file && [opt.file]) || (opt.files && opt.files[0]) || [];
        if (!baseFiles.length) {
            throw new Error(`Unable to find a file to compile`);
        }
        const baseFile = baseFiles[0];
        if (baseFile.endsWith('.json')) {
            return processJson(baseFile);
        }
        const parsed = path_1.parse(baseFile);
        const configFile = findConfigFile(path_1.dirname(baseFile), 'tsconfig.json');
        if (!configFile) {
            throw new Error(`Unable to find a tsconfig.json file for ${opt.file}`);
        }
        const rootFolder = path_1.dirname(configFile);
        const parsedTsConfig = require(configFile);
        let outFile = opt.outFile
            ? path_1.resolve(process.cwd(), opt.outFile)
            : parsedTsConfig.compilerOptions.outFile
                ? path_1.resolve(path_1.dirname(configFile), parsedTsConfig.compilerOptions.outFile)
                : parsed.name + '.js';
        const outDir = parsedTsConfig.compilerOptions.outDir
            ? path_1.resolve(path_1.dirname(configFile), parsedTsConfig.compilerOptions.outDir)
            : path_1.dirname(outFile);
        if (outFile.startsWith(outDir)) {
            outFile = outFile.replace(outDir + '/', '');
        }
        const coverage = !isWatching && (opt.coverage || instrumentCoverage);
        const options = {
            files: opt.files || [opt.file],
            outDir,
            tsconfig: configFile,
            coverage: coverage,
            target: opt.target || 'web',
            rootFolder,
            fileName: opt.fileName,
            library: opt.library,
            globalObject: opt.globalObject
        };
        console.log(`
      root: ${options.rootFolder}
    outDir: ${options.outDir}
   options: { coverage: ${coverage}, production: ${isProduction}, watch: ${isWatching} }`);
        const result = yield compile(options);
        if (result.hasErrors()) {
            throw new Error(result.toString({
                assets: true,
                colors: true,
                entrypoints: true,
                env: true,
                errors: true,
                publicPath: true
            }));
        }
        if (result.hasWarnings()) {
            console.log(result.toString({
                assets: true,
                colors: true,
                entrypoints: true,
                env: true,
                errors: true,
                publicPath: true
            }));
        }
    });
}
exports.processFile = processFile;
function glob(path) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((onSuccess, onFailure) => {
            globPkg(path, { absolute: true }, (err, values) => {
                if (err) {
                    onFailure(err);
                }
                else {
                    onSuccess(values);
                }
            });
        });
    });
}
exports.glob = glob;
function cli(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const files = yield glob(process.argv[2]);
        yield Promise.all(files.map($ => processFile({ file: $, outFile: args[3] })));
    });
}
exports.cli = cli;
function processJson(file) {
    return __awaiter(this, void 0, void 0, function* () {
        const config = require(file);
        if (!config || !(config instanceof Array)) {
            throw new Error(`Config file ${file} is not a valid sequence of steps`);
        }
        if (config.length === 0) {
            throw new Error(`Config file ${file} describes no compilation steps`);
        }
        for (let i = 0; i < config.length; i++) {
            const $ = config[i];
            if ($.kind === 'RM') {
                if (!isWatching) {
                    console.log(`
          Deleting folder: ${$.path}
        `.trim());
                    rimraf.sync($.path);
                }
            }
            else if ($.kind === 'Webpack') {
                const files = yield glob($.file);
                yield processFile(Object.assign({}, $, { files }));
            }
            else if ($.kind === 'TSC') {
                if (!$.config) {
                    throw new Error(`Missing config in: ${JSON.stringify($, null, 2)}`);
                }
                yield tsc($.config);
            }
            else {
                console.error(`Unknown compilation step ${JSON.stringify($, null, 2)}`);
            }
        }
    });
}
exports.processJson = processJson;
cli(process.argv)
    .then(() => {
    if (isWatching) {
        console.log('The compiler is watching file changes...');
        process.stdin.resume();
    }
})
    .catch(err => {
    console.error(err);
    process.exit(1);
});
process.on('unhandledRejection', e => {
    throw e;
});
function ProgressBarPlugin(options) {
    options = options || {};
    let stream = options.stream || process.stderr;
    let enabled = stream && stream.isTTY;
    if (!enabled) {
        return function () {
        };
    }
    let barLeft = chalk_1.default.bold('[');
    let barRight = chalk_1.default.bold(']');
    let preamble = chalk_1.default.cyan.bold('  build ') + barLeft;
    let barFormat = options.format || preamble + ':bar' + barRight + chalk_1.default.green.bold(' :percent');
    let summary = options.summary !== false;
    let summaryContent = options.summaryContent;
    let customSummary = options.customSummary;
    delete options.format;
    delete options.total;
    delete options.summary;
    delete options.summaryContent;
    delete options.customSummary;
    let barOptions = Object.assign({
        complete: '=',
        incomplete: ' ',
        width: 20,
        total: 100,
        clear: true
    }, options);
    let bar = new ProgressBar(barFormat, barOptions);
    let running = false;
    let startTime = new Date();
    let lastPercent = 0;
    return new webpack.ProgressPlugin(function (percent, msg) {
        if (!running && lastPercent !== 0 && !customSummary) {
            stream.write('\n');
        }
        let newPercent = Math.ceil(percent * barOptions.width);
        if (lastPercent !== newPercent) {
            bar.update(percent, {
                msg: msg
            });
            lastPercent = newPercent;
        }
        if (!running) {
            running = true;
            startTime = new Date();
            lastPercent = 0;
        }
        else if (percent === 1) {
            let now = new Date();
            let buildTime = (now.getTime() - startTime.getTime()) / 1000 + 's';
            bar.terminate();
            if (summary) {
                stream.write(chalk_1.default.green.bold('Build completed in ' + buildTime + '\n\n'));
            }
            else if (summaryContent) {
                stream.write('    ' + summaryContent + '(' + buildTime + ')\n\n');
            }
            if (customSummary) {
                customSummary(buildTime);
            }
            running = false;
        }
    });
}
//# sourceMappingURL=data:application/json;base64,