import { Rarity } from '@dcl/schemas';
import { Content, RawContent } from '../content/types';
import { BuilderConfig, WearableConfig } from '../files/types';
import { BasicItem, BuiltItem, LocalItem, WearableBodyShape, WearableCategory } from './types';
export declare class ItemFactory<X extends Content> {
    private item;
    private newContent;
    constructor(item?: LocalItem | null);
    /**
     * Instantiates a new item with the base properties.
     * @param BasicItem - The set of properties that, without a representation, defines an item.
     */
    newItem({ id, name, rarity, category, collection_id, description, urn }: BasicItem): this;
    /**
     * Instantiates a new item with the base properties.
     * @param wearableConfig - The AssetJSON object containing all the information about the item.
     * @param contents - The item's content.
     */
    fromConfig(wearableConfig: WearableConfig, content: RawContent<X>, builderConfig?: BuilderConfig): ItemFactory<X>;
    /**
     * Sets or updates the item's id.
     * It requires the item to be defined first.
     * @param id - The item's id.
     */
    withId(id: string): ItemFactory<X>;
    /**
     * Sets or updates the item's name.
     * It requires the item to be defined first.
     * @param name - The item's name.
     */
    withName(name: string): ItemFactory<X>;
    /**
     * Sets or updates the item's description.
     * It requires the item to be defined first.
     * @param description - The item's description.
     */
    withDescription(description: string): ItemFactory<X>;
    /**
     * Sets or updates the item's replaces property.
     * It requires the item to be defined first.
     * @param replaces - The item's replaces property.
     */
    withReplaces(replaces: WearableCategory[]): ItemFactory<X>;
    /**
     * Sets or updates the item's rarity.
     * It requires the item to be defined first.
     * @param rarity - The item's rarity.
     */
    withRarity(rarity: Rarity): ItemFactory<X>;
    /**
     * Sets or updates the item's collectionId.
     * It requires the item to be defined first.
     * @param collectionId - The item's collectionId.
     */
    withCollectionId(collectionId: string): ItemFactory<X>;
    /**
     * Sets or updates the item's category.
     * It requires the item to be defined first.
     * @param category - The item's category.
     */
    withCategory(category: WearableCategory): ItemFactory<X>;
    /**
     * Sets or updates the item's hides property.
     * It requires the item to be defined first.
     * @param hides - The item's hides property.
     */
    withHides(hides: WearableCategory[]): ItemFactory<X>;
    /**
     * Sets or updates the item's tags property.
     * It requires the item to be defined first.
     * @param tags - The item's tags property.
     */
    withTags(tags: string[]): ItemFactory<X>;
    /**
     * Sets or updates the item's urn property.
     * It requires the item to be defined first.
     * @param urn - The item's urn property.
     */
    withUrn(urn: string): ItemFactory<X>;
    /**
     * Sets or updates the item's thumbnail.
     * It requires the item to be defined first.
     * @param thumbnail - The item's thumbnail.
     */
    withThumbnail(thumbnail: X): ItemFactory<X>;
    /**
     * Sets or updates the item's content.
     * It requires the item to be defined first.
     * @param content - The item's new content
     */
    withContent(content: Record<string, X>): ItemFactory<X>;
    /**
     * Sets or updates the item's image.
     * The image will be used at the deployment process
     * to be uploaded to the catalyst.
     * It requires the item to be defined first.
     * @param thumbnail - The item's thumbnail.
     */
    withImage(image: X): ItemFactory<X>;
    /**
     * Adds a new a representation and its contents to the item, taking into consideration the specified body shape.
     * If BOTH is used as the body shape, both representations, female and male will be added.
     * It requires the item to be defined first.
     * @param bodyShape - The body shape that the new representation will represent.
     * @param model - The name of the content's key that points to the model to be used to build the new representation.
     * @param contents - The contents of the representation to be used to build the new representation.
     */
    withRepresentation(bodyShape: WearableBodyShape, model: string, contents: RawContent<X>, overrideHides?: WearableCategory[], overrideReplaces?: WearableCategory[]): ItemFactory<X>;
    /**
     * Removes a representation and its contents from the item, taking into consideration the specified body shape.
     * If BOTH is used as the body shape, all the representations will be removed.
     * This method will only remove the thumbnail if after removing the representation there are no representations left.
     * It requires the item to be defined first.
     * @param bodyShape - The body shape that will be used to identify the representation to remove.
     */
    withoutRepresentation(bodyShape: WearableBodyShape): ItemFactory<X>;
    build(): Promise<BuiltItem<X>>;
    /**
     * Check that the given text won't break the item's metadata when used.
     * @param text - The text to verify that won't break the item's metadata.
     */
    private isMetadataTextValid;
    /**
     * Builds an item's representation.
     * @param bodyShape - The body shape of the representation to build.
     * @param model - The name of the content's key that points to the model.
     * @param contents - The sorted contents of the representation to build.
     */
    private buildRepresentations;
    /**
     * Checks if an item's representation would fit a specific body shape.
     * @param bodyShape - The body shape to check for.
     * @param representation - The representation to see if fits the body shape.
     */
    private representsBodyShape;
    /**
     * Builds a new record of contents without the contents of the specified body shape.
     * @param bodyShape - The body shape of the contents to be left out.
     * @param contents - The contents to be filtered taking into consideration the specified body shape.
     */
    private removeContentsOfBodyShape;
    /**
     * Checks if the item has representations.
     * It requires the item to be defined first.
     */
    private itemHasRepresentations;
    /**
     * Gets the sorted contents based on a given body shape.
     * @param bodyShape - The body shape to get the contents of.
     * @param contents - The full list of sorted contents.
     */
    private getBodyShapeSortedContents;
    /**
     * Sets an item's property by checking first if the item is defined.
     * @param property - The property of the item to be set.
     * @param value - The value of the property to be set.
     */
    private setItemProperty;
    /**
     * Sets an item's property in the data section by checking first if the item is defined.
     * @param property - The property of the item to be set.
     * @param value - The value of the property to be set.
     */
    private setItemDataProperty;
    /**
     * Builds a map of contents based on a list of content paths (keys of the map).
     * @param rawContent - The map containing the content available for an item.
     * @param contentPaths - The paths or keys of the rawContent map to build the new content map.
     */
    private buildWearableConfigRepresentationContents;
}
