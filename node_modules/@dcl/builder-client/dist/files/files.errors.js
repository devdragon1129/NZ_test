"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelInRepresentationNotFoundError = exports.FileNotFoundError = exports.InvalidWearableConfigFileError = exports.InvalidBuilderConfigFileError = exports.FileTooBigError = exports.ModelFileNotFoundError = exports.WrongExtensionError = void 0;
const constants_1 = require("./constants");
class WrongExtensionError extends Error {
    constructor(file) {
        super(`The file ${file} has a wrong extension`);
    }
}
exports.WrongExtensionError = WrongExtensionError;
class ModelFileNotFoundError extends Error {
    constructor() {
        super('The file does not contain a model file');
    }
}
exports.ModelFileNotFoundError = ModelFileNotFoundError;
class FileTooBigError extends Error {
    constructor(fileName, fileSize) {
        super(`The file ${fileName} too big (${fileSize} bytes) but should be less than ${constants_1.MAX_FILE_SIZE} bytes`);
    }
}
exports.FileTooBigError = FileTooBigError;
class InvalidBuilderConfigFileError extends Error {
    constructor(errors) {
        super('The builder config file is invalid');
        this.errors = errors;
    }
    getErrors() {
        return this.errors;
    }
}
exports.InvalidBuilderConfigFileError = InvalidBuilderConfigFileError;
class InvalidWearableConfigFileError extends Error {
    constructor(errors) {
        super('The wearable config file is invalid');
        this.errors = errors;
    }
    getErrors() {
        return this.errors;
    }
}
exports.InvalidWearableConfigFileError = InvalidWearableConfigFileError;
class FileNotFoundError extends Error {
    constructor(fileName) {
        super(`The file ${fileName} does not exist.`);
    }
}
exports.FileNotFoundError = FileNotFoundError;
class ModelInRepresentationNotFoundError extends Error {
    constructor(fileName) {
        super(`The representation doesn't contain the file ${fileName} as its contents.`);
    }
}
exports.ModelInRepresentationNotFoundError = ModelInRepresentationNotFoundError;
//# sourceMappingURL=files.errors.js.map