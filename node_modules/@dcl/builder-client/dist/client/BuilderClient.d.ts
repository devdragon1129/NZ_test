import { AuthIdentity } from 'dcl-crypto';
import { RemoteItem, LocalItem } from '../item/types';
import { Content } from '../content/types';
import { GetNFTParams, GetNFTsParams, GetNFTsResponse, NFT, ThirdParty } from './types';
export declare class BuilderClient {
    private fetch;
    private readonly AUTH_CHAIN_HEADER_PREFIX;
    private readonly getIdentity;
    private readonly getAddress;
    constructor(url: string, identity: AuthIdentity | ((...args: unknown[]) => AuthIdentity), address: string | ((...args: unknown[]) => string), externalFetch?: typeof fetch);
    /**
     * Creates the authorization headers for the given method and path.
     * @param method - The HTTP method.
     * @param path - The HTTP request path.
     */
    private createAuthHeaders;
    private convertToFormDataBinary;
    /**
     * Updates or inserts an item. The item can be updated by id or URN.
     * @param item - The item to insert or update.
     * @param newContent - The content to be added or updated in the item. This content must be contained in the items contents.
     */
    upsertItem(item: Omit<LocalItem, 'id'> & {
        id?: LocalItem['id'];
    }, newContent: Record<string, Content>): Promise<RemoteItem>;
    /**
     * Gets the content size of an already uploaded content file.
     * @param contentIdentifier - The content hash.
     */
    getContentSize(contentIdentifier: string): Promise<number>;
    /**
     * The ID of the third party to retrieve.
     * @param thirdPartyId - The third party id (urn:decentraland:mumbai:collections-thirdparty:third-part-name).
     */
    getThirdParty(thirdPartyId: string): Promise<ThirdParty>;
    /**
     * Gets the external NFTs owned by the user.
     * @param options - A set of options to query the NFTs.
     */
    getNFTs({ owner, first, skip, cursor }?: GetNFTsParams): Promise<GetNFTsResponse>;
    getNFT({ contractAddress, tokenId }: GetNFTParams): Promise<NFT>;
}
