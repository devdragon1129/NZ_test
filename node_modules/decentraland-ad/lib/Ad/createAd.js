"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var createContent_1 = __importDefault(require("./createContent"));
var types_1 = require("./createContent/types");
var utils_1 = require("./utils");
var utils_2 = require("./createContent/utils");
require("./createAd.css");
exports.AD_TTL = 30 * 24 * 60 * 60 * 1000;
exports.AD_STORAGE_KEY = 'dcl-ad-ttl';
exports.dismissedAds = new utils_1.LocalStorageTTL(exports.AD_STORAGE_KEY, exports.AD_TTL);
function isDismissed(options) {
    var id = options.id;
    return options.isEnabled === false || (id && exports.dismissedAds.has(id));
}
exports.isDismissed = isDismissed;
function createAd(options, lang) {
    if (lang === void 0) { lang = types_1.Locale.en; }
    var ad = document.createElement('div');
    var now = Date.now();
    var id = options.id;
    var closable = options.isClosable !== false;
    var dismiss = isDismissed(options);
    ad.className = utils_1.join([
        'DCL__Ad',
        dismiss && 'DCL__Ad--empty',
        closable && 'DCL__Ad--closable',
        options.type === 'mini' && 'DCL__Ad--mini',
        options.type === 'full' && 'DCL__Ad--full',
    ]);
    if (dismiss) {
        return ad;
    }
    if (window.analytics && !dismiss) {
        window.analytics.track('ad_show', {
            ad: id,
            slot: options.slot,
            location: window.location,
        });
    }
    if (options.textColor) {
        ad.style.color = options.textColor;
    }
    if (options.textShadowColor) {
        ad.style.textShadow = "0 0 .1em " + options.textShadowColor;
    }
    if (options.backgroundColor) {
        ad.style.backgroundColor = options.backgroundColor;
    }
    if (options.backgroundImage) {
        ad.style.backgroundImage = "url(\"" + options.backgroundImage + "\")";
    }
    if (options.backgroundPositionX) {
        ad.style.backgroundPositionX = options.backgroundPositionX;
    }
    if (options.backgroundPositionY) {
        ad.style.backgroundPositionY = options.backgroundPositionY;
    }
    if (!utils_2.isFalsy(options.minHeight)) {
        ad.style.minHeight = utils_1.measure(options.minHeight);
    }
    if (!utils_2.isFalsy(options.maxHeight)) {
        ad.style.maxHeight = utils_1.measure(options.maxHeight);
    }
    if (!utils_2.isFalsy(options.height)) {
        ad.style.height = utils_1.measure(options.height);
    }
    var container = document.createElement('div');
    container.className = 'DCL__Ad__Container';
    ad.appendChild(container);
    // create content
    utils_2.ListChildren(options.content).forEach(function (child) {
        if (!utils_2.isFalsy(child)) {
            var type = typeof child;
            var content = null;
            if (type === 'string' || type === 'number' || type === 'boolean') {
                createContent_1.default(types_1.ContentType.Paragraph, { lang: lang }, String(child));
            }
            else {
                var structure = child;
                if (structure.type) {
                    content = createContent_1.default(structure.type, __assign(__assign({}, structure.props), { lang: lang }), structure.children);
                }
            }
            if (content) {
                container.appendChild(content);
            }
        }
    });
    // create actions
    if (options.href) {
        var action = document.createElement('a');
        action.className = 'DCL__Ad__Action';
        action.href = options.href;
        if (options.target) {
            action.target = options.target;
        }
        if (options.rel) {
            action.rel = options.rel;
        }
        if (options.referrerPolicy) {
            action.referrerPolicy = options.referrerPolicy;
        }
        ad.appendChild(action);
    }
    // handle click
    var onClick = function (event) {
        try {
            if (window.analytics &&
                event.target &&
                event.target.nodeName === 'A') {
                var target = event.target;
                window.analytics.track('ad_click', {
                    ad: id,
                    slot: options.slot,
                    location: window.location,
                    href: target.href,
                    text: target.innerText,
                    time: Math.ceil((Date.now() - now) / 1000),
                });
            }
            if (options.onClick) {
                options.onClick(event);
            }
        }
        catch (err) {
            console.log(err);
        }
    };
    ad.addEventListener('click', onClick);
    if (closable) {
        var close_1 = document.createElement('div');
        close_1.className = 'DCL__Ad__Close';
        close_1.innerHTML = "<svg width=\"14\" height=\"14\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M-2-2h18v18H-2z\"/><path d=\"M13.728.344l-.072-.072a1 1 0 0 0-1.415 0L7 5.512 1.759.273a1 1 0 0 0-1.415 0L.272.344a1 1 0 0 0 0 1.415L5.512 7l-5.24 5.241a1 1 0 0 0 0 1.415l.072.072a1 1 0 0 0 1.415 0L7 8.488l5.241 5.24a1 1 0 0 0 1.415 0l.072-.072a1 1 0 0 0 0-1.415L8.488 7l5.24-5.241a1 1 0 0 0 0-1.415z\" fill=\"" + (options.textColor ||
            '#FFF') + "\"/></g></svg>";
        // handle close
        var onClose_1 = function (event) {
            event.stopPropagation();
            if (window.analytics) {
                window.analytics.track('ad_close', {
                    ad: id,
                    slot: options.slot,
                    location: window.location,
                    time: Math.ceil((Date.now() - now) / 1000),
                });
            }
            id && exports.dismissedAds.add(id);
            try {
                if (typeof options.onClose === 'function') {
                    options.onClose && options.onClose(event);
                }
            }
            catch (err) {
                console.log(err);
            }
            if (!event.defaultPrevented) {
                onClick && ad.removeEventListener('click', onClick);
                onClose_1 && close_1.removeEventListener('click', onClose_1);
                ad.parentNode && ad.parentNode.removeChild(ad);
            }
        };
        close_1.addEventListener('click', onClose_1);
        ad.appendChild(close_1);
    }
    return ad;
}
exports.default = createAd;
//# sourceMappingURL=createAd.js.map