"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
function moment(value, defaultValue) {
    if (defaultValue === void 0) { defaultValue = new Date(); }
    if (value instanceof Date) {
        return value;
    }
    else if (typeof value === 'number' && !Number.isNaN(value)) {
        return new Date(value);
    }
    else if (typeof value === 'string') {
        var moment_1 = Date.parse(value);
        if (!Number.isNaN(moment_1)) {
            return new Date(moment_1);
        }
    }
    if (defaultValue instanceof Date) {
        return defaultValue;
    }
    else if (typeof defaultValue === 'number' && !Number.isNaN(defaultValue)) {
        return new Date(defaultValue);
    }
    else if (typeof defaultValue === 'string') {
        var defaultMoment = Date.parse(defaultValue);
        if (!Number.isNaN(defaultMoment)) {
            return new Date(defaultMoment);
        }
    }
    return new Date(0);
}
exports.moment = moment;
function measure(value, defaultSize) {
    if (defaultSize === void 0) { defaultSize = 0; }
    if (value === undefined || value === null) {
        return String(defaultSize) + 'px';
    }
    if (typeof value === 'number') {
        return String(value) + 'px';
    }
    return String(value);
}
exports.measure = measure;
function join(values) {
    return values.filter(function (v) { return v && typeof v === 'string'; }).join(' ');
}
exports.join = join;
var LocalStorageTTL = /** @class */ (function () {
    function LocalStorageTTL(key, ttl) {
        var _this = this;
        if (ttl === void 0) { ttl = 7 * 24 * 60 * 60 * 1000; }
        this.key = key;
        this.ttl = ttl;
        this.persisting = false;
        this.load();
        window.addEventListener('storage', function () { return _this.load(); });
    }
    LocalStorageTTL.prototype.load = function () {
        if (this.persisting) {
            this.persisting = false;
        }
        else {
            try {
                var now_1 = Date.now();
                var entries = JSON.parse(localStorage.getItem(this.key) || '[]').filter(function (_a) {
                    var _b = __read(_a, 2), expiration = _b[1];
                    return expiration > now_1;
                });
                this.map = new Map(entries);
            }
            catch (err) {
                console.error(err);
                if (!this.map) {
                    this.map = new Map();
                }
            }
        }
        return this;
    };
    LocalStorageTTL.prototype.persist = function () {
        this.persisting = true;
        localStorage.setItem(this.key, JSON.stringify(Array.from(this.map.entries())));
    };
    LocalStorageTTL.prototype.has = function (key) {
        return this.map.has(key);
    };
    LocalStorageTTL.prototype.add = function (key) {
        this.map.set(key, Date.now() + this.ttl);
        this.persist();
        return this;
    };
    LocalStorageTTL.prototype.delete = function (key) {
        var result = this.map.delete(key);
        this.persist();
        return result;
    };
    return LocalStorageTTL;
}());
exports.LocalStorageTTL = LocalStorageTTL;
//# sourceMappingURL=utils.js.map