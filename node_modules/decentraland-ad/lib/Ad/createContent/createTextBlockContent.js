"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
var utils_1 = require("../utils");
var utils_2 = require("./utils");
function createTextBlockContent(type, props, children) {
    if (type !== types_1.ContentType.TextBlock) {
        return null;
    }
    var block = document.createElement('div');
    block.className = 'DCL__Ad__TextBlock';
    var paddingTop = utils_1.measure(props.paddingTop, 0);
    var paddingBottom = utils_1.measure(props.paddingBottom, 0);
    var paddingLeft = utils_1.measure(props.paddingLeft, 0);
    var paddingRight = utils_1.measure(props.paddingRight, 0);
    block.style.paddingTop = paddingTop;
    block.style.paddingBottom = paddingBottom;
    block.style.paddingLeft = paddingLeft;
    block.style.paddingRight = paddingRight;
    if (props.textColor) {
        block.style.color = props.textColor;
    }
    if (props.textShadowColor) {
        block.style.textShadow = "0 0 .1em " + props.textShadowColor;
    }
    utils_2.ListChildren(utils_2.Locate(props, children, props.lang || types_1.Locale.en)).forEach(function (child) {
        if (child && typeof child === 'object') {
            var content = createTextContent(child.type, __assign(__assign({}, child.props), { lang: props.lang }), child);
            if (content) {
                block.appendChild(content);
            }
        }
    });
    return block;
}
exports.default = createTextBlockContent;
function createTextContent(type, props, children) {
    if (type !== types_1.ContentType.Link &&
        type !== types_1.ContentType.Title &&
        type !== types_1.ContentType.Subtitle &&
        type !== types_1.ContentType.Paragraph &&
        type !== types_1.ContentType.Strong &&
        type !== types_1.ContentType.Underline &&
        type !== types_1.ContentType.Emphasis &&
        type !== types_1.ContentType.Delete) {
        return null;
    }
    var content = null;
    switch (type) {
        case types_1.ContentType.Link:
            var link = document.createElement('a');
            link.className = 'DCL__Ad__Link';
            link.target = '_blank';
            link.href = props.href || '';
            if (props.title) {
                link.title = props.title;
            }
            content = link;
            break;
        case types_1.ContentType.Paragraph:
        case types_1.ContentType.Subtitle:
        case types_1.ContentType.Title:
            var text = document.createElement('p');
            text.className = utils_1.join([
                type === types_1.ContentType.Title && 'DCL__Ad__Title',
                type === types_1.ContentType.Subtitle && 'DCL__Ad__Subtitle',
                type === types_1.ContentType.Paragraph && 'DCL__Ad__Paragraph',
            ]);
            content = text;
            break;
        case types_1.ContentType.Emphasis:
        case types_1.ContentType.Strong:
        case types_1.ContentType.Underline:
        case types_1.ContentType.Delete:
            var styledText = document.createElement('span');
            styledText.className = utils_1.join([
                type === types_1.ContentType.Emphasis && 'DCL__Ad__Emphasis',
                type === types_1.ContentType.Strong && 'DCL__Ad__Strong',
                type === types_1.ContentType.Underline && 'DCL__Ad__Underline',
                type === types_1.ContentType.Delete && 'DCL__Ad__Delete',
            ]);
            content = styledText;
            break;
    }
    if (content !== null) {
        if (props.textColor) {
            content.style.color = props.textColor;
        }
        if (props.textShadowColor) {
            content.style.textShadow = "0 0 .1em " + props.textShadowColor;
        }
        utils_2.ListChildren(utils_2.Locate(props, children, props.lang || types_1.Locale.en)).forEach(function (child) {
            var result = createTextFrom(child, props.lang);
            if (result && content) {
                content.appendChild(result);
            }
        });
        return content;
    }
    return null;
}
exports.createTextContent = createTextContent;
function createTextFrom(content, lang) {
    if (lang === void 0) { lang = types_1.Locale.en; }
    if (content === undefined || content === null || content === false) {
        return null;
    }
    switch (typeof content) {
        case 'string':
        case 'number':
        case 'boolean':
            var node = document.createTextNode(String(content));
            if (content && utils_2.COUNTDOWN_EXPRESSION.test(String(content))) {
                utils_2.Countdown(node);
            }
            return node;
        default:
            var _a = content, type = _a.type, props = _a.props, children = _a.children;
            return createTextContent(type, __assign(__assign({}, props), { lang: lang }), utils_2.Locate(props, children, lang || types_1.Locale.en));
    }
}
//# sourceMappingURL=createTextBlockContent.js.map