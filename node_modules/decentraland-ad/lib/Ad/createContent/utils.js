"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("./types");
function ListChildren(children) {
    if (children === undefined || children === null) {
        return [];
    }
    return (Array.isArray(children) && children) || [children];
}
exports.ListChildren = ListChildren;
function Locate(props, defaultValue, lang) {
    if (defaultValue === void 0) { defaultValue = null; }
    if (lang === void 0) { lang = types_1.Locale.en; }
    if (lang !== types_1.Locale.en && !isFalsy(props[lang])) {
        return props[lang];
    }
    return defaultValue;
}
exports.Locate = Locate;
function isFalsy(value) {
    return (value === false ||
        value === undefined ||
        value === null ||
        Number.isNaN(value));
}
exports.isFalsy = isFalsy;
var Timestamp = {
    second: 1000,
    minute: 60 * 1000,
    hour: 60 * 60 * 1000,
    day: 24 * 60 * 60 * 1000
};
exports.COUNTDOWN_EXPRESSION = /{{countdown:(\d\d\d\d-\d\d-\d\d(t|\s)\d\d:\d\d:\d\dz?)}}/i;
function CountdownNumber(n) {
    if (n > 10) {
        return String(n);
    }
    else {
        return '0' + String(n);
    }
}
function CountdownMessage(message, timestamp) {
    return message.replace(exports.COUNTDOWN_EXPRESSION, function () {
        return timestamp.days + "d " + timestamp.hours + "h " + timestamp.minutes + "m " + timestamp.seconds + "s";
    });
}
function CountdownUpdate(element, message, since) {
    if (element) {
        var diff = since - Date.now() + Timestamp.second;
        var days = Math.floor(diff / Timestamp.day);
        var hours = Math.floor((diff % Timestamp.day) / Timestamp.hour);
        var minutes = Math.floor((diff % Timestamp.hour) / Timestamp.minute);
        var seconds = Math.floor((diff % Timestamp.minute) / Timestamp.second);
        element.textContent = CountdownMessage(message, {
            days: days,
            hours: CountdownNumber(hours),
            minutes: CountdownNumber(minutes),
            seconds: CountdownNumber(seconds)
        });
        if (diff > 0) {
            setTimeout(function () { return CountdownUpdate(element, message, since); }, Date.now() % Timestamp.second);
        }
    }
}
function Countdown(element) {
    var message = element.textContent || '';
    var result = message.match(exports.COUNTDOWN_EXPRESSION);
    if (result) {
        var _a = __read(result, 2), date = _a[1];
        if (date.slice(-1).toLowerCase() !== 'z') {
            date += 'z';
        }
        var since = Date.parse(date);
        if (Number.isFinite(since)) {
            CountdownUpdate(element, message, since);
        }
    }
    return element;
}
exports.Countdown = Countdown;
//# sourceMappingURL=utils.js.map