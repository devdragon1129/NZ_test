export declare type Content = null | string | number | boolean | ContentStructure;
export declare enum Locale {
    'en' = "en",
    'es' = "es",
    'fr' = "fr",
    'ja' = "ja",
    'zh' = "zh",
    'ko' = "ko"
}
export declare type ContentProps<P extends {} = {}> = {
    lang?: Locale;
} & P;
export declare enum ContentType {
    Image = "image",
    Button = "button",
    Action = "action",
    TextBlock = "textBlock",
    Link = "link",
    Title = "title",
    Subtitle = "subtitle",
    Paragraph = "paragraph",
    Strong = "strong",
    Underline = "underline",
    Emphasis = "emphasis",
    Delete = "delete"
}
export interface ContentStructure<T extends Element = any, P extends {} = {
    [key: string]: any;
}> {
    type: T;
    props: ContentProps<P>;
    children?: Content[] | Content;
}
/**
 * Type definition
 */
export declare type CreateElementFunction<T extends ContentType = any, P extends {} = {}> = (type: T, props: P, children?: Element[] | Element) => null | HTMLElement;
export interface TextColorProps {
    textColor: string;
    textShadowColor: string;
}
export interface LocaleProps {
    [Locale.es]?: Content | Content[];
    [Locale.fr]?: Content | Content[];
    [Locale.ja]?: Content | Content[];
    [Locale.zh]?: Content | Content[];
    [Locale.ko]?: Content | Content[];
}
