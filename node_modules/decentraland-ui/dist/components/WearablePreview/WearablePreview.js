"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WearablePreview = void 0;
/* eslint-disable  @typescript-eslint/no-empty-function */
var React = __importStar(require("react"));
var deep_equal_1 = __importDefault(require("deep-equal"));
var preview_1 = require("@dcl/schemas/dist/dapps/preview");
var debounce_1 = require("../../lib/debounce");
require("./WearablePreview.css");
var debounce = (0, debounce_1.createDebounce)();
var WearablePreview = /** @class */ (function (_super) {
    __extends(WearablePreview, _super);
    function WearablePreview() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isReady: false,
            pendingOptions: null,
            lastOptions: null
        };
        _this.iframe = null;
        _this.getUrl = function () {
            var _a = _this.props, contractAddress = _a.contractAddress, tokenId = _a.tokenId, itemId = _a.itemId, profile = _a.profile, urns = _a.urns, urls = _a.urls, base64s = _a.base64s, skin = _a.skin, hair = _a.hair, eyes = _a.eyes, bodyShape = _a.bodyShape, emote = _a.emote, camera = _a.camera, zoom = _a.zoom, autoRotateSpeed = _a.autoRotateSpeed, offsetX = _a.offsetX, offsetY = _a.offsetY, offsetZ = _a.offsetZ, wheelZoom = _a.wheelZoom, wheelPrecision = _a.wheelPrecision, wheelStart = _a.wheelStart, transparentBackground = _a.transparentBackground, dev = _a.dev, baseUrl = _a.baseUrl;
            var contractParam = contractAddress ? "contract=".concat(contractAddress) : '';
            var tokenParam = tokenId ? "token=".concat(tokenId) : '';
            var itemParam = itemId ? "item=".concat(itemId) : '';
            var profileParam = profile ? "profile=".concat(profile) : '';
            var urnParams = urns && urns.length > 0 ? urns.map(function (urn) { return "urn=".concat(urn); }).join('&') : '';
            var urlsParams = urls && urls.length > 0 ? urls.map(function (url) { return "url=".concat(url); }).join('&') : '';
            var base64sParams = base64s && base64s.length > 0
                ? base64s.map(function (base64) { return "base64=".concat(base64); }).join('&')
                : '';
            var skinParam = skin ? "skin=".concat(skin) : '';
            var hairParam = hair ? "hair=".concat(hair) : '';
            var eyesParam = eyes ? "eyes=".concat(eyes) : '';
            var bodyShapeParam = bodyShape ? "bodyShape=".concat(bodyShape) : '';
            var emoteParam = emote ? "emote=".concat(emote) : '';
            var cameraParam = camera ? "camera=".concat(camera) : '';
            var zoomParam = !isNaN(zoom) ? "zoom=".concat(zoom) : '';
            var autoRotateSpeedParam = !isNaN(autoRotateSpeed)
                ? "autoRotateSpeed=".concat(autoRotateSpeed)
                : '';
            var offsetXParam = !isNaN(offsetX) ? "offsetX=".concat(offsetX) : '';
            var offsetYParam = !isNaN(offsetY) ? "offsetY=".concat(offsetY) : '';
            var offsetZParam = !isNaN(offsetZ) ? "offsetZ=".concat(offsetZ) : '';
            var wheelZoomParam = !isNaN(wheelZoom) ? "wheelZoom=".concat(wheelZoom) : '';
            var wheelPrecisionParam = !isNaN(wheelPrecision)
                ? "wheelPrecision=".concat(wheelPrecision)
                : '';
            var wheelStartParam = !isNaN(wheelStart) ? "wheelStart=".concat(wheelStart) : '';
            var transparentBackgroundParam = transparentBackground
                ? "transparentBackground"
                : '';
            var envParam = dev ? "env=dev" : '';
            var url = baseUrl +
                '?' +
                [
                    contractParam,
                    tokenParam,
                    itemParam,
                    profileParam,
                    urnParams,
                    urlsParams,
                    base64sParams,
                    skinParam,
                    hairParam,
                    eyesParam,
                    bodyShapeParam,
                    emoteParam,
                    cameraParam,
                    zoomParam,
                    autoRotateSpeedParam,
                    offsetXParam,
                    offsetYParam,
                    offsetZParam,
                    wheelZoomParam,
                    wheelPrecisionParam,
                    wheelStartParam,
                    transparentBackgroundParam,
                    envParam
                ]
                    .filter(function (param) { return !!param; })
                    .join('&');
            return url;
        };
        _this.getOptions = function () {
            var _a = _this.props, dev = _a.dev, hotreload = _a.hotreload, rest = __rest(_a, ["dev", "hotreload"]);
            if (!hotreload) {
                throw new Error('Should not generate options if hotreload is not turned on');
            }
            var options = {
                env: dev ? preview_1.PreviewEnv.DEV : preview_1.PreviewEnv.PROD
            };
            for (var key in rest) {
                if (typeof rest[key] !== 'function') {
                    options[key] = rest[key];
                }
            }
            return options;
        };
        _this.handleMessage = function (event) {
            var _a = _this.props, baseUrl = _a.baseUrl, onLoad = _a.onLoad, onError = _a.onError;
            var origin = event.origin;
            if (origin === baseUrl) {
                if (event.data && event.data.type) {
                    var type = event.data.type;
                    switch (type) {
                        case preview_1.PreviewMessageType.LOAD: {
                            onLoad();
                            break;
                        }
                        case preview_1.PreviewMessageType.ERROR: {
                            var payload = event.data
                                .payload;
                            onError(new Error(payload.message));
                            break;
                        }
                        case preview_1.PreviewMessageType.READY: {
                            var _b = _this.state, isReady = _b.isReady, pendingOptions = _b.pendingOptions;
                            // ignore if already flagged as ready
                            if (isReady) {
                                return;
                            }
                            if (pendingOptions !== null) {
                                // if there were pending options, flush them and flag as ready
                                _this.sendUpdate(pendingOptions);
                                _this.setState({ isReady: true, pendingOptions: null });
                            }
                            else {
                                // otherwise just flag as ready
                                _this.setState({ isReady: true });
                            }
                            break;
                        }
                        default:
                        // do nothing
                    }
                }
            }
        };
        _this.handleUpdate = function () {
            if (_this.iframe) {
                // SSR check
                if (window) {
                    var options = _this.getOptions();
                    if (_this.state.isReady) {
                        // if the iframe is ready, send the update
                        _this.sendUpdate(options);
                    }
                    else {
                        // otherwise store last update in state until it's ready
                        _this.setState({ pendingPreviewOptions: options });
                    }
                }
            }
            else {
                console.warn("Could not send update, iframe is not referenced");
            }
        };
        _this.sendUpdate = function (options) {
            var lastOptions = _this.state.lastOptions;
            // only send update if new options are different
            if (!lastOptions || !(0, deep_equal_1.default)(options, lastOptions)) {
                // send message to iframe
                (0, preview_1.sendMessage)(_this.iframe.contentWindow, preview_1.PreviewMessageType.UPDATE, {
                    options: options
                });
                // callback
                var onUpdate = _this.props.onUpdate;
                if (onUpdate) {
                    onUpdate(options);
                }
                // store options on state
                _this.setState({ lastOptions: options });
            }
        };
        _this.refIframe = function (iframe) {
            _this.iframe = iframe;
        };
        return _this;
    }
    WearablePreview.prototype.componentDidMount = function () {
        window.addEventListener('message', this.handleMessage, false);
        this.setState({ url: this.getUrl() });
    };
    WearablePreview.prototype.componentWillUnmount = function () {
        window.removeEventListener('message', this.handleMessage, false);
    };
    WearablePreview.prototype.componentDidUpdate = function () {
        if (this.props.hotreload) {
            debounce(this.handleUpdate, 500);
        }
    };
    WearablePreview.prototype.render = function () {
        if (this.props.tokenId && this.props.itemId) {
            console.warn('You should NOT use `tokenId` and `itemId` props simultaneously');
        }
        return (React.createElement("iframe", { id: this.props.id, className: "WearablePreview", src: this.props.hotreload ? this.state.url : this.getUrl(), width: "100%", height: "100%", frameBorder: "0", ref: this.refIframe }));
    };
    WearablePreview.defaultProps = {
        dev: false,
        baseUrl: 'https://wearable-preview.decentraland.org',
        onLoad: function () { },
        onError: function () { }
    };
    return WearablePreview;
}(React.PureComponent));
exports.WearablePreview = WearablePreview;
