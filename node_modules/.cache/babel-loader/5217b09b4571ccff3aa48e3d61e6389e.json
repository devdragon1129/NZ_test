{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger\";\nimport { PostProcess } from \"./postProcess\";\nimport '../Rendering/geometryBufferRendererSceneComponent';\nimport \"../Shaders/screenSpaceCurvature.fragment\";\nimport { EngineStore } from '../Engines/engineStore';\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize, SerializationHelper } from '../Misc/decorators';\n/**\r\n * The Screen Space curvature effect can help highlighting ridge and valley of a model.\r\n */\n\nvar ScreenSpaceCurvaturePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(ScreenSpaceCurvaturePostProcess, _super);\n  /**\r\n   * Creates a new instance ScreenSpaceCurvaturePostProcess\r\n   * @param name The name of the effect.\r\n   * @param scene The scene containing the objects to blur according to their velocity.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function ScreenSpaceCurvaturePostProcess(name, scene, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"screenSpaceCurvature\", [\"curvature_ridge\", \"curvature_valley\"], [\"textureSampler\", \"normalSampler\"], options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation) || this;\n    /**\r\n     * Defines how much ridge the curvature effect displays.\r\n     */\n\n\n    _this.ridge = 1;\n    /**\r\n     * Defines how much valley the curvature effect displays.\r\n     */\n\n    _this.valley = 1;\n    _this._geometryBufferRenderer = scene.enableGeometryBufferRenderer();\n\n    if (!_this._geometryBufferRenderer) {\n      // Geometry buffer renderer is not supported. So, work as a passthrough.\n      Logger.Error(\"Multiple Render Target support needed for screen space curvature post process. Please use IsSupported test first.\");\n    } else {\n      // Geometry buffer renderer is supported.\n      _this.onApply = function (effect) {\n        effect.setFloat(\"curvature_ridge\", 0.5 / Math.max(_this.ridge * _this.ridge, 1e-4));\n        effect.setFloat(\"curvature_valley\", 0.7 / Math.max(_this.valley * _this.valley, 1e-4));\n\n        var normalTexture = _this._geometryBufferRenderer.getGBuffer().textures[1];\n\n        effect.setTexture(\"normalSampler\", normalTexture);\n      };\n    }\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"ScreenSpaceCurvaturePostProcess\" string\r\n   */\n\n\n  ScreenSpaceCurvaturePostProcess.prototype.getClassName = function () {\n    return \"ScreenSpaceCurvaturePostProcess\";\n  };\n\n  Object.defineProperty(ScreenSpaceCurvaturePostProcess, \"IsSupported\", {\n    /**\r\n     * Support test.\r\n     */\n    get: function get() {\n      var engine = EngineStore.LastCreatedEngine;\n\n      if (!engine) {\n        return false;\n      }\n\n      return engine.webGLVersion > 1 || engine.getCaps().drawBuffersExtension;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @hidden */\n\n  ScreenSpaceCurvaturePostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new ScreenSpaceCurvaturePostProcess(parsedPostProcess.name, scene, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], ScreenSpaceCurvaturePostProcess.prototype, \"ridge\", void 0);\n\n  __decorate([serialize()], ScreenSpaceCurvaturePostProcess.prototype, \"valley\", void 0);\n\n  return ScreenSpaceCurvaturePostProcess;\n}(PostProcess);\n\nexport { ScreenSpaceCurvaturePostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.ScreenSpaceCurvaturePostProcess\"] = ScreenSpaceCurvaturePostProcess;","map":null,"metadata":{},"sourceType":"module"}