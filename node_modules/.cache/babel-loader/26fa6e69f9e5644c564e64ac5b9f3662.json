{"ast":null,"code":"import { Engine } from \"../Engines/engine\";\n/**\r\n * Class used to work with sound analyzer using fast fourier transform (FFT)\r\n * @see https://doc.babylonjs.com/how_to/playing_sounds_and_music\r\n */\n\nvar Analyser =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new analyser\r\n   * @param scene defines hosting scene\r\n   */\n  function Analyser(scene) {\n    /**\r\n     * Gets or sets the smoothing\r\n     * @ignorenaming\r\n     */\n    this.SMOOTHING = 0.75;\n    /**\r\n     * Gets or sets the FFT table size\r\n     * @ignorenaming\r\n     */\n\n    this.FFT_SIZE = 512;\n    /**\r\n     * Gets or sets the bar graph amplitude\r\n     * @ignorenaming\r\n     */\n\n    this.BARGRAPHAMPLITUDE = 256;\n    /**\r\n     * Gets or sets the position of the debug canvas\r\n     * @ignorenaming\r\n     */\n\n    this.DEBUGCANVASPOS = {\n      x: 20,\n      y: 20\n    };\n    /**\r\n     * Gets or sets the debug canvas size\r\n     * @ignorenaming\r\n     */\n\n    this.DEBUGCANVASSIZE = {\n      width: 320,\n      height: 200\n    };\n    this._scene = scene;\n    this._audioEngine = Engine.audioEngine;\n\n    if (this._audioEngine.canUseWebAudio && this._audioEngine.audioContext) {\n      this._webAudioAnalyser = this._audioEngine.audioContext.createAnalyser();\n      this._webAudioAnalyser.minDecibels = -140;\n      this._webAudioAnalyser.maxDecibels = 0;\n      this._byteFreqs = new Uint8Array(this._webAudioAnalyser.frequencyBinCount);\n      this._byteTime = new Uint8Array(this._webAudioAnalyser.frequencyBinCount);\n      this._floatFreqs = new Float32Array(this._webAudioAnalyser.frequencyBinCount);\n    }\n  }\n  /**\r\n   * Get the number of data values you will have to play with for the visualization\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount\r\n   * @returns a number\r\n   */\n\n\n  Analyser.prototype.getFrequencyBinCount = function () {\n    if (this._audioEngine.canUseWebAudio) {\n      return this._webAudioAnalyser.frequencyBinCount;\n    } else {\n      return 0;\n    }\n  };\n  /**\r\n   * Gets the current frequency data as a byte array\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\r\n   * @returns a Uint8Array\r\n   */\n\n\n  Analyser.prototype.getByteFrequencyData = function () {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\n      this._webAudioAnalyser.fftSize = this.FFT_SIZE;\n\n      this._webAudioAnalyser.getByteFrequencyData(this._byteFreqs);\n    }\n\n    return this._byteFreqs;\n  };\n  /**\r\n   * Gets the current waveform as a byte array\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData\r\n   * @returns a Uint8Array\r\n   */\n\n\n  Analyser.prototype.getByteTimeDomainData = function () {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\n      this._webAudioAnalyser.fftSize = this.FFT_SIZE;\n\n      this._webAudioAnalyser.getByteTimeDomainData(this._byteTime);\n    }\n\n    return this._byteTime;\n  };\n  /**\r\n   * Gets the current frequency data as a float array\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData\r\n   * @returns a Float32Array\r\n   */\n\n\n  Analyser.prototype.getFloatFrequencyData = function () {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.smoothingTimeConstant = this.SMOOTHING;\n      this._webAudioAnalyser.fftSize = this.FFT_SIZE;\n\n      this._webAudioAnalyser.getFloatFrequencyData(this._floatFreqs);\n    }\n\n    return this._floatFreqs;\n  };\n  /**\r\n   * Renders the debug canvas\r\n   */\n\n\n  Analyser.prototype.drawDebugCanvas = function () {\n    var _this = this;\n\n    if (this._audioEngine.canUseWebAudio) {\n      if (!this._debugCanvas) {\n        this._debugCanvas = document.createElement(\"canvas\");\n        this._debugCanvas.width = this.DEBUGCANVASSIZE.width;\n        this._debugCanvas.height = this.DEBUGCANVASSIZE.height;\n        this._debugCanvas.style.position = \"absolute\";\n        this._debugCanvas.style.top = this.DEBUGCANVASPOS.y + \"px\";\n        this._debugCanvas.style.left = this.DEBUGCANVASPOS.x + \"px\";\n        this._debugCanvasContext = this._debugCanvas.getContext(\"2d\");\n        document.body.appendChild(this._debugCanvas);\n\n        this._registerFunc = function () {\n          _this.drawDebugCanvas();\n        };\n\n        this._scene.registerBeforeRender(this._registerFunc);\n      }\n\n      if (this._registerFunc && this._debugCanvasContext) {\n        var workingArray = this.getByteFrequencyData();\n        this._debugCanvasContext.fillStyle = 'rgb(0, 0, 0)';\n\n        this._debugCanvasContext.fillRect(0, 0, this.DEBUGCANVASSIZE.width, this.DEBUGCANVASSIZE.height); // Draw the frequency domain chart.\n\n\n        for (var i = 0; i < this.getFrequencyBinCount(); i++) {\n          var value = workingArray[i];\n          var percent = value / this.BARGRAPHAMPLITUDE;\n          var height = this.DEBUGCANVASSIZE.height * percent;\n          var offset = this.DEBUGCANVASSIZE.height - height - 1;\n          var barWidth = this.DEBUGCANVASSIZE.width / this.getFrequencyBinCount();\n          var hue = i / this.getFrequencyBinCount() * 360;\n          this._debugCanvasContext.fillStyle = 'hsl(' + hue + ', 100%, 50%)';\n\n          this._debugCanvasContext.fillRect(i * barWidth, offset, barWidth, height);\n        }\n      }\n    }\n  };\n  /**\r\n   * Stops rendering the debug canvas and removes it\r\n   */\n\n\n  Analyser.prototype.stopDebugCanvas = function () {\n    if (this._debugCanvas) {\n      if (this._registerFunc) {\n        this._scene.unregisterBeforeRender(this._registerFunc);\n\n        this._registerFunc = null;\n      }\n\n      document.body.removeChild(this._debugCanvas);\n      this._debugCanvas = null;\n      this._debugCanvasContext = null;\n    }\n  };\n  /**\r\n   * Connects two audio nodes\r\n   * @param inputAudioNode defines first node to connect\r\n   * @param outputAudioNode defines second node to connect\r\n   */\n\n\n  Analyser.prototype.connectAudioNodes = function (inputAudioNode, outputAudioNode) {\n    if (this._audioEngine.canUseWebAudio) {\n      inputAudioNode.connect(this._webAudioAnalyser);\n\n      this._webAudioAnalyser.connect(outputAudioNode);\n    }\n  };\n  /**\r\n   * Releases all associated resources\r\n   */\n\n\n  Analyser.prototype.dispose = function () {\n    if (this._audioEngine.canUseWebAudio) {\n      this._webAudioAnalyser.disconnect();\n    }\n  };\n\n  return Analyser;\n}();\n\nexport { Analyser };","map":null,"metadata":{},"sourceType":"module"}