{"ast":null,"code":"import _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(ensSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleConnectWallet),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchENSRequest),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(handleSetENSResolverRequest),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(handleSetENSContentRequest),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchAuthorizationRequest),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchENSListRequest),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(handleClaimNameRequest),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(handleApproveClaimManaRequest);\n\nimport { Address } from 'web3x/address';\nimport { Contract, providers } from 'ethers';\nimport { namehash } from '@ethersproject/hash';\nimport { call, put, select, takeEvery, takeLatest } from 'redux-saga/effects';\nimport * as contentHash from 'content-hash';\nimport { Network } from '@dcl/schemas';\nimport { ContractName, getContract } from 'decentraland-transactions';\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { getChainIdByNetwork, getNetworkProvider } from 'decentraland-dapps/dist/lib/eth';\nimport { ENS as ENSContract } from 'contracts/ENS';\nimport { ENSResolver } from 'contracts/ENSResolver';\nimport { ENS_ADDRESS, ENS_RESOLVER_ADDRESS, CONTROLLER_ADDRESS, MANA_ADDRESS } from 'modules/common/contracts';\nimport { DCLController } from 'contracts/DCLController';\nimport { ERC20 as MANAToken } from 'contracts/ERC20';\nimport { getWallet } from 'modules/wallet/utils';\nimport { marketplace } from 'lib/api/marketplace';\nimport { ipfs } from 'lib/api/ipfs';\nimport { getLands } from 'modules/land/selectors';\nimport { FETCH_LANDS_SUCCESS } from 'modules/land/actions';\nimport { closeModal } from 'modules/modal/actions';\nimport { FETCH_ENS_REQUEST, fetchENSSuccess, fetchENSFailure, SET_ENS_CONTENT_REQUEST, setENSContentSuccess, setENSContentFailure, SET_ENS_RESOLVER_REQUEST, setENSResolverSuccess, setENSResolverFailure, FETCH_ENS_AUTHORIZATION_REQUEST, fetchENSAuthorizationRequest, fetchENSAuthorizationSuccess, fetchENSAuthorizationFailure, FETCH_ENS_LIST_REQUEST, fetchENSListRequest, fetchENSListSuccess, fetchENSListFailure, CLAIM_NAME_REQUEST, claimNameSuccess, claimNameFailure, ALLOW_CLAIM_MANA_REQUEST, allowClaimManaSuccess, allowClaimManaFailure } from './actions';\nimport { ENSOrigin } from './types';\nimport { getDomainFromName } from './utils';\nexport function ensSaga() {\n  return _regeneratorRuntime.wrap(function ensSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLatest(FETCH_LANDS_SUCCESS, handleConnectWallet);\n\n        case 2:\n          _context.next = 4;\n          return takeEvery(FETCH_ENS_REQUEST, handleFetchENSRequest);\n\n        case 4:\n          _context.next = 6;\n          return takeEvery(SET_ENS_RESOLVER_REQUEST, handleSetENSResolverRequest);\n\n        case 6:\n          _context.next = 8;\n          return takeEvery(SET_ENS_CONTENT_REQUEST, handleSetENSContentRequest);\n\n        case 8:\n          _context.next = 10;\n          return takeEvery(FETCH_ENS_AUTHORIZATION_REQUEST, handleFetchAuthorizationRequest);\n\n        case 10:\n          _context.next = 12;\n          return takeEvery(FETCH_ENS_LIST_REQUEST, handleFetchENSListRequest);\n\n        case 12:\n          _context.next = 14;\n          return takeEvery(CLAIM_NAME_REQUEST, handleClaimNameRequest);\n\n        case 14:\n          _context.next = 16;\n          return takeEvery(ALLOW_CLAIM_MANA_REQUEST, handleApproveClaimManaRequest);\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction handleConnectWallet() {\n  return _regeneratorRuntime.wrap(function handleConnectWallet$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return put(fetchENSAuthorizationRequest());\n\n        case 2:\n          _context2.next = 4;\n          return put(fetchENSListRequest());\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction handleFetchENSRequest(action) {\n  var _action$payload, name, land, subdomain, _yield$getWallet, _yield$getWallet2, wallet, eth, address, nodehash, ensContract, resolverAddress, resolverContract, ipfsHash, landHash, currentContent, ensError;\n\n  return _regeneratorRuntime.wrap(function handleFetchENSRequest$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _action$payload = action.payload, name = _action$payload.name, land = _action$payload.land;\n          subdomain = name.toLowerCase() + '.dcl.eth';\n          _context3.prev = 2;\n          _context3.next = 5;\n          return getWallet();\n\n        case 5:\n          _yield$getWallet = _context3.sent;\n          _yield$getWallet2 = _slicedToArray(_yield$getWallet, 2);\n          wallet = _yield$getWallet2[0];\n          eth = _yield$getWallet2[1];\n          address = wallet.address;\n          nodehash = namehash(subdomain);\n          ensContract = new ENSContract(eth, Address.fromString(ENS_ADDRESS));\n          _context3.next = 14;\n          return call(function () {\n            return ensContract.methods.resolver(nodehash).call();\n          });\n\n        case 14:\n          resolverAddress = _context3.sent;\n\n          if (!(resolverAddress.toString() === Address.ZERO.toString())) {\n            _context3.next = 19;\n            break;\n          }\n\n          _context3.next = 18;\n          return put(fetchENSSuccess({\n            name: name,\n            address: address,\n            subdomain: subdomain,\n            resolver: Address.ZERO.toString(),\n            content: Address.ZERO.toString()\n          }));\n\n        case 18:\n          return _context3.abrupt(\"return\");\n\n        case 19:\n          resolverContract = new ENSResolver(eth, resolverAddress);\n          _context3.next = 22;\n          return call(function () {\n            return ipfs.uploadRedirectionFile(land);\n          });\n\n        case 22:\n          ipfsHash = _context3.sent;\n          landHash = contentHash.fromIpfs(ipfsHash);\n          _context3.next = 26;\n          return call(function () {\n            return resolverContract.methods.contenthash(nodehash).call();\n          });\n\n        case 26:\n          currentContent = _context3.sent;\n\n          if (!(currentContent === Address.ZERO.toString())) {\n            _context3.next = 31;\n            break;\n          }\n\n          _context3.next = 30;\n          return put(fetchENSSuccess({\n            address: address,\n            name: name,\n            subdomain: subdomain,\n            resolver: resolverAddress.toString(),\n            content: Address.ZERO.toString(),\n            ipfsHash: ipfsHash\n          }));\n\n        case 30:\n          return _context3.abrupt(\"return\");\n\n        case 31:\n          if (!(\"0x\".concat(landHash) === currentContent)) {\n            _context3.next = 35;\n            break;\n          }\n\n          _context3.next = 34;\n          return put(fetchENSSuccess({\n            address: address,\n            name: name,\n            subdomain: subdomain,\n            resolver: ENS_RESOLVER_ADDRESS,\n            content: landHash,\n            ipfsHash: ipfsHash,\n            landId: land.id\n          }));\n\n        case 34:\n          return _context3.abrupt(\"return\");\n\n        case 35:\n          _context3.next = 37;\n          return put(fetchENSSuccess({\n            address: address,\n            name: name,\n            subdomain: subdomain,\n            resolver: ENS_RESOLVER_ADDRESS,\n            content: currentContent || Address.ZERO.toString(),\n            landId: ''\n          }));\n\n        case 37:\n          _context3.next = 44;\n          break;\n\n        case 39:\n          _context3.prev = 39;\n          _context3.t0 = _context3[\"catch\"](2);\n          ensError = {\n            message: _context3.t0.message\n          };\n          _context3.next = 44;\n          return put(fetchENSFailure(ensError));\n\n        case 44:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[2, 39]]);\n}\n\nfunction handleSetENSResolverRequest(action) {\n  var ens, _yield$getWallet3, _yield$getWallet4, wallet, eth, from, nodehash, ensContract, txHash, ensError;\n\n  return _regeneratorRuntime.wrap(function handleSetENSResolverRequest$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          ens = action.payload.ens;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return getWallet();\n\n        case 4:\n          _yield$getWallet3 = _context4.sent;\n          _yield$getWallet4 = _slicedToArray(_yield$getWallet3, 2);\n          wallet = _yield$getWallet4[0];\n          eth = _yield$getWallet4[1];\n          from = Address.fromString(wallet.address);\n          nodehash = namehash(ens.subdomain);\n          ensContract = new ENSContract(eth, Address.fromString(ENS_ADDRESS));\n          _context4.next = 13;\n          return call(function () {\n            return ensContract.methods.setResolver(nodehash, Address.fromString(ENS_RESOLVER_ADDRESS)).send({\n              from: from\n            }).getTxHash();\n          });\n\n        case 13:\n          txHash = _context4.sent;\n          _context4.next = 16;\n          return put(setENSResolverSuccess(ens, ENS_RESOLVER_ADDRESS, from.toString(), wallet.chainId, txHash));\n\n        case 16:\n          _context4.next = 23;\n          break;\n\n        case 18:\n          _context4.prev = 18;\n          _context4.t0 = _context4[\"catch\"](1);\n          ensError = {\n            message: _context4.t0.message,\n            code: _context4.t0.code,\n            origin: ENSOrigin.RESOLVER\n          };\n          _context4.next = 23;\n          return put(setENSResolverFailure(ens, ensError));\n\n        case 23:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 18]]);\n}\n\nfunction handleSetENSContentRequest(action) {\n  var _action$payload2, ens, land, _yield$getWallet5, _yield$getWallet6, wallet, eth, from, content, ipfsHash, nodehash, resolverContract, txHash, ensError;\n\n  return _regeneratorRuntime.wrap(function handleSetENSContentRequest$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _action$payload2 = action.payload, ens = _action$payload2.ens, land = _action$payload2.land;\n          _context5.prev = 1;\n          _context5.next = 4;\n          return getWallet();\n\n        case 4:\n          _yield$getWallet5 = _context5.sent;\n          _yield$getWallet6 = _slicedToArray(_yield$getWallet5, 2);\n          wallet = _yield$getWallet6[0];\n          eth = _yield$getWallet6[1];\n          from = Address.fromString(wallet.address);\n          content = '';\n\n          if (!land) {\n            _context5.next = 17;\n            break;\n          }\n\n          _context5.next = 13;\n          return call(function () {\n            return ipfs.uploadRedirectionFile(land);\n          });\n\n        case 13:\n          ipfsHash = _context5.sent;\n          content = \"0x\".concat(contentHash.fromIpfs(ipfsHash));\n          _context5.next = 18;\n          break;\n\n        case 17:\n          content = Address.ZERO.toString();\n\n        case 18:\n          nodehash = namehash(ens.subdomain);\n          resolverContract = new ENSResolver(eth, Address.fromString(ENS_RESOLVER_ADDRESS));\n          _context5.next = 22;\n          return call(function () {\n            return resolverContract.methods.setContenthash(nodehash, content).send({\n              from: from\n            }).getTxHash();\n          });\n\n        case 22:\n          txHash = _context5.sent;\n          _context5.next = 25;\n          return put(setENSContentSuccess(ens, content, land, from.toString(), wallet.chainId, txHash));\n\n        case 25:\n          if (land) {\n            _context5.next = 28;\n            break;\n          }\n\n          _context5.next = 28;\n          return put(closeModal('UnsetENSContentModal'));\n\n        case 28:\n          _context5.next = 35;\n          break;\n\n        case 30:\n          _context5.prev = 30;\n          _context5.t0 = _context5[\"catch\"](1);\n          ensError = {\n            message: _context5.t0.message,\n            code: _context5.t0.code,\n            origin: ENSOrigin.CONTENT\n          };\n          _context5.next = 35;\n          return put(setENSContentFailure(ens, land, ensError));\n\n        case 35:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[1, 30]]);\n}\n\nfunction handleFetchAuthorizationRequest(_action) {\n  var from, chainId, contract, provider, mana, allowance, authorization, allowError;\n  return _regeneratorRuntime.wrap(function handleFetchAuthorizationRequest$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return select(getAddress);\n\n        case 3:\n          from = _context6.sent;\n          chainId = getChainIdByNetwork(Network.ETHEREUM);\n          contract = getContract(ContractName.MANAToken, chainId);\n          _context6.next = 8;\n          return call(getNetworkProvider, chainId);\n\n        case 8:\n          provider = _context6.sent;\n          mana = new Contract(contract.address, contract.abi, new providers.Web3Provider(provider));\n          _context6.next = 12;\n          return call(mana.allowance, from, CONTROLLER_ADDRESS);\n\n        case 12:\n          allowance = _context6.sent;\n          authorization = {\n            allowance: allowance\n          };\n          _context6.next = 16;\n          return put(fetchENSAuthorizationSuccess(authorization, from.toString()));\n\n        case 16:\n          _context6.next = 23;\n          break;\n\n        case 18:\n          _context6.prev = 18;\n          _context6.t0 = _context6[\"catch\"](0);\n          allowError = {\n            message: _context6.t0.message\n          };\n          _context6.next = 23;\n          return put(fetchENSAuthorizationFailure(allowError));\n\n        case 23:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 18]]);\n}\n\nfunction handleFetchENSListRequest(_action) {\n  var landHashes, lands, _iterator, _step, _loop, _yield$getWallet7, _yield$getWallet8, wallet, eth, address, ensContract, domains, ensList, ensError;\n\n  return _regeneratorRuntime.wrap(function handleFetchENSListRequest$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          landHashes = [];\n          _context9.next = 4;\n          return select(getLands);\n\n        case 4:\n          lands = _context9.sent;\n          _iterator = _createForOfIteratorHelper(lands);\n          _context9.prev = 6;\n          _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n            var land, landHash;\n            return _regeneratorRuntime.wrap(function _loop$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    land = _step.value;\n                    _context8.next = 3;\n                    return call(function () {\n                      return ipfs.computeLandHash(land);\n                    });\n\n                  case 3:\n                    landHash = _context8.sent;\n                    landHashes.push({\n                      hash: \"0x\".concat(landHash),\n                      id: land.id\n                    });\n\n                  case 5:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, _loop);\n          });\n\n          _iterator.s();\n\n        case 9:\n          if ((_step = _iterator.n()).done) {\n            _context9.next = 13;\n            break;\n          }\n\n          return _context9.delegateYield(_loop(), \"t0\", 11);\n\n        case 11:\n          _context9.next = 9;\n          break;\n\n        case 13:\n          _context9.next = 18;\n          break;\n\n        case 15:\n          _context9.prev = 15;\n          _context9.t1 = _context9[\"catch\"](6);\n\n          _iterator.e(_context9.t1);\n\n        case 18:\n          _context9.prev = 18;\n\n          _iterator.f();\n\n          return _context9.finish(18);\n\n        case 21:\n          _context9.next = 23;\n          return getWallet();\n\n        case 23:\n          _yield$getWallet7 = _context9.sent;\n          _yield$getWallet8 = _slicedToArray(_yield$getWallet7, 2);\n          wallet = _yield$getWallet8[0];\n          eth = _yield$getWallet8[1];\n          address = wallet.address;\n          ensContract = new ENSContract(eth, Address.fromString(ENS_ADDRESS));\n          _context9.next = 31;\n          return call(function () {\n            return marketplace.fetchENSList(address);\n          });\n\n        case 31:\n          domains = _context9.sent;\n          _context9.next = 34;\n          return call(function () {\n            return Promise.all(domains.map( /*#__PURE__*/function () {\n              var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n                var name, subdomain, landId, content, nodehash, resolverAddress, resolver, resolverContract, land, ens;\n                return _regeneratorRuntime.wrap(function _callee$(_context7) {\n                  while (1) {\n                    switch (_context7.prev = _context7.next) {\n                      case 0:\n                        name = data;\n                        subdomain = \"\".concat(data.toLowerCase(), \".dcl.eth\");\n                        landId = undefined;\n                        content = '';\n                        nodehash = namehash(subdomain);\n                        _context7.next = 7;\n                        return ensContract.methods.resolver(nodehash).call();\n\n                      case 7:\n                        resolverAddress = _context7.sent;\n                        resolver = resolverAddress.toString();\n\n                        if (!(resolver !== Address.ZERO.toString())) {\n                          _context7.next = 16;\n                          break;\n                        }\n\n                        resolverContract = new ENSResolver(eth, resolverAddress);\n                        _context7.next = 13;\n                        return resolverContract.methods.contenthash(nodehash).call();\n\n                      case 13:\n                        content = _context7.sent;\n                        land = landHashes.find(function (lh) {\n                          return lh.hash === content;\n                        });\n\n                        if (land) {\n                          landId = land.id;\n                        }\n\n                      case 16:\n                        ens = {\n                          address: address,\n                          name: name,\n                          subdomain: subdomain,\n                          resolver: resolver,\n                          content: content,\n                          landId: landId\n                        };\n                        return _context7.abrupt(\"return\", ens);\n\n                      case 18:\n                      case \"end\":\n                        return _context7.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x) {\n                return _ref.apply(this, arguments);\n              };\n            }()));\n          });\n\n        case 34:\n          ensList = _context9.sent;\n          _context9.next = 37;\n          return put(fetchENSListSuccess(ensList));\n\n        case 37:\n          _context9.next = 44;\n          break;\n\n        case 39:\n          _context9.prev = 39;\n          _context9.t2 = _context9[\"catch\"](0);\n          ensError = {\n            message: _context9.t2.message\n          };\n          _context9.next = 44;\n          return put(fetchENSListFailure(ensError));\n\n        case 44:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked7, null, [[0, 39], [6, 15, 18, 21]]);\n}\n\nfunction handleClaimNameRequest(action) {\n  var name, _yield$getWallet9, _yield$getWallet10, wallet, eth, from, controllerContract, tx, txHash, ens, ensError;\n\n  return _regeneratorRuntime.wrap(function handleClaimNameRequest$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          name = action.payload.name;\n          _context10.prev = 1;\n          _context10.next = 4;\n          return getWallet();\n\n        case 4:\n          _yield$getWallet9 = _context10.sent;\n          _yield$getWallet10 = _slicedToArray(_yield$getWallet9, 2);\n          wallet = _yield$getWallet10[0];\n          eth = _yield$getWallet10[1];\n          from = Address.fromString(wallet.address);\n          controllerContract = new DCLController(eth, Address.fromString(CONTROLLER_ADDRESS));\n          _context10.next = 12;\n          return call(function () {\n            return controllerContract.methods.register(name, from).send({\n              from: from\n            });\n          });\n\n        case 12:\n          tx = _context10.sent;\n          _context10.next = 15;\n          return call(function () {\n            return tx.getTxHash();\n          });\n\n        case 15:\n          txHash = _context10.sent;\n          ens = {\n            address: wallet.address,\n            name: name,\n            subdomain: getDomainFromName(name),\n            resolver: Address.ZERO.toString(),\n            content: Address.ZERO.toString()\n          };\n          _context10.next = 19;\n          return put(claimNameSuccess(ens, name, wallet.address, wallet.chainId, txHash));\n\n        case 19:\n          _context10.next = 21;\n          return put(closeModal('ClaimNameFatFingerModal'));\n\n        case 21:\n          _context10.next = 28;\n          break;\n\n        case 23:\n          _context10.prev = 23;\n          _context10.t0 = _context10[\"catch\"](1);\n          ensError = {\n            message: _context10.t0.message\n          };\n          _context10.next = 28;\n          return put(claimNameFailure(ensError));\n\n        case 28:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked8, null, [[1, 23]]);\n}\n\nfunction handleApproveClaimManaRequest(action) {\n  var allowance, _yield$getWallet11, _yield$getWallet12, wallet, eth, from, manaContract, txHash, ensError;\n\n  return _regeneratorRuntime.wrap(function handleApproveClaimManaRequest$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          allowance = action.payload.allowance;\n          _context11.prev = 1;\n          _context11.next = 4;\n          return getWallet();\n\n        case 4:\n          _yield$getWallet11 = _context11.sent;\n          _yield$getWallet12 = _slicedToArray(_yield$getWallet11, 2);\n          wallet = _yield$getWallet12[0];\n          eth = _yield$getWallet12[1];\n          from = Address.fromString(wallet.address);\n          manaContract = new MANAToken(eth, Address.fromString(MANA_ADDRESS));\n          _context11.next = 12;\n          return call(function () {\n            return manaContract.methods.approve(Address.fromString(CONTROLLER_ADDRESS), allowance).send({\n              from: from\n            }).getTxHash();\n          });\n\n        case 12:\n          txHash = _context11.sent;\n          _context11.next = 15;\n          return put(allowClaimManaSuccess(allowance, from.toString(), wallet.chainId, txHash));\n\n        case 15:\n          _context11.next = 22;\n          break;\n\n        case 17:\n          _context11.prev = 17;\n          _context11.t0 = _context11[\"catch\"](1);\n          ensError = {\n            message: _context11.t0.message\n          };\n          _context11.next = 22;\n          return put(allowClaimManaFailure(ensError));\n\n        case 22:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked9, null, [[1, 17]]);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/ens/sagas.ts"],"names":["ensSaga","handleConnectWallet","handleFetchENSRequest","handleSetENSResolverRequest","handleSetENSContentRequest","handleFetchAuthorizationRequest","handleFetchENSListRequest","handleClaimNameRequest","handleApproveClaimManaRequest","Address","Contract","providers","namehash","call","put","select","takeEvery","takeLatest","contentHash","Network","ContractName","getContract","getAddress","getChainIdByNetwork","getNetworkProvider","ENS","ENSContract","ENSResolver","ENS_ADDRESS","ENS_RESOLVER_ADDRESS","CONTROLLER_ADDRESS","MANA_ADDRESS","DCLController","ERC20","MANAToken","getWallet","marketplace","ipfs","getLands","FETCH_LANDS_SUCCESS","closeModal","FETCH_ENS_REQUEST","fetchENSSuccess","fetchENSFailure","SET_ENS_CONTENT_REQUEST","setENSContentSuccess","setENSContentFailure","SET_ENS_RESOLVER_REQUEST","setENSResolverSuccess","setENSResolverFailure","FETCH_ENS_AUTHORIZATION_REQUEST","fetchENSAuthorizationRequest","fetchENSAuthorizationSuccess","fetchENSAuthorizationFailure","FETCH_ENS_LIST_REQUEST","fetchENSListRequest","fetchENSListSuccess","fetchENSListFailure","CLAIM_NAME_REQUEST","claimNameSuccess","claimNameFailure","ALLOW_CLAIM_MANA_REQUEST","allowClaimManaSuccess","allowClaimManaFailure","ENSOrigin","getDomainFromName","action","payload","name","land","subdomain","toLowerCase","wallet","eth","address","nodehash","ensContract","fromString","methods","resolver","resolverAddress","toString","ZERO","content","resolverContract","uploadRedirectionFile","ipfsHash","landHash","fromIpfs","contenthash","currentContent","landId","id","ensError","message","ens","from","setResolver","send","getTxHash","txHash","chainId","code","origin","RESOLVER","setContenthash","CONTENT","_action","ETHEREUM","contract","provider","mana","abi","Web3Provider","allowance","authorization","allowError","landHashes","lands","computeLandHash","push","hash","fetchENSList","domains","Promise","all","map","data","undefined","find","lh","ensList","controllerContract","register","tx","manaContract","approve"],"mappings":"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","sourcesContent":["import { Eth, SendTx } from 'web3x/eth'\nimport { Address } from 'web3x/address'\nimport { TransactionReceipt } from 'web3x/formatters'\nimport { Contract, providers } from 'ethers'\nimport { namehash } from '@ethersproject/hash'\nimport { call, put, select, takeEvery, takeLatest } from 'redux-saga/effects'\nimport * as contentHash from 'content-hash'\nimport { Network } from '@dcl/schemas'\nimport { ContractName, getContract } from 'decentraland-transactions'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { getChainIdByNetwork, getNetworkProvider } from 'decentraland-dapps/dist/lib/eth'\nimport { Wallet } from 'decentraland-dapps/dist/modules/wallet/types'\n\nimport { ENS as ENSContract } from 'contracts/ENS'\nimport { ENSResolver } from 'contracts/ENSResolver'\nimport { ENS_ADDRESS, ENS_RESOLVER_ADDRESS, CONTROLLER_ADDRESS, MANA_ADDRESS } from 'modules/common/contracts'\nimport { DCLController } from 'contracts/DCLController'\nimport { ERC20 as MANAToken } from 'contracts/ERC20'\nimport { getWallet } from 'modules/wallet/utils'\nimport { marketplace } from 'lib/api/marketplace'\nimport { ipfs } from 'lib/api/ipfs'\nimport { getLands } from 'modules/land/selectors'\nimport { FETCH_LANDS_SUCCESS } from 'modules/land/actions'\nimport { Land } from 'modules/land/types'\nimport { closeModal } from 'modules/modal/actions'\nimport {\n  FETCH_ENS_REQUEST,\n  FetchENSRequestAction,\n  fetchENSSuccess,\n  fetchENSFailure,\n  SET_ENS_CONTENT_REQUEST,\n  SetENSContentRequestAction,\n  setENSContentSuccess,\n  setENSContentFailure,\n  SET_ENS_RESOLVER_REQUEST,\n  SetENSResolverRequestAction,\n  setENSResolverSuccess,\n  setENSResolverFailure,\n  FETCH_ENS_AUTHORIZATION_REQUEST,\n  FetchENSAuthorizationRequestAction,\n  fetchENSAuthorizationRequest,\n  fetchENSAuthorizationSuccess,\n  fetchENSAuthorizationFailure,\n  FETCH_ENS_LIST_REQUEST,\n  FetchENSListRequestAction,\n  fetchENSListRequest,\n  fetchENSListSuccess,\n  fetchENSListFailure,\n  CLAIM_NAME_REQUEST,\n  ClaimNameRequestAction,\n  claimNameSuccess,\n  claimNameFailure,\n  ALLOW_CLAIM_MANA_REQUEST,\n  AllowClaimManaRequestAction,\n  allowClaimManaSuccess,\n  allowClaimManaFailure\n} from './actions'\nimport { ENS, ENSOrigin, ENSError, Authorization } from './types'\nimport { getDomainFromName } from './utils'\n\nexport function* ensSaga() {\n  yield takeLatest(FETCH_LANDS_SUCCESS, handleConnectWallet)\n  yield takeEvery(FETCH_ENS_REQUEST, handleFetchENSRequest)\n  yield takeEvery(SET_ENS_RESOLVER_REQUEST, handleSetENSResolverRequest)\n  yield takeEvery(SET_ENS_CONTENT_REQUEST, handleSetENSContentRequest)\n  yield takeEvery(FETCH_ENS_AUTHORIZATION_REQUEST, handleFetchAuthorizationRequest)\n  yield takeEvery(FETCH_ENS_LIST_REQUEST, handleFetchENSListRequest)\n  yield takeEvery(CLAIM_NAME_REQUEST, handleClaimNameRequest)\n  yield takeEvery(ALLOW_CLAIM_MANA_REQUEST, handleApproveClaimManaRequest)\n}\n\nfunction* handleConnectWallet() {\n  yield put(fetchENSAuthorizationRequest())\n  yield put(fetchENSListRequest())\n}\n\nfunction* handleFetchENSRequest(action: FetchENSRequestAction) {\n  const { name, land } = action.payload\n  const subdomain = name.toLowerCase() + '.dcl.eth'\n  try {\n    const [wallet, eth]: [Wallet, Eth] = yield getWallet()\n    const address = wallet.address\n    const nodehash = namehash(subdomain)\n    const ensContract = new ENSContract(eth, Address.fromString(ENS_ADDRESS))\n\n    const resolverAddress: Address = yield call(() => ensContract.methods.resolver(nodehash).call())\n\n    if (resolverAddress.toString() === Address.ZERO.toString()) {\n      yield put(\n        fetchENSSuccess({\n          name,\n          address,\n          subdomain,\n          resolver: Address.ZERO.toString(),\n          content: Address.ZERO.toString()\n        })\n      )\n      return\n    }\n\n    const resolverContract = new ENSResolver(eth, resolverAddress)\n    const ipfsHash: string = yield call(() => ipfs.uploadRedirectionFile(land))\n    const landHash = contentHash.fromIpfs(ipfsHash)\n\n    const currentContent: string = yield call(() => resolverContract.methods.contenthash(nodehash).call())\n    if (currentContent === Address.ZERO.toString()) {\n      yield put(\n        fetchENSSuccess({\n          address,\n          name,\n          subdomain,\n          resolver: resolverAddress.toString(),\n          content: Address.ZERO.toString(),\n          ipfsHash\n        })\n      )\n      return\n    }\n\n    if (`0x${landHash}` === currentContent) {\n      yield put(\n        fetchENSSuccess({\n          address,\n          name,\n          subdomain,\n          resolver: ENS_RESOLVER_ADDRESS,\n          content: landHash,\n          ipfsHash,\n          landId: land.id\n        })\n      )\n      return\n    }\n\n    yield put(\n      fetchENSSuccess({\n        address,\n        name,\n        subdomain,\n        resolver: ENS_RESOLVER_ADDRESS,\n        content: currentContent || Address.ZERO.toString(),\n        landId: ''\n      })\n    )\n  } catch (error) {\n    const ensError: ENSError = { message: error.message }\n    yield put(fetchENSFailure(ensError))\n  }\n}\n\nfunction* handleSetENSResolverRequest(action: SetENSResolverRequestAction) {\n  const { ens } = action.payload\n  try {\n    const [wallet, eth]: [Wallet, Eth] = yield getWallet()\n    const from = Address.fromString(wallet.address)\n    const nodehash = namehash(ens.subdomain)\n    const ensContract = new ENSContract(eth, Address.fromString(ENS_ADDRESS))\n\n    const txHash: string = yield call(() =>\n      ensContract.methods\n        .setResolver(nodehash, Address.fromString(ENS_RESOLVER_ADDRESS))\n        .send({ from })\n        .getTxHash()\n    )\n    yield put(setENSResolverSuccess(ens, ENS_RESOLVER_ADDRESS, from.toString(), wallet.chainId, txHash))\n  } catch (error) {\n    const ensError: ENSError = { message: error.message, code: error.code, origin: ENSOrigin.RESOLVER }\n    yield put(setENSResolverFailure(ens, ensError))\n  }\n}\n\nfunction* handleSetENSContentRequest(action: SetENSContentRequestAction) {\n  const { ens, land } = action.payload\n  try {\n    const [wallet, eth]: [Wallet, Eth] = yield getWallet()\n    const from = Address.fromString(wallet.address)\n\n    let content = ''\n\n    if (land) {\n      const ipfsHash: string = yield call(() => ipfs.uploadRedirectionFile(land))\n      content = `0x${contentHash.fromIpfs(ipfsHash)}`\n    } else {\n      content = Address.ZERO.toString()\n    }\n\n    const nodehash = namehash(ens.subdomain)\n    const resolverContract = new ENSResolver(eth, Address.fromString(ENS_RESOLVER_ADDRESS))\n\n    const txHash: string = yield call(() =>\n      resolverContract.methods\n        .setContenthash(nodehash, content)\n        .send({ from })\n        .getTxHash()\n    )\n    yield put(setENSContentSuccess(ens, content, land, from.toString(), wallet.chainId, txHash))\n\n    if (!land) {\n      yield put(closeModal('UnsetENSContentModal'))\n    }\n  } catch (error) {\n    const ensError: ENSError = { message: error.message, code: error.code, origin: ENSOrigin.CONTENT }\n    yield put(setENSContentFailure(ens, land, ensError))\n  }\n}\n\nfunction* handleFetchAuthorizationRequest(_action: FetchENSAuthorizationRequestAction) {\n  try {\n    const from: string = yield select(getAddress)\n    const chainId = getChainIdByNetwork(Network.ETHEREUM)\n    const contract = getContract(ContractName.MANAToken, chainId)\n    const provider: Awaited<ReturnType<typeof getNetworkProvider>> = yield call(getNetworkProvider, chainId)\n    const mana = new Contract(contract.address, contract.abi, new providers.Web3Provider(provider))\n    const allowance: string = yield call(mana.allowance, from, CONTROLLER_ADDRESS)\n    const authorization: Authorization = { allowance }\n\n    yield put(fetchENSAuthorizationSuccess(authorization, from.toString()))\n  } catch (error) {\n    const allowError: ENSError = { message: error.message }\n    yield put(fetchENSAuthorizationFailure(allowError))\n  }\n}\n\nfunction* handleFetchENSListRequest(_action: FetchENSListRequestAction) {\n  try {\n    const landHashes: { id: string; hash: string }[] = []\n    const lands: Land[] = yield select(getLands)\n\n    for (let land of lands) {\n      const landHash: string = yield call(() => ipfs.computeLandHash(land))\n      landHashes.push({ hash: `0x${landHash}`, id: land.id })\n    }\n\n    const [wallet, eth]: [Wallet, Eth] = yield getWallet()\n    const address = wallet.address\n    const ensContract = new ENSContract(eth, Address.fromString(ENS_ADDRESS))\n    const domains: string[] = yield call(() => marketplace.fetchENSList(address))\n\n    const ensList: ENS[] = yield call(() =>\n      Promise.all(\n        domains.map(async data => {\n          const name = data\n          const subdomain = `${data.toLowerCase()}.dcl.eth`\n          let landId: string | undefined = undefined\n          let content: string = ''\n\n          const nodehash = namehash(subdomain)\n          const resolverAddress: Address = await ensContract.methods.resolver(nodehash).call()\n          const resolver = resolverAddress.toString()\n\n          if (resolver !== Address.ZERO.toString()) {\n            const resolverContract = new ENSResolver(eth, resolverAddress)\n            content = await resolverContract.methods.contenthash(nodehash).call()\n\n            const land = landHashes.find(lh => lh.hash === content)\n            if (land) {\n              landId = land.id\n            }\n          }\n\n          const ens: ENS = {\n            address,\n            name,\n            subdomain,\n            resolver,\n            content,\n            landId\n          }\n\n          return ens\n        })\n      )\n    )\n\n    yield put(fetchENSListSuccess(ensList))\n  } catch (error) {\n    const ensError: ENSError = { message: error.message }\n    yield put(fetchENSListFailure(ensError))\n  }\n}\n\nfunction* handleClaimNameRequest(action: ClaimNameRequestAction) {\n  const { name } = action.payload\n  try {\n    const [wallet, eth]: [Wallet, Eth] = yield getWallet()\n    const from = Address.fromString(wallet.address)\n\n    const controllerContract = new DCLController(eth, Address.fromString(CONTROLLER_ADDRESS))\n    const tx: SendTx<TransactionReceipt> = yield call(() => controllerContract.methods.register(name, from).send({ from }))\n    const txHash: string = yield call(() => tx.getTxHash())\n\n    const ens: ENS = {\n      address: wallet.address,\n      name: name,\n      subdomain: getDomainFromName(name),\n      resolver: Address.ZERO.toString(),\n      content: Address.ZERO.toString()\n    }\n    yield put(claimNameSuccess(ens, name, wallet.address, wallet.chainId, txHash))\n    yield put(closeModal('ClaimNameFatFingerModal'))\n  } catch (error) {\n    const ensError: ENSError = { message: error.message }\n    yield put(claimNameFailure(ensError))\n  }\n}\n\nfunction* handleApproveClaimManaRequest(action: AllowClaimManaRequestAction) {\n  const { allowance } = action.payload\n  try {\n    const [wallet, eth]: [Wallet, Eth] = yield getWallet()\n    const from = Address.fromString(wallet.address)\n    const manaContract = new MANAToken(eth, Address.fromString(MANA_ADDRESS))\n\n    const txHash: string = yield call(() =>\n      manaContract.methods\n        .approve(Address.fromString(CONTROLLER_ADDRESS), allowance)\n        .send({ from })\n        .getTxHash()\n    )\n\n    yield put(allowClaimManaSuccess(allowance, from.toString(), wallet.chainId, txHash))\n  } catch (error) {\n    const ensError: ENSError = { message: error.message }\n    yield put(allowClaimManaFailure(ensError))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}