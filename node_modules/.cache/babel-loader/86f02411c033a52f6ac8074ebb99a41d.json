{"ast":null,"code":"import { connect } from 'react-redux';\nimport { getCurrentProject } from 'modules/project/selectors';\nimport { getActivePoolGroup } from 'modules/poolGroup/selectors';\nimport { isReady, isLoading } from 'modules/editor/selectors';\nimport { shareProject } from 'modules/project/actions';\nimport { shareScene } from 'modules/ui/share/actions';\nimport { openModal } from 'modules/modal/actions';\nimport { getError, getProgress, isLoading as isSubmitting } from 'modules/deployment/selectors';\nimport { deployToPoolRequest } from 'modules/deployment/actions';\nimport { isLoggedIn } from 'modules/identity/selectors';\nimport ContestModal from './ContestModal';\n\nvar mapState = function mapState(state, _ownProps) {\n  return {\n    error: getError(state),\n    project: getCurrentProject(state),\n    poolGroup: getActivePoolGroup(state),\n    isReady: isReady(state),\n    isLoading: !isReady(state) || isLoading(state),\n    isLoggedIn: isLoggedIn(state),\n    progress: getProgress(state).value,\n    isSubmitting: isSubmitting(state)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    },\n    onUpdate: function onUpdate(id) {\n      return dispatch(shareProject(id));\n    },\n    onShare: function onShare(target) {\n      return dispatch(shareScene(target));\n    },\n    onDeployToPool: function onDeployToPool(projectId) {\n      var additionalInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return dispatch(deployToPoolRequest(projectId, additionalInfo));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(ContestModal);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/ContestModal/ContestModal.container.ts"],"names":["connect","getCurrentProject","getActivePoolGroup","isReady","isLoading","shareProject","shareScene","openModal","getError","getProgress","isSubmitting","deployToPoolRequest","isLoggedIn","ContestModal","mapState","state","_ownProps","error","project","poolGroup","progress","value","mapDispatch","dispatch","onOpenModal","name","metadata","onUpdate","id","onShare","target","onDeployToPool","projectId","additionalInfo"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AAEA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,0BAAnC;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCL,SAAS,IAAIM,YAA7C,QAAiE,8BAAjE;AACA,SAASC,mBAAT,QAAoC,4BAApC;AAEA,SAASC,UAAT,QAA2B,4BAA3B;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAmBC,SAAnB;AAAA,SAA2D;AAC1EC,IAAAA,KAAK,EAAET,QAAQ,CAACO,KAAD,CAD2D;AAE1EG,IAAAA,OAAO,EAAEjB,iBAAiB,CAACc,KAAD,CAFgD;AAG1EI,IAAAA,SAAS,EAAEjB,kBAAkB,CAACa,KAAD,CAH6C;AAI1EZ,IAAAA,OAAO,EAAEA,OAAO,CAACY,KAAD,CAJ0D;AAK1EX,IAAAA,SAAS,EAAE,CAACD,OAAO,CAACY,KAAD,CAAR,IAAmBX,SAAS,CAACW,KAAD,CALmC;AAM1EH,IAAAA,UAAU,EAAEA,UAAU,CAACG,KAAD,CANoD;AAO1EK,IAAAA,QAAQ,EAAEX,WAAW,CAACM,KAAD,CAAX,CAAmBM,KAP6C;AAQ1EX,IAAAA,YAAY,EAAEA,YAAY,CAACK,KAAD;AARgD,GAA3D;AAAA,CAAjB;;AAWA,IAAMO,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,QAAP;AAAA,aAAoBH,QAAQ,CAAChB,SAAS,CAACkB,IAAD,EAAOC,QAAP,CAAV,CAA5B;AAAA,KADmD;AAEhEC,IAAAA,QAAQ,EAAE,kBAACC,EAAD;AAAA,aAAgBL,QAAQ,CAAClB,YAAY,CAACuB,EAAD,CAAb,CAAxB;AAAA,KAFsD;AAGhEC,IAAAA,OAAO,EAAE,iBAACC,MAAD;AAAA,aAAyBP,QAAQ,CAACjB,UAAU,CAACwB,MAAD,CAAX,CAAjC;AAAA,KAHuD;AAIhEC,IAAAA,cAAc,EAAE,wBAACC,SAAD;AAAA,UAAoBC,cAApB,uEAA4E,IAA5E;AAAA,aACdV,QAAQ,CAACZ,mBAAmB,CAACqB,SAAD,EAAYC,cAAZ,CAApB,CADM;AAAA;AAJgD,GAA9C;AAAA,CAApB;;AAQA,eAAejC,OAAO,CAACc,QAAD,EAAWQ,WAAX,CAAP,CAA+BT,YAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { RootState } from 'modules/common/types'\nimport { getCurrentProject } from 'modules/project/selectors'\nimport { getActivePoolGroup } from 'modules/poolGroup/selectors'\nimport { isReady, isLoading } from 'modules/editor/selectors'\nimport { shareProject } from 'modules/project/actions'\nimport { shareScene } from 'modules/ui/share/actions'\nimport { ShareTarget } from 'modules/ui/share/types'\nimport { openModal } from 'modules/modal/actions'\nimport { getError, getProgress, isLoading as isSubmitting } from 'modules/deployment/selectors'\nimport { deployToPoolRequest } from 'modules/deployment/actions'\nimport { PoolDeploymentAdditionalFields } from 'lib/api/builder'\nimport { isLoggedIn } from 'modules/identity/selectors'\nimport { MapStateProps, MapDispatchProps, MapDispatch, OwnProps } from './ContestModal.types'\nimport ContestModal from './ContestModal'\n\nconst mapState = (state: RootState, _ownProps: OwnProps): MapStateProps => ({\n  error: getError(state),\n  project: getCurrentProject(state)!,\n  poolGroup: getActivePoolGroup(state),\n  isReady: isReady(state),\n  isLoading: !isReady(state) || isLoading(state),\n  isLoggedIn: isLoggedIn(state),\n  progress: getProgress(state).value,\n  isSubmitting: isSubmitting(state)\n})\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata)),\n  onUpdate: (id: string) => dispatch(shareProject(id)),\n  onShare: (target: ShareTarget) => dispatch(shareScene(target)),\n  onDeployToPool: (projectId: string, additionalInfo: PoolDeploymentAdditionalFields | null = null) =>\n    dispatch(deployToPoolRequest(projectId, additionalInfo))\n})\n\nexport default connect(mapState, mapDispatch)(ContestModal)\n"]},"metadata":{},"sourceType":"module"}