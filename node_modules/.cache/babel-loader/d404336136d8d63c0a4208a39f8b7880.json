{"ast":null,"code":"import { action } from 'typesafe-actions';\n// Create a scene (doesn't trigger ECS re-render)\nexport var CREATE_SCENE = 'Create scene';\nexport var createScene = function createScene(scene) {\n  return action(CREATE_SCENE, {\n    scene: scene\n  });\n};\n// Provision a scene\nexport var PROVISION_SCENE = 'Provision scene';\nexport var provisionScene = function provisionScene(scene) {\n  var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return action(PROVISION_SCENE, {\n    scene: scene,\n    init: init\n  });\n};\n// Update metrics\nexport var UPDATE_METRICS = 'Update metrics';\nexport var updateMetrics = function updateMetrics(sceneId, metrics, limits) {\n  return action(UPDATE_METRICS, {\n    sceneId: sceneId,\n    metrics: metrics,\n    limits: limits\n  });\n};\n// Update component\nexport var UPDATE_TRANSFORM = 'Update transform';\nexport var updateTransform = function updateTransform(sceneId, components) {\n  return action(UPDATE_TRANSFORM, {\n    sceneId: sceneId,\n    components: components\n  });\n};\n// Spawn item\nexport var ADD_ITEM = 'Add item';\nexport var addItem = function addItem(asset, position) {\n  return action(ADD_ITEM, {\n    asset: asset,\n    position: position\n  });\n};\n// Spawn item on the mouse position (used for drag and drop)\nexport var DROP_ITEM = 'Drop item';\nexport var dropItem = function dropItem(asset, x, y) {\n  return action(DROP_ITEM, {\n    asset: asset,\n    x: x,\n    y: y\n  });\n};\n// Reset item\nexport var RESET_ITEM = 'Reset item';\nexport var resetItem = function resetItem() {\n  return action(RESET_ITEM, {});\n};\n// Duplicate item\nexport var DUPLICATE_ITEM = 'Duplicate item';\nexport var duplicateItem = function duplicateItem() {\n  return action(DUPLICATE_ITEM, {});\n};\n// Delete item\nexport var DELETE_ITEM = 'Delete item';\nexport var deleteItem = function deleteItem() {\n  return action(DELETE_ITEM, {});\n};\n// Set ground\nexport var SET_GROUND = 'Set ground';\nexport var setGround = function setGround(projectId, asset) {\n  return action(SET_GROUND, {\n    projectId: projectId,\n    asset: asset\n  });\n};\n// Set Layout\nexport var APPLY_LAYOUT = 'Apply Layout';\nexport var applyLayout = function applyLayout(project) {\n  return action(APPLY_LAYOUT, {\n    project: project\n  });\n};\n// Fix Lagacy Namespaces Request\nexport var FIX_LEGACY_NAMESPACES_REQUEST = '[Request] Fix Legacy Namespaces';\nexport var fixLegacyNamespacesRequest = function fixLegacyNamespacesRequest(scene) {\n  return action(FIX_LEGACY_NAMESPACES_REQUEST, {\n    scene: scene\n  });\n};\n// Fix Lagacy Namespaces Success\nexport var FIX_LEGACY_NAMESPACES_SUCCESS = '[Success] Fix Legacy Namespaces';\nexport var fixLegacyNamespacesSuccess = function fixLegacyNamespacesSuccess(scene) {\n  return action(FIX_LEGACY_NAMESPACES_SUCCESS, {\n    scene: scene\n  });\n};\n// Sync Scene Assets\nexport var SYNC_SCENE_ASSETS_REQUEST = '[Request] Sync Scene Assets';\nexport var syncSceneAssetsRequest = function syncSceneAssetsRequest(scene) {\n  return action(SYNC_SCENE_ASSETS_REQUEST, {\n    scene: scene\n  });\n};\n// Sync Scene Assets\nexport var SYNC_SCENE_ASSETS_SUCCESS = '[Success] Sync Scene Assets';\nexport var syncSceneAssetsSuccess = function syncSceneAssetsSuccess(scene) {\n  return action(SYNC_SCENE_ASSETS_SUCCESS, {\n    scene: scene\n  });\n};\n// Set Script Parameters\nexport var SET_SCRIPT_VALUES = 'Set Script Values';\nexport var setScriptValues = function setScriptValues(entityId, values) {\n  return action(SET_SCRIPT_VALUES, {\n    entityId: entityId,\n    values: values\n  });\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/scene/actions.ts"],"names":["action","CREATE_SCENE","createScene","scene","PROVISION_SCENE","provisionScene","init","UPDATE_METRICS","updateMetrics","sceneId","metrics","limits","UPDATE_TRANSFORM","updateTransform","components","ADD_ITEM","addItem","asset","position","DROP_ITEM","dropItem","x","y","RESET_ITEM","resetItem","DUPLICATE_ITEM","duplicateItem","DELETE_ITEM","deleteItem","SET_GROUND","setGround","projectId","APPLY_LAYOUT","applyLayout","project","FIX_LEGACY_NAMESPACES_REQUEST","fixLegacyNamespacesRequest","FIX_LEGACY_NAMESPACES_SUCCESS","fixLegacyNamespacesSuccess","SYNC_SCENE_ASSETS_REQUEST","syncSceneAssetsRequest","SYNC_SCENE_ASSETS_SUCCESS","syncSceneAssetsSuccess","SET_SCRIPT_VALUES","setScriptValues","entityId","values"],"mappings":"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","sourcesContent":["import { action } from 'typesafe-actions'\nimport { Asset, AssetParameterValues } from 'modules/asset/types'\nimport { Scene, ComponentType, ComponentData } from './types'\nimport { ModelMetrics, Vector3 } from 'modules/models/types'\nimport { Project } from 'modules/project/types'\n\n// Create a scene (doesn't trigger ECS re-render)\n\nexport const CREATE_SCENE = 'Create scene'\n\nexport const createScene = (scene: Scene) => action(CREATE_SCENE, { scene })\n\nexport type CreateSceneAction = ReturnType<typeof createScene>\n\n// Provision a scene\n\nexport const PROVISION_SCENE = 'Provision scene'\n\nexport const provisionScene = (scene: Scene, init = false) => action(PROVISION_SCENE, { scene, init })\n\nexport type ProvisionSceneAction = ReturnType<typeof provisionScene>\n\n// Update metrics\n\nexport const UPDATE_METRICS = 'Update metrics'\n\nexport const updateMetrics = (sceneId: string, metrics: ModelMetrics, limits: ModelMetrics) =>\n  action(UPDATE_METRICS, { sceneId, metrics, limits })\n\nexport type UpdateMetricsAction = ReturnType<typeof updateMetrics>\n\n// Update component\n\nexport const UPDATE_TRANSFORM = 'Update transform'\n\nexport const updateTransform = (sceneId: string, components: { componentId: string; data: ComponentData[ComponentType.Transform] }[]) =>\n  action(UPDATE_TRANSFORM, { sceneId, components })\n\nexport type UpdateTransfromAction = ReturnType<typeof updateTransform>\n\n// Spawn item\n\nexport const ADD_ITEM = 'Add item'\n\nexport const addItem = (asset: Asset, position?: Vector3) => action(ADD_ITEM, { asset, position })\n\nexport type AddItemAction = ReturnType<typeof addItem>\n\n// Spawn item on the mouse position (used for drag and drop)\n\nexport const DROP_ITEM = 'Drop item'\n\nexport const dropItem = (asset: Asset, x: number, y: number) => action(DROP_ITEM, { asset, x, y })\n\nexport type DropItemAction = ReturnType<typeof dropItem>\n\n// Reset item\n\nexport const RESET_ITEM = 'Reset item'\n\nexport const resetItem = () => action(RESET_ITEM, {})\n\nexport type ResetItemAction = ReturnType<typeof resetItem>\n\n// Duplicate item\n\nexport const DUPLICATE_ITEM = 'Duplicate item'\n\nexport const duplicateItem = () => action(DUPLICATE_ITEM, {})\n\nexport type DuplicateItemAction = ReturnType<typeof duplicateItem>\n\n// Delete item\n\nexport const DELETE_ITEM = 'Delete item'\n\nexport const deleteItem = () => action(DELETE_ITEM, {})\n\nexport type DeleteItemAction = ReturnType<typeof deleteItem>\n\n// Set ground\n\nexport const SET_GROUND = 'Set ground'\n\nexport const setGround = (projectId: string, asset?: Asset) => action(SET_GROUND, { projectId, asset })\n\nexport type SetGroundAction = ReturnType<typeof setGround>\n\n// Set Layout\n\nexport const APPLY_LAYOUT = 'Apply Layout'\n\nexport const applyLayout = (project: Project) => action(APPLY_LAYOUT, { project })\n\nexport type ApplyLayoutAction = ReturnType<typeof applyLayout>\n\n// Fix Lagacy Namespaces Request\n\nexport const FIX_LEGACY_NAMESPACES_REQUEST = '[Request] Fix Legacy Namespaces'\n\nexport const fixLegacyNamespacesRequest = (scene: Scene) => action(FIX_LEGACY_NAMESPACES_REQUEST, { scene })\n\nexport type FixLegacyNamespacesRequestAction = ReturnType<typeof fixLegacyNamespacesRequest>\n\n// Fix Lagacy Namespaces Success\n\nexport const FIX_LEGACY_NAMESPACES_SUCCESS = '[Success] Fix Legacy Namespaces'\n\nexport const fixLegacyNamespacesSuccess = (scene: Scene) => action(FIX_LEGACY_NAMESPACES_SUCCESS, { scene })\n\nexport type FixLegacyNamespacesSuccessAction = ReturnType<typeof fixLegacyNamespacesSuccess>\n\n// Sync Scene Assets\n\nexport const SYNC_SCENE_ASSETS_REQUEST = '[Request] Sync Scene Assets'\n\nexport const syncSceneAssetsRequest = (scene: Scene) => action(SYNC_SCENE_ASSETS_REQUEST, { scene })\n\nexport type SyncSceneAssetsRequestAction = ReturnType<typeof syncSceneAssetsRequest>\n\n// Sync Scene Assets\n\nexport const SYNC_SCENE_ASSETS_SUCCESS = '[Success] Sync Scene Assets'\n\nexport const syncSceneAssetsSuccess = (scene: Scene) => action(SYNC_SCENE_ASSETS_SUCCESS, { scene })\n\nexport type SyncSceneAssetsSuccessAction = ReturnType<typeof syncSceneAssetsSuccess>\n\n// Set Script Parameters\n\nexport const SET_SCRIPT_VALUES = 'Set Script Values'\n\nexport const setScriptValues = (entityId: string, values: AssetParameterValues) => action(SET_SCRIPT_VALUES, { entityId, values })\n\nexport type SetScriptValuesAction = ReturnType<typeof setScriptValues>\n"]},"metadata":{},"sourceType":"module"}