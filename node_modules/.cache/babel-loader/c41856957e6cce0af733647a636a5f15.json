{"ast":null,"code":"import { Engine } from \"../../../Engines/engine\";\nimport { BasisTools } from \"../../../Misc/basis\";\nimport { Tools } from '../../../Misc/tools';\nimport { StringTools } from '../../../Misc/stringTools';\n/**\r\n * Loader for .basis file format\r\n */\n\nvar _BasisTextureLoader =\n/** @class */\nfunction () {\n  function _BasisTextureLoader() {\n    /**\r\n     * Defines whether the loader supports cascade loading the different faces.\r\n     */\n    this.supportCascades = false;\n  }\n  /**\r\n   * This returns if the loader support the current file information.\r\n   * @param extension defines the file extension of the file being loaded\r\n   * @returns true if the loader can load the specified file\r\n   */\n\n\n  _BasisTextureLoader.prototype.canLoad = function (extension) {\n    return StringTools.EndsWith(extension, \".basis\");\n  };\n  /**\r\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param createPolynomials will be true if polynomials have been requested\r\n   * @param onLoad defines the callback to trigger once the texture is ready\r\n   * @param onError defines the callback to trigger in case of error\r\n   */\n\n\n  _BasisTextureLoader.prototype.loadCubeData = function (data, texture, createPolynomials, onLoad, onError) {\n    if (Array.isArray(data)) {\n      return;\n    }\n\n    var caps = texture.getEngine().getCaps();\n    var transcodeConfig = {\n      supportedCompressionFormats: {\n        etc1: caps.etc1 ? true : false,\n        s3tc: caps.s3tc ? true : false,\n        pvrtc: caps.pvrtc ? true : false,\n        etc2: caps.etc2 ? true : false\n      }\n    };\n    BasisTools.TranscodeAsync(data, transcodeConfig).then(function (result) {\n      var hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n      BasisTools.LoadTextureFromTranscodeResult(texture, result);\n\n      texture.getEngine()._setCubeMapTextureParams(texture, hasMipmap);\n\n      texture.isReady = true;\n      texture.onLoadedObservable.notifyObservers(texture);\n      texture.onLoadedObservable.clear();\n\n      if (onLoad) {\n        onLoad();\n      }\n    }).catch(function (err) {\n      Tools.Warn(\"Failed to transcode Basis file, transcoding may not be supported on this device\");\n      texture.isReady = true;\n    });\n  };\n  /**\r\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param callback defines the method to call once ready to upload\r\n   */\n\n\n  _BasisTextureLoader.prototype.loadData = function (data, texture, callback) {\n    var caps = texture.getEngine().getCaps();\n    var transcodeConfig = {\n      supportedCompressionFormats: {\n        etc1: caps.etc1 ? true : false,\n        s3tc: caps.s3tc ? true : false,\n        pvrtc: caps.pvrtc ? true : false,\n        etc2: caps.etc2 ? true : false\n      }\n    };\n    BasisTools.TranscodeAsync(data, transcodeConfig).then(function (result) {\n      var rootImage = result.fileInfo.images[0].levels[0];\n      var hasMipmap = result.fileInfo.images[0].levels.length > 1 && texture.generateMipMaps;\n      callback(rootImage.width, rootImage.height, hasMipmap, result.format !== -1, function () {\n        BasisTools.LoadTextureFromTranscodeResult(texture, result);\n      });\n    }).catch(function (err) {\n      Tools.Warn(\"Failed to transcode Basis file, transcoding may not be supported on this device\");\n      callback(0, 0, false, false, function () {});\n    });\n  };\n\n  return _BasisTextureLoader;\n}();\n\nexport { _BasisTextureLoader }; // Register the loader.\n\nEngine._TextureLoaders.push(new _BasisTextureLoader());","map":null,"metadata":{},"sourceType":"module"}