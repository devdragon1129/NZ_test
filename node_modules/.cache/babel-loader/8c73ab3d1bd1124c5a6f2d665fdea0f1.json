{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\nimport { Gamepad } from \"../../Gamepads/gamepad\";\n/**\r\n * Manage the gamepad inputs to control a free camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar FreeCameraGamepadInput =\n/** @class */\nfunction () {\n  function FreeCameraGamepadInput() {\n    /**\r\n     * Defines the gamepad rotation sensiblity.\r\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\r\n     */\n    this.gamepadAngularSensibility = 200;\n    /**\r\n     * Defines the gamepad move sensiblity.\r\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\r\n     */\n\n    this.gamepadMoveSensibility = 40;\n    this._yAxisScale = 1.0;\n    this._cameraTransform = Matrix.Identity();\n    this._deltaTransform = Vector3.Zero();\n    this._vector3 = Vector3.Zero();\n    this._vector2 = Vector2.Zero();\n  }\n\n  Object.defineProperty(FreeCameraGamepadInput.prototype, \"invertYAxis\", {\n    /**\r\n     * Gets or sets a boolean indicating that Yaxis (for right stick) should be inverted\r\n     */\n    get: function get() {\n      return this._yAxisScale !== 1.0;\n    },\n    set: function set(value) {\n      this._yAxisScale = value ? -1.0 : 1.0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   */\n\n  FreeCameraGamepadInput.prototype.attachControl = function () {\n    var _this = this;\n\n    var manager = this.camera.getScene().gamepadManager;\n    this._onGamepadConnectedObserver = manager.onGamepadConnectedObservable.add(function (gamepad) {\n      if (gamepad.type !== Gamepad.POSE_ENABLED) {\n        // prioritize XBOX gamepads.\n        if (!_this.gamepad || gamepad.type === Gamepad.XBOX) {\n          _this.gamepad = gamepad;\n        }\n      }\n    });\n    this._onGamepadDisconnectedObserver = manager.onGamepadDisconnectedObservable.add(function (gamepad) {\n      if (_this.gamepad === gamepad) {\n        _this.gamepad = null;\n      }\n    }); // check if there are already other controllers connected\n\n    this.gamepad = manager.getGamepadByType(Gamepad.XBOX); // if no xbox controller was found, but there are gamepad controllers, take the first one\n\n    if (!this.gamepad && manager.gamepads.length) {\n      this.gamepad = manager.gamepads[0];\n    }\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  FreeCameraGamepadInput.prototype.detachControl = function (ignored) {\n    this.camera.getScene().gamepadManager.onGamepadConnectedObservable.remove(this._onGamepadConnectedObserver);\n    this.camera.getScene().gamepadManager.onGamepadDisconnectedObservable.remove(this._onGamepadDisconnectedObserver);\n    this.gamepad = null;\n  };\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\n\n\n  FreeCameraGamepadInput.prototype.checkInputs = function () {\n    if (this.gamepad && this.gamepad.leftStick) {\n      var camera = this.camera;\n      var LSValues = this.gamepad.leftStick;\n      var normalizedLX = LSValues.x / this.gamepadMoveSensibility;\n      var normalizedLY = LSValues.y / this.gamepadMoveSensibility;\n      LSValues.x = Math.abs(normalizedLX) > 0.005 ? 0 + normalizedLX : 0;\n      LSValues.y = Math.abs(normalizedLY) > 0.005 ? 0 + normalizedLY : 0;\n      var RSValues = this.gamepad.rightStick;\n\n      if (RSValues) {\n        var normalizedRX = RSValues.x / this.gamepadAngularSensibility;\n        var normalizedRY = RSValues.y / this.gamepadAngularSensibility * this._yAxisScale;\n        RSValues.x = Math.abs(normalizedRX) > 0.001 ? 0 + normalizedRX : 0;\n        RSValues.y = Math.abs(normalizedRY) > 0.001 ? 0 + normalizedRY : 0;\n      } else {\n        RSValues = {\n          x: 0,\n          y: 0\n        };\n      }\n\n      if (!camera.rotationQuaternion) {\n        Matrix.RotationYawPitchRollToRef(camera.rotation.y, camera.rotation.x, 0, this._cameraTransform);\n      } else {\n        camera.rotationQuaternion.toRotationMatrix(this._cameraTransform);\n      }\n\n      var speed = camera._computeLocalCameraSpeed() * 50.0;\n\n      this._vector3.copyFromFloats(LSValues.x * speed, 0, -LSValues.y * speed);\n\n      Vector3.TransformCoordinatesToRef(this._vector3, this._cameraTransform, this._deltaTransform);\n      camera.cameraDirection.addInPlace(this._deltaTransform);\n\n      this._vector2.copyFromFloats(RSValues.y, RSValues.x);\n\n      camera.cameraRotation.addInPlace(this._vector2);\n    }\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  FreeCameraGamepadInput.prototype.getClassName = function () {\n    return \"FreeCameraGamepadInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  FreeCameraGamepadInput.prototype.getSimpleName = function () {\n    return \"gamepad\";\n  };\n\n  __decorate([serialize()], FreeCameraGamepadInput.prototype, \"gamepadAngularSensibility\", void 0);\n\n  __decorate([serialize()], FreeCameraGamepadInput.prototype, \"gamepadMoveSensibility\", void 0);\n\n  return FreeCameraGamepadInput;\n}();\n\nexport { FreeCameraGamepadInput };\nCameraInputTypes[\"FreeCameraGamepadInput\"] = FreeCameraGamepadInput;","map":null,"metadata":{},"sourceType":"module"}