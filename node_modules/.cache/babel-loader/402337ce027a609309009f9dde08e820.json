{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../nodeMaterialBlock';\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { _TypeStore } from '../../../Misc/typeStore';\nimport { InputBlock } from './Input/inputBlock';\nimport \"../../../Shaders/ShadersInclude/fresnelFunction\";\nimport { ViewDirectionBlock } from './viewDirectionBlock';\n/**\r\n * Block used to compute fresnel value\r\n */\n\nvar FresnelBlock =\n/** @class */\nfunction (_super) {\n  __extends(FresnelBlock, _super);\n  /**\r\n   * Create a new FresnelBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function FresnelBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n\n    _this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerInput(\"viewDirection\", NodeMaterialBlockConnectionPointTypes.Vector3);\n\n    _this.registerInput(\"bias\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerInput(\"power\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"fresnel\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  FresnelBlock.prototype.getClassName = function () {\n    return \"FresnelBlock\";\n  };\n\n  Object.defineProperty(FresnelBlock.prototype, \"worldNormal\", {\n    /**\r\n     * Gets the world normal input component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FresnelBlock.prototype, \"viewDirection\", {\n    /**\r\n    * Gets the view direction input component\r\n    */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FresnelBlock.prototype, \"bias\", {\n    /**\r\n    * Gets the bias input component\r\n    */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FresnelBlock.prototype, \"power\", {\n    /**\r\n    * Gets the camera (or eye) position component\r\n    */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FresnelBlock.prototype, \"fresnel\", {\n    /**\r\n     * Gets the fresnel output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FresnelBlock.prototype.autoConfigure = function (material) {\n    if (!this.viewDirection.isConnected) {\n      var viewDirectionInput = new ViewDirectionBlock(\"View direction\");\n      viewDirectionInput.output.connectTo(this.viewDirection);\n      viewDirectionInput.autoConfigure(material);\n    }\n\n    if (!this.bias.isConnected) {\n      var biasInput = new InputBlock(\"bias\");\n      biasInput.value = 0;\n      biasInput.output.connectTo(this.bias);\n    }\n\n    if (!this.power.isConnected) {\n      var powerInput = new InputBlock(\"power\");\n      powerInput.value = 1;\n      powerInput.output.connectTo(this.power);\n    }\n  };\n\n  FresnelBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var comments = \"//\" + this.name;\n\n    state._emitFunctionFromInclude(\"fresnelFunction\", comments, {\n      removeIfDef: true\n    });\n\n    state.compilationString += this._declareOutput(this.fresnel, state) + (\" = computeFresnelTerm(\" + this.viewDirection.associatedVariableName + \".xyz, \" + this.worldNormal.associatedVariableName + \".xyz, \" + this.bias.associatedVariableName + \", \" + this.power.associatedVariableName + \");\\r\\n\");\n    return this;\n  };\n\n  return FresnelBlock;\n}(NodeMaterialBlock);\n\nexport { FresnelBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.FresnelBlock\"] = FresnelBlock;","map":null,"metadata":{},"sourceType":"module"}