{"ast":null,"code":"import { ArrayTools } from \"../Misc/arrayTools\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\n/**\r\n * Class used to store bounding sphere information\r\n */\n\nvar BoundingSphere =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new bounding sphere\r\n   * @param min defines the minimum vector (in local space)\r\n   * @param max defines the maximum vector (in local space)\r\n   * @param worldMatrix defines the new world matrix\r\n   */\n  function BoundingSphere(min, max, worldMatrix) {\n    /**\r\n     * Gets the center of the bounding sphere in local space\r\n     */\n    this.center = Vector3.Zero();\n    /**\r\n     * Gets the center of the bounding sphere in world space\r\n     */\n\n    this.centerWorld = Vector3.Zero();\n    /**\r\n     * Gets the minimum vector in local space\r\n     */\n\n    this.minimum = Vector3.Zero();\n    /**\r\n     * Gets the maximum vector in local space\r\n     */\n\n    this.maximum = Vector3.Zero();\n    this.reConstruct(min, max, worldMatrix);\n  }\n  /**\r\n   * Recreates the entire bounding sphere from scratch as if we call the constructor in place\r\n   * @param min defines the new minimum vector (in local space)\r\n   * @param max defines the new maximum vector (in local space)\r\n   * @param worldMatrix defines the new world matrix\r\n   */\n\n\n  BoundingSphere.prototype.reConstruct = function (min, max, worldMatrix) {\n    this.minimum.copyFrom(min);\n    this.maximum.copyFrom(max);\n    var distance = Vector3.Distance(min, max);\n    max.addToRef(min, this.center).scaleInPlace(0.5);\n    this.radius = distance * 0.5;\n\n    this._update(worldMatrix || Matrix.IdentityReadOnly);\n  };\n  /**\r\n   * Scale the current bounding sphere by applying a scale factor\r\n   * @param factor defines the scale factor to apply\r\n   * @returns the current bounding box\r\n   */\n\n\n  BoundingSphere.prototype.scale = function (factor) {\n    var newRadius = this.radius * factor;\n    var tmpVectors = BoundingSphere.TmpVector3;\n    var tempRadiusVector = tmpVectors[0].setAll(newRadius);\n    var min = this.center.subtractToRef(tempRadiusVector, tmpVectors[1]);\n    var max = this.center.addToRef(tempRadiusVector, tmpVectors[2]);\n    this.reConstruct(min, max, this._worldMatrix);\n    return this;\n  };\n  /**\r\n   * Gets the world matrix of the bounding box\r\n   * @returns a matrix\r\n   */\n\n\n  BoundingSphere.prototype.getWorldMatrix = function () {\n    return this._worldMatrix;\n  }; // Methods\n\n  /** @hidden */\n\n\n  BoundingSphere.prototype._update = function (worldMatrix) {\n    if (!worldMatrix.isIdentity()) {\n      Vector3.TransformCoordinatesToRef(this.center, worldMatrix, this.centerWorld);\n      var tempVector = BoundingSphere.TmpVector3[0];\n      Vector3.TransformNormalFromFloatsToRef(1.0, 1.0, 1.0, worldMatrix, tempVector);\n      this.radiusWorld = Math.max(Math.abs(tempVector.x), Math.abs(tempVector.y), Math.abs(tempVector.z)) * this.radius;\n    } else {\n      this.centerWorld.copyFrom(this.center);\n      this.radiusWorld = this.radius;\n    }\n  };\n  /**\r\n   * Tests if the bounding sphere is intersecting the frustum planes\r\n   * @param frustumPlanes defines the frustum planes to test\r\n   * @returns true if there is an intersection\r\n   */\n\n\n  BoundingSphere.prototype.isInFrustum = function (frustumPlanes) {\n    var center = this.centerWorld;\n    var radius = this.radiusWorld;\n\n    for (var i = 0; i < 6; i++) {\n      if (frustumPlanes[i].dotCoordinate(center) <= -radius) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Tests if the bounding sphere center is in between the frustum planes.\r\n   * Used for optimistic fast inclusion.\r\n   * @param frustumPlanes defines the frustum planes to test\r\n   * @returns true if the sphere center is in between the frustum planes\r\n   */\n\n\n  BoundingSphere.prototype.isCenterInFrustum = function (frustumPlanes) {\n    var center = this.centerWorld;\n\n    for (var i = 0; i < 6; i++) {\n      if (frustumPlanes[i].dotCoordinate(center) < 0) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Tests if a point is inside the bounding sphere\r\n   * @param point defines the point to test\r\n   * @returns true if the point is inside the bounding sphere\r\n   */\n\n\n  BoundingSphere.prototype.intersectsPoint = function (point) {\n    var squareDistance = Vector3.DistanceSquared(this.centerWorld, point);\n\n    if (this.radiusWorld * this.radiusWorld < squareDistance) {\n      return false;\n    }\n\n    return true;\n  }; // Statics\n\n  /**\r\n   * Checks if two sphere intersct\r\n   * @param sphere0 sphere 0\r\n   * @param sphere1 sphere 1\r\n   * @returns true if the speres intersect\r\n   */\n\n\n  BoundingSphere.Intersects = function (sphere0, sphere1) {\n    var squareDistance = Vector3.DistanceSquared(sphere0.centerWorld, sphere1.centerWorld);\n    var radiusSum = sphere0.radiusWorld + sphere1.radiusWorld;\n\n    if (radiusSum * radiusSum < squareDistance) {\n      return false;\n    }\n\n    return true;\n  };\n\n  BoundingSphere.TmpVector3 = ArrayTools.BuildArray(3, Vector3.Zero);\n  return BoundingSphere;\n}();\n\nexport { BoundingSphere };","map":null,"metadata":{},"sourceType":"module"}