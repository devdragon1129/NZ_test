{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _objectSpread = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applySubschema = exports.Type = void 0;\n\nvar validate_1 = require(\"./validate\");\n\nvar util_1 = require(\"./util\");\n\nvar codegen_1 = require(\"./codegen\");\n\nvar Type;\n\n(function (Type) {\n  Type[Type[\"Num\"] = 0] = \"Num\";\n  Type[Type[\"Str\"] = 1] = \"Str\";\n})(Type = exports.Type || (exports.Type = {}));\n\nfunction applySubschema(it, appl, valid) {\n  var subschema = getSubschema(it, appl);\n  extendSubschemaData(subschema, it, appl);\n  extendSubschemaMode(subschema, appl);\n\n  var nextContext = _objectSpread({}, it, subschema, {\n    items: undefined,\n    props: undefined\n  });\n\n  validate_1.subschemaCode(nextContext, valid);\n  return nextContext;\n}\n\nexports.applySubschema = applySubschema;\n\nfunction getSubschema(it, _ref) {\n  var keyword = _ref.keyword,\n      schemaProp = _ref.schemaProp,\n      schema = _ref.schema,\n      schemaPath = _ref.schemaPath,\n      errSchemaPath = _ref.errSchemaPath,\n      topSchemaRef = _ref.topSchemaRef;\n\n  if (keyword !== undefined && schema !== undefined) {\n    throw new Error('both \"keyword\" and \"schema\" passed, only one allowed');\n  }\n\n  if (keyword !== undefined) {\n    var sch = it.schema[keyword];\n    return schemaProp === undefined ? {\n      schema: sch,\n      schemaPath: codegen_1._(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\", \"\", \"\"])), it.schemaPath, codegen_1.getProperty(keyword)),\n      errSchemaPath: \"\".concat(it.errSchemaPath, \"/\").concat(keyword)\n    } : {\n      schema: sch[schemaProp],\n      schemaPath: codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\", \"\", \"\", \"\"])), it.schemaPath, codegen_1.getProperty(keyword), codegen_1.getProperty(schemaProp)),\n      errSchemaPath: \"\".concat(it.errSchemaPath, \"/\").concat(keyword, \"/\").concat(util_1.escapeFragment(schemaProp))\n    };\n  }\n\n  if (schema !== undefined) {\n    if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {\n      throw new Error('\"schemaPath\", \"errSchemaPath\" and \"topSchemaRef\" are required with \"schema\"');\n    }\n\n    return {\n      schema: schema,\n      schemaPath: schemaPath,\n      topSchemaRef: topSchemaRef,\n      errSchemaPath: errSchemaPath\n    };\n  }\n\n  throw new Error('either \"keyword\" or \"schema\" must be passed');\n}\n\nfunction extendSubschemaData(subschema, it, _ref2) {\n  var dataProp = _ref2.dataProp,\n      dpType = _ref2.dataPropType,\n      data = _ref2.data,\n      dataTypes = _ref2.dataTypes,\n      propertyName = _ref2.propertyName;\n\n  if (data !== undefined && dataProp !== undefined) {\n    throw new Error('both \"data\" and \"dataProp\" passed, only one allowed');\n  }\n\n  var gen = it.gen;\n\n  if (dataProp !== undefined) {\n    var errorPath = it.errorPath,\n        dataPathArr = it.dataPathArr,\n        opts = it.opts;\n    var nextData = gen.let(\"data\", codegen_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \"\", \"\"])), it.data, codegen_1.getProperty(dataProp)), true);\n    dataContextProps(nextData);\n    subschema.errorPath = codegen_1.str(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \"\", \"\"])), errorPath, getErrorPath(dataProp, dpType, opts.jsPropertySyntax));\n    subschema.parentDataProperty = codegen_1._(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \"\"])), dataProp);\n    subschema.dataPathArr = [].concat(_toConsumableArray(dataPathArr), [subschema.parentDataProperty]);\n  }\n\n  if (data !== undefined) {\n    var _nextData2 = data instanceof codegen_1.Name ? data : gen.let(\"data\", data, true); // replaceable if used once?\n\n\n    dataContextProps(_nextData2);\n    if (propertyName !== undefined) subschema.propertyName = propertyName; // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr\n  }\n\n  if (dataTypes) subschema.dataTypes = dataTypes;\n\n  function dataContextProps(_nextData) {\n    subschema.data = _nextData;\n    subschema.dataLevel = it.dataLevel + 1;\n    subschema.dataTypes = [];\n    it.definedProperties = new Set();\n    subschema.parentData = it.data;\n    subschema.dataNames = [].concat(_toConsumableArray(it.dataNames), [_nextData]);\n  }\n}\n\nfunction extendSubschemaMode(subschema, _ref3) {\n  var jtdDiscriminator = _ref3.jtdDiscriminator,\n      jtdMetadata = _ref3.jtdMetadata,\n      compositeRule = _ref3.compositeRule,\n      createErrors = _ref3.createErrors,\n      allErrors = _ref3.allErrors;\n  if (compositeRule !== undefined) subschema.compositeRule = compositeRule;\n  if (createErrors !== undefined) subschema.createErrors = createErrors;\n  if (allErrors !== undefined) subschema.allErrors = allErrors;\n  subschema.jtdDiscriminator = jtdDiscriminator; // not inherited\n\n  subschema.jtdMetadata = jtdMetadata; // not inherited\n}\n\nfunction getErrorPath(dataProp, dataPropType, jsPropertySyntax) {\n  // let path\n  if (dataProp instanceof codegen_1.Name) {\n    var isNumber = dataPropType === Type.Num;\n    return jsPropertySyntax ? isNumber ? codegen_1._(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\\\"[\\\" + \", \" + \\\"]\\\"\"])), dataProp) : codegen_1._(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\\\"['\\\" + \", \" + \\\"']\\\"\"])), dataProp) : isNumber ? codegen_1._(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\\\"/\\\" + \", \"\"])), dataProp) : codegen_1._(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"\\\"/\\\" + \", \".replace(/~/g, \\\"~0\\\").replace(/\\\\//g, \\\"~1\\\")\"], [\"\\\"/\\\" + \", \".replace(/~/g, \\\"~0\\\").replace(/\\\\\\\\//g, \\\"~1\\\")\"])), dataProp); // TODO maybe use global escapePointer\n  }\n\n  return jsPropertySyntax ? codegen_1.getProperty(dataProp).toString() : \"/\" + util_1.escapeJsonPointer(dataProp);\n}","map":null,"metadata":{},"sourceType":"script"}