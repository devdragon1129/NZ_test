{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _objectSpread = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;\n\nvar validate_1 = require(\"./compile/validate\");\n\nObject.defineProperty(exports, \"KeywordCxt\", {\n  enumerable: true,\n  get: function get() {\n    return validate_1.KeywordCxt;\n  }\n});\n\nvar codegen_1 = require(\"./compile/codegen\");\n\nObject.defineProperty(exports, \"_\", {\n  enumerable: true,\n  get: function get() {\n    return codegen_1._;\n  }\n});\nObject.defineProperty(exports, \"str\", {\n  enumerable: true,\n  get: function get() {\n    return codegen_1.str;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function get() {\n    return codegen_1.stringify;\n  }\n});\nObject.defineProperty(exports, \"nil\", {\n  enumerable: true,\n  get: function get() {\n    return codegen_1.nil;\n  }\n});\nObject.defineProperty(exports, \"Name\", {\n  enumerable: true,\n  get: function get() {\n    return codegen_1.Name;\n  }\n});\nObject.defineProperty(exports, \"CodeGen\", {\n  enumerable: true,\n  get: function get() {\n    return codegen_1.CodeGen;\n  }\n});\n\nvar validation_error_1 = require(\"./runtime/validation_error\");\n\nvar ref_error_1 = require(\"./compile/ref_error\");\n\nvar rules_1 = require(\"./compile/rules\");\n\nvar compile_1 = require(\"./compile\");\n\nvar codegen_2 = require(\"./compile/codegen\");\n\nvar resolve_1 = require(\"./compile/resolve\");\n\nvar dataType_1 = require(\"./compile/validate/dataType\");\n\nvar util_1 = require(\"./compile/util\");\n\nvar $dataRefSchema = require(\"./refs/data.json\");\n\nvar uri_1 = require(\"./runtime/uri\");\n\nvar defaultRegExp = function defaultRegExp(str, flags) {\n  return new RegExp(str, flags);\n};\n\ndefaultRegExp.code = \"new RegExp\";\nvar META_IGNORE_OPTIONS = [\"removeAdditional\", \"useDefaults\", \"coerceTypes\"];\nvar EXT_SCOPE_NAMES = new Set([\"validate\", \"serialize\", \"parse\", \"wrapper\", \"root\", \"schema\", \"keyword\", \"pattern\", \"formats\", \"validate$data\", \"func\", \"obj\", \"Error\"]);\nvar removedOptions = {\n  errorDataPath: \"\",\n  format: \"`validateFormats: false` can be used instead.\",\n  nullable: '\"nullable\" keyword is supported by default.',\n  jsonPointers: \"Deprecated jsPropertySyntax can be used instead.\",\n  extendRefs: \"Deprecated ignoreKeywordsWithRef can be used instead.\",\n  missingRefs: \"Pass empty schema with $id that should be ignored to ajv.addSchema.\",\n  processCode: \"Use option `code: {process: (code, schemaEnv: object) => string}`\",\n  sourceCode: \"Use option `code: {source: true}`\",\n  strictDefaults: \"It is default now, see option `strict`.\",\n  strictKeywords: \"It is default now, see option `strict`.\",\n  uniqueItems: '\"uniqueItems\" keyword is always validated.',\n  unknownFormats: \"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).\",\n  cache: \"Map is used as cache, schema object as key.\",\n  serialize: \"Map is used as cache, schema object as key.\",\n  ajvErrors: \"It is default now.\"\n};\nvar deprecatedOptions = {\n  ignoreKeywordsWithRef: \"\",\n  jsPropertySyntax: \"\",\n  unicode: '\"minLength\"/\"maxLength\" account for unicode characters by default.'\n};\nvar MAX_EXPRESSION = 200; // eslint-disable-next-line complexity\n\nfunction requiredOptions(o) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;\n\n  var s = o.strict;\n\n  var _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;\n\n  var optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;\n  var regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;\n  var uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;\n  return {\n    strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,\n    strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,\n    strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : \"log\",\n    strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : \"log\",\n    strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,\n    code: o.code ? _objectSpread({}, o.code, {\n      optimize: optimize,\n      regExp: regExp\n    }) : {\n      optimize: optimize,\n      regExp: regExp\n    },\n    loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,\n    loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,\n    meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,\n    messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,\n    inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,\n    schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : \"$id\",\n    addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,\n    validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,\n    validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,\n    unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,\n    int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,\n    uriResolver: uriResolver\n  };\n}\n\nvar Ajv = /*#__PURE__*/function () {\n  function Ajv() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Ajv);\n\n    this.schemas = {};\n    this.refs = {};\n    this.formats = {};\n    this._compilations = new Set();\n    this._loading = {};\n    this._cache = new Map();\n    opts = this.opts = _objectSpread({}, opts, requiredOptions(opts));\n    var _this$opts$code = this.opts.code,\n        es5 = _this$opts$code.es5,\n        lines = _this$opts$code.lines;\n    this.scope = new codegen_2.ValueScope({\n      scope: {},\n      prefixes: EXT_SCOPE_NAMES,\n      es5: es5,\n      lines: lines\n    });\n    this.logger = getLogger(opts.logger);\n    var formatOpt = opts.validateFormats;\n    opts.validateFormats = false;\n    this.RULES = (0, rules_1.getRules)();\n    checkOptions.call(this, removedOptions, opts, \"NOT SUPPORTED\");\n    checkOptions.call(this, deprecatedOptions, opts, \"DEPRECATED\", \"warn\");\n    this._metaOpts = getMetaSchemaOptions.call(this);\n    if (opts.formats) addInitialFormats.call(this);\n\n    this._addVocabularies();\n\n    this._addDefaultMetaSchema();\n\n    if (opts.keywords) addInitialKeywords.call(this, opts.keywords);\n    if (typeof opts.meta == \"object\") this.addMetaSchema(opts.meta);\n    addInitialSchemas.call(this);\n    opts.validateFormats = formatOpt;\n  }\n\n  _createClass(Ajv, [{\n    key: \"_addVocabularies\",\n    value: function _addVocabularies() {\n      this.addKeyword(\"$async\");\n    }\n  }, {\n    key: \"_addDefaultMetaSchema\",\n    value: function _addDefaultMetaSchema() {\n      var _this$opts = this.opts,\n          $data = _this$opts.$data,\n          meta = _this$opts.meta,\n          schemaId = _this$opts.schemaId;\n      var _dataRefSchema = $dataRefSchema;\n\n      if (schemaId === \"id\") {\n        _dataRefSchema = _objectSpread({}, $dataRefSchema);\n        _dataRefSchema.id = _dataRefSchema.$id;\n        delete _dataRefSchema.$id;\n      }\n\n      if (meta && $data) this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);\n    }\n  }, {\n    key: \"defaultMeta\",\n    value: function defaultMeta() {\n      var _this$opts2 = this.opts,\n          meta = _this$opts2.meta,\n          schemaId = _this$opts2.schemaId;\n      return this.opts.defaultMeta = typeof meta == \"object\" ? meta[schemaId] || meta : undefined;\n    }\n  }, {\n    key: \"validate\",\n    value: function validate(schemaKeyRef, // key, ref or schema object\n    data // to be validated\n    ) {\n      var v;\n\n      if (typeof schemaKeyRef == \"string\") {\n        v = this.getSchema(schemaKeyRef);\n        if (!v) throw new Error(\"no schema with key or ref \\\"\".concat(schemaKeyRef, \"\\\"\"));\n      } else {\n        v = this.compile(schemaKeyRef);\n      }\n\n      var valid = v(data);\n      if (!(\"$async\" in v)) this.errors = v.errors;\n      return valid;\n    }\n  }, {\n    key: \"compile\",\n    value: function compile(schema, _meta) {\n      var sch = this._addSchema(schema, _meta);\n\n      return sch.validate || this._compileSchemaEnv(sch);\n    }\n  }, {\n    key: \"compileAsync\",\n    value: function compileAsync(schema, meta) {\n      if (typeof this.opts.loadSchema != \"function\") {\n        throw new Error(\"options.loadSchema should be a function\");\n      }\n\n      var loadSchema = this.opts.loadSchema;\n      return runCompileAsync.call(this, schema, meta);\n\n      function runCompileAsync(_x2, _x3) {\n        return _runCompileAsync.apply(this, arguments);\n      }\n\n      function _runCompileAsync() {\n        _runCompileAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_schema, _meta) {\n          var sch;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return loadMetaSchema.call(this, _schema.$schema);\n\n                case 2:\n                  sch = this._addSchema(_schema, _meta);\n                  return _context.abrupt(\"return\", sch.validate || _compileAsync.call(this, sch));\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n        return _runCompileAsync.apply(this, arguments);\n      }\n\n      function loadMetaSchema(_x4) {\n        return _loadMetaSchema.apply(this, arguments);\n      }\n\n      function _loadMetaSchema() {\n        _loadMetaSchema = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2($ref) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!($ref && !this.getSchema($ref))) {\n                    _context2.next = 3;\n                    break;\n                  }\n\n                  _context2.next = 3;\n                  return runCompileAsync.call(this, {\n                    $ref: $ref\n                  }, true);\n\n                case 3:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n        return _loadMetaSchema.apply(this, arguments);\n      }\n\n      function _compileAsync(_x5) {\n        return _compileAsync2.apply(this, arguments);\n      }\n\n      function _compileAsync2() {\n        _compileAsync2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(sch) {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.prev = 0;\n                  return _context3.abrupt(\"return\", this._compileSchemaEnv(sch));\n\n                case 4:\n                  _context3.prev = 4;\n                  _context3.t0 = _context3[\"catch\"](0);\n\n                  if (_context3.t0 instanceof ref_error_1.default) {\n                    _context3.next = 8;\n                    break;\n                  }\n\n                  throw _context3.t0;\n\n                case 8:\n                  checkLoaded.call(this, _context3.t0);\n                  _context3.next = 11;\n                  return loadMissingSchema.call(this, _context3.t0.missingSchema);\n\n                case 11:\n                  return _context3.abrupt(\"return\", _compileAsync.call(this, sch));\n\n                case 12:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this, [[0, 4]]);\n        }));\n        return _compileAsync2.apply(this, arguments);\n      }\n\n      function checkLoaded(_ref) {\n        var ref = _ref.missingSchema,\n            missingRef = _ref.missingRef;\n\n        if (this.refs[ref]) {\n          throw new Error(\"AnySchema \".concat(ref, \" is loaded but \").concat(missingRef, \" cannot be resolved\"));\n        }\n      }\n\n      function loadMissingSchema(_x6) {\n        return _loadMissingSchema.apply(this, arguments);\n      }\n\n      function _loadMissingSchema() {\n        _loadMissingSchema = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ref) {\n          var _schema;\n\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return _loadSchema.call(this, ref);\n\n                case 2:\n                  _schema = _context4.sent;\n\n                  if (this.refs[ref]) {\n                    _context4.next = 6;\n                    break;\n                  }\n\n                  _context4.next = 6;\n                  return loadMetaSchema.call(this, _schema.$schema);\n\n                case 6:\n                  if (!this.refs[ref]) this.addSchema(_schema, ref, meta);\n\n                case 7:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this);\n        }));\n        return _loadMissingSchema.apply(this, arguments);\n      }\n\n      function _loadSchema(_x7) {\n        return _loadSchema2.apply(this, arguments);\n      }\n\n      function _loadSchema2() {\n        _loadSchema2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ref) {\n          var p;\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  p = this._loading[ref];\n\n                  if (!p) {\n                    _context5.next = 3;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\", p);\n\n                case 3:\n                  _context5.prev = 3;\n                  _context5.next = 6;\n                  return this._loading[ref] = loadSchema(ref);\n\n                case 6:\n                  return _context5.abrupt(\"return\", _context5.sent);\n\n                case 7:\n                  _context5.prev = 7;\n                  delete this._loading[ref];\n                  return _context5.finish(7);\n\n                case 10:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, this, [[3,, 7, 10]]);\n        }));\n        return _loadSchema2.apply(this, arguments);\n      }\n    } // Adds schema to the instance\n\n  }, {\n    key: \"addSchema\",\n    value: function addSchema(schema, // If array is passed, `key` will be ignored\n    key, // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n    _meta) {\n      var _validateSchema = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.opts.validateSchema;\n\n      if (Array.isArray(schema)) {\n        var _iterator = _createForOfIteratorHelper(schema),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var sch = _step.value;\n            this.addSchema(sch, undefined, _meta, _validateSchema);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return this;\n      }\n\n      var id;\n\n      if (typeof schema === \"object\") {\n        var schemaId = this.opts.schemaId;\n        id = schema[schemaId];\n\n        if (id !== undefined && typeof id != \"string\") {\n          throw new Error(\"schema \".concat(schemaId, \" must be string\"));\n        }\n      }\n\n      key = (0, resolve_1.normalizeId)(key || id);\n\n      this._checkUnique(key);\n\n      this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);\n      return this;\n    } // Add schema that will be used to validate other schemas\n    // options in META_IGNORE_OPTIONS are alway set to false\n\n  }, {\n    key: \"addMetaSchema\",\n    value: function addMetaSchema(schema, key) {\n      var _validateSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.opts.validateSchema;\n\n      this.addSchema(schema, key, true, _validateSchema);\n      return this;\n    } //  Validate schema against its meta-schema\n\n  }, {\n    key: \"validateSchema\",\n    value: function validateSchema(schema, throwOrLogError) {\n      if (typeof schema == \"boolean\") return true;\n      var $schema;\n      $schema = schema.$schema;\n\n      if ($schema !== undefined && typeof $schema != \"string\") {\n        throw new Error(\"$schema must be a string\");\n      }\n\n      $schema = $schema || this.opts.defaultMeta || this.defaultMeta();\n\n      if (!$schema) {\n        this.logger.warn(\"meta-schema not available\");\n        this.errors = null;\n        return true;\n      }\n\n      var valid = this.validate($schema, schema);\n\n      if (!valid && throwOrLogError) {\n        var message = \"schema is invalid: \" + this.errorsText();\n        if (this.opts.validateSchema === \"log\") this.logger.error(message);else throw new Error(message);\n      }\n\n      return valid;\n    } // Get compiled schema by `key` or `ref`.\n    // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)\n\n  }, {\n    key: \"getSchema\",\n    value: function getSchema(keyRef) {\n      var sch;\n\n      while (typeof (sch = getSchEnv.call(this, keyRef)) == \"string\") {\n        keyRef = sch;\n      }\n\n      if (sch === undefined) {\n        var schemaId = this.opts.schemaId;\n        var root = new compile_1.SchemaEnv({\n          schema: {},\n          schemaId: schemaId\n        });\n        sch = compile_1.resolveSchema.call(this, root, keyRef);\n        if (!sch) return;\n        this.refs[keyRef] = sch;\n      }\n\n      return sch.validate || this._compileSchemaEnv(sch);\n    } // Remove cached schema(s).\n    // If no parameter is passed all schemas but meta-schemas are removed.\n    // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n    // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n\n  }, {\n    key: \"removeSchema\",\n    value: function removeSchema(schemaKeyRef) {\n      if (schemaKeyRef instanceof RegExp) {\n        this._removeAllSchemas(this.schemas, schemaKeyRef);\n\n        this._removeAllSchemas(this.refs, schemaKeyRef);\n\n        return this;\n      }\n\n      switch (typeof schemaKeyRef) {\n        case \"undefined\":\n          this._removeAllSchemas(this.schemas);\n\n          this._removeAllSchemas(this.refs);\n\n          this._cache.clear();\n\n          return this;\n\n        case \"string\":\n          {\n            var sch = getSchEnv.call(this, schemaKeyRef);\n            if (typeof sch == \"object\") this._cache.delete(sch.schema);\n            delete this.schemas[schemaKeyRef];\n            delete this.refs[schemaKeyRef];\n            return this;\n          }\n\n        case \"object\":\n          {\n            var cacheKey = schemaKeyRef;\n\n            this._cache.delete(cacheKey);\n\n            var id = schemaKeyRef[this.opts.schemaId];\n\n            if (id) {\n              id = (0, resolve_1.normalizeId)(id);\n              delete this.schemas[id];\n              delete this.refs[id];\n            }\n\n            return this;\n          }\n\n        default:\n          throw new Error(\"ajv.removeSchema: invalid parameter\");\n      }\n    } // add \"vocabulary\" - a collection of keywords\n\n  }, {\n    key: \"addVocabulary\",\n    value: function addVocabulary(definitions) {\n      var _iterator2 = _createForOfIteratorHelper(definitions),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var def = _step2.value;\n          this.addKeyword(def);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"addKeyword\",\n    value: function addKeyword(kwdOrDef, def // deprecated\n    ) {\n      var _this = this;\n\n      var keyword;\n\n      if (typeof kwdOrDef == \"string\") {\n        keyword = kwdOrDef;\n\n        if (typeof def == \"object\") {\n          this.logger.warn(\"these parameters are deprecated, see docs for addKeyword\");\n          def.keyword = keyword;\n        }\n      } else if (typeof kwdOrDef == \"object\" && def === undefined) {\n        def = kwdOrDef;\n        keyword = def.keyword;\n\n        if (Array.isArray(keyword) && !keyword.length) {\n          throw new Error(\"addKeywords: keyword must be string or non-empty array\");\n        }\n      } else {\n        throw new Error(\"invalid addKeywords parameters\");\n      }\n\n      checkKeyword.call(this, keyword, def);\n\n      if (!def) {\n        (0, util_1.eachItem)(keyword, function (kwd) {\n          return addRule.call(_this, kwd);\n        });\n        return this;\n      }\n\n      keywordMetaschema.call(this, def);\n\n      var definition = _objectSpread({}, def, {\n        type: (0, dataType_1.getJSONTypes)(def.type),\n        schemaType: (0, dataType_1.getJSONTypes)(def.schemaType)\n      });\n\n      (0, util_1.eachItem)(keyword, definition.type.length === 0 ? function (k) {\n        return addRule.call(_this, k, definition);\n      } : function (k) {\n        return definition.type.forEach(function (t) {\n          return addRule.call(_this, k, definition, t);\n        });\n      });\n      return this;\n    }\n  }, {\n    key: \"getKeyword\",\n    value: function getKeyword(keyword) {\n      var rule = this.RULES.all[keyword];\n      return typeof rule == \"object\" ? rule.definition : !!rule;\n    } // Remove keyword\n\n  }, {\n    key: \"removeKeyword\",\n    value: function removeKeyword(keyword) {\n      // TODO return type should be Ajv\n      var RULES = this.RULES;\n      delete RULES.keywords[keyword];\n      delete RULES.all[keyword];\n\n      var _iterator3 = _createForOfIteratorHelper(RULES.rules),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var group = _step3.value;\n          var i = group.rules.findIndex(function (rule) {\n            return rule.keyword === keyword;\n          });\n          if (i >= 0) group.rules.splice(i, 1);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return this;\n    } // Add format\n\n  }, {\n    key: \"addFormat\",\n    value: function addFormat(name, format) {\n      if (typeof format == \"string\") format = new RegExp(format);\n      this.formats[name] = format;\n      return this;\n    }\n  }, {\n    key: \"errorsText\",\n    value: function errorsText() {\n      var errors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.errors;\n\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$separator = _ref2.separator,\n          separator = _ref2$separator === void 0 ? \", \" : _ref2$separator,\n          _ref2$dataVar = _ref2.dataVar,\n          dataVar = _ref2$dataVar === void 0 ? \"data\" : _ref2$dataVar;\n\n      if (!errors || errors.length === 0) return \"No errors\";\n      return errors.map(function (e) {\n        return \"\".concat(dataVar).concat(e.instancePath, \" \").concat(e.message);\n      }).reduce(function (text, msg) {\n        return text + separator + msg;\n      });\n    }\n  }, {\n    key: \"$dataMetaSchema\",\n    value: function $dataMetaSchema(metaSchema, keywordsJsonPointers) {\n      var rules = this.RULES.all;\n      metaSchema = JSON.parse(JSON.stringify(metaSchema));\n\n      var _iterator4 = _createForOfIteratorHelper(keywordsJsonPointers),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var jsonPointer = _step4.value;\n          var segments = jsonPointer.split(\"/\").slice(1); // first segment is an empty string\n\n          var keywords = metaSchema;\n\n          var _iterator5 = _createForOfIteratorHelper(segments),\n              _step5;\n\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var seg = _step5.value;\n              keywords = keywords[seg];\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n\n          for (var key in rules) {\n            var rule = rules[key];\n            if (typeof rule != \"object\") continue;\n            var $data = rule.definition.$data;\n            var schema = keywords[key];\n            if ($data && schema) keywords[key] = schemaOrData(schema);\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return metaSchema;\n    }\n  }, {\n    key: \"_removeAllSchemas\",\n    value: function _removeAllSchemas(schemas, regex) {\n      for (var keyRef in schemas) {\n        var sch = schemas[keyRef];\n\n        if (!regex || regex.test(keyRef)) {\n          if (typeof sch == \"string\") {\n            delete schemas[keyRef];\n          } else if (sch && !sch.meta) {\n            this._cache.delete(sch.schema);\n\n            delete schemas[keyRef];\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_addSchema\",\n    value: function _addSchema(schema, meta, baseId) {\n      var validateSchema = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.opts.validateSchema;\n      var addSchema = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.opts.addUsedSchema;\n      var id;\n      var schemaId = this.opts.schemaId;\n\n      if (typeof schema == \"object\") {\n        id = schema[schemaId];\n      } else {\n        if (this.opts.jtd) throw new Error(\"schema must be object\");else if (typeof schema != \"boolean\") throw new Error(\"schema must be object or boolean\");\n      }\n\n      var sch = this._cache.get(schema);\n\n      if (sch !== undefined) return sch;\n      baseId = (0, resolve_1.normalizeId)(id || baseId);\n      var localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);\n      sch = new compile_1.SchemaEnv({\n        schema: schema,\n        schemaId: schemaId,\n        meta: meta,\n        baseId: baseId,\n        localRefs: localRefs\n      });\n\n      this._cache.set(sch.schema, sch);\n\n      if (addSchema && !baseId.startsWith(\"#\")) {\n        // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)\n        if (baseId) this._checkUnique(baseId);\n        this.refs[baseId] = sch;\n      }\n\n      if (validateSchema) this.validateSchema(schema, true);\n      return sch;\n    }\n  }, {\n    key: \"_checkUnique\",\n    value: function _checkUnique(id) {\n      if (this.schemas[id] || this.refs[id]) {\n        throw new Error(\"schema with key or id \\\"\".concat(id, \"\\\" already exists\"));\n      }\n    }\n  }, {\n    key: \"_compileSchemaEnv\",\n    value: function _compileSchemaEnv(sch) {\n      if (sch.meta) this._compileMetaSchema(sch);else compile_1.compileSchema.call(this, sch);\n      /* istanbul ignore if */\n\n      if (!sch.validate) throw new Error(\"ajv implementation error\");\n      return sch.validate;\n    }\n  }, {\n    key: \"_compileMetaSchema\",\n    value: function _compileMetaSchema(sch) {\n      var currentOpts = this.opts;\n      this.opts = this._metaOpts;\n\n      try {\n        compile_1.compileSchema.call(this, sch);\n      } finally {\n        this.opts = currentOpts;\n      }\n    }\n  }]);\n\n  return Ajv;\n}();\n\nexports.default = Ajv;\nAjv.ValidationError = validation_error_1.default;\nAjv.MissingRefError = ref_error_1.default;\n\nfunction checkOptions(checkOpts, options, msg) {\n  var log = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"error\";\n\n  for (var key in checkOpts) {\n    var opt = key;\n    if (opt in options) this.logger[log](\"\".concat(msg, \": option \").concat(key, \". \").concat(checkOpts[opt]));\n  }\n}\n\nfunction getSchEnv(keyRef) {\n  keyRef = (0, resolve_1.normalizeId)(keyRef); // TODO tests fail without this line\n\n  return this.schemas[keyRef] || this.refs[keyRef];\n}\n\nfunction addInitialSchemas() {\n  var optsSchemas = this.opts.schemas;\n  if (!optsSchemas) return;\n  if (Array.isArray(optsSchemas)) this.addSchema(optsSchemas);else for (var key in optsSchemas) {\n    this.addSchema(optsSchemas[key], key);\n  }\n}\n\nfunction addInitialFormats() {\n  for (var name in this.opts.formats) {\n    var format = this.opts.formats[name];\n    if (format) this.addFormat(name, format);\n  }\n}\n\nfunction addInitialKeywords(defs) {\n  if (Array.isArray(defs)) {\n    this.addVocabulary(defs);\n    return;\n  }\n\n  this.logger.warn(\"keywords option as map is deprecated, pass array\");\n\n  for (var keyword in defs) {\n    var def = defs[keyword];\n    if (!def.keyword) def.keyword = keyword;\n    this.addKeyword(def);\n  }\n}\n\nfunction getMetaSchemaOptions() {\n  var metaOpts = _objectSpread({}, this.opts);\n\n  var _iterator6 = _createForOfIteratorHelper(META_IGNORE_OPTIONS),\n      _step6;\n\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var opt = _step6.value;\n      delete metaOpts[opt];\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n\n  return metaOpts;\n}\n\nvar noLogs = {\n  log: function log() {},\n  warn: function warn() {},\n  error: function error() {}\n};\n\nfunction getLogger(logger) {\n  if (logger === false) return noLogs;\n  if (logger === undefined) return console;\n  if (logger.log && logger.warn && logger.error) return logger;\n  throw new Error(\"logger must implement log, warn and error methods\");\n}\n\nvar KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;\n\nfunction checkKeyword(keyword, def) {\n  var RULES = this.RULES;\n  (0, util_1.eachItem)(keyword, function (kwd) {\n    if (RULES.keywords[kwd]) throw new Error(\"Keyword \".concat(kwd, \" is already defined\"));\n    if (!KEYWORD_NAME.test(kwd)) throw new Error(\"Keyword \".concat(kwd, \" has invalid name\"));\n  });\n  if (!def) return;\n\n  if (def.$data && !(\"code\" in def || \"validate\" in def)) {\n    throw new Error('$data keyword must have \"code\" or \"validate\" function');\n  }\n}\n\nfunction addRule(keyword, definition, dataType) {\n  var _this2 = this;\n\n  var _a;\n\n  var post = definition === null || definition === void 0 ? void 0 : definition.post;\n  if (dataType && post) throw new Error('keyword with \"post\" flag cannot have \"type\"');\n  var RULES = this.RULES;\n  var ruleGroup = post ? RULES.post : RULES.rules.find(function (_ref3) {\n    var t = _ref3.type;\n    return t === dataType;\n  });\n\n  if (!ruleGroup) {\n    ruleGroup = {\n      type: dataType,\n      rules: []\n    };\n    RULES.rules.push(ruleGroup);\n  }\n\n  RULES.keywords[keyword] = true;\n  if (!definition) return;\n  var rule = {\n    keyword: keyword,\n    definition: _objectSpread({}, definition, {\n      type: (0, dataType_1.getJSONTypes)(definition.type),\n      schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType)\n    })\n  };\n  if (definition.before) addBeforeRule.call(this, ruleGroup, rule, definition.before);else ruleGroup.rules.push(rule);\n  RULES.all[keyword] = rule;\n  (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach(function (kwd) {\n    return _this2.addKeyword(kwd);\n  });\n}\n\nfunction addBeforeRule(ruleGroup, rule, before) {\n  var i = ruleGroup.rules.findIndex(function (_rule) {\n    return _rule.keyword === before;\n  });\n\n  if (i >= 0) {\n    ruleGroup.rules.splice(i, 0, rule);\n  } else {\n    ruleGroup.rules.push(rule);\n    this.logger.warn(\"rule \".concat(before, \" is not defined\"));\n  }\n}\n\nfunction keywordMetaschema(def) {\n  var metaSchema = def.metaSchema;\n  if (metaSchema === undefined) return;\n  if (def.$data && this.opts.$data) metaSchema = schemaOrData(metaSchema);\n  def.validateSchema = this.compile(metaSchema, true);\n}\n\nvar $dataRef = {\n  $ref: \"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#\"\n};\n\nfunction schemaOrData(schema) {\n  return {\n    anyOf: [schema, $dataRef]\n  };\n}","map":null,"metadata":{},"sourceType":"script"}