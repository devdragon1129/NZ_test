{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"ajv/dist/compile/codegen\");\n\nvar _util_1 = require(\"./_util\");\n\nvar regexpMetaSchema = {\n  type: \"object\",\n  properties: {\n    pattern: {\n      type: \"string\"\n    },\n    flags: {\n      type: \"string\",\n      nullable: true\n    }\n  },\n  required: [\"pattern\"],\n  additionalProperties: false\n};\nvar metaRegexp = /^\\/(.*)\\/([gimuy]*)$/;\n\nfunction getDef() {\n  return {\n    keyword: \"regexp\",\n    type: \"string\",\n    schemaType: [\"string\", \"object\"],\n    code: function code(cxt) {\n      var gen = cxt.gen,\n          data = cxt.data,\n          schema = cxt.schema;\n      var regx = getRegExp(schema);\n      cxt.pass(codegen_1._(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\", \".test(\", \")\"])), regx, data));\n\n      function getRegExp(sch) {\n        if (typeof sch == \"object\") return _util_1.usePattern(gen, sch.pattern, sch.flags);\n        var rx = metaRegexp.exec(sch);\n        if (rx) return _util_1.usePattern(gen, rx[1], rx[2]);\n        throw new Error(\"cannot parse string into RegExp\");\n      }\n    },\n    metaSchema: {\n      anyOf: [{\n        type: \"string\"\n      }, regexpMetaSchema]\n    }\n  };\n}\n\nexports.default = getDef;\nmodule.exports = getDef;","map":null,"metadata":{},"sourceType":"script"}