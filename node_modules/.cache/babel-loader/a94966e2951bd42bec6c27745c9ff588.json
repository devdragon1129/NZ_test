{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getChainIdByNetwork = exports.isValidChainId = exports.isCoinbaseProvider = exports.isDapperProvider = exports.isCucumberProvider = exports.getConnectedProviderChainId = exports.getConnectedProviderType = exports.getConnectedProvider = exports.getNetworkProvider = void 0;\n\nvar decentraland_connect_1 = require(\"decentraland-connect\");\n\nvar chain_id_1 = require(\"@dcl/schemas/dist/dapps/chain-id\");\n\nvar ethers_1 = require(\"ethers\");\n\nvar provider_type_1 = require(\"@dcl/schemas/dist/dapps/provider-type\");\n\nvar chainConfiguration_1 = require(\"./chainConfiguration\");\n\nvar utils_1 = require(\"./utils\");\n\nfunction getNetworkProvider(chainId) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var connectedProvider, connectedChainId;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getConnectedProvider();\n\n          case 2:\n            connectedProvider = _context.sent;\n\n            if (!connectedProvider) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 6;\n            return new ethers_1.providers.Web3Provider(connectedProvider).getSigner().getChainId();\n\n          case 6:\n            connectedChainId = _context.sent;\n\n            if (!(chainId === connectedChainId)) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"return\", connectedProvider);\n\n          case 9:\n            return _context.abrupt(\"return\", decentraland_connect_1.connection.createProvider(provider_type_1.ProviderType.NETWORK, chainId));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.getNetworkProvider = getNetworkProvider;\n\nfunction getConnectedProvider() {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var _yield$decentraland_c, provider;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return decentraland_connect_1.connection.tryPreviousConnection();\n\n          case 3:\n            _yield$decentraland_c = _context2.sent;\n            provider = _yield$decentraland_c.provider;\n            return _context2.abrupt(\"return\", provider ? provider : null);\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            return _context2.abrupt(\"return\", null);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 8]]);\n  }));\n}\n\nexports.getConnectedProvider = getConnectedProvider;\n\nfunction getConnectedProviderType() {\n  var connectionData = decentraland_connect_1.connection.getConnectionData();\n  return connectionData ? connectionData.providerType : null;\n}\n\nexports.getConnectedProviderType = getConnectedProviderType;\n\nfunction getConnectedProviderChainId() {\n  var connectionData = decentraland_connect_1.connection.getConnectionData();\n  return connectionData ? connectionData.chainId : null;\n}\n\nexports.getConnectedProviderChainId = getConnectedProviderChainId;\n\nfunction isCucumberProvider() {\n  var provider = window.ethereum;\n  return utils_1.isMobile() && !!provider && !!provider.isCucumber;\n}\n\nexports.isCucumberProvider = isCucumberProvider;\n\nfunction isDapperProvider() {\n  var provider = window.ethereum;\n  return !!provider && !!provider.isDapper;\n}\n\nexports.isDapperProvider = isDapperProvider;\n\nfunction isCoinbaseProvider() {\n  var provider = window.ethereum;\n  return !!provider && !!provider.isToshi;\n}\n\nexports.isCoinbaseProvider = isCoinbaseProvider;\n\nfunction isValidChainId(chainId) {\n  return Object.values(chain_id_1.ChainId).includes(Number(chainId));\n}\n\nexports.isValidChainId = isValidChainId;\n\nfunction getChainIdByNetwork(network) {\n  var connectedChainId = getConnectedProviderChainId();\n\n  if (!connectedChainId) {\n    throw new Error('Could not get connected provider chain id');\n  }\n\n  var config = chainConfiguration_1.getChainConfiguration(connectedChainId);\n  return config.networkMapping[network];\n}\n\nexports.getChainIdByNetwork = getChainIdByNetwork;","map":null,"metadata":{},"sourceType":"script"}