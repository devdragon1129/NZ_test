{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport \"../Shaders/colorCorrection.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { SerializationHelper, serialize } from '../Misc/decorators';\n/**\r\n *\r\n * This post-process allows the modification of rendered colors by using\r\n * a 'look-up table' (LUT). This effect is also called Color Grading.\r\n *\r\n * The object needs to be provided an url to a texture containing the color\r\n * look-up table: the texture must be 256 pixels wide and 16 pixels high.\r\n * Use an image editing software to tweak the LUT to match your needs.\r\n *\r\n * For an example of a color LUT, see here:\r\n * @see http://udn.epicgames.com/Three/rsrc/Three/ColorGrading/RGBTable16x1.png\r\n * For explanations on color grading, see here:\r\n * @see http://udn.epicgames.com/Three/ColorGrading.html\r\n *\r\n */\n\nvar ColorCorrectionPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(ColorCorrectionPostProcess, _super);\n\n  function ColorCorrectionPostProcess(name, colorTableUrl, options, camera, samplingMode, engine, reusable) {\n    var _this = _super.call(this, name, 'colorCorrection', null, ['colorTable'], options, camera, samplingMode, engine, reusable) || this;\n\n    _this._colorTableTexture = new Texture(colorTableUrl, camera.getScene(), true, false, Texture.TRILINEAR_SAMPLINGMODE);\n    _this._colorTableTexture.anisotropicFilteringLevel = 1;\n    _this._colorTableTexture.wrapU = Texture.CLAMP_ADDRESSMODE;\n    _this._colorTableTexture.wrapV = Texture.CLAMP_ADDRESSMODE;\n    _this.colorTableUrl = colorTableUrl;\n\n    _this.onApply = function (effect) {\n      effect.setTexture(\"colorTable\", _this._colorTableTexture);\n    };\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"ColorCorrectionPostProcess\" string\r\n   */\n\n\n  ColorCorrectionPostProcess.prototype.getClassName = function () {\n    return \"ColorCorrectionPostProcess\";\n  };\n  /** @hidden */\n\n\n  ColorCorrectionPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new ColorCorrectionPostProcess(parsedPostProcess.name, parsedPostProcess.colorTableUrl, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], ColorCorrectionPostProcess.prototype, \"colorTableUrl\", void 0);\n\n  return ColorCorrectionPostProcess;\n}(PostProcess);\n\nexport { ColorCorrectionPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.ColorCorrectionPostProcess\"] = ColorCorrectionPostProcess;","map":null,"metadata":{},"sourceType":"module"}