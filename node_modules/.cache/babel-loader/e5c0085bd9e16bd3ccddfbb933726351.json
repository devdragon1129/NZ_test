{"ast":null,"code":"import { Material } from \"../Materials/material\";\nimport { VertexBuffer } from \"../Meshes/buffer\";\n/**\r\n * PostProcessManager is used to manage one or more post processes or post process pipelines\r\n * See https://doc.babylonjs.com/how_to/how_to_use_postprocesses\r\n */\n\nvar PostProcessManager =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance PostProcess\r\n   * @param scene The scene that the post process is associated with.\r\n   */\n  function PostProcessManager(scene) {\n    this._vertexBuffers = {};\n    this._scene = scene;\n  }\n\n  PostProcessManager.prototype._prepareBuffers = function () {\n    if (this._vertexBuffers[VertexBuffer.PositionKind]) {\n      return;\n    } // VBO\n\n\n    var vertices = [];\n    vertices.push(1, 1);\n    vertices.push(-1, 1);\n    vertices.push(-1, -1);\n    vertices.push(1, -1);\n    this._vertexBuffers[VertexBuffer.PositionKind] = new VertexBuffer(this._scene.getEngine(), vertices, VertexBuffer.PositionKind, false, false, 2);\n\n    this._buildIndexBuffer();\n  };\n\n  PostProcessManager.prototype._buildIndexBuffer = function () {\n    // Indices\n    var indices = [];\n    indices.push(0);\n    indices.push(1);\n    indices.push(2);\n    indices.push(0);\n    indices.push(2);\n    indices.push(3);\n    this._indexBuffer = this._scene.getEngine().createIndexBuffer(indices);\n  };\n  /**\r\n   * Rebuilds the vertex buffers of the manager.\r\n   * @hidden\r\n   */\n\n\n  PostProcessManager.prototype._rebuild = function () {\n    var vb = this._vertexBuffers[VertexBuffer.PositionKind];\n\n    if (!vb) {\n      return;\n    }\n\n    vb._rebuild();\n\n    this._buildIndexBuffer();\n  }; // Methods\n\n  /**\r\n   * Prepares a frame to be run through a post process.\r\n   * @param sourceTexture The input texture to the post procesess. (default: null)\r\n   * @param postProcesses An array of post processes to be run. (default: null)\r\n   * @returns True if the post processes were able to be run.\r\n   * @hidden\r\n   */\n\n\n  PostProcessManager.prototype._prepareFrame = function (sourceTexture, postProcesses) {\n    if (sourceTexture === void 0) {\n      sourceTexture = null;\n    }\n\n    if (postProcesses === void 0) {\n      postProcesses = null;\n    }\n\n    var camera = this._scene.activeCamera;\n\n    if (!camera) {\n      return false;\n    }\n\n    postProcesses = postProcesses || camera._postProcesses.filter(function (pp) {\n      return pp != null;\n    });\n\n    if (!postProcesses || postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\n      return false;\n    }\n\n    postProcesses[0].activate(camera, sourceTexture, postProcesses !== null && postProcesses !== undefined);\n    return true;\n  };\n  /**\r\n   * Manually render a set of post processes to a texture.\r\n   * Please note, the frame buffer won't be unbound after the call in case you have more render to do.\r\n   * @param postProcesses An array of post processes to be run.\r\n   * @param targetTexture The target texture to render to.\r\n   * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight\r\n   * @param faceIndex defines the face to render to if a cubemap is defined as the target\r\n   * @param lodLevel defines which lod of the texture to render to\r\n   * @param doNotBindFrambuffer If set to true, assumes that the framebuffer has been bound previously\r\n   */\n\n\n  PostProcessManager.prototype.directRender = function (postProcesses, targetTexture, forceFullscreenViewport, faceIndex, lodLevel, doNotBindFrambuffer) {\n    if (targetTexture === void 0) {\n      targetTexture = null;\n    }\n\n    if (forceFullscreenViewport === void 0) {\n      forceFullscreenViewport = false;\n    }\n\n    if (faceIndex === void 0) {\n      faceIndex = 0;\n    }\n\n    if (lodLevel === void 0) {\n      lodLevel = 0;\n    }\n\n    if (doNotBindFrambuffer === void 0) {\n      doNotBindFrambuffer = false;\n    }\n\n    var engine = this._scene.getEngine();\n\n    for (var index = 0; index < postProcesses.length; index++) {\n      if (index < postProcesses.length - 1) {\n        postProcesses[index + 1].activate(this._scene.activeCamera, targetTexture);\n      } else {\n        if (targetTexture) {\n          engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport, lodLevel);\n        } else if (!doNotBindFrambuffer) {\n          engine.restoreDefaultFramebuffer();\n        }\n      }\n\n      var pp = postProcesses[index];\n      var effect = pp.apply();\n\n      if (effect) {\n        pp.onBeforeRenderObservable.notifyObservers(effect); // VBOs\n\n        this._prepareBuffers();\n\n        engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect); // Draw order\n\n        engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n        pp.onAfterRenderObservable.notifyObservers(effect);\n      }\n    } // Restore depth buffer\n\n\n    engine.setDepthBuffer(true);\n    engine.setDepthWrite(true);\n  };\n  /**\r\n   * Finalize the result of the output of the postprocesses.\r\n   * @param doNotPresent If true the result will not be displayed to the screen.\r\n   * @param targetTexture The target texture to render to.\r\n   * @param faceIndex The index of the face to bind the target texture to.\r\n   * @param postProcesses The array of post processes to render.\r\n   * @param forceFullscreenViewport force gl.viewport to be full screen eg. 0,0,textureWidth,textureHeight (default: false)\r\n   * @hidden\r\n   */\n\n\n  PostProcessManager.prototype._finalizeFrame = function (doNotPresent, targetTexture, faceIndex, postProcesses, forceFullscreenViewport) {\n    if (forceFullscreenViewport === void 0) {\n      forceFullscreenViewport = false;\n    }\n\n    var camera = this._scene.activeCamera;\n\n    if (!camera) {\n      return;\n    }\n\n    postProcesses = postProcesses || camera._postProcesses.filter(function (pp) {\n      return pp != null;\n    });\n\n    if (postProcesses.length === 0 || !this._scene.postProcessesEnabled) {\n      return;\n    }\n\n    var engine = this._scene.getEngine();\n\n    for (var index = 0, len = postProcesses.length; index < len; index++) {\n      var pp = postProcesses[index];\n\n      if (index < len - 1) {\n        pp._outputTexture = postProcesses[index + 1].activate(camera, targetTexture);\n      } else {\n        if (targetTexture) {\n          engine.bindFramebuffer(targetTexture, faceIndex, undefined, undefined, forceFullscreenViewport);\n          pp._outputTexture = targetTexture;\n        } else {\n          engine.restoreDefaultFramebuffer();\n          pp._outputTexture = null;\n        }\n      }\n\n      if (doNotPresent) {\n        break;\n      }\n\n      var effect = pp.apply();\n\n      if (effect) {\n        pp.onBeforeRenderObservable.notifyObservers(effect); // VBOs\n\n        this._prepareBuffers();\n\n        engine.bindBuffers(this._vertexBuffers, this._indexBuffer, effect); // Draw order\n\n        engine.drawElementsType(Material.TriangleFillMode, 0, 6);\n        pp.onAfterRenderObservable.notifyObservers(effect);\n      }\n    } // Restore states\n\n\n    engine.setDepthBuffer(true);\n    engine.setDepthWrite(true);\n    engine.setAlphaMode(0);\n  };\n  /**\r\n   * Disposes of the post process manager.\r\n   */\n\n\n  PostProcessManager.prototype.dispose = function () {\n    var buffer = this._vertexBuffers[VertexBuffer.PositionKind];\n\n    if (buffer) {\n      buffer.dispose();\n      this._vertexBuffers[VertexBuffer.PositionKind] = null;\n    }\n\n    if (this._indexBuffer) {\n      this._scene.getEngine()._releaseBuffer(this._indexBuffer);\n\n      this._indexBuffer = null;\n    }\n  };\n\n  return PostProcessManager;\n}();\n\nexport { PostProcessManager };","map":null,"metadata":{},"sourceType":"module"}