{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Tools } from \"../Misc/tools\";\nimport { Observable } from \"../Misc/observable\";\nimport { Scene } from \"../scene\";\nimport { Engine } from \"../Engines/engine\";\nObject.defineProperty(Scene.prototype, \"debugLayer\", {\n  get: function get() {\n    if (!this._debugLayer) {\n      this._debugLayer = new DebugLayer(this);\n    }\n\n    return this._debugLayer;\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\r\n * Enum of inspector action tab\r\n */\n\nexport var DebugLayerTab;\n\n(function (DebugLayerTab) {\n  /**\r\n   * Properties tag (default)\r\n   */\n  DebugLayerTab[DebugLayerTab[\"Properties\"] = 0] = \"Properties\";\n  /**\r\n   * Debug tab\r\n   */\n\n  DebugLayerTab[DebugLayerTab[\"Debug\"] = 1] = \"Debug\";\n  /**\r\n   * Statistics tab\r\n   */\n\n  DebugLayerTab[DebugLayerTab[\"Statistics\"] = 2] = \"Statistics\";\n  /**\r\n   * Tools tab\r\n   */\n\n  DebugLayerTab[DebugLayerTab[\"Tools\"] = 3] = \"Tools\";\n  /**\r\n   * Settings tab\r\n   */\n\n  DebugLayerTab[DebugLayerTab[\"Settings\"] = 4] = \"Settings\";\n})(DebugLayerTab || (DebugLayerTab = {}));\n/**\r\n * The debug layer (aka Inspector) is the go to tool in order to better understand\r\n * what is happening in your scene\r\n * @see https://doc.babylonjs.com/features/playground_debuglayer\r\n */\n\n\nvar DebugLayer =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a new debug layer.\r\n   * The debug layer (aka Inspector) is the go to tool in order to better understand\r\n   * what is happening in your scene\r\n   * @see https://doc.babylonjs.com/features/playground_debuglayer\r\n   * @param scene Defines the scene to inspect\r\n   */\n  function DebugLayer(scene) {\n    var _this = this;\n\n    this.BJSINSPECTOR = this._getGlobalInspector();\n    this._scene = scene;\n\n    this._scene.onDisposeObservable.add(function () {\n      // Debug layer\n      if (_this._scene._debugLayer) {\n        _this._scene._debugLayer.hide();\n      }\n    });\n  }\n\n  Object.defineProperty(DebugLayer.prototype, \"onPropertyChangedObservable\", {\n    /**\r\n     * Observable triggered when a property is changed through the inspector.\r\n     */\n    get: function get() {\n      if (this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector) {\n        return this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable;\n      }\n\n      if (!this._onPropertyChangedObservable) {\n        this._onPropertyChangedObservable = new Observable();\n      }\n\n      return this._onPropertyChangedObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Creates the inspector window. */\n\n  DebugLayer.prototype._createInspector = function (config) {\n    if (this.isVisible()) {\n      return;\n    }\n\n    if (this._onPropertyChangedObservable) {\n      for (var _i = 0, _a = this._onPropertyChangedObservable.observers; _i < _a.length; _i++) {\n        var observer = _a[_i];\n        this.BJSINSPECTOR.Inspector.OnPropertyChangedObservable.add(observer);\n      }\n\n      this._onPropertyChangedObservable.clear();\n\n      this._onPropertyChangedObservable = undefined;\n    }\n\n    var userOptions = __assign({\n      overlay: false,\n      showExplorer: true,\n      showInspector: true,\n      embedMode: false,\n      handleResize: true,\n      enablePopup: true\n    }, config);\n\n    this.BJSINSPECTOR = this.BJSINSPECTOR || this._getGlobalInspector();\n    this.BJSINSPECTOR.Inspector.Show(this._scene, userOptions);\n  };\n  /**\r\n   * Select a specific entity in the scene explorer and highlight a specific block in that entity property grid\r\n   * @param entity defines the entity to select\r\n   * @param lineContainerTitles defines the specific blocks to highlight (could be a string or an array of strings)\r\n   */\n\n\n  DebugLayer.prototype.select = function (entity, lineContainerTitles) {\n    if (this.BJSINSPECTOR) {\n      if (lineContainerTitles) {\n        if (Object.prototype.toString.call(lineContainerTitles) == '[object String]') {\n          this.BJSINSPECTOR.Inspector.MarkLineContainerTitleForHighlighting(lineContainerTitles);\n        } else {\n          this.BJSINSPECTOR.Inspector.MarkMultipleLineContainerTitlesForHighlighting(lineContainerTitles);\n        }\n      }\n\n      this.BJSINSPECTOR.Inspector.OnSelectionChangeObservable.notifyObservers(entity);\n    }\n  };\n  /** Get the inspector from bundle or global */\n\n\n  DebugLayer.prototype._getGlobalInspector = function () {\n    // UMD Global name detection from Webpack Bundle UMD Name.\n    if (typeof INSPECTOR !== 'undefined') {\n      return INSPECTOR;\n    } // In case of module let s check the global emitted from the Inspector entry point.\n\n\n    if (typeof BABYLON !== 'undefined' && typeof BABYLON.Inspector !== 'undefined') {\n      return BABYLON;\n    }\n\n    return undefined;\n  };\n  /**\r\n   * Get if the inspector is visible or not.\r\n   * @returns true if visible otherwise, false\r\n   */\n\n\n  DebugLayer.prototype.isVisible = function () {\n    return this.BJSINSPECTOR && this.BJSINSPECTOR.Inspector.IsVisible;\n  };\n  /**\r\n   * Hide the inspector and close its window.\r\n   */\n\n\n  DebugLayer.prototype.hide = function () {\n    if (this.BJSINSPECTOR) {\n      this.BJSINSPECTOR.Inspector.Hide();\n    }\n  };\n  /**\r\n   * Update the scene in the inspector\r\n   */\n\n\n  DebugLayer.prototype.setAsActiveScene = function () {\n    if (this.BJSINSPECTOR) {\n      this.BJSINSPECTOR.Inspector._SetNewScene(this._scene);\n    }\n  };\n  /**\r\n    * Launch the debugLayer.\r\n    * @param config Define the configuration of the inspector\r\n    * @return a promise fulfilled when the debug layer is visible\r\n    */\n\n\n  DebugLayer.prototype.show = function (config) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      if (typeof _this.BJSINSPECTOR == 'undefined') {\n        var inspectorUrl = config && config.inspectorURL ? config.inspectorURL : DebugLayer.InspectorURL; // Load inspector and add it to the DOM\n\n        Tools.LoadScript(inspectorUrl, function () {\n          _this._createInspector(config);\n\n          resolve(_this);\n        });\n      } else {\n        // Otherwise creates the inspector\n        _this._createInspector(config);\n\n        resolve(_this);\n      }\n    });\n  };\n  /**\r\n   * Define the url to get the inspector script from.\r\n   * By default it uses the babylonjs CDN.\r\n   * @ignoreNaming\r\n   */\n\n\n  DebugLayer.InspectorURL = \"https://unpkg.com/babylonjs-inspector@\" + Engine.Version + \"/babylon.inspector.bundle.js\";\n  return DebugLayer;\n}();\n\nexport { DebugLayer };","map":null,"metadata":{},"sourceType":"module"}