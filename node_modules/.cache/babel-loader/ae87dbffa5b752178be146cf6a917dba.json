{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _taggedTemplateLiteral from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { gql } from 'apollo-boost';\nimport { config } from 'config';\nimport { createClient } from './graph';\nimport { parcelFields, estateFields, LandType, RoleType } from 'modules/land/types';\nimport { coordsToId } from 'modules/land/utils';\nimport { isZero } from 'lib/address';\nimport { LAND_REGISTRY_ADDRESS, ESTATE_REGISTRY_ADDRESS } from 'modules/common/contracts';\nexport var LAND_MANAGER_URL = config.get('LAND_MANAGER_URL', '');\nvar auth = createClient(LAND_MANAGER_URL);\n\nvar getLandQuery = function getLandQuery() {\n  return gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query Land($address: Bytes) {\\n    ownerParcels: parcels(first: 1000, where: { estate: null, owner: $address }) {\\n      ...parcelFields\\n    }\\n    ownerEstates: estates(first: 1000, where: { owner: $address }) {\\n      ...estateFields\\n    }\\n    updateOperatorParcels: parcels(first: 1000, where: { updateOperator: $address }) {\\n      ...parcelFields\\n    }\\n    updateOperatorEstates: estates(first: 1000, where: { updateOperator: $address }) {\\n      ...estateFields\\n    }\\n    ownerAuthorizations: authorizations(first: 1000, where: { owner: $address, type: \\\"UpdateManager\\\" }) {\\n      operator\\n      isApproved\\n      tokenAddress\\n    }\\n    operatorAuthorizations: authorizations(first: 1000, where: { operator: $address, type: \\\"UpdateManager\\\" }) {\\n      owner {\\n        address\\n        parcels(first: 1000, where: { estate: null }) {\\n          ...parcelFields\\n        }\\n        estates(first: 1000) {\\n          ...estateFields\\n        }\\n      }\\n      isApproved\\n      tokenAddress\\n    }\\n  }\\n  \", \"\\n  \", \"\\n\"])), parcelFields(), estateFields());\n};\n\nvar fromParcel = function fromParcel(parcel, role) {\n  var id = coordsToId(parcel.x, parcel.y);\n  var result = {\n    id: id,\n    name: parcel.data && parcel.data.name || \"Parcel \".concat(id),\n    type: LandType.PARCEL,\n    role: role,\n    description: parcel.data && parcel.data.description || null,\n    x: parseInt(parcel.x, 10),\n    y: parseInt(parcel.y, 10),\n    owner: parcel.owner.address,\n    operators: []\n  };\n\n  if (parcel.updateOperator) {\n    result.operators.push(parcel.updateOperator);\n  }\n\n  return result;\n};\n\nvar fromEstate = function fromEstate(estate, role) {\n  var id = estate.id;\n  var result = {\n    id: id,\n    name: estate.data && estate.data.name || \"Estate \".concat(id),\n    type: LandType.ESTATE,\n    role: role,\n    description: estate.data && estate.data.description || null,\n    size: estate.size,\n    parcels: estate.parcels.map(function (parcel) {\n      return {\n        x: parseInt(parcel.x, 10),\n        y: parseInt(parcel.y, 10),\n        id: coordsToId(parcel.x, parcel.y)\n      };\n    }),\n    owner: estate.owner.address,\n    operators: []\n  };\n\n  if (estate.updateOperator) {\n    result.operators.push(estate.updateOperator);\n  }\n\n  return result;\n};\n\nexport var ManagerAPI = function ManagerAPI() {\n  _classCallCheck(this, ManagerAPI);\n\n  this.fetchLand = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_address) {\n      var address, _yield$auth$query, data, lands, landUpdateManagers, estateUpdateManagers, _iterator, _step, parcel, _iterator2, _step2, estate, _iterator3, _step3, _parcel, _iterator4, _step4, _estate, _iterator5, _step5, authorization, operator, isApproved, tokenAddress, _iterator6, _step6, _authorization, owner, _iterator9, _step9, _loop, _iterator10, _step10, _estate2, authorizations, _iterator7, _step7, _operator, parcels, _iterator11, _step11, _parcel2, _iterator8, _step8, _operator2, estates, _iterator12, _step12, _estate3;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              address = _address.toLowerCase();\n              _context.next = 3;\n              return auth.query({\n                query: getLandQuery(),\n                variables: {\n                  address: address\n                }\n              });\n\n            case 3:\n              _yield$auth$query = _context.sent;\n              data = _yield$auth$query.data;\n              lands = [];\n              landUpdateManagers = new Set();\n              estateUpdateManagers = new Set(); // parcels and estates that I own\n\n              _iterator = _createForOfIteratorHelper(data.ownerParcels);\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  parcel = _step.value;\n                  lands.push(fromParcel(parcel, RoleType.OWNER));\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n\n              _iterator2 = _createForOfIteratorHelper(data.ownerEstates);\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  estate = _step2.value;\n                  lands.push(fromEstate(estate, RoleType.OWNER));\n                } // parcels and estats that I operate\n\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n\n              _iterator3 = _createForOfIteratorHelper(data.updateOperatorParcels);\n\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  _parcel = _step3.value;\n                  lands.push(fromParcel(_parcel, RoleType.OPERATOR));\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n\n              _iterator4 = _createForOfIteratorHelper(data.updateOperatorEstates);\n\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  _estate = _step4.value;\n                  lands.push(fromEstate(_estate, RoleType.OPERATOR));\n                } // addresses I gave UpdateManager permission are operators of all my lands\n\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n\n              _iterator5 = _createForOfIteratorHelper(data.ownerAuthorizations);\n              _context.prev = 17;\n\n              _iterator5.s();\n\n            case 19:\n              if ((_step5 = _iterator5.n()).done) {\n                _context.next = 31;\n                break;\n              }\n\n              authorization = _step5.value;\n              operator = authorization.operator, isApproved = authorization.isApproved, tokenAddress = authorization.tokenAddress;\n              _context.t0 = tokenAddress;\n              _context.next = _context.t0 === LAND_REGISTRY_ADDRESS ? 25 : _context.t0 === ESTATE_REGISTRY_ADDRESS ? 27 : 29;\n              break;\n\n            case 25:\n              if (isApproved) {\n                landUpdateManagers.add(operator);\n              } else {\n                landUpdateManagers.delete(operator);\n              }\n\n              return _context.abrupt(\"break\", 29);\n\n            case 27:\n              if (isApproved) {\n                estateUpdateManagers.add(operator);\n              } else {\n                estateUpdateManagers.delete(operator);\n              }\n\n              return _context.abrupt(\"break\", 29);\n\n            case 29:\n              _context.next = 19;\n              break;\n\n            case 31:\n              _context.next = 36;\n              break;\n\n            case 33:\n              _context.prev = 33;\n              _context.t1 = _context[\"catch\"](17);\n\n              _iterator5.e(_context.t1);\n\n            case 36:\n              _context.prev = 36;\n\n              _iterator5.f();\n\n              return _context.finish(36);\n\n            case 39:\n              // I'm operator of all the lands from addresses that gave me UpdateManager permission\n              _iterator6 = _createForOfIteratorHelper(data.operatorAuthorizations);\n\n              try {\n                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                  _authorization = _step6.value;\n                  owner = _authorization.owner;\n                  _iterator9 = _createForOfIteratorHelper(owner.parcels);\n\n                  try {\n                    _loop = function _loop() {\n                      var parcel = _step9.value;\n                      var land = fromParcel(parcel, RoleType.OPERATOR);\n                      land.operators.push(address); // skip if already owned or operated\n\n                      if (!lands.some(function (_land) {\n                        return _land.id === land.id;\n                      })) {\n                        lands.push(land);\n                      }\n                    };\n\n                    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                      _loop();\n                    }\n                  } catch (err) {\n                    _iterator9.e(err);\n                  } finally {\n                    _iterator9.f();\n                  }\n\n                  _iterator10 = _createForOfIteratorHelper(owner.estates);\n\n                  try {\n                    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                      _estate2 = _step10.value;\n\n                      if (_estate2.parcels.length > 0) {\n                        (function () {\n                          var land = fromEstate(_estate2, RoleType.OPERATOR);\n                          land.operators.push(address); // skip if already owned or operated\n\n                          if (!lands.some(function (_land) {\n                            return _land.id === land.id;\n                          })) {\n                            lands.push(land);\n                          }\n                        })();\n                      }\n                    }\n                  } catch (err) {\n                    _iterator10.e(err);\n                  } finally {\n                    _iterator10.f();\n                  }\n                } // add operators for all my lands\n\n              } catch (err) {\n                _iterator6.e(err);\n              } finally {\n                _iterator6.f();\n              }\n\n              authorizations = [];\n              _iterator7 = _createForOfIteratorHelper(landUpdateManagers.values());\n\n              try {\n                for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                  _operator = _step7.value;\n                  authorizations.push({\n                    address: _operator,\n                    type: LandType.PARCEL\n                  });\n                  parcels = lands.filter(function (land) {\n                    return land.type === LandType.PARCEL && land.role === RoleType.OWNER;\n                  });\n                  _iterator11 = _createForOfIteratorHelper(parcels);\n\n                  try {\n                    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                      _parcel2 = _step11.value;\n\n                      _parcel2.operators.push(_operator);\n                    }\n                  } catch (err) {\n                    _iterator11.e(err);\n                  } finally {\n                    _iterator11.f();\n                  }\n                }\n              } catch (err) {\n                _iterator7.e(err);\n              } finally {\n                _iterator7.f();\n              }\n\n              _iterator8 = _createForOfIteratorHelper(estateUpdateManagers.values());\n\n              try {\n                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                  _operator2 = _step8.value;\n                  authorizations.push({\n                    address: _operator2,\n                    type: LandType.ESTATE\n                  });\n                  estates = lands.filter(function (land) {\n                    return land.type === LandType.ESTATE && land.role === RoleType.OWNER;\n                  });\n                  _iterator12 = _createForOfIteratorHelper(estates);\n\n                  try {\n                    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                      _estate3 = _step12.value;\n\n                      _estate3.operators.push(_operator2);\n                    }\n                  } catch (err) {\n                    _iterator12.e(err);\n                  } finally {\n                    _iterator12.f();\n                  }\n                }\n              } catch (err) {\n                _iterator8.e(err);\n              } finally {\n                _iterator8.f();\n              }\n\n              return _context.abrupt(\"return\", [lands // remove empty estates\n              .filter(function (land) {\n                return land.type === LandType.PARCEL || land.parcels.length > 0;\n              }) // remove duplicated and zero address operators\n              .map(function (land) {\n                land.operators = Array.from(new Set(land.operators)).filter(function (address) {\n                  return !isZero(address);\n                });\n                return land;\n              }), authorizations]);\n\n            case 47:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[17, 33, 36, 39]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var manager = new ManagerAPI();","map":{"version":3,"sources":["/opt/work/NZ_test/src/lib/api/manager.ts"],"names":["gql","config","createClient","parcelFields","estateFields","LandType","RoleType","coordsToId","isZero","LAND_REGISTRY_ADDRESS","ESTATE_REGISTRY_ADDRESS","LAND_MANAGER_URL","get","auth","getLandQuery","fromParcel","parcel","role","id","x","y","result","name","data","type","PARCEL","description","parseInt","owner","address","operators","updateOperator","push","fromEstate","estate","ESTATE","size","parcels","map","ManagerAPI","fetchLand","_address","toLowerCase","query","variables","lands","landUpdateManagers","Set","estateUpdateManagers","ownerParcels","OWNER","ownerEstates","updateOperatorParcels","OPERATOR","updateOperatorEstates","ownerAuthorizations","authorization","operator","isApproved","tokenAddress","add","delete","operatorAuthorizations","land","some","_land","estates","length","authorizations","values","filter","Array","from","manager"],"mappings":"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","sourcesContent":["import { gql } from 'apollo-boost'\nimport { config } from 'config'\nimport { createClient } from './graph'\nimport { parcelFields, estateFields, ParcelFields, Land, LandType, RoleType, EstateFields, Authorization } from 'modules/land/types'\nimport { coordsToId } from 'modules/land/utils'\nimport { isZero } from 'lib/address'\nimport { LAND_REGISTRY_ADDRESS, ESTATE_REGISTRY_ADDRESS } from 'modules/common/contracts'\n\nexport const LAND_MANAGER_URL = config.get('LAND_MANAGER_URL', '')\n\nconst auth = createClient(LAND_MANAGER_URL)\n\nconst getLandQuery = () => gql`\n  query Land($address: Bytes) {\n    ownerParcels: parcels(first: 1000, where: { estate: null, owner: $address }) {\n      ...parcelFields\n    }\n    ownerEstates: estates(first: 1000, where: { owner: $address }) {\n      ...estateFields\n    }\n    updateOperatorParcels: parcels(first: 1000, where: { updateOperator: $address }) {\n      ...parcelFields\n    }\n    updateOperatorEstates: estates(first: 1000, where: { updateOperator: $address }) {\n      ...estateFields\n    }\n    ownerAuthorizations: authorizations(first: 1000, where: { owner: $address, type: \"UpdateManager\" }) {\n      operator\n      isApproved\n      tokenAddress\n    }\n    operatorAuthorizations: authorizations(first: 1000, where: { operator: $address, type: \"UpdateManager\" }) {\n      owner {\n        address\n        parcels(first: 1000, where: { estate: null }) {\n          ...parcelFields\n        }\n        estates(first: 1000) {\n          ...estateFields\n        }\n      }\n      isApproved\n      tokenAddress\n    }\n  }\n  ${parcelFields()}\n  ${estateFields()}\n`\n\ntype LandQueryResult = {\n  ownerParcels: ParcelFields[]\n  ownerEstates: EstateFields[]\n  updateOperatorParcels: ParcelFields[]\n  updateOperatorEstates: EstateFields[]\n  ownerAuthorizations: { operator: string; isApproved: boolean; tokenAddress: string }[]\n  operatorAuthorizations: {\n    owner: { address: string; parcels: ParcelFields[]; estates: EstateFields[] }\n    isApproved: boolean\n    tokenAddress: string\n  }[]\n}\n\nconst fromParcel = (parcel: ParcelFields, role: RoleType) => {\n  const id = coordsToId(parcel.x, parcel.y)\n\n  const result: Land = {\n    id,\n    name: (parcel.data && parcel.data.name) || `Parcel ${id}`,\n    type: LandType.PARCEL,\n    role,\n    description: (parcel.data && parcel.data.description) || null,\n    x: parseInt(parcel.x, 10),\n    y: parseInt(parcel.y, 10),\n    owner: parcel.owner.address,\n    operators: []\n  }\n\n  if (parcel.updateOperator) {\n    result.operators.push(parcel.updateOperator)\n  }\n\n  return result\n}\n\nconst fromEstate = (estate: EstateFields, role: RoleType) => {\n  const id = estate.id\n\n  const result: Land = {\n    id,\n    name: (estate.data && estate.data.name) || `Estate ${id}`,\n    type: LandType.ESTATE,\n    role,\n    description: (estate.data && estate.data.description) || null,\n    size: estate.size,\n    parcels: estate.parcels.map(parcel => ({\n      x: parseInt(parcel.x, 10),\n      y: parseInt(parcel.y, 10),\n      id: coordsToId(parcel.x, parcel.y)\n    })),\n    owner: estate.owner.address,\n    operators: []\n  }\n\n  if (estate.updateOperator) {\n    result.operators.push(estate.updateOperator)\n  }\n\n  return result\n}\n\nexport class ManagerAPI {\n  fetchLand = async (_address: string): Promise<[Land[], Authorization[]]> => {\n    const address = _address.toLowerCase()\n    const { data } = await auth.query<LandQueryResult>({\n      query: getLandQuery(),\n      variables: {\n        address\n      }\n    })\n\n    const lands: Land[] = []\n    const landUpdateManagers = new Set<string>()\n    const estateUpdateManagers = new Set<string>()\n\n    // parcels and estates that I own\n    for (const parcel of data.ownerParcels) {\n      lands.push(fromParcel(parcel, RoleType.OWNER))\n    }\n    for (const estate of data.ownerEstates) {\n      lands.push(fromEstate(estate, RoleType.OWNER))\n    }\n\n    // parcels and estats that I operate\n    for (const parcel of data.updateOperatorParcels) {\n      lands.push(fromParcel(parcel, RoleType.OPERATOR))\n    }\n    for (const estate of data.updateOperatorEstates) {\n      lands.push(fromEstate(estate, RoleType.OPERATOR))\n    }\n\n    // addresses I gave UpdateManager permission are operators of all my lands\n    for (const authorization of data.ownerAuthorizations) {\n      const { operator, isApproved, tokenAddress } = authorization\n      switch (tokenAddress) {\n        case LAND_REGISTRY_ADDRESS: {\n          if (isApproved) {\n            landUpdateManagers.add(operator)\n          } else {\n            landUpdateManagers.delete(operator)\n          }\n          break\n        }\n        case ESTATE_REGISTRY_ADDRESS: {\n          if (isApproved) {\n            estateUpdateManagers.add(operator)\n          } else {\n            estateUpdateManagers.delete(operator)\n          }\n          break\n        }\n      }\n    }\n\n    // I'm operator of all the lands from addresses that gave me UpdateManager permission\n    for (const authorization of data.operatorAuthorizations) {\n      const { owner } = authorization\n      for (const parcel of owner.parcels) {\n        const land = fromParcel(parcel, RoleType.OPERATOR)\n        land.operators.push(address)\n        // skip if already owned or operated\n        if (!lands.some(_land => _land.id === land.id)) {\n          lands.push(land)\n        }\n      }\n      for (const estate of owner.estates) {\n        if (estate.parcels.length > 0) {\n          const land = fromEstate(estate, RoleType.OPERATOR)\n          land.operators.push(address)\n          // skip if already owned or operated\n          if (!lands.some(_land => _land.id === land.id)) {\n            lands.push(land)\n          }\n        }\n      }\n    }\n\n    // add operators for all my lands\n    let authorizations: Authorization[] = []\n    for (const operator of landUpdateManagers.values()) {\n      authorizations.push({ address: operator, type: LandType.PARCEL })\n      const parcels = lands.filter(land => land.type === LandType.PARCEL && land.role === RoleType.OWNER)\n      for (const parcel of parcels) {\n        parcel.operators.push(operator)\n      }\n    }\n    for (const operator of estateUpdateManagers.values()) {\n      authorizations.push({ address: operator, type: LandType.ESTATE })\n      const estates = lands.filter(land => land.type === LandType.ESTATE && land.role === RoleType.OWNER)\n      for (const estate of estates) {\n        estate.operators.push(operator)\n      }\n    }\n\n    return [\n      lands\n        // remove empty estates\n        .filter(land => land.type === LandType.PARCEL || land.parcels!.length > 0)\n        // remove duplicated and zero address operators\n        .map(land => {\n          land.operators = Array.from(new Set(land.operators)).filter(address => !isZero(address))\n          return land\n        }),\n      authorizations\n    ]\n  }\n}\n\nexport const manager = new ManagerAPI()\n"]},"metadata":{},"sourceType":"module"}