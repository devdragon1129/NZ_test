{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { Vector2 } from \"../Maths/math.vector\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/chromaticAberration.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize, SerializationHelper } from '../Misc/decorators';\n/**\r\n * The ChromaticAberrationPostProcess separates the rgb channels in an image to produce chromatic distortion around the edges of the screen\r\n */\n\nvar ChromaticAberrationPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(ChromaticAberrationPostProcess, _super);\n  /**\r\n   * Creates a new instance ChromaticAberrationPostProcess\r\n   * @param name The name of the effect.\r\n   * @param screenWidth The width of the screen to apply the effect on.\r\n   * @param screenHeight The height of the screen to apply the effect on.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function ChromaticAberrationPostProcess(name, screenWidth, screenHeight, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"chromaticAberration\", [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation) || this;\n    /**\r\n     * The amount of seperation of rgb channels (default: 30)\r\n     */\n\n\n    _this.aberrationAmount = 30;\n    /**\r\n     * The amount the effect will increase for pixels closer to the edge of the screen. (default: 0)\r\n     */\n\n    _this.radialIntensity = 0;\n    /**\r\n     * The normilized direction in which the rgb channels should be seperated. If set to 0,0 radial direction will be used. (default: Vector2(0.707,0.707))\r\n     */\n\n    _this.direction = new Vector2(0.707, 0.707);\n    /**\r\n     * The center position where the radialIntensity should be around. [0.5,0.5 is center of screen, 1,1 is top right corder] (default: Vector2(0.5 ,0.5))\r\n     */\n\n    _this.centerPosition = new Vector2(0.5, 0.5);\n    _this.screenWidth = screenWidth;\n    _this.screenHeight = screenHeight;\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setFloat('chromatic_aberration', _this.aberrationAmount);\n      effect.setFloat('screen_width', screenWidth);\n      effect.setFloat('screen_height', screenHeight);\n      effect.setFloat('radialIntensity', _this.radialIntensity);\n      effect.setFloat2('direction', _this.direction.x, _this.direction.y);\n      effect.setFloat2('centerPosition', _this.centerPosition.x, _this.centerPosition.y);\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"ChromaticAberrationPostProcess\" string\r\n   */\n\n\n  ChromaticAberrationPostProcess.prototype.getClassName = function () {\n    return \"ChromaticAberrationPostProcess\";\n  };\n  /** @hidden */\n\n\n  ChromaticAberrationPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new ChromaticAberrationPostProcess(parsedPostProcess.name, parsedPostProcess.screenWidth, parsedPostProcess.screenHeight, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, false);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"aberrationAmount\", void 0);\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"radialIntensity\", void 0);\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"direction\", void 0);\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"centerPosition\", void 0);\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"screenWidth\", void 0);\n\n  __decorate([serialize()], ChromaticAberrationPostProcess.prototype, \"screenHeight\", void 0);\n\n  return ChromaticAberrationPostProcess;\n}(PostProcess);\n\nexport { ChromaticAberrationPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.ChromaticAberrationPostProcess\"] = ChromaticAberrationPostProcess;","map":null,"metadata":{},"sourceType":"module"}