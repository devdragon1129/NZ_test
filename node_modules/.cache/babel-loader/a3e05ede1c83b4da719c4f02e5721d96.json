{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport path from 'path';\nimport { COLLECTIBLE_ASSET_PACK_ID, CategoryName } from 'modules/ui/sidebar/utils';\nimport { makeContentFile, getCID } from 'modules/deployment/utils';\nexport var MAX_TAGS = 15;\nexport var MAX_NAME_LENGTH = 30;\nexport var MIN_NAME_LENGTH = 3;\nexport var MAX_FILE_SIZE = 10485760; // 10MB\n\nexport function isNFT(asset) {\n  return asset.assetPackId === COLLECTIBLE_ASSET_PACK_ID;\n}\nexport function isGround(asset) {\n  return asset.category === CategoryName.GROUND_CATEGORY;\n}\nexport function cleanAssetName(fileName) {\n  var matches = /(.*)\\.(.*)/g.exec(fileName);\n  var out = fileName;\n\n  if (matches && matches.length) {\n    var matched = matches[1];\n    out = matched.replace(/[\\.\\-\\_]/g, ' ');\n  }\n\n  return (out.charAt(0).toUpperCase() + out.slice(1)).slice(0, MAX_NAME_LENGTH);\n}\nexport function rawMappingsToObjectURL(mappings) {\n  var out = {};\n\n  for (var key in mappings) {\n    var item = mappings[key];\n    out[key] = URL.createObjectURL(item);\n  }\n\n  return out;\n}\nexport function revokeMappingsObjectURL(mappings) {\n  for (var key in mappings) {\n    var item = mappings[key];\n    URL.revokeObjectURL(item);\n  }\n}\nexport function getContentsCID(_x) {\n  return _getContentsCID.apply(this, arguments);\n}\n\nfunction _getContentsCID() {\n  _getContentsCID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(asset) {\n    var contents, out, _i, _Object$keys, filePath, file, fileCID;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            contents = asset.contents;\n            out = {};\n            _i = 0, _Object$keys = Object.keys(contents);\n\n          case 3:\n            if (!(_i < _Object$keys.length)) {\n              _context.next = 15;\n              break;\n            }\n\n            filePath = _Object$keys[_i];\n            _context.next = 7;\n            return makeContentFile(filePath, contents[filePath]);\n\n          case 7:\n            file = _context.sent;\n            _context.next = 10;\n            return getCID([{\n              path: path.basename(file.path),\n              content: file.content,\n              size: file.size\n            }], false);\n\n          case 10:\n            fileCID = _context.sent;\n            out[filePath] = fileCID;\n\n          case 12:\n            _i++;\n            _context.next = 3;\n            break;\n\n          case 15:\n            return _context.abrupt(\"return\", out);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getContentsCID.apply(this, arguments);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/asset/utils.ts"],"names":["path","COLLECTIBLE_ASSET_PACK_ID","CategoryName","makeContentFile","getCID","MAX_TAGS","MAX_NAME_LENGTH","MIN_NAME_LENGTH","MAX_FILE_SIZE","isNFT","asset","assetPackId","isGround","category","GROUND_CATEGORY","cleanAssetName","fileName","matches","exec","out","length","matched","replace","charAt","toUpperCase","slice","rawMappingsToObjectURL","mappings","key","item","URL","createObjectURL","revokeMappingsObjectURL","revokeObjectURL","getContentsCID","contents","Object","keys","filePath","file","basename","content","size","fileCID"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,SAASC,yBAAT,EAAoCC,YAApC,QAAwD,0BAAxD;AACA,SAASC,eAAT,EAA0BC,MAA1B,QAAwC,0BAAxC;AAEA,OAAO,IAAMC,QAAQ,GAAG,EAAjB;AACP,OAAO,IAAMC,eAAe,GAAG,EAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,CAAxB;AACP,OAAO,IAAMC,aAAa,GAAG,QAAtB,C,CAA+B;;AAEtC,OAAO,SAASC,KAAT,CAAeC,KAAf,EAA6B;AAClC,SAAOA,KAAK,CAACC,WAAN,KAAsBV,yBAA7B;AACD;AAED,OAAO,SAASW,QAAT,CAAkBF,KAAlB,EAA2C;AAChD,SAAOA,KAAK,CAACG,QAAN,KAAmBX,YAAY,CAACY,eAAvC;AACD;AAED,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAA0C;AAC/C,MAAMC,OAAO,GAAG,cAAcC,IAAd,CAAmBF,QAAnB,CAAhB;AACA,MAAIG,GAAG,GAAGH,QAAV;;AAEA,MAAIC,OAAO,IAAIA,OAAO,CAACG,MAAvB,EAA+B;AAC7B,QAAMC,OAAO,GAAGJ,OAAO,CAAC,CAAD,CAAvB;AACAE,IAAAA,GAAG,GAAGE,OAAO,CAACC,OAAR,CAAgB,WAAhB,EAA6B,GAA7B,CAAN;AACD;;AAED,SAAO,CAACH,GAAG,CAACI,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BL,GAAG,CAACM,KAAJ,CAAU,CAAV,CAA/B,EAA6CA,KAA7C,CAAmD,CAAnD,EAAsDnB,eAAtD,CAAP;AACD;AAED,OAAO,SAASoB,sBAAT,CAAgCC,QAAhC,EAAgE;AACrE,MAAIR,GAA2B,GAAG,EAAlC;;AAEA,OAAK,IAAIS,GAAT,IAAgBD,QAAhB,EAA0B;AACxB,QAAME,IAAI,GAAGF,QAAQ,CAACC,GAAD,CAArB;AACAT,IAAAA,GAAG,CAACS,GAAD,CAAH,GAAWE,GAAG,CAACC,eAAJ,CAAoBF,IAApB,CAAX;AACD;;AAED,SAAOV,GAAP;AACD;AAED,OAAO,SAASa,uBAAT,CAAiCL,QAAjC,EAAmE;AACxE,OAAK,IAAIC,GAAT,IAAgBD,QAAhB,EAA0B;AACxB,QAAME,IAAI,GAAGF,QAAQ,CAACC,GAAD,CAArB;AACAE,IAAAA,GAAG,CAACG,eAAJ,CAAoBJ,IAApB;AACD;AACF;AAED,gBAAsBK,cAAtB;AAAA;AAAA;;;6EAAO,iBAA8BxB,KAA9B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACGyB,YAAAA,QADH,GACgBzB,KADhB,CACGyB,QADH;AAEChB,YAAAA,GAFD,GAE+B,EAF/B;AAAA,mCAIgBiB,MAAM,CAACC,IAAP,CAAYF,QAAZ,CAJhB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIIG,YAAAA,QAJJ;AAAA;AAAA,mBAKgBnC,eAAe,CAACmC,QAAD,EAAWH,QAAQ,CAACG,QAAD,CAAnB,CAL/B;;AAAA;AAKGC,YAAAA,IALH;AAAA;AAAA,mBAM2BnC,MAAM,CAAC,CAAC;AAAEJ,cAAAA,IAAI,EAAEA,IAAI,CAACwC,QAAL,CAAcD,IAAI,CAACvC,IAAnB,CAAR;AAAkCyC,cAAAA,OAAO,EAAEF,IAAI,CAACE,OAAhD;AAAyDC,cAAAA,IAAI,EAAEH,IAAI,CAACG;AAApE,aAAD,CAAD,EAA+E,KAA/E,CANjC;;AAAA;AAMGC,YAAAA,OANH;AAOHxB,YAAAA,GAAG,CAACmB,QAAD,CAAH,GAAgBK,OAAhB;;AAPG;AAAA;AAAA;AAAA;;AAAA;AAAA,6CASExB,GATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import path from 'path'\nimport { Asset, RawAsset } from 'modules/asset/types'\nimport { COLLECTIBLE_ASSET_PACK_ID, CategoryName } from 'modules/ui/sidebar/utils'\nimport { makeContentFile, getCID } from 'modules/deployment/utils'\n\nexport const MAX_TAGS = 15\nexport const MAX_NAME_LENGTH = 30\nexport const MIN_NAME_LENGTH = 3\nexport const MAX_FILE_SIZE = 10485760 // 10MB\n\nexport function isNFT(asset: Asset) {\n  return asset.assetPackId === COLLECTIBLE_ASSET_PACK_ID\n}\n\nexport function isGround(asset: Asset | RawAsset) {\n  return asset.category === CategoryName.GROUND_CATEGORY\n}\n\nexport function cleanAssetName(fileName: string) {\n  const matches = /(.*)\\.(.*)/g.exec(fileName)\n  let out = fileName\n\n  if (matches && matches.length) {\n    const matched = matches[1]\n    out = matched.replace(/[\\.\\-\\_]/g, ' ')\n  }\n\n  return (out.charAt(0).toUpperCase() + out.slice(1)).slice(0, MAX_NAME_LENGTH)\n}\n\nexport function rawMappingsToObjectURL(mappings: Record<string, Blob>) {\n  let out: Record<string, string> = {}\n\n  for (let key in mappings) {\n    const item = mappings[key]\n    out[key] = URL.createObjectURL(item)\n  }\n\n  return out\n}\n\nexport function revokeMappingsObjectURL(mappings: Record<string, string>) {\n  for (let key in mappings) {\n    const item = mappings[key]\n    URL.revokeObjectURL(item)\n  }\n}\n\nexport async function getContentsCID(asset: RawAsset): Promise<Record<string, string>> {\n  const { contents } = asset\n  const out: Record<string, string> = {}\n\n  for (let filePath of Object.keys(contents)) {\n    const file = await makeContentFile(filePath, contents[filePath])\n    const fileCID: string = await getCID([{ path: path.basename(file.path), content: file.content, size: file.size }], false)\n    out[filePath] = fileCID\n  }\n  return out\n}\n"]},"metadata":{},"sourceType":"module"}