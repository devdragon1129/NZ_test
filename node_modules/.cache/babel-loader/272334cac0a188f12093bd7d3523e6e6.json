{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/filter.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serializeAsMatrix, SerializationHelper } from '../Misc/decorators';\n/**\r\n * Applies a kernel filter to the image\r\n */\n\nvar FilterPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(FilterPostProcess, _super);\n  /**\r\n   *\r\n   * @param name The name of the effect.\r\n   * @param kernelMatrix The matrix to be applied to the image\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   */\n\n\n  function FilterPostProcess(name, kernelMatrix, options, camera, samplingMode, engine, reusable) {\n    var _this = _super.call(this, name, \"filter\", [\"kernelMatrix\"], null, options, camera, samplingMode, engine, reusable) || this;\n\n    _this.kernelMatrix = kernelMatrix;\n\n    _this.onApply = function (effect) {\n      effect.setMatrix(\"kernelMatrix\", _this.kernelMatrix);\n    };\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"FilterPostProcess\" string\r\n   */\n\n\n  FilterPostProcess.prototype.getClassName = function () {\n    return \"FilterPostProcess\";\n  };\n  /** @hidden */\n\n\n  FilterPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new FilterPostProcess(parsedPostProcess.name, parsedPostProcess.kernelMatrix, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serializeAsMatrix()], FilterPostProcess.prototype, \"kernelMatrix\", void 0);\n\n  return FilterPostProcess;\n}(PostProcess);\n\nexport { FilterPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.FilterPostProcess\"] = FilterPostProcess;","map":null,"metadata":{},"sourceType":"module"}