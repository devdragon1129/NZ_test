{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar randombytes_1 = tslib_1.__importDefault(require(\"randombytes\"));\n\nvar util_1 = require(\"util\");\n\nvar address_1 = require(\"../address\");\n\nvar bn_1 = require(\"./bn\");\n\nvar hex_number_1 = require(\"./hex-number\");\n\nvar hex_utf8_1 = require(\"./hex-utf8\");\n/**\n * Check if string is HEX, requires a 0x in front\n */\n\n\nfunction isHexStrict(hex) {\n  return /^(-)?0x[0-9a-f]*$/i.test(hex);\n}\n\nexports.isHexStrict = isHexStrict;\n/**\n * Check if string is HEX\n */\n\nfunction isHex(hex) {\n  return /^(-0x|0x)?[0-9a-f]*$/i.test(hex);\n}\n\nexports.isHex = isHex;\n/**\n * Auto converts any given value into it's hex representation.\n */\n\nfunction toHex(value, returnType) {\n  /*jshint maxcomplexity: false */\n  if (util_1.isString(value) && address_1.Address.isAddress(value)) {\n    return returnType ? 'address' : '0x' + value.toLowerCase().replace(/^0x/i, '');\n  }\n\n  if (util_1.isBoolean(value)) {\n    return returnType ? 'bool' : value ? '0x01' : '0x00';\n  }\n\n  if (util_1.isObject(value) && !bn_1.isBN(value)) {\n    return returnType ? 'string' : hex_utf8_1.utf8ToHex(JSON.stringify(value));\n  } // if its a negative number, pass it through numberToHex\n\n\n  if (util_1.isString(value)) {\n    if (value.indexOf('-0x') === 0 || value.indexOf('-0X') === 0) {\n      return returnType ? 'int256' : hex_number_1.numberToHex(value);\n    } else if (value.indexOf('0x') === 0 || value.indexOf('0X') === 0) {\n      return returnType ? 'bytes' : value;\n    } else if (!isFinite(+value)) {\n      return returnType ? 'string' : hex_utf8_1.utf8ToHex(value);\n    }\n  }\n\n  return returnType ? value < 0 ? 'int256' : 'uint256' : hex_number_1.numberToHex(value);\n}\n\nexports.toHex = toHex;\n\nfunction randomHex(size) {\n  if (size > 65536) {\n    throw new Error('Requested too many random bytes.');\n  }\n\n  return '0x' + randombytes_1.default(size).toString('hex');\n}\n\nexports.randomHex = randomHex;\n\nfunction randomBuffer(size) {\n  if (size > 65536) {\n    throw new Error('Requested too many random bytes.');\n  }\n\n  return randombytes_1.default(size);\n}\n\nexports.randomBuffer = randomBuffer;\n\nfunction trimHexLeadingZero(hex) {\n  return hex.replace(/^0x0*/, '0x');\n}\n\nexports.trimHexLeadingZero = trimHexLeadingZero;\n\nfunction makeHexEven(hex) {\n  return hex.length % 2 === 1 ? hex.replace('0x', '0x0') : hex;\n}\n\nexports.makeHexEven = makeHexEven;","map":null,"metadata":{},"sourceType":"script"}