{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents\";\nimport { Tools } from '../../Misc/tools';\n/**\r\n * Manage the keyboard inputs to control the movement of an arc rotate camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar ArcRotateCameraKeyboardMoveInput =\n/** @class */\nfunction () {\n  function ArcRotateCameraKeyboardMoveInput() {\n    /**\r\n     * Defines the list of key codes associated with the up action (increase alpha)\r\n     */\n    this.keysUp = [38];\n    /**\r\n     * Defines the list of key codes associated with the down action (decrease alpha)\r\n     */\n\n    this.keysDown = [40];\n    /**\r\n     * Defines the list of key codes associated with the left action (increase beta)\r\n     */\n\n    this.keysLeft = [37];\n    /**\r\n     * Defines the list of key codes associated with the right action (decrease beta)\r\n     */\n\n    this.keysRight = [39];\n    /**\r\n     * Defines the list of key codes associated with the reset action.\r\n     * Those keys reset the camera to its last stored state (with the method camera.storeState())\r\n     */\n\n    this.keysReset = [220];\n    /**\r\n     * Defines the panning sensibility of the inputs.\r\n     * (How fast is the camera panning)\r\n     */\n\n    this.panningSensibility = 50.0;\n    /**\r\n     * Defines the zooming sensibility of the inputs.\r\n     * (How fast is the camera zooming)\r\n     */\n\n    this.zoomingSensibility = 25.0;\n    /**\r\n     * Defines whether maintaining the alt key down switch the movement mode from\r\n     * orientation to zoom.\r\n     */\n\n    this.useAltToZoom = true;\n    /**\r\n     * Rotation speed of the camera\r\n     */\n\n    this.angularSpeed = 0.01;\n    this._keys = new Array();\n  }\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  ArcRotateCameraKeyboardMoveInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this; // was there a second variable defined?\n\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    if (this._onCanvasBlurObserver) {\n      return;\n    }\n\n    this._scene = this.camera.getScene();\n    this._engine = this._scene.getEngine();\n    this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(function () {\n      _this._keys = [];\n    });\n    this._onKeyboardObserver = this._scene.onKeyboardObservable.add(function (info) {\n      var evt = info.event;\n\n      if (!evt.metaKey) {\n        if (info.type === KeyboardEventTypes.KEYDOWN) {\n          _this._ctrlPressed = evt.ctrlKey;\n          _this._altPressed = evt.altKey;\n\n          if (_this.keysUp.indexOf(evt.keyCode) !== -1 || _this.keysDown.indexOf(evt.keyCode) !== -1 || _this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1 || _this.keysReset.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index === -1) {\n              _this._keys.push(evt.keyCode);\n            }\n\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        } else {\n          if (_this.keysUp.indexOf(evt.keyCode) !== -1 || _this.keysDown.indexOf(evt.keyCode) !== -1 || _this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1 || _this.keysReset.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index >= 0) {\n              _this._keys.splice(index, 1);\n            }\n\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        }\n      }\n    });\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  ArcRotateCameraKeyboardMoveInput.prototype.detachControl = function (ignored) {\n    if (this._scene) {\n      if (this._onKeyboardObserver) {\n        this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n      }\n\n      if (this._onCanvasBlurObserver) {\n        this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n      }\n\n      this._onKeyboardObserver = null;\n      this._onCanvasBlurObserver = null;\n    }\n\n    this._keys = [];\n  };\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\n\n\n  ArcRotateCameraKeyboardMoveInput.prototype.checkInputs = function () {\n    if (this._onKeyboardObserver) {\n      var camera = this.camera;\n\n      for (var index = 0; index < this._keys.length; index++) {\n        var keyCode = this._keys[index];\n\n        if (this.keysLeft.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningX -= 1 / this.panningSensibility;\n          } else {\n            camera.inertialAlphaOffset -= this.angularSpeed;\n          }\n        } else if (this.keysUp.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningY += 1 / this.panningSensibility;\n          } else if (this._altPressed && this.useAltToZoom) {\n            camera.inertialRadiusOffset += 1 / this.zoomingSensibility;\n          } else {\n            camera.inertialBetaOffset -= this.angularSpeed;\n          }\n        } else if (this.keysRight.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningX += 1 / this.panningSensibility;\n          } else {\n            camera.inertialAlphaOffset += this.angularSpeed;\n          }\n        } else if (this.keysDown.indexOf(keyCode) !== -1) {\n          if (this._ctrlPressed && this.camera._useCtrlForPanning) {\n            camera.inertialPanningY -= 1 / this.panningSensibility;\n          } else if (this._altPressed && this.useAltToZoom) {\n            camera.inertialRadiusOffset -= 1 / this.zoomingSensibility;\n          } else {\n            camera.inertialBetaOffset += this.angularSpeed;\n          }\n        } else if (this.keysReset.indexOf(keyCode) !== -1) {\n          if (camera.useInputToRestoreState) {\n            camera.restoreState();\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  ArcRotateCameraKeyboardMoveInput.prototype.getClassName = function () {\n    return \"ArcRotateCameraKeyboardMoveInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  ArcRotateCameraKeyboardMoveInput.prototype.getSimpleName = function () {\n    return \"keyboard\";\n  };\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysUp\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysDown\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysLeft\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysRight\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"keysReset\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"panningSensibility\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"zoomingSensibility\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"useAltToZoom\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraKeyboardMoveInput.prototype, \"angularSpeed\", void 0);\n\n  return ArcRotateCameraKeyboardMoveInput;\n}();\n\nexport { ArcRotateCameraKeyboardMoveInput };\nCameraInputTypes[\"ArcRotateCameraKeyboardMoveInput\"] = ArcRotateCameraKeyboardMoveInput;","map":null,"metadata":{},"sourceType":"module"}