{"ast":null,"code":"import _defineProperty from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { PreviewEmote, WearableBodyShape, WearableCategory } from '@dcl/schemas';\nimport { loadingReducer } from 'decentraland-dapps/dist/modules/loading/reducer';\nimport { LOAD_ASSET_PACKS_SUCCESS } from 'modules/assetPack/actions';\nimport { DELETE_ITEM } from 'modules/scene/actions';\nimport { EXPORT_PROJECT_SUCCESS, EXPORT_PROJECT_REQUEST } from 'modules/project/actions';\nimport { DELETE_ITEM_SUCCESS } from 'modules/item/actions';\nimport { hasBodyShape } from 'modules/item/utils';\nimport { getEyeColors, getHairColors, getSkinColors } from 'modules/editor/avatar';\nimport { SET_GIZMO, TOGGLE_PREVIEW, TOGGLE_SIDEBAR, SET_SELECTED_ENTITIES, SET_EDITOR_READY, CLOSE_EDITOR, TOGGLE_SNAP_TO_GRID, SET_ENTITIES_OUT_OF_BOUNDARIES, SET_EXPORT_PROGRESS, SET_EDITOR_LOADING, SET_SCREENSHOT_READY, SET_EDITOR_READ_ONLY, TOGGLE_MULTISELECTION, SET_BODY_SHAPE, SET_ITEMS, SET_EMOTE, SET_SKIN_COLOR, SET_EYE_COLOR, SET_HAIR_COLOR, SET_BASE_WEARABLE, FETCH_BASE_WEARABLES_SUCCESS, FETCH_BASE_WEARABLES_FAILURE, FETCH_BASE_WEARABLES_REQUEST } from './actions';\nimport { Gizmo } from './types';\nimport { pickRandom, filterWearables } from './utils';\nexport var INITIAL_STATE = {\n  gizmo: Gizmo.NONE,\n  preview: false,\n  sidebar: true,\n  snapToGrid: true,\n  multiselectionEnabled: false,\n  selectedEntityIds: [],\n  entitiesOutOfBoundaries: [],\n  isReady: false,\n  isLoading: false,\n  isScreenshotReady: false,\n  isReadOnly: false,\n  hasLoadedAssetPacks: false,\n  export: {\n    isLoading: false,\n    progress: 0,\n    total: 0\n  },\n  bodyShape: pickRandom([WearableBodyShape.MALE, WearableBodyShape.FEMALE]),\n  emote: PreviewEmote.IDLE,\n  skinColor: pickRandom(getSkinColors()),\n  eyeColor: pickRandom(getEyeColors()),\n  hairColor: pickRandom(getHairColors()),\n  baseWearables: [],\n  selectedBaseWearablesByBodyShape: null,\n  visibleItemIds: [],\n  loading: [],\n  fetchingBaseWearablesError: null\n};\nexport var editorReducer = function editorReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_GIZMO:\n      {\n        var gizmo = action.payload.gizmo;\n        return _objectSpread({}, state, {\n          gizmo: gizmo\n        });\n      }\n\n    case TOGGLE_PREVIEW:\n      {\n        var enabled = action.payload.isEnabled;\n        return _objectSpread({}, state, {\n          preview: enabled\n        });\n      }\n\n    case TOGGLE_SIDEBAR:\n      {\n        var _enabled = action.payload.isEnabled;\n        return _objectSpread({}, state, {\n          sidebar: _enabled\n        });\n      }\n\n    case SET_SELECTED_ENTITIES:\n      {\n        return _objectSpread({}, state, {\n          selectedEntityIds: action.payload.entityIds ? action.payload.entityIds : []\n        });\n      }\n\n    case SET_EDITOR_READY:\n      {\n        var isReady = action.payload.isReady;\n        return _objectSpread({}, state, {\n          isLoading: isReady,\n          isReady: isReady\n        });\n      }\n\n    case CLOSE_EDITOR:\n      {\n        return _objectSpread({}, INITIAL_STATE);\n      }\n\n    case TOGGLE_SNAP_TO_GRID:\n      {\n        return _objectSpread({}, state, {\n          snapToGrid: action.payload.enabled\n        });\n      }\n\n    case SET_ENTITIES_OUT_OF_BOUNDARIES:\n      {\n        return _objectSpread({}, state, {\n          entitiesOutOfBoundaries: action.payload.entities\n        });\n      }\n\n    case DELETE_ITEM:\n      {\n        return _objectSpread({}, state, {\n          entitiesOutOfBoundaries: state.entitiesOutOfBoundaries.filter(function (entityId) {\n            return !state.selectedEntityIds.includes(entityId);\n          })\n        });\n      }\n\n    case EXPORT_PROJECT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          export: _objectSpread({}, state.export, {\n            isLoading: true\n          })\n        });\n      }\n\n    case SET_EXPORT_PROGRESS:\n      {\n        var _action$payload = action.payload,\n            loaded = _action$payload.loaded,\n            total = _action$payload.total;\n        return _objectSpread({}, state, {\n          export: _objectSpread({}, state.export, action.payload, {\n            progress: loaded,\n            total: total\n          })\n        });\n      }\n\n    case EXPORT_PROJECT_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          export: _objectSpread({}, state.export, {\n            isLoading: false,\n            progress: 0,\n            total: 0\n          })\n        });\n      }\n\n    case SET_EDITOR_LOADING:\n      {\n        return _objectSpread({}, state, {\n          isLoading: action.payload.isLoading\n        });\n      }\n\n    case SET_EDITOR_READ_ONLY:\n      {\n        return _objectSpread({}, state, {\n          isReadOnly: action.payload.isReadOnly\n        });\n      }\n\n    case SET_SCREENSHOT_READY:\n      {\n        return _objectSpread({}, state, {\n          isScreenshotReady: action.payload.isScreenshotReady\n        });\n      }\n\n    case LOAD_ASSET_PACKS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          hasLoadedAssetPacks: true\n        });\n      }\n\n    case TOGGLE_MULTISELECTION:\n      {\n        return _objectSpread({}, state, {\n          multiselectionEnabled: action.payload.enabled\n        });\n      }\n\n    case SET_BODY_SHAPE:\n      {\n        return _objectSpread({}, state, {\n          bodyShape: action.payload.bodyShape\n        });\n      }\n\n    case SET_EMOTE:\n      {\n        return _objectSpread({}, state, {\n          emote: action.payload.emote\n        });\n      }\n\n    case SET_SKIN_COLOR:\n      {\n        return _objectSpread({}, state, {\n          skinColor: action.payload.skinColor\n        });\n      }\n\n    case SET_EYE_COLOR:\n      {\n        return _objectSpread({}, state, {\n          eyeColor: action.payload.eyeColor\n        });\n      }\n\n    case SET_HAIR_COLOR:\n      {\n        return _objectSpread({}, state, {\n          hairColor: action.payload.hairColor\n        });\n      }\n\n    case SET_BASE_WEARABLE:\n      {\n        var _state$selectedBaseWe;\n\n        var _action$payload2 = action.payload,\n            category = _action$payload2.category,\n            bodyShape = _action$payload2.bodyShape,\n            wearable = _action$payload2.wearable;\n        return _objectSpread({}, state, {\n          selectedBaseWearablesByBodyShape: _objectSpread({}, (_state$selectedBaseWe = state.selectedBaseWearablesByBodyShape) !== null && _state$selectedBaseWe !== void 0 ? _state$selectedBaseWe : {}, _defineProperty({}, bodyShape, _objectSpread({}, state.selectedBaseWearablesByBodyShape[bodyShape], _defineProperty({}, category, wearable))))\n        });\n      }\n\n    case FETCH_BASE_WEARABLES_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          fetchingBaseWearablesError: null,\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case FETCH_BASE_WEARABLES_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          fetchingBaseWearablesError: action.payload.error,\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case FETCH_BASE_WEARABLES_SUCCESS:\n      {\n        var _WearableBodyShape$FE, _WearableBodyShape$MA, _selectedBaseWearable;\n\n        var wearables = action.payload.wearables;\n        return _objectSpread({}, state, {\n          baseWearables: wearables,\n          fetchingBaseWearablesError: null,\n          loading: loadingReducer(state.loading, action),\n          // Initialize the selectedBaseWearables randomly\n          selectedBaseWearablesByBodyShape: (_selectedBaseWearable = {}, _defineProperty(_selectedBaseWearable, WearableBodyShape.FEMALE, (_WearableBodyShape$FE = {}, _defineProperty(_WearableBodyShape$FE, WearableCategory.HAIR, pickRandom(filterWearables(wearables, WearableCategory.HAIR, WearableBodyShape.FEMALE))), _defineProperty(_WearableBodyShape$FE, WearableCategory.FACIAL_HAIR, null), _defineProperty(_WearableBodyShape$FE, WearableCategory.UPPER_BODY, pickRandom(filterWearables(wearables, WearableCategory.UPPER_BODY, WearableBodyShape.FEMALE))), _defineProperty(_WearableBodyShape$FE, WearableCategory.LOWER_BODY, pickRandom(filterWearables(wearables, WearableCategory.LOWER_BODY, WearableBodyShape.FEMALE))), _WearableBodyShape$FE)), _defineProperty(_selectedBaseWearable, WearableBodyShape.MALE, (_WearableBodyShape$MA = {}, _defineProperty(_WearableBodyShape$MA, WearableCategory.HAIR, pickRandom(filterWearables(wearables, WearableCategory.HAIR, WearableBodyShape.MALE))), _defineProperty(_WearableBodyShape$MA, WearableCategory.FACIAL_HAIR, pickRandom(filterWearables(wearables, WearableCategory.FACIAL_HAIR, WearableBodyShape.MALE))), _defineProperty(_WearableBodyShape$MA, WearableCategory.UPPER_BODY, pickRandom(filterWearables(wearables, WearableCategory.UPPER_BODY, WearableBodyShape.MALE))), _defineProperty(_WearableBodyShape$MA, WearableCategory.LOWER_BODY, pickRandom(filterWearables(wearables, WearableCategory.LOWER_BODY, WearableBodyShape.MALE))), _WearableBodyShape$MA)), _selectedBaseWearable)\n        });\n      }\n\n    case SET_ITEMS:\n      {\n        return _objectSpread({}, state, {\n          visibleItemIds: action.payload.items.filter(function (item) {\n            return hasBodyShape(item, state.bodyShape);\n          }) // only add items that have a valid representation for the selected body shape\n          .map(function (item) {\n            return item.id;\n          })\n        });\n      }\n\n    case DELETE_ITEM_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          visibleItemIds: state.visibleItemIds.filter(function (id) {\n            return id !== action.payload.item.id;\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/editor/reducer.ts"],"names":["PreviewEmote","WearableBodyShape","WearableCategory","loadingReducer","LOAD_ASSET_PACKS_SUCCESS","DELETE_ITEM","EXPORT_PROJECT_SUCCESS","EXPORT_PROJECT_REQUEST","DELETE_ITEM_SUCCESS","hasBodyShape","getEyeColors","getHairColors","getSkinColors","SET_GIZMO","TOGGLE_PREVIEW","TOGGLE_SIDEBAR","SET_SELECTED_ENTITIES","SET_EDITOR_READY","CLOSE_EDITOR","TOGGLE_SNAP_TO_GRID","SET_ENTITIES_OUT_OF_BOUNDARIES","SET_EXPORT_PROGRESS","SET_EDITOR_LOADING","SET_SCREENSHOT_READY","SET_EDITOR_READ_ONLY","TOGGLE_MULTISELECTION","SET_BODY_SHAPE","SET_ITEMS","SET_EMOTE","SET_SKIN_COLOR","SET_EYE_COLOR","SET_HAIR_COLOR","SET_BASE_WEARABLE","FETCH_BASE_WEARABLES_SUCCESS","FETCH_BASE_WEARABLES_FAILURE","FETCH_BASE_WEARABLES_REQUEST","Gizmo","pickRandom","filterWearables","INITIAL_STATE","gizmo","NONE","preview","sidebar","snapToGrid","multiselectionEnabled","selectedEntityIds","entitiesOutOfBoundaries","isReady","isLoading","isScreenshotReady","isReadOnly","hasLoadedAssetPacks","export","progress","total","bodyShape","MALE","FEMALE","emote","IDLE","skinColor","eyeColor","hairColor","baseWearables","selectedBaseWearablesByBodyShape","visibleItemIds","loading","fetchingBaseWearablesError","editorReducer","state","action","type","payload","enabled","isEnabled","entityIds","entities","filter","entityId","includes","loaded","category","wearable","error","wearables","HAIR","FACIAL_HAIR","UPPER_BODY","LOWER_BODY","items","item","map","id"],"mappings":"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","sourcesContent":["import { Color4, Wearable } from 'decentraland-ecs'\nimport { PreviewEmote, WearableBodyShape, WearableCategory } from '@dcl/schemas'\nimport { loadingReducer, LoadingState } from 'decentraland-dapps/dist/modules/loading/reducer'\n\nimport { LOAD_ASSET_PACKS_SUCCESS, LoadAssetPacksSuccessAction } from 'modules/assetPack/actions'\nimport { DELETE_ITEM, DeleteItemAction } from 'modules/scene/actions'\nimport {\n  EXPORT_PROJECT_SUCCESS,\n  EXPORT_PROJECT_REQUEST,\n  ExportProjectRequestAction,\n  ExportProjectSuccessAction\n} from 'modules/project/actions'\nimport { DeleteItemSuccessAction, DELETE_ITEM_SUCCESS } from 'modules/item/actions'\nimport { hasBodyShape } from 'modules/item/utils'\nimport { getEyeColors, getHairColors, getSkinColors } from 'modules/editor/avatar'\nimport {\n  SetGizmoAction,\n  TogglePreviewAction,\n  ToggleSidebarAction,\n  SET_GIZMO,\n  TOGGLE_PREVIEW,\n  TOGGLE_SIDEBAR,\n  SetSelectedEntitiesAction,\n  SET_SELECTED_ENTITIES,\n  SET_EDITOR_READY,\n  CLOSE_EDITOR,\n  SetEditorReadyAction,\n  CloseEditorAction,\n  ToggleSnapToGridAction,\n  TOGGLE_SNAP_TO_GRID,\n  SetEntitiesOutOfBoundariesAction,\n  SET_ENTITIES_OUT_OF_BOUNDARIES,\n  SetExportProgressAction,\n  SET_EXPORT_PROGRESS,\n  SET_EDITOR_LOADING,\n  SetEditorLoadingAction,\n  SetScreenshotReadyAction,\n  SET_SCREENSHOT_READY,\n  SetEditorReadOnlyAction,\n  SET_EDITOR_READ_ONLY,\n  TOGGLE_MULTISELECTION,\n  ToggleMultiselectionAction,\n  SetBodyShapeAction,\n  SET_BODY_SHAPE,\n  SetItemsAction,\n  SET_ITEMS,\n  SetEmoteAction,\n  SET_EMOTE,\n  SetSkinColorAction,\n  SET_SKIN_COLOR,\n  SetEyeColorAction,\n  SET_EYE_COLOR,\n  SetHairColorAction,\n  SET_HAIR_COLOR,\n  SetBaseWearableAction,\n  SET_BASE_WEARABLE,\n  FETCH_BASE_WEARABLES_SUCCESS,\n  FetchBaseWearablesSuccessAction,\n  FETCH_BASE_WEARABLES_FAILURE,\n  FETCH_BASE_WEARABLES_REQUEST,\n  FetchBaseWearablesRequestAction,\n  FetchBaseWearablesFailureAction\n} from './actions'\nimport { Gizmo } from './types'\nimport { pickRandom, filterWearables } from './utils'\n\nexport type EditorState = {\n  gizmo: Gizmo\n  preview: boolean\n  sidebar: boolean\n  snapToGrid: boolean\n  multiselectionEnabled: boolean\n  selectedEntityIds: string[]\n  entitiesOutOfBoundaries: string[]\n  isReady: boolean // editor is ready to be interacted with via API\n  isLoading: boolean // models are done loading\n  isScreenshotReady: boolean\n  isReadOnly: boolean\n  hasLoadedAssetPacks: boolean\n  export: {\n    isLoading: boolean\n    progress: number\n    total: number\n  }\n  bodyShape: WearableBodyShape\n  emote: PreviewEmote\n  skinColor: Color4\n  eyeColor: Color4\n  hairColor: Color4\n  baseWearables: Wearable[]\n  selectedBaseWearablesByBodyShape: Record<WearableBodyShape, Record<string, Wearable | null>> | null\n  visibleItemIds: string[]\n  loading: LoadingState\n  fetchingBaseWearablesError: string | null\n}\n\nexport const INITIAL_STATE: EditorState = {\n  gizmo: Gizmo.NONE,\n  preview: false,\n  sidebar: true,\n  snapToGrid: true,\n  multiselectionEnabled: false,\n  selectedEntityIds: [],\n  entitiesOutOfBoundaries: [],\n  isReady: false,\n  isLoading: false,\n  isScreenshotReady: false,\n  isReadOnly: false,\n  hasLoadedAssetPacks: false,\n  export: {\n    isLoading: false,\n    progress: 0,\n    total: 0\n  },\n  bodyShape: pickRandom([WearableBodyShape.MALE, WearableBodyShape.FEMALE]),\n  emote: PreviewEmote.IDLE,\n  skinColor: pickRandom(getSkinColors()),\n  eyeColor: pickRandom(getEyeColors()),\n  hairColor: pickRandom(getHairColors()),\n  baseWearables: [],\n  selectedBaseWearablesByBodyShape: null,\n  visibleItemIds: [],\n  loading: [],\n  fetchingBaseWearablesError: null\n}\n\nexport type EditorReducerAction =\n  | SetGizmoAction\n  | SetScreenshotReadyAction\n  | TogglePreviewAction\n  | ToggleSidebarAction\n  | SetSelectedEntitiesAction\n  | SetEditorReadyAction\n  | CloseEditorAction\n  | ToggleSnapToGridAction\n  | SetEntitiesOutOfBoundariesAction\n  | DeleteItemAction\n  | SetExportProgressAction\n  | SetEditorLoadingAction\n  | SetEditorReadOnlyAction\n  | ExportProjectRequestAction\n  | ExportProjectSuccessAction\n  | LoadAssetPacksSuccessAction\n  | ToggleMultiselectionAction\n  | SetBodyShapeAction\n  | SetEmoteAction\n  | SetItemsAction\n  | DeleteItemSuccessAction\n  | SetSkinColorAction\n  | SetEyeColorAction\n  | SetHairColorAction\n  | SetBaseWearableAction\n  | FetchBaseWearablesRequestAction\n  | FetchBaseWearablesSuccessAction\n  | FetchBaseWearablesFailureAction\n\nexport const editorReducer = (state = INITIAL_STATE, action: EditorReducerAction): EditorState => {\n  switch (action.type) {\n    case SET_GIZMO: {\n      const { gizmo } = action.payload\n      return {\n        ...state,\n        gizmo\n      }\n    }\n    case TOGGLE_PREVIEW: {\n      const { isEnabled: enabled } = action.payload\n      return {\n        ...state,\n        preview: enabled\n      }\n    }\n    case TOGGLE_SIDEBAR: {\n      const { isEnabled: enabled } = action.payload\n      return {\n        ...state,\n        sidebar: enabled\n      }\n    }\n    case SET_SELECTED_ENTITIES: {\n      return {\n        ...state,\n        selectedEntityIds: action.payload.entityIds ? action.payload.entityIds : []\n      }\n    }\n    case SET_EDITOR_READY: {\n      const { isReady } = action.payload\n      return {\n        ...state,\n        isLoading: isReady,\n        isReady\n      }\n    }\n    case CLOSE_EDITOR: {\n      return {\n        ...INITIAL_STATE\n      }\n    }\n    case TOGGLE_SNAP_TO_GRID: {\n      return {\n        ...state,\n        snapToGrid: action.payload.enabled\n      }\n    }\n    case SET_ENTITIES_OUT_OF_BOUNDARIES: {\n      return {\n        ...state,\n        entitiesOutOfBoundaries: action.payload.entities\n      }\n    }\n    case DELETE_ITEM: {\n      return {\n        ...state,\n        entitiesOutOfBoundaries: state.entitiesOutOfBoundaries.filter(entityId => !state.selectedEntityIds.includes(entityId))\n      }\n    }\n    case EXPORT_PROJECT_REQUEST: {\n      return {\n        ...state,\n        export: {\n          ...state.export,\n          isLoading: true\n        }\n      }\n    }\n    case SET_EXPORT_PROGRESS: {\n      const { loaded, total } = action.payload\n      return {\n        ...state,\n        export: {\n          ...state.export,\n          ...action.payload,\n          progress: loaded,\n          total\n        }\n      }\n    }\n    case EXPORT_PROJECT_SUCCESS: {\n      return {\n        ...state,\n        export: {\n          ...state.export,\n          isLoading: false,\n          progress: 0,\n          total: 0\n        }\n      }\n    }\n    case SET_EDITOR_LOADING: {\n      return {\n        ...state,\n        isLoading: action.payload.isLoading\n      }\n    }\n    case SET_EDITOR_READ_ONLY: {\n      return {\n        ...state,\n        isReadOnly: action.payload.isReadOnly\n      }\n    }\n    case SET_SCREENSHOT_READY: {\n      return {\n        ...state,\n        isScreenshotReady: action.payload.isScreenshotReady\n      }\n    }\n    case LOAD_ASSET_PACKS_SUCCESS: {\n      return {\n        ...state,\n        hasLoadedAssetPacks: true\n      }\n    }\n    case TOGGLE_MULTISELECTION: {\n      return {\n        ...state,\n        multiselectionEnabled: action.payload.enabled\n      }\n    }\n    case SET_BODY_SHAPE: {\n      return {\n        ...state,\n        bodyShape: action.payload.bodyShape\n      }\n    }\n    case SET_EMOTE: {\n      return {\n        ...state,\n        emote: action.payload.emote\n      }\n    }\n    case SET_SKIN_COLOR: {\n      return {\n        ...state,\n        skinColor: action.payload.skinColor\n      }\n    }\n    case SET_EYE_COLOR: {\n      return {\n        ...state,\n        eyeColor: action.payload.eyeColor\n      }\n    }\n    case SET_HAIR_COLOR: {\n      return {\n        ...state,\n        hairColor: action.payload.hairColor\n      }\n    }\n    case SET_BASE_WEARABLE: {\n      const { category, bodyShape, wearable } = action.payload\n      return {\n        ...state,\n        selectedBaseWearablesByBodyShape: {\n          ...(state.selectedBaseWearablesByBodyShape ?? ({} as Record<WearableBodyShape, Record<string, Wearable | null>>)),\n          [bodyShape]: {\n            ...state.selectedBaseWearablesByBodyShape![bodyShape],\n            [category]: wearable\n          }\n        }\n      }\n    }\n    case FETCH_BASE_WEARABLES_REQUEST: {\n      return {\n        ...state,\n        fetchingBaseWearablesError: null,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case FETCH_BASE_WEARABLES_FAILURE: {\n      return {\n        ...state,\n        fetchingBaseWearablesError: action.payload.error,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case FETCH_BASE_WEARABLES_SUCCESS: {\n      const { wearables } = action.payload\n      return {\n        ...state,\n        baseWearables: wearables,\n        fetchingBaseWearablesError: null,\n        loading: loadingReducer(state.loading, action),\n        // Initialize the selectedBaseWearables randomly\n        selectedBaseWearablesByBodyShape: {\n          [WearableBodyShape.FEMALE]: {\n            [WearableCategory.HAIR]: pickRandom(filterWearables(wearables, WearableCategory.HAIR, WearableBodyShape.FEMALE)),\n            [WearableCategory.FACIAL_HAIR]: null,\n            [WearableCategory.UPPER_BODY]: pickRandom(filterWearables(wearables, WearableCategory.UPPER_BODY, WearableBodyShape.FEMALE)),\n            [WearableCategory.LOWER_BODY]: pickRandom(filterWearables(wearables, WearableCategory.LOWER_BODY, WearableBodyShape.FEMALE))\n          },\n          [WearableBodyShape.MALE]: {\n            [WearableCategory.HAIR]: pickRandom(filterWearables(wearables, WearableCategory.HAIR, WearableBodyShape.MALE)),\n            [WearableCategory.FACIAL_HAIR]: pickRandom(filterWearables(wearables, WearableCategory.FACIAL_HAIR, WearableBodyShape.MALE)),\n            [WearableCategory.UPPER_BODY]: pickRandom(filterWearables(wearables, WearableCategory.UPPER_BODY, WearableBodyShape.MALE)),\n            [WearableCategory.LOWER_BODY]: pickRandom(filterWearables(wearables, WearableCategory.LOWER_BODY, WearableBodyShape.MALE))\n          }\n        }\n      }\n    }\n    case SET_ITEMS: {\n      return {\n        ...state,\n        visibleItemIds: action.payload.items\n          .filter(item => hasBodyShape(item, state.bodyShape)) // only add items that have a valid representation for the selected body shape\n          .map(item => item.id)\n      }\n    }\n    case DELETE_ITEM_SUCCESS: {\n      return {\n        ...state,\n        visibleItemIds: state.visibleItemIds.filter(id => id !== action.payload.item.id)\n      }\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}