{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { getContentsCID } from 'modules/asset/utils';\nimport { dataURLToBlob, blobToCID, isDataUrl } from 'modules/media/utils';\nimport { getContentsStorageUrl } from 'lib/api/builder';\nexport var MAX_TITLE_LENGTH = 20;\nexport var MIN_TITLE_LENGTH = 3;\nexport var MAX_THUMBNAIL_SIZE = 5000000;\nexport var THUMBNAIL_PATH = 'thumbnail.png';\nexport function convertToFullAssetPack(_x) {\n  return _convertToFullAssetPack.apply(this, arguments);\n}\n\nfunction _convertToFullAssetPack() {\n  _convertToFullAssetPack = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(rawAssetPack) {\n    var ignoredAssets,\n        fullAssetPack,\n        rawContents,\n        _iterator2,\n        _step2,\n        asset,\n        contents,\n        thumbnail,\n        isIgnored,\n        newAsset,\n        _i,\n        _Object$keys,\n        path,\n        cid,\n        blob,\n        _cid,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ignoredAssets = _args.length > 1 && _args[1] !== undefined ? _args[1] : [];\n            fullAssetPack = _objectSpread({}, rawAssetPack, {\n              assets: []\n            });\n            rawContents = {};\n            _iterator2 = _createForOfIteratorHelper(rawAssetPack.assets);\n            _context.prev = 4;\n\n            _iterator2.s();\n\n          case 6:\n            if ((_step2 = _iterator2.n()).done) {\n              _context.next = 31;\n              break;\n            }\n\n            asset = _step2.value;\n            contents = asset.contents, thumbnail = asset.thumbnail;\n            isIgnored = ignoredAssets.includes(asset.id);\n            rawContents[asset.id] = {}; // generate { [path]: \"cid\" } mappings\n\n            newAsset = _objectSpread({}, asset, {\n              contents: {}\n            });\n\n            if (isIgnored) {\n              _context.next = 18;\n              break;\n            }\n\n            _context.next = 15;\n            return getContentsCID(asset);\n\n          case 15:\n            newAsset.contents = _context.sent;\n            _context.next = 19;\n            break;\n\n          case 18:\n            newAsset.contents = asset.contents;\n\n          case 19:\n            // save rawContents as { [cid]: Blob }\n            for (_i = 0, _Object$keys = Object.keys(newAsset.contents); _i < _Object$keys.length; _i++) {\n              path = _Object$keys[_i];\n              cid = newAsset.contents[path];\n\n              if (!isIgnored) {\n                rawContents[asset.id][cid] = contents[path];\n              }\n            } // add thumbnail (it's not needed in asset.contents, but added to asset.thumbnail instead)\n\n\n            if (!isDataUrl(thumbnail)) {\n              _context.next = 28;\n              break;\n            }\n\n            blob = dataURLToBlob(thumbnail);\n            _context.next = 24;\n            return blobToCID(blob, THUMBNAIL_PATH);\n\n          case 24:\n            _cid = _context.sent;\n            newAsset.thumbnail = getContentsStorageUrl(_cid);\n            newAsset.model = \"\".concat(asset.assetPackId, \"/\").concat(asset.model);\n            rawContents[asset.id][_cid] = blob;\n\n          case 28:\n            // add asset\n            fullAssetPack.assets.push(newAsset);\n\n          case 29:\n            _context.next = 6;\n            break;\n\n          case 31:\n            _context.next = 36;\n            break;\n\n          case 33:\n            _context.prev = 33;\n            _context.t0 = _context[\"catch\"](4);\n\n            _iterator2.e(_context.t0);\n\n          case 36:\n            _context.prev = 36;\n\n            _iterator2.f();\n\n            return _context.finish(36);\n\n          case 39:\n            return _context.abrupt(\"return\", [fullAssetPack, rawContents]);\n\n          case 40:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 33, 36, 39]]);\n  }));\n  return _convertToFullAssetPack.apply(this, arguments);\n}\n\nexport function getAssetPackFileCount(assetPack) {\n  var count = 0;\n\n  var _iterator = _createForOfIteratorHelper(assetPack.assets),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var asset = _step.value;\n      count += Object.keys(asset.contents).length;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return count;\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/assetPack/utils.ts"],"names":["getContentsCID","dataURLToBlob","blobToCID","isDataUrl","getContentsStorageUrl","MAX_TITLE_LENGTH","MIN_TITLE_LENGTH","MAX_THUMBNAIL_SIZE","THUMBNAIL_PATH","convertToFullAssetPack","rawAssetPack","ignoredAssets","fullAssetPack","assets","rawContents","asset","contents","thumbnail","isIgnored","includes","id","newAsset","Object","keys","path","cid","blob","model","assetPackId","push","getAssetPackFileCount","assetPack","count","length"],"mappings":"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","sourcesContent":["import { FullAssetPack, MixedAssetPack } from './types'\nimport { RawAssetContents, Asset, RawAsset } from 'modules/asset/types'\nimport { getContentsCID } from 'modules/asset/utils'\nimport { dataURLToBlob, blobToCID, isDataUrl } from 'modules/media/utils'\nimport { getContentsStorageUrl } from 'lib/api/builder'\n\nexport const MAX_TITLE_LENGTH = 20\nexport const MIN_TITLE_LENGTH = 3\nexport const MAX_THUMBNAIL_SIZE = 5000000\nexport const THUMBNAIL_PATH = 'thumbnail.png'\n\nexport async function convertToFullAssetPack(\n  rawAssetPack: MixedAssetPack,\n  ignoredAssets: string[] = []\n): Promise<[FullAssetPack, RawAssetContents]> {\n  const fullAssetPack: FullAssetPack = { ...rawAssetPack, assets: [] }\n  const rawContents: RawAssetContents = {}\n\n  for (let asset of rawAssetPack.assets) {\n    const { contents, thumbnail } = asset\n    const isIgnored = ignoredAssets.includes(asset.id)\n    rawContents[asset.id] = {}\n\n    // generate { [path]: \"cid\" } mappings\n    const newAsset: Asset = {\n      ...asset,\n      contents: {}\n    }\n\n    if (!isIgnored) {\n      newAsset.contents = await getContentsCID(asset as RawAsset)\n    } else {\n      newAsset.contents = (asset as Asset).contents\n    }\n\n    // save rawContents as { [cid]: Blob }\n    for (const path of Object.keys(newAsset.contents)) {\n      const cid = newAsset.contents[path]\n      if (!isIgnored) {\n        rawContents[asset.id][cid] = (contents as RawAsset['contents'])[path]\n      }\n    }\n\n    // add thumbnail (it's not needed in asset.contents, but added to asset.thumbnail instead)\n    if (isDataUrl(thumbnail)) {\n      const blob = dataURLToBlob(thumbnail)!\n      const cid = await blobToCID(blob, THUMBNAIL_PATH)\n      newAsset.thumbnail = getContentsStorageUrl(cid)\n      newAsset.model = `${asset.assetPackId}/${asset.model}`\n      rawContents[asset.id][cid] = blob\n    }\n\n    // add asset\n    fullAssetPack.assets.push(newAsset)\n  }\n\n  return [fullAssetPack, rawContents]\n}\n\nexport function getAssetPackFileCount(assetPack: FullAssetPack): number {\n  let count = 0\n\n  for (let asset of assetPack.assets) {\n    count += Object.keys(asset.contents).length\n  }\n\n  return count\n}\n"]},"metadata":{},"sourceType":"module"}