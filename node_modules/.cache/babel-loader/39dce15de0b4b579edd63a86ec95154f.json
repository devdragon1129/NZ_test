{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"../utils\");\n\nvar Address = /*#__PURE__*/function () {\n  function Address(buffer) {\n    _classCallCheck(this, Address);\n\n    this.buffer = buffer;\n\n    if (buffer.length === 32) {\n      if (!buffer.slice(0, 12).equals(Buffer.of(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))) {\n        throw new Error('Invalid address buffer.');\n      } else {\n        this.buffer = buffer.slice(12);\n      }\n    } else if (buffer.length !== 20) {\n      throw new Error('Invalid address buffer.');\n    }\n  }\n\n  _createClass(Address, [{\n    key: \"equals\",\n    value: function equals(rhs) {\n      return this.buffer.equals(rhs.buffer);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return Address.toChecksumAddress(utils_1.bufferToHex(this.buffer));\n    }\n  }, {\n    key: \"toBuffer\",\n    value: function toBuffer() {\n      return this.buffer;\n    }\n  }, {\n    key: \"toBuffer32\",\n    value: function toBuffer32() {\n      var buffer = Buffer.alloc(32);\n      this.buffer.copy(buffer, 12);\n      return buffer;\n    }\n  }], [{\n    key: \"fromString\",\n    value: function fromString(address) {\n      if (!Address.isAddress(address)) {\n        throw new Error(\"Invalid address string: \".concat(address));\n      }\n\n      return new Address(Buffer.from(address.replace(/^0x/i, ''), 'hex'));\n    }\n  }, {\n    key: \"isAddress\",\n    value: function isAddress(address) {\n      if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        // Does not have the basic requirements of an address.\n        return false;\n      } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {\n        // It's ALL lowercase or ALL upppercase.\n        return true;\n      } else {\n        return Address.checkAddressChecksum(address);\n      }\n    }\n  }, {\n    key: \"checkAddressChecksum\",\n    value: function checkAddressChecksum(address) {\n      address = address.replace(/^0x/i, '');\n      var addressHash = utils_1.sha3(address.toLowerCase()).replace(/^0x/i, '');\n\n      for (var i = 0; i < 40; i++) {\n        // The nth letter should be uppercase if the nth digit of casemap is 1.\n        if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"toChecksumAddress\",\n    value: function toChecksumAddress(address) {\n      if (!Address.isAddress(address)) {\n        throw new Error('Invalid address string.');\n      }\n\n      address = address.toLowerCase().replace(/^0x/i, '');\n      var addressHash = utils_1.sha3(address).replace(/^0x/i, '');\n      var checksumAddress = '0x';\n\n      for (var i = 0; i < address.length; i++) {\n        // If ith character is 9 to f then make it uppercase.\n        if (parseInt(addressHash[i], 16) > 7) {\n          checksumAddress += address[i].toUpperCase();\n        } else {\n          checksumAddress += address[i];\n        }\n      }\n\n      return checksumAddress;\n    }\n  }]);\n\n  return Address;\n}();\n\nAddress.ZERO = new Address(Buffer.alloc(20));\nexports.Address = Address;","map":null,"metadata":{},"sourceType":"script"}