{"ast":null,"code":"import _slicedToArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/opt/work/NZ_test/src/components/ActivityPage/Transaction/TransactionDetail/TransactionDetail.tsx\";\n\nimport React, { useMemo, useCallback } from 'react';\nimport { Loader, Icon } from 'decentraland-ui';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { isPending, getTransactionHref } from 'decentraland-dapps/dist/modules/transaction/utils';\nimport { TransactionStatus } from 'decentraland-dapps/dist/modules/transaction/types';\nimport { formatDistanceToNow } from 'lib/date';\nimport { coordsToId, getCenter } from 'modules/land/utils';\nimport { Atlas } from 'components/Atlas';\nimport CollectionImage from 'components/CollectionImage';\nimport ItemImage from 'components/ItemImage';\nimport Profile from 'components/Profile';\nimport './TransactionDetail.css';\n\nvar getHref = function getHref(tx) {\n  var txHash = tx.replacedBy || tx.hash;\n\n  if (!txHash) {\n    return '';\n  }\n\n  return getTransactionHref({\n    txHash: txHash\n  }, tx.chainId);\n};\n\nvar Image = function Image(props) {\n  var selection = props.selection,\n      address = props.address,\n      collectionId = props.collectionId,\n      item = props.item,\n      slotsToyBuy = props.slotsToyBuy;\n\n  if (selection) {\n    var set = useMemo(function () {\n      return new Set((selection || []).map(function (coord) {\n        return coordsToId(coord.x, coord.y);\n      }));\n    }, [selection]);\n    var selectedStrokeLayer = useCallback(function (x, y) {\n      return set.has(coordsToId(x, y)) ? {\n        color: '#ff0044',\n        scale: 1.4\n      } : null;\n    }, [set]);\n    var selectedFillLayer = useCallback(function (x, y) {\n      return set.has(coordsToId(x, y)) ? {\n        color: '#ff9990',\n        scale: 1.2\n      } : null;\n    }, [set]);\n\n    var _useMemo = useMemo(function () {\n      return selection ? getCenter(selection) : [0, 0];\n    }, [selection]),\n        _useMemo2 = _slicedToArray(_useMemo, 2),\n        x = _useMemo2[0],\n        y = _useMemo2[1];\n\n    return /*#__PURE__*/React.createElement(Atlas, {\n      x: x,\n      y: y,\n      layers: [selectedStrokeLayer, selectedFillLayer],\n      width: 48,\n      height: 48,\n      size: 9,\n      isDraggable: false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 12\n      }\n    });\n  } else if (address) {\n    return /*#__PURE__*/React.createElement(Profile, {\n      address: address,\n      size: \"huge\",\n      imageOnly: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 12\n      }\n    });\n  } else if (collectionId) {\n    return /*#__PURE__*/React.createElement(CollectionImage, {\n      collectionId: collectionId,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 12\n      }\n    });\n  } else if (item) {\n    return /*#__PURE__*/React.createElement(ItemImage, {\n      item: item,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    });\n  } else if (slotsToyBuy) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"slot-image\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return null;\n  }\n};\n\nvar TransactionDetail = function TransactionDetail(props) {\n  var text = props.text,\n      tx = props.tx;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"TransactionDetail\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"left\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Image, Object.assign({}, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"description\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, text), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"timestamp\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, formatDistanceToNow(tx.timestamp), \".\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"right\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: getHref(tx),\n    className: tx.status ? 'status ' + tx.status : 'status',\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"description\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, tx.status || t('global.loading')), isPending(tx.status) ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Loader, {\n    active: true,\n    size: \"mini\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  })) : null, tx.status === TransactionStatus.REVERTED ? /*#__PURE__*/React.createElement(Icon, {\n    name: \"warning sign\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 55\n    }\n  }) : null, tx.status === TransactionStatus.CONFIRMED || tx.status === TransactionStatus.REPLACED ? /*#__PURE__*/React.createElement(Icon, {\n    name: \"check\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 100\n    }\n  }) : null)));\n};\n\nexport default React.memo(TransactionDetail);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/ActivityPage/Transaction/TransactionDetail/TransactionDetail.tsx"],"names":["React","useMemo","useCallback","Loader","Icon","t","isPending","getTransactionHref","TransactionStatus","formatDistanceToNow","coordsToId","getCenter","Atlas","CollectionImage","ItemImage","Profile","getHref","tx","txHash","replacedBy","hash","chainId","Image","props","selection","address","collectionId","item","slotsToyBuy","set","Set","map","coord","x","y","selectedStrokeLayer","has","color","scale","selectedFillLayer","TransactionDetail","text","timestamp","status","REVERTED","CONFIRMED","REPLACED","memo"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback } from 'react'\nimport { Loader, Icon, Layer } from 'decentraland-ui'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { isPending, getTransactionHref } from 'decentraland-dapps/dist/modules/transaction/utils'\nimport { TransactionStatus, Transaction } from 'decentraland-dapps/dist/modules/transaction/types'\nimport { formatDistanceToNow } from 'lib/date'\nimport { coordsToId, getCenter } from 'modules/land/utils'\nimport { Atlas } from 'components/Atlas'\nimport CollectionImage from 'components/CollectionImage'\nimport ItemImage from 'components/ItemImage'\nimport Profile from 'components/Profile'\nimport { Props } from './TransactionDetail.types'\nimport './TransactionDetail.css'\n\nconst getHref = (tx: Transaction) => {\n  const txHash = tx.replacedBy || tx.hash\n  if (!txHash) {\n    return ''\n  }\n  return getTransactionHref({ txHash }, tx.chainId)\n}\n\nconst Image = (props: Props) => {\n  const { selection, address, collectionId, item, slotsToyBuy } = props\n\n  if (selection) {\n    const set = useMemo(() => new Set((selection || []).map(coord => coordsToId(coord.x, coord.y))), [selection])\n    const selectedStrokeLayer: Layer = useCallback((x, y) => (set.has(coordsToId(x, y)) ? { color: '#ff0044', scale: 1.4 } : null), [set])\n    const selectedFillLayer: Layer = useCallback((x, y) => (set.has(coordsToId(x, y)) ? { color: '#ff9990', scale: 1.2 } : null), [set])\n    const [x, y] = useMemo(() => (selection ? getCenter(selection) : [0, 0]), [selection])\n\n    return <Atlas x={x} y={y} layers={[selectedStrokeLayer, selectedFillLayer]} width={48} height={48} size={9} isDraggable={false} />\n  } else if (address) {\n    return <Profile address={address!} size=\"huge\" imageOnly />\n  } else if (collectionId) {\n    return <CollectionImage collectionId={collectionId} />\n  } else if (item) {\n    return <ItemImage item={item} />\n  } else if (slotsToyBuy) {\n    return <div className=\"slot-image\" />\n  } else {\n    return null\n  }\n}\n\nconst TransactionDetail = (props: Props) => {\n  const { text, tx } = props\n\n  return (\n    <div className=\"TransactionDetail\">\n      <div className=\"left\">\n        <div className=\"image\">\n          <Image {...props} />\n        </div>\n        <div className=\"text\">\n          <div className=\"description\">{text}</div>\n          <div className=\"timestamp\">{formatDistanceToNow(tx.timestamp)}.</div>\n        </div>\n      </div>\n      <div className=\"right\">\n        <a href={getHref(tx)} className={tx.status ? 'status ' + tx.status : 'status'} target=\"_blank\" rel=\"noopener noreferrer\">\n          <div className=\"description\">{tx.status || t('global.loading')}</div>\n          {isPending(tx.status) ? (\n            <div className=\"spinner\">\n              <Loader active size=\"mini\" />\n            </div>\n          ) : null}\n          {tx.status === TransactionStatus.REVERTED ? <Icon name=\"warning sign\" /> : null}\n          {tx.status === TransactionStatus.CONFIRMED || tx.status === TransactionStatus.REPLACED ? <Icon name=\"check\" /> : null}\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default React.memo(TransactionDetail)\n"]},"metadata":{},"sourceType":"module"}