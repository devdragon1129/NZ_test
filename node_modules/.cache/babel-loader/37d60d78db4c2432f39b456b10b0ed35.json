{"ast":null,"code":"import { Mesh } from \"../mesh\";\nimport { VertexData } from \"../mesh.vertexData\";\n\nVertexData.CreateTiledPlane = function (options) {\n  var flipTile = options.pattern || Mesh.NO_FLIP;\n  var tileWidth = options.tileWidth || options.tileSize || 1;\n  var tileHeight = options.tileHeight || options.tileSize || 1;\n  var alignH = options.alignHorizontal || 0;\n  var alignV = options.alignVertical || 0;\n  var width = options.width || options.size || 1;\n  var tilesX = Math.floor(width / tileWidth);\n  var offsetX = width - tilesX * tileWidth;\n  var height = options.height || options.size || 1;\n  var tilesY = Math.floor(height / tileHeight);\n  var offsetY = height - tilesY * tileHeight;\n  var halfWidth = tileWidth * tilesX / 2;\n  var halfHeight = tileHeight * tilesY / 2;\n  var adjustX = 0;\n  var adjustY = 0;\n  var startX = 0;\n  var startY = 0;\n  var endX = 0;\n  var endY = 0; //Part Tiles\n\n  if (offsetX > 0 || offsetY > 0) {\n    startX = -halfWidth;\n    startY = -halfHeight;\n    var endX = halfWidth;\n    var endY = halfHeight;\n\n    switch (alignH) {\n      case Mesh.CENTER:\n        offsetX /= 2;\n        startX -= offsetX;\n        endX += offsetX;\n        break;\n\n      case Mesh.LEFT:\n        endX += offsetX;\n        adjustX = -offsetX / 2;\n        break;\n\n      case Mesh.RIGHT:\n        startX -= offsetX;\n        adjustX = offsetX / 2;\n        break;\n    }\n\n    switch (alignV) {\n      case Mesh.CENTER:\n        offsetY /= 2;\n        startY -= offsetY;\n        endY += offsetY;\n        break;\n\n      case Mesh.BOTTOM:\n        endY += offsetY;\n        adjustY = -offsetY / 2;\n        break;\n\n      case Mesh.TOP:\n        startY -= offsetY;\n        adjustY = offsetY / 2;\n        break;\n    }\n  }\n\n  var positions = [];\n  var normals = [];\n  var uvBase = [];\n  uvBase[0] = [0, 0, 1, 0, 1, 1, 0, 1];\n  uvBase[1] = [0, 0, 1, 0, 1, 1, 0, 1];\n\n  if (flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.ROTATE_ROW) {\n    uvBase[1] = [1, 1, 0, 1, 0, 0, 1, 0];\n  }\n\n  if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.FLIP_ROW) {\n    uvBase[1] = [1, 0, 0, 0, 0, 1, 1, 1];\n  }\n\n  if (flipTile === Mesh.FLIP_N_ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\n    uvBase[1] = [0, 1, 1, 1, 1, 0, 0, 0];\n  }\n\n  var uvs = [];\n  var colors = [];\n  var indices = [];\n  var index = 0;\n\n  for (var y = 0; y < tilesY; y++) {\n    for (var x = 0; x < tilesX; x++) {\n      positions.push(-halfWidth + x * tileWidth + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\n      positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\n      positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\n      positions.push(-halfWidth + x * tileWidth + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\n      indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\n\n      if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_TILE) {\n        uvs = uvs.concat(uvBase[(x % 2 + y % 2) % 2]);\n      } else if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\n        uvs = uvs.concat(uvBase[y % 2]);\n      } else {\n        uvs = uvs.concat(uvBase[0]);\n      }\n\n      colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n      normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\n      index += 4;\n    }\n  } //Part Tiles\n\n\n  if (offsetX > 0 || offsetY > 0) {\n    var partialBottomRow = offsetY > 0 && (alignV === Mesh.CENTER || alignV === Mesh.TOP);\n    var partialTopRow = offsetY > 0 && (alignV === Mesh.CENTER || alignV === Mesh.BOTTOM);\n    var partialLeftCol = offsetX > 0 && (alignH === Mesh.CENTER || alignH === Mesh.RIGHT);\n    var partialRightCol = offsetX > 0 && (alignH === Mesh.CENTER || alignH === Mesh.LEFT);\n    var uvPart = [];\n    var a, b, c, d; //corners\n\n    if (partialBottomRow && partialLeftCol) {\n      //bottom left corner\n      positions.push(startX + adjustX, startY + adjustY, 0);\n      positions.push(-halfWidth + adjustX, startY + adjustY, 0);\n      positions.push(-halfWidth + adjustX, startY + offsetY + adjustY, 0);\n      positions.push(startX + adjustX, startY + offsetY + adjustY, 0);\n      indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\n      index += 4;\n      a = 1 - offsetX / tileWidth;\n      b = 1 - offsetY / tileHeight;\n      c = 1;\n      d = 1;\n      uvPart = [a, b, c, b, c, d, a, d];\n\n      if (flipTile === Mesh.ROTATE_ROW) {\n        uvPart = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\n      }\n\n      if (flipTile === Mesh.FLIP_ROW) {\n        uvPart = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\n      }\n\n      if (flipTile === Mesh.FLIP_N_ROTATE_ROW) {\n        uvPart = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\n      }\n\n      uvs = uvs.concat(uvPart);\n      colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n      normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\n    }\n\n    if (partialBottomRow && partialRightCol) {\n      //bottom right corner\n      positions.push(halfWidth + adjustX, startY + adjustY, 0);\n      positions.push(endX + adjustX, startY + adjustY, 0);\n      positions.push(endX + adjustX, startY + offsetY + adjustY, 0);\n      positions.push(halfWidth + adjustX, startY + offsetY + adjustY, 0);\n      indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\n      index += 4;\n      a = 0;\n      b = 1 - offsetY / tileHeight;\n      c = offsetX / tileWidth;\n      d = 1;\n      uvPart = [a, b, c, b, c, d, a, d];\n\n      if (flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.ROTATE_TILE && tilesX % 2 === 0) {\n        uvPart = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\n      }\n\n      if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.FLIP_TILE && tilesX % 2 === 0) {\n        uvPart = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\n      }\n\n      if (flipTile === Mesh.FLIP_N_ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_TILE && tilesX % 2 === 0) {\n        uvPart = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\n      }\n\n      uvs = uvs.concat(uvPart);\n      colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n      normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\n    }\n\n    if (partialTopRow && partialLeftCol) {\n      //top left corner\n      positions.push(startX + adjustX, halfHeight + adjustY, 0);\n      positions.push(-halfWidth + adjustX, halfHeight + adjustY, 0);\n      positions.push(-halfWidth + adjustX, endY + adjustY, 0);\n      positions.push(startX + adjustX, endY + adjustY, 0);\n      indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\n      index += 4;\n      a = 1 - offsetX / tileWidth;\n      b = 0;\n      c = 1;\n      d = offsetY / tileHeight;\n      uvPart = [a, b, c, b, c, d, a, d];\n\n      if (flipTile === Mesh.ROTATE_ROW && tilesY % 2 === 1 || flipTile === Mesh.ROTATE_TILE && tilesY % 1 === 0) {\n        uvPart = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\n      }\n\n      if (flipTile === Mesh.FLIP_ROW && tilesY % 2 === 1 || flipTile === Mesh.FLIP_TILE && tilesY % 2 === 0) {\n        uvPart = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\n      }\n\n      if (flipTile === Mesh.FLIP_N_ROTATE_ROW && tilesY % 2 === 1 || flipTile === Mesh.FLIP_N_ROTATE_TILE && tilesY % 2 === 0) {\n        uvPart = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\n      }\n\n      uvs = uvs.concat(uvPart);\n      colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n      normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\n    }\n\n    if (partialTopRow && partialRightCol) {\n      //top right corner\n      positions.push(halfWidth + adjustX, halfHeight + adjustY, 0);\n      positions.push(endX + adjustX, halfHeight + adjustY, 0);\n      positions.push(endX + adjustX, endY + adjustY, 0);\n      positions.push(halfWidth + adjustX, endY + adjustY, 0);\n      indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\n      index += 4;\n      a = 0;\n      b = 0;\n      c = offsetX / tileWidth;\n      d = offsetY / tileHeight;\n      uvPart = [a, b, c, b, c, d, a, d];\n\n      if (flipTile === Mesh.ROTATE_ROW && tilesY % 2 === 1 || flipTile === Mesh.ROTATE_TILE && (tilesY + tilesX) % 2 === 1) {\n        uvPart = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\n      }\n\n      if (flipTile === Mesh.FLIP_ROW && tilesY % 2 === 1 || flipTile === Mesh.FLIP_TILE && (tilesY + tilesX) % 2 === 1) {\n        uvPart = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\n      }\n\n      if (flipTile === Mesh.FLIP_N_ROTATE_ROW && tilesY % 2 === 1 || flipTile === Mesh.FLIP_N_ROTATE_TILE && (tilesY + tilesX) % 2 === 1) {\n        uvPart = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\n      }\n\n      uvs = uvs.concat(uvPart);\n      colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n      normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\n    } //part rows\n\n\n    if (partialBottomRow) {\n      var uvBaseBR = [];\n      a = 0;\n      b = 1 - offsetY / tileHeight;\n      c = 1;\n      d = 1;\n      uvBaseBR[0] = [a, b, c, b, c, d, a, d];\n      uvBaseBR[1] = [a, b, c, b, c, d, a, d];\n\n      if (flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.ROTATE_ROW) {\n        uvBaseBR[1] = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\n      }\n\n      if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.FLIP_ROW) {\n        uvBaseBR[1] = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\n      }\n\n      if (flipTile === Mesh.FLIP_N_ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\n        uvBaseBR[1] = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\n      }\n\n      for (var x = 0; x < tilesX; x++) {\n        positions.push(-halfWidth + x * tileWidth + adjustX, startY + adjustY, 0);\n        positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, startY + adjustY, 0);\n        positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, startY + offsetY + adjustY, 0);\n        positions.push(-halfWidth + x * tileWidth + adjustX, startY + offsetY + adjustY, 0);\n        indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\n        index += 4;\n\n        if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_TILE) {\n          uvs = uvs.concat(uvBaseBR[(x + 1) % 2]);\n        } else if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\n          uvs = uvs.concat(uvBaseBR[1]);\n        } else {\n          uvs = uvs.concat(uvBaseBR[0]);\n        }\n\n        colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n        normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\n      }\n    }\n\n    if (partialTopRow) {\n      var uvBaseTR = [];\n      a = 0;\n      b = 0;\n      c = 1;\n      d = offsetY / tileHeight;\n      uvBaseTR[0] = [a, b, c, b, c, d, a, d];\n      uvBaseTR[1] = [a, b, c, b, c, d, a, d];\n\n      if (flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.ROTATE_ROW) {\n        uvBaseTR[1] = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\n      }\n\n      if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.FLIP_ROW) {\n        uvBaseTR[1] = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\n      }\n\n      if (flipTile === Mesh.FLIP_N_ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\n        uvBaseTR[1] = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\n      }\n\n      for (var x = 0; x < tilesX; x++) {\n        positions.push(-halfWidth + x * tileWidth + adjustX, endY - offsetY + adjustY, 0);\n        positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, endY - offsetY + adjustY, 0);\n        positions.push(-halfWidth + (x + 1) * tileWidth + adjustX, endY + adjustY, 0);\n        positions.push(-halfWidth + x * tileWidth + adjustX, endY + adjustY, 0);\n        indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\n        index += 4;\n\n        if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_TILE) {\n          uvs = uvs.concat(uvBaseTR[(x + tilesY) % 2]);\n        } else if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\n          uvs = uvs.concat(uvBaseTR[tilesY % 2]);\n        } else {\n          uvs = uvs.concat(uvBaseTR[0]);\n        }\n\n        colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n        normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\n      }\n    }\n\n    if (partialLeftCol) {\n      var uvBaseLC = [];\n      a = 1 - offsetX / tileWidth;\n      b = 0;\n      c = 1;\n      d = 1;\n      uvBaseLC[0] = [a, b, c, b, c, d, a, d];\n      uvBaseLC[1] = [a, b, c, b, c, d, a, d];\n\n      if (flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.ROTATE_ROW) {\n        uvBaseLC[1] = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\n      }\n\n      if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.FLIP_ROW) {\n        uvBaseLC[1] = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\n      }\n\n      if (flipTile === Mesh.FLIP_N_ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\n        uvBaseLC[1] = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\n      }\n\n      for (var y = 0; y < tilesY; y++) {\n        positions.push(startX + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\n        positions.push(startX + offsetX + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\n        positions.push(startX + offsetX + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\n        positions.push(startX + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\n        indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\n        index += 4;\n\n        if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_TILE) {\n          uvs = uvs.concat(uvBaseLC[(y + 1) % 2]);\n        } else if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\n          uvs = uvs.concat(uvBaseLC[y % 2]);\n        } else {\n          uvs = uvs.concat(uvBaseLC[0]);\n        }\n\n        colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n        normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\n      }\n    }\n\n    if (partialRightCol) {\n      var uvBaseRC = [];\n      a = 0;\n      b = 0;\n      c = offsetX / tileHeight;\n      d = 1;\n      uvBaseRC[0] = [a, b, c, b, c, d, a, d];\n      uvBaseRC[1] = [a, b, c, b, c, d, a, d];\n\n      if (flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.ROTATE_ROW) {\n        uvBaseRC[1] = [1 - a, 1 - b, 1 - c, 1 - b, 1 - c, 1 - d, 1 - a, 1 - d];\n      }\n\n      if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.FLIP_ROW) {\n        uvBaseRC[1] = [1 - a, b, 1 - c, b, 1 - c, d, 1 - a, d];\n      }\n\n      if (flipTile === Mesh.FLIP_N_ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\n        uvBaseRC[1] = [a, 1 - b, c, 1 - b, c, 1 - d, a, 1 - d];\n      }\n\n      for (var y = 0; y < tilesY; y++) {\n        positions.push(endX - offsetX + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\n        positions.push(endX + adjustX, -halfHeight + y * tileHeight + adjustY, 0);\n        positions.push(endX + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\n        positions.push(endX - offsetX + adjustX, -halfHeight + (y + 1) * tileHeight + adjustY, 0);\n        indices.push(index, index + 1, index + 3, index + 1, index + 2, index + 3);\n        index += 4;\n\n        if (flipTile === Mesh.FLIP_TILE || flipTile === Mesh.ROTATE_TILE || flipTile === Mesh.FLIP_N_ROTATE_TILE) {\n          uvs = uvs.concat(uvBaseRC[(y + tilesX) % 2]);\n        } else if (flipTile === Mesh.FLIP_ROW || flipTile === Mesh.ROTATE_ROW || flipTile === Mesh.FLIP_N_ROTATE_ROW) {\n          uvs = uvs.concat(uvBaseRC[y % 2]);\n        } else {\n          uvs = uvs.concat(uvBaseRC[0]);\n        }\n\n        colors.push(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\n        normals.push(0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1);\n      }\n    }\n  }\n\n  var sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE; // sides\n\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs); // Result\n\n\n  var vertexData = new VertexData();\n  vertexData.indices = indices;\n  vertexData.positions = positions;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n  var totalColors = sideOrientation === VertexData.DOUBLESIDE ? colors.concat(colors) : colors;\n  vertexData.colors = totalColors;\n  return vertexData;\n};\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\n\n\nvar TiledPlaneBuilder =\n/** @class */\nfunction () {\n  function TiledPlaneBuilder() {}\n  /**\r\n   * Creates a tiled plane mesh\r\n   * * The parameter `pattern` will, depending on value, do nothing or\r\n   * * * flip (reflect about central vertical) alternate tiles across and up\r\n   * * * flip every tile on alternate rows\r\n   * * * rotate (180 degs) alternate tiles across and up\r\n   * * * rotate every tile on alternate rows\r\n   * * * flip and rotate alternate tiles across and up\r\n   * * * flip and rotate every tile on alternate rows\r\n   * * The parameter `tileSize` sets the size (float) of each tile side (default 1)\r\n   * * You can set some different tile dimensions by using the parameters `tileWidth` and `tileHeight` (both by default have the same value of `tileSize`)\r\n   * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n   * * sideOrientation optional and takes the values : Mesh.FRONTSIDE (default), Mesh.BACKSIDE or Mesh.DOUBLESIDE\r\n   * * frontUvs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the front side, optional, default vector4 (0, 0, 1, 1)\r\n   * * backUVs only usable when you create a double-sided mesh, used to choose what parts of the texture image to crop and apply on the back side, optional, default vector4 (0, 0, 1, 1)\r\n   * @see https://doc.babylonjs.com/how_to/set_shapes#box\r\n   * @param name defines the name of the mesh\r\n   * @param options defines the options used to create the mesh\r\n   * @param scene defines the hosting scene\r\n   * @returns the box mesh\r\n   */\n\n\n  TiledPlaneBuilder.CreateTiledPlane = function (name, options, scene) {\n    if (scene === void 0) {\n      scene = null;\n    }\n\n    var plane = new Mesh(name, scene);\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n    plane._originalBuilderSideOrientation = options.sideOrientation;\n    var vertexData = VertexData.CreateTiledPlane(options);\n    vertexData.applyToMesh(plane, options.updatable);\n    return plane;\n  };\n\n  return TiledPlaneBuilder;\n}();\n\nexport { TiledPlaneBuilder };","map":null,"metadata":{},"sourceType":"module"}