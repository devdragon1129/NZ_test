{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = getMenuOptions;\n\nvar _some2 = _interopRequireDefault(require(\"lodash/some\"));\n\nvar _escapeRegExp2 = _interopRequireDefault(require(\"lodash/escapeRegExp\"));\n\nvar _deburr2 = _interopRequireDefault(require(\"lodash/deburr\"));\n\nvar _isFunction2 = _interopRequireDefault(require(\"lodash/isFunction\"));\n\nvar _includes2 = _interopRequireDefault(require(\"lodash/includes\"));\n\nvar _filter2 = _interopRequireDefault(require(\"lodash/filter\"));\n\nvar _react = _interopRequireDefault(require(\"react\")); // There are times when we need to calculate the options based on a value\n// that hasn't yet been persisted to state.\n\n\nfunction getMenuOptions(config) {\n  var additionLabel = config.additionLabel,\n      additionPosition = config.additionPosition,\n      allowAdditions = config.allowAdditions,\n      deburr = config.deburr,\n      multiple = config.multiple,\n      options = config.options,\n      search = config.search,\n      searchQuery = config.searchQuery,\n      value = config.value;\n  var filteredOptions = options; // filter out active options\n\n  if (multiple) {\n    filteredOptions = (0, _filter2.default)(filteredOptions, function (opt) {\n      return !(0, _includes2.default)(value, opt.value);\n    });\n  } // filter by search query\n\n\n  if (search && searchQuery) {\n    if ((0, _isFunction2.default)(search)) {\n      filteredOptions = search(filteredOptions, searchQuery);\n    } else {\n      // remove diacritics on search input and options, if deburr prop is set\n      var strippedQuery = deburr ? (0, _deburr2.default)(searchQuery) : searchQuery;\n      var re = new RegExp((0, _escapeRegExp2.default)(strippedQuery), 'i');\n      filteredOptions = (0, _filter2.default)(filteredOptions, function (opt) {\n        return re.test(deburr ? (0, _deburr2.default)(opt.text) : opt.text);\n      });\n    }\n  } // insert the \"add\" item\n\n\n  if (allowAdditions && search && searchQuery && !(0, _some2.default)(filteredOptions, {\n    text: searchQuery\n  })) {\n    var additionLabelElement = /*#__PURE__*/_react.default.isValidElement(additionLabel) ? /*#__PURE__*/_react.default.cloneElement(additionLabel, {\n      key: 'addition-label'\n    }) : additionLabel || '';\n    var addItem = {\n      key: 'addition',\n      // by using an array, we can pass multiple elements, but when doing so\n      // we must specify a `key` for React to know which one is which\n      text: [additionLabelElement, /*#__PURE__*/_react.default.createElement(\"b\", {\n        key: \"addition-query\"\n      }, searchQuery)],\n      value: searchQuery,\n      className: 'addition',\n      'data-additional': true\n    };\n    if (additionPosition === 'top') filteredOptions.unshift(addItem);else filteredOptions.push(addItem);\n  }\n\n  return filteredOptions;\n}\n\ngetMenuOptions.handledProps = [];","map":null,"metadata":{},"sourceType":"script"}