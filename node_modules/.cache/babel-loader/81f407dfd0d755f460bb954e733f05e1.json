{"ast":null,"code":"import { Tools } from \"../../Misc/tools\";\n/**\r\n * This represents a set of one or more post processes in Babylon.\r\n * A post process can be used to apply a shader to a texture after it is rendered.\r\n * @example https://doc.babylonjs.com/how_to/how_to_use_postprocessrenderpipeline\r\n */\n\nvar PostProcessRenderEffect =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a post process render effect.\r\n   * A post process can be used to apply a shader to a texture after it is rendered.\r\n   * @param engine The engine the effect is tied to\r\n   * @param name The name of the effect\r\n   * @param getPostProcesses A function that returns a set of post processes which the effect will run in order to be run.\r\n   * @param singleInstance False if this post process can be run on multiple cameras. (default: true)\r\n   */\n  function PostProcessRenderEffect(engine, name, getPostProcesses, singleInstance) {\n    this._name = name;\n    this._singleInstance = singleInstance || true;\n    this._getPostProcesses = getPostProcesses;\n    this._cameras = {};\n    this._indicesForCamera = {};\n    this._postProcesses = {};\n  }\n\n  Object.defineProperty(PostProcessRenderEffect.prototype, \"isSupported\", {\n    /**\r\n     * Checks if all the post processes in the effect are supported.\r\n     */\n    get: function get() {\n      for (var index in this._postProcesses) {\n        if (this._postProcesses.hasOwnProperty(index)) {\n          var pps = this._postProcesses[index];\n\n          for (var ppIndex = 0; ppIndex < pps.length; ppIndex++) {\n            if (!pps[ppIndex].isSupported) {\n              return false;\n            }\n          }\n        }\n      }\n\n      return true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Updates the current state of the effect\r\n   * @hidden\r\n   */\n\n  PostProcessRenderEffect.prototype._update = function () {};\n  /**\r\n   * Attaches the effect on cameras\r\n   * @param cameras The camera to attach to.\r\n   * @hidden\r\n   */\n\n\n  PostProcessRenderEffect.prototype._attachCameras = function (cameras) {\n    var _this = this;\n\n    var cameraKey;\n    var cams = Tools.MakeArray(cameras || this._cameras);\n\n    if (!cams) {\n      return;\n    }\n\n    for (var i = 0; i < cams.length; i++) {\n      var camera = cams[i];\n\n      if (!camera) {\n        continue;\n      }\n\n      var cameraName = camera.name;\n\n      if (this._singleInstance) {\n        cameraKey = 0;\n      } else {\n        cameraKey = cameraName;\n      }\n\n      if (!this._postProcesses[cameraKey]) {\n        var postProcess = this._getPostProcesses();\n\n        if (postProcess) {\n          this._postProcesses[cameraKey] = Array.isArray(postProcess) ? postProcess : [postProcess];\n        }\n      }\n\n      if (!this._indicesForCamera[cameraName]) {\n        this._indicesForCamera[cameraName] = [];\n      }\n\n      this._postProcesses[cameraKey].forEach(function (postProcess) {\n        var index = camera.attachPostProcess(postProcess);\n\n        _this._indicesForCamera[cameraName].push(index);\n      });\n\n      if (!this._cameras[cameraName]) {\n        this._cameras[cameraName] = camera;\n      }\n    }\n  };\n  /**\r\n   * Detatches the effect on cameras\r\n   * @param cameras The camera to detatch from.\r\n   * @hidden\r\n   */\n\n\n  PostProcessRenderEffect.prototype._detachCameras = function (cameras) {\n    var cams = Tools.MakeArray(cameras || this._cameras);\n\n    if (!cams) {\n      return;\n    }\n\n    for (var i = 0; i < cams.length; i++) {\n      var camera = cams[i];\n      var cameraName = camera.name;\n      var postProcesses = this._postProcesses[this._singleInstance ? 0 : cameraName];\n\n      if (postProcesses) {\n        postProcesses.forEach(function (postProcess) {\n          camera.detachPostProcess(postProcess);\n        });\n      }\n\n      if (this._cameras[cameraName]) {\n        this._cameras[cameraName] = null;\n      }\n    }\n  };\n  /**\r\n   * Enables the effect on given cameras\r\n   * @param cameras The camera to enable.\r\n   * @hidden\r\n   */\n\n\n  PostProcessRenderEffect.prototype._enable = function (cameras) {\n    var _this = this;\n\n    var cams = Tools.MakeArray(cameras || this._cameras);\n\n    if (!cams) {\n      return;\n    }\n\n    for (var i = 0; i < cams.length; i++) {\n      var camera = cams[i];\n      var cameraName = camera.name;\n\n      for (var j = 0; j < this._indicesForCamera[cameraName].length; j++) {\n        if (camera._postProcesses[this._indicesForCamera[cameraName][j]] === undefined || camera._postProcesses[this._indicesForCamera[cameraName][j]] === null) {\n          this._postProcesses[this._singleInstance ? 0 : cameraName].forEach(function (postProcess) {\n            cams[i].attachPostProcess(postProcess, _this._indicesForCamera[cameraName][j]);\n          });\n        }\n      }\n    }\n  };\n  /**\r\n   * Disables the effect on the given cameras\r\n   * @param cameras The camera to disable.\r\n   * @hidden\r\n   */\n\n\n  PostProcessRenderEffect.prototype._disable = function (cameras) {\n    var cams = Tools.MakeArray(cameras || this._cameras);\n\n    if (!cams) {\n      return;\n    }\n\n    for (var i = 0; i < cams.length; i++) {\n      var camera = cams[i];\n      var cameraName = camera.name;\n\n      this._postProcesses[this._singleInstance ? 0 : cameraName].forEach(function (postProcess) {\n        camera.detachPostProcess(postProcess);\n      });\n    }\n  };\n  /**\r\n   * Gets a list of the post processes contained in the effect.\r\n   * @param camera The camera to get the post processes on.\r\n   * @returns The list of the post processes in the effect.\r\n   */\n\n\n  PostProcessRenderEffect.prototype.getPostProcesses = function (camera) {\n    if (this._singleInstance) {\n      return this._postProcesses[0];\n    } else {\n      if (!camera) {\n        return null;\n      }\n\n      return this._postProcesses[camera.name];\n    }\n  };\n\n  return PostProcessRenderEffect;\n}();\n\nexport { PostProcessRenderEffect };","map":null,"metadata":{},"sourceType":"module"}