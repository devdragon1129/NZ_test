{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Contract } from 'web3x/contract';\nimport abi from './ERC20Abi';\nexport var ERC20 = /*#__PURE__*/function (_Contract) {\n  _inherits(ERC20, _Contract);\n\n  function ERC20(eth, address, options) {\n    _classCallCheck(this, ERC20);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ERC20).call(this, eth, abi, address, options));\n  }\n\n  return ERC20;\n}(Contract);\nexport var ERC20Abi = abi;","map":{"version":3,"sources":["/opt/work/NZ_test/src/contracts/ERC20.ts"],"names":["Contract","abi","ERC20","eth","address","options","ERC20Abi"],"mappings":";;;;AAGA,SAASA,QAAT,QAAoF,gBAApF;AAEA,OAAOC,GAAP,MAAgB,YAAhB;AAmFA,WAAaC,KAAb;AAAA;;AACE,iBAAYC,GAAZ,EAAsBC,OAAtB,EAAyCC,OAAzC,EAAoE;AAAA;;AAAA,8EAC5DF,GAD4D,EACvDF,GADuD,EAClDG,OADkD,EACzCC,OADyC;AAEnE;;AAHH;AAAA,EAA2BL,QAA3B;AAKA,OAAO,IAAMM,QAAQ,GAAGL,GAAjB","sourcesContent":["import BN from 'bn.js'\nimport { Address } from 'web3x/address'\nimport { EventLog, TransactionReceipt } from 'web3x/formatters'\nimport { Contract, ContractOptions, TxCall, TxSend, EventSubscriptionFactory } from 'web3x/contract'\nimport { Eth } from 'web3x/eth'\nimport abi from './ERC20Abi'\nexport type MintEvent = {\n  to: Address\n  amount: string\n}\nexport type MintFinishedEvent = {}\nexport type PauseEvent = {}\nexport type UnpauseEvent = {}\nexport type BurnEvent = {\n  burner: Address\n  value: string\n}\nexport type ApprovalEvent = {\n  owner: Address\n  spender: Address\n  value: string\n}\nexport type TransferEvent = {\n  from: Address\n  to: Address\n  value: string\n}\nexport interface MintEventLog extends EventLog<MintEvent, 'Mint'> {}\nexport interface MintFinishedEventLog extends EventLog<MintFinishedEvent, 'MintFinished'> {}\nexport interface PauseEventLog extends EventLog<PauseEvent, 'Pause'> {}\nexport interface UnpauseEventLog extends EventLog<UnpauseEvent, 'Unpause'> {}\nexport interface BurnEventLog extends EventLog<BurnEvent, 'Burn'> {}\nexport interface ApprovalEventLog extends EventLog<ApprovalEvent, 'Approval'> {}\nexport interface TransferEventLog extends EventLog<TransferEvent, 'Transfer'> {}\ninterface ERC20Events {\n  Mint: EventSubscriptionFactory<MintEventLog>\n  MintFinished: EventSubscriptionFactory<MintFinishedEventLog>\n  Pause: EventSubscriptionFactory<PauseEventLog>\n  Unpause: EventSubscriptionFactory<UnpauseEventLog>\n  Burn: EventSubscriptionFactory<BurnEventLog>\n  Approval: EventSubscriptionFactory<ApprovalEventLog>\n  Transfer: EventSubscriptionFactory<TransferEventLog>\n}\ninterface ERC20EventLogs {\n  Mint: MintEventLog\n  MintFinished: MintFinishedEventLog\n  Pause: PauseEventLog\n  Unpause: UnpauseEventLog\n  Burn: BurnEventLog\n  Approval: ApprovalEventLog\n  Transfer: TransferEventLog\n}\ninterface ERC20TxEventLogs {\n  Mint: MintEventLog[]\n  MintFinished: MintFinishedEventLog[]\n  Pause: PauseEventLog[]\n  Unpause: UnpauseEventLog[]\n  Burn: BurnEventLog[]\n  Approval: ApprovalEventLog[]\n  Transfer: TransferEventLog[]\n}\nexport interface ERC20TransactionReceipt extends TransactionReceipt<ERC20TxEventLogs> {}\ninterface ERC20Methods {\n  mintingFinished(): TxCall<boolean>\n  name(): TxCall<string>\n  approve(_spender: Address, _value: number | string | BN): TxSend<ERC20TransactionReceipt>\n  totalSupply(): TxCall<string>\n  transferFrom(_from: Address, _to: Address, _value: number | string | BN): TxSend<ERC20TransactionReceipt>\n  decimals(): TxCall<string>\n  unpause(): TxSend<ERC20TransactionReceipt>\n  mint(_to: Address, _amount: number | string | BN): TxSend<ERC20TransactionReceipt>\n  burn(_value: number | string | BN): TxSend<ERC20TransactionReceipt>\n  paused(): TxCall<boolean>\n  balanceOf(_owner: Address): TxCall<string>\n  finishMinting(): TxSend<ERC20TransactionReceipt>\n  pause(): TxSend<ERC20TransactionReceipt>\n  owner(): TxCall<Address>\n  symbol(): TxCall<string>\n  transfer(_to: Address, _value: number | string | BN): TxSend<ERC20TransactionReceipt>\n  allowance(_owner: Address, _spender: Address): TxCall<string>\n  setBalance(to: Address, amount: number | string | BN): TxSend<ERC20TransactionReceipt>\n  transferOwnership(newOwner: Address): TxSend<ERC20TransactionReceipt>\n}\nexport interface ERC20Definition {\n  methods: ERC20Methods\n  events: ERC20Events\n  eventLogs: ERC20EventLogs\n}\nexport class ERC20 extends Contract<ERC20Definition> {\n  constructor(eth: Eth, address?: Address, options?: ContractOptions) {\n    super(eth, abi, address, options)\n  }\n}\nexport const ERC20Abi = abi\n"]},"metadata":{},"sourceType":"module"}