{"ast":null,"code":"import { ThinEngine } from \"../../Engines/thinEngine\";\nimport { InternalTexture, InternalTextureSource } from '../../Materials/Textures/internalTexture';\n\nThinEngine.prototype.createDynamicTexture = function (width, height, generateMipMaps, samplingMode) {\n  var texture = new InternalTexture(this, InternalTextureSource.Dynamic);\n  texture.baseWidth = width;\n  texture.baseHeight = height;\n\n  if (generateMipMaps) {\n    width = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(width, this._caps.maxTextureSize) : width;\n    height = this.needPOTTextures ? ThinEngine.GetExponentOfTwo(height, this._caps.maxTextureSize) : height;\n  } //  this.resetTextureCache();\n\n\n  texture.width = width;\n  texture.height = height;\n  texture.isReady = false;\n  texture.generateMipMaps = generateMipMaps;\n  texture.samplingMode = samplingMode;\n  this.updateTextureSamplingMode(samplingMode, texture);\n\n  this._internalTexturesCache.push(texture);\n\n  return texture;\n};\n\nThinEngine.prototype.updateDynamicTexture = function (texture, source, invertY, premulAlpha, format, forceBindTexture) {\n  if (premulAlpha === void 0) {\n    premulAlpha = false;\n  }\n\n  if (forceBindTexture === void 0) {\n    forceBindTexture = false;\n  }\n\n  if (!texture) {\n    return;\n  }\n\n  var gl = this._gl;\n  var target = gl.TEXTURE_2D;\n\n  var wasPreviouslyBound = this._bindTextureDirectly(target, texture, true, forceBindTexture);\n\n  this._unpackFlipY(invertY === undefined ? texture.invertY : invertY);\n\n  if (premulAlpha) {\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 1);\n  }\n\n  var textureType = this._getWebGLTextureType(texture.type);\n\n  var glformat = this._getInternalFormat(format ? format : texture.format);\n\n  var internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, glformat);\n\n  gl.texImage2D(target, 0, internalFormat, glformat, textureType, source);\n\n  if (texture.generateMipMaps) {\n    gl.generateMipmap(target);\n  }\n\n  if (!wasPreviouslyBound) {\n    this._bindTextureDirectly(target, null);\n  }\n\n  if (premulAlpha) {\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\n  }\n\n  texture.isReady = true;\n};","map":null,"metadata":{},"sourceType":"module"}