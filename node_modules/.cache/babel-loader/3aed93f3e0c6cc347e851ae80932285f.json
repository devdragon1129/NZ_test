{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera\";\nimport { FreeCamera } from \"../../Cameras/freeCamera\";\nimport { Vector3 } from \"../../Maths/math.vector\";\nimport { Node } from \"../../node\"; // Side effect import to define the stereoscopic mode.\n\nimport \"../RigModes/stereoscopicRigMode\";\nNode.AddNodeConstructor(\"StereoscopicFreeCamera\", function (name, scene, options) {\n  return function () {\n    return new StereoscopicFreeCamera(name, Vector3.Zero(), options.interaxial_distance, options.isStereoscopicSideBySide, scene);\n  };\n});\n/**\r\n * Camera used to simulate stereoscopic rendering (based on FreeCamera)\r\n * @see https://doc.babylonjs.com/features/cameras\r\n */\n\nvar StereoscopicFreeCamera =\n/** @class */\nfunction (_super) {\n  __extends(StereoscopicFreeCamera, _super);\n  /**\r\n   * Creates a new StereoscopicFreeCamera\r\n   * @param name defines camera name\r\n   * @param position defines initial position\r\n   * @param interaxialDistance defines distance between each color axis\r\n   * @param isStereoscopicSideBySide defines is stereoscopic is done side by side or over under\r\n   * @param scene defines the hosting scene\r\n   */\n\n\n  function StereoscopicFreeCamera(name, position, interaxialDistance, isStereoscopicSideBySide, scene) {\n    var _this = _super.call(this, name, position, scene) || this;\n\n    _this.interaxialDistance = interaxialDistance;\n    _this.isStereoscopicSideBySide = isStereoscopicSideBySide;\n\n    _this.setCameraRigMode(isStereoscopicSideBySide ? Camera.RIG_MODE_STEREOSCOPIC_SIDEBYSIDE_PARALLEL : Camera.RIG_MODE_STEREOSCOPIC_OVERUNDER, {\n      interaxialDistance: interaxialDistance\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets camera class name\r\n   * @returns StereoscopicFreeCamera\r\n   */\n\n\n  StereoscopicFreeCamera.prototype.getClassName = function () {\n    return \"StereoscopicFreeCamera\";\n  };\n\n  return StereoscopicFreeCamera;\n}(FreeCamera);\n\nexport { StereoscopicFreeCamera };","map":null,"metadata":{},"sourceType":"module"}