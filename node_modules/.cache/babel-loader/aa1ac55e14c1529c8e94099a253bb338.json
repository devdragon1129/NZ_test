{"ast":null,"code":"import { Scene } from \"../scene\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { GamepadManager } from \"./gamepadManager\";\nimport { FreeCameraInputsManager } from \"../Cameras/freeCameraInputsManager\";\nimport { FreeCameraGamepadInput } from \"../Cameras/Inputs/freeCameraGamepadInput\";\nimport { ArcRotateCameraInputsManager } from \"../Cameras/arcRotateCameraInputsManager\";\nimport { ArcRotateCameraGamepadInput } from \"../Cameras/Inputs/arcRotateCameraGamepadInput\";\nObject.defineProperty(Scene.prototype, \"gamepadManager\", {\n  get: function get() {\n    if (!this._gamepadManager) {\n      this._gamepadManager = new GamepadManager(this);\n\n      var component = this._getComponent(SceneComponentConstants.NAME_GAMEPAD);\n\n      if (!component) {\n        component = new GamepadSystemSceneComponent(this);\n\n        this._addComponent(component);\n      }\n    }\n\n    return this._gamepadManager;\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\r\n * Adds a gamepad to the free camera inputs manager\r\n */\n\nFreeCameraInputsManager.prototype.addGamepad = function () {\n  this.add(new FreeCameraGamepadInput());\n  return this;\n};\n/**\r\n * Adds a gamepad to the arc rotate camera inputs manager\r\n */\n\n\nArcRotateCameraInputsManager.prototype.addGamepad = function () {\n  this.add(new ArcRotateCameraGamepadInput());\n  return this;\n};\n/**\r\n  * Defines the gamepad scene component responsible to manage gamepads in a given scene\r\n  */\n\n\nvar GamepadSystemSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function GamepadSystemSceneComponent(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_GAMEPAD;\n    this.scene = scene;\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  GamepadSystemSceneComponent.prototype.register = function () {\n    this.scene._beforeCameraUpdateStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERAUPDATE_GAMEPAD, this, this._beforeCameraUpdate);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  GamepadSystemSceneComponent.prototype.rebuild = function () {// Nothing to do for gamepads\n  };\n  /**\r\n   * Disposes the component and the associated ressources\r\n   */\n\n\n  GamepadSystemSceneComponent.prototype.dispose = function () {\n    var gamepadManager = this.scene._gamepadManager;\n\n    if (gamepadManager) {\n      gamepadManager.dispose();\n      this.scene._gamepadManager = null;\n    }\n  };\n\n  GamepadSystemSceneComponent.prototype._beforeCameraUpdate = function () {\n    var gamepadManager = this.scene._gamepadManager;\n\n    if (gamepadManager && gamepadManager._isMonitoring) {\n      gamepadManager._checkGamepadsStatus();\n    }\n  };\n\n  return GamepadSystemSceneComponent;\n}();\n\nexport { GamepadSystemSceneComponent };","map":null,"metadata":{},"sourceType":"module"}