{"ast":null,"code":"import { action } from 'typesafe-actions';\n// Login\nexport var LOGIN_REQUEST = '[Request] Login';\nexport var LOGIN_SUCCESS = '[Success] Login';\nexport var LOGIN_FAILURE = '[Failure] Login';\nexport var loginRequest = function loginRequest(providerType) {\n  var restoreSession = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return action(LOGIN_REQUEST, {\n    restoreSession: restoreSession,\n    providerType: providerType\n  });\n};\nexport var loginSuccess = function loginSuccess(wallet, identity) {\n  return action(LOGIN_SUCCESS, {\n    wallet: wallet,\n    identity: identity\n  });\n};\nexport var loginFailure = function loginFailure(error) {\n  return action(LOGIN_FAILURE, {\n    error: error\n  });\n};\n// Logout\nexport var LOGOUT = 'Logout';\nexport var logout = function logout() {\n  return action(LOGOUT);\n};\n// Generate identity\nexport var GENERATE_IDENTITY_REQUEST = '[Request] Generate Identity';\nexport var GENERATE_IDENTITY_SUCCESS = '[Success] Generate Identity';\nexport var GENERATE_IDENTITY_FAILURE = '[Failure] Generate Identity';\nexport var generateIdentityRequest = function generateIdentityRequest(address) {\n  return action(GENERATE_IDENTITY_REQUEST, {\n    address: address\n  });\n};\nexport var generateIdentitySuccess = function generateIdentitySuccess(address, identity) {\n  return action(GENERATE_IDENTITY_SUCCESS, {\n    address: address,\n    identity: identity\n  });\n};\nexport var generateIdentityFailure = function generateIdentityFailure(address, error) {\n  return action(GENERATE_IDENTITY_FAILURE, {\n    address: address,\n    error: error\n  });\n};\n// Destroy identity\nexport var DESTROY_IDENTITY = 'Destroy Identity';\nexport var destroyIdentity = function destroyIdentity(address) {\n  return action(DESTROY_IDENTITY, {\n    address: address\n  });\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/identity/actions.ts"],"names":["action","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","loginRequest","providerType","restoreSession","loginSuccess","wallet","identity","loginFailure","error","LOGOUT","logout","GENERATE_IDENTITY_REQUEST","GENERATE_IDENTITY_SUCCESS","GENERATE_IDENTITY_FAILURE","generateIdentityRequest","address","generateIdentitySuccess","generateIdentityFailure","DESTROY_IDENTITY","destroyIdentity"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AAKA;AAEA,OAAO,IAAMC,aAAa,GAAG,iBAAtB;AACP,OAAO,IAAMC,aAAa,GAAG,iBAAtB;AACP,OAAO,IAAMC,aAAa,GAAG,iBAAtB;AAEP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,YAAD;AAAA,MAA6BC,cAA7B,uEAA8C,KAA9C;AAAA,SAAwDN,MAAM,CAACC,aAAD,EAAgB;AAAEK,IAAAA,cAAc,EAAdA,cAAF;AAAkBD,IAAAA,YAAY,EAAZA;AAAlB,GAAhB,CAA9D;AAAA,CAArB;AACP,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,MAAD,EAAiBC,QAAjB;AAAA,SAA4CT,MAAM,CAACE,aAAD,EAAgB;AAAEM,IAAAA,MAAM,EAANA,MAAF;AAAUC,IAAAA,QAAQ,EAARA;AAAV,GAAhB,CAAlD;AAAA,CAArB;AACP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD;AAAA,SAAmBX,MAAM,CAACG,aAAD,EAAgB;AAAEQ,IAAAA,KAAK,EAALA;AAAF,GAAhB,CAAzB;AAAA,CAArB;AAMP;AAEA,OAAO,IAAMC,MAAM,GAAG,QAAf;AACP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,SAAMb,MAAM,CAACY,MAAD,CAAZ;AAAA,CAAf;AAGP;AAEA,OAAO,IAAME,yBAAyB,GAAG,6BAAlC;AACP,OAAO,IAAMC,yBAAyB,GAAG,6BAAlC;AACP,OAAO,IAAMC,yBAAyB,GAAG,6BAAlC;AAEP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,OAAD;AAAA,SAAqBlB,MAAM,CAACc,yBAAD,EAA4B;AAAEI,IAAAA,OAAO,EAAPA;AAAF,GAA5B,CAA3B;AAAA,CAAhC;AACP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACD,OAAD,EAAkBT,QAAlB;AAAA,SAA6CT,MAAM,CAACe,yBAAD,EAA4B;AAAEG,IAAAA,OAAO,EAAPA,OAAF;AAAWT,IAAAA,QAAQ,EAARA;AAAX,GAA5B,CAAnD;AAAA,CAAhC;AACP,OAAO,IAAMW,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACF,OAAD,EAAkBP,KAAlB;AAAA,SAAoCX,MAAM,CAACgB,yBAAD,EAA4B;AAAEE,IAAAA,OAAO,EAAPA,OAAF;AAAWP,IAAAA,KAAK,EAALA;AAAX,GAA5B,CAA1C;AAAA,CAAhC;AAMP;AAEA,OAAO,IAAMU,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACJ,OAAD;AAAA,SAAqBlB,MAAM,CAACqB,gBAAD,EAAmB;AAAEH,IAAAA,OAAO,EAAPA;AAAF,GAAnB,CAA3B;AAAA,CAAxB","sourcesContent":["import { action } from 'typesafe-actions'\nimport { AuthIdentity } from 'dcl-crypto'\nimport { ProviderType } from '@dcl/schemas'\nimport { Wallet } from 'decentraland-dapps/dist/modules/wallet/types'\n\n// Login\n\nexport const LOGIN_REQUEST = '[Request] Login'\nexport const LOGIN_SUCCESS = '[Success] Login'\nexport const LOGIN_FAILURE = '[Failure] Login'\n\nexport const loginRequest = (providerType: ProviderType, restoreSession = false) => action(LOGIN_REQUEST, { restoreSession, providerType })\nexport const loginSuccess = (wallet: Wallet, identity: AuthIdentity) => action(LOGIN_SUCCESS, { wallet, identity })\nexport const loginFailure = (error: string) => action(LOGIN_FAILURE, { error })\n\nexport type LoginRequestAction = ReturnType<typeof loginRequest>\nexport type LoginSuccessAction = ReturnType<typeof loginSuccess>\nexport type LoginFailureAction = ReturnType<typeof loginFailure>\n\n// Logout\n\nexport const LOGOUT = 'Logout'\nexport const logout = () => action(LOGOUT)\nexport type LogoutAction = ReturnType<typeof logout>\n\n// Generate identity\n\nexport const GENERATE_IDENTITY_REQUEST = '[Request] Generate Identity'\nexport const GENERATE_IDENTITY_SUCCESS = '[Success] Generate Identity'\nexport const GENERATE_IDENTITY_FAILURE = '[Failure] Generate Identity'\n\nexport const generateIdentityRequest = (address: string) => action(GENERATE_IDENTITY_REQUEST, { address })\nexport const generateIdentitySuccess = (address: string, identity: AuthIdentity) => action(GENERATE_IDENTITY_SUCCESS, { address, identity })\nexport const generateIdentityFailure = (address: string, error: string) => action(GENERATE_IDENTITY_FAILURE, { address, error })\n\nexport type GenerateIdentityRequestAction = ReturnType<typeof generateIdentityRequest>\nexport type GenerateIdentitySuccessAction = ReturnType<typeof generateIdentitySuccess>\nexport type GenerateIdentityFailureAction = ReturnType<typeof generateIdentityFailure>\n\n// Destroy identity\n\nexport const DESTROY_IDENTITY = 'Destroy Identity'\nexport const destroyIdentity = (address: string) => action(DESTROY_IDENTITY, { address })\nexport type DestroyIdentityAction = ReturnType<typeof destroyIdentity>\n"]},"metadata":{},"sourceType":"module"}