{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toProviderType = exports.toModalOptionType = void 0;\n\nvar provider_type_1 = require(\"@dcl/schemas/dist/dapps/provider-type\");\n\nvar LoginModal_1 = require(\"decentraland-ui/dist/components/LoginModal/LoginModal\");\n\nvar eth_1 = require(\"../../lib/eth\");\n\nvar _LoginModal_1$LoginMo = LoginModal_1.LoginModalOptionType,\n    METAMASK = _LoginModal_1$LoginMo.METAMASK,\n    DAPPER = _LoginModal_1$LoginMo.DAPPER,\n    SAMSUNG = _LoginModal_1$LoginMo.SAMSUNG,\n    FORTMATIC = _LoginModal_1$LoginMo.FORTMATIC,\n    COINBASE = _LoginModal_1$LoginMo.COINBASE,\n    WALLET_CONNECT = _LoginModal_1$LoginMo.WALLET_CONNECT,\n    WALLET_LINK = _LoginModal_1$LoginMo.WALLET_LINK;\n\nfunction toModalOptionType(providerType) {\n  switch (providerType) {\n    case provider_type_1.ProviderType.INJECTED:\n      if (eth_1.isCucumberProvider()) {\n        return SAMSUNG;\n      } else if (eth_1.isCoinbaseProvider()) {\n        return COINBASE;\n      } else if (eth_1.isDapperProvider()) {\n        return DAPPER;\n      } else {\n        return METAMASK;\n      }\n\n    case provider_type_1.ProviderType.FORTMATIC:\n      return FORTMATIC;\n\n    case provider_type_1.ProviderType.WALLET_CONNECT:\n      return WALLET_CONNECT;\n\n    case provider_type_1.ProviderType.WALLET_LINK:\n      return WALLET_LINK;\n\n    default:\n      console.warn(\"Invalid provider type \".concat(providerType));\n      return;\n  }\n}\n\nexports.toModalOptionType = toModalOptionType;\n\nfunction toProviderType(modalOptionType) {\n  switch (modalOptionType) {\n    case METAMASK:\n    case COINBASE:\n    case DAPPER:\n    case SAMSUNG:\n      return provider_type_1.ProviderType.INJECTED;\n\n    case FORTMATIC:\n      return provider_type_1.ProviderType.FORTMATIC;\n\n    case WALLET_CONNECT:\n      return provider_type_1.ProviderType.WALLET_CONNECT;\n\n    case WALLET_LINK:\n      return provider_type_1.ProviderType.WALLET_LINK;\n\n    default:\n      throw new Error(\"Invalid login type \".concat(modalOptionType));\n  }\n}\n\nexports.toProviderType = toProviderType;","map":null,"metadata":{},"sourceType":"script"}