{"ast":null,"code":"import _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BigNumber, ethers } from 'ethers';\nimport { walletContracts } from '@0xsequence/abi';\nimport { getRandomInt, promisify } from '@0xsequence/utils';\nimport { sequenceContext, JsonRpcVersion } from '@0xsequence/network';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar JsonRpcMethod;\n\n(function (JsonRpcMethod) {\n  JsonRpcMethod[\"ethCall\"] = \"eth_call\";\n  JsonRpcMethod[\"ethGetBalance\"] = \"eth_getBalance\";\n  JsonRpcMethod[\"ethGetCode\"] = \"eth_getCode\";\n})(JsonRpcMethod || (JsonRpcMethod = {}));\n\nfunction safeSolve(_x, _x2) {\n  return _safeSolve.apply(this, arguments);\n}\n\nfunction _safeSolve() {\n  _safeSolve = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(promise, def) {\n    var d;\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.prev = 0;\n            _context10.next = 3;\n            return promise;\n\n          case 3:\n            return _context10.abrupt(\"return\", _context10.sent);\n\n          case 6:\n            _context10.prev = 6;\n            _context10.t0 = _context10[\"catch\"](0);\n            d = def instanceof Function ? def(_context10.t0) : def;\n            return _context10.abrupt(\"return\", d);\n\n          case 10:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[0, 6]]);\n  }));\n  return _safeSolve.apply(this, arguments);\n}\n\nfunction partition(array, callback) {\n  return array.reduce(function (result, element, i) {\n    callback(element, i) ? result[0].push(element) : result[1].push(element);\n    return result;\n  }, [[], []]);\n}\n\nfunction parseBlockTag(cand) {\n  if (cand === undefined) return 'latest';\n\n  switch (cand) {\n    case 'earliest':\n    case 'latest':\n    case 'pending':\n      return cand;\n  }\n\n  return BigNumber.from(cand);\n}\n\nfunction eqBlockTag(a, b) {\n  if (a === b) return true;\n\n  if (BigNumber.isBigNumber(a)) {\n    if (BigNumber.isBigNumber(b)) return a.eq(b);\n    return false;\n  }\n\n  if (BigNumber.isBigNumber(b)) return false;\n  return a === b;\n}\n\nvar DefaultMulticallOptions = {\n  batchSize: 50,\n  timeWindow: 50,\n  contract: sequenceContext.sequenceUtils,\n  verbose: false\n};\n\nvar Multicall = /*#__PURE__*/function () {\n  function Multicall(options) {\n    var _this2 = this;\n\n    _classCallCheck(this, Multicall);\n\n    var _this = this;\n\n    this.batchableJsonRpcMethods = [JsonRpcMethod.ethCall, JsonRpcMethod.ethGetCode, JsonRpcMethod.ethGetBalance];\n    this.multicallInterface = new ethers.utils.Interface(walletContracts.sequenceUtils.abi);\n    this.options = void 0;\n    this.timeout = void 0;\n    this.queue = [];\n\n    this.scheduleExecution = function () {\n      if (_this2.queue.length > 0) {\n        if (_this2.timeout) clearTimeout(_this2.timeout);\n        _this2.timeout = setTimeout(_this2.run, _this2.options.timeWindow);\n      }\n    };\n\n    this.handle = function (next, request, callback) {\n      // Schedule for batching and return\n      if (_this2.batchableJsonRpcMethods.find(function (m) {\n        return m === request.method;\n      })) {\n        _this2.queue.push({\n          request: request,\n          callback: callback,\n          next: next\n        });\n\n        if (_this2.options.verbose) console.log('Scheduling call', request.method);\n\n        _this2.scheduleExecution();\n\n        return;\n      }\n\n      if (_this2.options.verbose) console.log('Forwarded call', request.method); // Move to next handler\n\n      return next(request, callback);\n    };\n\n    this.run = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var limit, items, next, blockTag, _partition, _partition2, discartItems, callParams, _partition3, _partition4, encodedCall, reqId, res, decoded;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              /* eslint-disable no-var */\n              if (_this.options.verbose) console.log('Processing multicall'); // Read items from queue\n\n              limit = Math.min(_this.options.batchSize, _this.queue.length);\n\n              if (!(limit === 0)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 4:\n              if (!(limit === 1)) {\n                _context.next = 9;\n                break;\n              }\n\n              _this.forward(_this.queue[0]);\n\n              _this.queue = [];\n              if (_this.options.verbose) console.log('Skip multicall, single item');\n              return _context.abrupt(\"return\");\n\n            case 9:\n              if (_this.options.verbose) console.log('Resolving', limit); // Get batch from queue\n\n              items = _this.queue.slice(0, limit); // Update queue\n\n              _this.queue = limit === _this.queue.length ? [] : _this.queue.slice(limit);\n              if (_this.options.verbose) console.log('Updated queue', _this.queue.length);\n\n              if (_this.queue.length !== 0) {\n                _this.scheduleExecution();\n              } // Get next candidate\n\n\n              next = items[0].next;\n              blockTag = null; // Partition incompatible calls\n\n              _partition = partition(items, function (item) {\n                try {\n                  // Mixed next callbacks\n                  if (item.next !== next) return false;\n\n                  switch (item.request.method) {\n                    case JsonRpcMethod.ethCall:\n                      // Unsupported eth_call parameters\n                      if (item.request.params[0].from || item.request.params[0].gasPrice || item.request.params[0].value) {\n                        return false;\n                      }\n\n                    case JsonRpcMethod.ethGetBalance:\n                    case JsonRpcMethod.ethGetCode:\n                      // Mixed blockTags\n                      var itemBlockTag = parseBlockTag(item.request.params[1]);\n                      if (blockTag === null) blockTag = itemBlockTag;\n                      if (!eqBlockTag(itemBlockTag, blockTag)) return false;\n                  }\n\n                  return true;\n                } catch (_unused) {\n                  return false;\n                }\n              }), _partition2 = _slicedToArray(_partition, 2), items = _partition2[0], discartItems = _partition2[1]; // Forward discarted items\n              // end execution if no items remain\n\n              if (!(discartItems.length !== 0)) {\n                _context.next = 22;\n                break;\n              }\n\n              if (_this.options.verbose) console.log('Forwarding incompatible calls', discartItems.length);\n\n              _this.forward(discartItems);\n\n              if (!(items.length === 0)) {\n                _context.next = 22;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 22:\n              // Aggregate all calls\n              callParams = items.map(function (v) {\n                try {\n                  switch (v.request.method) {\n                    case JsonRpcMethod.ethCall:\n                      return {\n                        delegateCall: false,\n                        revertOnError: false,\n                        target: v.request.params[0].to,\n                        data: v.request.params[0].data,\n                        gasLimit: v.request.params[0].gas ? v.request.params[0].gas : 0,\n                        value: 0\n                      };\n\n                    case JsonRpcMethod.ethGetCode:\n                      return {\n                        delegateCall: false,\n                        revertOnError: false,\n                        target: _this.options.contract,\n                        gasLimit: 0,\n                        value: 0,\n                        data: _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('callCode'), [v.request.params[0]])\n                      };\n\n                    case JsonRpcMethod.ethGetBalance:\n                      return {\n                        delegateCall: false,\n                        revertOnError: false,\n                        target: _this.options.contract,\n                        gasLimit: 0,\n                        value: 0,\n                        data: _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('callBalanceOf'), [v.request.params[0]])\n                      };\n\n                    default:\n                      return null;\n                  }\n                } catch (_unused2) {\n                  return null;\n                }\n              }); // Filter calls with enconding errors and forward items\n\n              _partition3 = partition(items, function (_, i) {\n                return callParams[i] !== undefined;\n              }), _partition4 = _slicedToArray(_partition3, 2), items = _partition4[0], discartItems = _partition4[1];\n              callParams = callParams.filter(function (c) {\n                return c;\n              });\n\n              if (!(discartItems.length !== 0)) {\n                _context.next = 30;\n                break;\n              }\n\n              if (_this.options.verbose) console.log('Forwarding calls on error', discartItems.length);\n\n              _this.forward(discartItems);\n\n              if (!(items.length === 0)) {\n                _context.next = 30;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 30:\n              _context.prev = 30;\n              encodedCall = _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('multiCall'), [callParams]);\n              _context.next = 38;\n              break;\n\n            case 34:\n              _context.prev = 34;\n              _context.t0 = _context[\"catch\"](30);\n\n              _this.forward(items);\n\n              return _context.abrupt(\"return\");\n\n            case 38:\n              // Forward single multicall rpc call\n              reqId = getRandomInt(); // TODO: fix types below..\n\n              _context.next = 41;\n              return safeSolve( // @ts-ignore\n              promisify(next)({\n                id: reqId,\n                jsonrpc: JsonRpcVersion,\n                method: JsonRpcMethod.ethCall,\n                params: [{\n                  to: _this.options.contract,\n                  value: 0,\n                  data: encodedCall\n                }, blockTag] // @ts-ignore\n\n              }), function (e) {\n                return {\n                  jsonrpc: JsonRpcVersion,\n                  id: reqId,\n                  result: undefined,\n                  error: e\n                };\n              });\n\n            case 41:\n              res = _context.sent;\n\n              if (!res.error) {\n                _context.next = 44;\n                break;\n              }\n\n              return _context.abrupt(\"return\", _this.forward(items));\n\n            case 44:\n              _context.prev = 44;\n              // @ts-ignore\n              decoded = _this.multicallInterface.decodeFunctionResult(_this.multicallInterface.getFunction('multiCall'), res.result);\n              _context.next = 52;\n              break;\n\n            case 48:\n              _context.prev = 48;\n              _context.t1 = _context[\"catch\"](44);\n\n              _this.forward(items);\n\n              return _context.abrupt(\"return\");\n\n            case 52:\n              // Send results for each request\n              // errors fallback through the middleware\n              if (_this.options.verbose) console.log('Got response for', items.length);\n              items.forEach(function (item, index) {\n                if (!decoded[0][index]) {\n                  _this.forward(item);\n                } else {\n                  switch (item.request.method) {\n                    case JsonRpcMethod.ethCall:\n                      item.callback(undefined, {\n                        jsonrpc: item.request.jsonrpc,\n                        id: item.request.id,\n                        result: decoded[1][index]\n                      });\n                      break;\n\n                    case JsonRpcMethod.ethGetCode:\n                      item.callback(undefined, {\n                        jsonrpc: item.request.jsonrpc,\n                        id: item.request.id,\n                        result: ethers.utils.defaultAbiCoder.decode(['bytes'], decoded[1][index])[0]\n                      });\n                      break;\n\n                    case JsonRpcMethod.ethGetBalance:\n                      item.callback(undefined, {\n                        jsonrpc: item.request.jsonrpc,\n                        id: item.request.id,\n                        result: ethers.utils.defaultAbiCoder.decode(['uint256'], decoded[1][index])[0]\n                      });\n                      break;\n                  }\n                }\n              });\n\n            case 54:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[30, 34], [44, 48]]);\n    }));\n    this.options = options ? _extends({}, Multicall.DefaultOptions, options) : Multicall.DefaultOptions;\n    if (this.options.batchSize <= 0) throw new Error(\"Invalid batch size of \".concat(this.options.batchSize));\n  }\n\n  _createClass(Multicall, [{\n    key: \"forward\",\n    value: function forward(entries) {\n      if (Array.isArray(entries)) {\n        entries.forEach(function (e) {\n          return e.next(e.request, e.callback);\n        });\n      } else {\n        entries.next(entries.request, entries.callback);\n      }\n    }\n  }], [{\n    key: \"isMulticall\",\n    value: function isMulticall(cand) {\n      return cand && cand.handle !== undefined && cand.conf !== undefined && Multicall.isMulticallOptions(cand.options);\n    }\n  }, {\n    key: \"isMulticallOptions\",\n    value: function isMulticallOptions(cand) {\n      return cand !== undefined && cand.batchSize !== undefined && cand.timeWindow !== undefined && cand.contract !== undefined;\n    }\n  }]);\n\n  return Multicall;\n}();\n\nMulticall.DefaultOptions = _extends({}, DefaultMulticallOptions);\nvar ProxyMethods = ['getNetwork', 'getBlockNumber', 'getGasPrice', 'getTransactionCount', 'getStorageAt', 'sendTransaction', 'estimateGas', 'getBlock', 'getTransaction', 'getTransactionReceipt', 'getLogs', 'emit', 'litenerCount', 'addListener', 'removeListener', 'waitForTransaction', 'detectNetwork', 'getBlockWithTransactions'];\n\nvar MulticallProvider = /*#__PURE__*/function (_ethers$providers$Bas) {\n  _inherits(MulticallProvider, _ethers$providers$Bas);\n\n  function MulticallProvider(provider, multicall) {\n    var _this3;\n\n    _classCallCheck(this, MulticallProvider);\n\n    var _this;\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(MulticallProvider).call(this, provider.getNetwork()));\n    _this = _assertThisInitialized(_assertThisInitialized(_this3));\n    _this3.provider = provider;\n    _this3.multicall = void 0;\n    _this3.listenerCount = _this3.provider.listenerCount;\n\n    _this3.getResolver = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name) {\n        var provider, ogResolver;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                provider = _this.provider;\n\n                if (!provider.getResolver) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                _context2.t0 = provider;\n                _context2.next = 5;\n                return name;\n\n              case 5:\n                _context2.t1 = _context2.sent;\n                _context2.next = 8;\n                return _context2.t0.getResolver.call(_context2.t0, _context2.t1);\n\n              case 8:\n                ogResolver = _context2.sent;\n                return _context2.abrupt(\"return\", new ethers.providers.Resolver(_this, ogResolver.address, ogResolver.name));\n\n              case 10:\n                _context2.t2 = provider;\n                _context2.next = 13;\n                return name;\n\n              case 13:\n                _context2.t3 = _context2.sent;\n                return _context2.abrupt(\"return\", _context2.t2.getResolver.call(_context2.t2, _context2.t3));\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this3.next = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(req, callback) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.t0 = req.method;\n                _context3.next = _context3.t0 === JsonRpcMethod.ethCall ? 4 : _context3.t0 === JsonRpcMethod.ethGetCode ? 12 : _context3.t0 === JsonRpcMethod.ethGetBalance ? 20 : 28;\n                break;\n\n              case 4:\n                _context3.t1 = _this;\n                _context3.t2 = req;\n                _context3.t3 = callback;\n                _context3.next = 9;\n                return _this.provider.call(req.params[0], req.params[1]);\n\n              case 9:\n                _context3.t4 = _context3.sent;\n\n                _context3.t1.callback.call(_context3.t1, _context3.t2, _context3.t3, _context3.t4);\n\n                return _context3.abrupt(\"break\", 28);\n\n              case 12:\n                _context3.t5 = _this;\n                _context3.t6 = req;\n                _context3.t7 = callback;\n                _context3.next = 17;\n                return _this.provider.getCode(req.params[0], req.params[1]);\n\n              case 17:\n                _context3.t8 = _context3.sent;\n\n                _context3.t5.callback.call(_context3.t5, _context3.t6, _context3.t7, _context3.t8);\n\n                return _context3.abrupt(\"break\", 28);\n\n              case 20:\n                _context3.t9 = _this;\n                _context3.t10 = req;\n                _context3.t11 = callback;\n                _context3.next = 25;\n                return _this.provider.getBalance(req.params[0], req.params[1]);\n\n              case 25:\n                _context3.t12 = _context3.sent;\n\n                _context3.t9.callback.call(_context3.t9, _context3.t10, _context3.t11, _context3.t12);\n\n                return _context3.abrupt(\"break\", 28);\n\n              case 28:\n                _context3.next = 33;\n                break;\n\n              case 30:\n                _context3.prev = 30;\n                _context3.t13 = _context3[\"catch\"](0);\n\n                _this.callback(req, callback, undefined, _context3.t13);\n\n              case 33:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 30]]);\n      }));\n\n      return function (_x4, _x5) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this3.multicall = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n    ProxyMethods.forEach(function (m) {\n      if (provider[m] !== undefined) {\n        _this3[m] = function () {\n          return provider[m].apply(provider, arguments);\n        };\n      }\n    });\n    return _this3;\n  }\n\n  _createClass(MulticallProvider, [{\n    key: \"callback\",\n    value: function callback(req, _callback, resp, err) {\n      _callback(undefined, {\n        jsonrpc: JsonRpcVersion,\n        id: req.id,\n        result: resp,\n        error: err\n      });\n    }\n  }, {\n    key: \"call\",\n    value: function () {\n      var _call = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(transaction, blockTag) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.rpcCall(JsonRpcMethod.ethCall, transaction, blockTag));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function call(_x6, _x7) {\n        return _call.apply(this, arguments);\n      }\n\n      return call;\n    }()\n  }, {\n    key: \"getCode\",\n    value: function () {\n      var _getCode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(addressOrName, blockTag) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.rpcCall(JsonRpcMethod.ethGetCode, addressOrName, blockTag));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getCode(_x8, _x9) {\n        return _getCode.apply(this, arguments);\n      }\n\n      return getCode;\n    }()\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(addressOrName, blockTag) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.rpcCall(JsonRpcMethod.ethGetBalance, addressOrName, blockTag));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getBalance(_x10, _x11) {\n        return _getBalance.apply(this, arguments);\n      }\n\n      return getBalance;\n    }()\n  }, {\n    key: \"rpcCall\",\n    value: function () {\n      var _rpcCall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(method) {\n        var reqId,\n            _len,\n            params,\n            _key,\n            resp,\n            _args7 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                reqId = getRandomInt();\n\n                for (_len = _args7.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                  params[_key - 1] = _args7[_key];\n                }\n\n                _context7.next = 4;\n                return promisify(this.multicall.handle)(this.next, {\n                  jsonrpc: JsonRpcVersion,\n                  id: reqId,\n                  method: method,\n                  params: params\n                });\n\n              case 4:\n                resp = _context7.sent;\n                return _context7.abrupt(\"return\", resp.result);\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function rpcCall(_x12) {\n        return _rpcCall.apply(this, arguments);\n      }\n\n      return rpcCall;\n    }()\n  }]);\n\n  return MulticallProvider;\n}(ethers.providers.BaseProvider);\n\nvar MulticallExternalProvider = /*#__PURE__*/function () {\n  function MulticallExternalProvider(provider, multicall) {\n    var _this4 = this;\n\n    _classCallCheck(this, MulticallExternalProvider);\n\n    this.provider = provider;\n    this.multicall = void 0;\n    this.multicall = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n\n    if (provider.send) {\n      var next = /*#__PURE__*/function () {\n        var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req, callback) {\n          return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  provider.send(req, callback);\n\n                case 1:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee8);\n        }));\n\n        function next(_x13, _x14) {\n          return _next.apply(this, arguments);\n        }\n\n        return next;\n      }();\n\n      this.send = function (request, callback) {\n        _this4.multicall.handle(next, request, callback);\n      };\n    }\n\n    if (provider.sendAsync) {\n      var _next2 = /*#__PURE__*/function () {\n        var _next3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(req, callback) {\n          return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  provider.sendAsync(req, callback);\n\n                case 1:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }\n          }, _callee9);\n        }));\n\n        function next(_x15, _x16) {\n          return _next3.apply(this, arguments);\n        }\n\n        return next;\n      }();\n\n      this.sendAsync = function (request, callback) {\n        _this4.multicall.handle(_next2, request, callback);\n      };\n    }\n  }\n\n  _createClass(MulticallExternalProvider, [{\n    key: \"isMetaMask\",\n    get: function get() {\n      return this.provider.isMetaMask;\n    }\n  }, {\n    key: \"isStatus\",\n    get: function get() {\n      return this.provider.isStatus;\n    }\n  }]);\n\n  return MulticallExternalProvider;\n}();\n\nvar multicallMiddleware = function multicallMiddleware(multicall) {\n  return function (next) {\n    var lib = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n    return function (request, callback) {\n      return lib.handle(next, request, callback);\n    };\n  };\n};\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ProxyMethods: ProxyMethods,\n  MulticallProvider: MulticallProvider,\n  MulticallExternalProvider: MulticallExternalProvider,\n  multicallMiddleware: multicallMiddleware\n});\nexport { Multicall, index as providers };","map":null,"metadata":{},"sourceType":"module"}