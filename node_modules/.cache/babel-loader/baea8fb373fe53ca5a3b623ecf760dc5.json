{"ast":null,"code":"import { Observable } from \"../Misc/observable\";\nimport { DomManagement } from \"../Misc/domManagement\";\nimport { PoseEnabledControllerHelper } from \"../Gamepads/Controllers/poseEnabledController\";\nimport { Xbox360Pad } from \"./xboxGamepad\";\nimport { Gamepad, GenericPad } from \"./gamepad\";\nimport { Engine } from '../Engines/engine';\nimport { DualShockPad } from './dualShockGamepad';\n/**\r\n * Manager for handling gamepads\r\n */\n\nvar GamepadManager =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes the gamepad manager\r\n   * @param _scene BabylonJS scene\r\n   */\n  function GamepadManager(_scene) {\n    var _this = this;\n\n    this._scene = _scene;\n    this._babylonGamepads = [];\n    this._oneGamepadConnected = false;\n    /** @hidden */\n\n    this._isMonitoring = false;\n    /**\r\n     * observable to be triggered when the gamepad controller has been disconnected\r\n     */\n\n    this.onGamepadDisconnectedObservable = new Observable();\n\n    if (!DomManagement.IsWindowObjectExist()) {\n      this._gamepadEventSupported = false;\n    } else {\n      this._gamepadEventSupported = 'GamepadEvent' in window;\n      this._gamepadSupport = navigator.getGamepads || navigator.webkitGetGamepads || navigator.msGetGamepads || navigator.webkitGamepads;\n    }\n\n    this.onGamepadConnectedObservable = new Observable(function (observer) {\n      // This will be used to raise the onGamepadConnected for all gamepads ALREADY connected\n      for (var i in _this._babylonGamepads) {\n        var gamepad = _this._babylonGamepads[i];\n\n        if (gamepad && gamepad._isConnected) {\n          _this.onGamepadConnectedObservable.notifyObserver(observer, gamepad);\n        }\n      }\n    });\n\n    this._onGamepadConnectedEvent = function (evt) {\n      var gamepad = evt.gamepad;\n\n      if (gamepad.index in _this._babylonGamepads) {\n        if (_this._babylonGamepads[gamepad.index].isConnected) {\n          return;\n        }\n      }\n\n      var newGamepad;\n\n      if (_this._babylonGamepads[gamepad.index]) {\n        newGamepad = _this._babylonGamepads[gamepad.index];\n        newGamepad.browserGamepad = gamepad;\n        newGamepad._isConnected = true;\n      } else {\n        newGamepad = _this._addNewGamepad(gamepad);\n      }\n\n      _this.onGamepadConnectedObservable.notifyObservers(newGamepad);\n\n      _this._startMonitoringGamepads();\n    };\n\n    this._onGamepadDisconnectedEvent = function (evt) {\n      var gamepad = evt.gamepad; // Remove the gamepad from the list of gamepads to monitor.\n\n      for (var i in _this._babylonGamepads) {\n        if (_this._babylonGamepads[i].index === gamepad.index) {\n          var disconnectedGamepad = _this._babylonGamepads[i];\n          disconnectedGamepad._isConnected = false;\n\n          _this.onGamepadDisconnectedObservable.notifyObservers(disconnectedGamepad);\n\n          disconnectedGamepad.dispose && disconnectedGamepad.dispose();\n          break;\n        }\n      }\n    };\n\n    if (this._gamepadSupport) {\n      //first add already-connected gamepads\n      this._updateGamepadObjects();\n\n      if (this._babylonGamepads.length) {\n        this._startMonitoringGamepads();\n      } // Checking if the gamepad connected event is supported (like in Firefox)\n\n\n      if (this._gamepadEventSupported) {\n        var hostWindow = this._scene ? this._scene.getEngine().getHostWindow() : window;\n\n        if (hostWindow) {\n          hostWindow.addEventListener('gamepadconnected', this._onGamepadConnectedEvent, false);\n          hostWindow.addEventListener('gamepaddisconnected', this._onGamepadDisconnectedEvent, false);\n        }\n      } else {\n        this._startMonitoringGamepads();\n      }\n    }\n  }\n\n  Object.defineProperty(GamepadManager.prototype, \"gamepads\", {\n    /**\r\n     * The gamepads in the game pad manager\r\n     */\n    get: function get() {\n      return this._babylonGamepads;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Get the gamepad controllers based on type\r\n   * @param type The type of gamepad controller\r\n   * @returns Nullable gamepad\r\n   */\n\n  GamepadManager.prototype.getGamepadByType = function (type) {\n    if (type === void 0) {\n      type = Gamepad.XBOX;\n    }\n\n    for (var _i = 0, _a = this._babylonGamepads; _i < _a.length; _i++) {\n      var gamepad = _a[_i];\n\n      if (gamepad && gamepad.type === type) {\n        return gamepad;\n      }\n    }\n\n    return null;\n  };\n  /**\r\n   * Disposes the gamepad manager\r\n   */\n\n\n  GamepadManager.prototype.dispose = function () {\n    if (this._gamepadEventSupported) {\n      if (this._onGamepadConnectedEvent) {\n        window.removeEventListener('gamepadconnected', this._onGamepadConnectedEvent);\n      }\n\n      if (this._onGamepadDisconnectedEvent) {\n        window.removeEventListener('gamepaddisconnected', this._onGamepadDisconnectedEvent);\n      }\n\n      this._onGamepadConnectedEvent = null;\n      this._onGamepadDisconnectedEvent = null;\n    }\n\n    this._babylonGamepads.forEach(function (gamepad) {\n      gamepad.dispose();\n    });\n\n    this.onGamepadConnectedObservable.clear();\n    this.onGamepadDisconnectedObservable.clear();\n    this._oneGamepadConnected = false;\n\n    this._stopMonitoringGamepads();\n\n    this._babylonGamepads = [];\n  };\n\n  GamepadManager.prototype._addNewGamepad = function (gamepad) {\n    if (!this._oneGamepadConnected) {\n      this._oneGamepadConnected = true;\n    }\n\n    var newGamepad;\n    var dualShock = gamepad.id.search(\"054c\") !== -1;\n    var xboxOne = gamepad.id.search(\"Xbox One\") !== -1;\n\n    if (xboxOne || gamepad.id.search(\"Xbox 360\") !== -1 || gamepad.id.search(\"xinput\") !== -1) {\n      newGamepad = new Xbox360Pad(gamepad.id, gamepad.index, gamepad, xboxOne);\n    } else if (dualShock) {\n      newGamepad = new DualShockPad(gamepad.id, gamepad.index, gamepad);\n    } // if pose is supported, use the (WebVR) pose enabled controller\n    else if (gamepad.pose) {\n      newGamepad = PoseEnabledControllerHelper.InitiateController(gamepad);\n    } else {\n      newGamepad = new GenericPad(gamepad.id, gamepad.index, gamepad);\n    }\n\n    this._babylonGamepads[newGamepad.index] = newGamepad;\n    return newGamepad;\n  };\n\n  GamepadManager.prototype._startMonitoringGamepads = function () {\n    if (!this._isMonitoring) {\n      this._isMonitoring = true; //back-comp\n\n      if (!this._scene) {\n        this._checkGamepadsStatus();\n      }\n    }\n  };\n\n  GamepadManager.prototype._stopMonitoringGamepads = function () {\n    this._isMonitoring = false;\n  };\n  /** @hidden */\n\n\n  GamepadManager.prototype._checkGamepadsStatus = function () {\n    var _this = this; // Hack to be compatible Chrome\n\n\n    this._updateGamepadObjects();\n\n    for (var i in this._babylonGamepads) {\n      var gamepad = this._babylonGamepads[i];\n\n      if (!gamepad || !gamepad.isConnected) {\n        continue;\n      }\n\n      gamepad.update();\n    }\n\n    if (this._isMonitoring && !this._scene) {\n      Engine.QueueNewFrame(function () {\n        _this._checkGamepadsStatus();\n      });\n    }\n  }; // This function is called only on Chrome, which does not properly support\n  // connection/disconnection events and forces you to recopy again the gamepad object\n\n\n  GamepadManager.prototype._updateGamepadObjects = function () {\n    var gamepads = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : [];\n\n    for (var i = 0; i < gamepads.length; i++) {\n      var gamepad = gamepads[i];\n\n      if (gamepad) {\n        if (!this._babylonGamepads[gamepad.index]) {\n          var newGamepad = this._addNewGamepad(gamepad);\n\n          this.onGamepadConnectedObservable.notifyObservers(newGamepad);\n        } else {\n          // Forced to copy again this object for Chrome for unknown reason\n          this._babylonGamepads[i].browserGamepad = gamepad;\n\n          if (!this._babylonGamepads[i].isConnected) {\n            this._babylonGamepads[i]._isConnected = true;\n            this.onGamepadConnectedObservable.notifyObservers(this._babylonGamepads[i]);\n          }\n        }\n      }\n    }\n  };\n\n  return GamepadManager;\n}();\n\nexport { GamepadManager };","map":null,"metadata":{},"sourceType":"module"}