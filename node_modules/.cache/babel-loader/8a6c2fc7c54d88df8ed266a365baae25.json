{"ast":null,"code":"import { Mesh } from \"../Meshes/mesh\";\nimport { BoxBuilder } from \"../Meshes/Builders/boxBuilder\";\nimport { SphereBuilder } from \"../Meshes/Builders/sphereBuilder\";\nimport { Quaternion, Vector3 } from \"../Maths/math.vector\";\nimport { Color3 } from '../Maths/math.color';\nimport { EngineStore } from \"../Engines/engineStore\";\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\nimport { PhysicsImpostor } from \"../Physics/physicsImpostor\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\nimport { CylinderBuilder } from '../Meshes/Builders/cylinderBuilder';\n/**\r\n     * Used to show the physics impostor around the specific mesh\r\n     */\n\nvar PhysicsViewer =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new PhysicsViewer\r\n   * @param scene defines the hosting scene\r\n   */\n  function PhysicsViewer(scene) {\n    /** @hidden */\n    this._impostors = [];\n    /** @hidden */\n\n    this._meshes = [];\n    /** @hidden */\n\n    this._numMeshes = 0;\n    this._debugMeshMeshes = new Array();\n    this._scene = scene || EngineStore.LastCreatedScene;\n\n    var physicEngine = this._scene.getPhysicsEngine();\n\n    if (physicEngine) {\n      this._physicsEnginePlugin = physicEngine.getPhysicsPlugin();\n    }\n\n    this._utilityLayer = new UtilityLayerRenderer(this._scene, false);\n    this._utilityLayer.pickUtilitySceneFirst = false;\n    this._utilityLayer.utilityLayerScene.autoClearDepthAndStencil = true;\n  }\n  /** @hidden */\n\n\n  PhysicsViewer.prototype._updateDebugMeshes = function () {\n    var plugin = this._physicsEnginePlugin;\n\n    for (var i = 0; i < this._numMeshes; i++) {\n      var impostor = this._impostors[i];\n\n      if (!impostor) {\n        continue;\n      }\n\n      if (impostor.isDisposed) {\n        this.hideImpostor(this._impostors[i--]);\n      } else {\n        if (impostor.type === PhysicsImpostor.MeshImpostor) {\n          continue;\n        }\n\n        var mesh = this._meshes[i];\n\n        if (mesh && plugin) {\n          plugin.syncMeshWithImpostor(mesh, impostor);\n        }\n      }\n    }\n  };\n  /**\r\n   * Renders a specified physic impostor\r\n   * @param impostor defines the impostor to render\r\n   * @param targetMesh defines the mesh represented by the impostor\r\n   * @returns the new debug mesh used to render the impostor\r\n   */\n\n\n  PhysicsViewer.prototype.showImpostor = function (impostor, targetMesh) {\n    if (!this._scene) {\n      return null;\n    }\n\n    for (var i = 0; i < this._numMeshes; i++) {\n      if (this._impostors[i] == impostor) {\n        return null;\n      }\n    }\n\n    var debugMesh = this._getDebugMesh(impostor, targetMesh);\n\n    if (debugMesh) {\n      this._impostors[this._numMeshes] = impostor;\n      this._meshes[this._numMeshes] = debugMesh;\n\n      if (this._numMeshes === 0) {\n        this._renderFunction = this._updateDebugMeshes.bind(this);\n\n        this._scene.registerBeforeRender(this._renderFunction);\n      }\n\n      this._numMeshes++;\n    }\n\n    return debugMesh;\n  };\n  /**\r\n   * Hides a specified physic impostor\r\n   * @param impostor defines the impostor to hide\r\n   */\n\n\n  PhysicsViewer.prototype.hideImpostor = function (impostor) {\n    if (!impostor || !this._scene || !this._utilityLayer) {\n      return;\n    }\n\n    var removed = false;\n    var utilityLayerScene = this._utilityLayer.utilityLayerScene;\n\n    for (var i = 0; i < this._numMeshes; i++) {\n      if (this._impostors[i] == impostor) {\n        var mesh = this._meshes[i];\n\n        if (!mesh) {\n          continue;\n        }\n\n        utilityLayerScene.removeMesh(mesh);\n        mesh.dispose();\n\n        var index = this._debugMeshMeshes.indexOf(mesh);\n\n        if (index > -1) {\n          this._debugMeshMeshes.splice(index, 1);\n        }\n\n        this._numMeshes--;\n\n        if (this._numMeshes > 0) {\n          this._meshes[i] = this._meshes[this._numMeshes];\n          this._impostors[i] = this._impostors[this._numMeshes];\n          this._meshes[this._numMeshes] = null;\n          this._impostors[this._numMeshes] = null;\n        } else {\n          this._meshes[0] = null;\n          this._impostors[0] = null;\n        }\n\n        removed = true;\n        break;\n      }\n    }\n\n    if (removed && this._numMeshes === 0) {\n      this._scene.unregisterBeforeRender(this._renderFunction);\n    }\n  };\n\n  PhysicsViewer.prototype._getDebugMaterial = function (scene) {\n    if (!this._debugMaterial) {\n      this._debugMaterial = new StandardMaterial('', scene);\n      this._debugMaterial.wireframe = true;\n      this._debugMaterial.emissiveColor = Color3.White();\n      this._debugMaterial.disableLighting = true;\n    }\n\n    return this._debugMaterial;\n  };\n\n  PhysicsViewer.prototype._getDebugBoxMesh = function (scene) {\n    if (!this._debugBoxMesh) {\n      this._debugBoxMesh = BoxBuilder.CreateBox('physicsBodyBoxViewMesh', {\n        size: 1\n      }, scene);\n      this._debugBoxMesh.rotationQuaternion = Quaternion.Identity();\n      this._debugBoxMesh.material = this._getDebugMaterial(scene);\n\n      this._debugBoxMesh.setEnabled(false);\n    }\n\n    return this._debugBoxMesh.createInstance('physicsBodyBoxViewInstance');\n  };\n\n  PhysicsViewer.prototype._getDebugSphereMesh = function (scene) {\n    if (!this._debugSphereMesh) {\n      this._debugSphereMesh = SphereBuilder.CreateSphere('physicsBodySphereViewMesh', {\n        diameter: 1\n      }, scene);\n      this._debugSphereMesh.rotationQuaternion = Quaternion.Identity();\n      this._debugSphereMesh.material = this._getDebugMaterial(scene);\n\n      this._debugSphereMesh.setEnabled(false);\n    }\n\n    return this._debugSphereMesh.createInstance('physicsBodyBoxViewInstance');\n  };\n\n  PhysicsViewer.prototype._getDebugCylinderMesh = function (scene) {\n    if (!this._debugCylinderMesh) {\n      this._debugCylinderMesh = CylinderBuilder.CreateCylinder('physicsBodyCylinderViewMesh', {\n        diameterTop: 1,\n        diameterBottom: 1,\n        height: 1\n      }, scene);\n      this._debugCylinderMesh.rotationQuaternion = Quaternion.Identity();\n      this._debugCylinderMesh.material = this._getDebugMaterial(scene);\n\n      this._debugCylinderMesh.setEnabled(false);\n    }\n\n    return this._debugCylinderMesh.createInstance('physicsBodyBoxViewInstance');\n  };\n\n  PhysicsViewer.prototype._getDebugMeshMesh = function (mesh, scene) {\n    var wireframeOver = new Mesh(mesh.name, scene, null, mesh);\n    wireframeOver.position = Vector3.Zero();\n    wireframeOver.setParent(mesh);\n    wireframeOver.material = this._getDebugMaterial(scene);\n\n    this._debugMeshMeshes.push(wireframeOver);\n\n    return wireframeOver;\n  };\n\n  PhysicsViewer.prototype._getDebugMesh = function (impostor, targetMesh) {\n    var _this = this;\n\n    if (!this._utilityLayer) {\n      return null;\n    } // Only create child impostor debug meshes when evaluating the parent\n\n\n    if (targetMesh && targetMesh.parent && targetMesh.parent.physicsImpostor) {\n      return null;\n    }\n\n    var mesh = null;\n    var utilityLayerScene = this._utilityLayer.utilityLayerScene;\n\n    switch (impostor.type) {\n      case PhysicsImpostor.BoxImpostor:\n        mesh = this._getDebugBoxMesh(utilityLayerScene);\n        impostor.getBoxSizeToRef(mesh.scaling);\n        break;\n\n      case PhysicsImpostor.SphereImpostor:\n        mesh = this._getDebugSphereMesh(utilityLayerScene);\n        var radius = impostor.getRadius();\n        mesh.scaling.x = radius * 2;\n        mesh.scaling.y = radius * 2;\n        mesh.scaling.z = radius * 2;\n        break;\n\n      case PhysicsImpostor.MeshImpostor:\n        if (targetMesh) {\n          mesh = this._getDebugMeshMesh(targetMesh, utilityLayerScene);\n        }\n\n        break;\n\n      case PhysicsImpostor.NoImpostor:\n        if (targetMesh) {\n          // Handle compound impostors\n          var childMeshes = targetMesh.getChildMeshes().filter(function (c) {\n            return c.physicsImpostor ? 1 : 0;\n          });\n          childMeshes.forEach(function (m) {\n            var a = _this._getDebugBoxMesh(utilityLayerScene);\n\n            a.parent = m;\n          });\n        }\n\n        break;\n\n      case PhysicsImpostor.CylinderImpostor:\n        mesh = this._getDebugCylinderMesh(utilityLayerScene);\n        var bi = impostor.object.getBoundingInfo();\n        mesh.scaling.x = bi.boundingBox.maximum.x - bi.boundingBox.minimum.x;\n        mesh.scaling.y = bi.boundingBox.maximum.y - bi.boundingBox.minimum.y;\n        mesh.scaling.z = bi.boundingBox.maximum.z - bi.boundingBox.minimum.z;\n        break;\n    }\n\n    return mesh;\n  };\n  /** Releases all resources */\n\n\n  PhysicsViewer.prototype.dispose = function () {\n    var count = this._numMeshes;\n\n    for (var index = 0; index < count; index++) {\n      this.hideImpostor(this._impostors[0]);\n    }\n\n    if (this._debugBoxMesh) {\n      this._debugBoxMesh.dispose();\n    }\n\n    if (this._debugSphereMesh) {\n      this._debugSphereMesh.dispose();\n    }\n\n    if (this._debugCylinderMesh) {\n      this._debugCylinderMesh.dispose();\n    }\n\n    if (this._debugMaterial) {\n      this._debugMaterial.dispose();\n    }\n\n    this._impostors.length = 0;\n    this._scene = null;\n    this._physicsEnginePlugin = null;\n\n    if (this._utilityLayer) {\n      this._utilityLayer.dispose();\n\n      this._utilityLayer = null;\n    }\n  };\n\n  return PhysicsViewer;\n}();\n\nexport { PhysicsViewer };","map":null,"metadata":{},"sourceType":"module"}