{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/highlights.fragment\";\n/**\r\n * Extracts highlights from the image\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses\r\n */\n\nvar HighlightsPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(HighlightsPostProcess, _super);\n  /**\r\n   * Extracts highlights from the image\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses\r\n   * @param name The name of the effect.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of texture for the post process (default: Engine.TEXTURETYPE_UNSIGNED_INT)\r\n   */\n\n\n  function HighlightsPostProcess(name, options, camera, samplingMode, engine, reusable, textureType) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    return _super.call(this, name, \"highlights\", null, null, options, camera, samplingMode, engine, reusable, null, textureType) || this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"HighlightsPostProcess\" string\r\n   */\n\n\n  HighlightsPostProcess.prototype.getClassName = function () {\n    return \"HighlightsPostProcess\";\n  };\n\n  return HighlightsPostProcess;\n}(PostProcess);\n\nexport { HighlightsPostProcess };","map":null,"metadata":{},"sourceType":"module"}