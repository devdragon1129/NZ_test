{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/bloomMerge.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize } from '../Misc/decorators';\n/**\r\n * The BloomMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\r\n */\n\nvar BloomMergePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(BloomMergePostProcess, _super);\n  /**\r\n   * Creates a new instance of @see BloomMergePostProcess\r\n   * @param name The name of the effect.\r\n   * @param originalFromInput Post process which's input will be used for the merge.\r\n   * @param blurred Blurred highlights post process which's output will be used.\r\n   * @param weight Weight of the bloom to be added to the original input.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function BloomMergePostProcess(name, originalFromInput, blurred,\n  /** Weight of the bloom to be added to the original input. */\n  weight, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"bloomMerge\", [\"bloomWeight\"], [\"circleOfConfusionSampler\", \"blurStep0\", \"blurStep1\", \"blurStep2\", \"bloomBlur\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true) || this;\n    /** Weight of the bloom to be added to the original input. */\n\n\n    _this.weight = 1;\n    _this.weight = weight;\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\n      effect.setTextureFromPostProcessOutput(\"bloomBlur\", blurred);\n      effect.setFloat(\"bloomWeight\", _this.weight);\n    });\n\n    if (!blockCompilation) {\n      _this.updateEffect();\n    }\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"BloomMergePostProcess\" string\r\n   */\n\n\n  BloomMergePostProcess.prototype.getClassName = function () {\n    return \"BloomMergePostProcess\";\n  };\n\n  __decorate([serialize()], BloomMergePostProcess.prototype, \"weight\", void 0);\n\n  return BloomMergePostProcess;\n}(PostProcess);\n\nexport { BloomMergePostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.BloomMergePostProcess\"] = BloomMergePostProcess;","map":null,"metadata":{},"sourceType":"module"}