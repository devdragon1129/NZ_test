{"ast":null,"code":"import _defineProperty from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { loadingReducer } from 'decentraland-dapps/dist/modules/loading/reducer';\nimport { DELETE_PROJECT } from 'modules/project/actions';\nimport { DEPLOY_TO_POOL_SUCCESS, DEPLOY_TO_POOL_FAILURE, SET_PROGRESS, DEPLOY_TO_LAND_SUCCESS, CLEAR_DEPLOYMENT_SUCCESS, CLEAR_DEPLOYMENT_FAILURE, DEPLOY_TO_LAND_FAILURE, DEPLOY_TO_POOL_REQUEST, DEPLOY_TO_LAND_REQUEST, CLEAR_DEPLOYMENT_REQUEST, FETCH_DEPLOYMENTS_SUCCESS, FETCH_DEPLOYMENTS_REQUEST, FETCH_DEPLOYMENTS_FAILURE } from './actions';\nimport { ProgressStage } from './types';\nexport var INITIAL_STATE = {\n  data: {},\n  progress: {\n    stage: ProgressStage.NONE,\n    value: 0\n  },\n  loading: [],\n  error: null\n};\nexport var deploymentReducer = function deploymentReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case DEPLOY_TO_POOL_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          error: null,\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case DEPLOY_TO_POOL_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data),\n          progress: {\n            stage: ProgressStage.NONE,\n            value: 0\n          },\n          error: null,\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case DEPLOY_TO_POOL_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data),\n          progress: {\n            stage: ProgressStage.NONE,\n            value: 0\n          },\n          error: action.payload.error,\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case DEPLOY_TO_LAND_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          error: null\n        });\n      }\n\n    case DEPLOY_TO_LAND_SUCCESS:\n      {\n        var _action$payload = action.payload,\n            deployment = _action$payload.deployment,\n            overrideDeploymentId = _action$payload.overrideDeploymentId;\n\n        var newData = _objectSpread({}, state.data, _defineProperty({}, deployment.id, deployment));\n\n        if (overrideDeploymentId) {\n          delete newData[overrideDeploymentId];\n        }\n\n        return _objectSpread({}, state, {\n          data: newData,\n          progress: {\n            stage: ProgressStage.NONE,\n            value: 0\n          }\n        });\n      }\n\n    case DEPLOY_TO_LAND_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data),\n          error: action.payload.error\n        });\n      }\n\n    case SET_PROGRESS:\n      {\n        var _action$payload2 = action.payload,\n            stage = _action$payload2.stage,\n            value = _action$payload2.value;\n        return _objectSpread({}, state, {\n          progress: _objectSpread({}, state.progress, {\n            stage: stage,\n            value: value\n          })\n        });\n      }\n\n    case CLEAR_DEPLOYMENT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case CLEAR_DEPLOYMENT_SUCCESS:\n      {\n        var deploymentId = action.payload.deploymentId;\n\n        var newState = _objectSpread({}, state, {\n          data: _objectSpread({}, state.data),\n          progress: {\n            stage: ProgressStage.NONE,\n            value: 0\n          },\n          loading: loadingReducer(state.loading, action)\n        });\n\n        delete newState.data[deploymentId];\n        return newState;\n      }\n\n    case CLEAR_DEPLOYMENT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data),\n          loading: loadingReducer(state.loading, action),\n          error: action.payload.error\n        });\n      }\n\n    case DELETE_PROJECT:\n      {\n        var project = action.payload.project;\n\n        var _newState = _objectSpread({}, state, {\n          data: _objectSpread({}, state.data),\n          progress: {\n            stage: ProgressStage.NONE,\n            value: 0\n          }\n        });\n\n        delete _newState.data[project.id];\n        return _newState;\n      }\n\n    case FETCH_DEPLOYMENTS_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          error: null,\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case FETCH_DEPLOYMENTS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action),\n          data: _objectSpread({}, state.data, action.payload.deployments.reduce(function (obj, deployment) {\n            obj[deployment.id] = deployment;\n            return obj;\n          }, {}))\n        });\n      }\n\n    case FETCH_DEPLOYMENTS_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          error: action.payload.error,\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/deployment/reducer.ts"],"names":["loadingReducer","DELETE_PROJECT","DEPLOY_TO_POOL_SUCCESS","DEPLOY_TO_POOL_FAILURE","SET_PROGRESS","DEPLOY_TO_LAND_SUCCESS","CLEAR_DEPLOYMENT_SUCCESS","CLEAR_DEPLOYMENT_FAILURE","DEPLOY_TO_LAND_FAILURE","DEPLOY_TO_POOL_REQUEST","DEPLOY_TO_LAND_REQUEST","CLEAR_DEPLOYMENT_REQUEST","FETCH_DEPLOYMENTS_SUCCESS","FETCH_DEPLOYMENTS_REQUEST","FETCH_DEPLOYMENTS_FAILURE","ProgressStage","INITIAL_STATE","data","progress","stage","NONE","value","loading","error","deploymentReducer","state","action","type","payload","deployment","overrideDeploymentId","newData","id","deploymentId","newState","project","deployments","reduce","obj"],"mappings":"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","sourcesContent":["import { loadingReducer, LoadingState } from 'decentraland-dapps/dist/modules/loading/reducer'\nimport { DataByKey } from 'decentraland-dapps/dist/lib/types'\n\nimport { DELETE_PROJECT, DeleteProjectAction } from 'modules/project/actions'\nimport {\n  DEPLOY_TO_POOL_SUCCESS,\n  DEPLOY_TO_POOL_FAILURE,\n  DeployToPoolRequestAction,\n  DeployToPoolSuccessAction,\n  DeployToPoolFailureAction,\n  SetProgressAction,\n  SET_PROGRESS,\n  DEPLOY_TO_LAND_SUCCESS,\n  DeployToLandSuccessAction,\n  ClearDeploymentSuccessAction,\n  ClearDeploymentFailureAction,\n  CLEAR_DEPLOYMENT_SUCCESS,\n  CLEAR_DEPLOYMENT_FAILURE,\n  DEPLOY_TO_LAND_FAILURE,\n  DeployToLandFailureAction,\n  DEPLOY_TO_POOL_REQUEST,\n  DEPLOY_TO_LAND_REQUEST,\n  DeployToLandRequestAction,\n  CLEAR_DEPLOYMENT_REQUEST,\n  ClearDeploymentRequestAction,\n  FetchDeploymentsFailureAction,\n  FetchDeploymentsSuccessAction,\n  FETCH_DEPLOYMENTS_SUCCESS,\n  FETCH_DEPLOYMENTS_REQUEST,\n  FetchDeploymentsRequestAction,\n  FETCH_DEPLOYMENTS_FAILURE\n} from './actions'\nimport { ProgressStage, Deployment } from './types'\n\nexport type DeploymentState = {\n  data: DataByKey<Deployment>\n  progress: {\n    stage: ProgressStage\n    value: number\n  }\n  loading: LoadingState\n  error: string | null\n}\n\nexport const INITIAL_STATE: DeploymentState = {\n  data: {},\n  progress: {\n    stage: ProgressStage.NONE,\n    value: 0\n  },\n  loading: [],\n  error: null\n}\n\nexport type DeploymentReducerAction =\n  | DeployToPoolRequestAction\n  | DeployToPoolSuccessAction\n  | DeployToPoolFailureAction\n  | SetProgressAction\n  | DeployToLandRequestAction\n  | DeployToLandSuccessAction\n  | DeployToLandFailureAction\n  | ClearDeploymentRequestAction\n  | ClearDeploymentSuccessAction\n  | ClearDeploymentFailureAction\n  | DeleteProjectAction\n  | FetchDeploymentsRequestAction\n  | FetchDeploymentsSuccessAction\n  | FetchDeploymentsFailureAction\n\nexport const deploymentReducer = (state = INITIAL_STATE, action: DeploymentReducerAction): DeploymentState => {\n  switch (action.type) {\n    case DEPLOY_TO_POOL_REQUEST: {\n      return {\n        ...state,\n        error: null,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case DEPLOY_TO_POOL_SUCCESS: {\n      return {\n        ...state,\n        data: {\n          ...state.data\n        },\n        progress: {\n          stage: ProgressStage.NONE,\n          value: 0\n        },\n        error: null,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case DEPLOY_TO_POOL_FAILURE: {\n      return {\n        ...state,\n        data: {\n          ...state.data\n        },\n        progress: {\n          stage: ProgressStage.NONE,\n          value: 0\n        },\n        error: action.payload.error,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case DEPLOY_TO_LAND_REQUEST: {\n      return {\n        ...state,\n        error: null\n      }\n    }\n    case DEPLOY_TO_LAND_SUCCESS: {\n      const { deployment, overrideDeploymentId } = action.payload\n\n      const newData = {\n        ...state.data,\n        [deployment.id]: deployment\n      }\n\n      if (overrideDeploymentId) {\n        delete newData[overrideDeploymentId]\n      }\n\n      return {\n        ...state,\n        data: newData,\n        progress: {\n          stage: ProgressStage.NONE,\n          value: 0\n        }\n      }\n    }\n    case DEPLOY_TO_LAND_FAILURE: {\n      return {\n        ...state,\n        data: {\n          ...state.data\n        },\n        error: action.payload.error\n      }\n    }\n    case SET_PROGRESS: {\n      const { stage, value } = action.payload\n\n      return {\n        ...state,\n        progress: {\n          ...state.progress,\n          stage,\n          value\n        }\n      }\n    }\n    case CLEAR_DEPLOYMENT_REQUEST: {\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case CLEAR_DEPLOYMENT_SUCCESS: {\n      const { deploymentId } = action.payload\n      const newState = {\n        ...state,\n        data: {\n          ...state.data\n        },\n        progress: {\n          stage: ProgressStage.NONE,\n          value: 0\n        },\n        loading: loadingReducer(state.loading, action)\n      }\n      delete newState.data[deploymentId]\n      return newState\n    }\n    case CLEAR_DEPLOYMENT_FAILURE: {\n      return {\n        ...state,\n        data: {\n          ...state.data\n        },\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error\n      }\n    }\n    case DELETE_PROJECT: {\n      const { project } = action.payload\n      const newState = {\n        ...state,\n        data: {\n          ...state.data\n        },\n        progress: {\n          stage: ProgressStage.NONE,\n          value: 0\n        }\n      }\n      delete newState.data[project.id]\n      return newState\n    }\n    case FETCH_DEPLOYMENTS_REQUEST: {\n      return {\n        ...state,\n        error: null,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case FETCH_DEPLOYMENTS_SUCCESS: {\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        data: {\n          ...state.data,\n          ...action.payload.deployments.reduce<DataByKey<Deployment>>((obj, deployment) => {\n            obj[deployment.id] = deployment\n            return obj\n          }, {})\n        }\n      }\n    }\n    case FETCH_DEPLOYMENTS_FAILURE: {\n      return {\n        ...state,\n        error: action.payload.error,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}