{"ast":null,"code":"import _slicedToArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectWithoutProperties from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/Modals/EstateEditorModal/EstateEditorModal.tsx\";\nimport * as React from 'react';\nimport { ModalNavigation, ModalActions, Button, Field } from 'decentraland-ui';\nimport Modal from 'decentraland-dapps/dist/containers/Modal';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { Atlas } from 'components/Atlas';\nimport Info from 'components/Info';\nimport { getCenter, getSelection, getCoordMatcher, areConnected, coordsToId, getCoordsToAdd as _getCoordsToAdd, getCoordsToRemove as _getCoordsToRemove, MAX_PARCELS_PER_TX } from 'modules/land/utils';\nimport { LandType } from 'modules/land/types';\nimport './EstateEditorModal.css';\n\nvar getInitialCoords = function getInitialCoords(land) {\n  var x = 0;\n  var y = 0;\n\n  if (land.type === LandType.PARCEL) {\n    x = land.x;\n    y = land.y;\n  } else {\n    var selection = getSelection(land);\n    var center = getCenter(selection);\n    x = center[0];\n    y = center[1];\n  }\n\n  return [x, y];\n};\n\nvar getInitialSelection = function getInitialSelection(land) {\n  return land.type === LandType.PARCEL ? [{\n    x: land.x,\n    y: land.y\n  }] : land.parcels.map(function (parcel) {\n    return {\n      x: parcel.x,\n      y: parcel.y\n    };\n  });\n};\n\nvar getOriginalParcels = function getOriginalParcels(land) {\n  return land.type === LandType.PARCEL ? [] : land.parcels.map(function (_ref) {\n    var id = _ref.id,\n        coord = _objectWithoutProperties(_ref, [\"id\"]);\n\n    return coord;\n  });\n};\n\nvar EstateEditorModal = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(EstateEditorModal, _React$PureComponent);\n\n  function EstateEditorModal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EstateEditorModal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EstateEditorModal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      name: '',\n      description: '',\n      selection: getInitialSelection(_this.props.metadata.land),\n      showCreationForm: false\n    };\n\n    _this.handleClick = function (x, y) {\n      if (!_this.isSelected(x, y)) {\n        _this.addParcel(x, y);\n\n        return;\n      } else {\n        _this.removeParcel(x, y);\n\n        return;\n      }\n    };\n\n    _this.selectedStrokeLayer = function (x, y) {\n      return _this.isSelected(x, y) ? {\n        color: '#ff0044',\n        scale: 1.4\n      } : null;\n    };\n\n    _this.selectedFillLayer = function (x, y) {\n      return _this.isSelected(x, y) ? {\n        color: '#ff9990',\n        scale: 1.2\n      } : null;\n    };\n\n    _this.handleSubmit = function () {\n      var _this$props = _this.props,\n          onCreateEstate = _this$props.onCreateEstate,\n          onEditEstate = _this$props.onEditEstate,\n          metadata = _this$props.metadata;\n      var land = metadata.land;\n\n      if (land.type === LandType.PARCEL) {\n        // creating a new estate\n        if (!_this.state.showCreationForm) {\n          _this.setState({\n            showCreationForm: true\n          });\n        } else {\n          var _this$state = _this.state,\n              name = _this$state.name,\n              description = _this$state.description,\n              selection = _this$state.selection;\n          onCreateEstate(name, description, selection);\n        }\n      } else {\n        // editing an existing estate\n        var toAdd = _this.getCoordsToAdd();\n\n        var toRemove = _this.getCoordsToRemove();\n\n        onEditEstate(land, toAdd, toRemove);\n      }\n    };\n\n    _this.handleCancel = function () {\n      var onClose = _this.props.onClose;\n      var showCreationForm = _this.state.showCreationForm;\n\n      if (showCreationForm) {\n        _this.setState({\n          showCreationForm: false\n        });\n      } else {\n        onClose();\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(EstateEditorModal, [{\n    key: \"isSelected\",\n    value: function isSelected(x, y) {\n      var coord = {\n        x: x,\n        y: y\n      };\n      return this.state.selection.some(getCoordMatcher(coord));\n    }\n  }, {\n    key: \"addParcel\",\n    value: function addParcel(x, y) {\n      // check if coord is owned by the user\n      var tile = this.props.landTiles[coordsToId(x, y)];\n      var land = tile ? tile.land : null;\n      if (!land) return; // check if coord is not part of other estate\n\n      if (land.type === LandType.ESTATE && land.id !== this.props.metadata.land.id) return; // check if coord is connected to the rest of the selection\n\n      var coord = {\n        x: x,\n        y: y\n      };\n      var selection = [].concat(_toConsumableArray(this.state.selection), [coord]);\n      if (!areConnected(selection)) return; // add coord to selection\n\n      this.setState({\n        selection: selection\n      });\n    }\n  }, {\n    key: \"removeParcel\",\n    value: function removeParcel(x, y) {\n      // check if cood is actually selected\n      if (!this.isSelected(x, y)) return; // compute new selection\n\n      var coord = {\n        x: x,\n        y: y\n      };\n      var isCoord = getCoordMatcher(coord);\n      var selection = this.state.selection.filter(function (coord) {\n        return !isCoord(coord);\n      }); // check if new selection is connected\n\n      if (!areConnected(selection)) return; // remove coord from selection\n\n      this.setState({\n        selection: selection\n      });\n    }\n  }, {\n    key: \"isTooSmall\",\n    value: function isTooSmall() {\n      return this.state.selection.length < 2;\n    }\n  }, {\n    key: \"getCoordsToAdd\",\n    value: function getCoordsToAdd() {\n      var land = this.props.metadata.land;\n      return _getCoordsToAdd(getOriginalParcels(land), this.state.selection);\n    }\n  }, {\n    key: \"getCoordsToRemove\",\n    value: function getCoordsToRemove() {\n      var land = this.props.metadata.land;\n      return _getCoordsToRemove(getOriginalParcels(land), this.state.selection);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var metadata = this.props.metadata;\n      var _this$state2 = this.state,\n          name = _this$state2.name,\n          description = _this$state2.description,\n          showCreationForm = _this$state2.showCreationForm;\n      var land = metadata.land;\n\n      var _getInitialCoords = getInitialCoords(land),\n          _getInitialCoords2 = _slicedToArray(_getInitialCoords, 2),\n          x = _getInitialCoords2[0],\n          y = _getInitialCoords2[1];\n\n      var isTooSmall = this.isTooSmall();\n      var coordsToAdd = this.getCoordsToAdd();\n      var coordsToRemove = this.getCoordsToRemove();\n      var hasReachedAddLimit = coordsToAdd.length > MAX_PARCELS_PER_TX;\n      var hasReachedRemoveLimit = coordsToRemove.length > MAX_PARCELS_PER_TX;\n      var isValidSelection = !isTooSmall && !hasReachedAddLimit && !hasReachedRemoveLimit;\n      var isValidForm = !showCreationForm || name.length > 0;\n      var isEditing = land.type === LandType.ESTATE;\n      var isDisabled = !isValidSelection || !isValidForm;\n      var needsTwoTxs = !isDisabled && coordsToAdd.length > 0 && coordsToRemove.length > 0;\n      var onClose;\n      var onBack;\n\n      if (showCreationForm) {\n        onBack = this.handleCancel;\n      } else {\n        onClose = this.handleCancel;\n      }\n\n      return /*#__PURE__*/React.createElement(Modal, {\n        name: this.props.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ModalNavigation, {\n        title: isEditing ? t('estate_editor.title_edit') : t('estate_editor.title_create'),\n        subtitle: isEditing ? t('estate_editor.subtitle_edit') : showCreationForm ? t('estate_editor.subtitle_form') : t('estate_editor.subtitle_create'),\n        onClose: onClose,\n        onBack: onBack,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 9\n        }\n      }), showCreationForm ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Field, {\n        label: t('estate_editor.name_label'),\n        placeholder: t('estate_editor.name_placeholder'),\n        value: name,\n        onChange: function onChange(_event, props) {\n          return _this2.setState({\n            name: props.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Field, {\n        label: t('estate_editor.description_label'),\n        placeholder: t('estate_editor.description_placeholder'),\n        value: description,\n        onChange: function onChange(_event, props) {\n          return _this2.setState({\n            description: props.value\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }\n      })) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"map\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Atlas, {\n        x: x,\n        y: y,\n        onClick: this.handleClick,\n        hasLink: false,\n        layers: [this.selectedStrokeLayer, this.selectedFillLayer],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"messages-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"messages\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }\n      }, hasReachedAddLimit ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"message warning\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 17\n        }\n      }), t('estate_editor.add_limit_reached', {\n        max: MAX_PARCELS_PER_TX\n      })) : null, hasReachedRemoveLimit ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"message warning\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 17\n        }\n      }), t('estate_editor.remove_limit_reached', {\n        max: MAX_PARCELS_PER_TX\n      })) : null, needsTwoTxs ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"message info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Info, {\n        className: \"info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 17\n        }\n      }), t('estate_editor.needs_two_txs', {\n        toAdd: coordsToAdd.length,\n        toRemove: coordsToRemove.length\n      })) : null)), /*#__PURE__*/React.createElement(ModalActions, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.handleCancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }\n      }, isEditing || !showCreationForm ? t('global.cancel') : t('global.back')), /*#__PURE__*/React.createElement(Button, {\n        primary: true,\n        disabled: isDisabled,\n        onClick: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }\n      }, isEditing || showCreationForm ? t('global.submit') : t('global.continue'))));\n    }\n  }]);\n\n  return EstateEditorModal;\n}(React.PureComponent);\n\nexport { EstateEditorModal as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/EstateEditorModal/EstateEditorModal.tsx"],"names":["React","ModalNavigation","ModalActions","Button","Field","Modal","t","Atlas","Info","getCenter","getSelection","getCoordMatcher","areConnected","coordsToId","getCoordsToAdd","getCoordsToRemove","MAX_PARCELS_PER_TX","LandType","getInitialCoords","land","x","y","type","PARCEL","selection","center","getInitialSelection","parcels","map","parcel","getOriginalParcels","id","coord","EstateEditorModal","state","name","description","props","metadata","showCreationForm","handleClick","isSelected","addParcel","removeParcel","selectedStrokeLayer","color","scale","selectedFillLayer","handleSubmit","onCreateEstate","onEditEstate","setState","toAdd","toRemove","handleCancel","onClose","some","tile","landTiles","ESTATE","isCoord","filter","length","isTooSmall","coordsToAdd","coordsToRemove","hasReachedAddLimit","hasReachedRemoveLimit","isValidSelection","isValidForm","isEditing","isDisabled","needsTwoTxs","onBack","_event","value","max","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { ModalNavigation, ModalActions, Button, Layer, Coord, Field } from 'decentraland-ui'\nimport Modal from 'decentraland-dapps/dist/containers/Modal'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { Atlas } from 'components/Atlas'\nimport Info from 'components/Info'\nimport {\n  getCenter,\n  getSelection,\n  getCoordMatcher,\n  areConnected,\n  coordsToId,\n  getCoordsToAdd,\n  getCoordsToRemove,\n  MAX_PARCELS_PER_TX\n} from 'modules/land/utils'\nimport { LandType, Land } from 'modules/land/types'\nimport { Props, State } from './EstateEditorModal.types'\nimport './EstateEditorModal.css'\n\nconst getInitialCoords = (land: Land) => {\n  let x = 0\n  let y = 0\n  if (land.type === LandType.PARCEL) {\n    x = land.x!\n    y = land.y!\n  } else {\n    const selection = getSelection(land)\n    const center = getCenter(selection)\n    x = center[0]\n    y = center[1]\n  }\n\n  return [x, y]\n}\n\nconst getInitialSelection = (land: Land) => {\n  return land.type === LandType.PARCEL ? [{ x: land.x!, y: land.y! }] : land.parcels!.map(parcel => ({ x: parcel.x, y: parcel.y }))\n}\n\nconst getOriginalParcels = (land: Land) => {\n  return land.type === LandType.PARCEL ? [] : land.parcels!.map(({ id, ...coord }) => coord)\n}\n\nexport default class EstateEditorModal extends React.PureComponent<Props, State> {\n  state: State = {\n    name: '',\n    description: '',\n    selection: getInitialSelection(this.props.metadata.land),\n    showCreationForm: false\n  }\n\n  handleClick = (x: number, y: number) => {\n    if (!this.isSelected(x, y)) {\n      this.addParcel(x, y)\n      return\n    } else {\n      this.removeParcel(x, y)\n      return\n    }\n  }\n\n  isSelected(x: number, y: number) {\n    const coord: Coord = { x, y }\n    return this.state.selection.some(getCoordMatcher(coord))\n  }\n\n  addParcel(x: number, y: number) {\n    // check if coord is owned by the user\n    const tile = this.props.landTiles[coordsToId(x, y)]\n    const land = tile ? tile.land : null\n    if (!land) return\n\n    // check if coord is not part of other estate\n    if (land.type === LandType.ESTATE && land.id !== this.props.metadata.land.id) return\n\n    // check if coord is connected to the rest of the selection\n    const coord: Coord = { x, y }\n    const selection = [...this.state.selection, coord]\n    if (!areConnected(selection)) return\n\n    // add coord to selection\n    this.setState({ selection })\n  }\n\n  removeParcel(x: number, y: number) {\n    // check if cood is actually selected\n    if (!this.isSelected(x, y)) return\n\n    // compute new selection\n    const coord: Coord = { x, y }\n    const isCoord = getCoordMatcher(coord)\n    const selection = this.state.selection.filter(coord => !isCoord(coord))\n\n    // check if new selection is connected\n    if (!areConnected(selection)) return\n\n    // remove coord from selection\n    this.setState({ selection })\n  }\n\n  selectedStrokeLayer: Layer = (x, y) => {\n    return this.isSelected(x, y) ? { color: '#ff0044', scale: 1.4 } : null\n  }\n\n  selectedFillLayer: Layer = (x, y) => {\n    return this.isSelected(x, y) ? { color: '#ff9990', scale: 1.2 } : null\n  }\n\n  isTooSmall() {\n    return this.state.selection.length < 2\n  }\n\n  getCoordsToAdd() {\n    const { land } = this.props.metadata\n    return getCoordsToAdd(getOriginalParcels(land), this.state.selection)\n  }\n\n  getCoordsToRemove() {\n    const { land } = this.props.metadata\n    return getCoordsToRemove(getOriginalParcels(land), this.state.selection)\n  }\n\n  handleSubmit = () => {\n    const { onCreateEstate, onEditEstate, metadata } = this.props\n    const { land } = metadata\n    if (land.type === LandType.PARCEL) {\n      // creating a new estate\n      if (!this.state.showCreationForm) {\n        this.setState({ showCreationForm: true })\n      } else {\n        const { name, description, selection } = this.state\n        onCreateEstate(name, description, selection)\n      }\n    } else {\n      // editing an existing estate\n      const toAdd = this.getCoordsToAdd()\n      const toRemove = this.getCoordsToRemove()\n      onEditEstate(land, toAdd, toRemove)\n    }\n  }\n\n  handleCancel = () => {\n    const { onClose } = this.props\n    const { showCreationForm } = this.state\n    if (showCreationForm) {\n      this.setState({ showCreationForm: false })\n    } else {\n      onClose()\n    }\n  }\n\n  render() {\n    const { metadata } = this.props\n    const { name, description, showCreationForm } = this.state\n    const { land } = metadata\n    const [x, y] = getInitialCoords(land)\n\n    const isTooSmall = this.isTooSmall()\n    const coordsToAdd = this.getCoordsToAdd()\n    const coordsToRemove = this.getCoordsToRemove()\n    const hasReachedAddLimit = coordsToAdd.length > MAX_PARCELS_PER_TX\n    const hasReachedRemoveLimit = coordsToRemove.length > MAX_PARCELS_PER_TX\n    const isValidSelection = !isTooSmall && !hasReachedAddLimit && !hasReachedRemoveLimit\n    const isValidForm = !showCreationForm || name.length > 0\n    const isEditing = land.type === LandType.ESTATE\n    const isDisabled = !isValidSelection || !isValidForm\n    const needsTwoTxs = !isDisabled && coordsToAdd.length > 0 && coordsToRemove.length > 0\n\n    let onClose\n    let onBack\n    if (showCreationForm) {\n      onBack = this.handleCancel\n    } else {\n      onClose = this.handleCancel\n    }\n\n    return (\n      <Modal name={this.props.name}>\n        <ModalNavigation\n          title={isEditing ? t('estate_editor.title_edit') : t('estate_editor.title_create')}\n          subtitle={\n            isEditing\n              ? t('estate_editor.subtitle_edit')\n              : showCreationForm\n              ? t('estate_editor.subtitle_form')\n              : t('estate_editor.subtitle_create')\n          }\n          onClose={onClose}\n          onBack={onBack}\n        />\n\n        {showCreationForm ? (\n          <div className=\"form\">\n            <Field\n              label={t('estate_editor.name_label')}\n              placeholder={t('estate_editor.name_placeholder')}\n              value={name}\n              onChange={(_event, props) => this.setState({ name: props.value })}\n            ></Field>\n            <Field\n              label={t('estate_editor.description_label')}\n              placeholder={t('estate_editor.description_placeholder')}\n              value={description}\n              onChange={(_event, props) => this.setState({ description: props.value })}\n            ></Field>\n          </div>\n        ) : (\n          <div className=\"map\">\n            <Atlas x={x} y={y} onClick={this.handleClick} hasLink={false} layers={[this.selectedStrokeLayer, this.selectedFillLayer]} />\n          </div>\n        )}\n        <div className=\"messages-container\">\n          <div className=\"messages\">\n            {hasReachedAddLimit ? (\n              <div className=\"message warning\">\n                <div className=\"icon\" />\n                {t('estate_editor.add_limit_reached', { max: MAX_PARCELS_PER_TX })}\n              </div>\n            ) : null}\n            {hasReachedRemoveLimit ? (\n              <div className=\"message warning\">\n                <div className=\"icon\" />\n                {t('estate_editor.remove_limit_reached', { max: MAX_PARCELS_PER_TX })}\n              </div>\n            ) : null}\n            {needsTwoTxs ? (\n              <div className=\"message info\">\n                <Info className=\"info\" />\n                {t('estate_editor.needs_two_txs', { toAdd: coordsToAdd.length, toRemove: coordsToRemove.length })}\n              </div>\n            ) : null}\n          </div>\n        </div>\n        <ModalActions>\n          <Button onClick={this.handleCancel}>{isEditing || !showCreationForm ? t('global.cancel') : t('global.back')}</Button>\n          <Button primary disabled={isDisabled} onClick={this.handleSubmit}>\n            {isEditing || showCreationForm ? t('global.submit') : t('global.continue')}\n          </Button>\n        </ModalActions>\n      </Modal>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}