{"ast":null,"code":"import _slicedToArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/SceneDetailPage/DeploymentDetail/DeploymentDetail.tsx\";\nimport * as React from 'react';\nimport { Dropdown, Button, Icon } from 'decentraland-ui';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { idToCoords, coordsToId, hoverStrokeByRole, hoverFillByRole } from 'modules/land/utils';\nimport { locations } from 'routing/locations';\nimport { getStatus } from 'modules/deployment/utils';\nimport { DeploymentStatus } from 'modules/deployment/types';\nimport { Atlas } from 'components/Atlas';\nimport SceneStats from 'components/SceneStats';\nimport { DeployModalView } from 'components/Modals/DeployModal/DeployModal.types';\nimport './DeploymentDetail.css';\n\nvar DeploymentDetail = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DeploymentDetail, _React$PureComponent);\n\n  function DeploymentDetail() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DeploymentDetail);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DeploymentDetail)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getHighlightLayer = function (color, scale) {\n      return function (x, y) {\n        var _this$props = _this.props,\n            deployment = _this$props.deployment,\n            landTiles = _this$props.landTiles;\n        var id = coordsToId(x, y);\n        var tile = landTiles[id];\n        if (!tile) return null;\n        return deployment.parcels.some(function (parcel) {\n          return parcel === id;\n        }) ? {\n          color: color[tile.land.role],\n          scale: scale\n        } : null;\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(DeploymentDetail, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          project = _this$props2.project,\n          deployment = _this$props2.deployment,\n          landTiles = _this$props2.landTiles,\n          onNavigate = _this$props2.onNavigate,\n          onOpenModal = _this$props2.onOpenModal;\n\n      var _idToCoords = idToCoords(deployment.base),\n          _idToCoords2 = _slicedToArray(_idToCoords, 2),\n          x = _idToCoords2[0],\n          y = _idToCoords2[1];\n\n      var landId = deployment.base in landTiles ? landTiles[deployment.base].land.id : null;\n      var status = getStatus(project, deployment);\n      var statusClass = 'online';\n      var statusText = t('scene_detail_page.online');\n\n      if (status === DeploymentStatus.NEEDS_SYNC) {\n        statusText = t('scene_detail_page.unsynced');\n        statusClass = 'needs-sync';\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"DeploymentDetail \".concat(landId ? 'clickable' : ''),\n        onClick: function onClick() {\n          return landId && onNavigate(locations.landDetail(landId));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"atlas-wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Atlas, {\n        x: x,\n        y: y,\n        isDraggable: false,\n        zoom: 0.75,\n        layers: [this.getHighlightLayer(hoverStrokeByRole, 1.4), this.getHighlightLayer(hoverFillByRole, 1.2)],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"stat\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"status \".concat(statusClass),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }\n      }), statusText), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"secondary-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }\n      }, t('scene_detail_page.status'))), /*#__PURE__*/React.createElement(SceneStats, {\n        deployment: deployment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Dropdown, {\n        trigger: /*#__PURE__*/React.createElement(Button, {\n          basic: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(Icon, {\n          name: \"ellipsis horizontal\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }\n        })),\n        inline: true,\n        direction: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Dropdown.Menu, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Dropdown.Item, {\n        text: t('scene_detail_page.actions.unpublish'),\n        onClick: function onClick() {\n          return onOpenModal('DeployModal', {\n            view: DeployModalView.CLEAR_DEPLOYMENT,\n            deploymentId: deployment.id\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return DeploymentDetail;\n}(React.PureComponent);\n\nexport { DeploymentDetail as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/SceneDetailPage/DeploymentDetail/DeploymentDetail.tsx"],"names":["React","Dropdown","Button","Icon","t","idToCoords","coordsToId","hoverStrokeByRole","hoverFillByRole","locations","getStatus","DeploymentStatus","Atlas","SceneStats","DeployModalView","DeploymentDetail","getHighlightLayer","color","scale","x","y","props","deployment","landTiles","id","tile","parcels","some","parcel","land","role","project","onNavigate","onOpenModal","base","landId","status","statusClass","statusText","NEEDS_SYNC","landDetail","view","CLEAR_DEPLOYMENT","deploymentId","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Layer, Dropdown, Button, Icon } from 'decentraland-ui'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { idToCoords, coordsToId, hoverStrokeByRole, hoverFillByRole } from 'modules/land/utils'\nimport { locations } from 'routing/locations'\nimport { getStatus } from 'modules/deployment/utils'\nimport { DeploymentStatus } from 'modules/deployment/types'\nimport { RoleType } from 'modules/land/types'\nimport { Atlas } from 'components/Atlas'\nimport SceneStats from 'components/SceneStats'\nimport { DeployModalView, DeployModalMetadata } from 'components/Modals/DeployModal/DeployModal.types'\nimport { Props } from './DeploymentDetail.types'\nimport './DeploymentDetail.css'\n\nexport default class DeploymentDetail extends React.PureComponent<Props> {\n  getHighlightLayer = (color: Record<RoleType, string>, scale: number): Layer => (x, y) => {\n    const { deployment, landTiles } = this.props\n    const id = coordsToId(x, y)\n    const tile = landTiles[id]\n    if (!tile) return null\n    return deployment.parcels.some(parcel => parcel === id) ? { color: color[tile.land.role], scale } : null\n  }\n\n  render() {\n    const { project, deployment, landTiles, onNavigate, onOpenModal } = this.props\n    const [x, y] = idToCoords(deployment.base)\n    const landId = deployment.base in landTiles ? landTiles[deployment.base].land.id : null\n    const status = getStatus(project, deployment)\n    let statusClass = 'online'\n    let statusText = t('scene_detail_page.online')\n    if (status === DeploymentStatus.NEEDS_SYNC) {\n      statusText = t('scene_detail_page.unsynced')\n      statusClass = 'needs-sync'\n    }\n    return (\n      <div className={`DeploymentDetail ${landId ? 'clickable' : ''}`} onClick={() => landId && onNavigate(locations.landDetail(landId))}>\n        <div className=\"atlas-wrapper\">\n          <Atlas\n            x={x}\n            y={y}\n            isDraggable={false}\n            zoom={0.75}\n            layers={[this.getHighlightLayer(hoverStrokeByRole, 1.4), this.getHighlightLayer(hoverFillByRole, 1.2)]}\n          />\n        </div>\n        <div className=\"stat\">\n          <div className=\"title\">\n            <i className={`status ${statusClass}`} />\n            {statusText}\n          </div>\n          <div className=\"secondary-text\">{t('scene_detail_page.status')}</div>\n        </div>\n        <SceneStats deployment={deployment} />\n        <Dropdown\n          trigger={\n            <Button basic>\n              <Icon name=\"ellipsis horizontal\" />\n            </Button>\n          }\n          inline\n          direction=\"left\"\n        >\n          <Dropdown.Menu>\n            <Dropdown.Item\n              text={t('scene_detail_page.actions.unpublish')}\n              onClick={() =>\n                onOpenModal('DeployModal', { view: DeployModalView.CLEAR_DEPLOYMENT, deploymentId: deployment.id } as DeployModalMetadata)\n              }\n            />\n          </Dropdown.Menu>\n        </Dropdown>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}