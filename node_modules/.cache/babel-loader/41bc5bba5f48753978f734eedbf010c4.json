{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable\";\nimport { Gamepad } from \"./gamepad\";\n/**\r\n * Defines supported buttons for DualShock compatible gamepads\r\n */\n\nexport var DualShockButton;\n\n(function (DualShockButton) {\n  /** Cross */\n  DualShockButton[DualShockButton[\"Cross\"] = 0] = \"Cross\";\n  /** Circle */\n\n  DualShockButton[DualShockButton[\"Circle\"] = 1] = \"Circle\";\n  /** Square */\n\n  DualShockButton[DualShockButton[\"Square\"] = 2] = \"Square\";\n  /** Triangle */\n\n  DualShockButton[DualShockButton[\"Triangle\"] = 3] = \"Triangle\";\n  /** L1 */\n\n  DualShockButton[DualShockButton[\"L1\"] = 4] = \"L1\";\n  /** R1 */\n\n  DualShockButton[DualShockButton[\"R1\"] = 5] = \"R1\";\n  /** Share */\n\n  DualShockButton[DualShockButton[\"Share\"] = 8] = \"Share\";\n  /** Options */\n\n  DualShockButton[DualShockButton[\"Options\"] = 9] = \"Options\";\n  /** Left stick */\n\n  DualShockButton[DualShockButton[\"LeftStick\"] = 10] = \"LeftStick\";\n  /** Right stick */\n\n  DualShockButton[DualShockButton[\"RightStick\"] = 11] = \"RightStick\";\n})(DualShockButton || (DualShockButton = {}));\n/** Defines values for DualShock DPad  */\n\n\nexport var DualShockDpad;\n\n(function (DualShockDpad) {\n  /** Up */\n  DualShockDpad[DualShockDpad[\"Up\"] = 12] = \"Up\";\n  /** Down */\n\n  DualShockDpad[DualShockDpad[\"Down\"] = 13] = \"Down\";\n  /** Left */\n\n  DualShockDpad[DualShockDpad[\"Left\"] = 14] = \"Left\";\n  /** Right */\n\n  DualShockDpad[DualShockDpad[\"Right\"] = 15] = \"Right\";\n})(DualShockDpad || (DualShockDpad = {}));\n/**\r\n * Defines a DualShock gamepad\r\n */\n\n\nvar DualShockPad =\n/** @class */\nfunction (_super) {\n  __extends(DualShockPad, _super);\n  /**\r\n   * Creates a new DualShock gamepad object\r\n   * @param id defines the id of this gamepad\r\n   * @param index defines its index\r\n   * @param gamepad defines the internal HTML gamepad object\r\n   */\n\n\n  function DualShockPad(id, index, gamepad) {\n    var _this = _super.call(this, id.replace(\"STANDARD GAMEPAD\", \"SONY PLAYSTATION DUALSHOCK\"), index, gamepad, 0, 1, 2, 3) || this;\n\n    _this._leftTrigger = 0;\n    _this._rightTrigger = 0;\n    /** Observable raised when a button is pressed */\n\n    _this.onButtonDownObservable = new Observable();\n    /** Observable raised when a button is released */\n\n    _this.onButtonUpObservable = new Observable();\n    /** Observable raised when a pad is pressed */\n\n    _this.onPadDownObservable = new Observable();\n    /** Observable raised when a pad is released */\n\n    _this.onPadUpObservable = new Observable();\n    _this._buttonCross = 0;\n    _this._buttonCircle = 0;\n    _this._buttonSquare = 0;\n    _this._buttonTriangle = 0;\n    _this._buttonShare = 0;\n    _this._buttonOptions = 0;\n    _this._buttonL1 = 0;\n    _this._buttonR1 = 0;\n    _this._buttonLeftStick = 0;\n    _this._buttonRightStick = 0;\n    _this._dPadUp = 0;\n    _this._dPadDown = 0;\n    _this._dPadLeft = 0;\n    _this._dPadRight = 0;\n    _this.type = Gamepad.DUALSHOCK;\n    return _this;\n  }\n  /**\r\n   * Defines the callback to call when left trigger is pressed\r\n   * @param callback defines the callback to use\r\n   */\n\n\n  DualShockPad.prototype.onlefttriggerchanged = function (callback) {\n    this._onlefttriggerchanged = callback;\n  };\n  /**\r\n   * Defines the callback to call when right trigger is pressed\r\n   * @param callback defines the callback to use\r\n   */\n\n\n  DualShockPad.prototype.onrighttriggerchanged = function (callback) {\n    this._onrighttriggerchanged = callback;\n  };\n\n  Object.defineProperty(DualShockPad.prototype, \"leftTrigger\", {\n    /**\r\n     * Gets the left trigger value\r\n     */\n    get: function get() {\n      return this._leftTrigger;\n    },\n\n    /**\r\n     * Sets the left trigger value\r\n     */\n    set: function set(newValue) {\n      if (this._onlefttriggerchanged && this._leftTrigger !== newValue) {\n        this._onlefttriggerchanged(newValue);\n      }\n\n      this._leftTrigger = newValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"rightTrigger\", {\n    /**\r\n     * Gets the right trigger value\r\n     */\n    get: function get() {\n      return this._rightTrigger;\n    },\n\n    /**\r\n     * Sets the right trigger value\r\n     */\n    set: function set(newValue) {\n      if (this._onrighttriggerchanged && this._rightTrigger !== newValue) {\n        this._onrighttriggerchanged(newValue);\n      }\n\n      this._rightTrigger = newValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Defines the callback to call when a button is pressed\r\n   * @param callback defines the callback to use\r\n   */\n\n  DualShockPad.prototype.onbuttondown = function (callback) {\n    this._onbuttondown = callback;\n  };\n  /**\r\n   * Defines the callback to call when a button is released\r\n   * @param callback defines the callback to use\r\n   */\n\n\n  DualShockPad.prototype.onbuttonup = function (callback) {\n    this._onbuttonup = callback;\n  };\n  /**\r\n   * Defines the callback to call when a pad is pressed\r\n   * @param callback defines the callback to use\r\n   */\n\n\n  DualShockPad.prototype.ondpaddown = function (callback) {\n    this._ondpaddown = callback;\n  };\n  /**\r\n   * Defines the callback to call when a pad is released\r\n   * @param callback defines the callback to use\r\n   */\n\n\n  DualShockPad.prototype.ondpadup = function (callback) {\n    this._ondpadup = callback;\n  };\n\n  DualShockPad.prototype._setButtonValue = function (newValue, currentValue, buttonType) {\n    if (newValue !== currentValue) {\n      if (newValue === 1) {\n        if (this._onbuttondown) {\n          this._onbuttondown(buttonType);\n        }\n\n        this.onButtonDownObservable.notifyObservers(buttonType);\n      }\n\n      if (newValue === 0) {\n        if (this._onbuttonup) {\n          this._onbuttonup(buttonType);\n        }\n\n        this.onButtonUpObservable.notifyObservers(buttonType);\n      }\n    }\n\n    return newValue;\n  };\n\n  DualShockPad.prototype._setDPadValue = function (newValue, currentValue, buttonType) {\n    if (newValue !== currentValue) {\n      if (newValue === 1) {\n        if (this._ondpaddown) {\n          this._ondpaddown(buttonType);\n        }\n\n        this.onPadDownObservable.notifyObservers(buttonType);\n      }\n\n      if (newValue === 0) {\n        if (this._ondpadup) {\n          this._ondpadup(buttonType);\n        }\n\n        this.onPadUpObservable.notifyObservers(buttonType);\n      }\n    }\n\n    return newValue;\n  };\n\n  Object.defineProperty(DualShockPad.prototype, \"buttonCross\", {\n    /**\r\n     * Gets the value of the `Cross` button\r\n     */\n    get: function get() {\n      return this._buttonCross;\n    },\n\n    /**\r\n     * Sets the value of the `Cross` button\r\n     */\n    set: function set(value) {\n      this._buttonCross = this._setButtonValue(value, this._buttonCross, DualShockButton.Cross);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonCircle\", {\n    /**\r\n     * Gets the value of the `Circle` button\r\n     */\n    get: function get() {\n      return this._buttonCircle;\n    },\n\n    /**\r\n     * Sets the value of the `Circle` button\r\n     */\n    set: function set(value) {\n      this._buttonCircle = this._setButtonValue(value, this._buttonCircle, DualShockButton.Circle);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonSquare\", {\n    /**\r\n     * Gets the value of the `Square` button\r\n     */\n    get: function get() {\n      return this._buttonSquare;\n    },\n\n    /**\r\n     * Sets the value of the `Square` button\r\n     */\n    set: function set(value) {\n      this._buttonSquare = this._setButtonValue(value, this._buttonSquare, DualShockButton.Square);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonTriangle\", {\n    /**\r\n     * Gets the value of the `Triangle` button\r\n     */\n    get: function get() {\n      return this._buttonTriangle;\n    },\n\n    /**\r\n     * Sets the value of the `Triangle` button\r\n     */\n    set: function set(value) {\n      this._buttonTriangle = this._setButtonValue(value, this._buttonTriangle, DualShockButton.Triangle);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonOptions\", {\n    /**\r\n     * Gets the value of the `Options` button\r\n     */\n    get: function get() {\n      return this._buttonOptions;\n    },\n\n    /**\r\n     * Sets the value of the `Options` button\r\n     */\n    set: function set(value) {\n      this._buttonOptions = this._setButtonValue(value, this._buttonOptions, DualShockButton.Options);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonShare\", {\n    /**\r\n     * Gets the value of the `Share` button\r\n     */\n    get: function get() {\n      return this._buttonShare;\n    },\n\n    /**\r\n     * Sets the value of the `Share` button\r\n     */\n    set: function set(value) {\n      this._buttonShare = this._setButtonValue(value, this._buttonShare, DualShockButton.Share);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonL1\", {\n    /**\r\n     * Gets the value of the `L1` button\r\n     */\n    get: function get() {\n      return this._buttonL1;\n    },\n\n    /**\r\n     * Sets the value of the `L1` button\r\n     */\n    set: function set(value) {\n      this._buttonL1 = this._setButtonValue(value, this._buttonL1, DualShockButton.L1);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonR1\", {\n    /**\r\n     * Gets the value of the `R1` button\r\n     */\n    get: function get() {\n      return this._buttonR1;\n    },\n\n    /**\r\n     * Sets the value of the `R1` button\r\n     */\n    set: function set(value) {\n      this._buttonR1 = this._setButtonValue(value, this._buttonR1, DualShockButton.R1);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonLeftStick\", {\n    /**\r\n     * Gets the value of the Left joystick\r\n     */\n    get: function get() {\n      return this._buttonLeftStick;\n    },\n\n    /**\r\n     * Sets the value of the Left joystick\r\n     */\n    set: function set(value) {\n      this._buttonLeftStick = this._setButtonValue(value, this._buttonLeftStick, DualShockButton.LeftStick);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"buttonRightStick\", {\n    /**\r\n     * Gets the value of the Right joystick\r\n     */\n    get: function get() {\n      return this._buttonRightStick;\n    },\n\n    /**\r\n     * Sets the value of the Right joystick\r\n     */\n    set: function set(value) {\n      this._buttonRightStick = this._setButtonValue(value, this._buttonRightStick, DualShockButton.RightStick);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"dPadUp\", {\n    /**\r\n     * Gets the value of D-pad up\r\n     */\n    get: function get() {\n      return this._dPadUp;\n    },\n\n    /**\r\n     * Sets the value of D-pad up\r\n     */\n    set: function set(value) {\n      this._dPadUp = this._setDPadValue(value, this._dPadUp, DualShockDpad.Up);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"dPadDown\", {\n    /**\r\n     * Gets the value of D-pad down\r\n     */\n    get: function get() {\n      return this._dPadDown;\n    },\n\n    /**\r\n     * Sets the value of D-pad down\r\n     */\n    set: function set(value) {\n      this._dPadDown = this._setDPadValue(value, this._dPadDown, DualShockDpad.Down);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"dPadLeft\", {\n    /**\r\n     * Gets the value of D-pad left\r\n     */\n    get: function get() {\n      return this._dPadLeft;\n    },\n\n    /**\r\n     * Sets the value of D-pad left\r\n     */\n    set: function set(value) {\n      this._dPadLeft = this._setDPadValue(value, this._dPadLeft, DualShockDpad.Left);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(DualShockPad.prototype, \"dPadRight\", {\n    /**\r\n     * Gets the value of D-pad right\r\n     */\n    get: function get() {\n      return this._dPadRight;\n    },\n\n    /**\r\n     * Sets the value of D-pad right\r\n     */\n    set: function set(value) {\n      this._dPadRight = this._setDPadValue(value, this._dPadRight, DualShockDpad.Right);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Force the gamepad to synchronize with device values\r\n   */\n\n  DualShockPad.prototype.update = function () {\n    _super.prototype.update.call(this);\n\n    this.buttonCross = this.browserGamepad.buttons[0].value;\n    this.buttonCircle = this.browserGamepad.buttons[1].value;\n    this.buttonSquare = this.browserGamepad.buttons[2].value;\n    this.buttonTriangle = this.browserGamepad.buttons[3].value;\n    this.buttonL1 = this.browserGamepad.buttons[4].value;\n    this.buttonR1 = this.browserGamepad.buttons[5].value;\n    this.leftTrigger = this.browserGamepad.buttons[6].value;\n    this.rightTrigger = this.browserGamepad.buttons[7].value;\n    this.buttonShare = this.browserGamepad.buttons[8].value;\n    this.buttonOptions = this.browserGamepad.buttons[9].value;\n    this.buttonLeftStick = this.browserGamepad.buttons[10].value;\n    this.buttonRightStick = this.browserGamepad.buttons[11].value;\n    this.dPadUp = this.browserGamepad.buttons[12].value;\n    this.dPadDown = this.browserGamepad.buttons[13].value;\n    this.dPadLeft = this.browserGamepad.buttons[14].value;\n    this.dPadRight = this.browserGamepad.buttons[15].value;\n  };\n  /**\r\n   * Disposes the gamepad\r\n   */\n\n\n  DualShockPad.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.onButtonDownObservable.clear();\n    this.onButtonUpObservable.clear();\n    this.onPadDownObservable.clear();\n    this.onPadUpObservable.clear();\n  };\n\n  return DualShockPad;\n}(Gamepad);\n\nexport { DualShockPad };","map":null,"metadata":{},"sourceType":"module"}