{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LambdasClient = void 0;\n\nvar dcl_catalyst_commons_1 = require(\"dcl-catalyst-commons\");\n\nvar Helper_1 = require(\"./utils/Helper\");\n\nvar LambdasClient = /*#__PURE__*/function () {\n  function LambdasClient(options) {\n    _classCallCheck(this, LambdasClient);\n\n    this.lambdasUrl = (0, Helper_1.sanitizeUrl)(options.lambdasUrl);\n    this.fetcher = options.fetcher ? options.fetcher : new dcl_catalyst_commons_1.Fetcher({\n      headers: (0, Helper_1.getHeadersWithUserAgent)('lambdas-client')\n    });\n  }\n\n  _createClass(LambdasClient, [{\n    key: \"fetchProfiles\",\n    value: function fetchProfiles(ethAddresses, profileOptions, options) {\n      var queryParams = new Map();\n      queryParams.set('id', ethAddresses);\n\n      if (profileOptions === null || profileOptions === void 0 ? void 0 : profileOptions.fields) {\n        var fieldsValue = profileOptions === null || profileOptions === void 0 ? void 0 : profileOptions.fields.getFields();\n        queryParams.set('fields', [fieldsValue]);\n      }\n\n      if (profileOptions === null || profileOptions === void 0 ? void 0 : profileOptions.versions) {\n        queryParams.set('version', profileOptions.versions.map(function (it) {\n          return it.toString(10);\n        }));\n      }\n\n      return (0, Helper_1.splitAndFetch)({\n        fetcher: this.fetcher,\n        baseUrl: this.lambdasUrl,\n        path: '/profiles',\n        queryParams: queryParams,\n        options: options\n      });\n    }\n  }, {\n    key: \"fetchWearables\",\n    value: function fetchWearables(filters, options) {\n      var queryParams = (0, Helper_1.convertFiltersToQueryParams)(filters);\n\n      if (queryParams.size === 0) {\n        throw new Error('You must set at least one filter');\n      }\n\n      return (0, Helper_1.splitAndFetchPaginated)({\n        fetcher: this.fetcher,\n        baseUrl: this.lambdasUrl,\n        path: '/collections/wearables',\n        queryParams: queryParams,\n        uniqueBy: 'id',\n        elementsProperty: 'wearables',\n        options: options\n      });\n    }\n  }, {\n    key: \"fetchOwnedWearables\",\n    value: function fetchOwnedWearables(ethAddress, includeDefinitions, options) {\n      return (0, Helper_1.splitAndFetch)({\n        fetcher: this.fetcher,\n        baseUrl: this.lambdasUrl,\n        path: \"/collections/wearables-by-owner/\".concat(ethAddress),\n        queryParams: {\n          name: 'includeDefinitions',\n          values: [\"\".concat(includeDefinitions)]\n        },\n        options: options\n      });\n    }\n  }, {\n    key: \"fetchOwnedThirdPartyWearables\",\n    value: function fetchOwnedThirdPartyWearables(ethAddress, thirdPartyId, includeDefinitions, options) {\n      var queryParams = new Map([['collectionId', [thirdPartyId]], ['includeDefinitions', [\"\".concat(includeDefinitions)]]]);\n      return (0, Helper_1.splitAndFetch)({\n        fetcher: this.fetcher,\n        baseUrl: this.lambdasUrl,\n        path: \"/collections/wearables-by-owner/\".concat(ethAddress),\n        queryParams: queryParams,\n        options: options\n      });\n    }\n  }, {\n    key: \"fetchCatalystsApprovedByDAO\",\n    value: function fetchCatalystsApprovedByDAO(options) {\n      return this.fetcher.fetchJson(\"\".concat(this.lambdasUrl, \"/contracts/servers\"), options);\n    }\n  }, {\n    key: \"fetchLambdasStatus\",\n    value: function fetchLambdasStatus(options) {\n      return this.fetcher.fetchJson(\"\".concat(this.lambdasUrl, \"/status\"), options);\n    }\n  }, {\n    key: \"fetchPeerHealth\",\n    value: function fetchPeerHealth(options) {\n      return this.fetcher.fetchJson(\"\".concat(this.lambdasUrl, \"/health\"), options);\n    }\n  }, {\n    key: \"getLambdasUrl\",\n    value: function getLambdasUrl() {\n      return this.lambdasUrl;\n    }\n  }]);\n\n  return LambdasClient;\n}();\n\nexports.LambdasClient = LambdasClient;","map":null,"metadata":{},"sourceType":"script"}