{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger\";\nimport { Observable } from \"../Misc/observable\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Color3 } from '../Maths/math.color';\nimport { Gizmo } from \"./gizmo\";\nimport { AxisDragGizmo } from \"./axisDragGizmo\";\nimport { PlaneDragGizmo } from \"./planeDragGizmo\";\nimport { UtilityLayerRenderer } from \"../Rendering/utilityLayerRenderer\";\n/**\r\n * Gizmo that enables dragging a mesh along 3 axis\r\n */\n\nvar PositionGizmo =\n/** @class */\nfunction (_super) {\n  __extends(PositionGizmo, _super);\n  /**\r\n   * Creates a PositionGizmo\r\n   * @param gizmoLayer The utility layer the gizmo will be added to\r\n    @param thickness display gizmo axis thickness\r\n   */\n\n\n  function PositionGizmo(gizmoLayer, thickness, gizmoManager) {\n    if (gizmoLayer === void 0) {\n      gizmoLayer = UtilityLayerRenderer.DefaultUtilityLayer;\n    }\n\n    if (thickness === void 0) {\n      thickness = 1;\n    }\n\n    var _this = _super.call(this, gizmoLayer) || this;\n    /**\r\n     * private variables\r\n     */\n\n\n    _this._meshAttached = null;\n    _this._nodeAttached = null;\n    _this._observables = [];\n    /** Node Caching for quick lookup */\n\n    _this._gizmoAxisCache = new Map();\n    /** Fires an event when any of it's sub gizmos are dragged */\n\n    _this.onDragStartObservable = new Observable();\n    /** Fires an event when any of it's sub gizmos are released from dragging */\n\n    _this.onDragEndObservable = new Observable();\n    /**\r\n     * If set to true, planar drag is enabled\r\n     */\n\n    _this._planarGizmoEnabled = false;\n    _this.xGizmo = new AxisDragGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), gizmoLayer, _this, thickness);\n    _this.yGizmo = new AxisDragGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), gizmoLayer, _this, thickness);\n    _this.zGizmo = new AxisDragGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), gizmoLayer, _this, thickness);\n    _this.xPlaneGizmo = new PlaneDragGizmo(new Vector3(1, 0, 0), Color3.Red().scale(0.5), _this.gizmoLayer, _this);\n    _this.yPlaneGizmo = new PlaneDragGizmo(new Vector3(0, 1, 0), Color3.Green().scale(0.5), _this.gizmoLayer, _this);\n    _this.zPlaneGizmo = new PlaneDragGizmo(new Vector3(0, 0, 1), Color3.Blue().scale(0.5), _this.gizmoLayer, _this); // Relay drag events\n\n    [_this.xGizmo, _this.yGizmo, _this.zGizmo, _this.xPlaneGizmo, _this.yPlaneGizmo, _this.zPlaneGizmo].forEach(function (gizmo) {\n      gizmo.dragBehavior.onDragStartObservable.add(function () {\n        _this.onDragStartObservable.notifyObservers({});\n      });\n      gizmo.dragBehavior.onDragEndObservable.add(function () {\n        _this.onDragEndObservable.notifyObservers({});\n      });\n    });\n    _this.attachedMesh = null;\n\n    if (gizmoManager) {\n      gizmoManager.addToAxisCache(_this._gizmoAxisCache);\n    } else {\n      // Only subscribe to pointer event if gizmoManager isnt\n      Gizmo.GizmoAxisPointerObserver(gizmoLayer, _this._gizmoAxisCache);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(PositionGizmo.prototype, \"attachedMesh\", {\n    get: function get() {\n      return this._meshAttached;\n    },\n    set: function set(mesh) {\n      this._meshAttached = mesh;\n      this._nodeAttached = mesh;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo.isEnabled) {\n          gizmo.attachedMesh = mesh;\n        } else {\n          gizmo.attachedMesh = null;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"attachedNode\", {\n    get: function get() {\n      return this._nodeAttached;\n    },\n    set: function set(node) {\n      this._meshAttached = null;\n      this._nodeAttached = null;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo.isEnabled) {\n          gizmo.attachedNode = node;\n        } else {\n          gizmo.attachedNode = null;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"isHovered\", {\n    /**\r\n     * True when the mouse pointer is hovering a gizmo mesh\r\n     */\n    get: function get() {\n      var hovered = false;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        hovered = hovered || gizmo.isHovered;\n      });\n      return hovered;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"planarGizmoEnabled\", {\n    get: function get() {\n      return this._planarGizmoEnabled;\n    },\n\n    /**\r\n     * If the planar drag gizmo is enabled\r\n     * setting this will enable/disable XY, XZ and YZ planes regardless of individual gizmo settings.\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      this._planarGizmoEnabled = value;\n      [this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.isEnabled = value;\n\n          if (value) {\n            if (gizmo.attachedMesh) {\n              gizmo.attachedMesh = _this.attachedMesh;\n            } else {\n              gizmo.attachedNode = _this.attachedNode;\n            }\n          }\n        }\n      }, this);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"updateGizmoRotationToMatchAttachedMesh\", {\n    get: function get() {\n      return this._updateGizmoRotationToMatchAttachedMesh;\n    },\n    set: function set(value) {\n      this._updateGizmoRotationToMatchAttachedMesh = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.updateGizmoRotationToMatchAttachedMesh = value;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"snapDistance\", {\n    get: function get() {\n      return this._snapDistance;\n    },\n\n    /**\r\n     * Drag distance in babylon units that the gizmo will snap to when dragged (Default: 0)\r\n     */\n    set: function set(value) {\n      this._snapDistance = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.snapDistance = value;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PositionGizmo.prototype, \"scaleRatio\", {\n    get: function get() {\n      return this._scaleRatio;\n    },\n\n    /**\r\n     * Ratio for the scale of the gizmo (Default: 1)\r\n     */\n    set: function set(value) {\n      this._scaleRatio = value;\n      [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n        if (gizmo) {\n          gizmo.scaleRatio = value;\n        }\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Builds Gizmo Axis Cache to enable features such as hover state preservation and graying out other axis during manipulation\r\n   * @param mesh Axis gizmo mesh\r\n   * @param cache Gizmo axis definition used for reactive gizmo UI\r\n   */\n\n  PositionGizmo.prototype.addToAxisCache = function (mesh, cache) {\n    this._gizmoAxisCache.set(mesh, cache);\n  };\n  /**\r\n   * Disposes of the gizmo\r\n   */\n\n\n  PositionGizmo.prototype.dispose = function () {\n    var _this = this;\n\n    [this.xGizmo, this.yGizmo, this.zGizmo, this.xPlaneGizmo, this.yPlaneGizmo, this.zPlaneGizmo].forEach(function (gizmo) {\n      if (gizmo) {\n        gizmo.dispose();\n      }\n    });\n\n    this._observables.forEach(function (obs) {\n      _this.gizmoLayer.utilityLayerScene.onPointerObservable.remove(obs);\n    });\n\n    this.onDragStartObservable.clear();\n    this.onDragEndObservable.clear();\n  };\n  /**\r\n   * CustomMeshes are not supported by this gizmo\r\n   * @param mesh The mesh to replace the default mesh of the gizmo\r\n   */\n\n\n  PositionGizmo.prototype.setCustomMesh = function (mesh) {\n    Logger.Error(\"Custom meshes are not supported on this gizmo, please set the custom meshes on the gizmos contained within this one (gizmo.xGizmo, gizmo.yGizmo, gizmo.zGizmo,gizmo.xPlaneGizmo, gizmo.yPlaneGizmo, gizmo.zPlaneGizmo)\");\n  };\n\n  return PositionGizmo;\n}(Gizmo);\n\nexport { PositionGizmo };","map":null,"metadata":{},"sourceType":"module"}