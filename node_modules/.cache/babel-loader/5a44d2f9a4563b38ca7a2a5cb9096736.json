{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController\";\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager\";\nimport { Mesh } from \"../../Meshes/mesh\";\nimport { Quaternion } from \"../../Maths/math.vector\";\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\nimport { Logger } from \"../../Misc/logger\";\n/**\r\n * The motion controller class for all microsoft mixed reality controllers\r\n */\n\nvar WebXRMicrosoftMixedRealityController =\n/** @class */\nfunction (_super) {\n  __extends(WebXRMicrosoftMixedRealityController, _super);\n\n  function WebXRMicrosoftMixedRealityController(scene, gamepadObject, handedness) {\n    var _this = _super.call(this, scene, MixedRealityProfile[\"left-right\"], gamepadObject, handedness) || this; // use this in the future - https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/assets/profiles/microsoft\n\n\n    _this._mapping = {\n      defaultButton: {\n        valueNodeName: \"VALUE\",\n        unpressedNodeName: \"UNPRESSED\",\n        pressedNodeName: \"PRESSED\"\n      },\n      defaultAxis: {\n        valueNodeName: \"VALUE\",\n        minNodeName: \"MIN\",\n        maxNodeName: \"MAX\"\n      },\n      buttons: {\n        \"xr-standard-trigger\": {\n          rootNodeName: \"SELECT\",\n          componentProperty: \"button\",\n          states: [\"default\", \"touched\", \"pressed\"]\n        },\n        \"xr-standard-squeeze\": {\n          rootNodeName: \"GRASP\",\n          componentProperty: \"state\",\n          states: [\"pressed\"]\n        },\n        \"xr-standard-touchpad\": {\n          rootNodeName: \"TOUCHPAD_PRESS\",\n          labelAnchorNodeName: \"squeeze-label\",\n          touchPointNodeName: \"TOUCH\"\n        },\n        \"xr-standard-thumbstick\": {\n          rootNodeName: \"THUMBSTICK_PRESS\",\n          componentProperty: \"state\",\n          states: [\"pressed\"]\n        }\n      },\n      axes: {\n        \"xr-standard-touchpad\": {\n          \"x-axis\": {\n            rootNodeName: \"TOUCHPAD_TOUCH_X\"\n          },\n          \"y-axis\": {\n            rootNodeName: \"TOUCHPAD_TOUCH_Y\"\n          }\n        },\n        \"xr-standard-thumbstick\": {\n          \"x-axis\": {\n            rootNodeName: \"THUMBSTICK_X\"\n          },\n          \"y-axis\": {\n            rootNodeName: \"THUMBSTICK_Y\"\n          }\n        }\n      }\n    };\n    _this.profileId = \"microsoft-mixed-reality\";\n    return _this;\n  }\n\n  WebXRMicrosoftMixedRealityController.prototype._getFilenameAndPath = function () {\n    var filename = \"\";\n\n    if (this.handedness === \"left\") {\n      filename = WebXRMicrosoftMixedRealityController.MODEL_LEFT_FILENAME;\n    } else {\n      // Right is the default if no hand is specified\n      filename = WebXRMicrosoftMixedRealityController.MODEL_RIGHT_FILENAME;\n    }\n\n    var device = \"default\";\n    var path = WebXRMicrosoftMixedRealityController.MODEL_BASE_URL + device + \"/\";\n    return {\n      filename: filename,\n      path: path\n    };\n  };\n\n  WebXRMicrosoftMixedRealityController.prototype._getModelLoadingConstraints = function () {\n    var glbLoaded = SceneLoader.IsPluginForExtensionAvailable(\".glb\");\n\n    if (!glbLoaded) {\n      Logger.Warn(\"glTF / glb loaded was not registered, using generic controller instead\");\n    }\n\n    return glbLoaded;\n  };\n\n  WebXRMicrosoftMixedRealityController.prototype._processLoadedModel = function (_meshes) {\n    var _this = this;\n\n    if (!this.rootMesh) {\n      return;\n    } // Button Meshes\n\n\n    this.getComponentIds().forEach(function (id, i) {\n      if (_this.disableAnimation) {\n        return;\n      }\n\n      if (id && _this.rootMesh) {\n        var buttonMap_1 = _this._mapping.buttons[id];\n        var buttonMeshName = buttonMap_1.rootNodeName;\n\n        if (!buttonMeshName) {\n          Logger.Log(\"Skipping unknown button at index: \" + i + \" with mapped name: \" + id);\n          return;\n        }\n\n        var buttonMesh = _this._getChildByName(_this.rootMesh, buttonMeshName);\n\n        if (!buttonMesh) {\n          Logger.Warn(\"Missing button mesh with name: \" + buttonMeshName);\n          return;\n        }\n\n        buttonMap_1.valueMesh = _this._getImmediateChildByName(buttonMesh, _this._mapping.defaultButton.valueNodeName);\n        buttonMap_1.pressedMesh = _this._getImmediateChildByName(buttonMesh, _this._mapping.defaultButton.pressedNodeName);\n        buttonMap_1.unpressedMesh = _this._getImmediateChildByName(buttonMesh, _this._mapping.defaultButton.unpressedNodeName);\n\n        if (buttonMap_1.valueMesh && buttonMap_1.pressedMesh && buttonMap_1.unpressedMesh) {\n          var comp = _this.getComponent(id);\n\n          if (comp) {\n            comp.onButtonStateChangedObservable.add(function (component) {\n              _this._lerpTransform(buttonMap_1, component.value);\n            }, undefined, true);\n          }\n        } else {\n          // If we didn't find the mesh, it simply means this button won't have transforms applied as mapped button value changes.\n          Logger.Warn(\"Missing button submesh under mesh with name: \" + buttonMeshName);\n        }\n      }\n    }); // Axis Meshes\n\n    this.getComponentIds().forEach(function (id, i) {\n      var comp = _this.getComponent(id);\n\n      if (!comp.isAxes()) {\n        return;\n      }\n\n      [\"x-axis\", \"y-axis\"].forEach(function (axis) {\n        if (!_this.rootMesh) {\n          return;\n        }\n\n        var axisMap = _this._mapping.axes[id][axis];\n\n        var axisMesh = _this._getChildByName(_this.rootMesh, axisMap.rootNodeName);\n\n        if (!axisMesh) {\n          Logger.Warn(\"Missing axis mesh with name: \" + axisMap.rootNodeName);\n          return;\n        }\n\n        axisMap.valueMesh = _this._getImmediateChildByName(axisMesh, _this._mapping.defaultAxis.valueNodeName);\n        axisMap.minMesh = _this._getImmediateChildByName(axisMesh, _this._mapping.defaultAxis.minNodeName);\n        axisMap.maxMesh = _this._getImmediateChildByName(axisMesh, _this._mapping.defaultAxis.maxNodeName);\n\n        if (axisMap.valueMesh && axisMap.minMesh && axisMap.maxMesh) {\n          if (comp) {\n            comp.onAxisValueChangedObservable.add(function (axisValues) {\n              var value = axis === \"x-axis\" ? axisValues.x : axisValues.y;\n\n              _this._lerpTransform(axisMap, value, true);\n            }, undefined, true);\n          }\n        } else {\n          // If we didn't find the mesh, it simply means this button won't have transforms applied as mapped button value changes.\n          Logger.Warn(\"Missing axis submesh under mesh with name: \" + axisMap.rootNodeName);\n        }\n      });\n    });\n  };\n\n  WebXRMicrosoftMixedRealityController.prototype._setRootMesh = function (meshes) {\n    this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n    this.rootMesh.isPickable = false;\n    var rootMesh; // Find the root node in the loaded glTF scene, and attach it as a child of 'parentMesh'\n\n    for (var i = 0; i < meshes.length; i++) {\n      var mesh = meshes[i];\n      mesh.isPickable = false;\n\n      if (!mesh.parent) {\n        // Handle root node, attach to the new parentMesh\n        rootMesh = mesh;\n      }\n    }\n\n    if (rootMesh) {\n      rootMesh.setParent(this.rootMesh);\n    }\n\n    if (!this.scene.useRightHandedSystem) {\n      this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n    }\n  };\n\n  WebXRMicrosoftMixedRealityController.prototype._updateModel = function () {// no-op. model is updated using observables.\n  };\n  /**\r\n   * The base url used to load the left and right controller models\r\n   */\n\n\n  WebXRMicrosoftMixedRealityController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/microsoft/\";\n  /**\r\n   * The name of the left controller model file\r\n   */\n\n  WebXRMicrosoftMixedRealityController.MODEL_LEFT_FILENAME = \"left.glb\";\n  /**\r\n   * The name of the right controller model file\r\n   */\n\n  WebXRMicrosoftMixedRealityController.MODEL_RIGHT_FILENAME = \"right.glb\";\n  return WebXRMicrosoftMixedRealityController;\n}(WebXRAbstractMotionController);\n\nexport { WebXRMicrosoftMixedRealityController }; // register the profile\n\nWebXRMotionControllerManager.RegisterController(\"windows-mixed-reality\", function (xrInput, scene) {\n  return new WebXRMicrosoftMixedRealityController(scene, xrInput.gamepad, xrInput.handedness);\n}); // https://github.com/immersive-web/webxr-input-profiles/blob/master/packages/registry/profiles/microsoft/microsoft-mixed-reality.json\n\nvar MixedRealityProfile = {\n  left: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {\n          xr_standard_trigger_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_trigger_pressed_value\",\n            minNodeName: \"xr_standard_trigger_pressed_min\",\n            maxNodeName: \"xr_standard_trigger_pressed_max\"\n          }\n        }\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {\n          xr_standard_squeeze_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_squeeze_pressed_value\",\n            minNodeName: \"xr_standard_squeeze_pressed_min\",\n            maxNodeName: \"xr_standard_squeeze_pressed_max\"\n          }\n        }\n      },\n      \"xr-standard-touchpad\": {\n        type: \"touchpad\",\n        gamepadIndices: {\n          button: 2,\n          xAxis: 0,\n          yAxis: 1\n        },\n        rootNodeName: \"xr_standard_touchpad\",\n        visualResponses: {\n          xr_standard_touchpad_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_pressed_max\"\n          },\n          xr_standard_touchpad_xaxis_pressed: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_xaxis_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_xaxis_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_xaxis_pressed_max\"\n          },\n          xr_standard_touchpad_yaxis_pressed: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_yaxis_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_yaxis_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_yaxis_pressed_max\"\n          },\n          xr_standard_touchpad_xaxis_touched: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_xaxis_touched_value\",\n            minNodeName: \"xr_standard_touchpad_xaxis_touched_min\",\n            maxNodeName: \"xr_standard_touchpad_xaxis_touched_max\"\n          },\n          xr_standard_touchpad_yaxis_touched: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_yaxis_touched_value\",\n            minNodeName: \"xr_standard_touchpad_yaxis_touched_min\",\n            maxNodeName: \"xr_standard_touchpad_yaxis_touched_max\"\n          },\n          xr_standard_touchpad_axes_touched: {\n            componentProperty: \"state\",\n            states: [\"touched\", \"pressed\"],\n            valueNodeProperty: \"visibility\",\n            valueNodeName: \"xr_standard_touchpad_axes_touched_value\"\n          }\n        },\n        touchPointNodeName: \"xr_standard_touchpad_axes_touched_value\"\n      },\n      \"xr-standard-thumbstick\": {\n        type: \"thumbstick\",\n        gamepadIndices: {\n          button: 3,\n          xAxis: 2,\n          yAxis: 3\n        },\n        rootNodeName: \"xr_standard_thumbstick\",\n        visualResponses: {\n          xr_standard_thumbstick_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_pressed_max\"\n          },\n          xr_standard_thumbstick_xaxis_pressed: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_xaxis_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_xaxis_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_xaxis_pressed_max\"\n          },\n          xr_standard_thumbstick_yaxis_pressed: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_yaxis_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_yaxis_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_yaxis_pressed_max\"\n          }\n        }\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"microsoft-mixed-reality-left\",\n    assetPath: \"left.glb\"\n  },\n  right: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {\n          xr_standard_trigger_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_trigger_pressed_value\",\n            minNodeName: \"xr_standard_trigger_pressed_min\",\n            maxNodeName: \"xr_standard_trigger_pressed_max\"\n          }\n        }\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {\n          xr_standard_squeeze_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_squeeze_pressed_value\",\n            minNodeName: \"xr_standard_squeeze_pressed_min\",\n            maxNodeName: \"xr_standard_squeeze_pressed_max\"\n          }\n        }\n      },\n      \"xr-standard-touchpad\": {\n        type: \"touchpad\",\n        gamepadIndices: {\n          button: 2,\n          xAxis: 0,\n          yAxis: 1\n        },\n        rootNodeName: \"xr_standard_touchpad\",\n        visualResponses: {\n          xr_standard_touchpad_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_pressed_max\"\n          },\n          xr_standard_touchpad_xaxis_pressed: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_xaxis_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_xaxis_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_xaxis_pressed_max\"\n          },\n          xr_standard_touchpad_yaxis_pressed: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_yaxis_pressed_value\",\n            minNodeName: \"xr_standard_touchpad_yaxis_pressed_min\",\n            maxNodeName: \"xr_standard_touchpad_yaxis_pressed_max\"\n          },\n          xr_standard_touchpad_xaxis_touched: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_xaxis_touched_value\",\n            minNodeName: \"xr_standard_touchpad_xaxis_touched_min\",\n            maxNodeName: \"xr_standard_touchpad_xaxis_touched_max\"\n          },\n          xr_standard_touchpad_yaxis_touched: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_touchpad_yaxis_touched_value\",\n            minNodeName: \"xr_standard_touchpad_yaxis_touched_min\",\n            maxNodeName: \"xr_standard_touchpad_yaxis_touched_max\"\n          },\n          xr_standard_touchpad_axes_touched: {\n            componentProperty: \"state\",\n            states: [\"touched\", \"pressed\"],\n            valueNodeProperty: \"visibility\",\n            valueNodeName: \"xr_standard_touchpad_axes_touched_value\"\n          }\n        },\n        touchPointNodeName: \"xr_standard_touchpad_axes_touched_value\"\n      },\n      \"xr-standard-thumbstick\": {\n        type: \"thumbstick\",\n        gamepadIndices: {\n          button: 3,\n          xAxis: 2,\n          yAxis: 3\n        },\n        rootNodeName: \"xr_standard_thumbstick\",\n        visualResponses: {\n          xr_standard_thumbstick_pressed: {\n            componentProperty: \"button\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_pressed_max\"\n          },\n          xr_standard_thumbstick_xaxis_pressed: {\n            componentProperty: \"xAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_xaxis_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_xaxis_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_xaxis_pressed_max\"\n          },\n          xr_standard_thumbstick_yaxis_pressed: {\n            componentProperty: \"yAxis\",\n            states: [\"default\", \"touched\", \"pressed\"],\n            valueNodeProperty: \"transform\",\n            valueNodeName: \"xr_standard_thumbstick_yaxis_pressed_value\",\n            minNodeName: \"xr_standard_thumbstick_yaxis_pressed_min\",\n            maxNodeName: \"xr_standard_thumbstick_yaxis_pressed_max\"\n          }\n        }\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"microsoft-mixed-reality-right\",\n    assetPath: \"right.glb\"\n  }\n};","map":null,"metadata":{},"sourceType":"module"}