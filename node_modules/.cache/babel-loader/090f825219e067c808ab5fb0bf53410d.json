{"ast":null,"code":"/**\r\n * This is the base class for all WebXR features.\r\n * Since most features require almost the same resources and callbacks, this class can be used to simplify the development\r\n * Note that since the features manager is using the `IWebXRFeature` you are in no way obligated to use this class\r\n */\nvar WebXRAbstractFeature =\n/** @class */\nfunction () {\n  /**\r\n   * Construct a new (abstract) WebXR feature\r\n   * @param _xrSessionManager the xr session manager for this feature\r\n   */\n  function WebXRAbstractFeature(_xrSessionManager) {\n    this._xrSessionManager = _xrSessionManager;\n    this._attached = false;\n    this._removeOnDetach = [];\n    /**\r\n     * Is this feature disposed?\r\n     */\n\n    this.isDisposed = false;\n    /**\r\n     * Should auto-attach be disabled?\r\n     */\n\n    this.disableAutoAttach = false;\n    /**\r\n     * The name of the native xr feature name (like anchor, hit-test, or hand-tracking)\r\n     */\n\n    this.xrNativeFeatureName = \"\";\n  }\n\n  Object.defineProperty(WebXRAbstractFeature.prototype, \"attached\", {\n    /**\r\n     * Is this feature attached\r\n     */\n    get: function get() {\n      return this._attached;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * attach this feature\r\n   *\r\n   * @param force should attachment be forced (even when already attached)\r\n   * @returns true if successful, false is failed or already attached\r\n   */\n\n  WebXRAbstractFeature.prototype.attach = function (force) {\n    var _this = this; // do not attach a disposed feature\n\n\n    if (this.isDisposed) {\n      return false;\n    }\n\n    if (!force) {\n      if (this.attached) {\n        return false;\n      }\n    } else {\n      if (this.attached) {\n        // detach first, to be sure\n        this.detach();\n      }\n    }\n\n    this._attached = true;\n\n    this._addNewAttachObserver(this._xrSessionManager.onXRFrameObservable, function (frame) {\n      return _this._onXRFrame(frame);\n    });\n\n    return true;\n  };\n  /**\r\n   * detach this feature.\r\n   *\r\n   * @returns true if successful, false if failed or already detached\r\n   */\n\n\n  WebXRAbstractFeature.prototype.detach = function () {\n    if (!this._attached) {\n      this.disableAutoAttach = true;\n      return false;\n    }\n\n    this._attached = false;\n\n    this._removeOnDetach.forEach(function (toRemove) {\n      toRemove.observable.remove(toRemove.observer);\n    });\n\n    return true;\n  };\n  /**\r\n   * Dispose this feature and all of the resources attached\r\n   */\n\n\n  WebXRAbstractFeature.prototype.dispose = function () {\n    this.detach();\n    this.isDisposed = true;\n  };\n  /**\r\n   * This function will be executed during before enabling the feature and can be used to not-allow enabling it.\r\n   * Note that at this point the session has NOT started, so this is purely checking if the browser supports it\r\n   *\r\n   * @returns whether or not the feature is compatible in this environment\r\n   */\n\n\n  WebXRAbstractFeature.prototype.isCompatible = function () {\n    return true;\n  };\n  /**\r\n   * This is used to register callbacks that will automatically be removed when detach is called.\r\n   * @param observable the observable to which the observer will be attached\r\n   * @param callback the callback to register\r\n   */\n\n\n  WebXRAbstractFeature.prototype._addNewAttachObserver = function (observable, callback) {\n    this._removeOnDetach.push({\n      observable: observable,\n      observer: observable.add(callback)\n    });\n  };\n\n  return WebXRAbstractFeature;\n}();\n\nexport { WebXRAbstractFeature };","map":null,"metadata":{},"sourceType":"module"}