{"ast":null,"code":"import { Vector3 } from \"../Maths/math.vector\";\n/**\r\n * Holds the data for the raycast result\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\n\nvar PhysicsRaycastResult =\n/** @class */\nfunction () {\n  function PhysicsRaycastResult() {\n    this._hasHit = false;\n    this._hitDistance = 0;\n    this._hitNormalWorld = Vector3.Zero();\n    this._hitPointWorld = Vector3.Zero();\n    this._rayFromWorld = Vector3.Zero();\n    this._rayToWorld = Vector3.Zero();\n  }\n\n  Object.defineProperty(PhysicsRaycastResult.prototype, \"hasHit\", {\n    /**\r\n     * Gets if there was a hit\r\n     */\n    get: function get() {\n      return this._hasHit;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsRaycastResult.prototype, \"hitDistance\", {\n    /**\r\n     * Gets the distance from the hit\r\n     */\n    get: function get() {\n      return this._hitDistance;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsRaycastResult.prototype, \"hitNormalWorld\", {\n    /**\r\n     * Gets the hit normal/direction in the world\r\n     */\n    get: function get() {\n      return this._hitNormalWorld;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsRaycastResult.prototype, \"hitPointWorld\", {\n    /**\r\n     * Gets the hit point in the world\r\n     */\n    get: function get() {\n      return this._hitPointWorld;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsRaycastResult.prototype, \"rayFromWorld\", {\n    /**\r\n     * Gets the ray \"start point\" of the ray in the world\r\n     */\n    get: function get() {\n      return this._rayFromWorld;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsRaycastResult.prototype, \"rayToWorld\", {\n    /**\r\n     * Gets the ray \"end point\" of the ray in the world\r\n     */\n    get: function get() {\n      return this._rayToWorld;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Sets the hit data (normal & point in world space)\r\n   * @param hitNormalWorld defines the normal in world space\r\n   * @param hitPointWorld defines the point in world space\r\n   */\n\n  PhysicsRaycastResult.prototype.setHitData = function (hitNormalWorld, hitPointWorld) {\n    this._hasHit = true;\n    this._hitNormalWorld = new Vector3(hitNormalWorld.x, hitNormalWorld.y, hitNormalWorld.z);\n    this._hitPointWorld = new Vector3(hitPointWorld.x, hitPointWorld.y, hitPointWorld.z);\n  };\n  /**\r\n   * Sets the distance from the start point to the hit point\r\n   * @param distance\r\n   */\n\n\n  PhysicsRaycastResult.prototype.setHitDistance = function (distance) {\n    this._hitDistance = distance;\n  };\n  /**\r\n   * Calculates the distance manually\r\n   */\n\n\n  PhysicsRaycastResult.prototype.calculateHitDistance = function () {\n    this._hitDistance = Vector3.Distance(this._rayFromWorld, this._hitPointWorld);\n  };\n  /**\r\n   * Resets all the values to default\r\n   * @param from The from point on world space\r\n   * @param to The to point on world space\r\n   */\n\n\n  PhysicsRaycastResult.prototype.reset = function (from, to) {\n    if (from === void 0) {\n      from = Vector3.Zero();\n    }\n\n    if (to === void 0) {\n      to = Vector3.Zero();\n    }\n\n    this._rayFromWorld = from;\n    this._rayToWorld = to;\n    this._hasHit = false;\n    this._hitDistance = 0;\n    this._hitNormalWorld = Vector3.Zero();\n    this._hitPointWorld = Vector3.Zero();\n  };\n\n  return PhysicsRaycastResult;\n}();\n\nexport { PhysicsRaycastResult };","map":null,"metadata":{},"sourceType":"module"}