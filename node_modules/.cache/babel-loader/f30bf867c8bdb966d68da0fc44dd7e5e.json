{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(forumSaga),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(handleCreateForumPostFailure);\n\nimport { takeEvery, call, put, delay, select } from 'redux-saga/effects';\nimport { getProfileOfAddress } from 'decentraland-dapps/dist/modules/profile/selectors';\nimport { SET_COLLECTION_CURATION_ASSIGNEE_SUCCESS } from 'modules/curations/collectionCuration/actions';\nimport { getCollection } from 'modules/collection/selectors';\nimport { shorten } from '../../lib/address';\nimport { buildCollectionNewAssigneePostBody } from './utils';\nimport { createCollectionAssigneeForumPostFailure, createCollectionAssigneeForumPostRequest, createCollectionAssigneeForumPostSuccess, createCollectionForumPostFailure, createCollectionForumPostRequest, createCollectionForumPostSuccess, CREATE_COLLECTION_ASSIGNEE_FORUM_POST_REQUEST, CREATE_COLLECTION_FORUM_POST_FAILURE, CREATE_COLLECTION_FORUM_POST_REQUEST } from './actions';\nvar RETRY_DELAY = 5000;\nexport function forumSaga(builder) {\n  var _marked, _marked2, _marked3, handleCreateForumPostRequest, handleSetAssigneeSuccess, handleCreateCollectionAssigneeForumPost;\n\n  return _regeneratorRuntime.wrap(function forumSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          handleCreateCollectionAssigneeForumPost = function _handleCreateCollecti(action) {\n            var _action$payload3, collectionId, curation, collection, profile, topicId, forumPost;\n\n            return _regeneratorRuntime.wrap(function handleCreateCollectionAssigneeForumPost$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _action$payload3 = action.payload, collectionId = _action$payload3.collectionId, curation = _action$payload3.curation;\n                    _context3.next = 3;\n                    return select(getCollection, collectionId);\n\n                  case 3:\n                    collection = _context3.sent;\n\n                    if (!curation.assignee) {\n                      _context3.next = 10;\n                      break;\n                    }\n\n                    _context3.next = 7;\n                    return select(getProfileOfAddress, curation.assignee);\n\n                  case 7:\n                    _context3.t0 = _context3.sent;\n                    _context3.next = 11;\n                    break;\n\n                  case 10:\n                    _context3.t0 = null;\n\n                  case 11:\n                    profile = _context3.t0;\n\n                    if (!collection.forumLink) {\n                      _context3.next = 26;\n                      break;\n                    }\n\n                    topicId = collection.forumLink.split('/').pop();\n                    forumPost = {\n                      topic_id: parseInt(topicId, 10),\n                      raw: buildCollectionNewAssigneePostBody(curation.assignee, profile)\n                    };\n                    _context3.prev = 15;\n                    _context3.next = 18;\n                    return call([builder, 'createCollectionNewAssigneeForumPost'], collection, forumPost);\n\n                  case 18:\n                    _context3.next = 20;\n                    return put(createCollectionAssigneeForumPostSuccess());\n\n                  case 20:\n                    _context3.next = 26;\n                    break;\n\n                  case 22:\n                    _context3.prev = 22;\n                    _context3.t1 = _context3[\"catch\"](15);\n                    _context3.next = 26;\n                    return put(createCollectionAssigneeForumPostFailure(collectionId, forumPost, _context3.t1.message));\n\n                  case 26:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _marked3, null, [[15, 22]]);\n          };\n\n          handleSetAssigneeSuccess = function _handleSetAssigneeSuc(action) {\n            var _action$payload2, collectionId, curation;\n\n            return _regeneratorRuntime.wrap(function handleSetAssigneeSuccess$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _action$payload2 = action.payload, collectionId = _action$payload2.collectionId, curation = _action$payload2.curation;\n                    _context2.next = 3;\n                    return put(createCollectionAssigneeForumPostRequest(collectionId, curation));\n\n                  case 3:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _marked2);\n          };\n\n          handleCreateForumPostRequest = function _handleCreateForumPos(action) {\n            var _action$payload, collection, forumPost, forumLink, _error$response$data, _error$response$data$, _error$response$data2, _error$response$data3, _error$response$data4, forumPostAlreadyExists, _forumLink, duplicatedTitle;\n\n            return _regeneratorRuntime.wrap(function handleCreateForumPostRequest$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _action$payload = action.payload, collection = _action$payload.collection, forumPost = _action$payload.forumPost;\n                    _context.prev = 1;\n                    _context.next = 4;\n                    return call([builder, 'createCollectionForumPost'], collection, forumPost);\n\n                  case 4:\n                    forumLink = _context.sent;\n                    _context.next = 7;\n                    return put(createCollectionForumPostSuccess(collection, forumLink));\n\n                  case 7:\n                    _context.next = 25;\n                    break;\n\n                  case 9:\n                    _context.prev = 9;\n                    _context.t0 = _context[\"catch\"](1);\n\n                    if (!(builder.isAxiosError(_context.t0) && _context.t0.response)) {\n                      _context.next = 23;\n                      break;\n                    }\n\n                    forumPostAlreadyExists = _context.t0.response.status === 409;\n                    _forumLink = (_error$response$data = _context.t0.response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.data) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.forum_link;\n\n                    if (!(forumPostAlreadyExists && _forumLink)) {\n                      _context.next = 18;\n                      break;\n                    }\n\n                    _context.next = 17;\n                    return put(createCollectionForumPostSuccess(collection, _forumLink));\n\n                  case 17:\n                    return _context.abrupt(\"return\");\n\n                  case 18:\n                    duplicatedTitle = _context.t0.response.status === 500 && ((_error$response$data2 = _context.t0.response.data) === null || _error$response$data2 === void 0 ? void 0 : (_error$response$data3 = _error$response$data2.data) === null || _error$response$data3 === void 0 ? void 0 : (_error$response$data4 = _error$response$data3.errors) === null || _error$response$data4 === void 0 ? void 0 : _error$response$data4.includes('Title has already been used'));\n\n                    if (!duplicatedTitle) {\n                      _context.next = 23;\n                      break;\n                    }\n\n                    _context.next = 22;\n                    return put(createCollectionForumPostRequest(collection, _objectSpread({}, forumPost, {\n                      title: \"\".concat(forumPost.title, \" \").concat(shorten(collection.contractAddress))\n                    })));\n\n                  case 22:\n                    return _context.abrupt(\"return\");\n\n                  case 23:\n                    _context.next = 25;\n                    return put(createCollectionForumPostFailure(collection, forumPost, _context.t0.message));\n\n                  case 25:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _marked, null, [[1, 9]]);\n          };\n\n          _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleCreateForumPostRequest), _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleSetAssigneeSuccess), _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleCreateCollectionAssigneeForumPost);\n          _context4.next = 6;\n          return takeEvery(CREATE_COLLECTION_FORUM_POST_REQUEST, handleCreateForumPostRequest);\n\n        case 6:\n          _context4.next = 8;\n          return takeEvery(CREATE_COLLECTION_FORUM_POST_FAILURE, handleCreateForumPostFailure);\n\n        case 8:\n          _context4.next = 10;\n          return takeEvery(SET_COLLECTION_CURATION_ASSIGNEE_SUCCESS, handleSetAssigneeSuccess);\n\n        case 10:\n          _context4.next = 12;\n          return takeEvery(CREATE_COLLECTION_ASSIGNEE_FORUM_POST_REQUEST, handleCreateCollectionAssigneeForumPost);\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n/**\n * Handles the post to forum request failures by re-launching the action to retry\n * the post indefinitely until it works.\n *\n * @param action - The failing action.\n */\n\nfunction handleCreateForumPostFailure(action) {\n  var _action$payload4, collection, forumPost;\n\n  return _regeneratorRuntime.wrap(function handleCreateForumPostFailure$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _action$payload4 = action.payload, collection = _action$payload4.collection, forumPost = _action$payload4.forumPost;\n          _context5.next = 3;\n          return delay(RETRY_DELAY);\n\n        case 3:\n          _context5.next = 5;\n          return put(createCollectionForumPostRequest(collection, forumPost));\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/forum/sagas.ts"],"names":["forumSaga","handleCreateForumPostFailure","takeEvery","call","put","delay","select","getProfileOfAddress","SET_COLLECTION_CURATION_ASSIGNEE_SUCCESS","getCollection","shorten","buildCollectionNewAssigneePostBody","createCollectionAssigneeForumPostFailure","createCollectionAssigneeForumPostRequest","createCollectionAssigneeForumPostSuccess","createCollectionForumPostFailure","createCollectionForumPostRequest","createCollectionForumPostSuccess","CREATE_COLLECTION_ASSIGNEE_FORUM_POST_REQUEST","CREATE_COLLECTION_FORUM_POST_FAILURE","CREATE_COLLECTION_FORUM_POST_REQUEST","RETRY_DELAY","builder","handleCreateForumPostRequest","handleSetAssigneeSuccess","handleCreateCollectionAssigneeForumPost","action","payload","collectionId","curation","collection","assignee","profile","forumLink","topicId","split","pop","forumPost","topic_id","parseInt","raw","message","isAxiosError","response","forumPostAlreadyExists","status","data","forum_link","duplicatedTitle","errors","includes","title","contractAddress"],"mappings":"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","sourcesContent":["import { takeEvery, call, put, delay, select } from 'redux-saga/effects'\nimport { getProfileOfAddress } from 'decentraland-dapps/dist/modules/profile/selectors'\nimport { Profile } from 'decentraland-dapps/dist/modules/profile/types'\nimport { BuilderAPI } from 'lib/api/builder'\nimport {\n  SetCollectionCurationAssigneeSuccessAction,\n  SET_COLLECTION_CURATION_ASSIGNEE_SUCCESS\n} from 'modules/curations/collectionCuration/actions'\nimport { Collection } from 'modules/collection/types'\nimport { getCollection } from 'modules/collection/selectors'\nimport { shorten } from '../../lib/address'\nimport { buildCollectionNewAssigneePostBody } from './utils'\nimport {\n  createCollectionAssigneeForumPostFailure,\n  createCollectionAssigneeForumPostRequest,\n  CreateCollectionAssigneeForumPostRequestAction,\n  createCollectionAssigneeForumPostSuccess,\n  createCollectionForumPostFailure,\n  CreateCollectionForumPostFailureAction,\n  createCollectionForumPostRequest,\n  CreateCollectionForumPostRequestAction,\n  createCollectionForumPostSuccess,\n  CREATE_COLLECTION_ASSIGNEE_FORUM_POST_REQUEST,\n  CREATE_COLLECTION_FORUM_POST_FAILURE,\n  CREATE_COLLECTION_FORUM_POST_REQUEST\n} from './actions'\n\nconst RETRY_DELAY = 5000\n\nexport function* forumSaga(builder: BuilderAPI) {\n  yield takeEvery(CREATE_COLLECTION_FORUM_POST_REQUEST, handleCreateForumPostRequest)\n  yield takeEvery(CREATE_COLLECTION_FORUM_POST_FAILURE, handleCreateForumPostFailure)\n  yield takeEvery(SET_COLLECTION_CURATION_ASSIGNEE_SUCCESS, handleSetAssigneeSuccess)\n  yield takeEvery(CREATE_COLLECTION_ASSIGNEE_FORUM_POST_REQUEST, handleCreateCollectionAssigneeForumPost)\n\n  function* handleCreateForumPostRequest(action: CreateCollectionForumPostRequestAction) {\n    const { collection, forumPost } = action.payload\n    try {\n      const forumLink: string = yield call([builder, 'createCollectionForumPost'], collection, forumPost)\n      yield put(createCollectionForumPostSuccess(collection, forumLink))\n    } catch (error) {\n      if (builder.isAxiosError(error) && error.response) {\n        const forumPostAlreadyExists = error.response.status === 409\n        const forumLink = error.response.data?.data?.forum_link\n\n        if (forumPostAlreadyExists && forumLink) {\n          yield put(createCollectionForumPostSuccess(collection, forumLink))\n          return\n        }\n\n        const duplicatedTitle = error.response.status === 500 && error.response.data?.data?.errors?.includes('Title has already been used')\n\n        if (duplicatedTitle) {\n          yield put(\n            createCollectionForumPostRequest(collection, {\n              ...forumPost,\n              title: `${forumPost.title} ${shorten(collection.contractAddress!)}`\n            })\n          )\n          return\n        }\n      }\n\n      yield put(createCollectionForumPostFailure(collection, forumPost, error.message))\n    }\n  }\n\n  function* handleSetAssigneeSuccess(action: SetCollectionCurationAssigneeSuccessAction) {\n    const { collectionId, curation } = action.payload\n    yield put(createCollectionAssigneeForumPostRequest(collectionId, curation))\n  }\n\n  function* handleCreateCollectionAssigneeForumPost(action: CreateCollectionAssigneeForumPostRequestAction) {\n    const { collectionId, curation } = action.payload\n    const collection: Collection = yield select(getCollection, collectionId)\n    const profile: Profile | null = curation.assignee ? yield select(getProfileOfAddress, curation.assignee) : null\n\n    if (collection.forumLink) {\n      const topicId = collection.forumLink.split('/').pop()\n      const forumPost = {\n        topic_id: parseInt(topicId!, 10),\n        raw: buildCollectionNewAssigneePostBody(curation.assignee, profile)\n      }\n      try {\n        yield call([builder, 'createCollectionNewAssigneeForumPost'], collection, forumPost)\n        yield put(createCollectionAssigneeForumPostSuccess())\n      } catch (error) {\n        yield put(createCollectionAssigneeForumPostFailure(collectionId, forumPost, error.message))\n      }\n    }\n  }\n}\n\n/**\n * Handles the post to forum request failures by re-launching the action to retry\n * the post indefinitely until it works.\n *\n * @param action - The failing action.\n */\nfunction* handleCreateForumPostFailure(action: CreateCollectionForumPostFailureAction) {\n  const { collection, forumPost } = action.payload\n\n  yield delay(RETRY_DELAY)\n  yield put(createCollectionForumPostRequest(collection, forumPost))\n}\n"]},"metadata":{},"sourceType":"module"}