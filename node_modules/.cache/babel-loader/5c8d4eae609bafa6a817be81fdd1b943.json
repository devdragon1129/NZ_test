{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { InternalTexture, InternalTextureSource } from '../../Materials/Textures/internalTexture';\nimport { Logger } from '../../Misc/logger';\nimport { RenderTargetCreationOptions } from '../../Materials/Textures/renderTargetCreationOptions';\nimport { ThinEngine } from '../thinEngine';\n\nThinEngine.prototype.createRenderTargetTexture = function (size, options) {\n  var fullOptions = new RenderTargetCreationOptions();\n\n  if (options !== undefined && typeof options === \"object\") {\n    fullOptions.generateMipMaps = options.generateMipMaps;\n    fullOptions.generateDepthBuffer = !!options.generateDepthBuffer;\n    fullOptions.generateStencilBuffer = !!options.generateStencilBuffer;\n    fullOptions.type = options.type === undefined ? 0 : options.type;\n    fullOptions.samplingMode = options.samplingMode === undefined ? 3 : options.samplingMode;\n    fullOptions.format = options.format === undefined ? 5 : options.format;\n  } else {\n    fullOptions.generateMipMaps = options;\n    fullOptions.generateDepthBuffer = true;\n    fullOptions.generateStencilBuffer = false;\n    fullOptions.type = 0;\n    fullOptions.samplingMode = 3;\n    fullOptions.format = 5;\n  }\n\n  if (fullOptions.type === 1 && !this._caps.textureFloatLinearFiltering) {\n    // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\n    fullOptions.samplingMode = 1;\n  } else if (fullOptions.type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\n    // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\n    fullOptions.samplingMode = 1;\n  }\n\n  if (fullOptions.type === 1 && !this._caps.textureFloat) {\n    fullOptions.type = 0;\n    Logger.Warn(\"Float textures are not supported. Render target forced to TEXTURETYPE_UNSIGNED_BYTE type\");\n  }\n\n  var gl = this._gl;\n  var texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\n  var width = size.width || size;\n  var height = size.height || size;\n  var layers = size.layers || 0;\n\n  var filters = this._getSamplingParameters(fullOptions.samplingMode, fullOptions.generateMipMaps ? true : false);\n\n  var target = layers !== 0 ? gl.TEXTURE_2D_ARRAY : gl.TEXTURE_2D;\n\n  var sizedFormat = this._getRGBABufferInternalSizedFormat(fullOptions.type, fullOptions.format);\n\n  var internalFormat = this._getInternalFormat(fullOptions.format);\n\n  var type = this._getWebGLTextureType(fullOptions.type); // Bind\n\n\n  this._bindTextureDirectly(target, texture);\n\n  if (layers !== 0) {\n    texture.is2DArray = true;\n    gl.texImage3D(target, 0, sizedFormat, width, height, layers, 0, internalFormat, type, null);\n  } else {\n    gl.texImage2D(target, 0, sizedFormat, width, height, 0, internalFormat, type, null);\n  }\n\n  gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, filters.mag);\n  gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, filters.min);\n  gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); // MipMaps\n\n  if (fullOptions.generateMipMaps) {\n    this._gl.generateMipmap(target);\n  }\n\n  this._bindTextureDirectly(target, null);\n\n  var currentFrameBuffer = this._currentFramebuffer; // Create the framebuffer\n\n  var framebuffer = gl.createFramebuffer();\n\n  this._bindUnboundFramebuffer(framebuffer);\n\n  texture._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer ? true : false, fullOptions.generateDepthBuffer, width, height); // No need to rebind on every frame\n\n  if (!texture.is2DArray) {\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._webGLTexture, 0);\n  }\n\n  this._bindUnboundFramebuffer(currentFrameBuffer);\n\n  texture._framebuffer = framebuffer;\n  texture.baseWidth = width;\n  texture.baseHeight = height;\n  texture.width = width;\n  texture.height = height;\n  texture.depth = layers;\n  texture.isReady = true;\n  texture.samples = 1;\n  texture.generateMipMaps = fullOptions.generateMipMaps ? true : false;\n  texture.samplingMode = fullOptions.samplingMode;\n  texture.type = fullOptions.type;\n  texture.format = fullOptions.format;\n  texture._generateDepthBuffer = fullOptions.generateDepthBuffer;\n  texture._generateStencilBuffer = fullOptions.generateStencilBuffer ? true : false;\n\n  this._internalTexturesCache.push(texture);\n\n  return texture;\n};\n\nThinEngine.prototype.createDepthStencilTexture = function (size, options) {\n  if (options.isCube) {\n    var width = size.width || size;\n    return this._createDepthStencilCubeTexture(width, options);\n  } else {\n    return this._createDepthStencilTexture(size, options);\n  }\n};\n\nThinEngine.prototype._createDepthStencilTexture = function (size, options) {\n  var gl = this._gl;\n  var layers = size.layers || 0;\n  var target = layers !== 0 ? gl.TEXTURE_2D_ARRAY : gl.TEXTURE_2D;\n  var internalTexture = new InternalTexture(this, InternalTextureSource.Depth);\n\n  if (!this._caps.depthTextureExtension) {\n    Logger.Error(\"Depth texture is not supported by your browser or hardware.\");\n    return internalTexture;\n  }\n\n  var internalOptions = __assign({\n    bilinearFiltering: false,\n    comparisonFunction: 0,\n    generateStencil: false\n  }, options);\n\n  this._bindTextureDirectly(target, internalTexture, true);\n\n  this._setupDepthStencilTexture(internalTexture, size, internalOptions.generateStencil, internalOptions.bilinearFiltering, internalOptions.comparisonFunction);\n\n  var type = internalOptions.generateStencil ? gl.UNSIGNED_INT_24_8 : gl.UNSIGNED_INT;\n  var internalFormat = internalOptions.generateStencil ? gl.DEPTH_STENCIL : gl.DEPTH_COMPONENT;\n  var sizedFormat = internalFormat;\n\n  if (this.webGLVersion > 1) {\n    sizedFormat = internalOptions.generateStencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\n  }\n\n  if (internalTexture.is2DArray) {\n    gl.texImage3D(target, 0, sizedFormat, internalTexture.width, internalTexture.height, layers, 0, internalFormat, type, null);\n  } else {\n    gl.texImage2D(target, 0, sizedFormat, internalTexture.width, internalTexture.height, 0, internalFormat, type, null);\n  }\n\n  this._bindTextureDirectly(target, null);\n\n  return internalTexture;\n};","map":null,"metadata":{},"sourceType":"module"}