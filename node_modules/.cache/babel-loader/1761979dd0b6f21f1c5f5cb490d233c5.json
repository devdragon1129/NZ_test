{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Texture } from \"./texture\";\nimport \"../../Engines/Extensions/engine.rawTexture\";\n/**\r\n * Class used to store 2D array textures containing user data\r\n */\n\nvar RawTexture2DArray =\n/** @class */\nfunction (_super) {\n  __extends(RawTexture2DArray, _super);\n  /**\r\n   * Create a new RawTexture2DArray\r\n   * @param data defines the data of the texture\r\n   * @param width defines the width of the texture\r\n   * @param height defines the height of the texture\r\n   * @param depth defines the number of layers of the texture\r\n   * @param format defines the texture format to use\r\n   * @param scene defines the hosting scene\r\n   * @param generateMipMaps defines a boolean indicating if mip levels should be generated (true by default)\r\n   * @param invertY defines if texture must be stored with Y axis inverted\r\n   * @param samplingMode defines the sampling mode to use (Texture.TRILINEAR_SAMPLINGMODE by default)\r\n   * @param textureType defines the texture Type (Engine.TEXTURETYPE_UNSIGNED_INT, Engine.TEXTURETYPE_FLOAT...)\r\n   */\n\n\n  function RawTexture2DArray(data, width, height, depth,\n  /** Gets or sets the texture format to use */\n  format, scene, generateMipMaps, invertY, samplingMode, textureType) {\n    if (generateMipMaps === void 0) {\n      generateMipMaps = true;\n    }\n\n    if (invertY === void 0) {\n      invertY = false;\n    }\n\n    if (samplingMode === void 0) {\n      samplingMode = Texture.TRILINEAR_SAMPLINGMODE;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    var _this = _super.call(this, null, scene, !generateMipMaps, invertY) || this;\n\n    _this.format = format;\n    _this._texture = scene.getEngine().createRawTexture2DArray(data, width, height, depth, format, generateMipMaps, invertY, samplingMode, null, textureType);\n    _this.is2DArray = true;\n    return _this;\n  }\n  /**\r\n   * Update the texture with new data\r\n   * @param data defines the data to store in the texture\r\n   */\n\n\n  RawTexture2DArray.prototype.update = function (data) {\n    if (!this._texture) {\n      return;\n    }\n\n    this._getEngine().updateRawTexture2DArray(this._texture, data, this._texture.format, this._texture.invertY, null, this._texture.type);\n  };\n\n  return RawTexture2DArray;\n}(Texture);\n\nexport { RawTexture2DArray };","map":null,"metadata":{},"sourceType":"module"}