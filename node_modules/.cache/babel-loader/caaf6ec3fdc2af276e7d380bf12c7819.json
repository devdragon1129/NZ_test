{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BuilderClient = void 0;\n\nvar form_data_1 = __importDefault(require(\"form-data\"));\n\nvar buffer_1 = require(\"buffer\");\n\nvar cross_fetch_1 = __importDefault(require(\"cross-fetch\"));\n\nvar dcl_crypto_1 = require(\"dcl-crypto\");\n\nvar BuilderClient_errors_1 = require(\"./BuilderClient.errors\");\n\nvar BuilderClient = /*#__PURE__*/function () {\n  function BuilderClient(url, identity, address) {\n    var _this = this;\n\n    var externalFetch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : cross_fetch_1.default;\n\n    _classCallCheck(this, BuilderClient);\n\n    this.AUTH_CHAIN_HEADER_PREFIX = 'x-identity-auth-chain-';\n\n    this.getIdentity = function () {\n      return identity instanceof Function ? identity() : identity;\n    };\n\n    this.getAddress = function () {\n      return address instanceof Function ? address() : address;\n    };\n\n    this.fetch = function (path, init) {\n      var _a, _b;\n\n      var method = (_b = (_a = init === null || init === void 0 ? void 0 : init.method) !== null && _a !== void 0 ? _a : path) !== null && _b !== void 0 ? _b : 'get';\n      var fullUrl = url + path;\n      return externalFetch(fullUrl, _objectSpread({}, init, {\n        headers: _objectSpread({}, init === null || init === void 0 ? void 0 : init.headers, _this.createAuthHeaders(method, path.replace(/\\/v[0-9]/, '')))\n      }));\n    };\n  }\n  /**\n   * Creates the authorization headers for the given method and path.\n   * @param method - The HTTP method.\n   * @param path - The HTTP request path.\n   */\n\n\n  _createClass(BuilderClient, [{\n    key: \"createAuthHeaders\",\n    value: function createAuthHeaders(method, path) {\n      var identity = this.getIdentity();\n      var headers = {};\n      var endpoint = (method + ':' + path).toLowerCase();\n      var authChain = dcl_crypto_1.Authenticator.signPayload(identity, endpoint);\n\n      for (var i = 0; i < authChain.length; i++) {\n        headers[this.AUTH_CHAIN_HEADER_PREFIX + i] = JSON.stringify(authChain[i]);\n      }\n\n      return headers;\n    }\n  }, {\n    key: \"convertToFormDataBinary\",\n    value: function convertToFormDataBinary(data) {\n      var blobExists = globalThis.Blob !== undefined;\n      var bufferExists = buffer_1.Buffer !== undefined;\n\n      if (blobExists && data instanceof globalThis.Blob || bufferExists && buffer_1.Buffer.isBuffer(data)) {\n        return data;\n      }\n\n      if (blobExists && (data instanceof Uint8Array || data instanceof ArrayBuffer)) {\n        return new Blob([data]);\n      } else if (bufferExists && data instanceof Uint8Array) {\n        return buffer_1.Buffer.from(data.buffer);\n      } else if (bufferExists && data instanceof ArrayBuffer) {\n        return buffer_1.Buffer.from(data);\n      }\n\n      throw new Error('Unsupported content type');\n    }\n    /**\n     * Updates or inserts an item. The item can be updated by id or URN.\n     * @param item - The item to insert or update.\n     * @param newContent - The content to be added or updated in the item. This content must be contained in the items contents.\n     */\n\n  }, {\n    key: \"upsertItem\",\n    value: function () {\n      var _upsertItem = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(item, newContent) {\n        var _a, _b, _c, _d, contentIsContainedInItem, upsertResponse, upsertResponseBody, endpointParam, formData, path, uploadResponse, uploadResponseBody;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                contentIsContainedInItem = Object.keys(newContent).every(function (key) {\n                  return key in item.contents;\n                });\n\n                if (contentIsContainedInItem) {\n                  _context.next = 3;\n                  break;\n                }\n\n                throw new Error('The new content is not contained in the item contents');\n\n              case 3:\n                endpointParam = (_a = item.id) !== null && _a !== void 0 ? _a : item.urn;\n                _context.prev = 4;\n                _context.next = 7;\n                return this.fetch(\"/v1/items/\".concat(endpointParam), {\n                  headers: {\n                    'content-type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    item: _objectSpread({}, item, {\n                      eth_address: this.getAddress()\n                    })\n                  }),\n                  method: 'put'\n                });\n\n              case 7:\n                upsertResponse = _context.sent;\n                _context.next = 10;\n                return upsertResponse.json();\n\n              case 10:\n                upsertResponseBody = _context.sent;\n                _context.next = 16;\n                break;\n\n              case 13:\n                _context.prev = 13;\n                _context.t0 = _context[\"catch\"](4);\n                throw new BuilderClient_errors_1.ClientError(_context.t0.message, undefined, null);\n\n              case 16:\n                if (!(!upsertResponse.ok || !upsertResponseBody.ok)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                throw new BuilderClient_errors_1.ClientError((_b = upsertResponseBody.error) !== null && _b !== void 0 ? _b : 'Unknown error', upsertResponse.status, upsertResponseBody.data);\n\n              case 18:\n                if (!(Object.keys(newContent).length > 0)) {\n                  _context.next = 35;\n                  break;\n                }\n\n                formData = new form_data_1.default();\n\n                for (path in newContent) {\n                  formData.append(item.contents[path], this.convertToFormDataBinary(newContent[path]), path);\n                }\n\n                _context.prev = 21;\n                _context.next = 24;\n                return this.fetch(\"/v1/items/\".concat((_c = item.id) !== null && _c !== void 0 ? _c : upsertResponseBody.data.id, \"/files\"), {\n                  body: formData,\n                  method: 'post'\n                });\n\n              case 24:\n                uploadResponse = _context.sent;\n                _context.next = 30;\n                break;\n\n              case 27:\n                _context.prev = 27;\n                _context.t1 = _context[\"catch\"](21);\n                throw new BuilderClient_errors_1.ClientError(_context.t1.message, undefined, null);\n\n              case 30:\n                _context.next = 32;\n                return uploadResponse.json();\n\n              case 32:\n                uploadResponseBody = _context.sent;\n\n                if (!(!uploadResponse.ok || !uploadResponseBody.ok)) {\n                  _context.next = 35;\n                  break;\n                }\n\n                throw new BuilderClient_errors_1.ClientError((_d = uploadResponseBody.error) !== null && _d !== void 0 ? _d : 'Unknown error', uploadResponse.status, uploadResponseBody.data);\n\n              case 35:\n                return _context.abrupt(\"return\", upsertResponseBody.data);\n\n              case 36:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 13], [21, 27]]);\n      }));\n\n      function upsertItem(_x, _x2) {\n        return _upsertItem.apply(this, arguments);\n      }\n\n      return upsertItem;\n    }()\n    /**\n     * Gets the content size of an already uploaded content file.\n     * @param contentIdentifier - The content hash.\n     */\n\n  }, {\n    key: \"getContentSize\",\n    value: function () {\n      var _getContentSize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(contentIdentifier) {\n        var contentsResponse;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return this.fetch(\"/v1/storage/contents/\".concat(contentIdentifier), {\n                  method: 'head'\n                });\n\n              case 3:\n                contentsResponse = _context2.sent;\n                _context2.next = 9;\n                break;\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](0);\n                throw new BuilderClient_errors_1.ClientError(_context2.t0.message, undefined, null);\n\n              case 9:\n                if (!(!contentsResponse.ok || !contentsResponse.headers.has('content-length'))) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                throw new BuilderClient_errors_1.ClientError('An error occurred trying to get the size of a content', contentsResponse.status, null);\n\n              case 11:\n                return _context2.abrupt(\"return\", Number(contentsResponse.headers.get('content-length')));\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 6]]);\n      }));\n\n      function getContentSize(_x3) {\n        return _getContentSize.apply(this, arguments);\n      }\n\n      return getContentSize;\n    }()\n    /**\n     * The ID of the third party to retrieve.\n     * @param thirdPartyId - The third party id (urn:decentraland:mumbai:collections-thirdparty:third-part-name).\n     */\n\n  }, {\n    key: \"getThirdParty\",\n    value: function () {\n      var _getThirdParty = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(thirdPartyId) {\n        var _a, thirdPartyResponse, thirdPartyResponseBody, responseContentType;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return this.fetch(\"/v1/thirdParties/\".concat(thirdPartyId));\n\n              case 3:\n                thirdPartyResponse = _context3.sent;\n                _context3.next = 9;\n                break;\n\n              case 6:\n                _context3.prev = 6;\n                _context3.t0 = _context3[\"catch\"](0);\n                throw new BuilderClient_errors_1.ClientError(_context3.t0.message, undefined, null);\n\n              case 9:\n                if (thirdPartyResponse.ok) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                throw new BuilderClient_errors_1.ClientError('Unexpected response status', thirdPartyResponse.status, null);\n\n              case 11:\n                responseContentType = thirdPartyResponse.headers.get('content-type');\n\n                if (!(!responseContentType || !responseContentType.includes('application/json'))) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                throw new BuilderClient_errors_1.ClientError('Unexpected content-type in response', thirdPartyResponse.status, null);\n\n              case 14:\n                _context3.prev = 14;\n                _context3.next = 17;\n                return thirdPartyResponse.json();\n\n              case 17:\n                thirdPartyResponseBody = _context3.sent;\n                _context3.next = 23;\n                break;\n\n              case 20:\n                _context3.prev = 20;\n                _context3.t1 = _context3[\"catch\"](14);\n                throw new BuilderClient_errors_1.ClientError(_context3.t1.message, thirdPartyResponse.status, null);\n\n              case 23:\n                if (thirdPartyResponseBody.ok) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                throw new BuilderClient_errors_1.ClientError((_a = thirdPartyResponseBody.error) !== null && _a !== void 0 ? _a : 'Unknown error', thirdPartyResponse.status, thirdPartyResponseBody.data);\n\n              case 25:\n                return _context3.abrupt(\"return\", thirdPartyResponseBody.data);\n\n              case 26:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 6], [14, 20]]);\n      }));\n\n      function getThirdParty(_x4) {\n        return _getThirdParty.apply(this, arguments);\n      }\n\n      return getThirdParty;\n    }()\n    /**\n     * Gets the external NFTs owned by the user.\n     * @param options - A set of options to query the NFTs.\n     */\n\n  }, {\n    key: \"getNFTs\",\n    value: function () {\n      var _getNFTs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _ref,\n            owner,\n            first,\n            skip,\n            cursor,\n            params,\n            url,\n            res,\n            body,\n            _args4 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _ref = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {}, owner = _ref.owner, first = _ref.first, skip = _ref.skip, cursor = _ref.cursor;\n                params = [];\n                url = '/v1/nfts';\n\n                if (owner) {\n                  params.push(\"owner=\".concat(owner));\n                }\n\n                if (first) {\n                  params.push(\"first=\".concat(first));\n                }\n\n                if (skip) {\n                  params.push(\"skip=\".concat(skip));\n                }\n\n                if (cursor) {\n                  params.push(\"cursor=\".concat(cursor));\n                }\n\n                if (params.length > 0) {\n                  url = \"\".concat(url, \"?\").concat(params.join('&'));\n                }\n\n                _context4.prev = 8;\n                _context4.next = 11;\n                return this.fetch(url);\n\n              case 11:\n                res = _context4.sent;\n                _context4.next = 17;\n                break;\n\n              case 14:\n                _context4.prev = 14;\n                _context4.t0 = _context4[\"catch\"](8);\n                throw new BuilderClient_errors_1.ClientError(_context4.t0.message, undefined, null);\n\n              case 17:\n                _context4.next = 19;\n                return res.json();\n\n              case 19:\n                body = _context4.sent;\n\n                if (!(!res.ok || !body.ok)) {\n                  _context4.next = 22;\n                  break;\n                }\n\n                throw new BuilderClient_errors_1.ClientError(body.error || 'Unknown error', res.status, null);\n\n              case 22:\n                return _context4.abrupt(\"return\", body.data);\n\n              case 23:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[8, 14]]);\n      }));\n\n      function getNFTs() {\n        return _getNFTs.apply(this, arguments);\n      }\n\n      return getNFTs;\n    }()\n  }, {\n    key: \"getNFT\",\n    value: function () {\n      var _getNFT = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref2) {\n        var contractAddress, tokenId, res, body;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                contractAddress = _ref2.contractAddress, tokenId = _ref2.tokenId;\n                _context5.prev = 1;\n                _context5.next = 4;\n                return this.fetch(\"/v1/nfts/\".concat(contractAddress, \"/\").concat(tokenId));\n\n              case 4:\n                res = _context5.sent;\n                _context5.next = 10;\n                break;\n\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](1);\n                throw new BuilderClient_errors_1.ClientError(_context5.t0.message, undefined, null);\n\n              case 10:\n                _context5.next = 12;\n                return res.json();\n\n              case 12:\n                body = _context5.sent;\n\n                if (!(!res.ok || !body.ok)) {\n                  _context5.next = 15;\n                  break;\n                }\n\n                throw new BuilderClient_errors_1.ClientError(body.error || 'Unknown error', res.status, null);\n\n              case 15:\n                return _context5.abrupt(\"return\", body.data);\n\n              case 16:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[1, 7]]);\n      }));\n\n      function getNFT(_x5) {\n        return _getNFT.apply(this, arguments);\n      }\n\n      return getNFT;\n    }()\n  }]);\n\n  return BuilderClient;\n}();\n\nexports.BuilderClient = BuilderClient;","map":null,"metadata":{},"sourceType":"script"}