{"ast":null,"code":"import { Tools } from \"@babylonjs/core/Misc/tools\";\nimport { VertexBuffer } from \"@babylonjs/core/Meshes/buffer\";\nimport { Mesh } from \"@babylonjs/core/Meshes/mesh\";\nimport { SceneLoader } from \"@babylonjs/core/Loading/sceneLoader\";\nimport { AssetContainer } from \"@babylonjs/core/assetContainer\";\n/**\r\n * STL file type loader.\r\n * This is a babylon scene loader plugin.\r\n */\n\nvar STLFileLoader =\n/** @class */\nfunction () {\n  function STLFileLoader() {\n    /** @hidden */\n    this.solidPattern = /solid (\\S*)([\\S\\s]*?)endsolid[ ]*(\\S*)/g;\n    /** @hidden */\n\n    this.facetsPattern = /facet([\\s\\S]*?)endfacet/g;\n    /** @hidden */\n\n    this.normalPattern = /normal[\\s]+([\\-+]?[0-9]+\\.?[0-9]*([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+/g;\n    /** @hidden */\n\n    this.vertexPattern = /vertex[\\s]+([\\-+]?[0-9]+\\.?[0-9]*([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+[\\s]+([\\-+]?[0-9]*\\.?[0-9]+([eE][\\-+]?[0-9]+)?)+/g;\n    /**\r\n     * Defines the name of the plugin.\r\n     */\n\n    this.name = \"stl\";\n    /**\r\n     * Defines the extensions the stl loader is able to load.\r\n     * force data to come in as an ArrayBuffer\r\n     * we'll convert to string if it looks like it's an ASCII .stl\r\n     */\n\n    this.extensions = {\n      \".stl\": {\n        isBinary: true\n      }\n    };\n  }\n  /**\r\n   * Import meshes into a scene.\r\n   * @param meshesNames An array of mesh names, a single mesh name, or empty string for all meshes that filter what meshes are imported\r\n   * @param scene The scene to import into\r\n   * @param data The data to import\r\n   * @param rootUrl The root url for scene and resources\r\n   * @param meshes The meshes array to import into\r\n   * @param particleSystems The particle systems array to import into\r\n   * @param skeletons The skeletons array to import into\r\n   * @param onError The callback when import fails\r\n   * @returns True if successful or false otherwise\r\n   */\n\n\n  STLFileLoader.prototype.importMesh = function (meshesNames, scene, data, rootUrl, meshes, particleSystems, skeletons) {\n    var matches;\n\n    if (typeof data !== \"string\") {\n      if (this._isBinary(data)) {\n        // binary .stl\n        var babylonMesh = new Mesh(\"stlmesh\", scene);\n\n        this._parseBinary(babylonMesh, data);\n\n        if (meshes) {\n          meshes.push(babylonMesh);\n        }\n\n        return true;\n      } // ASCII .stl\n      // convert to string\n\n\n      var array_buffer = new Uint8Array(data);\n      var str = '';\n\n      for (var i = 0; i < data.byteLength; i++) {\n        str += String.fromCharCode(array_buffer[i]); // implicitly assumes little-endian\n      }\n\n      data = str;\n    } //if arrived here, data is a string, containing the STLA data.\n\n\n    while (matches = this.solidPattern.exec(data)) {\n      var meshName = matches[1];\n      var meshNameFromEnd = matches[3];\n\n      if (meshName != meshNameFromEnd) {\n        Tools.Error(\"Error in STL, solid name != endsolid name\");\n        return false;\n      } // check meshesNames\n\n\n      if (meshesNames && meshName) {\n        if (meshesNames instanceof Array) {\n          if (!meshesNames.indexOf(meshName)) {\n            continue;\n          }\n        } else {\n          if (meshName !== meshesNames) {\n            continue;\n          }\n        }\n      } // stl mesh name can be empty as well\n\n\n      meshName = meshName || \"stlmesh\";\n      var babylonMesh = new Mesh(meshName, scene);\n\n      this._parseASCII(babylonMesh, matches[2]);\n\n      if (meshes) {\n        meshes.push(babylonMesh);\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Load into a scene.\r\n   * @param scene The scene to load into\r\n   * @param data The data to import\r\n   * @param rootUrl The root url for scene and resources\r\n   * @param onError The callback when import fails\r\n   * @returns true if successful or false otherwise\r\n   */\n\n\n  STLFileLoader.prototype.load = function (scene, data, rootUrl) {\n    var result = this.importMesh(null, scene, data, rootUrl, null, null, null);\n    return result;\n  };\n  /**\r\n   * Load into an asset container.\r\n   * @param scene The scene to load into\r\n   * @param data The data to import\r\n   * @param rootUrl The root url for scene and resources\r\n   * @param onError The callback when import fails\r\n   * @returns The loaded asset container\r\n   */\n\n\n  STLFileLoader.prototype.loadAssetContainer = function (scene, data, rootUrl, onError) {\n    var container = new AssetContainer(scene);\n    scene._blockEntityCollection = true;\n    this.importMesh(null, scene, data, rootUrl, container.meshes, null, null);\n    scene._blockEntityCollection = false;\n    return container;\n  };\n\n  STLFileLoader.prototype._isBinary = function (data) {\n    // check if file size is correct for binary stl\n    var faceSize, nFaces, reader;\n    reader = new DataView(data);\n    faceSize = 32 / 8 * 3 + 32 / 8 * 3 * 3 + 16 / 8;\n    nFaces = reader.getUint32(80, true);\n\n    if (80 + 32 / 8 + nFaces * faceSize === reader.byteLength) {\n      return true;\n    } // check characters higher than ASCII to confirm binary\n\n\n    var fileLength = reader.byteLength;\n\n    for (var index = 0; index < fileLength; index++) {\n      if (reader.getUint8(index) > 127) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  STLFileLoader.prototype._parseBinary = function (mesh, data) {\n    var reader = new DataView(data);\n    var faces = reader.getUint32(80, true);\n    var dataOffset = 84;\n    var faceLength = 12 * 4 + 2;\n    var offset = 0;\n    var positions = new Float32Array(faces * 3 * 3);\n    var normals = new Float32Array(faces * 3 * 3);\n    var indices = new Uint32Array(faces * 3);\n    var indicesCount = 0;\n\n    for (var face = 0; face < faces; face++) {\n      var start = dataOffset + face * faceLength;\n      var normalX = reader.getFloat32(start, true);\n      var normalY = reader.getFloat32(start + 4, true);\n      var normalZ = reader.getFloat32(start + 8, true);\n\n      for (var i = 1; i <= 3; i++) {\n        var vertexstart = start + i * 12; // ordering is intentional to match ascii import\n\n        positions[offset] = reader.getFloat32(vertexstart, true);\n        positions[offset + 2] = reader.getFloat32(vertexstart + 4, true);\n        positions[offset + 1] = reader.getFloat32(vertexstart + 8, true);\n        normals[offset] = normalX;\n        normals[offset + 2] = normalY;\n        normals[offset + 1] = normalZ;\n        offset += 3;\n      }\n\n      indices[indicesCount] = indicesCount++;\n      indices[indicesCount] = indicesCount++;\n      indices[indicesCount] = indicesCount++;\n    }\n\n    mesh.setVerticesData(VertexBuffer.PositionKind, positions);\n    mesh.setVerticesData(VertexBuffer.NormalKind, normals);\n    mesh.setIndices(indices);\n    mesh.computeWorldMatrix(true);\n  };\n\n  STLFileLoader.prototype._parseASCII = function (mesh, solidData) {\n    var positions = [];\n    var normals = [];\n    var indices = [];\n    var indicesCount = 0; //load facets, ignoring loop as the standard doesn't define it can contain more than vertices\n\n    var matches;\n\n    while (matches = this.facetsPattern.exec(solidData)) {\n      var facet = matches[1]; //one normal per face\n\n      var normalMatches = this.normalPattern.exec(facet);\n      this.normalPattern.lastIndex = 0;\n\n      if (!normalMatches) {\n        continue;\n      }\n\n      var normal = [Number(normalMatches[1]), Number(normalMatches[5]), Number(normalMatches[3])];\n      var vertexMatch;\n\n      while (vertexMatch = this.vertexPattern.exec(facet)) {\n        positions.push(Number(vertexMatch[1]), Number(vertexMatch[5]), Number(vertexMatch[3]));\n        normals.push(normal[0], normal[1], normal[2]);\n      }\n\n      indices.push(indicesCount++, indicesCount++, indicesCount++);\n      this.vertexPattern.lastIndex = 0;\n    }\n\n    this.facetsPattern.lastIndex = 0;\n    mesh.setVerticesData(VertexBuffer.PositionKind, positions);\n    mesh.setVerticesData(VertexBuffer.NormalKind, normals);\n    mesh.setIndices(indices);\n    mesh.computeWorldMatrix(true);\n  };\n\n  return STLFileLoader;\n}();\n\nexport { STLFileLoader };\n\nif (SceneLoader) {\n  SceneLoader.RegisterPlugin(new STLFileLoader());\n}","map":null,"metadata":{},"sourceType":"module"}