{"ast":null,"code":"/**\r\n * ActionEvent is the event being sent when an action is triggered.\r\n */\nvar ActionEvent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new ActionEvent\r\n   * @param source The mesh or sprite that triggered the action\r\n   * @param pointerX The X mouse cursor position at the time of the event\r\n   * @param pointerY The Y mouse cursor position at the time of the event\r\n   * @param meshUnderPointer The mesh that is currently pointed at (can be null)\r\n   * @param sourceEvent the original (browser) event that triggered the ActionEvent\r\n   * @param additionalData additional data for the event\r\n   */\n  function ActionEvent(\n  /** The mesh or sprite that triggered the action */\n  source,\n  /** The X mouse cursor position at the time of the event */\n  pointerX,\n  /** The Y mouse cursor position at the time of the event */\n  pointerY,\n  /** The mesh that is currently pointed at (can be null) */\n  meshUnderPointer,\n  /** the original (browser) event that triggered the ActionEvent */\n  sourceEvent,\n  /** additional data for the event */\n  additionalData) {\n    this.source = source;\n    this.pointerX = pointerX;\n    this.pointerY = pointerY;\n    this.meshUnderPointer = meshUnderPointer;\n    this.sourceEvent = sourceEvent;\n    this.additionalData = additionalData;\n  }\n  /**\r\n   * Helper function to auto-create an ActionEvent from a source mesh.\r\n   * @param source The source mesh that triggered the event\r\n   * @param evt The original (browser) event\r\n   * @param additionalData additional data for the event\r\n   * @returns the new ActionEvent\r\n   */\n\n\n  ActionEvent.CreateNew = function (source, evt, additionalData) {\n    var scene = source.getScene();\n    return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer || source, evt, additionalData);\n  };\n  /**\r\n   * Helper function to auto-create an ActionEvent from a source sprite\r\n   * @param source The source sprite that triggered the event\r\n   * @param scene Scene associated with the sprite\r\n   * @param evt The original (browser) event\r\n   * @param additionalData additional data for the event\r\n   * @returns the new ActionEvent\r\n   */\n\n\n  ActionEvent.CreateNewFromSprite = function (source, scene, evt, additionalData) {\n    return new ActionEvent(source, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt, additionalData);\n  };\n  /**\r\n   * Helper function to auto-create an ActionEvent from a scene. If triggered by a mesh use ActionEvent.CreateNew\r\n   * @param scene the scene where the event occurred\r\n   * @param evt The original (browser) event\r\n   * @returns the new ActionEvent\r\n   */\n\n\n  ActionEvent.CreateNewFromScene = function (scene, evt) {\n    return new ActionEvent(null, scene.pointerX, scene.pointerY, scene.meshUnderPointer, evt);\n  };\n  /**\r\n   * Helper function to auto-create an ActionEvent from a primitive\r\n   * @param prim defines the target primitive\r\n   * @param pointerPos defines the pointer position\r\n   * @param evt The original (browser) event\r\n   * @param additionalData additional data for the event\r\n   * @returns the new ActionEvent\r\n   */\n\n\n  ActionEvent.CreateNewFromPrimitive = function (prim, pointerPos, evt, additionalData) {\n    return new ActionEvent(prim, pointerPos.x, pointerPos.y, null, evt, additionalData);\n  };\n\n  return ActionEvent;\n}();\n\nexport { ActionEvent };","map":null,"metadata":{},"sourceType":"module"}