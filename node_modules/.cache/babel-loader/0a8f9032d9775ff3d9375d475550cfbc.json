{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Logger } from \"../../Misc/logger\";\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\nimport { WebVRController } from \"./webVRController\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\n/**\r\n * Google Daydream controller\r\n */\n\nvar DaydreamController =\n/** @class */\nfunction (_super) {\n  __extends(DaydreamController, _super);\n  /**\r\n   * Creates a new DaydreamController from a gamepad\r\n   * @param vrGamepad the gamepad that the controller should be created from\r\n   */\n\n\n  function DaydreamController(vrGamepad) {\n    var _this = _super.call(this, vrGamepad) || this;\n\n    _this.controllerType = PoseEnabledControllerType.DAYDREAM;\n    return _this;\n  }\n  /**\r\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n   * @param scene scene in which to add meshes\r\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n   */\n\n\n  DaydreamController.prototype.initControllerMesh = function (scene, meshLoaded) {\n    var _this = this;\n\n    SceneLoader.ImportMesh(\"\", DaydreamController.MODEL_BASE_URL, DaydreamController.MODEL_FILENAME, scene, function (newMeshes) {\n      _this._defaultModel = newMeshes[1];\n\n      _this.attachToMesh(_this._defaultModel);\n\n      if (meshLoaded) {\n        meshLoaded(_this._defaultModel);\n      }\n    });\n  };\n  /**\r\n   * Called once for each button that changed state since the last frame\r\n   * @param buttonIdx Which button index changed\r\n   * @param state New state of the button\r\n   * @param changes Which properties on the state changed since last frame\r\n   */\n\n\n  DaydreamController.prototype._handleButtonChange = function (buttonIdx, state, changes) {\n    // Daydream controller only has 1 GamepadButton (on the trackpad).\n    if (buttonIdx === 0) {\n      var observable = this.onTriggerStateChangedObservable;\n\n      if (observable) {\n        observable.notifyObservers(state);\n      }\n    } else {\n      // If the app or home buttons are ever made available\n      Logger.Warn(\"Unrecognized Daydream button index: \" + buttonIdx);\n    }\n  };\n  /**\r\n   * Base Url for the controller model.\r\n   */\n\n\n  DaydreamController.MODEL_BASE_URL = 'https://controllers.babylonjs.com/generic/';\n  /**\r\n   * File name for the controller model.\r\n   */\n\n  DaydreamController.MODEL_FILENAME = 'generic.babylon';\n  /**\r\n   * Gamepad Id prefix used to identify Daydream Controller.\r\n   */\n\n  DaydreamController.GAMEPAD_ID_PREFIX = 'Daydream'; // id is 'Daydream Controller'\n\n  return DaydreamController;\n}(WebVRController);\n\nexport { DaydreamController };\n\nPoseEnabledControllerHelper._ControllerFactories.push({\n  canCreate: function canCreate(gamepadInfo) {\n    return gamepadInfo.id.indexOf(DaydreamController.GAMEPAD_ID_PREFIX) === 0;\n  },\n  create: function create(gamepadInfo) {\n    return new DaydreamController(gamepadInfo);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}