{"ast":null,"code":"import { Sound } from \"./sound\";\nimport { SoundTrack } from \"./soundTrack\";\nimport { Engine } from \"../Engines/engine\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { Scene } from \"../scene\";\nimport { AbstractScene } from \"../abstractScene\";\nimport \"./audioEngine\";\nimport { PrecisionDate } from '../Misc/precisionDate'; // Adds the parser to the scene parsers.\n\nAbstractScene.AddParser(SceneComponentConstants.NAME_AUDIO, function (parsedData, scene, container, rootUrl) {\n  // TODO: add sound\n  var loadedSounds = [];\n  var loadedSound;\n  container.sounds = container.sounds || [];\n\n  if (parsedData.sounds !== undefined && parsedData.sounds !== null) {\n    for (var index = 0, cache = parsedData.sounds.length; index < cache; index++) {\n      var parsedSound = parsedData.sounds[index];\n\n      if (Engine.audioEngine.canUseWebAudio) {\n        if (!parsedSound.url) {\n          parsedSound.url = parsedSound.name;\n        }\n\n        if (!loadedSounds[parsedSound.url]) {\n          loadedSound = Sound.Parse(parsedSound, scene, rootUrl);\n          loadedSounds[parsedSound.url] = loadedSound;\n          container.sounds.push(loadedSound);\n        } else {\n          container.sounds.push(Sound.Parse(parsedSound, scene, rootUrl, loadedSounds[parsedSound.url]));\n        }\n      } else {\n        container.sounds.push(new Sound(parsedSound.name, null, scene));\n      }\n    }\n  }\n\n  loadedSounds = [];\n});\nObject.defineProperty(Scene.prototype, \"mainSoundTrack\", {\n  get: function get() {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    if (!this._mainSoundTrack) {\n      this._mainSoundTrack = new SoundTrack(this, {\n        mainTrack: true\n      });\n    }\n\n    return this._mainSoundTrack;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nScene.prototype.getSoundByName = function (name) {\n  var index;\n\n  for (index = 0; index < this.mainSoundTrack.soundCollection.length; index++) {\n    if (this.mainSoundTrack.soundCollection[index].name === name) {\n      return this.mainSoundTrack.soundCollection[index];\n    }\n  }\n\n  if (this.soundTracks) {\n    for (var sdIndex = 0; sdIndex < this.soundTracks.length; sdIndex++) {\n      for (index = 0; index < this.soundTracks[sdIndex].soundCollection.length; index++) {\n        if (this.soundTracks[sdIndex].soundCollection[index].name === name) {\n          return this.soundTracks[sdIndex].soundCollection[index];\n        }\n      }\n    }\n  }\n\n  return null;\n};\n\nObject.defineProperty(Scene.prototype, \"audioEnabled\", {\n  get: function get() {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    return compo.audioEnabled;\n  },\n  set: function set(value) {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    if (value) {\n      compo.enableAudio();\n    } else {\n      compo.disableAudio();\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Scene.prototype, \"headphone\", {\n  get: function get() {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    return compo.headphone;\n  },\n  set: function set(value) {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    if (value) {\n      compo.switchAudioModeForHeadphones();\n    } else {\n      compo.switchAudioModeForNormalSpeakers();\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Scene.prototype, \"audioListenerPositionProvider\", {\n  get: function get() {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    return compo.audioListenerPositionProvider;\n  },\n  set: function set(value) {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    if (typeof value !== 'function') {\n      throw new Error('The value passed to [Scene.audioListenerPositionProvider] must be a function that returns a Vector3');\n    } else {\n      compo.audioListenerPositionProvider = value;\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Scene.prototype, \"audioPositioningRefreshRate\", {\n  get: function get() {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    return compo.audioPositioningRefreshRate;\n  },\n  set: function set(value) {\n    var compo = this._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n    if (!compo) {\n      compo = new AudioSceneComponent(this);\n\n      this._addComponent(compo);\n    }\n\n    compo.audioPositioningRefreshRate = value;\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\r\n * Defines the sound scene component responsible to manage any sounds\r\n * in a given scene.\r\n */\n\nvar AudioSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function AudioSceneComponent(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_AUDIO;\n    this._audioEnabled = true;\n    this._headphone = false;\n    /**\r\n     * Gets or sets a refresh rate when using 3D audio positioning\r\n     */\n\n    this.audioPositioningRefreshRate = 500;\n    this._audioListenerPositionProvider = null;\n    this._cachedCameraDirection = new Vector3();\n    this._cachedCameraPosition = new Vector3();\n    this._lastCheck = 0;\n    this.scene = scene;\n    scene.soundTracks = new Array();\n    scene.sounds = new Array();\n  }\n\n  Object.defineProperty(AudioSceneComponent.prototype, \"audioEnabled\", {\n    /**\r\n     * Gets whether audio is enabled or not.\r\n     * Please use related enable/disable method to switch state.\r\n     */\n    get: function get() {\n      return this._audioEnabled;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AudioSceneComponent.prototype, \"headphone\", {\n    /**\r\n     * Gets whether audio is outputing to headphone or not.\r\n     * Please use the according Switch methods to change output.\r\n     */\n    get: function get() {\n      return this._headphone;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AudioSceneComponent.prototype, \"audioListenerPositionProvider\", {\n    /**\r\n     * Gets the current audio listener position provider\r\n     */\n    get: function get() {\n      return this._audioListenerPositionProvider;\n    },\n\n    /**\r\n     * Sets a custom listener position for all sounds in the scene\r\n     * By default, this is the position of the first active camera\r\n     */\n    set: function set(value) {\n      this._audioListenerPositionProvider = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n  AudioSceneComponent.prototype.register = function () {\n    this.scene._afterRenderStage.registerStep(SceneComponentConstants.STEP_AFTERRENDER_AUDIO, this, this._afterRender);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  AudioSceneComponent.prototype.rebuild = function () {// Nothing to do here. (Not rendering related)\n  };\n  /**\r\n   * Serializes the component data to the specified json object\r\n   * @param serializationObject The object to serialize to\r\n   */\n\n\n  AudioSceneComponent.prototype.serialize = function (serializationObject) {\n    serializationObject.sounds = [];\n\n    if (this.scene.soundTracks) {\n      for (var index = 0; index < this.scene.soundTracks.length; index++) {\n        var soundtrack = this.scene.soundTracks[index];\n\n        for (var soundId = 0; soundId < soundtrack.soundCollection.length; soundId++) {\n          serializationObject.sounds.push(soundtrack.soundCollection[soundId].serialize());\n        }\n      }\n    }\n  };\n  /**\r\n   * Adds all the elements from the container to the scene\r\n   * @param container the container holding the elements\r\n   */\n\n\n  AudioSceneComponent.prototype.addFromContainer = function (container) {\n    var _this = this;\n\n    if (!container.sounds) {\n      return;\n    }\n\n    container.sounds.forEach(function (sound) {\n      sound.play();\n      sound.autoplay = true;\n\n      _this.scene.mainSoundTrack.addSound(sound);\n    });\n  };\n  /**\r\n   * Removes all the elements in the container from the scene\r\n   * @param container contains the elements to remove\r\n   * @param dispose if the removed element should be disposed (default: false)\r\n   */\n\n\n  AudioSceneComponent.prototype.removeFromContainer = function (container, dispose) {\n    var _this = this;\n\n    if (dispose === void 0) {\n      dispose = false;\n    }\n\n    if (!container.sounds) {\n      return;\n    }\n\n    container.sounds.forEach(function (sound) {\n      sound.stop();\n      sound.autoplay = false;\n\n      _this.scene.mainSoundTrack.removeSound(sound);\n\n      if (dispose) {\n        sound.dispose();\n      }\n    });\n  };\n  /**\r\n   * Disposes the component and the associated ressources.\r\n   */\n\n\n  AudioSceneComponent.prototype.dispose = function () {\n    var scene = this.scene;\n\n    if (scene._mainSoundTrack) {\n      scene.mainSoundTrack.dispose();\n    }\n\n    if (scene.soundTracks) {\n      for (var scIndex = 0; scIndex < scene.soundTracks.length; scIndex++) {\n        scene.soundTracks[scIndex].dispose();\n      }\n    }\n  };\n  /**\r\n   * Disables audio in the associated scene.\r\n   */\n\n\n  AudioSceneComponent.prototype.disableAudio = function () {\n    var scene = this.scene;\n    this._audioEnabled = false;\n\n    if (Engine.audioEngine && Engine.audioEngine.audioContext) {\n      Engine.audioEngine.audioContext.suspend();\n    }\n\n    var i;\n\n    for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\n      scene.mainSoundTrack.soundCollection[i].pause();\n    }\n\n    if (scene.soundTracks) {\n      for (i = 0; i < scene.soundTracks.length; i++) {\n        for (var j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\n          scene.soundTracks[i].soundCollection[j].pause();\n        }\n      }\n    }\n  };\n  /**\r\n   * Enables audio in the associated scene.\r\n   */\n\n\n  AudioSceneComponent.prototype.enableAudio = function () {\n    var scene = this.scene;\n    this._audioEnabled = true;\n\n    if (Engine.audioEngine && Engine.audioEngine.audioContext) {\n      Engine.audioEngine.audioContext.resume();\n    }\n\n    var i;\n\n    for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\n      if (scene.mainSoundTrack.soundCollection[i].isPaused) {\n        scene.mainSoundTrack.soundCollection[i].play();\n      }\n    }\n\n    if (scene.soundTracks) {\n      for (i = 0; i < scene.soundTracks.length; i++) {\n        for (var j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\n          if (scene.soundTracks[i].soundCollection[j].isPaused) {\n            scene.soundTracks[i].soundCollection[j].play();\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Switch audio to headphone output.\r\n   */\n\n\n  AudioSceneComponent.prototype.switchAudioModeForHeadphones = function () {\n    var scene = this.scene;\n    this._headphone = true;\n    scene.mainSoundTrack.switchPanningModelToHRTF();\n\n    if (scene.soundTracks) {\n      for (var i = 0; i < scene.soundTracks.length; i++) {\n        scene.soundTracks[i].switchPanningModelToHRTF();\n      }\n    }\n  };\n  /**\r\n   * Switch audio to normal speakers.\r\n   */\n\n\n  AudioSceneComponent.prototype.switchAudioModeForNormalSpeakers = function () {\n    var scene = this.scene;\n    this._headphone = false;\n    scene.mainSoundTrack.switchPanningModelToEqualPower();\n\n    if (scene.soundTracks) {\n      for (var i = 0; i < scene.soundTracks.length; i++) {\n        scene.soundTracks[i].switchPanningModelToEqualPower();\n      }\n    }\n  };\n\n  AudioSceneComponent.prototype._afterRender = function () {\n    var now = PrecisionDate.Now;\n\n    if (this._lastCheck && now - this._lastCheck < this.audioPositioningRefreshRate) {\n      return;\n    }\n\n    this._lastCheck = now;\n    var scene = this.scene;\n\n    if (!this._audioEnabled || !scene._mainSoundTrack || !scene.soundTracks || scene._mainSoundTrack.soundCollection.length === 0 && scene.soundTracks.length === 1) {\n      return;\n    }\n\n    var audioEngine = Engine.audioEngine;\n\n    if (!audioEngine) {\n      return;\n    }\n\n    if (audioEngine.audioContext) {\n      // A custom listener position provider was set\n      // Use the users provided position instead of camera's\n      if (this._audioListenerPositionProvider) {\n        var position = this._audioListenerPositionProvider(); // Make sure all coordinates were provided\n\n\n        position.x = position.x || 0;\n        position.y = position.y || 0;\n        position.z = position.z || 0; // Set the listener position\n\n        audioEngine.audioContext.listener.setPosition(position.x, position.y, position.z);\n      } else {\n        var listeningCamera;\n\n        if (scene.activeCameras && scene.activeCameras.length > 0) {\n          listeningCamera = scene.activeCameras[0];\n        } else {\n          listeningCamera = scene.activeCamera;\n        } // Check if there is a listening camera\n\n\n        if (listeningCamera) {\n          // Set the listener position to the listening camera global position\n          if (!this._cachedCameraPosition.equals(listeningCamera.globalPosition)) {\n            this._cachedCameraPosition.copyFrom(listeningCamera.globalPosition);\n\n            audioEngine.audioContext.listener.setPosition(listeningCamera.globalPosition.x, listeningCamera.globalPosition.y, listeningCamera.globalPosition.z);\n          } // for VR cameras\n\n\n          if (listeningCamera.rigCameras && listeningCamera.rigCameras.length > 0) {\n            listeningCamera = listeningCamera.rigCameras[0];\n          }\n\n          var mat = Matrix.Invert(listeningCamera.getViewMatrix());\n          var cameraDirection = Vector3.TransformNormal(scene.useRightHandedSystem ? AudioSceneComponent._CameraDirectionRH : AudioSceneComponent._CameraDirectionLH, mat);\n          cameraDirection.normalize(); // To avoid some errors on GearVR\n\n          if (!isNaN(cameraDirection.x) && !isNaN(cameraDirection.y) && !isNaN(cameraDirection.z)) {\n            if (!this._cachedCameraDirection.equals(cameraDirection)) {\n              this._cachedCameraDirection.copyFrom(cameraDirection);\n\n              audioEngine.audioContext.listener.setOrientation(cameraDirection.x, cameraDirection.y, cameraDirection.z, 0, 1, 0);\n            }\n          }\n        } // Otherwise set the listener position to 0, 0 ,0\n        else {\n          // Set the listener position\n          audioEngine.audioContext.listener.setPosition(0, 0, 0);\n        }\n      }\n\n      var i;\n\n      for (i = 0; i < scene.mainSoundTrack.soundCollection.length; i++) {\n        var sound = scene.mainSoundTrack.soundCollection[i];\n\n        if (sound.useCustomAttenuation) {\n          sound.updateDistanceFromListener();\n        }\n      }\n\n      if (scene.soundTracks) {\n        for (i = 0; i < scene.soundTracks.length; i++) {\n          for (var j = 0; j < scene.soundTracks[i].soundCollection.length; j++) {\n            sound = scene.soundTracks[i].soundCollection[j];\n\n            if (sound.useCustomAttenuation) {\n              sound.updateDistanceFromListener();\n            }\n          }\n        }\n      }\n    }\n  };\n\n  AudioSceneComponent._CameraDirectionLH = new Vector3(0, 0, -1);\n  AudioSceneComponent._CameraDirectionRH = new Vector3(0, 0, 1);\n  return AudioSceneComponent;\n}();\n\nexport { AudioSceneComponent };\n\nSound._SceneComponentInitialization = function (scene) {\n  var compo = scene._getComponent(SceneComponentConstants.NAME_AUDIO);\n\n  if (!compo) {\n    compo = new AudioSceneComponent(scene);\n\n    scene._addComponent(compo);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}