{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(identitySaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleGenerateIdentityRequest),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(handleLogout),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(handleConnectWalletSuccess),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(handleChangeAccount);\n\nimport { takeLatest, put, select, call } from 'redux-saga/effects';\nimport { Personal } from 'web3x/personal';\nimport { Address } from 'web3x/address';\nimport { bufferToHex } from 'web3x/utils';\nimport { Account } from 'web3x/account';\nimport { replace, getLocation } from 'connected-react-router';\nimport { Authenticator } from 'dcl-crypto';\nimport { getData as getWallet, isConnected, getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { config } from 'config';\nimport { CONNECT_WALLET_SUCCESS, CONNECT_WALLET_FAILURE, enableWalletRequest, ENABLE_WALLET_SUCCESS, ENABLE_WALLET_FAILURE, disconnectWallet, CHANGE_ACCOUNT } from 'decentraland-dapps/dist/modules/wallet/actions';\nimport { locations } from 'routing/locations';\nimport { clearAssetPacks } from 'modules/assetPack/actions';\nimport { closeModal } from 'modules/modal/actions';\nimport { getEth } from 'modules/wallet/utils';\nimport { GENERATE_IDENTITY_REQUEST, generateIdentityFailure, generateIdentitySuccess, generateIdentityRequest, GENERATE_IDENTITY_SUCCESS, LOGIN_REQUEST, LOGOUT, destroyIdentity, GENERATE_IDENTITY_FAILURE, loginRequest, loginSuccess, loginFailure } from './actions';\nimport { ONE_MONTH_IN_MINUTES, takeRace } from './utils';\nimport { isLoggedIn, getCurrentIdentity } from './selectors';\nexport function identitySaga() {\n  return _regeneratorRuntime.wrap(function identitySaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLatest(CONNECT_WALLET_SUCCESS, handleConnectWalletSuccess);\n\n        case 2:\n          _context.next = 4;\n          return takeLatest(CHANGE_ACCOUNT, handleChangeAccount);\n\n        case 4:\n          _context.next = 6;\n          return takeLatest(GENERATE_IDENTITY_REQUEST, handleGenerateIdentityRequest);\n\n        case 6:\n          _context.next = 8;\n          return takeLatest(LOGIN_REQUEST, handleLogin);\n\n        case 8:\n          _context.next = 10;\n          return takeLatest(LOGOUT, handleLogout);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction handleGenerateIdentityRequest(action) {\n  var address, eth, account, payload, expiration, personal, identity;\n  return _regeneratorRuntime.wrap(function handleGenerateIdentityRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          address = action.payload.address.toLowerCase();\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(getEth);\n\n        case 4:\n          eth = _context2.sent;\n          account = Account.create();\n          payload = {\n            address: account.address.toString(),\n            publicKey: bufferToHex(account.publicKey),\n            privateKey: bufferToHex(account.privateKey)\n          };\n          expiration = Number(config.get('IDENTITY_EXPIRATION_MINUTES', ONE_MONTH_IN_MINUTES.toString()));\n          personal = new Personal(eth.provider);\n          _context2.next = 11;\n          return Authenticator.initializeAuthChain(address, payload, expiration, function (message) {\n            return personal.sign(message, Address.fromString(address), '');\n          });\n\n        case 11:\n          identity = _context2.sent;\n          _context2.next = 14;\n          return put(generateIdentitySuccess(address, identity));\n\n        case 14:\n          _context2.next = 20;\n          break;\n\n        case 16:\n          _context2.prev = 16;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 20;\n          return put(generateIdentityFailure(address, _context2.t0));\n\n        case 20:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 16]]);\n}\n\nfunction handleLogin(action) {\n  var _action$payload, restoreSession, providerType, shouldLogin, shouldConnectWallet, enableWallet, connectWallet, _identity, address, generateIdentity, wallet, identity;\n\n  return _regeneratorRuntime.wrap(function handleLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _action$payload = action.payload, restoreSession = _action$payload.restoreSession, providerType = _action$payload.providerType; // Check if we need to generate an identity\n\n          _context3.next = 3;\n          return select(function (state) {\n            return !isLoggedIn(state);\n          });\n\n        case 3:\n          shouldLogin = _context3.sent;\n\n          if (!(shouldLogin && !restoreSession)) {\n            _context3.next = 45;\n            break;\n          }\n\n          _context3.next = 7;\n          return select(function (state) {\n            return !isConnected(state);\n          });\n\n        case 7:\n          shouldConnectWallet = _context3.sent;\n\n          if (!shouldConnectWallet) {\n            _context3.next = 29;\n            break;\n          }\n\n          if (providerType) {\n            _context3.next = 13;\n            break;\n          }\n\n          _context3.next = 12;\n          return put(loginFailure('Undefined provider type'));\n\n        case 12:\n          return _context3.abrupt(\"return\");\n\n        case 13:\n          _context3.next = 15;\n          return put(enableWalletRequest(providerType));\n\n        case 15:\n          _context3.next = 17;\n          return takeRace(ENABLE_WALLET_SUCCESS, ENABLE_WALLET_FAILURE);\n\n        case 17:\n          enableWallet = _context3.sent;\n\n          if (enableWallet.success) {\n            _context3.next = 22;\n            break;\n          }\n\n          _context3.next = 21;\n          return put(loginFailure(enableWallet.failure.payload.error));\n\n        case 21:\n          return _context3.abrupt(\"return\");\n\n        case 22:\n          _context3.next = 24;\n          return takeRace(CONNECT_WALLET_SUCCESS, CONNECT_WALLET_FAILURE);\n\n        case 24:\n          connectWallet = _context3.sent;\n\n          if (connectWallet.success) {\n            _context3.next = 29;\n            break;\n          }\n\n          _context3.next = 28;\n          return put(loginFailure(connectWallet.failure.payload.error));\n\n        case 28:\n          return _context3.abrupt(\"return\");\n\n        case 29:\n          _context3.next = 31;\n          return select(getCurrentIdentity);\n\n        case 31:\n          _identity = _context3.sent;\n\n          if (_identity) {\n            _context3.next = 45;\n            break;\n          }\n\n          _context3.next = 35;\n          return select(getAddress);\n\n        case 35:\n          address = _context3.sent;\n          _context3.next = 38;\n          return put(generateIdentityRequest(address));\n\n        case 38:\n          _context3.next = 40;\n          return takeRace(GENERATE_IDENTITY_SUCCESS, GENERATE_IDENTITY_FAILURE);\n\n        case 40:\n          generateIdentity = _context3.sent;\n\n          if (generateIdentity.success) {\n            _context3.next = 45;\n            break;\n          }\n\n          _context3.next = 44;\n          return put(loginFailure(generateIdentity.failure.payload.error));\n\n        case 44:\n          return _context3.abrupt(\"return\");\n\n        case 45:\n          _context3.next = 47;\n          return select(getWallet);\n\n        case 47:\n          wallet = _context3.sent;\n          _context3.next = 50;\n          return select(getCurrentIdentity);\n\n        case 50:\n          identity = _context3.sent;\n\n          if (!(wallet && identity)) {\n            _context3.next = 58;\n            break;\n          }\n\n          _context3.next = 54;\n          return put(loginSuccess(wallet, identity));\n\n        case 54:\n          _context3.next = 56;\n          return put(closeModal('WalletLoginModal'));\n\n        case 56:\n          _context3.next = 60;\n          break;\n\n        case 58:\n          _context3.next = 60;\n          return put(loginFailure(restoreSession ? 'Failed to restore session' : 'Failed to login'));\n\n        case 60:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction handleLogout(_action) {\n  var address;\n  return _regeneratorRuntime.wrap(function handleLogout$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return select(getAddress);\n\n        case 2:\n          address = _context4.sent;\n\n          if (!address) {\n            _context4.next = 8;\n            break;\n          }\n\n          _context4.next = 6;\n          return put(disconnectWallet());\n\n        case 6:\n          _context4.next = 8;\n          return put(destroyIdentity(address));\n\n        case 8:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction handleConnectWalletSuccess(action) {\n  var wallet, shouldRestoreSession;\n  return _regeneratorRuntime.wrap(function handleConnectWalletSuccess$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          wallet = action.payload.wallet;\n          _context5.next = 3;\n          return select(isLoggedIn);\n\n        case 3:\n          shouldRestoreSession = _context5.sent;\n\n          if (!shouldRestoreSession) {\n            _context5.next = 7;\n            break;\n          }\n\n          _context5.next = 7;\n          return put(loginRequest(wallet.providerType, true));\n\n        case 7:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction handleChangeAccount(action) {\n  var wallet, shouldRestoreSession, location, isEditor;\n  return _regeneratorRuntime.wrap(function handleChangeAccount$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          wallet = action.payload.wallet;\n          _context6.next = 3;\n          return select(isLoggedIn);\n\n        case 3:\n          shouldRestoreSession = _context6.sent;\n\n          if (!shouldRestoreSession) {\n            _context6.next = 7;\n            break;\n          }\n\n          _context6.next = 7;\n          return put(loginRequest(wallet.providerType, true));\n\n        case 7:\n          _context6.next = 9;\n          return put(clearAssetPacks());\n\n        case 9:\n          _context6.next = 11;\n          return select(getLocation);\n\n        case 11:\n          location = _context6.sent;\n          isEditor = location.pathname.includes('editor');\n\n          if (!isEditor) {\n            _context6.next = 16;\n            break;\n          }\n\n          _context6.next = 16;\n          return put(replace(locations.root()));\n\n        case 16:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/identity/sagas.ts"],"names":["identitySaga","handleGenerateIdentityRequest","handleLogin","handleLogout","handleConnectWalletSuccess","handleChangeAccount","takeLatest","put","select","call","Personal","Address","bufferToHex","Account","replace","getLocation","Authenticator","getData","getWallet","isConnected","getAddress","config","CONNECT_WALLET_SUCCESS","CONNECT_WALLET_FAILURE","enableWalletRequest","ENABLE_WALLET_SUCCESS","ENABLE_WALLET_FAILURE","disconnectWallet","CHANGE_ACCOUNT","locations","clearAssetPacks","closeModal","getEth","GENERATE_IDENTITY_REQUEST","generateIdentityFailure","generateIdentitySuccess","generateIdentityRequest","GENERATE_IDENTITY_SUCCESS","LOGIN_REQUEST","LOGOUT","destroyIdentity","GENERATE_IDENTITY_FAILURE","loginRequest","loginSuccess","loginFailure","ONE_MONTH_IN_MINUTES","takeRace","isLoggedIn","getCurrentIdentity","action","address","payload","toLowerCase","eth","account","create","toString","publicKey","privateKey","expiration","Number","get","personal","provider","initializeAuthChain","message","sign","fromString","identity","restoreSession","providerType","state","shouldLogin","shouldConnectWallet","enableWallet","success","failure","error","connectWallet","generateIdentity","wallet","_action","shouldRestoreSession","location","isEditor","pathname","includes","root"],"mappings":"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","sourcesContent":["import { takeLatest, put, select, call } from 'redux-saga/effects'\nimport { Eth } from 'web3x/eth'\nimport { Personal } from 'web3x/personal'\nimport { Address } from 'web3x/address'\nimport { bufferToHex } from 'web3x/utils'\nimport { Account } from 'web3x/account'\nimport { replace, getLocation } from 'connected-react-router'\nimport { Authenticator, AuthIdentity } from 'dcl-crypto'\nimport { getData as getWallet, isConnected, getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { config } from 'config'\nimport {\n  CONNECT_WALLET_SUCCESS,\n  CONNECT_WALLET_FAILURE,\n  ConnectWalletSuccessAction,\n  enableWalletRequest,\n  ENABLE_WALLET_SUCCESS,\n  ENABLE_WALLET_FAILURE,\n  EnableWalletSuccessAction,\n  EnableWalletFailureAction,\n  disconnectWallet,\n  CHANGE_ACCOUNT,\n  ChangeAccountAction\n} from 'decentraland-dapps/dist/modules/wallet/actions'\nimport { locations } from 'routing/locations'\nimport { clearAssetPacks } from 'modules/assetPack/actions'\nimport { closeModal } from 'modules/modal/actions'\nimport { getEth } from 'modules/wallet/utils'\n\nimport {\n  GENERATE_IDENTITY_REQUEST,\n  GenerateIdentityRequestAction,\n  generateIdentityFailure,\n  generateIdentitySuccess,\n  LoginRequestAction,\n  generateIdentityRequest,\n  GENERATE_IDENTITY_SUCCESS,\n  LOGIN_REQUEST,\n  LOGOUT,\n  LogoutAction,\n  destroyIdentity,\n  GenerateIdentitySuccessAction,\n  GenerateIdentityFailureAction,\n  GENERATE_IDENTITY_FAILURE,\n  loginRequest,\n  loginSuccess,\n  loginFailure\n} from './actions'\nimport { ONE_MONTH_IN_MINUTES, takeRace } from './utils'\nimport { isLoggedIn, getCurrentIdentity } from './selectors'\nimport { Race } from './types'\n\nexport function* identitySaga() {\n  yield takeLatest(CONNECT_WALLET_SUCCESS, handleConnectWalletSuccess)\n  yield takeLatest(CHANGE_ACCOUNT, handleChangeAccount)\n  yield takeLatest(GENERATE_IDENTITY_REQUEST, handleGenerateIdentityRequest)\n  yield takeLatest(LOGIN_REQUEST, handleLogin)\n  yield takeLatest(LOGOUT, handleLogout)\n}\n\nfunction* handleGenerateIdentityRequest(action: GenerateIdentityRequestAction) {\n  const address = action.payload.address.toLowerCase()\n  try {\n    const eth: Eth = yield call(getEth)\n    const account = Account.create()\n\n    const payload = {\n      address: account.address.toString(),\n      publicKey: bufferToHex(account.publicKey),\n      privateKey: bufferToHex(account.privateKey)\n    }\n\n    const expiration = Number(config.get('IDENTITY_EXPIRATION_MINUTES', ONE_MONTH_IN_MINUTES.toString()))\n\n    const personal = new Personal(eth.provider)\n\n    const identity: AuthIdentity = yield Authenticator.initializeAuthChain(address, payload, expiration, message =>\n      personal.sign(message, Address.fromString(address), '')\n    )\n\n    yield put(generateIdentitySuccess(address, identity))\n  } catch (error) {\n    yield put(generateIdentityFailure(address, error))\n  }\n}\n\nfunction* handleLogin(action: LoginRequestAction) {\n  const { restoreSession, providerType } = action.payload\n  // Check if we need to generate an identity\n  const shouldLogin: boolean = yield select(state => !isLoggedIn(state))\n  if (shouldLogin && !restoreSession) {\n    // Check if we need to connect the wallet\n    const shouldConnectWallet: boolean = yield select(state => !isConnected(state))\n    if (shouldConnectWallet) {\n      if (!providerType) {\n        yield put(loginFailure('Undefined provider type'))\n        return\n      }\n\n      // enable wallet\n      yield put(enableWalletRequest(providerType))\n      const enableWallet: Race<EnableWalletSuccessAction, EnableWalletFailureAction> = yield takeRace(\n        ENABLE_WALLET_SUCCESS,\n        ENABLE_WALLET_FAILURE\n      )\n\n      if (!enableWallet.success) {\n        yield put(loginFailure(enableWallet.failure.payload.error))\n        return\n      }\n\n      // connect wallet (a CONNECT_WALLET_REQUEST is dispatched automatically after ENABLE_WALLET_SUCCESS, so we just wait for it to resolve)\n      const connectWallet: Race<EnableWalletSuccessAction, EnableWalletFailureAction> = yield takeRace(\n        CONNECT_WALLET_SUCCESS,\n        CONNECT_WALLET_FAILURE\n      )\n\n      if (!connectWallet.success) {\n        yield put(loginFailure(connectWallet.failure.payload.error))\n        return\n      }\n    }\n\n    // Check if we need  to generate a new identity\n    const identity: AuthIdentity = yield select(getCurrentIdentity)\n    if (!identity) {\n      // Generate a new identity\n      const address: string = yield select(getAddress)\n      yield put(generateIdentityRequest(address))\n      const generateIdentity: Race<GenerateIdentitySuccessAction, GenerateIdentityFailureAction> = yield takeRace(\n        GENERATE_IDENTITY_SUCCESS,\n        GENERATE_IDENTITY_FAILURE\n      )\n\n      if (!generateIdentity.success) {\n        yield put(loginFailure(generateIdentity.failure.payload.error))\n        return\n      }\n    }\n  }\n\n  const wallet: ReturnType<typeof getWallet> = yield select(getWallet)\n  const identity: ReturnType<typeof getCurrentIdentity> = yield select(getCurrentIdentity)\n\n  if (wallet && identity) {\n    yield put(loginSuccess(wallet, identity))\n    yield put(closeModal('WalletLoginModal'))\n  } else {\n    yield put(loginFailure(restoreSession ? 'Failed to restore session' : 'Failed to login'))\n  }\n}\n\nfunction* handleLogout(_action: LogoutAction) {\n  const address: string | undefined = yield select(getAddress)\n  if (address) {\n    yield put(disconnectWallet())\n    yield put(destroyIdentity(address))\n  }\n}\n\nfunction* handleConnectWalletSuccess(action: ConnectWalletSuccessAction) {\n  const { wallet } = action.payload\n  const shouldRestoreSession: boolean = yield select(isLoggedIn)\n  if (shouldRestoreSession) {\n    yield put(loginRequest(wallet.providerType, true))\n  }\n}\n\nfunction* handleChangeAccount(action: ChangeAccountAction) {\n  const { wallet } = action.payload\n  const shouldRestoreSession: boolean = yield select(isLoggedIn)\n  if (shouldRestoreSession) {\n    yield put(loginRequest(wallet.providerType, true))\n  }\n  yield put(clearAssetPacks())\n\n  const location: ReturnType<typeof getLocation> = yield select(getLocation)\n  const isEditor = location.pathname.includes('editor')\n  if (isEditor) {\n    yield put(replace(locations.root()))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}