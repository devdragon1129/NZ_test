{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(itemCurationSaga);\n\nimport { call, takeEvery, takeLatest } from '@redux-saga/core/effects';\nimport PQueue from 'p-queue';\nimport { FETCH_COLLECTION_ITEMS_SUCCESS } from 'modules/item/actions';\nimport { isThirdParty } from 'lib/urn';\nimport { put } from 'redux-saga-test-plan/matchers';\nimport { fetchItemCurationFailure, fetchItemCurationsFailure, fetchItemCurationsRequest, fetchItemCurationsSuccess, fetchItemCurationSuccess, FETCH_ITEM_CURATIONS_REQUEST, FETCH_ITEM_CURATION_REQUEST } from './actions';\nvar MAX_ITEM_CURATIONS = 30;\nvar REQUESTS_BATCH_SIZE = 10;\n\nvar chunk = function chunk(arr, size) {\n  return Array.from({\n    length: Math.ceil(arr.length / size)\n  }, function (_, i) {\n    return arr.slice(i * size, i * size + size);\n  });\n};\n\nexport function itemCurationSaga(builder) {\n  var _marked, _marked2, _marked3, handleFetchCollectionItemCurations, handleFetchItemCurationsRequest, handleFetchItemCurationRequest;\n\n  return _regeneratorRuntime.wrap(function itemCurationSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          handleFetchItemCurationRequest = function _handleFetchItemCurat2(action) {\n            var _action$payload2, collectionId, itemId, curation;\n\n            return _regeneratorRuntime.wrap(function handleFetchItemCurationRequest$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _action$payload2 = action.payload, collectionId = _action$payload2.collectionId, itemId = _action$payload2.itemId;\n                    _context3.prev = 1;\n                    _context3.next = 4;\n                    return call([builder, builder.fetchItemCuration], itemId);\n\n                  case 4:\n                    curation = _context3.sent;\n                    _context3.next = 7;\n                    return put(fetchItemCurationSuccess(collectionId, curation));\n\n                  case 7:\n                    _context3.next = 13;\n                    break;\n\n                  case 9:\n                    _context3.prev = 9;\n                    _context3.t0 = _context3[\"catch\"](1);\n                    _context3.next = 13;\n                    return put(fetchItemCurationFailure(_context3.t0.message));\n\n                  case 13:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _marked3, null, [[1, 9]]);\n          };\n\n          handleFetchItemCurationsRequest = function _handleFetchItemCurat(action) {\n            var _action$payload, collectionId, items, itemCurations, queue, promisesOfCurationsToFetch, allChunkedCurations;\n\n            return _regeneratorRuntime.wrap(function handleFetchItemCurationsRequest$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _action$payload = action.payload, collectionId = _action$payload.collectionId, items = _action$payload.items;\n                    _context2.prev = 1;\n                    itemCurations = [];\n\n                    if (!(items && items.length > 0)) {\n                      _context2.next = 10;\n                      break;\n                    }\n\n                    queue = new PQueue({\n                      concurrency: REQUESTS_BATCH_SIZE\n                    });\n                    promisesOfCurationsToFetch = chunk(items, MAX_ITEM_CURATIONS).map(function (chunkOfItems) {\n                      return function () {\n                        return builder.fetchItemCurations(collectionId, chunkOfItems.map(function (item) {\n                          return item.id;\n                        }));\n                      };\n                    });\n                    _context2.next = 8;\n                    return queue.addAll(promisesOfCurationsToFetch);\n\n                  case 8:\n                    allChunkedCurations = _context2.sent;\n                    itemCurations = allChunkedCurations.flat();\n\n                  case 10:\n                    _context2.next = 12;\n                    return put(fetchItemCurationsSuccess(collectionId, itemCurations));\n\n                  case 12:\n                    _context2.next = 18;\n                    break;\n\n                  case 14:\n                    _context2.prev = 14;\n                    _context2.t0 = _context2[\"catch\"](1);\n                    _context2.next = 18;\n                    return put(fetchItemCurationsFailure(_context2.t0.message));\n\n                  case 18:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _marked2, null, [[1, 14]]);\n          };\n\n          handleFetchCollectionItemCurations = function _handleFetchCollectio(action) {\n            var _items$, _items$2;\n\n            var items, publishedItems, isTPCollection, collectionId;\n            return _regeneratorRuntime.wrap(function handleFetchCollectionItemCurations$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    items = action.payload.items;\n                    publishedItems = items.filter(function (item) {\n                      return item.isPublished;\n                    }); // the collection fetch is done at the same time of the items fetch, so we might not have the collection data yet\n                    // so we can infer if the collection is TP by the item.urn\n\n                    isTPCollection = isThirdParty((_items$ = items[0]) === null || _items$ === void 0 ? void 0 : _items$.urn);\n                    collectionId = (_items$2 = items[0]) === null || _items$2 === void 0 ? void 0 : _items$2.collectionId;\n\n                    if (!(collectionId && isTPCollection && publishedItems.length > 0)) {\n                      _context.next = 7;\n                      break;\n                    }\n\n                    _context.next = 7;\n                    return put(fetchItemCurationsRequest(collectionId, items.filter(function (item) {\n                      return item.isPublished;\n                    })));\n\n                  case 7:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _marked);\n          };\n\n          _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchCollectionItemCurations), _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchItemCurationsRequest), _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchItemCurationRequest);\n          _context4.next = 6;\n          return takeEvery(FETCH_ITEM_CURATION_REQUEST, handleFetchItemCurationRequest);\n\n        case 6:\n          _context4.next = 8;\n          return takeEvery(FETCH_ITEM_CURATIONS_REQUEST, handleFetchItemCurationsRequest);\n\n        case 8:\n          _context4.next = 10;\n          return takeLatest(FETCH_COLLECTION_ITEMS_SUCCESS, handleFetchCollectionItemCurations);\n\n        case 10:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/curations/itemCuration/sagas.ts"],"names":["itemCurationSaga","call","takeEvery","takeLatest","PQueue","FETCH_COLLECTION_ITEMS_SUCCESS","isThirdParty","put","fetchItemCurationFailure","fetchItemCurationsFailure","fetchItemCurationsRequest","fetchItemCurationsSuccess","fetchItemCurationSuccess","FETCH_ITEM_CURATIONS_REQUEST","FETCH_ITEM_CURATION_REQUEST","MAX_ITEM_CURATIONS","REQUESTS_BATCH_SIZE","chunk","arr","size","Array","from","length","Math","ceil","_","i","slice","builder","handleFetchCollectionItemCurations","handleFetchItemCurationsRequest","handleFetchItemCurationRequest","action","payload","collectionId","itemId","fetchItemCuration","curation","message","items","itemCurations","queue","concurrency","promisesOfCurationsToFetch","map","chunkOfItems","fetchItemCurations","item","id","addAll","allChunkedCurations","flat","publishedItems","filter","isPublished","isTPCollection","urn"],"mappings":"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","sourcesContent":["import { call, takeEvery, takeLatest } from '@redux-saga/core/effects'\nimport PQueue from 'p-queue'\nimport { BuilderAPI } from 'lib/api/builder'\nimport { FetchCollectionItemsSuccessAction, FETCH_COLLECTION_ITEMS_SUCCESS } from 'modules/item/actions'\nimport { isThirdParty } from 'lib/urn'\nimport { put } from 'redux-saga-test-plan/matchers'\nimport {\n  fetchItemCurationFailure,\n  FetchItemCurationRequestAction,\n  fetchItemCurationsFailure,\n  fetchItemCurationsRequest,\n  FetchItemCurationsRequestAction,\n  fetchItemCurationsSuccess,\n  fetchItemCurationSuccess,\n  FETCH_ITEM_CURATIONS_REQUEST,\n  FETCH_ITEM_CURATION_REQUEST\n} from './actions'\nimport { ItemCuration } from './types'\n\nconst MAX_ITEM_CURATIONS = 30\nconst REQUESTS_BATCH_SIZE = 10\n\nconst chunk = (arr: any[], size: number) =>\n  Array.from({ length: Math.ceil(arr.length / size) }, (_, i) => arr.slice(i * size, i * size + size))\n\nexport function* itemCurationSaga(builder: BuilderAPI) {\n  yield takeEvery(FETCH_ITEM_CURATION_REQUEST, handleFetchItemCurationRequest)\n  yield takeEvery(FETCH_ITEM_CURATIONS_REQUEST, handleFetchItemCurationsRequest)\n  yield takeLatest(FETCH_COLLECTION_ITEMS_SUCCESS, handleFetchCollectionItemCurations)\n\n  function* handleFetchCollectionItemCurations(action: FetchCollectionItemsSuccessAction) {\n    const { items } = action.payload\n    const publishedItems = items.filter(item => item.isPublished)\n    // the collection fetch is done at the same time of the items fetch, so we might not have the collection data yet\n    // so we can infer if the collection is TP by the item.urn\n    const isTPCollection = isThirdParty(items[0]?.urn)\n    const collectionId = items[0]?.collectionId\n    if (collectionId && isTPCollection && publishedItems.length > 0) {\n      yield put(\n        fetchItemCurationsRequest(\n          collectionId,\n          items.filter(item => item.isPublished)\n        )\n      )\n    }\n  }\n\n  function* handleFetchItemCurationsRequest(action: FetchItemCurationsRequestAction) {\n    const { collectionId, items } = action.payload\n    try {\n      let itemCurations: ItemCuration[] = []\n      if (items && items.length > 0) {\n        const queue = new PQueue({ concurrency: REQUESTS_BATCH_SIZE })\n        const promisesOfCurationsToFetch: (() => Promise<ItemCuration[]>)[] = chunk(items, MAX_ITEM_CURATIONS).map(chunkOfItems => () =>\n          builder.fetchItemCurations(\n            collectionId,\n            chunkOfItems.map(item => item.id)\n          )\n        )\n\n        const allChunkedCurations: ItemCuration[][] = yield queue.addAll(promisesOfCurationsToFetch)\n        itemCurations = allChunkedCurations.flat()\n      }\n\n      yield put(fetchItemCurationsSuccess(collectionId, itemCurations))\n    } catch (error) {\n      yield put(fetchItemCurationsFailure(error.message))\n    }\n  }\n\n  function* handleFetchItemCurationRequest(action: FetchItemCurationRequestAction) {\n    const { collectionId, itemId } = action.payload\n    try {\n      const curation: ItemCuration = yield call([builder, builder.fetchItemCuration], itemId)\n      yield put(fetchItemCurationSuccess(collectionId, curation))\n    } catch (error) {\n      yield put(fetchItemCurationFailure(error.message))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}