{"ast":null,"code":"import { Scene } from \"../scene\";\nimport { Mesh } from \"./mesh\";\nimport { SimplificationQueue, SimplificationType } from \"./meshSimplification\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nObject.defineProperty(Scene.prototype, \"simplificationQueue\", {\n  get: function get() {\n    if (!this._simplificationQueue) {\n      this._simplificationQueue = new SimplificationQueue();\n\n      var component = this._getComponent(SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE);\n\n      if (!component) {\n        component = new SimplicationQueueSceneComponent(this);\n\n        this._addComponent(component);\n      }\n    }\n\n    return this._simplificationQueue;\n  },\n  set: function set(value) {\n    this._simplificationQueue = value;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nMesh.prototype.simplify = function (settings, parallelProcessing, simplificationType, successCallback) {\n  if (parallelProcessing === void 0) {\n    parallelProcessing = true;\n  }\n\n  if (simplificationType === void 0) {\n    simplificationType = SimplificationType.QUADRATIC;\n  }\n\n  this.getScene().simplificationQueue.addTask({\n    settings: settings,\n    parallelProcessing: parallelProcessing,\n    mesh: this,\n    simplificationType: simplificationType,\n    successCallback: successCallback\n  });\n  return this;\n};\n/**\r\n * Defines the simplification queue scene component responsible to help scheduling the various simplification task\r\n * created in a scene\r\n */\n\n\nvar SimplicationQueueSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function SimplicationQueueSceneComponent(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_SIMPLIFICATIONQUEUE;\n    this.scene = scene;\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  SimplicationQueueSceneComponent.prototype.register = function () {\n    this.scene._beforeCameraUpdateStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERAUPDATE_SIMPLIFICATIONQUEUE, this, this._beforeCameraUpdate);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  SimplicationQueueSceneComponent.prototype.rebuild = function () {// Nothing to do for this component\n  };\n  /**\r\n   * Disposes the component and the associated ressources\r\n   */\n\n\n  SimplicationQueueSceneComponent.prototype.dispose = function () {// Nothing to do for this component\n  };\n\n  SimplicationQueueSceneComponent.prototype._beforeCameraUpdate = function () {\n    if (this.scene._simplificationQueue && !this.scene._simplificationQueue.running) {\n      this.scene._simplificationQueue.executeNext();\n    }\n  };\n\n  return SimplicationQueueSceneComponent;\n}();\n\nexport { SimplicationQueueSceneComponent };","map":null,"metadata":{},"sourceType":"module"}