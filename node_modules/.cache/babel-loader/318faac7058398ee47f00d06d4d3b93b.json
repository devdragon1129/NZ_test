{"ast":null,"code":"import { connect } from 'react-redux';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { isConnected, getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { getSelectedCollectionId, getSelectedItemId, isReviewing } from 'modules/location/selectors';\nimport { getBodyShape, getVisibleItems } from 'modules/editor/selectors';\nimport { getItems, getLoading, getPaginatedWalletOrphanItems, getPaginationData, getWalletOrphanItems } from 'modules/item/selectors';\nimport { fetchCollectionsRequest } from 'modules/collection/actions';\nimport { getAuthorizedCollections, getPaginationData as getCollectionsPaginationData } from 'modules/collection/selectors';\nimport { setItems } from 'modules/editor/actions';\nimport { fetchItemsRequest, FETCH_ITEMS_REQUEST, setCollection } from 'modules/item/actions';\nimport LeftPanel from './LeftPanel';\n\nvar mapState = function mapState(state) {\n  var selectedCollectionId = getSelectedCollectionId(state);\n  var address = getAddress(state);\n  var itemsPaginationData = selectedCollectionId ? getPaginationData(state, selectedCollectionId) : address ? getPaginationData(state, address) : undefined;\n  var collectionsPaginationData = !selectedCollectionId ? getCollectionsPaginationData(state) : undefined;\n  return {\n    address: address,\n    isConnected: isConnected(state),\n    items: getItems(state),\n    totalItems: (itemsPaginationData === null || itemsPaginationData === void 0 ? void 0 : itemsPaginationData.total) || null,\n    totalCollections: (collectionsPaginationData === null || collectionsPaginationData === void 0 ? void 0 : collectionsPaginationData.total) || null,\n    orphanItems: address && !selectedCollectionId ? getPaginatedWalletOrphanItems(state, address, itemsPaginationData === null || itemsPaginationData === void 0 ? void 0 : itemsPaginationData.limit) : getWalletOrphanItems(state),\n    collections: getAuthorizedCollections(state),\n    selectedItemId: getSelectedItemId(state),\n    selectedCollectionId: selectedCollectionId,\n    visibleItems: getVisibleItems(state),\n    bodyShape: getBodyShape(state),\n    isReviewing: isReviewing(state),\n    isLoading: isLoadingType(getLoading(state), FETCH_ITEMS_REQUEST)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onSetItems: function onSetItems(items) {\n      return dispatch(setItems(items));\n    },\n    onSetCollection: function onSetCollection(item, collectionId) {\n      return dispatch(setCollection(item, collectionId));\n    },\n    onFetchCollections: function onFetchCollections(address, params) {\n      return dispatch(fetchCollectionsRequest(address, params));\n    },\n    onFetchOrphanItems: function onFetchOrphanItems(address, params) {\n      return dispatch(fetchItemsRequest(address, params));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(LeftPanel);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/ItemEditorPage/LeftPanel/LeftPanel.container.ts"],"names":["connect","isLoadingType","isConnected","getAddress","getSelectedCollectionId","getSelectedItemId","isReviewing","getBodyShape","getVisibleItems","getItems","getLoading","getPaginatedWalletOrphanItems","getPaginationData","getWalletOrphanItems","fetchCollectionsRequest","getAuthorizedCollections","getCollectionsPaginationData","setItems","fetchItemsRequest","FETCH_ITEMS_REQUEST","setCollection","LeftPanel","mapState","state","selectedCollectionId","address","itemsPaginationData","undefined","collectionsPaginationData","items","totalItems","total","totalCollections","orphanItems","limit","collections","selectedItemId","visibleItems","bodyShape","isLoading","mapDispatch","dispatch","onSetItems","onSetCollection","item","collectionId","onFetchCollections","params","onFetchOrphanItems"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux'\nimport { RootState } from 'modules/common/types'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { isConnected, getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { getSelectedCollectionId, getSelectedItemId, isReviewing } from 'modules/location/selectors'\nimport { getBodyShape, getVisibleItems } from 'modules/editor/selectors'\nimport { getItems, getLoading, getPaginatedWalletOrphanItems, getPaginationData, getWalletOrphanItems } from 'modules/item/selectors'\nimport { fetchCollectionsRequest } from 'modules/collection/actions'\nimport { getAuthorizedCollections, getPaginationData as getCollectionsPaginationData } from 'modules/collection/selectors'\nimport { setItems } from 'modules/editor/actions'\nimport { fetchItemsRequest, FETCH_ITEMS_REQUEST, setCollection } from 'modules/item/actions'\nimport { MapStateProps, MapDispatchProps, MapDispatch } from './LeftPanel.types'\nimport LeftPanel from './LeftPanel'\n\nconst mapState = (state: RootState): MapStateProps => {\n  const selectedCollectionId = getSelectedCollectionId(state)\n  const address = getAddress(state)\n  const itemsPaginationData = selectedCollectionId\n    ? getPaginationData(state, selectedCollectionId)\n    : address\n    ? getPaginationData(state, address)\n    : undefined\n  const collectionsPaginationData = !selectedCollectionId ? getCollectionsPaginationData(state) : undefined\n\n  return {\n    address,\n    isConnected: isConnected(state),\n    items: getItems(state),\n    totalItems: itemsPaginationData?.total || null,\n    totalCollections: collectionsPaginationData?.total || null,\n    orphanItems:\n      address && !selectedCollectionId\n        ? getPaginatedWalletOrphanItems(state, address, itemsPaginationData?.limit)\n        : getWalletOrphanItems(state),\n    collections: getAuthorizedCollections(state),\n    selectedItemId: getSelectedItemId(state),\n    selectedCollectionId,\n    visibleItems: getVisibleItems(state),\n    bodyShape: getBodyShape(state),\n    isReviewing: isReviewing(state),\n    isLoading: isLoadingType(getLoading(state), FETCH_ITEMS_REQUEST)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onSetItems: items => dispatch(setItems(items)),\n  onSetCollection: (item, collectionId) => dispatch(setCollection(item, collectionId)),\n  onFetchCollections: (address, params) => dispatch(fetchCollectionsRequest(address, params)),\n  onFetchOrphanItems: (address, params) => dispatch(fetchItemsRequest(address, params))\n})\n\nexport default connect(mapState, mapDispatch)(LeftPanel)\n"]},"metadata":{},"sourceType":"module"}