{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _1 = require(\".\");\n\nvar utils_1 = require(\"../../utils\");\n\nvar ContractAbi = /*#__PURE__*/function () {\n  function ContractAbi(definition) {\n    _classCallCheck(this, ContractAbi);\n\n    this.functions = definition.filter(function (e) {\n      return e.type === 'function';\n    }).map(function (entry) {\n      return new _1.ContractFunctionEntry(entry);\n    });\n    this.events = definition.filter(function (e) {\n      return e.type === 'event';\n    }).map(function (entry) {\n      return new _1.ContractEventEntry(entry);\n    });\n    var ctor = definition.find(function (e) {\n      return e.type === 'constructor';\n    });\n    this.ctor = new _1.ContractFunctionEntry(ctor || {\n      type: 'constructor'\n    });\n    var fallback = definition.find(function (e) {\n      return e.type === 'fallback';\n    });\n\n    if (fallback) {\n      this.fallback = new _1.ContractFunctionEntry(fallback);\n    }\n  }\n\n  _createClass(ContractAbi, [{\n    key: \"findEntryForLog\",\n    value: function findEntryForLog(log) {\n      return this.events.find(function (abiDef) {\n        return abiDef.signature === log.topics[0];\n      });\n    }\n  }, {\n    key: \"decodeEvent\",\n    value: function decodeEvent(log) {\n      var event = this.findEntryForLog(log);\n\n      if (!event) {\n        throw new Error(\"Unable to find matching event signature for log: \".concat(log.id));\n      }\n\n      return event.decodeEvent(log);\n    }\n  }, {\n    key: \"decodeFunctionData\",\n    value: function decodeFunctionData(data) {\n      var funcSig = utils_1.bufferToHex(data.slice(0, 4));\n      var func = this.functions.find(function (f) {\n        return f.signature === funcSig;\n      });\n      return func ? func.decodeParameters(data.slice(4)) : undefined;\n    }\n  }]);\n\n  return ContractAbi;\n}();\n\nexports.ContractAbi = ContractAbi;","map":null,"metadata":{},"sourceType":"script"}