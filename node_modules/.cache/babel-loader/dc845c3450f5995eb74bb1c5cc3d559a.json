{"ast":null,"code":"/**\r\n * Logger used througouht the application to allow configuration of\r\n * the log level required for the messages.\r\n */\nvar Logger =\n/** @class */\nfunction () {\n  function Logger() {}\n\n  Logger._AddLogEntry = function (entry) {\n    Logger._LogCache = entry + Logger._LogCache;\n\n    if (Logger.OnNewCacheEntry) {\n      Logger.OnNewCacheEntry(entry);\n    }\n  };\n\n  Logger._FormatMessage = function (message) {\n    var padStr = function padStr(i) {\n      return i < 10 ? \"0\" + i : \"\" + i;\n    };\n\n    var date = new Date();\n    return \"[\" + padStr(date.getHours()) + \":\" + padStr(date.getMinutes()) + \":\" + padStr(date.getSeconds()) + \"]: \" + message;\n  };\n\n  Logger._LogDisabled = function (message) {// nothing to do\n  };\n\n  Logger._LogEnabled = function (message) {\n    var formattedMessage = Logger._FormatMessage(message);\n\n    console.log(\"BJS - \" + formattedMessage);\n    var entry = \"<div style='color:white'>\" + formattedMessage + \"</div><br>\";\n\n    Logger._AddLogEntry(entry);\n  };\n\n  Logger._WarnDisabled = function (message) {// nothing to do\n  };\n\n  Logger._WarnEnabled = function (message) {\n    var formattedMessage = Logger._FormatMessage(message);\n\n    console.warn(\"BJS - \" + formattedMessage);\n    var entry = \"<div style='color:orange'>\" + formattedMessage + \"</div><br>\";\n\n    Logger._AddLogEntry(entry);\n  };\n\n  Logger._ErrorDisabled = function (message) {// nothing to do\n  };\n\n  Logger._ErrorEnabled = function (message) {\n    Logger.errorsCount++;\n\n    var formattedMessage = Logger._FormatMessage(message);\n\n    console.error(\"BJS - \" + formattedMessage);\n    var entry = \"<div style='color:red'>\" + formattedMessage + \"</div><br>\";\n\n    Logger._AddLogEntry(entry);\n  };\n\n  Object.defineProperty(Logger, \"LogCache\", {\n    /**\r\n     * Gets current log cache (list of logs)\r\n     */\n    get: function get() {\n      return Logger._LogCache;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Clears the log cache\r\n   */\n\n  Logger.ClearLogCache = function () {\n    Logger._LogCache = \"\";\n    Logger.errorsCount = 0;\n  };\n\n  Object.defineProperty(Logger, \"LogLevels\", {\n    /**\r\n     * Sets the current log level (MessageLogLevel / WarningLogLevel / ErrorLogLevel)\r\n     */\n    set: function set(level) {\n      if ((level & Logger.MessageLogLevel) === Logger.MessageLogLevel) {\n        Logger.Log = Logger._LogEnabled;\n      } else {\n        Logger.Log = Logger._LogDisabled;\n      }\n\n      if ((level & Logger.WarningLogLevel) === Logger.WarningLogLevel) {\n        Logger.Warn = Logger._WarnEnabled;\n      } else {\n        Logger.Warn = Logger._WarnDisabled;\n      }\n\n      if ((level & Logger.ErrorLogLevel) === Logger.ErrorLogLevel) {\n        Logger.Error = Logger._ErrorEnabled;\n      } else {\n        Logger.Error = Logger._ErrorDisabled;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * No log\r\n   */\n\n  Logger.NoneLogLevel = 0;\n  /**\r\n   * Only message logs\r\n   */\n\n  Logger.MessageLogLevel = 1;\n  /**\r\n   * Only warning logs\r\n   */\n\n  Logger.WarningLogLevel = 2;\n  /**\r\n   * Only error logs\r\n   */\n\n  Logger.ErrorLogLevel = 4;\n  /**\r\n   * All logs\r\n   */\n\n  Logger.AllLogLevel = 7;\n  Logger._LogCache = \"\";\n  /**\r\n   * Gets a value indicating the number of loading errors\r\n   * @ignorenaming\r\n   */\n\n  Logger.errorsCount = 0;\n  /**\r\n   * Log a message to the console\r\n   */\n\n  Logger.Log = Logger._LogEnabled;\n  /**\r\n   * Write a warning message to the console\r\n   */\n\n  Logger.Warn = Logger._WarnEnabled;\n  /**\r\n   * Write an error message to the console\r\n   */\n\n  Logger.Error = Logger._ErrorEnabled;\n  return Logger;\n}();\n\nexport { Logger };","map":null,"metadata":{},"sourceType":"module"}