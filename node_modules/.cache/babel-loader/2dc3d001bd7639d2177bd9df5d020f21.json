{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Matrix } from \"../Maths/math.vector\";\nimport { Material } from \"../Materials/material\";\n/**\r\n * Base class of materials working in push mode in babylon JS\r\n * @hidden\r\n */\n\nvar PushMaterial =\n/** @class */\nfunction (_super) {\n  __extends(PushMaterial, _super);\n\n  function PushMaterial(name, scene) {\n    var _this = _super.call(this, name, scene) || this;\n\n    _this._normalMatrix = new Matrix();\n    _this._storeEffectOnSubMeshes = true;\n    return _this;\n  }\n\n  PushMaterial.prototype.getEffect = function () {\n    return this._activeEffect;\n  };\n\n  PushMaterial.prototype.isReady = function (mesh, useInstances) {\n    if (!mesh) {\n      return false;\n    }\n\n    if (!mesh.subMeshes || mesh.subMeshes.length === 0) {\n      return true;\n    }\n\n    return this.isReadyForSubMesh(mesh, mesh.subMeshes[0], useInstances);\n  };\n\n  PushMaterial.prototype._isReadyForSubMesh = function (subMesh) {\n    var defines = subMesh._materialDefines;\n\n    if (!this.checkReadyOnEveryCall && subMesh.effect && defines) {\n      if (defines._renderId === this.getScene().getRenderId()) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n  * Binds the given world matrix to the active effect\r\n  *\r\n  * @param world the matrix to bind\r\n  */\n\n\n  PushMaterial.prototype.bindOnlyWorldMatrix = function (world) {\n    this._activeEffect.setMatrix(\"world\", world);\n  };\n  /**\r\n   * Binds the given normal matrix to the active effect\r\n   *\r\n   * @param normalMatrix the matrix to bind\r\n   */\n\n\n  PushMaterial.prototype.bindOnlyNormalMatrix = function (normalMatrix) {\n    this._activeEffect.setMatrix(\"normalMatrix\", normalMatrix);\n  };\n\n  PushMaterial.prototype.bind = function (world, mesh) {\n    if (!mesh) {\n      return;\n    }\n\n    this.bindForSubMesh(world, mesh, mesh.subMeshes[0]);\n  };\n\n  PushMaterial.prototype._afterBind = function (mesh, effect) {\n    if (effect === void 0) {\n      effect = null;\n    }\n\n    _super.prototype._afterBind.call(this, mesh);\n\n    this.getScene()._cachedEffect = effect;\n  };\n\n  PushMaterial.prototype._mustRebind = function (scene, effect, visibility) {\n    if (visibility === void 0) {\n      visibility = 1;\n    }\n\n    return scene.isCachedMaterialInvalid(this, effect, visibility);\n  };\n\n  return PushMaterial;\n}(Material);\n\nexport { PushMaterial };","map":null,"metadata":{},"sourceType":"module"}