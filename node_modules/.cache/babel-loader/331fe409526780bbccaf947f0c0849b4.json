{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { config } from 'config';\nimport * as contentHash from 'content-hash';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { getSelection, getCenter, getExplorerURL } from 'modules/land/utils';\nimport { blobToCID } from 'modules/media/utils';\nexport var IPFS_URL = config.get('IPFS_URL', '');\nvar INDEX_FILE_PATH = 'index.html';\nexport var IpfsAPI = function IpfsAPI() {\n  var _this = this;\n\n  _classCallCheck(this, IpfsAPI);\n\n  this.generateRedirectionFile = function (land) {\n    var selection = getSelection(land);\n\n    var _getCenter = getCenter(selection),\n        _getCenter2 = _slicedToArray(_getCenter, 2),\n        x = _getCenter2[0],\n        y = _getCenter2[1];\n\n    var landURL = getExplorerURL(x, y);\n    var html = \"<html>\\n    <head>\\n      <meta\\n        http-equiv=\\\"refresh\\\"\\n        content=\\\"0; URL=\".concat(landURL, \"\\\"\\n      />\\n    </head>\\n    <body>\\n      <p>\\n        \").concat(t('ipfs_api.not_redirected'), \"\\n        <a href=\\\"\").concat(landURL, \"\\\">\\n          \").concat(t('global.click_here'), \"\\n        </a>.\\n      </p>\\n    </body>\\n    </html>\");\n    return new Blob([html]);\n  };\n\n  this.uploadRedirectionFile = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(land) {\n      var formData, blob, result, json;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              formData = new FormData();\n              blob = _this.generateRedirectionFile(land);\n              formData.append('blob', blob, INDEX_FILE_PATH);\n              _context.next = 5;\n              return fetch(IPFS_URL, {\n                method: 'POST',\n                body: formData\n              });\n\n            case 5:\n              result = _context.sent;\n              _context.next = 8;\n              return result.json();\n\n            case 8:\n              json = _context.sent;\n              return _context.abrupt(\"return\", json.Hash);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  this.computeLandHash = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(land) {\n      var blob, ipfsHash, hash;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              blob = _this.generateRedirectionFile(land);\n              _context2.next = 3;\n              return blobToCID(blob, INDEX_FILE_PATH);\n\n            case 3:\n              ipfsHash = _context2.sent;\n              _context2.next = 6;\n              return contentHash.fromIpfs(ipfsHash);\n\n            case 6:\n              hash = _context2.sent;\n              return _context2.abrupt(\"return\", hash);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var ipfs = new IpfsAPI();","map":{"version":3,"sources":["/opt/work/NZ_test/src/lib/api/ipfs.ts"],"names":["config","contentHash","t","getSelection","getCenter","getExplorerURL","blobToCID","IPFS_URL","get","INDEX_FILE_PATH","IpfsAPI","generateRedirectionFile","land","selection","x","y","landURL","html","Blob","uploadRedirectionFile","formData","FormData","blob","append","fetch","method","body","result","json","Hash","computeLandHash","ipfsHash","fromIpfs","hash","ipfs"],"mappings":";;;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAO,KAAKC,WAAZ,MAA6B,cAA7B;AACA,SAASC,CAAT,QAAkB,mDAAlB;AAEA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,cAAlC,QAAwD,oBAAxD;AACA,SAASC,SAAT,QAA0B,qBAA1B;AAEA,OAAO,IAAMC,QAAQ,GAAGP,MAAM,CAACQ,GAAP,CAAW,UAAX,EAAuB,EAAvB,CAAjB;AAEP,IAAMC,eAAe,GAAG,YAAxB;AAEA,WAAaC,OAAb;AAAA;;AAAA;;AAAA,OACEC,uBADF,GAC4B,UAACC,IAAD,EAAsB;AAC9C,QAAMC,SAAS,GAAGV,YAAY,CAACS,IAAD,CAA9B;;AAD8C,qBAE/BR,SAAS,CAACS,SAAD,CAFsB;AAAA;AAAA,QAEvCC,CAFuC;AAAA,QAEpCC,CAFoC;;AAG9C,QAAMC,OAAO,GAAGX,cAAc,CAACS,CAAD,EAAIC,CAAJ,CAA9B;AAEA,QAAME,IAAY,uGAIID,OAJJ,uEASZd,CAAC,CAAC,yBAAD,CATW,iCAUHc,OAVG,4BAWVd,CAAC,CAAC,mBAAD,CAXS,0DAAlB;AAiBA,WAAO,IAAIgB,IAAJ,CAAS,CAACD,IAAD,CAAT,CAAP;AACD,GAxBH;;AAAA,OA0BEE,qBA1BF;AAAA,wEA0B0B,iBAAOP,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBQ,cAAAA,QADgB,GACL,IAAIC,QAAJ,EADK;AAEhBC,cAAAA,IAFgB,GAET,KAAI,CAACX,uBAAL,CAA6BC,IAA7B,CAFS;AAGtBQ,cAAAA,QAAQ,CAACG,MAAT,CAAgB,MAAhB,EAAwBD,IAAxB,EAA8Bb,eAA9B;AAHsB;AAAA,qBAIDe,KAAK,CAACjB,QAAD,EAAW;AACnCkB,gBAAAA,MAAM,EAAE,MAD2B;AAEnCC,gBAAAA,IAAI,EAAEN;AAF6B,eAAX,CAJJ;;AAAA;AAIhBO,cAAAA,MAJgB;AAAA;AAAA,qBAQHA,MAAM,CAACC,IAAP,EARG;;AAAA;AAQhBA,cAAAA,IARgB;AAAA,+CASfA,IAAI,CAACC,IATU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1B1B;;AAAA;AAAA;AAAA;AAAA;;AAAA,OAsCEC,eAtCF;AAAA,yEAsCoB,kBAAOlB,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACVU,cAAAA,IADU,GACH,KAAI,CAACX,uBAAL,CAA6BC,IAA7B,CADG;AAAA;AAAA,qBAEON,SAAS,CAACgB,IAAD,EAAOb,eAAP,CAFhB;;AAAA;AAEVsB,cAAAA,QAFU;AAAA;AAAA,qBAGG9B,WAAW,CAAC+B,QAAZ,CAAqBD,QAArB,CAHH;;AAAA;AAGVE,cAAAA,IAHU;AAAA,gDAITA,IAJS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAtCpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AA8CA,OAAO,IAAMC,IAAI,GAAG,IAAIxB,OAAJ,EAAb","sourcesContent":["import { config } from 'config'\nimport * as contentHash from 'content-hash'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { Land } from 'modules/land/types'\nimport { getSelection, getCenter, getExplorerURL } from 'modules/land/utils'\nimport { blobToCID } from 'modules/media/utils'\n\nexport const IPFS_URL = config.get('IPFS_URL', '')\n\nconst INDEX_FILE_PATH = 'index.html'\n\nexport class IpfsAPI {\n  generateRedirectionFile = (land: Land): Blob => {\n    const selection = getSelection(land)\n    const [x, y] = getCenter(selection)\n    const landURL = getExplorerURL(x, y)\n\n    const html: string = `<html>\n    <head>\n      <meta\n        http-equiv=\"refresh\"\n        content=\"0; URL=${landURL}\"\n      />\n    </head>\n    <body>\n      <p>\n        ${t('ipfs_api.not_redirected')}\n        <a href=\"${landURL}\">\n          ${t('global.click_here')}\n        </a>.\n      </p>\n    </body>\n    </html>`\n\n    return new Blob([html])\n  }\n\n  uploadRedirectionFile = async (land: Land): Promise<string> => {\n    const formData = new FormData()\n    const blob = this.generateRedirectionFile(land)\n    formData.append('blob', blob, INDEX_FILE_PATH)\n    const result = await fetch(IPFS_URL, {\n      method: 'POST',\n      body: formData\n    })\n    const json = await result.json()\n    return json.Hash\n  }\n\n  computeLandHash = async (land: Land): Promise<string> => {\n    const blob = this.generateRedirectionFile(land)\n    const ipfsHash = await blobToCID(blob, INDEX_FILE_PATH)\n    const hash = await contentHash.fromIpfs(ipfsHash)\n    return hash\n  }\n}\n\nexport const ipfs = new IpfsAPI()\n"]},"metadata":{},"sourceType":"module"}