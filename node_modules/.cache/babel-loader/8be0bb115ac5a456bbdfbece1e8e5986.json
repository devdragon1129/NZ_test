{"ast":null,"code":"import { connect } from 'react-redux';\nimport { getLoading as getLoadingEntityActions } from 'modules/entity/selectors';\nimport { getLoading as getLoadingItemActions } from 'modules/item/selectors';\nimport { getLoading as getLoadingCollectionActions } from 'modules/collection/selectors';\nimport { getPendingTransactions } from 'modules/transaction/selectors';\nimport { approveCollectionRequest, APPROVE_COLLECTION_REQUEST, APPROVE_COLLECTION_SUCCESS } from 'modules/collection/actions';\nimport { rescueItemsRequest, RESCUE_ITEMS_REQUEST } from 'modules/item/actions';\nimport { isDeployingBatchedThirdPartyItems } from 'modules/thirdParty/selectors';\nimport { deployEntitiesRequest, DEPLOY_ENTITIES_REQUEST } from 'modules/entity/actions';\nimport { deployBatchedThirdPartyItemsRequest, reviewThirdPartyRequest, REVIEW_THIRD_PARTY_REQUEST } from 'modules/thirdParty/actions';\nimport ApprovalFlowModal from './ApprovalFlowModal';\n\nvar mapState = function mapState(state) {\n  var loadingEntityActions = getLoadingEntityActions(state);\n  var loadingItemActions = getLoadingItemActions(state);\n  var loadingCollectionActions = getLoadingCollectionActions(state);\n  var pendingTransactions = getPendingTransactions(state);\n  return {\n    isConfirmingRescueTx: loadingItemActions.some(function (action) {\n      return action.type === RESCUE_ITEMS_REQUEST;\n    }),\n    isConfirmingReviewThirdPartyTx: loadingItemActions.some(function (action) {\n      return action.type === REVIEW_THIRD_PARTY_REQUEST;\n    }),\n    isDeployingItems: loadingEntityActions.some(function (action) {\n      return action.type === DEPLOY_ENTITIES_REQUEST;\n    }) || isDeployingBatchedThirdPartyItems(state),\n    isConfirmingApproveTx: loadingCollectionActions.some(function (action) {\n      return action.type === APPROVE_COLLECTION_REQUEST;\n    }),\n    isAwaitingApproveTx: pendingTransactions.some(function (tx) {\n      return tx.actionType === APPROVE_COLLECTION_SUCCESS;\n    })\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onRescueItems: function onRescueItems(collection, items, contentHashes) {\n      return dispatch(rescueItemsRequest(collection, items, contentHashes));\n    },\n    onDeployItems: function onDeployItems(entities) {\n      return dispatch(deployEntitiesRequest(entities));\n    },\n    onDeployThirdPartyItems: function onDeployThirdPartyItems(items, collection, tree, hashes) {\n      return dispatch(deployBatchedThirdPartyItemsRequest(items, collection, tree, hashes));\n    },\n    onApproveCollection: function onApproveCollection(collection) {\n      return dispatch(approveCollectionRequest(collection));\n    },\n    onReviewThirdParty: function onReviewThirdParty(thirdPartyId, slots, merkleTreeRoot) {\n      return dispatch(reviewThirdPartyRequest(thirdPartyId, slots, merkleTreeRoot));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(ApprovalFlowModal);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/ApprovalFlowModal/ApprovalFlowModal.container.ts"],"names":["connect","getLoading","getLoadingEntityActions","getLoadingItemActions","getLoadingCollectionActions","getPendingTransactions","approveCollectionRequest","APPROVE_COLLECTION_REQUEST","APPROVE_COLLECTION_SUCCESS","rescueItemsRequest","RESCUE_ITEMS_REQUEST","isDeployingBatchedThirdPartyItems","deployEntitiesRequest","DEPLOY_ENTITIES_REQUEST","deployBatchedThirdPartyItemsRequest","reviewThirdPartyRequest","REVIEW_THIRD_PARTY_REQUEST","ApprovalFlowModal","mapState","state","loadingEntityActions","loadingItemActions","loadingCollectionActions","pendingTransactions","isConfirmingRescueTx","some","action","type","isConfirmingReviewThirdPartyTx","isDeployingItems","isConfirmingApproveTx","isAwaitingApproveTx","tx","actionType","mapDispatch","dispatch","onRescueItems","collection","items","contentHashes","onDeployItems","entities","onDeployThirdPartyItems","tree","hashes","onApproveCollection","onReviewThirdParty","thirdPartyId","slots","merkleTreeRoot"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux'\nimport { RootState } from 'modules/common/types'\nimport { MapStateProps, MapDispatchProps, MapDispatch } from './ApprovalFlowModal.types'\nimport { getLoading as getLoadingEntityActions } from 'modules/entity/selectors'\nimport { getLoading as getLoadingItemActions } from 'modules/item/selectors'\nimport { getLoading as getLoadingCollectionActions } from 'modules/collection/selectors'\nimport { getPendingTransactions } from 'modules/transaction/selectors'\nimport { approveCollectionRequest, APPROVE_COLLECTION_REQUEST, APPROVE_COLLECTION_SUCCESS } from 'modules/collection/actions'\nimport { rescueItemsRequest, RESCUE_ITEMS_REQUEST } from 'modules/item/actions'\nimport { isDeployingBatchedThirdPartyItems } from 'modules/thirdParty/selectors'\nimport { deployEntitiesRequest, DEPLOY_ENTITIES_REQUEST } from 'modules/entity/actions'\nimport { deployBatchedThirdPartyItemsRequest, reviewThirdPartyRequest, REVIEW_THIRD_PARTY_REQUEST } from 'modules/thirdParty/actions'\nimport ApprovalFlowModal from './ApprovalFlowModal'\n\nconst mapState = (state: RootState): MapStateProps => {\n  const loadingEntityActions = getLoadingEntityActions(state)\n  const loadingItemActions = getLoadingItemActions(state)\n  const loadingCollectionActions = getLoadingCollectionActions(state)\n  const pendingTransactions = getPendingTransactions(state)\n\n  return {\n    isConfirmingRescueTx: loadingItemActions.some(action => action.type === RESCUE_ITEMS_REQUEST),\n    isConfirmingReviewThirdPartyTx: loadingItemActions.some(action => action.type === REVIEW_THIRD_PARTY_REQUEST),\n    isDeployingItems:\n      loadingEntityActions.some(action => action.type === DEPLOY_ENTITIES_REQUEST) || isDeployingBatchedThirdPartyItems(state),\n    isConfirmingApproveTx: loadingCollectionActions.some(action => action.type === APPROVE_COLLECTION_REQUEST),\n    isAwaitingApproveTx: pendingTransactions.some(tx => tx.actionType === APPROVE_COLLECTION_SUCCESS)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onRescueItems: (collection, items, contentHashes) => dispatch(rescueItemsRequest(collection, items, contentHashes)),\n  onDeployItems: entities => dispatch(deployEntitiesRequest(entities)),\n  onDeployThirdPartyItems: (items, collection, tree, hashes) =>\n    dispatch(deployBatchedThirdPartyItemsRequest(items, collection, tree, hashes)),\n  onApproveCollection: collection => dispatch(approveCollectionRequest(collection)),\n  onReviewThirdParty: (thirdPartyId, slots, merkleTreeRoot) => dispatch(reviewThirdPartyRequest(thirdPartyId, slots, merkleTreeRoot))\n})\n\nexport default connect(mapState, mapDispatch)(ApprovalFlowModal)\n"]},"metadata":{},"sourceType":"module"}