{"ast":null,"code":"import _defineProperty from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { loadingReducer } from 'decentraland-dapps/dist/modules/loading/reducer';\nimport { DELETE_PROJECT, EDIT_PROJECT_THUMBNAIL, LOAD_PROJECTS_SUCCESS, LOAD_PROJECTS_REQUEST, SET_PROJECT, CREATE_PROJECT, LOAD_MANIFEST_REQUEST, LOAD_PROJECTS_FAILURE, LOAD_MANIFEST_SUCCESS, LOAD_MANIFEST_FAILURE, LOAD_PUBLIC_PROJECT_REQUEST, LOAD_PUBLIC_PROJECT_SUCCESS, LOAD_PUBLIC_PROJECT_FAILURE } from 'modules/project/actions';\nvar INITIAL_STATE = {\n  data: {},\n  loading: [],\n  error: {}\n};\nexport var projectReducer = function projectReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CREATE_PROJECT:\n    case SET_PROJECT:\n      {\n        var project = action.payload.project;\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, _defineProperty({}, project.id, _objectSpread({}, project, {\n            updatedAt: new Date().toISOString()\n          })))\n        });\n      }\n\n    case EDIT_PROJECT_THUMBNAIL:\n      {\n        var _action$payload = action.payload,\n            id = _action$payload.id,\n            thumbnail = _action$payload.thumbnail;\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, _defineProperty({}, id, _objectSpread({}, state.data[id], {\n            thumbnail: thumbnail,\n            updatedAt: new Date().toISOString()\n          })))\n        });\n      }\n\n    case DELETE_PROJECT:\n      {\n        var _project = action.payload.project;\n\n        var newState = _objectSpread({}, state, {\n          data: _objectSpread({}, state.data)\n        });\n\n        delete newState.data[_project.id];\n        return newState;\n      }\n\n    case LOAD_PROJECTS_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case LOAD_PROJECTS_SUCCESS:\n      {\n        var projects = action.payload.projects;\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, projects),\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case LOAD_PROJECTS_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case LOAD_PUBLIC_PROJECT_REQUEST:\n    case LOAD_PUBLIC_PROJECT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case LOAD_PUBLIC_PROJECT_SUCCESS:\n      {\n        var _action$payload2 = action.payload,\n            _project2 = _action$payload2.project,\n            type = _action$payload2.type;\n\n        if (type !== 'public') {\n          return _objectSpread({}, state, {\n            loading: loadingReducer(state.loading, action)\n          });\n        }\n\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, _defineProperty({}, _project2.id, _project2)),\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case LOAD_MANIFEST_SUCCESS:\n      {\n        var manifest = action.payload.manifest;\n        var prevProject = state.data[manifest.project.id];\n\n        if (prevProject) {\n          return state; // no need to update state if project is already there. This prevents changing the project in the state with an outdated one from the manifest in S3.\n        }\n\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, _defineProperty({}, manifest.project.id, _objectSpread({}, manifest.project))),\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case LOAD_MANIFEST_REQUEST:\n    case LOAD_MANIFEST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/project/reducer.ts"],"names":["loadingReducer","DELETE_PROJECT","EDIT_PROJECT_THUMBNAIL","LOAD_PROJECTS_SUCCESS","LOAD_PROJECTS_REQUEST","SET_PROJECT","CREATE_PROJECT","LOAD_MANIFEST_REQUEST","LOAD_PROJECTS_FAILURE","LOAD_MANIFEST_SUCCESS","LOAD_MANIFEST_FAILURE","LOAD_PUBLIC_PROJECT_REQUEST","LOAD_PUBLIC_PROJECT_SUCCESS","LOAD_PUBLIC_PROJECT_FAILURE","INITIAL_STATE","data","loading","error","projectReducer","state","action","type","project","payload","id","updatedAt","Date","toISOString","thumbnail","newState","projects","manifest","prevProject"],"mappings":"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","sourcesContent":["import { loadingReducer, LoadingState } from 'decentraland-dapps/dist/modules/loading/reducer'\nimport { ModelById } from 'decentraland-dapps/dist/lib/types'\nimport { Project } from 'modules/project/types'\nimport {\n  DeleteProjectAction,\n  DELETE_PROJECT,\n  EDIT_PROJECT_THUMBNAIL,\n  EditProjectThumbnailAction,\n  LOAD_PROJECTS_SUCCESS,\n  LoadProjectsSuccessAction,\n  LOAD_PROJECTS_REQUEST,\n  LoadProjectsRequestAction,\n  EditProjectAction,\n  SetProjectAction,\n  SET_PROJECT,\n  CREATE_PROJECT,\n  CreateProjectAction,\n  LOAD_MANIFEST_REQUEST,\n  LoadProjectsFailureAction,\n  LOAD_PROJECTS_FAILURE,\n  LoadManifestRequestAction,\n  LoadManifestSuccessAction,\n  LoadManifestFailureAction,\n  LOAD_MANIFEST_SUCCESS,\n  LOAD_MANIFEST_FAILURE,\n  LoadPublicProjectRequestAction,\n  LoadPublicProjectSuccessAction,\n  LoadPublicProjectFailureAction,\n  LOAD_PUBLIC_PROJECT_REQUEST,\n  LOAD_PUBLIC_PROJECT_SUCCESS,\n  LOAD_PUBLIC_PROJECT_FAILURE,\n  ShareProjectAction\n} from 'modules/project/actions'\n\nexport type ProjectState = {\n  data: ModelById<Project>\n  loading: LoadingState\n  error: Record<string, string>\n}\n\nconst INITIAL_STATE: ProjectState = {\n  data: {},\n  loading: [],\n  error: {}\n}\n\nexport type ProjectReducerAction =\n  | SetProjectAction\n  | CreateProjectAction\n  | EditProjectAction\n  | ShareProjectAction\n  | EditProjectThumbnailAction\n  | DeleteProjectAction\n  | LoadPublicProjectRequestAction\n  | LoadPublicProjectSuccessAction\n  | LoadPublicProjectFailureAction\n  | LoadProjectsRequestAction\n  | LoadProjectsSuccessAction\n  | LoadProjectsFailureAction\n  | LoadManifestRequestAction\n  | LoadManifestSuccessAction\n  | LoadManifestFailureAction\n\nexport const projectReducer = (state = INITIAL_STATE, action: ProjectReducerAction): ProjectState => {\n  switch (action.type) {\n    case CREATE_PROJECT:\n    case SET_PROJECT: {\n      const { project } = action.payload\n\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [project.id]: { ...project, updatedAt: new Date().toISOString() }\n        }\n      }\n    }\n    case EDIT_PROJECT_THUMBNAIL: {\n      const { id, thumbnail } = action.payload\n\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [id]: { ...state.data[id], thumbnail, updatedAt: new Date().toISOString() }\n        }\n      }\n    }\n    case DELETE_PROJECT: {\n      const { project } = action.payload\n      const newState = {\n        ...state,\n        data: {\n          ...state.data\n        }\n      }\n      delete newState.data[project.id]\n      return newState\n    }\n    case LOAD_PROJECTS_REQUEST: {\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case LOAD_PROJECTS_SUCCESS: {\n      const { projects } = action.payload\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          ...projects\n        },\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case LOAD_PROJECTS_FAILURE: {\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case LOAD_PUBLIC_PROJECT_REQUEST:\n    case LOAD_PUBLIC_PROJECT_FAILURE: {\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case LOAD_PUBLIC_PROJECT_SUCCESS: {\n      const { project, type } = action.payload\n      if (type !== 'public') {\n        return {\n          ...state,\n          loading: loadingReducer(state.loading, action)\n        }\n      }\n\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [project.id]: project\n        },\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case LOAD_MANIFEST_SUCCESS: {\n      const { manifest } = action.payload\n      const prevProject = state.data[manifest.project.id]\n      if (prevProject) {\n        return state // no need to update state if project is already there. This prevents changing the project in the state with an outdated one from the manifest in S3.\n      }\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [manifest.project.id]: { ...manifest.project }\n        },\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case LOAD_MANIFEST_REQUEST:\n    case LOAD_MANIFEST_FAILURE: {\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}