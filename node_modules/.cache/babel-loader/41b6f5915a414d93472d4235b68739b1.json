{"ast":null,"code":"/**\r\n * ThinSprite Class used to represent a thin sprite\r\n * This is the base class for sprites but can also directly be used with ThinEngine\r\n * @see https://doc.babylonjs.com/babylon101/sprites\r\n */\nvar ThinSprite =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Thin Sprite\r\n   */\n  function ThinSprite() {\n    /** Gets or sets the width */\n    this.width = 1.0;\n    /** Gets or sets the height */\n\n    this.height = 1.0;\n    /** Gets or sets rotation angle */\n\n    this.angle = 0;\n    /** Gets or sets a boolean indicating if UV coordinates should be inverted in U axis */\n\n    this.invertU = false;\n    /** Gets or sets a boolean indicating if UV coordinates should be inverted in B axis */\n\n    this.invertV = false;\n    /** Gets or sets a boolean indicating if the sprite is visible (renderable). Default is true */\n\n    this.isVisible = true;\n    this._animationStarted = false;\n    this._loopAnimation = false;\n    this._fromIndex = 0;\n    this._toIndex = 0;\n    this._delay = 0;\n    this._direction = 1;\n    this._time = 0;\n    this._onBaseAnimationEnd = null;\n    this.position = {\n      x: 1.0,\n      y: 1.0,\n      z: 1.0\n    };\n    this.color = {\n      r: 1.0,\n      g: 1.0,\n      b: 1.0,\n      a: 1.0\n    };\n  }\n\n  Object.defineProperty(ThinSprite.prototype, \"animationStarted\", {\n    /**\r\n     * Returns a boolean indicating if the animation is started\r\n     */\n    get: function get() {\n      return this._animationStarted;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ThinSprite.prototype, \"fromIndex\", {\n    /** Gets the initial key for the animation (setting it will restart the animation)  */\n    get: function get() {\n      return this._fromIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ThinSprite.prototype, \"toIndex\", {\n    /** Gets or sets the end key for the animation (setting it will restart the animation)  */\n    get: function get() {\n      return this._toIndex;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ThinSprite.prototype, \"loopAnimation\", {\n    /** Gets or sets a boolean indicating if the animation is looping (setting it will restart the animation)  */\n    get: function get() {\n      return this._loopAnimation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ThinSprite.prototype, \"delay\", {\n    /** Gets or sets the delay between cell changes (setting it will restart the animation)  */\n    get: function get() {\n      return Math.max(this._delay, 1);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Starts an animation\r\n   * @param from defines the initial key\r\n   * @param to defines the end key\r\n   * @param loop defines if the animation must loop\r\n   * @param delay defines the start delay (in ms)\r\n   * @param onAnimationEnd defines a callback for when the animation ends\r\n   */\n\n  ThinSprite.prototype.playAnimation = function (from, to, loop, delay, onAnimationEnd) {\n    this._fromIndex = from;\n    this._toIndex = to;\n    this._loopAnimation = loop;\n    this._delay = delay || 1;\n    this._animationStarted = true;\n    this._onBaseAnimationEnd = onAnimationEnd;\n\n    if (from < to) {\n      this._direction = 1;\n    } else {\n      this._direction = -1;\n      this._toIndex = from;\n      this._fromIndex = to;\n    }\n\n    this.cellIndex = from;\n    this._time = 0;\n  };\n  /** Stops current animation (if any) */\n\n\n  ThinSprite.prototype.stopAnimation = function () {\n    this._animationStarted = false;\n  };\n  /** @hidden */\n\n\n  ThinSprite.prototype._animate = function (deltaTime) {\n    if (!this._animationStarted) {\n      return;\n    }\n\n    this._time += deltaTime;\n\n    if (this._time > this._delay) {\n      this._time = this._time % this._delay;\n      this.cellIndex += this._direction;\n\n      if (this._direction > 0 && this.cellIndex > this._toIndex || this._direction < 0 && this.cellIndex < this._fromIndex) {\n        if (this._loopAnimation) {\n          this.cellIndex = this._direction > 0 ? this._fromIndex : this._toIndex;\n        } else {\n          this.cellIndex = this._toIndex;\n          this._animationStarted = false;\n\n          if (this._onBaseAnimationEnd) {\n            this._onBaseAnimationEnd();\n          }\n        }\n      }\n    }\n  };\n\n  return ThinSprite;\n}();\n\nexport { ThinSprite };","map":null,"metadata":{},"sourceType":"module"}