{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Contract } from 'web3x/contract';\nimport abi from './LANDRegistryAbi';\nexport var LANDRegistry = /*#__PURE__*/function (_Contract) {\n  _inherits(LANDRegistry, _Contract);\n\n  function LANDRegistry(eth, address, options) {\n    _classCallCheck(this, LANDRegistry);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(LANDRegistry).call(this, eth, abi, address, options));\n  }\n\n  return LANDRegistry;\n}(Contract);\nexport var LANDRegistryAbi = abi;","map":{"version":3,"sources":["/opt/work/NZ_test/src/contracts/LANDRegistry.ts"],"names":["Contract","abi","LANDRegistry","eth","address","options","LANDRegistryAbi"],"mappings":";;;;AAGA,SAASA,QAAT,QAAoF,gBAApF;AAEA,OAAOC,GAAP,MAAgB,mBAAhB;AA6LA,WAAaC,YAAb;AAAA;;AACE,wBAAYC,GAAZ,EAAsBC,OAAtB,EAAyCC,OAAzC,EAAoE;AAAA;;AAAA,qFAC5DF,GAD4D,EACvDF,GADuD,EAClDG,OADkD,EACzCC,OADyC;AAEnE;;AAHH;AAAA,EAAkCL,QAAlC;AAKA,OAAO,IAAMM,eAAe,GAAGL,GAAxB","sourcesContent":["import BN from 'bn.js'\nimport { Address } from 'web3x/address'\nimport { EventLog, TransactionReceipt } from 'web3x/formatters'\nimport { Contract, ContractOptions, TxCall, TxSend, EventSubscriptionFactory } from 'web3x/contract'\nimport { Eth } from 'web3x/eth'\nimport abi from './LANDRegistryAbi'\nexport type EstateRegistrySetEvent = {\n  registry: Address\n}\nexport type UpdateEvent = {\n  assetId: string\n  holder: Address\n  operator: Address\n  data: string\n}\nexport type UpdateOperatorEvent = {\n  assetId: string\n  operator: Address\n}\nexport type UpdateManagerEvent = {\n  _owner: Address\n  _operator: Address\n  _caller: Address\n  _approved: boolean\n}\nexport type DeployAuthorizedEvent = {\n  _caller: Address\n  _deployer: Address\n}\nexport type DeployForbiddenEvent = {\n  _caller: Address\n  _deployer: Address\n}\nexport type TransferEvent = {\n  from: Address\n  to: Address\n  assetId: string\n  operator: Address\n  userData: string\n  operatorData: string\n}\nexport type ApprovalForAllEvent = {\n  holder: Address\n  operator: Address\n  authorized: boolean\n}\nexport type ApprovalEvent = {\n  owner: Address\n  operator: Address\n  assetId: string\n}\nexport type OwnerUpdateEvent = {\n  _prevOwner: Address\n  _newOwner: Address\n}\nexport interface EstateRegistrySetEventLog extends EventLog<EstateRegistrySetEvent, 'EstateRegistrySet'> {}\nexport interface UpdateEventLog extends EventLog<UpdateEvent, 'Update'> {}\nexport interface UpdateOperatorEventLog extends EventLog<UpdateOperatorEvent, 'UpdateOperator'> {}\nexport interface UpdateManagerEventLog extends EventLog<UpdateManagerEvent, 'UpdateManager'> {}\nexport interface DeployAuthorizedEventLog extends EventLog<DeployAuthorizedEvent, 'DeployAuthorized'> {}\nexport interface DeployForbiddenEventLog extends EventLog<DeployForbiddenEvent, 'DeployForbidden'> {}\nexport interface TransferEventLog extends EventLog<TransferEvent, 'Transfer'> {}\nexport interface ApprovalForAllEventLog extends EventLog<ApprovalForAllEvent, 'ApprovalForAll'> {}\nexport interface ApprovalEventLog extends EventLog<ApprovalEvent, 'Approval'> {}\nexport interface OwnerUpdateEventLog extends EventLog<OwnerUpdateEvent, 'OwnerUpdate'> {}\ninterface LANDRegistryEvents {\n  EstateRegistrySet: EventSubscriptionFactory<EstateRegistrySetEventLog>\n  Update: EventSubscriptionFactory<UpdateEventLog>\n  UpdateOperator: EventSubscriptionFactory<UpdateOperatorEventLog>\n  UpdateManager: EventSubscriptionFactory<UpdateManagerEventLog>\n  DeployAuthorized: EventSubscriptionFactory<DeployAuthorizedEventLog>\n  DeployForbidden: EventSubscriptionFactory<DeployForbiddenEventLog>\n  Transfer: EventSubscriptionFactory<TransferEventLog>\n  ApprovalForAll: EventSubscriptionFactory<ApprovalForAllEventLog>\n  Approval: EventSubscriptionFactory<ApprovalEventLog>\n  OwnerUpdate: EventSubscriptionFactory<OwnerUpdateEventLog>\n}\ninterface LANDRegistryEventLogs {\n  EstateRegistrySet: EstateRegistrySetEventLog\n  Update: UpdateEventLog\n  UpdateOperator: UpdateOperatorEventLog\n  UpdateManager: UpdateManagerEventLog\n  DeployAuthorized: DeployAuthorizedEventLog\n  DeployForbidden: DeployForbiddenEventLog\n  Transfer: TransferEventLog\n  ApprovalForAll: ApprovalForAllEventLog\n  Approval: ApprovalEventLog\n  OwnerUpdate: OwnerUpdateEventLog\n}\ninterface LANDRegistryTxEventLogs {\n  EstateRegistrySet: EstateRegistrySetEventLog[]\n  Update: UpdateEventLog[]\n  UpdateOperator: UpdateOperatorEventLog[]\n  UpdateManager: UpdateManagerEventLog[]\n  DeployAuthorized: DeployAuthorizedEventLog[]\n  DeployForbidden: DeployForbiddenEventLog[]\n  Transfer: TransferEventLog[]\n  ApprovalForAll: ApprovalForAllEventLog[]\n  Approval: ApprovalEventLog[]\n  OwnerUpdate: OwnerUpdateEventLog[]\n}\nexport interface LANDRegistryTransactionReceipt extends TransactionReceipt<LANDRegistryTxEventLogs> {}\ninterface LANDRegistryMethods {\n  supportsInterface(_interfaceID: string): TxCall<boolean>\n  proxyOwner(): TxCall<Address>\n  name(): TxCall<string>\n  updateManager(a0: Address, a1: Address): TxCall<boolean>\n  getApproved(assetId: number | string | BN): TxCall<Address>\n  approve(operator: Address, assetId: number | string | BN): TxSend<LANDRegistryTransactionReceipt>\n  ownerOfLand(x: number | string | BN, y: number | string | BN): TxCall<Address>\n  setLatestToNow(user: Address): TxSend<LANDRegistryTransactionReceipt>\n  totalSupply(): TxCall<string>\n  assignNewParcel(x: number | string | BN, y: number | string | BN, beneficiary: Address): TxSend<LANDRegistryTransactionReceipt>\n  ownerOfLandMany(x: (number | string | BN)[], y: (number | string | BN)[]): TxCall<Address[]>\n  latestPing(a0: Address): TxCall<string>\n  updateManyLandData(x: (number | string | BN)[], y: (number | string | BN)[], data: string): TxSend<LANDRegistryTransactionReceipt>\n  transferFrom(from: Address, to: Address, assetId: number | string | BN): TxSend<LANDRegistryTransactionReceipt>\n  isAuthorized(operator: Address, assetId: number | string | BN): TxCall<boolean>\n  authorizedDeploy(a0: Address): TxCall<boolean>\n  tokenOfOwnerByIndex(owner: Address, index: number | string | BN): TxCall<string>\n  decimals(): TxCall<string>\n  authorizeDeploy(beneficiary: Address): TxSend<LANDRegistryTransactionReceipt>\n  transferLand(x: number | string | BN, y: number | string | BN, to: Address): TxSend<LANDRegistryTransactionReceipt>\n  safeTransferFrom(from: Address, to: Address, assetId: number | string | BN): TxSend<LANDRegistryTransactionReceipt>\n  initialize(a0: string): TxSend<LANDRegistryTransactionReceipt>\n  landData(x: number | string | BN, y: number | string | BN): TxCall<string>\n  transferManyLand(x: (number | string | BN)[], y: (number | string | BN)[], to: Address): TxSend<LANDRegistryTransactionReceipt>\n  exists(assetId: number | string | BN): TxCall<boolean>\n  tokensOf(owner: Address): TxCall<string[]>\n  ping(): TxSend<LANDRegistryTransactionReceipt>\n  ownerOf(assetId: number | string | BN): TxCall<Address>\n  GET_METADATA(): TxCall<string>\n  isUpdateAuthorized(operator: Address, assetId: number | string | BN): TxCall<boolean>\n  tokenMetadata(assetId: number | string | BN): TxCall<string>\n  encodeTokenId(x: number | string | BN, y: number | string | BN): TxCall<string>\n  balanceOf(owner: Address): TxCall<string>\n  currentContract(): TxCall<Address>\n  setManyUpdateOperator(_assetIds: (number | string | BN)[], _operator: Address): TxSend<LANDRegistryTransactionReceipt>\n  description(): TxCall<string>\n  decodeTokenId(\n    value: number | string | BN\n  ): TxCall<{\n    0: string\n    1: string\n  }>\n  assignMultipleParcels(\n    x: (number | string | BN)[],\n    y: (number | string | BN)[],\n    beneficiary: Address\n  ): TxSend<LANDRegistryTransactionReceipt>\n  createEstateWithMetadata(\n    x: (number | string | BN)[],\n    y: (number | string | BN)[],\n    beneficiary: Address,\n    metadata: string\n  ): TxSend<LANDRegistryTransactionReceipt>\n  landOf(\n    owner: Address\n  ): TxCall<{\n    0: string[]\n    1: string[]\n  }>\n  owner(): TxCall<Address>\n  setEstateRegistry(registry: Address): TxSend<LANDRegistryTransactionReceipt>\n  symbol(): TxCall<string>\n  updateOperator(a0: number | string | BN): TxCall<Address>\n  setApprovalForAll(operator: Address, authorized: boolean): TxSend<LANDRegistryTransactionReceipt>\n  exists(x: number | string | BN, y: number | string | BN): TxCall<boolean>\n  setUpdateOperator(assetId: number | string | BN, operator: Address): TxSend<LANDRegistryTransactionReceipt>\n  safeTransferFrom(from: Address, to: Address, assetId: number | string | BN, userData: string): TxSend<LANDRegistryTransactionReceipt>\n  createEstate(x: (number | string | BN)[], y: (number | string | BN)[], beneficiary: Address): TxSend<LANDRegistryTransactionReceipt>\n  updateLandData(x: number | string | BN, y: number | string | BN, data: string): TxSend<LANDRegistryTransactionReceipt>\n  estateRegistry(): TxCall<Address>\n  isApprovedForAll(assetHolder: Address, operator: Address): TxCall<boolean>\n  getApprovedAddress(assetId: number | string | BN): TxCall<Address>\n  setUpdateManager(_owner: Address, _operator: Address, _approved: boolean): TxSend<LANDRegistryTransactionReceipt>\n  transferOwnership(_newOwner: Address): TxSend<LANDRegistryTransactionReceipt>\n  transferManyLandToEstate(\n    x: (number | string | BN)[],\n    y: (number | string | BN)[],\n    estateId: number | string | BN\n  ): TxSend<LANDRegistryTransactionReceipt>\n  transferLandToEstate(\n    x: number | string | BN,\n    y: number | string | BN,\n    estateId: number | string | BN\n  ): TxSend<LANDRegistryTransactionReceipt>\n  forbidDeploy(beneficiary: Address): TxSend<LANDRegistryTransactionReceipt>\n}\nexport interface LANDRegistryDefinition {\n  methods: LANDRegistryMethods\n  events: LANDRegistryEvents\n  eventLogs: LANDRegistryEventLogs\n}\nexport class LANDRegistry extends Contract<LANDRegistryDefinition> {\n  constructor(eth: Eth, address?: Address, options?: ContractOptions) {\n    super(eth, abi, address, options)\n  }\n}\nexport const LANDRegistryAbi = abi\n"]},"metadata":{},"sourceType":"module"}