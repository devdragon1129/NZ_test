{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/sharpen.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize, SerializationHelper } from '../Misc/decorators';\n/**\r\n * The SharpenPostProcess applies a sharpen kernel to every pixel\r\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n */\n\nvar SharpenPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(SharpenPostProcess, _super);\n  /**\r\n   * Creates a new instance ConvolutionPostProcess\r\n   * @param name The name of the effect.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function SharpenPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"sharpen\", [\"sharpnessAmounts\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation) || this;\n    /**\r\n     * How much of the original color should be applied. Setting this to 0 will display edge detection. (default: 1)\r\n     */\n\n\n    _this.colorAmount = 1.0;\n    /**\r\n     * How much sharpness should be applied (default: 0.3)\r\n     */\n\n    _this.edgeAmount = 0.3;\n\n    _this.onApply = function (effect) {\n      effect.setFloat2(\"screenSize\", _this.width, _this.height);\n      effect.setFloat2(\"sharpnessAmounts\", _this.edgeAmount, _this.colorAmount);\n    };\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"SharpenPostProcess\" string\r\n   */\n\n\n  SharpenPostProcess.prototype.getClassName = function () {\n    return \"SharpenPostProcess\";\n  };\n  /** @hidden */\n\n\n  SharpenPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new SharpenPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.textureType, parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], SharpenPostProcess.prototype, \"colorAmount\", void 0);\n\n  __decorate([serialize()], SharpenPostProcess.prototype, \"edgeAmount\", void 0);\n\n  return SharpenPostProcess;\n}(PostProcess);\n\nexport { SharpenPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.SharpenPostProcess\"] = SharpenPostProcess;","map":null,"metadata":{},"sourceType":"module"}