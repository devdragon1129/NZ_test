{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"ajv/dist/compile/codegen\");\n\nfunction getDef() {\n  return {\n    keyword: \"deepRequired\",\n    type: \"object\",\n    schemaType: \"array\",\n    code: function code(ctx) {\n      var schema = ctx.schema,\n          data = ctx.data;\n      var props = schema.map(function (jp) {\n        return codegen_1._(_templateObject || (_templateObject = _taggedTemplateLiteral([\"(\", \") === undefined\"])), getData(jp));\n      });\n      ctx.fail(codegen_1.or.apply(codegen_1, _toConsumableArray(props)));\n\n      function getData(jsonPointer) {\n        if (jsonPointer === \"\") throw new Error(\"empty JSON pointer not allowed\");\n        var segments = jsonPointer.split(\"/\");\n        var x = data;\n        var xs = segments.map(function (s, i) {\n          return i ? x = codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\", \"\", \"\"])), x, codegen_1.getProperty(unescapeJPSegment(s))) : x;\n        });\n        return codegen_1.and.apply(codegen_1, _toConsumableArray(xs));\n      }\n    },\n    metaSchema: {\n      type: \"array\",\n      items: {\n        type: \"string\",\n        format: \"json-pointer\"\n      }\n    }\n  };\n}\n\nexports.default = getDef;\n\nfunction unescapeJPSegment(s) {\n  return s.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\n\nmodule.exports = getDef;","map":null,"metadata":{},"sourceType":"script"}