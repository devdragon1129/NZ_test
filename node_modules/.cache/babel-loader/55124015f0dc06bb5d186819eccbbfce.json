{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar ucs2length_1 = require(\"../../compile/ucs2length\");\n\nvar error = {\n  message: function message(_ref) {\n    var keyword = _ref.keyword,\n        schemaCode = _ref.schemaCode;\n    var comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n    return codegen_1.str(_templateObject || (_templateObject = _taggedTemplateLiteral([\"should NOT have \", \" than \", \" characters\"])), comp, schemaCode);\n  },\n  params: function params(_ref2) {\n    var schemaCode = _ref2.schemaCode;\n    return codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{limit: \", \"}\"])), schemaCode);\n  }\n};\nvar def = {\n  keyword: [\"maxLength\", \"minLength\"],\n  type: \"string\",\n  schemaType: \"number\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var keyword = cxt.keyword,\n        data = cxt.data,\n        schemaCode = cxt.schemaCode,\n        it = cxt.it;\n    var op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n    var len;\n\n    if (it.opts.unicode === false) {\n      len = codegen_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \".length\"])), data);\n    } else {\n      var u2l = cxt.gen.scopeValue(\"func\", {\n        ref: ucs2length_1.default,\n        code: codegen_1._(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"require(\\\"ajv/dist/compile/ucs2length\\\").default\"])))\n      });\n      len = codegen_1._(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \"(\", \")\"])), u2l, data);\n    }\n\n    cxt.fail$data(codegen_1._(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\", \" \", \" \", \"\"])), len, op, schemaCode));\n  }\n};\nexports.default = def;","map":null,"metadata":{},"sourceType":"script"}