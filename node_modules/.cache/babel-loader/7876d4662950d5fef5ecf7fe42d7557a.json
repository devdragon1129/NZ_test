{"ast":null,"code":"import { DeepCopier } from \"../../Misc/deepCopier\";\nimport { Vector3 } from \"../../Maths/math.vector\";\nimport { Scalar } from \"../../Maths/math.scalar\";\n/**\r\n * Particle emitter emitting particles from the inside of a hemisphere.\r\n * It emits the particles alongside the hemisphere radius. The emission direction might be randomized.\r\n */\n\nvar HemisphericParticleEmitter =\n/** @class */\nfunction () {\n  /**\r\n  * Creates a new instance HemisphericParticleEmitter\r\n  * @param radius the radius of the emission hemisphere (1 by default)\r\n  * @param radiusRange the range of the emission hemisphere [0-1] 0 Surface only, 1 Entire Radius (1 by default)\r\n  * @param directionRandomizer defines how much to randomize the particle direction [0-1]\r\n  */\n  function HemisphericParticleEmitter(\n  /**\r\n   * The radius of the emission hemisphere.\r\n   */\n  radius,\n  /**\r\n   * The range of emission [0-1] 0 Surface only, 1 Entire Radius.\r\n   */\n  radiusRange,\n  /**\r\n   * How much to randomize the particle direction [0-1].\r\n   */\n  directionRandomizer) {\n    if (radius === void 0) {\n      radius = 1;\n    }\n\n    if (radiusRange === void 0) {\n      radiusRange = 1;\n    }\n\n    if (directionRandomizer === void 0) {\n      directionRandomizer = 0;\n    }\n\n    this.radius = radius;\n    this.radiusRange = radiusRange;\n    this.directionRandomizer = directionRandomizer;\n  }\n  /**\r\n   * Called by the particle System when the direction is computed for the created particle.\r\n   * @param worldMatrix is the world matrix of the particle system\r\n   * @param directionToUpdate is the direction vector to update with the result\r\n   * @param particle is the particle we are computed the direction for\r\n   * @param isLocal defines if the direction should be set in local space\r\n   */\n\n\n  HemisphericParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle, isLocal) {\n    var direction = particle.position.subtract(worldMatrix.getTranslation()).normalize();\n    var randX = Scalar.RandomRange(0, this.directionRandomizer);\n    var randY = Scalar.RandomRange(0, this.directionRandomizer);\n    var randZ = Scalar.RandomRange(0, this.directionRandomizer);\n    direction.x += randX;\n    direction.y += randY;\n    direction.z += randZ;\n    direction.normalize();\n\n    if (isLocal) {\n      directionToUpdate.copyFrom(direction);\n      return;\n    }\n\n    Vector3.TransformNormalFromFloatsToRef(direction.x, direction.y, direction.z, worldMatrix, directionToUpdate);\n  };\n  /**\r\n   * Called by the particle System when the position is computed for the created particle.\r\n   * @param worldMatrix is the world matrix of the particle system\r\n   * @param positionToUpdate is the position vector to update with the result\r\n   * @param particle is the particle we are computed the position for\r\n   * @param isLocal defines if the position should be set in local space\r\n   */\n\n\n  HemisphericParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle, isLocal) {\n    var randRadius = this.radius - Scalar.RandomRange(0, this.radius * this.radiusRange);\n    var v = Scalar.RandomRange(0, 1.0);\n    var phi = Scalar.RandomRange(0, 2 * Math.PI);\n    var theta = Math.acos(2 * v - 1);\n    var randX = randRadius * Math.cos(phi) * Math.sin(theta);\n    var randY = randRadius * Math.cos(theta);\n    var randZ = randRadius * Math.sin(phi) * Math.sin(theta);\n\n    if (isLocal) {\n      positionToUpdate.copyFromFloats(randX, Math.abs(randY), randZ);\n      return;\n    }\n\n    Vector3.TransformCoordinatesFromFloatsToRef(randX, Math.abs(randY), randZ, worldMatrix, positionToUpdate);\n  };\n  /**\r\n   * Clones the current emitter and returns a copy of it\r\n   * @returns the new emitter\r\n   */\n\n\n  HemisphericParticleEmitter.prototype.clone = function () {\n    var newOne = new HemisphericParticleEmitter(this.radius, this.directionRandomizer);\n    DeepCopier.DeepCopy(this, newOne);\n    return newOne;\n  };\n  /**\r\n   * Called by the GPUParticleSystem to setup the update shader\r\n   * @param effect defines the update shader\r\n   */\n\n\n  HemisphericParticleEmitter.prototype.applyToShader = function (effect) {\n    effect.setFloat(\"radius\", this.radius);\n    effect.setFloat(\"radiusRange\", this.radiusRange);\n    effect.setFloat(\"directionRandomizer\", this.directionRandomizer);\n  };\n  /**\r\n   * Returns a string to use to update the GPU particles update shader\r\n   * @returns a string containng the defines string\r\n   */\n\n\n  HemisphericParticleEmitter.prototype.getEffectDefines = function () {\n    return \"#define HEMISPHERICEMITTER\";\n  };\n  /**\r\n   * Returns the string \"HemisphericParticleEmitter\"\r\n   * @returns a string containing the class name\r\n   */\n\n\n  HemisphericParticleEmitter.prototype.getClassName = function () {\n    return \"HemisphericParticleEmitter\";\n  };\n  /**\r\n   * Serializes the particle system to a JSON object.\r\n   * @returns the JSON object\r\n   */\n\n\n  HemisphericParticleEmitter.prototype.serialize = function () {\n    var serializationObject = {};\n    serializationObject.type = this.getClassName();\n    serializationObject.radius = this.radius;\n    serializationObject.radiusRange = this.radiusRange;\n    serializationObject.directionRandomizer = this.directionRandomizer;\n    return serializationObject;\n  };\n  /**\r\n   * Parse properties from a JSON object\r\n   * @param serializationObject defines the JSON object\r\n   */\n\n\n  HemisphericParticleEmitter.prototype.parse = function (serializationObject) {\n    this.radius = serializationObject.radius;\n    this.radiusRange = serializationObject.radiusRange;\n    this.directionRandomizer = serializationObject.directionRandomizer;\n  };\n\n  return HemisphericParticleEmitter;\n}();\n\nexport { HemisphericParticleEmitter };","map":null,"metadata":{},"sourceType":"module"}