{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { MaterialHelper } from '../../../materialHelper';\nimport { InputBlock } from '../Input/inputBlock';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport \"../../../../Shaders/ShadersInclude/fogFragmentDeclaration\";\n/**\r\n * Block used to add support for scene fog\r\n */\n\nvar FogBlock =\n/** @class */\nfunction (_super) {\n  __extends(FogBlock, _super);\n  /**\r\n   * Create a new FogBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function FogBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.VertexAndFragment, true) || this; // Vertex\n\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false, NodeMaterialBlockTargets.Vertex); // Fragment\n\n\n    _this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Color3, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"fogColor\", NodeMaterialBlockConnectionPointTypes.Color3, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.input.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Color4);\n\n    _this.fogColor.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Color4);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  FogBlock.prototype.getClassName = function () {\n    return \"FogBlock\";\n  };\n\n  Object.defineProperty(FogBlock.prototype, \"worldPosition\", {\n    /**\r\n     * Gets the world position input component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FogBlock.prototype, \"view\", {\n    /**\r\n     * Gets the view input component\r\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FogBlock.prototype, \"input\", {\n    /**\r\n     * Gets the color input component\r\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FogBlock.prototype, \"fogColor\", {\n    /**\r\n     * Gets the fog color input component\r\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FogBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FogBlock.prototype.autoConfigure = function (material) {\n    if (!this.view.isConnected) {\n      var viewInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.View;\n      });\n\n      if (!viewInput) {\n        viewInput = new InputBlock(\"view\");\n        viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\n      }\n\n      viewInput.output.connectTo(this.view);\n    }\n\n    if (!this.fogColor.isConnected) {\n      var fogColorInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.FogColor;\n      });\n\n      if (!fogColorInput) {\n        fogColorInput = new InputBlock(\"fogColor\", undefined, NodeMaterialBlockConnectionPointTypes.Color3);\n        fogColorInput.setAsSystemValue(NodeMaterialSystemValues.FogColor);\n      }\n\n      fogColorInput.output.connectTo(this.fogColor);\n    }\n  };\n\n  FogBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    var scene = mesh.getScene();\n    defines.setValue(\"FOG\", nodeMaterial.fogEnabled && MaterialHelper.GetFogState(mesh, scene));\n  };\n\n  FogBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    if (!mesh) {\n      return;\n    }\n\n    var scene = mesh.getScene();\n    effect.setFloat4(this._fogParameters, scene.fogMode, scene.fogStart, scene.fogEnd, scene.fogDensity);\n  };\n\n  FogBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.blocksWithDefines.push(this);\n      state.sharedData.bindableBlocks.push(this);\n\n      state._emitFunctionFromInclude(\"fogFragmentDeclaration\", \"//\" + this.name, {\n        removeUniforms: true,\n        removeVaryings: true,\n        removeIfDef: false,\n        replaceStrings: [{\n          search: /float CalcFogFactor\\(\\)/,\n          replace: \"float CalcFogFactor(vec3 vFogDistance, vec4 vFogInfos)\"\n        }]\n      });\n\n      var tempFogVariablename = state._getFreeVariableName(\"fog\");\n\n      var color = this.input;\n      var fogColor = this.fogColor;\n      this._fogParameters = state._getFreeVariableName(\"fogParameters\");\n      var output = this._outputs[0];\n\n      state._emitUniformFromString(this._fogParameters, \"vec4\");\n\n      state.compilationString += \"#ifdef FOG\\r\\n\";\n      state.compilationString += \"float \" + tempFogVariablename + \" = CalcFogFactor(\" + this._fogDistanceName + \", \" + this._fogParameters + \");\\r\\n\";\n      state.compilationString += this._declareOutput(output, state) + (\" = \" + tempFogVariablename + \" * \" + color.associatedVariableName + \".rgb + (1.0 - \" + tempFogVariablename + \") * \" + fogColor.associatedVariableName + \".rgb;\\r\\n\");\n      state.compilationString += \"#else\\r\\n\" + this._declareOutput(output, state) + \" =  \" + color.associatedVariableName + \".rgb;\\r\\n\";\n      state.compilationString += \"#endif\\r\\n\";\n    } else {\n      var worldPos = this.worldPosition;\n      var view = this.view;\n      this._fogDistanceName = state._getFreeVariableName(\"vFogDistance\");\n\n      state._emitVaryingFromString(this._fogDistanceName, \"vec3\");\n\n      state.compilationString += this._fogDistanceName + \" = (\" + view.associatedVariableName + \" * \" + worldPos.associatedVariableName + \").xyz;\\r\\n\";\n    }\n\n    return this;\n  };\n\n  return FogBlock;\n}(NodeMaterialBlock);\n\nexport { FogBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.FogBlock\"] = FogBlock;","map":null,"metadata":{},"sourceType":"module"}