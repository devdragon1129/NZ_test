{"ast":null,"code":"export var PREVIEW_OFFSET = {\n  x: 0,\n  y: 48\n};\nexport var previewTarget = {\n  drop: function drop(props, monitor) {\n    var item = monitor.getItem();\n    var offset = monitor.getClientOffset();\n    if (!offset) return;\n    props.onDropItem(item.asset, offset.x - PREVIEW_OFFSET.x, offset.y - PREVIEW_OFFSET.y);\n  }\n}; // @ts-ignore\n\nexport var collect = function collect(connect, monitor) {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    canDrop: monitor.canDrop(),\n    isOver: monitor.isOver()\n  };\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Preview/Preview.dnd.ts"],"names":["PREVIEW_OFFSET","x","y","previewTarget","drop","props","monitor","item","getItem","offset","getClientOffset","onDropItem","asset","collect","connect","connectDropTarget","dropTarget","canDrop","isOver"],"mappings":"AAKA,OAAO,IAAMA,cAAc,GAAG;AAC5BC,EAAAA,CAAC,EAAE,CADyB;AAE5BC,EAAAA,CAAC,EAAE;AAFyB,CAAvB;AAWP,OAAO,IAAMC,aAAoC,GAAG;AAClDC,EAAAA,IADkD,gBAC7CC,KAD6C,EACtCC,OADsC,EAC7B;AACnB,QAAMC,IAAyB,GAAGD,OAAO,CAACE,OAAR,EAAlC;AACA,QAAMC,MAAM,GAAGH,OAAO,CAACI,eAAR,EAAf;AACA,QAAI,CAACD,MAAL,EAAa;AACbJ,IAAAA,KAAK,CAACM,UAAN,CAAiBJ,IAAI,CAACK,KAAtB,EAA6BH,MAAM,CAACR,CAAP,GAAWD,cAAc,CAACC,CAAvD,EAA0DQ,MAAM,CAACP,CAAP,GAAWF,cAAc,CAACE,CAApF;AACD;AANiD,CAA7C,C,CASP;;AACA,OAAO,IAAMW,OAA4C,GAAG,SAA/CA,OAA+C,CAACC,OAAD,EAAUR,OAAV,EAAsB;AAChF,SAAO;AACLS,IAAAA,iBAAiB,EAAED,OAAO,CAACE,UAAR,EADd;AAELC,IAAAA,OAAO,EAAEX,OAAO,CAACW,OAAR,EAFJ;AAGLC,IAAAA,MAAM,EAAEZ,OAAO,CAACY,MAAR;AAHH,GAAP;AAKD,CANM","sourcesContent":["import { DropTargetSpec, DropTargetCollector, ConnectDropTarget } from 'react-dnd'\n\nimport { AssetCardDragObject } from 'components/AssetCard/AssetCard.dnd'\nimport { Props } from './Preview.types'\n\nexport const PREVIEW_OFFSET = {\n  x: 0,\n  y: 48\n}\n\nexport type CollectedProps = {\n  connectDropTarget: ConnectDropTarget\n  canDrop: boolean\n  isOver: boolean\n}\n\nexport const previewTarget: DropTargetSpec<Props> = {\n  drop(props, monitor) {\n    const item: AssetCardDragObject = monitor.getItem()\n    const offset = monitor.getClientOffset()\n    if (!offset) return\n    props.onDropItem(item.asset, offset.x - PREVIEW_OFFSET.x, offset.y - PREVIEW_OFFSET.y)\n  }\n}\n\n// @ts-ignore\nexport const collect: DropTargetCollector<CollectedProps> = (connect, monitor) => {\n  return {\n    connectDropTarget: connect.dropTarget(),\n    canDrop: monitor.canDrop(),\n    isOver: monitor.isOver()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}