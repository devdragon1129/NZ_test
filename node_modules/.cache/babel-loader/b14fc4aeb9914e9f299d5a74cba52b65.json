{"ast":null,"code":"import { connect } from 'react-redux';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getData as getWallet } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { SET_COLLECTION_MANAGERS_REQUEST, SET_COLLECTION_MINTERS_REQUEST, setCollectionManagersRequest, setCollectionMintersRequest } from 'modules/collection/actions';\nimport { getCollection, getLoading } from 'modules/collection/selectors';\nimport ManageCollectionRoleModal from './ManageCollectionRoleModal';\n\nvar mapState = function mapState(state, ownProps) {\n  var collectionId = ownProps.metadata.collectionId;\n\n  if (!collectionId) {\n    throw new Error('Invalid collection id to add managers');\n  }\n\n  return {\n    wallet: getWallet(state),\n    collection: getCollection(state, collectionId),\n    isLoading: isLoadingType(getLoading(state), SET_COLLECTION_MANAGERS_REQUEST) || isLoadingType(getLoading(state), SET_COLLECTION_MINTERS_REQUEST)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onSetManagers: function onSetManagers(collection, managers) {\n      return dispatch(setCollectionManagersRequest(collection, managers));\n    },\n    onSetMinters: function onSetMinters(collection, minters) {\n      return dispatch(setCollectionMintersRequest(collection, minters));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(ManageCollectionRoleModal);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/ManageCollectionRoleModal/ManageCollectionRoleModal.container.ts"],"names":["connect","isLoadingType","getData","getWallet","SET_COLLECTION_MANAGERS_REQUEST","SET_COLLECTION_MINTERS_REQUEST","setCollectionManagersRequest","setCollectionMintersRequest","getCollection","getLoading","ManageCollectionRoleModal","mapState","state","ownProps","collectionId","metadata","Error","wallet","collection","isLoading","mapDispatch","dispatch","onSetManagers","managers","onSetMinters","minters"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,OAAO,IAAIC,SAApB,QAAqC,kDAArC;AAEA,SACEC,+BADF,EAEEC,8BAFF,EAGEC,4BAHF,EAIEC,2BAJF,QAKO,4BALP;AAMA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,8BAA1C;AAEA,OAAOC,yBAAP,MAAsC,6BAAtC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAmBC,QAAnB,EAAyD;AAAA,MAClEC,YADkE,GACjDD,QAAQ,CAACE,QADwC,CAClED,YADkE;;AAGxE,MAAI,CAACA,YAAL,EAAmB;AACjB,UAAM,IAAIE,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,SAAO;AACLC,IAAAA,MAAM,EAAEd,SAAS,CAACS,KAAD,CADZ;AAELM,IAAAA,UAAU,EAAEV,aAAa,CAACI,KAAD,EAAQE,YAAR,CAFpB;AAGLK,IAAAA,SAAS,EACPlB,aAAa,CAACQ,UAAU,CAACG,KAAD,CAAX,EAAoBR,+BAApB,CAAb,IAAqEH,aAAa,CAACQ,UAAU,CAACG,KAAD,CAAX,EAAoBP,8BAApB;AAJ/E,GAAP;AAMD,CAbD;;AAeA,IAAMe,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,aAAa,EAAE,uBAACJ,UAAD,EAAaK,QAAb;AAAA,aAA0BF,QAAQ,CAACf,4BAA4B,CAACY,UAAD,EAAaK,QAAb,CAA7B,CAAlC;AAAA,KADiD;AAEhEC,IAAAA,YAAY,EAAE,sBAACN,UAAD,EAAaO,OAAb;AAAA,aAAyBJ,QAAQ,CAACd,2BAA2B,CAACW,UAAD,EAAaO,OAAb,CAA5B,CAAjC;AAAA;AAFkD,GAA9C;AAAA,CAApB;;AAKA,eAAezB,OAAO,CAACW,QAAD,EAAWS,WAAX,CAAP,CAA+BV,yBAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { getData as getWallet } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { RootState } from 'modules/common/types'\nimport {\n  SET_COLLECTION_MANAGERS_REQUEST,\n  SET_COLLECTION_MINTERS_REQUEST,\n  setCollectionManagersRequest,\n  setCollectionMintersRequest\n} from 'modules/collection/actions'\nimport { getCollection, getLoading } from 'modules/collection/selectors'\nimport { MapStateProps, MapDispatchProps, MapDispatch, OwnProps } from './ManageCollectionRoleModal.types'\nimport ManageCollectionRoleModal from './ManageCollectionRoleModal'\n\nconst mapState = (state: RootState, ownProps: OwnProps): MapStateProps => {\n  let { collectionId } = ownProps.metadata\n\n  if (!collectionId) {\n    throw new Error('Invalid collection id to add managers')\n  }\n\n  return {\n    wallet: getWallet(state)!,\n    collection: getCollection(state, collectionId)!,\n    isLoading:\n      isLoadingType(getLoading(state), SET_COLLECTION_MANAGERS_REQUEST) || isLoadingType(getLoading(state), SET_COLLECTION_MINTERS_REQUEST)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onSetManagers: (collection, managers) => dispatch(setCollectionManagersRequest(collection, managers)),\n  onSetMinters: (collection, minters) => dispatch(setCollectionMintersRequest(collection, minters))\n})\n\nexport default connect(mapState, mapDispatch)(ManageCollectionRoleModal)\n"]},"metadata":{},"sourceType":"module"}