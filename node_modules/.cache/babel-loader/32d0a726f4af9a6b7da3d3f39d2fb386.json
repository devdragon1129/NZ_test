{"ast":null,"code":"(function () {\n  // The random number is a js implementation of the Xorshift PRNG\n  var randseed = new Array(4); // Xorshift: [x, y, z, w] 32 bit values\n\n  function seedrand(seed) {\n    for (var i = 0; i < randseed.length; i++) {\n      randseed[i] = 0;\n    }\n\n    for (var i = 0; i < seed.length; i++) {\n      randseed[i % 4] = (randseed[i % 4] << 5) - randseed[i % 4] + seed.charCodeAt(i);\n    }\n  }\n\n  function rand() {\n    // based on Java's String.hashCode(), expanded to 4 32bit values\n    var t = randseed[0] ^ randseed[0] << 11;\n    randseed[0] = randseed[1];\n    randseed[1] = randseed[2];\n    randseed[2] = randseed[3];\n    randseed[3] = randseed[3] ^ randseed[3] >> 19 ^ t ^ t >> 8;\n    return (randseed[3] >>> 0) / (1 << 31 >>> 0);\n  }\n\n  function createColor() {\n    //saturation is the whole color spectrum\n    var h = Math.floor(rand() * 360); //saturation goes from 40 to 100, it avoids greyish colors\n\n    var s = rand() * 60 + 40 + '%'; //lightness can be anything from 0 to 100, but probabilities are a bell curve around 50%\n\n    var l = (rand() + rand() + rand() + rand()) * 25 + '%';\n    var color = 'hsl(' + h + ',' + s + ',' + l + ')';\n    return color;\n  }\n\n  function createImageData(size) {\n    var width = size; // Only support square icons for now\n\n    var height = size;\n    var dataWidth = Math.ceil(width / 2);\n    var mirrorWidth = width - dataWidth;\n    var data = [];\n\n    for (var y = 0; y < height; y++) {\n      var row = [];\n\n      for (var x = 0; x < dataWidth; x++) {\n        // this makes foreground and background color to have a 43% (1/2.3) probability\n        // spot color has 13% chance\n        row[x] = Math.floor(rand() * 2.3);\n      }\n\n      var r = row.slice(0, mirrorWidth);\n      r.reverse();\n      row = row.concat(r);\n\n      for (var i = 0; i < row.length; i++) {\n        data.push(row[i]);\n      }\n    }\n\n    return data;\n  }\n\n  function buildOpts(opts) {\n    var newOpts = {};\n    newOpts.size = opts.size || 8;\n    newOpts.scale = opts.scale || 4;\n    newOpts.seed = opts.seed || Math.floor(Math.random() * Math.pow(10, 16)).toString(16);\n    newOpts.color = opts.color || createColor();\n    newOpts.bgcolor = opts.bgcolor || createColor();\n    newOpts.spotcolor = opts.spotcolor || createColor();\n    seedrand(newOpts.seed);\n    return newOpts;\n  }\n\n  function renderIcon(opts, canvas) {\n    var opts = buildOpts(opts || {});\n    var imageData = createImageData(opts.size);\n    var width = Math.sqrt(imageData.length);\n    canvas.width = canvas.height = opts.size * opts.scale;\n    var cc = canvas.getContext('2d');\n    cc.fillStyle = opts.bgcolor;\n    cc.fillRect(0, 0, canvas.width, canvas.height);\n    cc.fillStyle = opts.color;\n\n    for (var i = 0; i < imageData.length; i++) {\n      // if data is 0, leave the background\n      if (imageData[i]) {\n        var row = Math.floor(i / width);\n        var col = i % width; // if data is 2, choose spot color, if 1 choose foreground\n\n        cc.fillStyle = imageData[i] == 1 ? opts.color : opts.spotcolor;\n        cc.fillRect(col * opts.scale, row * opts.scale, opts.scale, opts.scale);\n      }\n    }\n\n    return canvas;\n  }\n\n  function createIcon(opts) {\n    var opts = buildOpts(opts || {});\n    var canvas = document.createElement('canvas');\n    renderIcon(opts, canvas);\n    return canvas;\n  }\n\n  var api = {\n    create: createIcon,\n    render: renderIcon\n  };\n\n  if (typeof module !== \"undefined\") {\n    module.exports = api;\n  }\n\n  if (typeof window !== \"undefined\") {\n    window.blockies = api;\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}