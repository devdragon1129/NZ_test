{"ast":null,"code":"import { WebXRGenericTriggerMotionController } from \"./webXRGenericMotionController\";\nimport { Tools } from \"../../Misc/tools\";\nimport { WebXRProfiledMotionController } from \"./webXRProfiledMotionController\";\n/**\r\n * The MotionController Manager manages all registered motion controllers and loads the right one when needed.\r\n *\r\n * When this repository is complete: https://github.com/immersive-web/webxr-input-profiles/tree/master/packages/assets\r\n * it should be replaced with auto-loaded controllers.\r\n *\r\n * When using a model try to stay as generic as possible. Eventually there will be no need in any of the controller classes\r\n */\n\nvar WebXRMotionControllerManager =\n/** @class */\nfunction () {\n  function WebXRMotionControllerManager() {}\n  /**\r\n   * Clear the cache used for profile loading and reload when requested again\r\n   */\n\n\n  WebXRMotionControllerManager.ClearProfilesCache = function () {\n    this._ProfilesList = null;\n    this._ProfileLoadingPromises = {};\n  };\n  /**\r\n   * Register the default fallbacks.\r\n   * This function is called automatically when this file is imported.\r\n   */\n\n\n  WebXRMotionControllerManager.DefaultFallbacks = function () {\n    this.RegisterFallbacksForProfileId(\"google-daydream\", [\"generic-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"htc-vive-focus\", [\"generic-trigger-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"htc-vive\", [\"generic-trigger-squeeze-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"magicleap-one\", [\"generic-trigger-squeeze-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"windows-mixed-reality\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"microsoft-mixed-reality\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"oculus-go\", [\"generic-trigger-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"oculus-touch-v2\", [\"oculus-touch\", \"generic-trigger-squeeze-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"oculus-touch\", [\"generic-trigger-squeeze-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"samsung-gearvr\", [\"windows-mixed-reality\", \"generic-trigger-squeeze-touchpad-thumbstick\"]);\n    this.RegisterFallbacksForProfileId(\"samsung-odyssey\", [\"generic-touchpad\"]);\n    this.RegisterFallbacksForProfileId(\"valve-index\", [\"generic-trigger-squeeze-touchpad-thumbstick\"]);\n  };\n  /**\r\n   * Find a fallback profile if the profile was not found. There are a few predefined generic profiles.\r\n   * @param profileId the profile to which a fallback needs to be found\r\n   * @return an array with corresponding fallback profiles\r\n   */\n\n\n  WebXRMotionControllerManager.FindFallbackWithProfileId = function (profileId) {\n    var returnArray = this._Fallbacks[profileId] || [];\n    returnArray.unshift(profileId);\n    return returnArray;\n  };\n  /**\r\n   * When acquiring a new xrInput object (usually by the WebXRInput class), match it with the correct profile.\r\n   * The order of search:\r\n   *\r\n   * 1) Iterate the profiles array of the xr input and try finding a corresponding motion controller\r\n   * 2) (If not found) search in the gamepad id and try using it (legacy versions only)\r\n   * 3) search for registered fallbacks (should be redundant, nonetheless it makes sense to check)\r\n   * 4) return the generic trigger controller if none were found\r\n   *\r\n   * @param xrInput the xrInput to which a new controller is initialized\r\n   * @param scene the scene to which the model will be added\r\n   * @param forceProfile force a certain profile for this controller\r\n   * @return A promise that fulfils with the motion controller class for this profile id or the generic standard class if none was found\r\n   */\n\n\n  WebXRMotionControllerManager.GetMotionControllerWithXRInput = function (xrInput, scene, forceProfile) {\n    var _this = this;\n\n    var profileArray = [];\n\n    if (forceProfile) {\n      profileArray.push(forceProfile);\n    }\n\n    profileArray.push.apply(profileArray, xrInput.profiles || []); // emulator support\n\n    if (profileArray.length && !profileArray[0]) {\n      // remove the first \"undefined\" that the emulator is adding\n      profileArray.pop();\n    } // legacy support - try using the gamepad id\n\n\n    if (xrInput.gamepad && xrInput.gamepad.id) {\n      switch (xrInput.gamepad.id) {\n        case xrInput.gamepad.id.match(/oculus touch/gi) ? xrInput.gamepad.id : undefined:\n          // oculus in gamepad id\n          profileArray.push(\"oculus-touch-v2\");\n          break;\n      }\n    } // make sure microsoft/windows mixed reality works correctly\n\n\n    var windowsMRIdx = profileArray.indexOf(\"windows-mixed-reality\");\n\n    if (windowsMRIdx !== -1) {\n      profileArray.splice(windowsMRIdx, 0, \"microsoft-mixed-reality\");\n    }\n\n    if (!profileArray.length) {\n      profileArray.push(\"generic-trigger\");\n    }\n\n    if (this.UseOnlineRepository) {\n      var firstFunction = this.PrioritizeOnlineRepository ? this._LoadProfileFromRepository : this._LoadProfilesFromAvailableControllers;\n      var secondFunction_1 = this.PrioritizeOnlineRepository ? this._LoadProfilesFromAvailableControllers : this._LoadProfileFromRepository;\n      return firstFunction.call(this, profileArray, xrInput, scene).catch(function () {\n        return secondFunction_1.call(_this, profileArray, xrInput, scene);\n      });\n    } else {\n      // use only available functions\n      return this._LoadProfilesFromAvailableControllers(profileArray, xrInput, scene);\n    }\n  };\n  /**\r\n   * Register a new controller based on its profile. This function will be called by the controller classes themselves.\r\n   *\r\n   * If you are missing a profile, make sure it is imported in your source, otherwise it will not register.\r\n   *\r\n   * @param type the profile type to register\r\n   * @param constructFunction the function to be called when loading this profile\r\n   */\n\n\n  WebXRMotionControllerManager.RegisterController = function (type, constructFunction) {\n    this._AvailableControllers[type] = constructFunction;\n  };\n  /**\r\n   * Register a fallback to a specific profile.\r\n   * @param profileId the profileId that will receive the fallbacks\r\n   * @param fallbacks A list of fallback profiles\r\n   */\n\n\n  WebXRMotionControllerManager.RegisterFallbacksForProfileId = function (profileId, fallbacks) {\n    var _a;\n\n    if (this._Fallbacks[profileId]) {\n      (_a = this._Fallbacks[profileId]).push.apply(_a, fallbacks);\n    } else {\n      this._Fallbacks[profileId] = fallbacks;\n    }\n  };\n  /**\r\n   * Will update the list of profiles available in the repository\r\n   * @return a promise that resolves to a map of profiles available online\r\n   */\n\n\n  WebXRMotionControllerManager.UpdateProfilesList = function () {\n    this._ProfilesList = Tools.LoadFileAsync(this.BaseRepositoryUrl + \"/profiles/profilesList.json\", false).then(function (data) {\n      return JSON.parse(data.toString());\n    });\n    return this._ProfilesList;\n  };\n\n  WebXRMotionControllerManager._LoadProfileFromRepository = function (profileArray, xrInput, scene) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      if (!_this._ProfilesList) {\n        return _this.UpdateProfilesList();\n      } else {\n        return _this._ProfilesList;\n      }\n    }).then(function (profilesList) {\n      // load the right profile\n      for (var i = 0; i < profileArray.length; ++i) {\n        // defensive\n        if (!profileArray[i]) {\n          continue;\n        }\n\n        if (profilesList[profileArray[i]]) {\n          return profileArray[i];\n        }\n      }\n\n      throw new Error(\"neither controller \" + profileArray[0] + \" nor all fallbacks were found in the repository,\");\n    }).then(function (profileToLoad) {\n      // load the profile\n      if (!_this._ProfileLoadingPromises[profileToLoad]) {\n        _this._ProfileLoadingPromises[profileToLoad] = Tools.LoadFileAsync(_this.BaseRepositoryUrl + \"/profiles/\" + profileToLoad + \"/profile.json\", false).then(function (data) {\n          return JSON.parse(data);\n        });\n      }\n\n      return _this._ProfileLoadingPromises[profileToLoad];\n    }).then(function (profile) {\n      return new WebXRProfiledMotionController(scene, xrInput, profile, _this.BaseRepositoryUrl);\n    });\n  };\n\n  WebXRMotionControllerManager._LoadProfilesFromAvailableControllers = function (profileArray, xrInput, scene) {\n    // check fallbacks\n    for (var i = 0; i < profileArray.length; ++i) {\n      // defensive\n      if (!profileArray[i]) {\n        continue;\n      }\n\n      var fallbacks = this.FindFallbackWithProfileId(profileArray[i]);\n\n      for (var j = 0; j < fallbacks.length; ++j) {\n        var constructionFunction = this._AvailableControllers[fallbacks[j]];\n\n        if (constructionFunction) {\n          return Promise.resolve(constructionFunction(xrInput, scene));\n        }\n      }\n    }\n\n    throw new Error(\"no controller requested was found in the available controllers list\");\n  };\n\n  WebXRMotionControllerManager._AvailableControllers = {};\n  WebXRMotionControllerManager._Fallbacks = {}; // cache for loading\n\n  WebXRMotionControllerManager._ProfileLoadingPromises = {};\n  /**\r\n   * The base URL of the online controller repository. Can be changed at any time.\r\n   */\n\n  WebXRMotionControllerManager.BaseRepositoryUrl = \"https://immersive-web.github.io/webxr-input-profiles/packages/viewer/dist\";\n  /**\r\n   * Which repository gets priority - local or online\r\n   */\n\n  WebXRMotionControllerManager.PrioritizeOnlineRepository = true;\n  /**\r\n   * Use the online repository, or use only locally-defined controllers\r\n   */\n\n  WebXRMotionControllerManager.UseOnlineRepository = true;\n  return WebXRMotionControllerManager;\n}();\n\nexport { WebXRMotionControllerManager }; // register the generic profile(s) here so we will at least have them\n\nWebXRMotionControllerManager.RegisterController(WebXRGenericTriggerMotionController.ProfileId, function (xrInput, scene) {\n  return new WebXRGenericTriggerMotionController(scene, xrInput.gamepad, xrInput.handedness);\n}); // register fallbacks\n\nWebXRMotionControllerManager.DefaultFallbacks();","map":null,"metadata":{},"sourceType":"module"}