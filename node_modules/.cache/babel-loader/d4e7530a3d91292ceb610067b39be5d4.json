{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable\";\nimport { PoseEnabledController } from \"./poseEnabledController\";\n/**\r\n * Defines the WebVRController object that represents controllers tracked in 3D space\r\n */\n\nvar WebVRController =\n/** @class */\nfunction (_super) {\n  __extends(WebVRController, _super);\n  /**\r\n   * Creates a new WebVRController from a gamepad\r\n   * @param vrGamepad the gamepad that the WebVRController should be created from\r\n   */\n\n\n  function WebVRController(vrGamepad) {\n    var _this = _super.call(this, vrGamepad) || this; // Observables\n\n    /**\r\n     * Fired when the trigger state has changed\r\n     */\n\n\n    _this.onTriggerStateChangedObservable = new Observable();\n    /**\r\n     * Fired when the main button state has changed\r\n     */\n\n    _this.onMainButtonStateChangedObservable = new Observable();\n    /**\r\n     * Fired when the secondary button state has changed\r\n     */\n\n    _this.onSecondaryButtonStateChangedObservable = new Observable();\n    /**\r\n     * Fired when the pad state has changed\r\n     */\n\n    _this.onPadStateChangedObservable = new Observable();\n    /**\r\n     * Fired when controllers stick values have changed\r\n     */\n\n    _this.onPadValuesChangedObservable = new Observable();\n    /**\r\n     * X and Y axis corresponding to the controllers joystick\r\n     */\n\n    _this.pad = {\n      x: 0,\n      y: 0\n    }; // avoid GC, store state in a tmp object\n\n    _this._changes = {\n      pressChanged: false,\n      touchChanged: false,\n      valueChanged: false,\n      changed: false\n    };\n    _this._buttons = new Array(vrGamepad.buttons.length);\n    _this.hand = vrGamepad.hand;\n    return _this;\n  }\n  /**\r\n   * Fired when a controller button's state has changed\r\n   * @param callback the callback containing the button that was modified\r\n   */\n\n\n  WebVRController.prototype.onButtonStateChange = function (callback) {\n    this._onButtonStateChange = callback;\n  };\n\n  Object.defineProperty(WebVRController.prototype, \"defaultModel\", {\n    /**\r\n     * The default controller model for the controller\r\n     */\n    get: function get() {\n      return this._defaultModel;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Updates the state of the controller and mesh based on the current position and rotation of the controller\r\n   */\n\n  WebVRController.prototype.update = function () {\n    _super.prototype.update.call(this);\n\n    for (var index = 0; index < this._buttons.length; index++) {\n      this._setButtonValue(this.browserGamepad.buttons[index], this._buttons[index], index);\n    }\n\n    if (this.leftStick.x !== this.pad.x || this.leftStick.y !== this.pad.y) {\n      this.pad.x = this.leftStick.x;\n      this.pad.y = this.leftStick.y;\n      this.onPadValuesChangedObservable.notifyObservers(this.pad);\n    }\n  };\n\n  WebVRController.prototype._setButtonValue = function (newState, currentState, buttonIndex) {\n    if (!newState) {\n      newState = {\n        pressed: false,\n        touched: false,\n        value: 0\n      };\n    }\n\n    if (!currentState) {\n      this._buttons[buttonIndex] = {\n        pressed: newState.pressed,\n        touched: newState.touched,\n        value: newState.value\n      };\n      return;\n    }\n\n    this._checkChanges(newState, currentState);\n\n    if (this._changes.changed) {\n      this._onButtonStateChange && this._onButtonStateChange(this.index, buttonIndex, newState);\n\n      this._handleButtonChange(buttonIndex, newState, this._changes);\n    }\n\n    this._buttons[buttonIndex].pressed = newState.pressed;\n    this._buttons[buttonIndex].touched = newState.touched; // oculus triggers are never 0, thou not touched.\n\n    this._buttons[buttonIndex].value = newState.value < 0.00000001 ? 0 : newState.value;\n  };\n\n  WebVRController.prototype._checkChanges = function (newState, currentState) {\n    this._changes.pressChanged = newState.pressed !== currentState.pressed;\n    this._changes.touchChanged = newState.touched !== currentState.touched;\n    this._changes.valueChanged = newState.value !== currentState.value;\n    this._changes.changed = this._changes.pressChanged || this._changes.touchChanged || this._changes.valueChanged;\n    return this._changes;\n  };\n  /**\r\n   * Disposes of th webVRCOntroller\r\n   */\n\n\n  WebVRController.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._defaultModel = null;\n    this.onTriggerStateChangedObservable.clear();\n    this.onMainButtonStateChangedObservable.clear();\n    this.onSecondaryButtonStateChangedObservable.clear();\n    this.onPadStateChangedObservable.clear();\n    this.onPadValuesChangedObservable.clear();\n  };\n\n  return WebVRController;\n}(PoseEnabledController);\n\nexport { WebVRController };","map":null,"metadata":{},"sourceType":"module"}