{"ast":null,"code":"import _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { loadingReducer } from 'decentraland-dapps/dist/modules/loading/reducer';\nimport { LOAD_ASSET_PACKS_REQUEST, LOAD_ASSET_PACKS_SUCCESS, LOAD_ASSET_PACKS_FAILURE, SAVE_ASSET_PACK_SUCCESS } from 'modules/assetPack/actions';\nimport { LOAD_COLLECTIBLES_SUCCESS, LOAD_COLLECTIBLES_REQUEST, LOAD_ASSETS } from './actions';\nvar INITIAL_STATE = {\n  data: {},\n  loading: [],\n  error: null\n};\nexport var assetReducer = function assetReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOAD_COLLECTIBLES_REQUEST:\n    case LOAD_ASSET_PACKS_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case LOAD_ASSET_PACKS_SUCCESS:\n      {\n        var assetPacks = action.payload.assetPacks;\n        var assets = {};\n\n        var _iterator = _createForOfIteratorHelper(assetPacks),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var assetPack = _step.value;\n\n            var _iterator2 = _createForOfIteratorHelper(assetPack.assets),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var asset = _step2.value;\n                assets[asset.id] = _objectSpread({}, asset);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return {\n          loading: loadingReducer(state.loading, action),\n          error: null,\n          data: _objectSpread({}, state.data, assets)\n        };\n      }\n\n    case LOAD_ASSET_PACKS_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action),\n          error: action.payload.error\n        });\n      }\n\n    case LOAD_COLLECTIBLES_SUCCESS:\n      {\n        var _assets = {};\n\n        var _iterator3 = _createForOfIteratorHelper(action.payload.assets),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _asset = _step3.value;\n            _assets[_asset.id] = _objectSpread({}, _asset);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action),\n          error: null,\n          data: _objectSpread({}, state.data, _assets)\n        });\n      }\n\n    case SAVE_ASSET_PACK_SUCCESS:\n      {\n        var _assetPack = action.payload.assetPack;\n\n        var newState = _objectSpread({}, state, {\n          data: _objectSpread({}, state.data)\n        });\n\n        for (var _i = 0, _Object$keys = Object.keys(state.data); _i < _Object$keys.length; _i++) {\n          var assetId = _Object$keys[_i];\n          var _asset2 = newState.data[assetId];\n\n          if (_asset2.assetPackId === _assetPack.id) {\n            delete newState.data[_asset2.id];\n          }\n        }\n\n        return newState;\n      }\n\n    case LOAD_ASSETS:\n      {\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, action.payload.assets)\n        });\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/asset/reducer.ts"],"names":["loadingReducer","LOAD_ASSET_PACKS_REQUEST","LOAD_ASSET_PACKS_SUCCESS","LOAD_ASSET_PACKS_FAILURE","SAVE_ASSET_PACK_SUCCESS","LOAD_COLLECTIBLES_SUCCESS","LOAD_COLLECTIBLES_REQUEST","LOAD_ASSETS","INITIAL_STATE","data","loading","error","assetReducer","state","action","type","assetPacks","payload","assets","assetPack","asset","id","newState","Object","keys","assetId","assetPackId"],"mappings":"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","sourcesContent":["import { loadingReducer, LoadingState } from 'decentraland-dapps/dist/modules/loading/reducer'\nimport { ModelById } from 'decentraland-dapps/dist/lib/types'\nimport { Asset } from 'modules/asset/types'\nimport {\n  LOAD_ASSET_PACKS_REQUEST,\n  LOAD_ASSET_PACKS_SUCCESS,\n  LOAD_ASSET_PACKS_FAILURE,\n  SaveAssetPackSuccessAction,\n  SAVE_ASSET_PACK_SUCCESS\n} from 'modules/assetPack/actions'\nimport { AssetPackReducerAction } from 'modules/assetPack/reducer'\nimport {\n  LOAD_COLLECTIBLES_SUCCESS,\n  LoadCollectiblesSuccessAction,\n  LOAD_COLLECTIBLES_REQUEST,\n  LoadCollectiblesRequestAction,\n  LOAD_ASSETS,\n  LoadAssetsAction\n} from './actions'\n\nexport type AssetState = {\n  data: ModelById<Asset>\n  loading: LoadingState\n  error: string | null\n}\n\nconst INITIAL_STATE: AssetState = {\n  data: {},\n  loading: [],\n  error: null\n}\n\nexport type AssetReducerAction =\n  | AssetPackReducerAction\n  | LoadCollectiblesSuccessAction\n  | LoadCollectiblesRequestAction\n  | SaveAssetPackSuccessAction\n  | LoadAssetsAction\n\nexport const assetReducer = (state = INITIAL_STATE, action: AssetReducerAction): AssetState => {\n  switch (action.type) {\n    case LOAD_COLLECTIBLES_REQUEST:\n    case LOAD_ASSET_PACKS_REQUEST: {\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case LOAD_ASSET_PACKS_SUCCESS: {\n      const { assetPacks } = action.payload\n      const assets: AssetState['data'] = {}\n\n      for (const assetPack of assetPacks) {\n        for (const asset of assetPack.assets) {\n          assets[asset.id] = { ...asset }\n        }\n      }\n\n      return {\n        loading: loadingReducer(state.loading, action),\n        error: null,\n        data: {\n          ...state.data,\n          ...assets\n        }\n      }\n    }\n    case LOAD_ASSET_PACKS_FAILURE: {\n      return { ...state, loading: loadingReducer(state.loading, action), error: action.payload.error }\n    }\n    case LOAD_COLLECTIBLES_SUCCESS: {\n      const assets: AssetState['data'] = {}\n\n      for (const asset of action.payload.assets) {\n        assets[asset.id] = { ...asset }\n      }\n\n      return { ...state, loading: loadingReducer(state.loading, action), error: null, data: { ...state.data, ...assets } }\n    }\n    case SAVE_ASSET_PACK_SUCCESS: {\n      const { assetPack } = action.payload\n\n      const newState = {\n        ...state,\n        data: {\n          ...state.data\n        }\n      }\n\n      for (let assetId of Object.keys(state.data)) {\n        const asset = newState.data[assetId]\n        if (asset.assetPackId === assetPack.id) {\n          delete newState.data[asset.id]\n        }\n      }\n\n      return newState\n    }\n    case LOAD_ASSETS: {\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          ...action.payload.assets\n        }\n      }\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}