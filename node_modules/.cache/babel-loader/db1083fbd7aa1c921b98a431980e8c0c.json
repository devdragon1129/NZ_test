{"ast":null,"code":"import _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(projectSaga);\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport uuidv4 from 'uuid/v4';\nimport { push } from 'connected-react-router';\nimport { takeLatest, put, select, take, call, all, race, delay } from 'redux-saga/effects';\nimport { ActionCreators } from 'redux-undo';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { CREATE_PROJECT_FROM_TEMPLATE, DUPLICATE_PROJECT, EXPORT_PROJECT_REQUEST, IMPORT_PROJECT, exportProjectSuccess, LOAD_PROJECTS_REQUEST, loadProjectsSuccess, loadManifestSuccess, LOAD_MANIFEST_REQUEST, EDIT_PROJECT, setProject, createProject, loadManifestFailure, loadProjectsFailure, loadProjectsRequest, loadPublicProjectSuccess, loadPublicProjectFailure, LOAD_PUBLIC_PROJECT_REQUEST, SHARE_PROJECT, EDIT_PROJECT_THUMBNAIL, DELETE_PROJECT } from 'modules/project/actions';\nimport { getData as getProjects } from 'modules/project/selectors';\nimport { getData as getScenes } from 'modules/scene/selectors';\nimport { EMPTY_SCENE_METRICS } from 'modules/scene/constants';\nimport { createScene, setGround, applyLayout } from 'modules/scene/actions';\nimport { SET_EDITOR_READY, setEditorReady, takeScreenshot, setExportProgress, createEditorScene, setGizmo } from 'modules/editor/actions';\nimport { store } from 'modules/common/store';\nimport { isRemoteURL } from 'modules/media/utils';\nimport { getSceneByProjectId } from 'modules/scene/utils';\nimport { saveProjectRequest } from 'modules/sync/actions';\nimport { Gizmo } from 'modules/editor/types';\nimport { loadProfileRequest } from 'decentraland-dapps/dist/modules/profile/actions';\nimport { LOGIN_SUCCESS } from 'modules/identity/actions';\nimport { getName } from 'modules/profile/selectors';\nimport { getDefaultGroundAsset } from 'modules/deployment/utils';\nimport { locations } from 'routing/locations';\nimport { downloadZip } from 'lib/zip';\nimport { didUpdateLayout, getImageAsDataUrl } from './utils';\nimport { createFiles } from './export';\nexport function projectSaga(builder) {\n  var _marked, _marked2, _marked3, _marked4, _marked5, _marked6, _marked7, _marked8, _marked9, _marked10, _marked11, handleCreateProjectFromTemplate, handleDuplicateProject, handleEditProject, handleShareProject, handleExportProject, handleImportProject, handleLoadPublicProject, handleLoadProjectsRequest, handleLoadProjectRequest, handleLoginSuccess, handleDeleteProject;\n\n  return _regeneratorRuntime.wrap(function projectSaga$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          handleDeleteProject = function _handleDeleteProject(_action) {\n            return _regeneratorRuntime.wrap(function handleDeleteProject$(_context11) {\n              while (1) {\n                switch (_context11.prev = _context11.next) {\n                  case 0:\n                    _context11.next = 2;\n                    return put(push(locations.root()));\n\n                  case 2:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }\n            }, _marked11);\n          };\n\n          handleLoginSuccess = function _handleLoginSuccess(_action) {\n            return _regeneratorRuntime.wrap(function handleLoginSuccess$(_context10) {\n              while (1) {\n                switch (_context10.prev = _context10.next) {\n                  case 0:\n                    _context10.next = 2;\n                    return put(loadProjectsRequest());\n\n                  case 2:\n                  case \"end\":\n                    return _context10.stop();\n                }\n              }\n            }, _marked10);\n          };\n\n          handleLoadProjectRequest = function _handleLoadProjectReq(action) {\n            var _action$payload3, id, type, manifest;\n\n            return _regeneratorRuntime.wrap(function handleLoadProjectRequest$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    _action$payload3 = action.payload, id = _action$payload3.id, type = _action$payload3.type;\n                    _context9.prev = 1;\n                    _context9.next = 4;\n                    return call(function () {\n                      return builder.fetchManifest(id, type);\n                    });\n\n                  case 4:\n                    manifest = _context9.sent;\n                    _context9.next = 7;\n                    return put(loadManifestSuccess(manifest));\n\n                  case 7:\n                    _context9.next = 13;\n                    break;\n\n                  case 9:\n                    _context9.prev = 9;\n                    _context9.t0 = _context9[\"catch\"](1);\n                    _context9.next = 13;\n                    return put(loadManifestFailure(_context9.t0.message));\n\n                  case 13:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, _marked9, null, [[1, 9]]);\n          };\n\n          handleLoadProjectsRequest = function _handleLoadProjectsRe() {\n            var projects, record, _iterator2, _step2, project;\n\n            return _regeneratorRuntime.wrap(function handleLoadProjectsRequest$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    _context8.prev = 0;\n                    _context8.next = 3;\n                    return call(function () {\n                      return builder.fetchProjects();\n                    });\n\n                  case 3:\n                    projects = _context8.sent;\n                    record = {};\n                    _iterator2 = _createForOfIteratorHelper(projects);\n\n                    try {\n                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                        project = _step2.value;\n                        record[project.id] = project;\n                      }\n                    } catch (err) {\n                      _iterator2.e(err);\n                    } finally {\n                      _iterator2.f();\n                    }\n\n                    _context8.next = 9;\n                    return put(loadProjectsSuccess(record));\n\n                  case 9:\n                    _context8.next = 15;\n                    break;\n\n                  case 11:\n                    _context8.prev = 11;\n                    _context8.t0 = _context8[\"catch\"](0);\n                    _context8.next = 15;\n                    return put(loadProjectsFailure(_context8.t0.message));\n\n                  case 15:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, _marked8, null, [[0, 11]]);\n          };\n\n          handleLoadPublicProject = function _handleLoadPublicProj(action) {\n            var _action$payload2, id, type, project;\n\n            return _regeneratorRuntime.wrap(function handleLoadPublicProject$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _action$payload2 = action.payload, id = _action$payload2.id, type = _action$payload2.type;\n                    _context7.prev = 1;\n                    _context7.next = 4;\n                    return call(function () {\n                      return builder.fetchPublicProject(id, type);\n                    });\n\n                  case 4:\n                    project = _context7.sent;\n                    _context7.next = 7;\n                    return put(loadPublicProjectSuccess(project, type));\n\n                  case 7:\n                    if (!project) {\n                      _context7.next = 11;\n                      break;\n                    }\n\n                    if (!project.ethAddress) {\n                      _context7.next = 11;\n                      break;\n                    }\n\n                    _context7.next = 11;\n                    return put(loadProfileRequest(project.ethAddress));\n\n                  case 11:\n                    _context7.next = 17;\n                    break;\n\n                  case 13:\n                    _context7.prev = 13;\n                    _context7.t0 = _context7[\"catch\"](1);\n                    _context7.next = 17;\n                    return put(loadPublicProjectFailure(_context7.t0.message));\n\n                  case 17:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _marked7, null, [[1, 13]]);\n          };\n\n          handleImportProject = function _handleImportProject(action) {\n            var projects, _iterator, _step, saved;\n\n            return _regeneratorRuntime.wrap(function handleImportProject$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    projects = action.payload.projects;\n                    _iterator = _createForOfIteratorHelper(projects);\n                    _context6.prev = 2;\n\n                    _iterator.s();\n\n                  case 4:\n                    if ((_step = _iterator.n()).done) {\n                      _context6.next = 26;\n                      break;\n                    }\n\n                    saved = _step.value;\n\n                    if (!(saved.scene && saved.project)) {\n                      _context6.next = 24;\n                      break;\n                    }\n\n                    _context6.t0 = all;\n                    _context6.t1 = put(createScene(saved.scene));\n                    _context6.t2 = put;\n                    _context6.t3 = createProject;\n                    _context6.t4 = _objectSpread;\n                    _context6.t5 = {};\n                    _context6.t6 = saved.project;\n                    _context6.next = 16;\n                    return select(getAddress);\n\n                  case 16:\n                    _context6.t7 = _context6.sent;\n                    _context6.t8 = {\n                      ethAddress: _context6.t7\n                    };\n                    _context6.t9 = (0, _context6.t4)(_context6.t5, _context6.t6, _context6.t8);\n                    _context6.t10 = (0, _context6.t3)(_context6.t9);\n                    _context6.t11 = (0, _context6.t2)(_context6.t10);\n                    _context6.t12 = [_context6.t1, _context6.t11];\n                    _context6.next = 24;\n                    return (0, _context6.t0)(_context6.t12);\n\n                  case 24:\n                    _context6.next = 4;\n                    break;\n\n                  case 26:\n                    _context6.next = 31;\n                    break;\n\n                  case 28:\n                    _context6.prev = 28;\n                    _context6.t13 = _context6[\"catch\"](2);\n\n                    _iterator.e(_context6.t13);\n\n                  case 31:\n                    _context6.prev = 31;\n\n                    _iterator.f();\n\n                    return _context6.finish(31);\n\n                  case 34:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _marked6, null, [[2, 28, 31, 34]]);\n          };\n\n          handleExportProject = function _handleExportProject(action) {\n            var project, scene, author, files, name;\n            return _regeneratorRuntime.wrap(function handleExportProject$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    project = action.payload.project;\n                    _context5.next = 3;\n                    return getSceneByProjectId(project.id);\n\n                  case 3:\n                    scene = _context5.sent;\n                    _context5.next = 6;\n                    return put(setExportProgress({\n                      loaded: 0,\n                      total: 0\n                    }));\n\n                  case 6:\n                    _context5.next = 8;\n                    return select(getName);\n\n                  case 8:\n                    author = _context5.sent;\n                    _context5.next = 11;\n                    return call(createFiles, {\n                      project: project,\n                      scene: scene,\n                      point: {\n                        x: 0,\n                        y: 0\n                      },\n                      rotation: 'east',\n                      isDeploy: false,\n                      thumbnail: null,\n                      author: author,\n                      onProgress: function onProgress(progress) {\n                        return store.dispatch(setExportProgress(progress));\n                      }\n                    });\n\n                  case 11:\n                    files = _context5.sent;\n                    // download zip\n                    name = project.title.replace(/\\s/g, '_');\n                    _context5.next = 15;\n                    return call(downloadZip, name, files);\n\n                  case 15:\n                    _context5.next = 17;\n                    return put(exportProjectSuccess());\n\n                  case 17:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _marked5);\n          };\n\n          handleShareProject = function _handleShareProject(action) {\n            var id, scene, projects, project, newProject;\n            return _regeneratorRuntime.wrap(function handleShareProject$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    id = action.payload.id;\n                    _context4.next = 3;\n                    return getSceneByProjectId(id);\n\n                  case 3:\n                    scene = _context4.sent;\n\n                    if (scene) {\n                      _context4.next = 6;\n                      break;\n                    }\n\n                    return _context4.abrupt(\"return\");\n\n                  case 6:\n                    _context4.next = 8;\n                    return select(getProjects);\n\n                  case 8:\n                    projects = _context4.sent;\n                    project = projects[id];\n\n                    if (project) {\n                      _context4.next = 12;\n                      break;\n                    }\n\n                    return _context4.abrupt(\"return\");\n\n                  case 12:\n                    if (project.isPublic) {\n                      _context4.next = 16;\n                      break;\n                    }\n\n                    newProject = _objectSpread({}, project, {\n                      isPublic: true\n                    });\n                    _context4.next = 16;\n                    return put(setProject(newProject));\n\n                  case 16:\n                    _context4.next = 18;\n                    return put(setGizmo(Gizmo.NONE));\n\n                  case 18:\n                    _context4.next = 20;\n                    return put(takeScreenshot());\n\n                  case 20:\n                    _context4.next = 22;\n                    return race([take(EDIT_PROJECT_THUMBNAIL), delay(1000)]);\n\n                  case 22:\n                    _context4.next = 24;\n                    return put(saveProjectRequest(project, false));\n\n                  case 24:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _marked4);\n          };\n\n          handleEditProject = function _handleEditProject(action) {\n            var _action$payload, id, project, projects, targetProject, scenes, scene, shouldApplyLayout, newProject;\n\n            return _regeneratorRuntime.wrap(function handleEditProject$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _action$payload = action.payload, id = _action$payload.id, project = _action$payload.project;\n                    _context3.next = 3;\n                    return select(getProjects);\n\n                  case 3:\n                    projects = _context3.sent;\n                    targetProject = projects[id];\n\n                    if (!(!targetProject || !project)) {\n                      _context3.next = 7;\n                      break;\n                    }\n\n                    return _context3.abrupt(\"return\");\n\n                  case 7:\n                    _context3.next = 9;\n                    return select(getScenes);\n\n                  case 9:\n                    scenes = _context3.sent;\n                    scene = scenes[targetProject.sceneId];\n\n                    if (scene) {\n                      _context3.next = 13;\n                      break;\n                    }\n\n                    return _context3.abrupt(\"return\");\n\n                  case 13:\n                    shouldApplyLayout = didUpdateLayout(project, targetProject);\n                    newProject = _objectSpread({}, targetProject, project);\n                    _context3.next = 17;\n                    return put(setProject(newProject));\n\n                  case 17:\n                    if (!shouldApplyLayout) {\n                      _context3.next = 30;\n                      break;\n                    }\n\n                    _context3.next = 20;\n                    return put(setEditorReady(false));\n\n                  case 20:\n                    _context3.next = 22;\n                    return put(createEditorScene(newProject));\n\n                  case 22:\n                    _context3.next = 24;\n                    return take(SET_EDITOR_READY);\n\n                  case 24:\n                    _context3.next = 26;\n                    return put(applyLayout(newProject));\n\n                  case 26:\n                    _context3.next = 28;\n                    return put(ActionCreators.clearHistory());\n\n                  case 28:\n                    _context3.next = 30;\n                    return put(takeScreenshot());\n\n                  case 30:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _marked3);\n          };\n\n          handleDuplicateProject = function _handleDuplicateProje(action) {\n            var project, scene, thumbnail, newScene, newProject;\n            return _regeneratorRuntime.wrap(function handleDuplicateProject$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    project = action.payload.project;\n                    _context2.next = 3;\n                    return getSceneByProjectId(project.id);\n\n                  case 3:\n                    scene = _context2.sent;\n                    thumbnail = project.thumbnail;\n\n                    if (!(thumbnail && isRemoteURL(thumbnail))) {\n                      _context2.next = 9;\n                      break;\n                    }\n\n                    _context2.next = 8;\n                    return call(getImageAsDataUrl, project.thumbnail);\n\n                  case 8:\n                    thumbnail = _context2.sent;\n\n                  case 9:\n                    newScene = _objectSpread({}, scene, {\n                      id: uuidv4()\n                    });\n                    newProject = _objectSpread({}, project, {\n                      sceneId: newScene.id,\n                      id: uuidv4(),\n                      createdAt: new Date().toISOString(),\n                      thumbnail: thumbnail\n                    });\n                    _context2.next = 13;\n                    return put(createScene(newScene));\n\n                  case 13:\n                    _context2.next = 15;\n                    return put(createProject(newProject));\n\n                  case 15:\n                    _context2.next = 17;\n                    return put(push(locations.root()));\n\n                  case 17:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _marked2);\n          };\n\n          handleCreateProjectFromTemplate = function _handleCreateProjectF(action) {\n            var template, _action$meta, title, description, onSuccess, scene, rows, cols, ethAddress, project;\n\n            return _regeneratorRuntime.wrap(function handleCreateProjectFromTemplate$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    template = action.payload.template;\n                    _action$meta = action.meta, title = _action$meta.title, description = _action$meta.description, onSuccess = _action$meta.onSuccess;\n                    scene = {\n                      id: uuidv4(),\n                      entities: {},\n                      components: {},\n                      assets: {},\n                      metrics: EMPTY_SCENE_METRICS,\n                      limits: EMPTY_SCENE_METRICS,\n                      ground: null\n                    };\n                    rows = template.rows, cols = template.cols;\n                    _context.next = 6;\n                    return select(getAddress);\n\n                  case 6:\n                    ethAddress = _context.sent;\n                    project = {\n                      id: uuidv4(),\n                      title: title || t('global.new_scene'),\n                      description: description || '',\n                      thumbnail: '',\n                      isPublic: false,\n                      layout: {\n                        rows: rows,\n                        cols: cols\n                      },\n                      sceneId: scene.id,\n                      ethAddress: ethAddress || null,\n                      createdAt: new Date().toISOString(),\n                      updatedAt: new Date().toISOString()\n                    };\n                    _context.next = 10;\n                    return put(createScene(scene));\n\n                  case 10:\n                    _context.next = 12;\n                    return put(createProject(project));\n\n                  case 12:\n                    if (!onSuccess) {\n                      _context.next = 16;\n                      break;\n                    }\n\n                    onSuccess(project, scene);\n                    _context.next = 16;\n                    return put(setGround(project.id, getDefaultGroundAsset()));\n\n                  case 16:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _marked);\n          };\n\n          _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleCreateProjectFromTemplate), _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleDuplicateProject), _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleEditProject), _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(handleShareProject), _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(handleExportProject), _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(handleImportProject), _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(handleLoadPublicProject), _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(handleLoadProjectsRequest), _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(handleLoadProjectRequest), _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(handleLoginSuccess), _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(handleDeleteProject);\n          _context12.next = 14;\n          return takeLatest(CREATE_PROJECT_FROM_TEMPLATE, handleCreateProjectFromTemplate);\n\n        case 14:\n          _context12.next = 16;\n          return takeLatest(DUPLICATE_PROJECT, handleDuplicateProject);\n\n        case 16:\n          _context12.next = 18;\n          return takeLatest(EDIT_PROJECT, handleEditProject);\n\n        case 18:\n          _context12.next = 20;\n          return takeLatest(SHARE_PROJECT, handleShareProject);\n\n        case 20:\n          _context12.next = 22;\n          return takeLatest(EXPORT_PROJECT_REQUEST, handleExportProject);\n\n        case 22:\n          _context12.next = 24;\n          return takeLatest(IMPORT_PROJECT, handleImportProject);\n\n        case 24:\n          _context12.next = 26;\n          return takeLatest(LOAD_PUBLIC_PROJECT_REQUEST, handleLoadPublicProject);\n\n        case 26:\n          _context12.next = 28;\n          return takeLatest(LOAD_PROJECTS_REQUEST, handleLoadProjectsRequest);\n\n        case 28:\n          _context12.next = 30;\n          return takeLatest(LOAD_MANIFEST_REQUEST, handleLoadProjectRequest);\n\n        case 30:\n          _context12.next = 32;\n          return takeLatest(LOGIN_SUCCESS, handleLoginSuccess);\n\n        case 32:\n          _context12.next = 34;\n          return takeLatest(DELETE_PROJECT, handleDeleteProject);\n\n        case 34:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/project/sagas.ts"],"names":["projectSaga","uuidv4","push","takeLatest","put","select","take","call","all","race","delay","ActionCreators","t","getAddress","CREATE_PROJECT_FROM_TEMPLATE","DUPLICATE_PROJECT","EXPORT_PROJECT_REQUEST","IMPORT_PROJECT","exportProjectSuccess","LOAD_PROJECTS_REQUEST","loadProjectsSuccess","loadManifestSuccess","LOAD_MANIFEST_REQUEST","EDIT_PROJECT","setProject","createProject","loadManifestFailure","loadProjectsFailure","loadProjectsRequest","loadPublicProjectSuccess","loadPublicProjectFailure","LOAD_PUBLIC_PROJECT_REQUEST","SHARE_PROJECT","EDIT_PROJECT_THUMBNAIL","DELETE_PROJECT","getData","getProjects","getScenes","EMPTY_SCENE_METRICS","createScene","setGround","applyLayout","SET_EDITOR_READY","setEditorReady","takeScreenshot","setExportProgress","createEditorScene","setGizmo","store","isRemoteURL","getSceneByProjectId","saveProjectRequest","Gizmo","loadProfileRequest","LOGIN_SUCCESS","getName","getDefaultGroundAsset","locations","downloadZip","didUpdateLayout","getImageAsDataUrl","createFiles","builder","handleCreateProjectFromTemplate","handleDuplicateProject","handleEditProject","handleShareProject","handleExportProject","handleImportProject","handleLoadPublicProject","handleLoadProjectsRequest","handleLoadProjectRequest","handleLoginSuccess","handleDeleteProject","_action","root","action","payload","id","type","fetchManifest","manifest","message","fetchProjects","projects","record","project","fetchPublicProject","ethAddress","saved","scene","loaded","total","author","point","x","y","rotation","isDeploy","thumbnail","onProgress","progress","dispatch","files","name","title","replace","isPublic","newProject","NONE","targetProject","scenes","sceneId","shouldApplyLayout","clearHistory","newScene","createdAt","Date","toISOString","template","meta","description","onSuccess","entities","components","assets","metrics","limits","ground","rows","cols","layout","updatedAt"],"mappings":"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","sourcesContent":["import uuidv4 from 'uuid/v4'\nimport { push } from 'connected-react-router'\nimport { takeLatest, put, select, take, call, all, race, delay } from 'redux-saga/effects'\nimport { ActionCreators } from 'redux-undo'\nimport { ModelById } from 'decentraland-dapps/dist/lib/types'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport {\n  CREATE_PROJECT_FROM_TEMPLATE,\n  CreateProjectFromTemplateAction,\n  DUPLICATE_PROJECT,\n  DuplicateProjectAction,\n  EXPORT_PROJECT_REQUEST,\n  ExportProjectRequestAction,\n  IMPORT_PROJECT,\n  ImportProjectAction,\n  exportProjectSuccess,\n  LOAD_PROJECTS_REQUEST,\n  loadProjectsSuccess,\n  loadManifestSuccess,\n  LOAD_MANIFEST_REQUEST,\n  EDIT_PROJECT,\n  setProject,\n  EditProjectAction,\n  createProject,\n  LoadManifestRequestAction,\n  loadManifestFailure,\n  loadProjectsFailure,\n  loadProjectsRequest,\n  loadPublicProjectSuccess,\n  loadPublicProjectFailure,\n  LoadPublicProjectRequestAction,\n  LOAD_PUBLIC_PROJECT_REQUEST,\n  ShareProjectAction,\n  SHARE_PROJECT,\n  EDIT_PROJECT_THUMBNAIL,\n  DELETE_PROJECT,\n  DeleteProjectAction\n} from 'modules/project/actions'\nimport { Project, Manifest } from 'modules/project/types'\nimport { Scene } from 'modules/scene/types'\nimport { getData as getProjects } from 'modules/project/selectors'\nimport { getData as getScenes } from 'modules/scene/selectors'\nimport { EMPTY_SCENE_METRICS } from 'modules/scene/constants'\nimport { createScene, setGround, applyLayout } from 'modules/scene/actions'\nimport { SET_EDITOR_READY, setEditorReady, takeScreenshot, setExportProgress, createEditorScene, setGizmo } from 'modules/editor/actions'\nimport { store } from 'modules/common/store'\nimport { isRemoteURL } from 'modules/media/utils'\nimport { getSceneByProjectId } from 'modules/scene/utils'\nimport { BuilderAPI } from 'lib/api/builder'\nimport { saveProjectRequest } from 'modules/sync/actions'\nimport { Gizmo } from 'modules/editor/types'\nimport { Pool } from 'modules/pool/types'\nimport { loadProfileRequest } from 'decentraland-dapps/dist/modules/profile/actions'\nimport { LOGIN_SUCCESS, LoginSuccessAction } from 'modules/identity/actions'\nimport { getName } from 'modules/profile/selectors'\nimport { getDefaultGroundAsset } from 'modules/deployment/utils'\nimport { locations } from 'routing/locations'\nimport { downloadZip } from 'lib/zip'\nimport { didUpdateLayout, getImageAsDataUrl } from './utils'\nimport { createFiles } from './export'\n\nexport function* projectSaga(builder: BuilderAPI) {\n  yield takeLatest(CREATE_PROJECT_FROM_TEMPLATE, handleCreateProjectFromTemplate)\n  yield takeLatest(DUPLICATE_PROJECT, handleDuplicateProject)\n  yield takeLatest(EDIT_PROJECT, handleEditProject)\n  yield takeLatest(SHARE_PROJECT, handleShareProject)\n  yield takeLatest(EXPORT_PROJECT_REQUEST, handleExportProject)\n  yield takeLatest(IMPORT_PROJECT, handleImportProject)\n  yield takeLatest(LOAD_PUBLIC_PROJECT_REQUEST, handleLoadPublicProject)\n  yield takeLatest(LOAD_PROJECTS_REQUEST, handleLoadProjectsRequest)\n  yield takeLatest(LOAD_MANIFEST_REQUEST, handleLoadProjectRequest)\n  yield takeLatest(LOGIN_SUCCESS, handleLoginSuccess)\n  yield takeLatest(DELETE_PROJECT, handleDeleteProject)\n\n  function* handleCreateProjectFromTemplate(action: CreateProjectFromTemplateAction) {\n    const { template } = action.payload\n    const { title, description, onSuccess } = action.meta\n\n    const scene: Scene = {\n      id: uuidv4(),\n      entities: {},\n      components: {},\n      assets: {},\n      metrics: EMPTY_SCENE_METRICS,\n      limits: EMPTY_SCENE_METRICS,\n      ground: null\n    }\n\n    const { rows, cols } = template\n\n    const ethAddress: string = yield select(getAddress)\n\n    const project: Project = {\n      id: uuidv4(),\n      title: title || t('global.new_scene'),\n      description: description || '',\n      thumbnail: '',\n      isPublic: false,\n      layout: {\n        rows,\n        cols\n      },\n      sceneId: scene.id,\n      ethAddress: ethAddress || null,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n\n    yield put(createScene(scene))\n    yield put(createProject(project))\n\n    if (onSuccess) {\n      onSuccess(project, scene)\n      yield put(setGround(project.id, getDefaultGroundAsset()))\n    }\n  }\n\n  function* handleDuplicateProject(action: DuplicateProjectAction) {\n    const { project } = action.payload\n\n    const scene: Scene = yield getSceneByProjectId(project.id)\n\n    let thumbnail = project.thumbnail\n\n    if (thumbnail && isRemoteURL(thumbnail)) {\n      thumbnail = yield call(getImageAsDataUrl, project.thumbnail)\n    }\n\n    const newScene = { ...scene, id: uuidv4() }\n    const newProject = { ...project, sceneId: newScene.id, id: uuidv4(), createdAt: new Date().toISOString(), thumbnail }\n\n    yield put(createScene(newScene))\n    yield put(createProject(newProject))\n    yield put(push(locations.root()))\n  }\n\n  function* handleEditProject(action: EditProjectAction) {\n    const { id, project } = action.payload\n    const projects: ReturnType<typeof getProjects> = yield select(getProjects)\n    const targetProject = projects[id]\n\n    if (!targetProject || !project) return\n\n    const scenes: ReturnType<typeof getScenes> = yield select(getScenes)\n    const scene = scenes[targetProject.sceneId]\n\n    if (!scene) return\n\n    const shouldApplyLayout = didUpdateLayout(project, targetProject)\n    const newProject = { ...targetProject, ...project }\n\n    yield put(setProject(newProject))\n\n    if (shouldApplyLayout) {\n      yield put(setEditorReady(false))\n      yield put(createEditorScene(newProject))\n      yield take(SET_EDITOR_READY)\n      yield put(applyLayout(newProject))\n      yield put(ActionCreators.clearHistory())\n      yield put(takeScreenshot())\n    }\n  }\n\n  function* handleShareProject(action: ShareProjectAction) {\n    const { id } = action.payload\n\n    const scene: Scene = yield getSceneByProjectId(id)\n    if (!scene) return\n\n    const projects: ReturnType<typeof getProjects> = yield select(getProjects)\n    const project = projects[id]\n    if (!project) return\n\n    if (!project.isPublic) {\n      const newProject = { ...project, isPublic: true }\n      yield put(setProject(newProject))\n    }\n    yield put(setGizmo(Gizmo.NONE))\n    yield put(takeScreenshot())\n    yield race([take(EDIT_PROJECT_THUMBNAIL), delay(1000)])\n\n    yield put(saveProjectRequest(project, false))\n  }\n\n  function* handleExportProject(action: ExportProjectRequestAction) {\n    const { project } = action.payload\n    const scene: Scene = yield getSceneByProjectId(project.id)\n\n    yield put(setExportProgress({ loaded: 0, total: 0 }))\n    const author: string = yield select(getName)\n    const files: Record<string, Blob | string> = yield call(createFiles, {\n      project,\n      scene,\n      point: { x: 0, y: 0 },\n      rotation: 'east',\n      isDeploy: false,\n      thumbnail: null,\n      author,\n      onProgress: progress => store.dispatch(setExportProgress(progress))\n    })\n\n    // download zip\n    const name = project.title.replace(/\\s/g, '_')\n    yield call(downloadZip, name, files)\n    yield put(exportProjectSuccess())\n  }\n\n  function* handleImportProject(action: ImportProjectAction) {\n    const { projects } = action.payload\n\n    for (let saved of projects) {\n      if (saved.scene && saved.project) {\n        yield all([put(createScene(saved.scene)), put(createProject({ ...saved.project, ethAddress: yield select(getAddress) }))])\n      }\n    }\n  }\n\n  function* handleLoadPublicProject(action: LoadPublicProjectRequestAction) {\n    const { id, type } = action.payload\n    try {\n      const project: Project | Pool = yield call(() => builder.fetchPublicProject(id, type))\n      yield put(loadPublicProjectSuccess(project, type))\n      if (project) {\n        if (project.ethAddress) {\n          yield put(loadProfileRequest(project.ethAddress))\n        }\n      }\n    } catch (e) {\n      yield put(loadPublicProjectFailure(e.message))\n    }\n  }\n\n  function* handleLoadProjectsRequest() {\n    try {\n      const projects: Project[] = yield call(() => builder.fetchProjects())\n      const record: ModelById<Project> = {}\n\n      for (let project of projects) {\n        record[project.id] = project\n      }\n\n      yield put(loadProjectsSuccess(record))\n    } catch (e) {\n      yield put(loadProjectsFailure(e.message))\n    }\n  }\n\n  function* handleLoadProjectRequest(action: LoadManifestRequestAction) {\n    const { id, type } = action.payload\n    try {\n      const manifest: Manifest<Project> = yield call(() => builder.fetchManifest(id, type))\n      yield put(loadManifestSuccess(manifest))\n    } catch (e) {\n      yield put(loadManifestFailure(e.message))\n    }\n  }\n\n  function* handleLoginSuccess(_action: LoginSuccessAction) {\n    yield put(loadProjectsRequest())\n  }\n\n  function* handleDeleteProject(_action: DeleteProjectAction) {\n    yield put(push(locations.root()))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}