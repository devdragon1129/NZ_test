{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../Misc/decorators\";\nimport { Matrix, Vector3 } from \"../Maths/math.vector\";\nimport { Node } from \"../node\";\nimport { Light } from \"./light\";\nimport { ShadowLight } from \"./shadowLight\";\nNode.AddNodeConstructor(\"Light_Type_0\", function (name, scene) {\n  return function () {\n    return new PointLight(name, Vector3.Zero(), scene);\n  };\n});\n/**\r\n * A point light is a light defined by an unique point in world space.\r\n * The light is emitted in every direction from this point.\r\n * A good example of a point light is a standard light bulb.\r\n * Documentation: https://doc.babylonjs.com/babylon101/lights\r\n */\n\nvar PointLight =\n/** @class */\nfunction (_super) {\n  __extends(PointLight, _super);\n  /**\r\n   * Creates a PointLight object from the passed name and position (Vector3) and adds it in the scene.\r\n   * A PointLight emits the light in every direction.\r\n   * It can cast shadows.\r\n   * If the scene camera is already defined and you want to set your PointLight at the camera position, just set it :\r\n   * ```javascript\r\n   * var pointLight = new PointLight(\"pl\", camera.position, scene);\r\n   * ```\r\n   * Documentation : https://doc.babylonjs.com/babylon101/lights\r\n   * @param name The light friendly name\r\n   * @param position The position of the point light in the scene\r\n   * @param scene The scene the lights belongs to\r\n   */\n\n\n  function PointLight(name, position, scene) {\n    var _this = _super.call(this, name, scene) || this;\n\n    _this._shadowAngle = Math.PI / 2;\n    _this.position = position;\n    return _this;\n  }\n\n  Object.defineProperty(PointLight.prototype, \"shadowAngle\", {\n    /**\r\n     * Getter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\n    get: function get() {\n      return this._shadowAngle;\n    },\n\n    /**\r\n     * Setter: In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     * This specifies what angle the shadow will use to be created.\r\n     *\r\n     * It default to 90 degrees to work nicely with the cube texture generation for point lights shadow maps.\r\n     */\n    set: function set(value) {\n      this._shadowAngle = value;\n      this.forceProjectionMatrixCompute();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PointLight.prototype, \"direction\", {\n    /**\r\n     * Gets the direction if it has been set.\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\n    get: function get() {\n      return this._direction;\n    },\n\n    /**\r\n     * In case of direction provided, the shadow will not use a cube texture but simulate a spot shadow as a fallback\r\n     */\n    set: function set(value) {\n      var previousNeedCube = this.needCube();\n      this._direction = value;\n\n      if (this.needCube() !== previousNeedCube && this._shadowGenerator) {\n        this._shadowGenerator.recreateShadowMap();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the string \"PointLight\"\r\n   * @returns the class name\r\n   */\n\n  PointLight.prototype.getClassName = function () {\n    return \"PointLight\";\n  };\n  /**\r\n   * Returns the integer 0.\r\n   * @returns The light Type id as a constant defines in Light.LIGHTTYPEID_x\r\n   */\n\n\n  PointLight.prototype.getTypeID = function () {\n    return Light.LIGHTTYPEID_POINTLIGHT;\n  };\n  /**\r\n   * Specifies wether or not the shadowmap should be a cube texture.\r\n   * @returns true if the shadowmap needs to be a cube texture.\r\n   */\n\n\n  PointLight.prototype.needCube = function () {\n    return !this.direction;\n  };\n  /**\r\n   * Returns a new Vector3 aligned with the PointLight cube system according to the passed cube face index (integer).\r\n   * @param faceIndex The index of the face we are computed the direction to generate shadow\r\n   * @returns The set direction in 2d mode otherwise the direction to the cubemap face if needCube() is true\r\n   */\n\n\n  PointLight.prototype.getShadowDirection = function (faceIndex) {\n    if (this.direction) {\n      return _super.prototype.getShadowDirection.call(this, faceIndex);\n    } else {\n      switch (faceIndex) {\n        case 0:\n          return new Vector3(1.0, 0.0, 0.0);\n\n        case 1:\n          return new Vector3(-1.0, 0.0, 0.0);\n\n        case 2:\n          return new Vector3(0.0, -1.0, 0.0);\n\n        case 3:\n          return new Vector3(0.0, 1.0, 0.0);\n\n        case 4:\n          return new Vector3(0.0, 0.0, 1.0);\n\n        case 5:\n          return new Vector3(0.0, 0.0, -1.0);\n      }\n    }\n\n    return Vector3.Zero();\n  };\n  /**\r\n   * Sets the passed matrix \"matrix\" as a left-handed perspective projection matrix with the following settings :\r\n   * - fov = PI / 2\r\n   * - aspect ratio : 1.0\r\n   * - z-near and far equal to the active camera minZ and maxZ.\r\n   * Returns the PointLight.\r\n   */\n\n\n  PointLight.prototype._setDefaultShadowProjectionMatrix = function (matrix, viewMatrix, renderList) {\n    var activeCamera = this.getScene().activeCamera;\n\n    if (!activeCamera) {\n      return;\n    }\n\n    Matrix.PerspectiveFovLHToRef(this.shadowAngle, 1.0, this.getDepthMinZ(activeCamera), this.getDepthMaxZ(activeCamera), matrix);\n  };\n\n  PointLight.prototype._buildUniformLayout = function () {\n    this._uniformBuffer.addUniform(\"vLightData\", 4);\n\n    this._uniformBuffer.addUniform(\"vLightDiffuse\", 4);\n\n    this._uniformBuffer.addUniform(\"vLightSpecular\", 4);\n\n    this._uniformBuffer.addUniform(\"vLightFalloff\", 4);\n\n    this._uniformBuffer.addUniform(\"shadowsInfo\", 3);\n\n    this._uniformBuffer.addUniform(\"depthValues\", 2);\n\n    this._uniformBuffer.create();\n  };\n  /**\r\n   * Sets the passed Effect \"effect\" with the PointLight transformed position (or position, if none) and passed name (string).\r\n   * @param effect The effect to update\r\n   * @param lightIndex The index of the light in the effect to update\r\n   * @returns The point light\r\n   */\n\n\n  PointLight.prototype.transferToEffect = function (effect, lightIndex) {\n    if (this.computeTransformedInformation()) {\n      this._uniformBuffer.updateFloat4(\"vLightData\", this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z, 0.0, lightIndex);\n    } else {\n      this._uniformBuffer.updateFloat4(\"vLightData\", this.position.x, this.position.y, this.position.z, 0, lightIndex);\n    }\n\n    this._uniformBuffer.updateFloat4(\"vLightFalloff\", this.range, this._inverseSquaredRange, 0, 0, lightIndex);\n\n    return this;\n  };\n\n  PointLight.prototype.transferToNodeMaterialEffect = function (effect, lightDataUniformName) {\n    if (this.computeTransformedInformation()) {\n      effect.setFloat3(lightDataUniformName, this.transformedPosition.x, this.transformedPosition.y, this.transformedPosition.z);\n    } else {\n      effect.setFloat3(lightDataUniformName, this.position.x, this.position.y, this.position.z);\n    }\n\n    return this;\n  };\n  /**\r\n   * Prepares the list of defines specific to the light type.\r\n   * @param defines the list of defines\r\n   * @param lightIndex defines the index of the light for the effect\r\n   */\n\n\n  PointLight.prototype.prepareLightSpecificDefines = function (defines, lightIndex) {\n    defines[\"POINTLIGHT\" + lightIndex] = true;\n  };\n\n  __decorate([serialize()], PointLight.prototype, \"shadowAngle\", null);\n\n  return PointLight;\n}(ShadowLight);\n\nexport { PointLight };","map":null,"metadata":{},"sourceType":"module"}