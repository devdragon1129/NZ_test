{"ast":null,"code":"import { Engine } from \"../engine\";\n/**\r\n * Class used to define an additional view for the engine\r\n * @see https://doc.babylonjs.com/how_to/multi_canvases\r\n */\n\nvar EngineView =\n/** @class */\nfunction () {\n  function EngineView() {}\n\n  return EngineView;\n}();\n\nexport { EngineView };\n\nEngine.prototype.getInputElement = function () {\n  return this.inputElement || this.getRenderingCanvas();\n};\n\nEngine.prototype.registerView = function (canvas, camera) {\n  var _this = this;\n\n  if (!this.views) {\n    this.views = [];\n  }\n\n  for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n    var view = _a[_i];\n\n    if (view.target === canvas) {\n      return view;\n    }\n  }\n\n  var masterCanvas = this.getRenderingCanvas();\n\n  if (masterCanvas) {\n    canvas.width = masterCanvas.width;\n    canvas.height = masterCanvas.height;\n  }\n\n  var newView = {\n    target: canvas,\n    camera: camera\n  };\n  this.views.push(newView);\n\n  if (camera) {\n    camera.onDisposeObservable.add(function () {\n      _this.unRegisterView(canvas);\n    });\n  }\n\n  return newView;\n};\n\nEngine.prototype.unRegisterView = function (canvas) {\n  if (!this.views) {\n    return this;\n  }\n\n  for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n    var view = _a[_i];\n\n    if (view.target === canvas) {\n      var index = this.views.indexOf(view);\n\n      if (index !== -1) {\n        this.views.splice(index, 1);\n      }\n\n      break;\n    }\n  }\n\n  return this;\n};\n\nEngine.prototype._renderViews = function () {\n  if (!this.views) {\n    return false;\n  }\n\n  var parent = this.getRenderingCanvas();\n\n  if (!parent) {\n    return false;\n  }\n\n  for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n    var view = _a[_i];\n    var canvas = view.target;\n    var context = canvas.getContext(\"2d\");\n\n    if (!context) {\n      continue;\n    }\n\n    var camera = view.camera;\n    var previewCamera = null;\n    var scene = null;\n\n    if (camera) {\n      scene = camera.getScene();\n\n      if (scene.activeCameras && scene.activeCameras.length) {\n        continue;\n      }\n\n      this.activeView = view;\n      previewCamera = scene.activeCamera;\n      scene.activeCamera = camera;\n    } // Set sizes\n\n\n    var dimsChanged = canvas.width !== canvas.clientWidth || canvas.height !== canvas.clientHeight;\n\n    if (canvas.clientWidth && canvas.clientHeight && dimsChanged) {\n      canvas.width = canvas.clientWidth;\n      canvas.height = canvas.clientHeight;\n      parent.width = canvas.clientWidth;\n      parent.height = canvas.clientHeight;\n      this.resize();\n    }\n\n    if (!parent.width || !parent.height) {\n      return false;\n    } // Render the frame\n\n\n    this._renderFrame(); // Copy to target\n\n\n    context.drawImage(parent, 0, 0); // Restore\n\n    if (previewCamera && scene) {\n      scene.activeCamera = previewCamera;\n    }\n  }\n\n  this.activeView = null;\n  return true;\n};","map":null,"metadata":{},"sourceType":"module"}