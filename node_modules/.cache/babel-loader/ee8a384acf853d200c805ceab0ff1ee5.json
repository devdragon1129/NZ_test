{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents\";\nimport { Vector3 } from \"../../Maths/math.vector\";\nimport { Tools } from \"../../Misc/tools\";\n/**\r\n * Manage the keyboard inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar FreeCameraKeyboardMoveInput =\n/** @class */\nfunction () {\n  function FreeCameraKeyboardMoveInput() {\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the forward move of the camera.\r\n     */\n    this.keysUp = [38];\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the upward move of the camera.\r\n     */\n\n    this.keysUpward = [33];\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the backward move of the camera.\r\n     */\n\n    this.keysDown = [40];\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the downward move of the camera.\r\n     */\n\n    this.keysDownward = [34];\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the left strafe move of the camera.\r\n     */\n\n    this.keysLeft = [37];\n    /**\r\n     * Gets or Set the list of keyboard keys used to control the right strafe move of the camera.\r\n     */\n\n    this.keysRight = [39];\n    this._keys = new Array();\n  }\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  FreeCameraKeyboardMoveInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this;\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    if (this._onCanvasBlurObserver) {\n      return;\n    }\n\n    this._scene = this.camera.getScene();\n    this._engine = this._scene.getEngine();\n    this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(function () {\n      _this._keys = [];\n    });\n    this._onKeyboardObserver = this._scene.onKeyboardObservable.add(function (info) {\n      var evt = info.event;\n\n      if (!evt.metaKey) {\n        if (info.type === KeyboardEventTypes.KEYDOWN) {\n          if (_this.keysUp.indexOf(evt.keyCode) !== -1 || _this.keysDown.indexOf(evt.keyCode) !== -1 || _this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1 || _this.keysUpward.indexOf(evt.keyCode) !== -1 || _this.keysDownward.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index === -1) {\n              _this._keys.push(evt.keyCode);\n            }\n\n            if (!noPreventDefault) {\n              evt.preventDefault();\n            }\n          }\n        } else {\n          if (_this.keysUp.indexOf(evt.keyCode) !== -1 || _this.keysDown.indexOf(evt.keyCode) !== -1 || _this.keysLeft.indexOf(evt.keyCode) !== -1 || _this.keysRight.indexOf(evt.keyCode) !== -1 || _this.keysUpward.indexOf(evt.keyCode) !== -1 || _this.keysDownward.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index >= 0) {\n              _this._keys.splice(index, 1);\n            }\n\n            if (!noPreventDefault) {\n              evt.preventDefault();\n            }\n          }\n        }\n      }\n    });\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  FreeCameraKeyboardMoveInput.prototype.detachControl = function (ignored) {\n    if (this._scene) {\n      if (this._onKeyboardObserver) {\n        this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n      }\n\n      if (this._onCanvasBlurObserver) {\n        this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n      }\n\n      this._onKeyboardObserver = null;\n      this._onCanvasBlurObserver = null;\n    }\n\n    this._keys = [];\n  };\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\n\n\n  FreeCameraKeyboardMoveInput.prototype.checkInputs = function () {\n    if (this._onKeyboardObserver) {\n      var camera = this.camera; // Keyboard\n\n      for (var index = 0; index < this._keys.length; index++) {\n        var keyCode = this._keys[index];\n\n        var speed = camera._computeLocalCameraSpeed();\n\n        if (this.keysLeft.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(-speed, 0, 0);\n        } else if (this.keysUp.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, 0, speed);\n        } else if (this.keysRight.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(speed, 0, 0);\n        } else if (this.keysDown.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, 0, -speed);\n        } else if (this.keysUpward.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, speed, 0);\n        } else if (this.keysDownward.indexOf(keyCode) !== -1) {\n          camera._localDirection.copyFromFloats(0, -speed, 0);\n        }\n\n        if (camera.getScene().useRightHandedSystem) {\n          camera._localDirection.z *= -1;\n        }\n\n        camera.getViewMatrix().invertToRef(camera._cameraTransformMatrix);\n        Vector3.TransformNormalToRef(camera._localDirection, camera._cameraTransformMatrix, camera._transformedDirection);\n        camera.cameraDirection.addInPlace(camera._transformedDirection);\n      }\n    }\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  FreeCameraKeyboardMoveInput.prototype.getClassName = function () {\n    return \"FreeCameraKeyboardMoveInput\";\n  };\n  /** @hidden */\n\n\n  FreeCameraKeyboardMoveInput.prototype._onLostFocus = function () {\n    this._keys = [];\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  FreeCameraKeyboardMoveInput.prototype.getSimpleName = function () {\n    return \"keyboard\";\n  };\n\n  __decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysUp\", void 0);\n\n  __decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysUpward\", void 0);\n\n  __decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysDown\", void 0);\n\n  __decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysDownward\", void 0);\n\n  __decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysLeft\", void 0);\n\n  __decorate([serialize()], FreeCameraKeyboardMoveInput.prototype, \"keysRight\", void 0);\n\n  return FreeCameraKeyboardMoveInput;\n}();\n\nexport { FreeCameraKeyboardMoveInput };\nCameraInputTypes[\"FreeCameraKeyboardMoveInput\"] = FreeCameraKeyboardMoveInput;","map":null,"metadata":{},"sourceType":"module"}