{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar dataType_1 = require(\"../../compile/validate/dataType\");\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar util_1 = require(\"../../compile/util\");\n\nvar equal_1 = require(\"../../runtime/equal\");\n\nvar error = {\n  message: function message(_ref) {\n    var _ref$params = _ref.params,\n        i = _ref$params.i,\n        j = _ref$params.j;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must NOT have duplicate items (items ## \", \" and \", \" are identical)\"])), j, i);\n  },\n  params: function params(_ref2) {\n    var _ref2$params = _ref2.params,\n        i = _ref2$params.i,\n        j = _ref2$params.j;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{i: \", \", j: \", \"}\"])), i, j);\n  }\n};\nvar def = {\n  keyword: \"uniqueItems\",\n  type: \"array\",\n  schemaType: \"boolean\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var gen = cxt.gen,\n        data = cxt.data,\n        $data = cxt.$data,\n        schema = cxt.schema,\n        parentSchema = cxt.parentSchema,\n        schemaCode = cxt.schemaCode,\n        it = cxt.it;\n    if (!$data && !schema) return;\n    var valid = gen.let(\"valid\");\n    var itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];\n    cxt.block$data(valid, validateUniqueItems, (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \" === false\"])), schemaCode));\n    cxt.ok(valid);\n\n    function validateUniqueItems() {\n      var i = gen.let(\"i\", (0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \".length\"])), data));\n      var j = gen.let(\"j\");\n      cxt.setParams({\n        i: i,\n        j: j\n      });\n      gen.assign(valid, true);\n      gen.if((0, codegen_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \" > 1\"])), i), function () {\n        return (canOptimize() ? loopN : loopN2)(i, j);\n      });\n    }\n\n    function canOptimize() {\n      return itemTypes.length > 0 && !itemTypes.some(function (t) {\n        return t === \"object\" || t === \"array\";\n      });\n    }\n\n    function loopN(i, j) {\n      var item = gen.name(\"item\");\n      var wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);\n      var indices = gen.const(\"indices\", (0, codegen_1._)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"{}\"]))));\n      gen.for((0, codegen_1._)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\";\", \"--;\"])), i), function () {\n        gen.let(item, (0, codegen_1._)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\", \"[\", \"]\"])), data, i));\n        gen.if(wrongType, (0, codegen_1._)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"continue\"]))));\n        if (itemTypes.length > 1) gen.if((0, codegen_1._)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"typeof \", \" == \\\"string\\\"\"])), item), (0, codegen_1._)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([\"\", \" += \\\"_\\\"\"])), item));\n        gen.if((0, codegen_1._)(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([\"typeof \", \"[\", \"] == \\\"number\\\"\"])), indices, item), function () {\n          gen.assign(j, (0, codegen_1._)(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral([\"\", \"[\", \"]\"])), indices, item));\n          cxt.error();\n          gen.assign(valid, false).break();\n        }).code((0, codegen_1._)(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral([\"\", \"[\", \"] = \", \"\"])), indices, item, i));\n      });\n    }\n\n    function loopN2(i, j) {\n      var eql = (0, util_1.useFunc)(gen, equal_1.default);\n      var outer = gen.name(\"outer\");\n      gen.label(outer).for((0, codegen_1._)(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral([\";\", \"--;\"])), i), function () {\n        return gen.for((0, codegen_1._)(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral([\"\", \" = \", \"; \", \"--;\"])), j, i, j), function () {\n          return gen.if((0, codegen_1._)(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral([\"\", \"(\", \"[\", \"], \", \"[\", \"])\"])), eql, data, i, data, j), function () {\n            cxt.error();\n            gen.assign(valid, false).break(outer);\n          });\n        });\n      });\n    }\n  }\n};\nexports.default = def;","map":null,"metadata":{},"sourceType":"script"}