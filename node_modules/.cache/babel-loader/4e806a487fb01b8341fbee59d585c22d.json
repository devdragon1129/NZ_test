{"ast":null,"code":"import { connect } from 'react-redux';\nimport { goBack, push } from 'connected-react-router';\nimport { getCurrentProject } from 'modules/project/selectors';\nimport { getActivePoolGroup } from 'modules/poolGroup/selectors';\nimport { getGizmo, isPreviewing, isSidebarOpen, getSelectedEntityIds, isLoading, isReady, getEnabledTools } from 'modules/editor/selectors';\nimport { openModal } from 'modules/modal/actions';\nimport { setGizmo, togglePreview, toggleSidebar } from 'modules/editor/actions';\nimport { resetItem, duplicateItem, deleteItem } from 'modules/scene/actions';\nimport { getCurrentMetrics } from 'modules/scene/selectors';\nimport { isSavingCurrentProject } from 'modules/sync/selectors';\nimport TopBar from './TopBar';\nimport { hasHistory } from 'modules/location/selectors';\n\nvar mapState = function mapState(state) {\n  return {\n    gizmo: getGizmo(state),\n    currentProject: getCurrentProject(state),\n    currentPoolGroup: getActivePoolGroup(state),\n    metrics: getCurrentMetrics(state),\n    selectedEntityIds: getSelectedEntityIds(state),\n    isLoading: !isReady(state) || isLoading(state),\n    isPreviewing: isPreviewing(state),\n    isUploading: isSavingCurrentProject(state),\n    isSidebarOpen: isSidebarOpen(state),\n    enabledTools: getEnabledTools(state),\n    hasHistory: hasHistory(state)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onSetGizmo: function onSetGizmo(gizmo) {\n      return dispatch(setGizmo(gizmo));\n    },\n    onTogglePreview: function onTogglePreview(enabled) {\n      return dispatch(togglePreview(enabled));\n    },\n    onToggleSidebar: function onToggleSidebar(enabled) {\n      return dispatch(toggleSidebar(enabled));\n    },\n    onReset: function onReset() {\n      return dispatch(resetItem());\n    },\n    onDuplicate: function onDuplicate() {\n      return dispatch(duplicateItem());\n    },\n    onDelete: function onDelete() {\n      return dispatch(deleteItem());\n    },\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    },\n    onBack: function onBack() {\n      return dispatch(goBack());\n    },\n    onNavigate: function onNavigate(path) {\n      return dispatch(push(path));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(TopBar);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/TopBar/TopBar.container.ts"],"names":["connect","goBack","push","getCurrentProject","getActivePoolGroup","getGizmo","isPreviewing","isSidebarOpen","getSelectedEntityIds","isLoading","isReady","getEnabledTools","openModal","setGizmo","togglePreview","toggleSidebar","resetItem","duplicateItem","deleteItem","getCurrentMetrics","isSavingCurrentProject","TopBar","hasHistory","mapState","state","gizmo","currentProject","currentPoolGroup","metrics","selectedEntityIds","isUploading","enabledTools","mapDispatch","dispatch","onSetGizmo","onTogglePreview","enabled","onToggleSidebar","onReset","onDuplicate","onDelete","onOpenModal","name","metadata","onBack","onNavigate","path"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux'\nimport { goBack, push } from 'connected-react-router'\nimport { RootState } from 'modules/common/types'\nimport { getCurrentProject } from 'modules/project/selectors'\nimport { getActivePoolGroup } from 'modules/poolGroup/selectors'\nimport { getGizmo, isPreviewing, isSidebarOpen, getSelectedEntityIds, isLoading, isReady, getEnabledTools } from 'modules/editor/selectors'\nimport { openModal } from 'modules/modal/actions'\nimport { setGizmo, togglePreview, toggleSidebar } from 'modules/editor/actions'\nimport { resetItem, duplicateItem, deleteItem } from 'modules/scene/actions'\nimport { getCurrentMetrics } from 'modules/scene/selectors'\nimport { isSavingCurrentProject } from 'modules/sync/selectors'\nimport { MapStateProps, MapDispatchProps, MapDispatch } from './TopBar.types'\nimport TopBar from './TopBar'\nimport { hasHistory } from 'modules/location/selectors'\n\nconst mapState = (state: RootState): MapStateProps => ({\n  gizmo: getGizmo(state),\n  currentProject: getCurrentProject(state),\n  currentPoolGroup: getActivePoolGroup(state),\n  metrics: getCurrentMetrics(state),\n  selectedEntityIds: getSelectedEntityIds(state),\n  isLoading: !isReady(state) || isLoading(state),\n  isPreviewing: isPreviewing(state),\n  isUploading: isSavingCurrentProject(state),\n  isSidebarOpen: isSidebarOpen(state),\n  enabledTools: getEnabledTools(state),\n  hasHistory: hasHistory(state)\n})\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onSetGizmo: gizmo => dispatch(setGizmo(gizmo)),\n  onTogglePreview: enabled => dispatch(togglePreview(enabled)),\n  onToggleSidebar: enabled => dispatch(toggleSidebar(enabled)),\n  onReset: () => dispatch(resetItem()),\n  onDuplicate: () => dispatch(duplicateItem()),\n  onDelete: () => dispatch(deleteItem()),\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata)),\n  onBack: () => dispatch(goBack()),\n  onNavigate: path => dispatch(push(path))\n})\n\nexport default connect(mapState, mapDispatch)(TopBar)\n"]},"metadata":{},"sourceType":"module"}