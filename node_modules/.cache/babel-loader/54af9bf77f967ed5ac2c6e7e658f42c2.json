{"ast":null,"code":"import { connect } from 'react-redux';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getCollectionItems, getLoading as getLoadingItem } from 'modules/item/selectors';\nimport { getCollection } from 'modules/collection/selectors';\nimport { fetchCollectionItemsRequest, FETCH_COLLECTION_ITEMS_REQUEST, FETCH_ITEMS_REQUEST } from 'modules/item/actions';\nimport CollectionImage from './CollectionImage';\n\nvar mapState = function mapState(state, ownProps) {\n  var _getCollection;\n\n  var collectionId = ownProps.collectionId;\n  var itemCount = (_getCollection = getCollection(state, collectionId)) === null || _getCollection === void 0 ? void 0 : _getCollection.itemCount;\n  var items = getCollectionItems(state, collectionId);\n  var isLoading = !!getLoadingItem(state).find(function (action) {\n    return action.type === FETCH_COLLECTION_ITEMS_REQUEST && action.payload.collectionId === collectionId;\n  });\n  return {\n    items: items,\n    itemCount: itemCount,\n    isLoading: isLoadingType(getLoadingItem(state), FETCH_ITEMS_REQUEST) || isLoading\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onFetchCollectionItems: function onFetchCollectionItems(id, options) {\n      return dispatch(fetchCollectionItemsRequest(id, {\n        page: options === null || options === void 0 ? void 0 : options.page,\n        limit: options === null || options === void 0 ? void 0 : options.limit\n      }));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(CollectionImage);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/CollectionImage/CollectionImage.container.ts"],"names":["connect","isLoadingType","getCollectionItems","getLoading","getLoadingItem","getCollection","fetchCollectionItemsRequest","FETCH_COLLECTION_ITEMS_REQUEST","FETCH_ITEMS_REQUEST","CollectionImage","mapState","state","ownProps","collectionId","itemCount","items","isLoading","find","action","type","payload","mapDispatch","dispatch","onFetchCollectionItems","id","options","page","limit"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AAEA,SAASC,kBAAT,EAA6BC,UAAU,IAAIC,cAA3C,QAAiE,wBAAjE;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,2BAAT,EAAsCC,8BAAtC,EAAsEC,mBAAtE,QAAiG,sBAAjG;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAmBC,QAAnB,EAAyD;AAAA;;AAAA,MAChEC,YADgE,GAC/CD,QAD+C,CAChEC,YADgE;AAExE,MAAMC,SAAS,qBAAGT,aAAa,CAACM,KAAD,EAAQE,YAAR,CAAhB,mDAAG,eAAoCC,SAAtD;AACA,MAAMC,KAAK,GAAGb,kBAAkB,CAACS,KAAD,EAAQE,YAAR,CAAhC;AACA,MAAMG,SAAS,GAAG,CAAC,CAACZ,cAAc,CAACO,KAAD,CAAd,CAAsBM,IAAtB,CAClB,UAAAC,MAAM;AAAA,WAAIA,MAAM,CAACC,IAAP,KAAgBZ,8BAAhB,IAAkDW,MAAM,CAACE,OAAP,CAAeP,YAAf,KAAgCA,YAAtF;AAAA,GADY,CAApB;AAGA,SAAO;AACLE,IAAAA,KAAK,EAALA,KADK;AAELD,IAAAA,SAAS,EAATA,SAFK;AAGLE,IAAAA,SAAS,EAAEf,aAAa,CAACG,cAAc,CAACO,KAAD,CAAf,EAAwBH,mBAAxB,CAAb,IAA6DQ;AAHnE,GAAP;AAKD,CAZD;;AAcA,IAAMK,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,sBAAsB,EAAE,gCAACC,EAAD,EAAKC,OAAL;AAAA,aAAiBH,QAAQ,CAAChB,2BAA2B,CAACkB,EAAD,EAAK;AAAEE,QAAAA,IAAI,EAAED,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEC,IAAjB;AAAuBC,QAAAA,KAAK,EAAEF,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEE;AAAvC,OAAL,CAA5B,CAAzB;AAAA;AADwC,GAA9C;AAAA,CAApB;;AAIA,eAAe3B,OAAO,CAACU,QAAD,EAAWW,WAAX,CAAP,CAA+BZ,eAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { RootState } from 'modules/common/types'\nimport { getCollectionItems, getLoading as getLoadingItem } from 'modules/item/selectors'\nimport { getCollection } from 'modules/collection/selectors'\nimport { fetchCollectionItemsRequest, FETCH_COLLECTION_ITEMS_REQUEST, FETCH_ITEMS_REQUEST } from 'modules/item/actions'\nimport { OwnProps, MapStateProps, MapDispatch, MapDispatchProps } from './CollectionImage.types'\nimport CollectionImage from './CollectionImage'\n\nconst mapState = (state: RootState, ownProps: OwnProps): MapStateProps => {\n  const { collectionId } = ownProps\n  const itemCount = getCollection(state, collectionId)?.itemCount\n  const items = getCollectionItems(state, collectionId)\n  const isLoading = !!getLoadingItem(state).find(\n    action => action.type === FETCH_COLLECTION_ITEMS_REQUEST && action.payload.collectionId === collectionId\n  )\n  return {\n    items,\n    itemCount,\n    isLoading: isLoadingType(getLoadingItem(state), FETCH_ITEMS_REQUEST) || isLoading\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onFetchCollectionItems: (id, options) => dispatch(fetchCollectionItemsRequest(id, { page: options?.page, limit: options?.limit }))\n})\n\nexport default connect(mapState, mapDispatch)(CollectionImage)\n"]},"metadata":{},"sourceType":"module"}