{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // The RLP format\n// Serialization and deserialization for the BytesTree type, under the following grammar:\n// | First byte | Meaning                                                                    |\n// | ---------- | -------------------------------------------------------------------------- |\n// | 0   to 127 | HEX(leaf)                                                                  |\n// | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |\n// | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |\n// | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |\n// | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |\n\nexports.encode = function (tree) {\n  var padEven = function padEven(str) {\n    return str.length % 2 === 0 ? str : '0' + str;\n  };\n\n  var uint = function uint(num) {\n    return padEven(num.toString(16));\n  };\n\n  var length = function length(len, add) {\n    return len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);\n  };\n\n  var dataTree = function dataTree(tree) {\n    if (typeof tree === 'string') {\n      var hex = tree.slice(2);\n      var pre = hex.length != 2 || hex >= '80' ? length(hex.length / 2, 128) : '';\n      return pre + hex;\n    } else {\n      var _hex = tree.map(dataTree).join('');\n\n      var _pre = length(_hex.length / 2, 192);\n\n      return _pre + _hex;\n    }\n  };\n\n  return '0x' + dataTree(tree);\n};\n\nexports.decode = function (hex) {\n  var i = 2;\n\n  var parseTree = function parseTree() {\n    if (i >= hex.length) throw '';\n    var head = hex.slice(i, i + 2);\n    return head < '80' ? (i += 2, '0x' + head) : head < 'c0' ? parseHex() : parseList();\n  };\n\n  var parseLength = function parseLength() {\n    var len = parseInt(hex.slice(i, i += 2), 16) % 64;\n    return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);\n  };\n\n  var parseHex = function parseHex() {\n    var len = parseLength();\n    return '0x' + hex.slice(i, i += len * 2);\n  };\n\n  var parseList = function parseList() {\n    var lim = parseLength() * 2 + i;\n    var list = [];\n\n    while (i < lim) {\n      list.push(parseTree());\n    }\n\n    return list;\n  };\n\n  try {\n    return parseTree();\n  } catch (e) {\n    return [];\n  }\n};\n\nexports.default = {\n  encode: exports.encode,\n  decode: exports.decode\n};","map":null,"metadata":{},"sourceType":"script"}