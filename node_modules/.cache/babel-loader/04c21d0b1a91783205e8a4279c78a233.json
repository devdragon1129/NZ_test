{"ast":null,"code":"import _slicedToArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toConsumableArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n// @ts-ignore\nimport Dockerfile from '!raw-loader!decentraland/samples/ecs/Dockerfile'; // @ts-ignore\n\nimport builderChannelRaw from 'raw-loader!decentraland-builder-scripts/lib/channel'; // @ts-ignore\n\nimport builderInventoryRaw from 'raw-loader!decentraland-builder-scripts/lib/inventory';\nimport * as ECS from 'decentraland-ecs';\nimport { SceneWriter, LightweightWriter } from 'dcl-scene-writer';\nimport packageJson from 'decentraland/samples/ecs/package.json';\nimport sceneJsonSample from 'decentraland/samples/ecs/scene.json';\nimport tsconfig from 'decentraland/samples/ecs/tsconfig.json';\nimport { ComponentType } from 'modules/scene/types';\nimport { getContentsStorageUrl } from 'lib/api/builder';\nimport { migrations } from 'modules/migrations/manifest';\nimport { reHashContent } from 'modules/deployment/contentUtils';\nimport { NO_CACHE_HEADERS } from 'lib/headers';\nimport { getParcelOrientation } from './utils';\nexport var MANIFEST_FILE_VERSION = Math.max.apply(Math, _toConsumableArray(Object.keys(migrations).map(function (version) {\n  return parseInt(version, 10);\n})));\n\nvar _communications = sceneJsonSample.communications,\n    _policy = sceneJsonSample.policy,\n    sceneWithoutOutdatedProperties = _objectWithoutProperties(sceneJsonSample, [\"communications\", \"policy\"]);\n\nvar sceneJson = sceneWithoutOutdatedProperties;\nexport var EXPORT_PATH;\n\n(function (EXPORT_PATH) {\n  EXPORT_PATH[\"MANIFEST_FILE\"] = \"builder.json\";\n  EXPORT_PATH[\"GAME_FILE\"] = \"src/game.ts\";\n  EXPORT_PATH[\"SCENE_FILE\"] = \"scene.json\";\n  EXPORT_PATH[\"PACKAGE_FILE\"] = \"package.json\";\n  EXPORT_PATH[\"DOCKER_FILE\"] = \"Dockerfile\";\n  EXPORT_PATH[\"DCLIGNORE_FILE\"] = \".dclignore\";\n  EXPORT_PATH[\"TSCONFIG_FILE\"] = \"tsconfig.json\";\n  EXPORT_PATH[\"BUNDLED_GAME_FILE\"] = \"bin/game.js\";\n  EXPORT_PATH[\"THUMBNAIL_FILE\"] = \"scene-thumbnail.png\";\n})(EXPORT_PATH || (EXPORT_PATH = {}));\n\nexport var SCRIPT_CONSTRUCTOR_NAME = 'Script';\nexport var SCRIPT_INSTANCE_NAME = 'script';\nexport function createFiles(_x) {\n  return _createFiles.apply(this, arguments);\n}\n\nfunction _createFiles() {\n  _createFiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(args) {\n    var _objectSpread2;\n\n    var project, scene, point, rotation, thumbnail, author, isDeploy, isEmpty, onProgress, files, gameFile;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            project = args.project, scene = args.scene, point = args.point, rotation = args.rotation, thumbnail = args.thumbnail, author = args.author, isDeploy = args.isDeploy, isEmpty = args.isEmpty, onProgress = args.onProgress;\n            _context.next = 3;\n            return downloadFiles({\n              scene: scene,\n              onProgress: onProgress,\n              isDeploy: isDeploy\n            });\n\n          case 3:\n            files = _context.sent;\n            _context.next = 6;\n            return createGameFile({\n              project: project,\n              scene: scene,\n              rotation: rotation\n            }, isDeploy);\n\n          case 6:\n            gameFile = _context.sent;\n            _context.t0 = _objectSpread;\n            _objectSpread2 = {};\n\n            _defineProperty(_objectSpread2, EXPORT_PATH.MANIFEST_FILE, JSON.stringify(createManifest(project, scene)));\n\n            _defineProperty(_objectSpread2, EXPORT_PATH.GAME_FILE, gameFile);\n\n            _defineProperty(_objectSpread2, EXPORT_PATH.BUNDLED_GAME_FILE, hasScripts(scene) ? createGameFileBundle(gameFile) : gameFile);\n\n            _context.t1 = _defineProperty;\n            _context.t2 = _objectSpread2;\n            _context.t3 = EXPORT_PATH.THUMBNAIL_FILE;\n            _context.next = 17;\n            return createThumbnailBlob(thumbnail);\n\n          case 17:\n            _context.t4 = _context.sent;\n            (0, _context.t1)(_context.t2, _context.t3, _context.t4);\n            _context.t5 = _objectSpread2;\n            _context.t6 = createDynamicFiles({\n              project: project,\n              scene: scene,\n              point: point,\n              rotation: rotation,\n              thumbnail: EXPORT_PATH.THUMBNAIL_FILE,\n              author: author,\n              isEmpty: isEmpty\n            });\n            _context.t7 = createStaticFiles();\n            _context.t8 = files;\n            return _context.abrupt(\"return\", (0, _context.t0)(_context.t5, _context.t6, _context.t7, _context.t8));\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createFiles.apply(this, arguments);\n}\n\nexport function createManifest(project, scene) {\n  return {\n    version: MANIFEST_FILE_VERSION,\n    project: project,\n    scene: scene\n  };\n}\nexport function createGameFile(_x2) {\n  return _createGameFile.apply(this, arguments);\n}\n\nfunction _createGameFile() {\n  _createGameFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(args) {\n    var isDeploy,\n        scene,\n        project,\n        rotation,\n        useLightweight,\n        Writer,\n        writer,\n        _project$layout,\n        cols,\n        rows,\n        sceneEntity,\n        size,\n        x,\n        y,\n        z,\n        transform,\n        componentToEntity,\n        _i,\n        _Object$values,\n        entity,\n        _iterator,\n        _step,\n        componentId,\n        components,\n        scripts,\n        hosts,\n        instances,\n        _i2,\n        _Object$values2,\n        component,\n        assetId,\n        asset,\n        url,\n        _data,\n        position,\n        _rotation,\n        scale,\n        _data2,\n        _assetId,\n        values,\n        _asset,\n        src,\n        entityId,\n        entityIdToName,\n        _i3,\n        _Object$values3,\n        _entity,\n        ecsEntity,\n        name,\n        _iterator2,\n        _step2,\n        _componentId,\n        _component,\n        code,\n        scriptLoader,\n        executeScripts,\n        assetIdToScriptName,\n        currentScript,\n        _i4,\n        _Array$from,\n        _ref5,\n        _ref4,\n        _assetId2,\n        _src,\n        scriptName,\n        hash,\n        _i5,\n        _Array$from2,\n        _ref8,\n        _ref7,\n        _assetId3,\n        script,\n        _iterator3,\n        _step3,\n        _ref10,\n        _entityId,\n        _assetId4,\n        _values,\n        _script,\n        host,\n        params,\n        builderScripts,\n        importScripts,\n        currentImport,\n        assetIdToConstructorName,\n        _i6,\n        _Array$from3,\n        _ref13,\n        _ref12,\n        _assetId5,\n        constructorName,\n        _executeScripts,\n        currentInstance,\n        _assetIdToScriptName,\n        _i7,\n        _Array$from4,\n        _ref16,\n        _ref15,\n        _assetId6,\n        _scriptName,\n        _i8,\n        _Array$from5,\n        _ref19,\n        _ref18,\n        _assetId7,\n        _script2,\n        _iterator4,\n        _step4,\n        _ref21,\n        _entityId2,\n        _assetId8,\n        _values2,\n        _script3,\n        _host,\n        _params,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            isDeploy = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : false;\n            scene = args.scene, project = args.project, rotation = args.rotation;\n            useLightweight = isDeploy && !hasScripts(scene);\n            Writer = useLightweight ? LightweightWriter : SceneWriter;\n            writer = new Writer(ECS, require('decentraland-ecs/types/dcl/decentraland-ecs.api'));\n            _project$layout = project.layout, cols = _project$layout.cols, rows = _project$layout.rows;\n            sceneEntity = new ECS.Entity(); // 0. Rotate scene\n\n            size = 16;\n            x = 0;\n            y = 0;\n            z = 0;\n            _context2.t0 = rotation;\n            _context2.next = _context2.t0 === 'north' ? 14 : _context2.t0 === 'east' ? 18 : _context2.t0 === 'south' ? 22 : _context2.t0 === 'west' ? 26 : 30;\n            break;\n\n          case 14:\n            y = -90;\n            x = cols * size;\n            z = 0;\n            return _context2.abrupt(\"break\", 30);\n\n          case 18:\n            y = 0;\n            x = 0;\n            z = 0;\n            return _context2.abrupt(\"break\", 30);\n\n          case 22:\n            y = 90;\n            x = 0;\n            z = rows * size;\n            return _context2.abrupt(\"break\", 30);\n\n          case 26:\n            y = 180;\n            x = rows * size;\n            z = cols * size;\n            return _context2.abrupt(\"break\", 30);\n\n          case 30:\n            transform = new ECS.Transform({\n              position: new ECS.Vector3(x, 0, z),\n              rotation: ECS.Quaternion.Euler(0, y, 0)\n            });\n            sceneEntity.addComponent(transform);\n            writer.addEntity('_scene', sceneEntity); // Map component ids to entity ids\n\n            componentToEntity = new Map();\n\n            for (_i = 0, _Object$values = Object.values(scene.entities); _i < _Object$values.length; _i++) {\n              entity = _Object$values[_i];\n              _iterator = _createForOfIteratorHelper(entity.components);\n\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  componentId = _step.value;\n                  componentToEntity.set(componentId, entity.id);\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n            } // 1. Create all components ands scripts\n\n\n            components = {};\n            scripts = new Map();\n            hosts = new Set();\n            instances = [];\n            _i2 = 0, _Object$values2 = Object.values(scene.components);\n\n          case 40:\n            if (!(_i2 < _Object$values2.length)) {\n              _context2.next = 68;\n              break;\n            }\n\n            component = _Object$values2[_i2];\n            _context2.t1 = component.type;\n            _context2.next = _context2.t1 === ComponentType.GLTFShape ? 45 : _context2.t1 === ComponentType.NFTShape ? 49 : _context2.t1 === ComponentType.Transform ? 52 : _context2.t1 === ComponentType.Script ? 55 : 63;\n            break;\n\n          case 45:\n            assetId = component.data.assetId;\n            asset = scene.assets[assetId];\n            components[component.id] = new ECS.GLTFShape(buildAssetPath(asset.id, asset.model));\n            return _context2.abrupt(\"break\", 65);\n\n          case 49:\n            url = component.data.url;\n            components[component.id] = new ECS.NFTShape(url);\n            return _context2.abrupt(\"break\", 65);\n\n          case 52:\n            _data = component.data, position = _data.position, _rotation = _data.rotation, scale = _data.scale;\n            components[component.id] = new ECS.Transform({\n              position: new ECS.Vector3(position.x, position.y, position.z),\n              rotation: new ECS.Quaternion(_rotation.x, _rotation.y, _rotation.z, _rotation.w),\n              scale: new ECS.Vector3(scale.x, scale.y, scale.z)\n            });\n            return _context2.abrupt(\"break\", 65);\n\n          case 55:\n            _data2 = component.data, _assetId = _data2.assetId, values = _data2.values;\n            _asset = scene.assets[_assetId];\n            src = _asset.contents[_asset.script];\n            scripts.set(_assetId, src);\n            entityId = componentToEntity.get(component.id);\n            hosts.add(entityId);\n            instances.push({\n              entityId: entityId,\n              assetId: _assetId,\n              values: values\n            });\n            return _context2.abrupt(\"break\", 65);\n\n          case 63:\n            console.warn(\"Could not compile component with id \\\"\".concat(component.id, \"\\\": Unknown type \\\"\").concat(component.type, \"\\\"\"));\n            return _context2.abrupt(\"break\", 65);\n\n          case 65:\n            _i2++;\n            _context2.next = 40;\n            break;\n\n          case 68:\n            // 2. Create all entities\n            entityIdToName = new Map();\n            _i3 = 0, _Object$values3 = Object.values(scene.entities);\n\n          case 70:\n            if (!(_i3 < _Object$values3.length)) {\n              _context2.next = 89;\n              break;\n            }\n\n            _entity = _Object$values3[_i3];\n            _context2.prev = 72;\n            ecsEntity = new ECS.Entity();\n            ecsEntity.setParent(sceneEntity);\n            name = _entity.name;\n            entityIdToName.set(_entity.id, name);\n            _iterator2 = _createForOfIteratorHelper(_entity.components);\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                _componentId = _step2.value;\n                _component = components[_componentId]; // placeholder gltfs and scripts are skipped\n\n                if (_component && !isScript(_componentId, scene) && !isPlaceholder(_componentId, scene)) {\n                  ecsEntity.addComponent(_component);\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n            writer.addEntity(name, ecsEntity);\n            _context2.next = 86;\n            break;\n\n          case 82:\n            _context2.prev = 82;\n            _context2.t2 = _context2[\"catch\"](72);\n            console.warn(_context2.t2.message);\n            return _context2.abrupt(\"continue\", 86);\n\n          case 86:\n            _i3++;\n            _context2.next = 70;\n            break;\n\n          case 89:\n            code = writer.emitCode(); // SCRIPTS SECTION\n\n            if (!(scripts.size > 0)) {\n              _context2.next = 143;\n              break;\n            }\n\n            if (!isDeploy) {\n              _context2.next = 125;\n              break;\n            }\n\n            scriptLoader = require('!raw-loader!../../ecsScene/remote-loader.js.raw'); // create executeScripts function\n\n            executeScripts = 'async function executeScripts() {';\n            assetIdToScriptName = new Map();\n            currentScript = 1; // setup channel\n\n            executeScripts += \"\\n\\tconst channelId = Math.random().toString(16).slice(2)\";\n            executeScripts += \"\\n\\tconst channelBus = new MessageBus()\";\n            executeScripts += \"\\n\";\n            executeScripts += \"\\n\\tconst inventory = createInventory(UICanvas, UIContainerStack, UIImage)\";\n            executeScripts += \"\\n\\tconst options = { inventory }\";\n            executeScripts += \"\\n\"; // instantiate all the scripts\n\n            _i4 = 0, _Array$from = Array.from(scripts);\n\n          case 103:\n            if (!(_i4 < _Array$from.length)) {\n              _context2.next = 117;\n              break;\n            }\n\n            _ref5 = _Array$from[_i4];\n            _ref4 = _slicedToArray(_ref5, 2);\n            _assetId2 = _ref4[0];\n            _src = _ref4[1];\n            scriptName = SCRIPT_INSTANCE_NAME + currentScript++;\n            assetIdToScriptName.set(_assetId2, scriptName);\n            _context2.next = 112;\n            return reHashContent(_src, EXPORT_PATH.BUNDLED_GAME_FILE);\n\n          case 112:\n            hash = _context2.sent;\n            executeScripts += \"\\n\\tconst \".concat(scriptName, \" = await getScriptInstance(\\\"\").concat(_assetId2, \"\\\", \\\"\").concat(hash, \"\\\")\");\n\n          case 114:\n            _i4++;\n            _context2.next = 103;\n            break;\n\n          case 117:\n            // initialize all the scripts\n            for (_i5 = 0, _Array$from2 = Array.from(scripts); _i5 < _Array$from2.length; _i5++) {\n              _ref8 = _Array$from2[_i5];\n              _ref7 = _slicedToArray(_ref8, 1);\n              _assetId3 = _ref7[0];\n              script = assetIdToScriptName.get(_assetId3);\n              executeScripts += \"\\n\\t\".concat(script, \".init(options)\");\n            } // spawn all the instances\n\n\n            _iterator3 = _createForOfIteratorHelper(instances);\n\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                _ref10 = _step3.value;\n                _entityId = _ref10.entityId;\n                _assetId4 = _ref10.assetId;\n                _values = _ref10.values;\n                _script = assetIdToScriptName.get(_assetId4);\n                host = entityIdToName.get(_entityId);\n                params = JSON.stringify(_values);\n                executeScripts += \"\\n\\t\".concat(_script, \".spawn(\").concat(host, \", \").concat(params, \", createChannel(channelId, \").concat(host, \", channelBus))\");\n              } // call function\n\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n\n            executeScripts += '\\n}\\nexecuteScripts()';\n            builderScripts = \"var exports = {}\\n\" + builderChannelRaw.replace(\"'use strict'\", \"''\") + \"\\n\" + builderInventoryRaw.replace(\"'use strict'\", \"''\");\n            code = builderScripts + '\\n\\n' + code + '\\n\\n' + scriptLoader + '\\n\\n' + executeScripts;\n            _context2.next = 143;\n            break;\n\n          case 125:\n            // import all the scripts\n            importScripts = '';\n            importScripts += \"import { createChannel } from '../node_modules/decentraland-builder-scripts/channel'\\n\";\n            importScripts += \"import { createInventory } from '../node_modules/decentraland-builder-scripts/inventory'\\n\";\n            currentImport = 1;\n            assetIdToConstructorName = new Map();\n\n            for (_i6 = 0, _Array$from3 = Array.from(scripts); _i6 < _Array$from3.length; _i6++) {\n              _ref13 = _Array$from3[_i6];\n              _ref12 = _slicedToArray(_ref13, 1);\n              _assetId5 = _ref12[0];\n              constructorName = SCRIPT_CONSTRUCTOR_NAME + currentImport++;\n              assetIdToConstructorName.set(_assetId5, constructorName);\n              importScripts += \"import \".concat(constructorName, \" from \\\"../\").concat(_assetId5, \"/src/item\\\"\\n\");\n            } // execute all the scripts\n\n\n            _executeScripts = '\\n'; // setup channel\n\n            _executeScripts += \"const channelId = Math.random().toString(16).slice(2)\\n\";\n            _executeScripts += \"const channelBus = new MessageBus()\\n\";\n            _executeScripts += \"const inventory = createInventory(UICanvas, UIContainerStack, UIImage)\\n\";\n            _executeScripts += \"const options = { inventory }\\n\";\n            currentInstance = 1;\n            _assetIdToScriptName = new Map(); // instantiate all the scripts\n\n            for (_i7 = 0, _Array$from4 = Array.from(scripts); _i7 < _Array$from4.length; _i7++) {\n              _ref16 = _Array$from4[_i7];\n              _ref15 = _slicedToArray(_ref16, 1);\n              _assetId6 = _ref15[0];\n              _scriptName = SCRIPT_INSTANCE_NAME + currentInstance++;\n\n              _assetIdToScriptName.set(_assetId6, _scriptName);\n\n              _executeScripts += \"\\nconst \".concat(_scriptName, \" = new \").concat(assetIdToConstructorName.get(_assetId6), \"()\");\n            } // initialize all the scripts\n\n\n            for (_i8 = 0, _Array$from5 = Array.from(scripts); _i8 < _Array$from5.length; _i8++) {\n              _ref19 = _Array$from5[_i8];\n              _ref18 = _slicedToArray(_ref19, 1);\n              _assetId7 = _ref18[0];\n              _script2 = _assetIdToScriptName.get(_assetId7);\n              _executeScripts += \"\\n\".concat(_script2, \".init(options)\");\n            } // spawn all the instances\n\n\n            _iterator4 = _createForOfIteratorHelper(instances);\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                _ref21 = _step4.value;\n                _entityId2 = _ref21.entityId;\n                _assetId8 = _ref21.assetId;\n                _values2 = _ref21.values;\n                _script3 = _assetIdToScriptName.get(_assetId8);\n                _host = entityIdToName.get(_entityId2);\n                _params = JSON.stringify(_values2);\n                _executeScripts += \"\\n\".concat(_script3, \".spawn(\").concat(_host, \", \").concat(_params, \", createChannel(channelId, \").concat(_host, \", channelBus))\");\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n\n            code = importScripts + code + _executeScripts;\n\n          case 143:\n            return _context2.abrupt(\"return\", code);\n\n          case 144:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[72, 82]]);\n  }));\n  return _createGameFile.apply(this, arguments);\n}\n\nexport function createGameFileBundle(gameFile) {\n  var ecs = require('!raw-loader!../../ecsScene/ecs.js.raw');\n\n  var amd = require('!raw-loader!../../ecsScene/amd-loader.js.raw');\n\n  var code = \"// ECS\\n\".concat(ecs, \"\\n// AMD\\n\").concat(amd, \"\\n// Builder generated code below\\n\").concat(gameFile);\n  return code;\n}\nexport function createStaticFiles() {\n  var _ref;\n\n  return _ref = {}, _defineProperty(_ref, EXPORT_PATH.DOCKER_FILE, Dockerfile), _defineProperty(_ref, EXPORT_PATH.DCLIGNORE_FILE, ['.*', 'package.json', 'package-lock.json', 'yarn-lock.json', 'build.json', 'export', 'tsconfig.json', 'tslint.json', 'node_modules', '*.ts', '*.tsx', 'Dockerfile', 'dist'].join('\\n')), _ref;\n}\nexport function downloadFiles(_x3) {\n  return _downloadFiles.apply(this, arguments);\n}\n\nfunction _downloadFiles() {\n  _downloadFiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(args) {\n    var scene, onProgress, isDeploy, mappings, files, progress, total, _i9, _Object$values4, asset, _i10, _Object$keys, path, localPath, remotePath, paths, promises, results, sourceFiles, _iterator5, _step5, sourceFile, namespace, nestedPaths, _i11, _Object$keys2, _path, relativePath, blob, text, _i12, _nestedPaths, _path2;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            scene = args.scene, onProgress = args.onProgress, isDeploy = args.isDeploy;\n            mappings = {};\n            files = {}; // Track progress\n\n            progress = 0;\n            total = 0; // Gather mappings\n\n            for (_i9 = 0, _Object$values4 = Object.values(scene.assets); _i9 < _Object$values4.length; _i9++) {\n              asset = _Object$values4[_i9];\n\n              for (_i10 = 0, _Object$keys = Object.keys(asset.contents); _i10 < _Object$keys.length; _i10++) {\n                path = _Object$keys[_i10];\n                localPath = buildAssetPath(asset.id, path);\n                remotePath = getContentsStorageUrl(asset.contents[path]);\n                mappings[localPath] = remotePath;\n              }\n            } // Download models\n\n\n            paths = Object.keys(mappings).filter(function (path) {\n              return isDeploy ? !path.endsWith('.ts') : !path.endsWith('.js');\n            });\n            total += paths.length;\n            onProgress({\n              loaded: progress,\n              total: total\n            });\n            promises = paths.map(function (path) {\n              var url = mappings[path];\n              return fetch(url, {\n                headers: NO_CACHE_HEADERS\n              }).then(function (resp) {\n                return resp.blob();\n              }).then(function (blob) {\n                progress++;\n                onProgress({\n                  loaded: progress,\n                  total: total\n                });\n                return {\n                  path: path,\n                  blob: blob\n                };\n              });\n            }); // Reduce results into a record of blobs\n\n            _context3.next = 12;\n            return Promise.all(promises);\n\n          case 12:\n            results = _context3.sent;\n            files = results.reduce(function (files, file) {\n              files[file.path] = file.blob;\n              return files;\n            }, {}); // namespace paths in source files\n\n            sourceFiles = Object.keys(files).filter(function (path) {\n              return path.endsWith('.ts');\n            });\n            _iterator5 = _createForOfIteratorHelper(sourceFiles);\n            _context3.prev = 16;\n\n            _iterator5.s();\n\n          case 18:\n            if ((_step5 = _iterator5.n()).done) {\n              _context3.next = 34;\n              break;\n            }\n\n            sourceFile = _step5.value;\n            // 1. Find the namespace (this is a uuid)\n            namespace = sourceFile.split('/')[0];\n\n            if (namespace) {\n              _context3.next = 24;\n              break;\n            }\n\n            console.warn(\"Namespace not found in source file \\\"\".concat(sourceFile, \"\\\"\"));\n            return _context3.abrupt(\"continue\", 32);\n\n          case 24:\n            // 2. Find all the mappings under that namespace, and remove the namespace\n            nestedPaths = [];\n\n            for (_i11 = 0, _Object$keys2 = Object.keys(files); _i11 < _Object$keys2.length; _i11++) {\n              _path = _Object$keys2[_i11];\n\n              if (_path.startsWith(namespace + '/')) {\n                relativePath = _path.split(namespace + '/').pop();\n                nestedPaths.push(relativePath);\n              }\n            } // 3. Convert the blob to text\n\n\n            blob = files[sourceFile];\n            _context3.next = 29;\n            return new Response(blob).text();\n\n          case 29:\n            text = _context3.sent;\n\n            // 4. Replace all paths with their namespaced path\n            for (_i12 = 0, _nestedPaths = nestedPaths; _i12 < _nestedPaths.length; _i12++) {\n              _path2 = _nestedPaths[_i12];\n              text = text.replace(new RegExp(_path2, 'g'), \"\".concat(namespace, \"/\").concat(_path2));\n            } // 5. Convert text to blob\n\n\n            files[sourceFile] = new Blob([text], {\n              type: 'text/plain'\n            });\n\n          case 32:\n            _context3.next = 18;\n            break;\n\n          case 34:\n            _context3.next = 39;\n            break;\n\n          case 36:\n            _context3.prev = 36;\n            _context3.t0 = _context3[\"catch\"](16);\n\n            _iterator5.e(_context3.t0);\n\n          case 39:\n            _context3.prev = 39;\n\n            _iterator5.f();\n\n            return _context3.finish(39);\n\n          case 42:\n            return _context3.abrupt(\"return\", files);\n\n          case 43:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[16, 36, 39, 42]]);\n  }));\n  return _downloadFiles.apply(this, arguments);\n}\n\nexport function createDynamicFiles(args) {\n  var _files;\n\n  var project = args.project,\n      scene = args.scene,\n      rotation = args.rotation,\n      point = args.point,\n      thumbnail = args.thumbnail,\n      author = args.author,\n      isEmpty = args.isEmpty;\n  var files = (_files = {}, _defineProperty(_files, EXPORT_PATH.MANIFEST_FILE, JSON.stringify({\n    version: MANIFEST_FILE_VERSION,\n    project: project,\n    scene: scene\n  })), _defineProperty(_files, EXPORT_PATH.PACKAGE_FILE, JSON.stringify(_objectSpread({}, packageJson, {\n    name: project.id,\n    dependencies: _objectSpread({}, packageJson.devDependencies, {\n      'decentraland-builder-scripts': 'latest'\n    })\n  }), null, 2)), _defineProperty(_files, EXPORT_PATH.SCENE_FILE, JSON.stringify(getSceneDefinition(project, point, rotation, thumbnail, author, isEmpty), null, 2)), _defineProperty(_files, EXPORT_PATH.TSCONFIG_FILE, JSON.stringify(_objectSpread({}, tsconfig, {\n    include: tsconfig.include.concat(['./node_modules/decentraland-builder-scripts/types.d.ts'])\n  }), null, 2)), _files);\n  return files;\n}\nexport function getSceneDefinition(project, point, rotation, thumbnail, author, isEmpty) {\n  var parcels = getParcelOrientation(project.layout, point, rotation);\n  var base = parcels.reduce(function (base, parcel) {\n    return parcel.x <= base.x && parcel.y <= base.y ? parcel : base;\n  }, parcels[0]);\n\n  var sceneDefinition = _objectSpread({}, sceneJson, {\n    display: _objectSpread({}, sceneJson.display, {\n      title: project.title\n    }),\n    scene: _objectSpread({}, sceneJson.scene, {\n      parcels: parcels.map(parcelToString),\n      base: parcelToString(base)\n    }),\n    source: {\n      version: 1,\n      origin: 'builder',\n      projectId: project.id,\n      point: point,\n      rotation: rotation,\n      layout: project.layout\n    }\n  });\n\n  if (thumbnail) {\n    sceneDefinition.display.navmapThumbnail = thumbnail;\n  }\n\n  if (author) {\n    sceneDefinition.contact.name = author;\n  }\n\n  if (isEmpty) {\n    sceneDefinition.source.isEmpty = true;\n  }\n\n  return sceneDefinition;\n}\nexport function parcelToString(_ref2) {\n  var x = _ref2.x,\n      y = _ref2.y;\n  return x + ',' + y;\n}\nexport function isPlaceholder(componentId, scene) {\n  var component = scene.components[componentId];\n\n  if (component && component.type === ComponentType.GLTFShape) {\n    var entity = Object.values(scene.entities).find(function (entity) {\n      return entity.components.some(function (id) {\n        return id === componentId;\n      });\n    });\n\n    if (entity) {\n      var isHost = entity.components.some(function (id) {\n        return scene.components[id].type === ComponentType.Script;\n      });\n      return isHost;\n    }\n  }\n\n  return false;\n}\nexport function isScript(componentId, scene) {\n  var component = scene.components[componentId];\n  return component && component.type === ComponentType.Script;\n}\nexport function hasScripts(scene) {\n  return Object.values(scene.components).some(function (component) {\n    return component.type === ComponentType.Script;\n  });\n}\n\nfunction createThumbnailBlob(_x4) {\n  return _createThumbnailBlob.apply(this, arguments);\n}\n\nfunction _createThumbnailBlob() {\n  _createThumbnailBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(thumbnail) {\n    var resp, blob;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!thumbnail) {\n              _context4.next = 14;\n              break;\n            }\n\n            _context4.prev = 1;\n            _context4.next = 4;\n            return fetch(thumbnail, {\n              headers: NO_CACHE_HEADERS\n            });\n\n          case 4:\n            resp = _context4.sent;\n            _context4.next = 7;\n            return resp.blob();\n\n          case 7:\n            blob = _context4.sent;\n            return _context4.abrupt(\"return\", blob);\n\n          case 11:\n            _context4.prev = 11;\n            _context4.t0 = _context4[\"catch\"](1);\n            console.error(_context4.t0.message);\n\n          case 14:\n            return _context4.abrupt(\"return\", new Blob([]));\n\n          case 15:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[1, 11]]);\n  }));\n  return _createThumbnailBlob.apply(this, arguments);\n}\n\nexport function buildAssetPath(namespace, path) {\n  return \"\".concat(namespace, \"/\").concat(path);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/project/export.ts"],"names":["Dockerfile","builderChannelRaw","builderInventoryRaw","ECS","SceneWriter","LightweightWriter","packageJson","sceneJsonSample","tsconfig","ComponentType","getContentsStorageUrl","migrations","reHashContent","NO_CACHE_HEADERS","getParcelOrientation","MANIFEST_FILE_VERSION","Math","max","Object","keys","map","version","parseInt","_communications","communications","_policy","policy","sceneWithoutOutdatedProperties","sceneJson","EXPORT_PATH","SCRIPT_CONSTRUCTOR_NAME","SCRIPT_INSTANCE_NAME","createFiles","args","project","scene","point","rotation","thumbnail","author","isDeploy","isEmpty","onProgress","downloadFiles","files","createGameFile","gameFile","MANIFEST_FILE","JSON","stringify","createManifest","GAME_FILE","BUNDLED_GAME_FILE","hasScripts","createGameFileBundle","THUMBNAIL_FILE","createThumbnailBlob","createDynamicFiles","createStaticFiles","useLightweight","Writer","writer","require","layout","cols","rows","sceneEntity","Entity","size","x","y","z","transform","Transform","position","Vector3","Quaternion","Euler","addComponent","addEntity","componentToEntity","Map","values","entities","entity","components","componentId","set","id","scripts","hosts","Set","instances","component","type","GLTFShape","NFTShape","Script","assetId","data","asset","assets","buildAssetPath","model","url","scale","w","src","contents","script","entityId","get","add","push","console","warn","entityIdToName","ecsEntity","setParent","name","isScript","isPlaceholder","message","code","emitCode","scriptLoader","executeScripts","assetIdToScriptName","currentScript","Array","from","scriptName","hash","host","params","builderScripts","replace","importScripts","currentImport","assetIdToConstructorName","constructorName","currentInstance","ecs","amd","DOCKER_FILE","DCLIGNORE_FILE","join","mappings","progress","total","path","localPath","remotePath","paths","filter","endsWith","length","loaded","promises","fetch","headers","then","resp","blob","Promise","all","results","reduce","file","sourceFiles","sourceFile","namespace","split","nestedPaths","startsWith","relativePath","pop","Response","text","RegExp","Blob","PACKAGE_FILE","dependencies","devDependencies","SCENE_FILE","getSceneDefinition","TSCONFIG_FILE","include","concat","parcels","base","parcel","sceneDefinition","display","title","parcelToString","source","origin","projectId","navmapThumbnail","contact","find","some","isHost","error"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport Dockerfile from '!raw-loader!decentraland/samples/ecs/Dockerfile'\n// @ts-ignore\nimport builderChannelRaw from 'raw-loader!decentraland-builder-scripts/lib/channel'\n// @ts-ignore\nimport builderInventoryRaw from 'raw-loader!decentraland-builder-scripts/lib/inventory'\nimport * as ECS from 'decentraland-ecs'\nimport { SceneWriter, LightweightWriter } from 'dcl-scene-writer'\nimport packageJson from 'decentraland/samples/ecs/package.json'\nimport sceneJsonSample from 'decentraland/samples/ecs/scene.json'\nimport tsconfig from 'decentraland/samples/ecs/tsconfig.json'\nimport { Rotation, Coordinate, SceneDefinition } from 'modules/deployment/types'\nimport { Project, Manifest } from 'modules/project/types'\nimport { Scene, ComponentType, ComponentDefinition } from 'modules/scene/types'\nimport { getContentsStorageUrl } from 'lib/api/builder'\nimport { AssetParameterValues } from 'modules/asset/types'\nimport { migrations } from 'modules/migrations/manifest'\nimport { reHashContent } from 'modules/deployment/contentUtils'\nimport { NO_CACHE_HEADERS } from 'lib/headers'\nimport { getParcelOrientation } from './utils'\n\nexport const MANIFEST_FILE_VERSION = Math.max(...Object.keys(migrations).map(version => parseInt(version, 10)))\n\nconst { communications: _communications, policy: _policy, ...sceneWithoutOutdatedProperties } = sceneJsonSample\nconst sceneJson: SceneDefinition = sceneWithoutOutdatedProperties\n\nexport enum EXPORT_PATH {\n  MANIFEST_FILE = 'builder.json',\n  GAME_FILE = 'src/game.ts',\n  SCENE_FILE = 'scene.json',\n  PACKAGE_FILE = 'package.json',\n  DOCKER_FILE = 'Dockerfile',\n  DCLIGNORE_FILE = '.dclignore',\n  TSCONFIG_FILE = 'tsconfig.json',\n  BUNDLED_GAME_FILE = 'bin/game.js',\n  THUMBNAIL_FILE = 'scene-thumbnail.png'\n}\n\nexport type Mapping = {\n  localPath: string\n  remotePath: string\n}\n\nexport const SCRIPT_CONSTRUCTOR_NAME = 'Script'\nexport const SCRIPT_INSTANCE_NAME = 'script'\n\nexport async function createFiles(args: {\n  project: Project\n  scene: Scene\n  point: Coordinate\n  rotation: Rotation\n  thumbnail: string | null\n  author: string | null\n  isDeploy: boolean\n  isEmpty?: boolean\n  onProgress: (args: { loaded: number; total: number }) => void\n}) {\n  const { project, scene, point, rotation, thumbnail, author, isDeploy, isEmpty, onProgress } = args\n  const files = await downloadFiles({ scene, onProgress, isDeploy })\n  const gameFile = await createGameFile({ project, scene, rotation }, isDeploy)\n\n  return {\n    // @ts-ignore: 'builder.json' is specified more than once, but don't want to break anything\n    [EXPORT_PATH.MANIFEST_FILE]: JSON.stringify(createManifest(project, scene)),\n    [EXPORT_PATH.GAME_FILE]: gameFile,\n    [EXPORT_PATH.BUNDLED_GAME_FILE]: hasScripts(scene) ? createGameFileBundle(gameFile) : gameFile,\n    [EXPORT_PATH.THUMBNAIL_FILE]: await createThumbnailBlob(thumbnail),\n    ...createDynamicFiles({ project, scene, point, rotation, thumbnail: EXPORT_PATH.THUMBNAIL_FILE, author, isEmpty }),\n    ...createStaticFiles(),\n    ...files\n  }\n}\n\nexport function createManifest<T = Project>(project: T, scene: Scene): Manifest<T> {\n  return { version: MANIFEST_FILE_VERSION, project, scene }\n}\n\nexport async function createGameFile(args: { project: Project; scene: Scene; rotation: Rotation }, isDeploy = false) {\n  const { scene, project, rotation } = args\n  const useLightweight = isDeploy && !hasScripts(scene)\n  const Writer = useLightweight ? LightweightWriter : SceneWriter\n  const writer = new Writer(ECS, require('decentraland-ecs/types/dcl/decentraland-ecs.api'))\n  const { cols, rows } = project.layout\n  const sceneEntity = new ECS.Entity()\n\n  // 0. Rotate scene\n  const size = 16\n  let x = 0\n  let y = 0\n  let z = 0\n\n  switch (rotation) {\n    case 'north':\n      y = -90\n      x = cols * size\n      z = 0\n      break\n    case 'east':\n      y = 0\n      x = 0\n      z = 0\n      break\n    case 'south':\n      y = 90\n      x = 0\n      z = rows * size\n      break\n    case 'west':\n      y = 180\n      x = rows * size\n      z = cols * size\n      break\n  }\n  const transform = new ECS.Transform({\n    position: new ECS.Vector3(x, 0, z),\n    rotation: ECS.Quaternion.Euler(0, y, 0)\n  })\n  sceneEntity.addComponent(transform)\n  writer.addEntity('_scene', sceneEntity as any)\n\n  // Map component ids to entity ids\n  const componentToEntity = new Map<string, string>()\n  for (const entity of Object.values(scene.entities)) {\n    for (const componentId of entity.components) {\n      componentToEntity.set(componentId, entity.id)\n    }\n  }\n\n  // 1. Create all components ands scripts\n  const components: Record<string, object> = {}\n  const scripts = new Map<string, string>()\n  const hosts = new Set<string>()\n  const instances: { entityId: string; assetId: string; values: AssetParameterValues }[] = []\n  for (const component of Object.values(scene.components)) {\n    switch (component.type) {\n      case ComponentType.GLTFShape: {\n        const { assetId } = (component as ComponentDefinition<ComponentType.GLTFShape>).data\n        const asset = scene.assets[assetId]\n        components[component.id] = new ECS.GLTFShape(buildAssetPath(asset.id, asset.model))\n        break\n      }\n      case ComponentType.NFTShape: {\n        const { url } = (component as ComponentDefinition<ComponentType.NFTShape>).data\n        components[component.id] = new ECS.NFTShape(url)\n        break\n      }\n      case ComponentType.Transform: {\n        const { position, rotation, scale } = (component as ComponentDefinition<ComponentType.Transform>).data\n        components[component.id] = new ECS.Transform({\n          position: new ECS.Vector3(position.x, position.y, position.z),\n          rotation: new ECS.Quaternion(rotation.x, rotation.y, rotation.z, rotation.w),\n          scale: new ECS.Vector3(scale.x, scale.y, scale.z)\n        })\n        break\n      }\n      case ComponentType.Script: {\n        const { assetId, values } = (component as ComponentDefinition<ComponentType.Script>).data\n        const asset = scene.assets[assetId]\n        const src = asset.contents[asset.script!]\n        scripts.set(assetId, src)\n        const entityId = componentToEntity.get(component.id)!\n        hosts.add(entityId)\n        instances.push({ entityId, assetId, values })\n        break\n      }\n      default: {\n        console.warn(`Could not compile component with id \"${component.id}\": Unknown type \"${component.type}\"`)\n        break\n      }\n    }\n  }\n\n  // 2. Create all entities\n  const entityIdToName = new Map<string, string>()\n  for (const entity of Object.values(scene.entities)) {\n    try {\n      const ecsEntity = new ECS.Entity()\n      ecsEntity.setParent(sceneEntity)\n\n      const { name } = entity\n      entityIdToName.set(entity.id, name)\n\n      for (const componentId of entity.components) {\n        const component = components[componentId]\n        // placeholder gltfs and scripts are skipped\n        if (component && !isScript(componentId, scene) && !isPlaceholder(componentId, scene)) {\n          ecsEntity.addComponent(component)\n        }\n      }\n\n      writer.addEntity(name, ecsEntity as any)\n    } catch (e) {\n      console.warn(e.message)\n      continue\n    }\n  }\n\n  let code = writer.emitCode()\n\n  // SCRIPTS SECTION\n  if (scripts.size > 0) {\n    if (isDeploy) {\n      const scriptLoader: string = require('!raw-loader!../../ecsScene/remote-loader.js.raw')\n\n      // create executeScripts function\n      let executeScripts = 'async function executeScripts() {'\n      const assetIdToScriptName = new Map<string, string>()\n      let currentScript = 1\n\n      // setup channel\n      executeScripts += `\\n\\tconst channelId = Math.random().toString(16).slice(2)`\n      executeScripts += `\\n\\tconst channelBus = new MessageBus()`\n      executeScripts += `\\n`\n      executeScripts += `\\n\\tconst inventory = createInventory(UICanvas, UIContainerStack, UIImage)`\n      executeScripts += `\\n\\tconst options = { inventory }`\n      executeScripts += `\\n`\n\n      // instantiate all the scripts\n      for (const [assetId, src] of Array.from(scripts)) {\n        const scriptName = SCRIPT_INSTANCE_NAME + currentScript++\n        assetIdToScriptName.set(assetId, scriptName)\n        const hash = await reHashContent(src, EXPORT_PATH.BUNDLED_GAME_FILE)\n        executeScripts += `\\n\\tconst ${scriptName} = await getScriptInstance(\"${assetId}\", \"${hash}\")`\n      }\n      // initialize all the scripts\n      for (const [assetId] of Array.from(scripts)) {\n        const script = assetIdToScriptName.get(assetId)\n        executeScripts += `\\n\\t${script}.init(options)`\n      }\n      // spawn all the instances\n      for (const { entityId, assetId, values } of instances) {\n        const script = assetIdToScriptName.get(assetId)\n        const host = entityIdToName.get(entityId)\n        const params = JSON.stringify(values)\n        executeScripts += `\\n\\t${script}.spawn(${host}, ${params}, createChannel(channelId, ${host}, channelBus))`\n      }\n      // call function\n      executeScripts += '\\n}\\nexecuteScripts()'\n\n      const builderScripts =\n        `var exports = {}\\n` + builderChannelRaw.replace(`'use strict'`, `''`) + `\\n` + builderInventoryRaw.replace(`'use strict'`, `''`)\n\n      code = builderScripts + '\\n\\n' + code + '\\n\\n' + scriptLoader + '\\n\\n' + executeScripts\n    } else {\n      // import all the scripts\n      let importScripts = ''\n      importScripts += `import { createChannel } from '../node_modules/decentraland-builder-scripts/channel'\\n`\n      importScripts += `import { createInventory } from '../node_modules/decentraland-builder-scripts/inventory'\\n`\n      let currentImport = 1\n      const assetIdToConstructorName = new Map<string, string>()\n      for (const [assetId] of Array.from(scripts)) {\n        const constructorName = SCRIPT_CONSTRUCTOR_NAME + currentImport++\n        assetIdToConstructorName.set(assetId, constructorName)\n        importScripts += `import ${constructorName} from \"../${assetId}/src/item\"\\n`\n      }\n\n      // execute all the scripts\n      let executeScripts = '\\n'\n\n      // setup channel\n      executeScripts += `const channelId = Math.random().toString(16).slice(2)\\n`\n      executeScripts += `const channelBus = new MessageBus()\\n`\n      executeScripts += `const inventory = createInventory(UICanvas, UIContainerStack, UIImage)\\n`\n      executeScripts += `const options = { inventory }\\n`\n\n      let currentInstance = 1\n      const assetIdToScriptName = new Map<string, string>()\n      // instantiate all the scripts\n      for (const [assetId] of Array.from(scripts)) {\n        const scriptName = SCRIPT_INSTANCE_NAME + currentInstance++\n        assetIdToScriptName.set(assetId, scriptName)\n        executeScripts += `\\nconst ${scriptName} = new ${assetIdToConstructorName.get(assetId)}()`\n      }\n      // initialize all the scripts\n      for (const [assetId] of Array.from(scripts)) {\n        const script = assetIdToScriptName.get(assetId)\n        executeScripts += `\\n${script}.init(options)`\n      }\n      // spawn all the instances\n      for (const { entityId, assetId, values } of instances) {\n        const script = assetIdToScriptName.get(assetId)\n        const host = entityIdToName.get(entityId)\n        const params = JSON.stringify(values)\n        executeScripts += `\\n${script}.spawn(${host}, ${params}, createChannel(channelId, ${host}, channelBus))`\n      }\n\n      code = importScripts + code + executeScripts\n    }\n  }\n\n  return code\n}\n\nexport function createGameFileBundle(gameFile: string): string {\n  const ecs = require('!raw-loader!../../ecsScene/ecs.js.raw')\n  const amd = require('!raw-loader!../../ecsScene/amd-loader.js.raw')\n  const code = `// ECS\n${ecs}\n// AMD\n${amd}\n// Builder generated code below\n${gameFile}`\n  return code\n}\n\nexport function createStaticFiles() {\n  return {\n    [EXPORT_PATH.DOCKER_FILE]: Dockerfile,\n    [EXPORT_PATH.DCLIGNORE_FILE]: [\n      '.*',\n      'package.json',\n      'package-lock.json',\n      'yarn-lock.json',\n      'build.json',\n      'export',\n      'tsconfig.json',\n      'tslint.json',\n      'node_modules',\n      '*.ts',\n      '*.tsx',\n      'Dockerfile',\n      'dist'\n    ].join('\\n')\n  }\n}\n\nexport async function downloadFiles(args: {\n  scene: Scene\n  onProgress: (args: { loaded: number; total: number }) => void\n  isDeploy: boolean\n}) {\n  const { scene, onProgress, isDeploy } = args\n  const mappings: Record<string, string> = {}\n\n  let files: Record<string, Blob> = {}\n\n  // Track progress\n  let progress = 0\n  let total = 0\n\n  // Gather mappings\n  for (const asset of Object.values(scene.assets)) {\n    for (const path of Object.keys(asset.contents)) {\n      const localPath = buildAssetPath(asset.id, path)\n      const remotePath = getContentsStorageUrl(asset.contents[path])\n      mappings[localPath] = remotePath\n    }\n  }\n\n  // Download models\n  const paths = Object.keys(mappings).filter(path => (isDeploy ? !path.endsWith('.ts') : !path.endsWith('.js')))\n  total += paths.length\n  onProgress({ loaded: progress, total })\n\n  const promises = paths.map(path => {\n    const url = mappings[path]\n    return fetch(url, { headers: NO_CACHE_HEADERS })\n      .then(resp => resp.blob())\n      .then(blob => {\n        progress++\n        onProgress({ loaded: progress, total })\n        return { path, blob }\n      })\n  })\n\n  // Reduce results into a record of blobs\n  const results = await Promise.all(promises)\n  files = results.reduce<Record<string, Blob>>((files, file) => {\n    files[file.path] = file.blob\n    return files\n  }, {})\n\n  // namespace paths in source files\n  const sourceFiles = Object.keys(files).filter(path => path.endsWith('.ts'))\n  for (const sourceFile of sourceFiles) {\n    // 1. Find the namespace (this is a uuid)\n    const namespace = sourceFile.split('/')[0]\n    if (!namespace) {\n      console.warn(`Namespace not found in source file \"${sourceFile}\"`)\n      continue\n    }\n\n    // 2. Find all the mappings under that namespace, and remove the namespace\n    const nestedPaths = []\n    for (const path of Object.keys(files)) {\n      if (path.startsWith(namespace + '/')) {\n        const relativePath = path.split(namespace + '/').pop()!\n        nestedPaths.push(relativePath)\n      }\n    }\n\n    // 3. Convert the blob to text\n    const blob = files[sourceFile]\n    let text = await new Response(blob).text()\n\n    // 4. Replace all paths with their namespaced path\n    for (const path of nestedPaths) {\n      text = text.replace(new RegExp(path, 'g'), `${namespace}/${path}`)\n    }\n\n    // 5. Convert text to blob\n    files[sourceFile] = new Blob([text], { type: 'text/plain' })\n  }\n\n  return files\n}\n\nexport function createDynamicFiles(args: {\n  project: Project\n  scene: Scene\n  point: Coordinate\n  rotation: Rotation\n  thumbnail: string | null\n  author: string | null\n  isEmpty?: boolean\n}) {\n  const { project, scene, rotation, point, thumbnail, author, isEmpty } = args\n\n  const files = {\n    [EXPORT_PATH.MANIFEST_FILE]: JSON.stringify({\n      version: MANIFEST_FILE_VERSION,\n      project,\n      scene\n    }),\n    [EXPORT_PATH.PACKAGE_FILE]: JSON.stringify(\n      {\n        ...packageJson,\n        name: project.id,\n        dependencies: {\n          ...packageJson.devDependencies,\n          'decentraland-builder-scripts': 'latest'\n        }\n      },\n      null,\n      2\n    ),\n    [EXPORT_PATH.SCENE_FILE]: JSON.stringify(getSceneDefinition(project, point, rotation, thumbnail, author, isEmpty), null, 2),\n    [EXPORT_PATH.TSCONFIG_FILE]: JSON.stringify(\n      {\n        ...tsconfig,\n        include: tsconfig.include.concat(['./node_modules/decentraland-builder-scripts/types.d.ts'])\n      },\n      null,\n      2\n    )\n  }\n\n  return files\n}\n\nexport function getSceneDefinition(\n  project: Project,\n  point: Coordinate,\n  rotation: Rotation,\n  thumbnail: string | null,\n  author: string | null,\n  isEmpty?: boolean\n) {\n  const parcels = getParcelOrientation(project.layout, point, rotation)\n  const base = parcels.reduce((base, parcel) => (parcel.x <= base.x && parcel.y <= base.y ? parcel : base), parcels[0])\n\n  const sceneDefinition: SceneDefinition = {\n    ...sceneJson,\n    display: {\n      ...sceneJson.display!,\n      title: project.title\n    },\n    scene: {\n      ...sceneJson.scene,\n      parcels: parcels.map(parcelToString),\n      base: parcelToString(base)\n    },\n    source: {\n      version: 1,\n      origin: 'builder',\n      projectId: project.id,\n      point,\n      rotation,\n      layout: project.layout\n    }\n  }\n\n  if (thumbnail) {\n    sceneDefinition.display!.navmapThumbnail = thumbnail\n  }\n\n  if (author) {\n    sceneDefinition.contact.name = author\n  }\n\n  if (isEmpty) {\n    sceneDefinition.source!.isEmpty = true\n  }\n\n  return sceneDefinition\n}\n\nexport function parcelToString({ x, y }: { x: number; y: number }) {\n  return x + ',' + y\n}\n\nexport function isPlaceholder(componentId: string, scene: Scene) {\n  const component = scene.components[componentId]\n  if (component && component.type === ComponentType.GLTFShape) {\n    const entity = Object.values(scene.entities).find(entity => entity.components.some(id => id === componentId))\n    if (entity) {\n      const isHost = entity.components.some(id => scene.components[id].type === ComponentType.Script)\n      return isHost\n    }\n  }\n  return false\n}\n\nexport function isScript(componentId: string, scene: Scene) {\n  const component = scene.components[componentId]\n  return component && component.type === ComponentType.Script\n}\n\nexport function hasScripts(scene: Scene) {\n  return Object.values(scene.components).some(component => component.type === ComponentType.Script)\n}\n\nasync function createThumbnailBlob(thumbnail: string | null) {\n  if (thumbnail) {\n    try {\n      const resp = await fetch(thumbnail, { headers: NO_CACHE_HEADERS })\n      const blob = await resp.blob()\n      return blob\n    } catch (error) {\n      console.error(error.message)\n    }\n  }\n  return new Blob([])\n}\n\nexport function buildAssetPath(namespace: string, path: string) {\n  return `${namespace}/${path}`\n}\n"]},"metadata":{},"sourceType":"module"}