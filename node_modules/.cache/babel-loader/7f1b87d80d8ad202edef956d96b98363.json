{"ast":null,"code":"import _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(entitySaga);\n\nimport { all, call, put, takeEvery } from 'redux-saga/effects';\nimport { EntityType } from 'dcl-catalyst-commons';\nimport { Authenticator } from 'dcl-crypto';\nimport { getIdentity } from 'modules/identity/utils';\nimport { deployEntitiesFailure, deployEntitiesSuccess, DEPLOY_ENTITIES_REQUEST, DEPLOY_ENTITIES_SUCCESS, fetchEntitiesByIdsFailure, fetchEntitiesByIdsRequest, fetchEntitiesByIdsSuccess, fetchEntitiesByPointersFailure, fetchEntitiesByPointersSuccess, FETCH_ENTITIES_BY_IDS_REQUEST, FETCH_ENTITIES_BY_POINTERS_REQUEST } from './actions';\nexport function entitySaga(catalyst) {\n  var _marked, _marked2, _marked3, _marked4, handleFetchEntitiesByPointersRequest, handleFetchEntitiesByIdsRequest, handleDeployEntitiesRequest, handleDeployEntitiesSuccess;\n\n  return _regeneratorRuntime.wrap(function entitySaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          handleDeployEntitiesSuccess = function _handleDeployEntities2(action) {\n            var ids;\n            return _regeneratorRuntime.wrap(function handleDeployEntitiesSuccess$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    ids = action.payload.entities.map(function (entity) {\n                      return entity.entityId;\n                    });\n\n                    if (!(ids.length > 0)) {\n                      _context4.next = 4;\n                      break;\n                    }\n\n                    _context4.next = 4;\n                    return put(fetchEntitiesByIdsRequest(EntityType.WEARABLE, ids));\n\n                  case 4:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _marked4);\n          };\n\n          handleDeployEntitiesRequest = function _handleDeployEntities(action) {\n            var entities, identity;\n            return _regeneratorRuntime.wrap(function handleDeployEntitiesRequest$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    entities = action.payload.entities;\n                    _context3.prev = 1;\n                    _context3.next = 4;\n                    return getIdentity();\n\n                  case 4:\n                    identity = _context3.sent;\n\n                    if (identity) {\n                      _context3.next = 7;\n                      break;\n                    }\n\n                    throw new Error('Invalid Identity');\n\n                  case 7:\n                    _context3.next = 9;\n                    return all(entities.map(function (entity) {\n                      return call([catalyst, 'deployEntity'], _objectSpread({}, entity, {\n                        authChain: Authenticator.signPayload(identity, entity.entityId)\n                      }));\n                    }));\n\n                  case 9:\n                    _context3.next = 11;\n                    return put(deployEntitiesSuccess(entities));\n\n                  case 11:\n                    _context3.next = 17;\n                    break;\n\n                  case 13:\n                    _context3.prev = 13;\n                    _context3.t0 = _context3[\"catch\"](1);\n                    _context3.next = 17;\n                    return put(deployEntitiesFailure(entities, _context3.t0.message));\n\n                  case 17:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _marked3, null, [[1, 13]]);\n          };\n\n          handleFetchEntitiesByIdsRequest = function _handleFetchEntitiesB2(action) {\n            var _action$payload2, type, ids, entities;\n\n            return _regeneratorRuntime.wrap(function handleFetchEntitiesByIdsRequest$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _action$payload2 = action.payload, type = _action$payload2.type, ids = _action$payload2.ids;\n                    _context2.prev = 1;\n                    _context2.next = 4;\n                    return call([catalyst, 'fetchEntitiesByIds'], type, ids);\n\n                  case 4:\n                    entities = _context2.sent;\n                    _context2.next = 7;\n                    return put(fetchEntitiesByIdsSuccess(type, ids, entities));\n\n                  case 7:\n                    _context2.next = 13;\n                    break;\n\n                  case 9:\n                    _context2.prev = 9;\n                    _context2.t0 = _context2[\"catch\"](1);\n                    _context2.next = 13;\n                    return put(fetchEntitiesByIdsFailure(type, ids, _context2.t0.message));\n\n                  case 13:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _marked2, null, [[1, 9]]);\n          };\n\n          handleFetchEntitiesByPointersRequest = function _handleFetchEntitiesB(action) {\n            var _action$payload, type, pointers, entities;\n\n            return _regeneratorRuntime.wrap(function handleFetchEntitiesByPointersRequest$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _action$payload = action.payload, type = _action$payload.type, pointers = _action$payload.pointers;\n                    _context.prev = 1;\n                    _context.next = 4;\n                    return call([catalyst, 'fetchEntitiesByPointers'], type, pointers);\n\n                  case 4:\n                    entities = _context.sent;\n                    _context.next = 7;\n                    return put(fetchEntitiesByPointersSuccess(type, pointers, entities));\n\n                  case 7:\n                    _context.next = 13;\n                    break;\n\n                  case 9:\n                    _context.prev = 9;\n                    _context.t0 = _context[\"catch\"](1);\n                    _context.next = 13;\n                    return put(fetchEntitiesByPointersFailure(type, pointers, _context.t0.message));\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _marked, null, [[1, 9]]);\n          };\n\n          _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchEntitiesByPointersRequest), _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchEntitiesByIdsRequest), _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleDeployEntitiesRequest), _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(handleDeployEntitiesSuccess);\n          _context5.next = 7;\n          return takeEvery(FETCH_ENTITIES_BY_POINTERS_REQUEST, handleFetchEntitiesByPointersRequest);\n\n        case 7:\n          _context5.next = 9;\n          return takeEvery(FETCH_ENTITIES_BY_IDS_REQUEST, handleFetchEntitiesByIdsRequest);\n\n        case 9:\n          _context5.next = 11;\n          return takeEvery(DEPLOY_ENTITIES_REQUEST, handleDeployEntitiesRequest);\n\n        case 11:\n          _context5.next = 13;\n          return takeEvery(DEPLOY_ENTITIES_SUCCESS, handleDeployEntitiesSuccess);\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/entity/sagas.ts"],"names":["entitySaga","all","call","put","takeEvery","EntityType","Authenticator","getIdentity","deployEntitiesFailure","deployEntitiesSuccess","DEPLOY_ENTITIES_REQUEST","DEPLOY_ENTITIES_SUCCESS","fetchEntitiesByIdsFailure","fetchEntitiesByIdsRequest","fetchEntitiesByIdsSuccess","fetchEntitiesByPointersFailure","fetchEntitiesByPointersSuccess","FETCH_ENTITIES_BY_IDS_REQUEST","FETCH_ENTITIES_BY_POINTERS_REQUEST","catalyst","handleFetchEntitiesByPointersRequest","handleFetchEntitiesByIdsRequest","handleDeployEntitiesRequest","handleDeployEntitiesSuccess","action","ids","payload","entities","map","entity","entityId","length","WEARABLE","identity","Error","authChain","signPayload","message","type","pointers"],"mappings":"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","sourcesContent":["import { all, call, put, takeEvery } from 'redux-saga/effects'\nimport { CatalystClient } from 'dcl-catalyst-client'\nimport { Entity, EntityType } from 'dcl-catalyst-commons'\nimport { Authenticator, AuthIdentity } from 'dcl-crypto'\nimport { getIdentity } from 'modules/identity/utils'\nimport {\n  deployEntitiesFailure,\n  DeployEntitiesRequestAction,\n  deployEntitiesSuccess,\n  DeployEntitiesSuccessAction,\n  DEPLOY_ENTITIES_REQUEST,\n  DEPLOY_ENTITIES_SUCCESS,\n  fetchEntitiesByIdsFailure,\n  fetchEntitiesByIdsRequest,\n  FetchEntitiesByIdsRequestAction,\n  fetchEntitiesByIdsSuccess,\n  fetchEntitiesByPointersFailure,\n  FetchEntitiesByPointersRequestAction,\n  fetchEntitiesByPointersSuccess,\n  FETCH_ENTITIES_BY_IDS_REQUEST,\n  FETCH_ENTITIES_BY_POINTERS_REQUEST\n} from './actions'\n\nexport function* entitySaga(catalyst: CatalystClient) {\n  // takes\n  yield takeEvery(FETCH_ENTITIES_BY_POINTERS_REQUEST, handleFetchEntitiesByPointersRequest)\n  yield takeEvery(FETCH_ENTITIES_BY_IDS_REQUEST, handleFetchEntitiesByIdsRequest)\n  yield takeEvery(DEPLOY_ENTITIES_REQUEST, handleDeployEntitiesRequest)\n  yield takeEvery(DEPLOY_ENTITIES_SUCCESS, handleDeployEntitiesSuccess)\n\n  // handlers\n  function* handleFetchEntitiesByPointersRequest(action: FetchEntitiesByPointersRequestAction) {\n    const { type, pointers } = action.payload\n    try {\n      const entities: Entity[] = yield call([catalyst, 'fetchEntitiesByPointers'], type, pointers)\n      yield put(fetchEntitiesByPointersSuccess(type, pointers, entities))\n    } catch (error) {\n      yield put(fetchEntitiesByPointersFailure(type, pointers, error.message))\n    }\n  }\n\n  function* handleFetchEntitiesByIdsRequest(action: FetchEntitiesByIdsRequestAction) {\n    const { type, ids } = action.payload\n    try {\n      const entities: Entity[] = yield call([catalyst, 'fetchEntitiesByIds'], type, ids)\n      yield put(fetchEntitiesByIdsSuccess(type, ids, entities))\n    } catch (error) {\n      yield put(fetchEntitiesByIdsFailure(type, ids, error.message))\n    }\n  }\n\n  function* handleDeployEntitiesRequest(action: DeployEntitiesRequestAction) {\n    const { entities } = action.payload\n    try {\n      const identity: AuthIdentity | undefined = yield getIdentity()\n\n      if (!identity) {\n        throw new Error('Invalid Identity')\n      }\n\n      yield all(\n        entities.map(entity =>\n          call([catalyst, 'deployEntity'], { ...entity, authChain: Authenticator.signPayload(identity, entity.entityId) })\n        )\n      )\n\n      yield put(deployEntitiesSuccess(entities))\n    } catch (error) {\n      yield put(deployEntitiesFailure(entities, error.message))\n    }\n  }\n\n  function* handleDeployEntitiesSuccess(action: DeployEntitiesSuccessAction) {\n    const ids = action.payload.entities.map(entity => entity.entityId)\n    if (ids.length > 0) {\n      yield put(fetchEntitiesByIdsRequest(EntityType.WEARABLE, ids))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}