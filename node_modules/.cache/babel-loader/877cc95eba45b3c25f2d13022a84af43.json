{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DeploymentFields = exports.ContentClient = void 0;\n\nvar hashing_1 = require(\"@dcl/hashing\");\n\nvar dcl_catalyst_commons_1 = require(\"dcl-catalyst-commons\");\n\nvar form_data_1 = __importDefault(require(\"form-data\"));\n\nvar DeploymentBuilder_1 = require(\"./utils/DeploymentBuilder\");\n\nvar Helper_1 = require(\"./utils/Helper\");\n\nvar ContentClient = /*#__PURE__*/function () {\n  function ContentClient(options) {\n    _classCallCheck(this, ContentClient);\n\n    this.KNOWN_HEADERS = ['Content-Type', 'Access-Control-Allow-Origin', 'Access-Control-Expose-Headers', 'ETag', 'Date', 'Content-Length', 'Cache-Control'];\n    this.contentUrl = (0, Helper_1.sanitizeUrl)(options.contentUrl);\n    this.fetcher = options.fetcher ? options.fetcher : new dcl_catalyst_commons_1.Fetcher({\n      headers: (0, Helper_1.getHeadersWithUserAgent)('content-client')\n    });\n    this.deploymentBuilderClass = options.deploymentBuilderClass ? options.deploymentBuilderClass : DeploymentBuilder_1.DeploymentBuilder;\n  }\n\n  _createClass(ContentClient, [{\n    key: \"buildEntityWithoutNewFiles\",\n    value: function () {\n      var _buildEntityWithoutNewFiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var type, pointers, hashesByKey, metadata, timestamp, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                type = _ref.type, pointers = _ref.pointers, hashesByKey = _ref.hashesByKey, metadata = _ref.metadata, timestamp = _ref.timestamp;\n                result = timestamp ? timestamp : Date.now();\n                return _context.abrupt(\"return\", this.deploymentBuilderClass.buildEntityWithoutNewFiles({\n                  type: type,\n                  pointers: pointers,\n                  hashesByKey: hashesByKey,\n                  metadata: metadata,\n                  timestamp: result,\n                  contentUrl: this.contentUrl\n                }));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function buildEntityWithoutNewFiles(_x) {\n        return _buildEntityWithoutNewFiles.apply(this, arguments);\n      }\n\n      return buildEntityWithoutNewFiles;\n    }()\n  }, {\n    key: \"buildEntity\",\n    value: function () {\n      var _buildEntity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n        var type, pointers, files, metadata, timestamp, result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                type = _ref2.type, pointers = _ref2.pointers, files = _ref2.files, metadata = _ref2.metadata, timestamp = _ref2.timestamp;\n                result = timestamp ? timestamp : Date.now();\n                return _context2.abrupt(\"return\", this.deploymentBuilderClass.buildEntity({\n                  type: type,\n                  pointers: pointers,\n                  files: files,\n                  metadata: metadata,\n                  timestamp: result\n                }));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function buildEntity(_x2) {\n        return _buildEntity.apply(this, arguments);\n      }\n\n      return buildEntity;\n    }()\n  }, {\n    key: \"buildEntityFormDataForDeployment\",\n    value: function () {\n      var _buildEntityFormDataForDeployment = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(deployData, options) {\n        var areWeRunningInNode, form, alreadyUploadedHashes, _iterator, _step, _step$value, fileHash, file;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // Check if we are running in node or browser\n                areWeRunningInNode = (0, Helper_1.isNode)();\n                form = new form_data_1.default();\n                form.append('entityId', deployData.entityId);\n                (0, Helper_1.addModelToFormData)(deployData.authChain, form, 'authChain');\n                _context3.next = 6;\n                return this.hashesAlreadyOnServer(Array.from(deployData.files.keys()), options);\n\n              case 6:\n                alreadyUploadedHashes = _context3.sent;\n                _iterator = _createForOfIteratorHelper(deployData.files);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _step$value = _slicedToArray(_step.value, 2), fileHash = _step$value[0], file = _step$value[1];\n\n                    if (!alreadyUploadedHashes.has(fileHash) || fileHash === deployData.entityId) {\n                      if (areWeRunningInNode) {\n                        // Node\n                        form.append(fileHash, Buffer.isBuffer(file) ? file : Buffer.from(arrayBufferFrom(file)), fileHash);\n                      } else {\n                        // Browser\n                        form.append(fileHash, new Blob([arrayBufferFrom(file)]), fileHash);\n                      }\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                return _context3.abrupt(\"return\", form);\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function buildEntityFormDataForDeployment(_x3, _x4) {\n        return _buildEntityFormDataForDeployment.apply(this, arguments);\n      }\n\n      return buildEntityFormDataForDeployment;\n    }()\n  }, {\n    key: \"deployEntity\",\n    value: function () {\n      var _deployEntity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(deployData) {\n        var fix,\n            options,\n            form,\n            requestOptions,\n            _yield$this$fetcher$p,\n            creationTimestamp,\n            _args4 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                fix = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : false;\n                options = _args4.length > 2 ? _args4[2] : undefined;\n                _context4.next = 4;\n                return this.buildEntityFormDataForDeployment(deployData, options);\n\n              case 4:\n                form = _context4.sent;\n                requestOptions = (0, dcl_catalyst_commons_1.mergeRequestOptions)(options ? options : {}, {\n                  body: form\n                });\n                _context4.next = 8;\n                return this.fetcher.postForm(\"\".concat(this.contentUrl, \"/entities\").concat(fix ? '?fix=true' : ''), requestOptions);\n\n              case 8:\n                _yield$this$fetcher$p = _context4.sent;\n                creationTimestamp = _yield$this$fetcher$p.creationTimestamp;\n                return _context4.abrupt(\"return\", creationTimestamp);\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function deployEntity(_x5) {\n        return _deployEntity.apply(this, arguments);\n      }\n\n      return deployEntity;\n    }()\n  }, {\n    key: \"fetchEntitiesByPointers\",\n    value: function fetchEntitiesByPointers(type, pointers, options) {\n      if (pointers.length === 0) {\n        return Promise.reject(\"You must set at least one pointer.\");\n      }\n\n      return (0, Helper_1.splitAndFetch)({\n        fetcher: this.fetcher,\n        baseUrl: this.contentUrl,\n        path: \"/entities/\".concat(type),\n        queryParams: {\n          name: 'pointer',\n          values: pointers\n        },\n        uniqueBy: 'id',\n        options: options\n      });\n    }\n  }, {\n    key: \"fetchEntitiesByIds\",\n    value: function fetchEntitiesByIds(type, ids, options) {\n      if (ids.length === 0) {\n        return Promise.reject(\"You must set at least one id.\");\n      }\n\n      return (0, Helper_1.splitAndFetch)({\n        fetcher: this.fetcher,\n        baseUrl: this.contentUrl,\n        path: \"/entities/\".concat(type),\n        queryParams: {\n          name: 'id',\n          values: ids\n        },\n        uniqueBy: 'id',\n        options: options\n      });\n    }\n  }, {\n    key: \"fetchEntityById\",\n    value: function () {\n      var _fetchEntityById = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(type, id, options) {\n        var entities;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.fetchEntitiesByIds(type, [id], options);\n\n              case 2:\n                entities = _context5.sent;\n\n                if (!(entities.length === 0)) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", Promise.reject(\"Failed to find an entity with type '\".concat(type, \"' and id '\").concat(id, \"'.\")));\n\n              case 5:\n                return _context5.abrupt(\"return\", entities[0]);\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function fetchEntityById(_x6, _x7, _x8) {\n        return _fetchEntityById.apply(this, arguments);\n      }\n\n      return fetchEntityById;\n    }()\n  }, {\n    key: \"fetchAuditInfo\",\n    value: function fetchAuditInfo(type, id, options) {\n      return this.fetchJson(\"/audit/\".concat(type, \"/\").concat(id), options);\n    }\n  }, {\n    key: \"fetchContentStatus\",\n    value: function fetchContentStatus(options) {\n      return this.fetchJson('/status', options);\n    }\n  }, {\n    key: \"downloadContent\",\n    value: function () {\n      var _downloadContent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(contentHash, options) {\n        var _this = this;\n\n        var _ref3, _ref3$attempts, attempts, _ref3$waitTime, waitTime, timeout;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _ref3 = options ? options : {}, _ref3$attempts = _ref3.attempts, attempts = _ref3$attempts === void 0 ? 3 : _ref3$attempts, _ref3$waitTime = _ref3.waitTime, waitTime = _ref3$waitTime === void 0 ? '0.5s' : _ref3$waitTime;\n                timeout = (options === null || options === void 0 ? void 0 : options.timeout) ? {\n                  timeout: options.timeout\n                } : {};\n                return _context7.abrupt(\"return\", (0, dcl_catalyst_commons_1.retry)( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n                  var content, downloadedHash;\n                  return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          _context6.next = 2;\n                          return _this.fetcher.fetchBuffer(\"\".concat(_this.contentUrl, \"/contents/\").concat(contentHash), timeout);\n\n                        case 2:\n                          content = _context6.sent;\n\n                          if (!contentHash.startsWith('Qm')) {\n                            _context6.next = 9;\n                            break;\n                          }\n\n                          _context6.next = 6;\n                          return (0, hashing_1.hashV0)(content);\n\n                        case 6:\n                          _context6.t0 = _context6.sent;\n                          _context6.next = 12;\n                          break;\n\n                        case 9:\n                          _context6.next = 11;\n                          return (0, hashing_1.hashV1)(content);\n\n                        case 11:\n                          _context6.t0 = _context6.sent;\n\n                        case 12:\n                          downloadedHash = _context6.t0;\n\n                          if (!(downloadedHash === contentHash)) {\n                            _context6.next = 15;\n                            break;\n                          }\n\n                          return _context6.abrupt(\"return\", content);\n\n                        case 15:\n                          throw new Error(\"Failed to fetch file with hash \".concat(contentHash, \" from \").concat(_this.contentUrl));\n\n                        case 16:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, _callee6);\n                })), attempts, waitTime));\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function downloadContent(_x9, _x10) {\n        return _downloadContent.apply(this, arguments);\n      }\n\n      return downloadContent;\n    }()\n  }, {\n    key: \"pipeContent\",\n    value: function () {\n      var _pipeContent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(contentHash, writeTo, options) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.t0 = this;\n                _context8.next = 3;\n                return this.fetcher.fetchPipe(\"\".concat(this.contentUrl, \"/contents/\").concat(contentHash), writeTo, options);\n\n              case 3:\n                _context8.t1 = _context8.sent;\n                return _context8.abrupt(\"return\", _context8.t0.onlyKnownHeaders.call(_context8.t0, _context8.t1));\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function pipeContent(_x11, _x12, _x13) {\n        return _pipeContent.apply(this, arguments);\n      }\n\n      return pipeContent;\n    }()\n  }, {\n    key: \"fixHeaderNameCase\",\n    value: function fixHeaderNameCase(headerName) {\n      return this.KNOWN_HEADERS.find(function (item) {\n        return item.toLowerCase() === headerName.toLowerCase();\n      });\n    }\n  }, {\n    key: \"onlyKnownHeaders\",\n    value: function onlyKnownHeaders(headersFromResponse) {\n      var _this2 = this;\n\n      var headers = new Map();\n      headersFromResponse === null || headersFromResponse === void 0 ? void 0 : headersFromResponse.forEach(function (headerValue, headerName) {\n        var fixedHeader = _this2.fixHeaderNameCase(headerName);\n\n        if (fixedHeader) {\n          headers.set(fixedHeader, headerValue);\n        }\n      });\n      return headers;\n    }\n  }, {\n    key: \"isContentAvailable\",\n    value: function isContentAvailable(cids, options) {\n      if (cids.length === 0) {\n        return Promise.reject(\"You must set at least one cid.\");\n      }\n\n      return (0, Helper_1.splitAndFetch)({\n        fetcher: this.fetcher,\n        baseUrl: this.contentUrl,\n        path: \"/available-content\",\n        queryParams: {\n          name: 'cid',\n          values: cids\n        },\n        uniqueBy: 'cid',\n        options: options\n      });\n    }\n  }, {\n    key: \"getContentUrl\",\n    value: function getContentUrl() {\n      return this.contentUrl;\n    }\n    /** Given an array of file hashes, return a set with those already uploaded on the server */\n\n  }, {\n    key: \"hashesAlreadyOnServer\",\n    value: function () {\n      var _hashesAlreadyOnServer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(hashes, options) {\n        var result, alreadyUploaded;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.isContentAvailable(hashes, options);\n\n              case 2:\n                result = _context9.sent;\n                alreadyUploaded = result.filter(function ($) {\n                  return $.available;\n                }).map(function (_ref5) {\n                  var cid = _ref5.cid;\n                  return cid;\n                });\n                return _context9.abrupt(\"return\", new Set(alreadyUploaded));\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function hashesAlreadyOnServer(_x14, _x15) {\n        return _hashesAlreadyOnServer.apply(this, arguments);\n      }\n\n      return hashesAlreadyOnServer;\n    }()\n  }, {\n    key: \"fetchJson\",\n    value: function fetchJson(path, options) {\n      return this.fetcher.fetchJson(\"\".concat(this.contentUrl).concat(path), options);\n    }\n  }]);\n\n  return ContentClient;\n}();\n\nexports.ContentClient = ContentClient; // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n//@ts-ignore\n\nvar DeploymentFields = /*#__PURE__*/function () {\n  function DeploymentFields(fields) {\n    _classCallCheck(this, DeploymentFields);\n\n    this.fields = fields;\n  }\n\n  _createClass(DeploymentFields, [{\n    key: \"getFields\",\n    value: function getFields() {\n      return this.fields.join(',');\n    }\n  }, {\n    key: \"isFieldIncluded\",\n    value: function isFieldIncluded(name) {\n      return this.fields.includes(name);\n    }\n  }]);\n\n  return DeploymentFields;\n}();\n\nexports.DeploymentFields = DeploymentFields;\nDeploymentFields.AUDIT_INFO = new DeploymentFields(['auditInfo']);\nDeploymentFields.POINTERS_CONTENT_METADATA_AND_AUDIT_INFO = new DeploymentFields(['pointers', 'content', 'metadata', 'auditInfo']);\nDeploymentFields.POINTERS_CONTENT_AND_METADATA = new DeploymentFields(['pointers', 'content', 'metadata']);\n\nfunction arrayBufferFrom(value) {\n  if (value.buffer) {\n    return value.buffer;\n  }\n\n  return value;\n}","map":null,"metadata":{},"sourceType":"script"}