{"ast":null,"code":"/**\r\n * Gather the list of clipboard event types as constants.\r\n */\nvar ClipboardEventTypes =\n/** @class */\nfunction () {\n  function ClipboardEventTypes() {}\n  /**\r\n   * The clipboard event is fired when a copy command is active (pressed).\r\n   */\n\n\n  ClipboardEventTypes.COPY = 0x01; //\n\n  /**\r\n   *  The clipboard event is fired when a cut command is active (pressed).\r\n   */\n\n  ClipboardEventTypes.CUT = 0x02;\n  /**\r\n   * The clipboard event is fired when a paste command is active (pressed).\r\n   */\n\n  ClipboardEventTypes.PASTE = 0x03;\n  return ClipboardEventTypes;\n}();\n\nexport { ClipboardEventTypes };\n/**\r\n * This class is used to store clipboard related info for the onClipboardObservable event.\r\n */\n\nvar ClipboardInfo =\n/** @class */\nfunction () {\n  /**\r\n   *Creates an instance of ClipboardInfo.\r\n   * @param type Defines the type of event (BABYLON.ClipboardEventTypes)\r\n   * @param event Defines the related dom event\r\n   */\n  function ClipboardInfo(\n  /**\r\n   * Defines the type of event (BABYLON.ClipboardEventTypes)\r\n   */\n  type,\n  /**\r\n   * Defines the related dom event\r\n   */\n  event) {\n    this.type = type;\n    this.event = event;\n  }\n  /**\r\n   *  Get the clipboard event's type from the keycode.\r\n   * @param keyCode Defines the keyCode for the current keyboard event.\r\n   * @return {number}\r\n   */\n\n\n  ClipboardInfo.GetTypeFromCharacter = function (keyCode) {\n    var charCode = keyCode; //TODO: add codes for extended ASCII\n\n    switch (charCode) {\n      case 67:\n        return ClipboardEventTypes.COPY;\n\n      case 86:\n        return ClipboardEventTypes.PASTE;\n\n      case 88:\n        return ClipboardEventTypes.CUT;\n\n      default:\n        return -1;\n    }\n  };\n\n  return ClipboardInfo;\n}();\n\nexport { ClipboardInfo };","map":null,"metadata":{},"sourceType":"module"}