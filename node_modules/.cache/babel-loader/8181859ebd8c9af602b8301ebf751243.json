{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Camera } from \"../../Cameras/camera\";\nimport { ArcRotateCamera } from \"../../Cameras/arcRotateCamera\";\nimport { VRCameraMetrics } from \"./vrCameraMetrics\";\nimport { Vector3 } from \"../../Maths/math.vector\";\nimport { Node } from \"../../node\";\nimport \"../Inputs/arcRotateCameraVRDeviceOrientationInput\"; // Side effect import to define the stereoscopic mode.\n\nimport \"../RigModes/vrRigMode\";\nNode.AddNodeConstructor(\"VRDeviceOrientationFreeCamera\", function (name, scene) {\n  return function () {\n    return new VRDeviceOrientationArcRotateCamera(name, 0, 0, 1.0, Vector3.Zero(), scene);\n  };\n});\n/**\r\n * Camera used to simulate VR rendering (based on ArcRotateCamera)\r\n * @see https://doc.babylonjs.com/babylon101/cameras#vr-device-orientation-cameras\r\n */\n\nvar VRDeviceOrientationArcRotateCamera =\n/** @class */\nfunction (_super) {\n  __extends(VRDeviceOrientationArcRotateCamera, _super);\n  /**\r\n   * Creates a new VRDeviceOrientationArcRotateCamera\r\n   * @param name defines camera name\r\n   * @param alpha defines the camera rotation along the logitudinal axis\r\n   * @param beta defines the camera rotation along the latitudinal axis\r\n   * @param radius defines the camera distance from its target\r\n   * @param target defines the camera target\r\n   * @param scene defines the scene the camera belongs to\r\n   * @param compensateDistortion defines if the camera needs to compensate the lens distorsion\r\n   * @param vrCameraMetrics defines the vr metrics associated to the camera\r\n   */\n\n\n  function VRDeviceOrientationArcRotateCamera(name, alpha, beta, radius, target, scene, compensateDistortion, vrCameraMetrics) {\n    if (compensateDistortion === void 0) {\n      compensateDistortion = true;\n    }\n\n    if (vrCameraMetrics === void 0) {\n      vrCameraMetrics = VRCameraMetrics.GetDefault();\n    }\n\n    var _this = _super.call(this, name, alpha, beta, radius, target, scene) || this;\n\n    vrCameraMetrics.compensateDistortion = compensateDistortion;\n\n    _this.setCameraRigMode(Camera.RIG_MODE_VR, {\n      vrCameraMetrics: vrCameraMetrics\n    });\n\n    _this.inputs.addVRDeviceOrientation();\n\n    return _this;\n  }\n  /**\r\n   * Gets camera class name\r\n   * @returns VRDeviceOrientationArcRotateCamera\r\n   */\n\n\n  VRDeviceOrientationArcRotateCamera.prototype.getClassName = function () {\n    return \"VRDeviceOrientationArcRotateCamera\";\n  };\n\n  return VRDeviceOrientationArcRotateCamera;\n}(ArcRotateCamera);\n\nexport { VRDeviceOrientationArcRotateCamera };","map":null,"metadata":{},"sourceType":"module"}