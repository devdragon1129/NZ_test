{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.World = exports.isInsideWorldLimits = exports.getWorld = void 0;\n\nvar validation_1 = require(\"../validation\");\n/**\n * Get World\n * @alpha\n */\n\n\nfunction getWorld() {\n  return {\n    validWorldRanges: [{\n      xMin: -150,\n      yMin: -150,\n      xMax: 150,\n      yMax: 150\n    }, {\n      xMin: 62,\n      yMin: 151,\n      xMax: 162,\n      yMax: 158\n    }, {\n      xMin: 151,\n      yMin: 144,\n      xMax: 162,\n      yMax: 150\n    }, {\n      xMin: 151,\n      yMin: 59,\n      xMax: 163,\n      yMax: 143\n    }]\n  };\n}\n\nexports.getWorld = getWorld;\n/**\n * Check if is inside World Limits\n * @alpha\n */\n\nfunction isInsideWorldLimits(x, y) {\n  var validWorldRanges = getWorld().validWorldRanges;\n\n  var _iterator = _createForOfIteratorHelper(validWorldRanges),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var range = _step.value;\n\n      if (x >= range.xMin && x <= range.xMax && y >= range.yMin && y <= range.yMax) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return false;\n}\n\nexports.isInsideWorldLimits = isInsideWorldLimits;\n/**\n * @alpha\n */\n\nvar World;\n\n(function (World) {\n  World.schema = {\n    type: 'object',\n    required: ['validWorldRanges'],\n    properties: {\n      validWorldRanges: {\n        type: 'array',\n        default: [{\n          xMin: -150,\n          yMin: -150,\n          xMax: 150,\n          yMax: 150\n        }],\n        items: {\n          type: 'object',\n          required: ['xMin', 'yMin', 'xMax', 'yMax'],\n          properties: {\n            xMin: {\n              type: 'integer'\n            },\n            yMin: {\n              type: 'integer'\n            },\n            xMax: {\n              type: 'integer'\n            },\n            yMax: {\n              type: 'integer'\n            }\n          }\n        }\n      }\n    },\n    additionalProperties: false\n  };\n  World.validate = (0, validation_1.generateValidator)(World.schema);\n})(World = exports.World || (exports.World = {}));","map":null,"metadata":{},"sourceType":"script"}