{"ast":null,"code":"import { Vector3, Quaternion, Matrix } from \"../Maths/math.vector\";\nimport { Space } from '../Maths/math.axis';\n/**\r\n * Class used to apply inverse kinematics to bones\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_bones_and_skeletons#boneikcontroller\r\n */\n\nvar BoneIKController =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new BoneIKController\r\n   * @param mesh defines the mesh to control\r\n   * @param bone defines the bone to control\r\n   * @param options defines options to set up the controller\r\n   */\n  function BoneIKController(mesh, bone, options) {\n    /**\r\n     * Gets or sets the target position\r\n     */\n    this.targetPosition = Vector3.Zero();\n    /**\r\n     * Gets or sets the pole target position\r\n     */\n\n    this.poleTargetPosition = Vector3.Zero();\n    /**\r\n     * Gets or sets the pole target local offset\r\n     */\n\n    this.poleTargetLocalOffset = Vector3.Zero();\n    /**\r\n     * Gets or sets the pole angle\r\n     */\n\n    this.poleAngle = 0;\n    /**\r\n     * The amount to slerp (spherical linear interpolation) to the target.  Set this to a value between 0 and 1 (a value of 1 disables slerp)\r\n     */\n\n    this.slerpAmount = 1;\n    this._bone1Quat = Quaternion.Identity();\n    this._bone1Mat = Matrix.Identity();\n    this._bone2Ang = Math.PI;\n    this._maxAngle = Math.PI;\n    this._rightHandedSystem = false;\n    this._bendAxis = Vector3.Right();\n    this._slerping = false;\n    this._adjustRoll = 0;\n    this._bone2 = bone;\n    this._bone1 = bone.getParent();\n\n    if (!this._bone1) {\n      return;\n    }\n\n    this.mesh = mesh;\n    var bonePos = bone.getPosition();\n\n    if (bone.getAbsoluteTransform().determinant() > 0) {\n      this._rightHandedSystem = true;\n      this._bendAxis.x = 0;\n      this._bendAxis.y = 0;\n      this._bendAxis.z = -1;\n\n      if (bonePos.x > bonePos.y && bonePos.x > bonePos.z) {\n        this._adjustRoll = Math.PI * .5;\n        this._bendAxis.z = 1;\n      }\n    }\n\n    if (this._bone1.length) {\n      var boneScale1 = this._bone1.getScale();\n\n      var boneScale2 = this._bone2.getScale();\n\n      this._bone1Length = this._bone1.length * boneScale1.y * this.mesh.scaling.y;\n      this._bone2Length = this._bone2.length * boneScale2.y * this.mesh.scaling.y;\n    } else if (this._bone1.children[0]) {\n      mesh.computeWorldMatrix(true);\n\n      var pos1 = this._bone2.children[0].getAbsolutePosition(mesh);\n\n      var pos2 = this._bone2.getAbsolutePosition(mesh);\n\n      var pos3 = this._bone1.getAbsolutePosition(mesh);\n\n      this._bone1Length = Vector3.Distance(pos1, pos2);\n      this._bone2Length = Vector3.Distance(pos2, pos3);\n    }\n\n    this._bone1.getRotationMatrixToRef(Space.WORLD, mesh, this._bone1Mat);\n\n    this.maxAngle = Math.PI;\n\n    if (options) {\n      if (options.targetMesh) {\n        this.targetMesh = options.targetMesh;\n        this.targetMesh.computeWorldMatrix(true);\n      }\n\n      if (options.poleTargetMesh) {\n        this.poleTargetMesh = options.poleTargetMesh;\n        this.poleTargetMesh.computeWorldMatrix(true);\n      } else if (options.poleTargetBone) {\n        this.poleTargetBone = options.poleTargetBone;\n      } else if (this._bone1.getParent()) {\n        this.poleTargetBone = this._bone1.getParent();\n      }\n\n      if (options.poleTargetLocalOffset) {\n        this.poleTargetLocalOffset.copyFrom(options.poleTargetLocalOffset);\n      }\n\n      if (options.poleAngle) {\n        this.poleAngle = options.poleAngle;\n      }\n\n      if (options.bendAxis) {\n        this._bendAxis.copyFrom(options.bendAxis);\n      }\n\n      if (options.maxAngle) {\n        this.maxAngle = options.maxAngle;\n      }\n\n      if (options.slerpAmount) {\n        this.slerpAmount = options.slerpAmount;\n      }\n    }\n  }\n\n  Object.defineProperty(BoneIKController.prototype, \"maxAngle\", {\n    /**\r\n     * Gets or sets maximum allowed angle\r\n     */\n    get: function get() {\n      return this._maxAngle;\n    },\n    set: function set(value) {\n      this._setMaxAngle(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BoneIKController.prototype._setMaxAngle = function (ang) {\n    if (ang < 0) {\n      ang = 0;\n    }\n\n    if (ang > Math.PI || ang == undefined) {\n      ang = Math.PI;\n    }\n\n    this._maxAngle = ang;\n    var a = this._bone1Length;\n    var b = this._bone2Length;\n    this._maxReach = Math.sqrt(a * a + b * b - 2 * a * b * Math.cos(ang));\n  };\n  /**\r\n   * Force the controller to update the bones\r\n   */\n\n\n  BoneIKController.prototype.update = function () {\n    var bone1 = this._bone1;\n\n    if (!bone1) {\n      return;\n    }\n\n    var target = this.targetPosition;\n    var poleTarget = this.poleTargetPosition;\n    var mat1 = BoneIKController._tmpMats[0];\n    var mat2 = BoneIKController._tmpMats[1];\n\n    if (this.targetMesh) {\n      target.copyFrom(this.targetMesh.getAbsolutePosition());\n    }\n\n    if (this.poleTargetBone) {\n      this.poleTargetBone.getAbsolutePositionFromLocalToRef(this.poleTargetLocalOffset, this.mesh, poleTarget);\n    } else if (this.poleTargetMesh) {\n      Vector3.TransformCoordinatesToRef(this.poleTargetLocalOffset, this.poleTargetMesh.getWorldMatrix(), poleTarget);\n    }\n\n    var bonePos = BoneIKController._tmpVecs[0];\n    var zaxis = BoneIKController._tmpVecs[1];\n    var xaxis = BoneIKController._tmpVecs[2];\n    var yaxis = BoneIKController._tmpVecs[3];\n    var upAxis = BoneIKController._tmpVecs[4];\n    var _tmpQuat = BoneIKController._tmpQuat;\n    bone1.getAbsolutePositionToRef(this.mesh, bonePos);\n    poleTarget.subtractToRef(bonePos, upAxis);\n\n    if (upAxis.x == 0 && upAxis.y == 0 && upAxis.z == 0) {\n      upAxis.y = 1;\n    } else {\n      upAxis.normalize();\n    }\n\n    target.subtractToRef(bonePos, yaxis);\n    yaxis.normalize();\n    Vector3.CrossToRef(yaxis, upAxis, zaxis);\n    zaxis.normalize();\n    Vector3.CrossToRef(yaxis, zaxis, xaxis);\n    xaxis.normalize();\n    Matrix.FromXYZAxesToRef(xaxis, yaxis, zaxis, mat1);\n    var a = this._bone1Length;\n    var b = this._bone2Length;\n    var c = Vector3.Distance(bonePos, target);\n\n    if (this._maxReach > 0) {\n      c = Math.min(this._maxReach, c);\n    }\n\n    var acosa = (b * b + c * c - a * a) / (2 * b * c);\n    var acosb = (c * c + a * a - b * b) / (2 * c * a);\n\n    if (acosa > 1) {\n      acosa = 1;\n    }\n\n    if (acosb > 1) {\n      acosb = 1;\n    }\n\n    if (acosa < -1) {\n      acosa = -1;\n    }\n\n    if (acosb < -1) {\n      acosb = -1;\n    }\n\n    var angA = Math.acos(acosa);\n    var angB = Math.acos(acosb);\n    var angC = -angA - angB;\n\n    if (this._rightHandedSystem) {\n      Matrix.RotationYawPitchRollToRef(0, 0, this._adjustRoll, mat2);\n      mat2.multiplyToRef(mat1, mat1);\n      Matrix.RotationAxisToRef(this._bendAxis, angB, mat2);\n      mat2.multiplyToRef(mat1, mat1);\n    } else {\n      var _tmpVec = BoneIKController._tmpVecs[5];\n\n      _tmpVec.copyFrom(this._bendAxis);\n\n      _tmpVec.x *= -1;\n      Matrix.RotationAxisToRef(_tmpVec, -angB, mat2);\n      mat2.multiplyToRef(mat1, mat1);\n    }\n\n    if (this.poleAngle) {\n      Matrix.RotationAxisToRef(yaxis, this.poleAngle, mat2);\n      mat1.multiplyToRef(mat2, mat1);\n    }\n\n    if (this._bone1) {\n      if (this.slerpAmount < 1) {\n        if (!this._slerping) {\n          Quaternion.FromRotationMatrixToRef(this._bone1Mat, this._bone1Quat);\n        }\n\n        Quaternion.FromRotationMatrixToRef(mat1, _tmpQuat);\n        Quaternion.SlerpToRef(this._bone1Quat, _tmpQuat, this.slerpAmount, this._bone1Quat);\n        angC = this._bone2Ang * (1.0 - this.slerpAmount) + angC * this.slerpAmount;\n\n        this._bone1.setRotationQuaternion(this._bone1Quat, Space.WORLD, this.mesh);\n\n        this._slerping = true;\n      } else {\n        this._bone1.setRotationMatrix(mat1, Space.WORLD, this.mesh);\n\n        this._bone1Mat.copyFrom(mat1);\n\n        this._slerping = false;\n      }\n    }\n\n    this._bone2.setAxisAngle(this._bendAxis, angC, Space.LOCAL);\n\n    this._bone2Ang = angC;\n  };\n\n  BoneIKController._tmpVecs = [Vector3.Zero(), Vector3.Zero(), Vector3.Zero(), Vector3.Zero(), Vector3.Zero(), Vector3.Zero()];\n  BoneIKController._tmpQuat = Quaternion.Identity();\n  BoneIKController._tmpMats = [Matrix.Identity(), Matrix.Identity()];\n  return BoneIKController;\n}();\n\nexport { BoneIKController };","map":null,"metadata":{},"sourceType":"module"}