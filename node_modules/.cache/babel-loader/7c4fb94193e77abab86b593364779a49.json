{"ast":null,"code":"import { locations } from 'routing/locations';\nimport { createMatchSelector, getSearch } from 'connected-react-router';\nvar landIdMatchSelector = createMatchSelector(locations.landDetail());\nexport var getLandId = function getLandId(state) {\n  var result = landIdMatchSelector(state);\n  return result ? result.params.landId : null;\n};\nvar projectIdMatchSelector = createMatchSelector(locations.sceneDetail());\nexport var getProjectId = function getProjectId(state) {\n  var result = projectIdMatchSelector(state);\n  return result ? result.params.projectId : null;\n};\nvar itemIdMatchSelector = createMatchSelector(locations.itemDetail());\nexport var getItemId = function getItemId(state) {\n  var result = itemIdMatchSelector(state);\n  return result ? result.params.itemId : null;\n};\nvar collectionIdMatchSelector = createMatchSelector([locations.collectionDetail(), locations.thirdPartyCollectionDetail()]);\nexport var getCollectionId = function getCollectionId(state) {\n  var result = collectionIdMatchSelector(state);\n  return result ? result.params.collectionId : null;\n};\nexport var getSelectedItemId = function getSelectedItemId(state) {\n  return new URLSearchParams(getSearch(state)).get('item');\n};\nexport var getSelectedCollectionId = function getSelectedCollectionId(state) {\n  return new URLSearchParams(getSearch(state)).get('collection');\n};\nexport var isReviewing = function isReviewing(state) {\n  return !!new URLSearchParams(getSearch(state)).get('reviewing');\n};\nexport var getState = function getState(state) {\n  return state.location;\n};\nexport var hasHistory = function hasHistory(state) {\n  return getState(state).hasHistory;\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/location/selectors.ts"],"names":["locations","createMatchSelector","getSearch","landIdMatchSelector","landDetail","getLandId","state","result","params","landId","projectIdMatchSelector","sceneDetail","getProjectId","projectId","itemIdMatchSelector","itemDetail","getItemId","itemId","collectionIdMatchSelector","collectionDetail","thirdPartyCollectionDetail","getCollectionId","collectionId","getSelectedItemId","URLSearchParams","get","getSelectedCollectionId","isReviewing","getState","location","hasHistory"],"mappings":"AAAA,SAASA,SAAT,QAA0B,mBAA1B;AACA,SAASC,mBAAT,EAA8BC,SAA9B,QAA+C,wBAA/C;AAGA,IAAMC,mBAAmB,GAAGF,mBAAmB,CAK7CD,SAAS,CAACI,UAAV,EAL6C,CAA/C;AAOA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAsB;AAC7C,MAAMC,MAAM,GAAGJ,mBAAmB,CAACG,KAAD,CAAlC;AACA,SAAOC,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcC,MAAjB,GAA0B,IAAvC;AACD,CAHM;AAKP,IAAMC,sBAAsB,GAAGT,mBAAmB,CAKhDD,SAAS,CAACW,WAAV,EALgD,CAAlD;AAOA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACN,KAAD,EAAsB;AAChD,MAAMC,MAAM,GAAGG,sBAAsB,CAACJ,KAAD,CAArC;AACA,SAAOC,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcK,SAAjB,GAA6B,IAA1C;AACD,CAHM;AAKP,IAAMC,mBAAmB,GAAGb,mBAAmB,CAK7CD,SAAS,CAACe,UAAV,EAL6C,CAA/C;AAOA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACV,KAAD,EAAsB;AAC7C,MAAMC,MAAM,GAAGO,mBAAmB,CAACR,KAAD,CAAlC;AACA,SAAOC,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcS,MAAjB,GAA0B,IAAvC;AACD,CAHM;AAKP,IAAMC,yBAAyB,GAAGjB,mBAAmB,CAKnD,CAACD,SAAS,CAACmB,gBAAV,EAAD,EAA+BnB,SAAS,CAACoB,0BAAV,EAA/B,CALmD,CAArD;AAOA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACf,KAAD,EAAsB;AACnD,MAAMC,MAAM,GAAGW,yBAAyB,CAACZ,KAAD,CAAxC;AACA,SAAOC,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcc,YAAjB,GAAgC,IAA7C;AACD,CAHM;AAKP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACjB,KAAD;AAAA,SAAsB,IAAIkB,eAAJ,CAAoBtB,SAAS,CAACI,KAAD,CAA7B,EAAsCmB,GAAtC,CAA0C,MAA1C,CAAtB;AAAA,CAA1B;AACP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACpB,KAAD;AAAA,SAAsB,IAAIkB,eAAJ,CAAoBtB,SAAS,CAACI,KAAD,CAA7B,EAAsCmB,GAAtC,CAA0C,YAA1C,CAAtB;AAAA,CAAhC;AACP,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACrB,KAAD;AAAA,SAAsB,CAAC,CAAC,IAAIkB,eAAJ,CAAoBtB,SAAS,CAACI,KAAD,CAA7B,EAAsCmB,GAAtC,CAA0C,WAA1C,CAAxB;AAAA,CAApB;AACP,OAAO,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACtB,KAAD;AAAA,SAAsBA,KAAK,CAACuB,QAA5B;AAAA,CAAjB;AACP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACxB,KAAD;AAAA,SAAsBsB,QAAQ,CAACtB,KAAD,CAAR,CAAgBwB,UAAtC;AAAA,CAAnB","sourcesContent":["import { locations } from 'routing/locations'\nimport { createMatchSelector, getSearch } from 'connected-react-router'\nimport { RootState } from 'modules/common/types'\n\nconst landIdMatchSelector = createMatchSelector<\n  RootState,\n  {\n    landId: string\n  }\n>(locations.landDetail())\n\nexport const getLandId = (state: RootState) => {\n  const result = landIdMatchSelector(state)\n  return result ? result.params.landId : null\n}\n\nconst projectIdMatchSelector = createMatchSelector<\n  RootState,\n  {\n    projectId: string\n  }\n>(locations.sceneDetail())\n\nexport const getProjectId = (state: RootState) => {\n  const result = projectIdMatchSelector(state)\n  return result ? result.params.projectId : null\n}\n\nconst itemIdMatchSelector = createMatchSelector<\n  RootState,\n  {\n    itemId: string\n  }\n>(locations.itemDetail())\n\nexport const getItemId = (state: RootState) => {\n  const result = itemIdMatchSelector(state)\n  return result ? result.params.itemId : null\n}\n\nconst collectionIdMatchSelector = createMatchSelector<\n  RootState,\n  {\n    collectionId: string\n  }\n>([locations.collectionDetail(), locations.thirdPartyCollectionDetail()])\n\nexport const getCollectionId = (state: RootState) => {\n  const result = collectionIdMatchSelector(state)\n  return result ? result.params.collectionId : null\n}\n\nexport const getSelectedItemId = (state: RootState) => new URLSearchParams(getSearch(state)).get('item')\nexport const getSelectedCollectionId = (state: RootState) => new URLSearchParams(getSearch(state)).get('collection')\nexport const isReviewing = (state: RootState) => !!new URLSearchParams(getSearch(state)).get('reviewing')\nexport const getState = (state: RootState) => state.location\nexport const hasHistory = (state: RootState) => getState(state).hasHistory\n"]},"metadata":{},"sourceType":"module"}