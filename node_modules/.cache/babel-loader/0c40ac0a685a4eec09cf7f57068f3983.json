{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _lodash = require('lodash.get');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _lodash3 = require('lodash.reduce');\n\nvar _lodash4 = _interopRequireDefault(_lodash3);\n\nvar _lodash5 = require('lodash.isfunction');\n\nvar _lodash6 = _interopRequireDefault(_lodash5);\n\nvar _lodash7 = require('lodash.isobject');\n\nvar _lodash8 = _interopRequireDefault(_lodash7);\n\nvar _lodash9 = require('lodash.set');\n\nvar _lodash10 = _interopRequireDefault(_lodash9);\n\nvar _lodash11 = require('lodash.unset');\n\nvar _lodash12 = _interopRequireDefault(_lodash11);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nexports['default'] = function (engine) {\n  var whitelist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var blacklist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  whitelist = whitelist || []; // eslint-disable-line no-param-reassign\n\n  return _extends({}, engine, {\n    save: function save(state) {\n      var saveState = {}; // Copy the whole state if we're about to blacklist only\n\n      if (whitelist.length === 0 && blacklist !== null) {\n        saveState = _extends({}, state);\n      }\n\n      blacklist = blacklist || []; // eslint-disable-line no-param-reassign\n\n      whitelist.forEach(function (key) {\n        // Support strings for one-level paths\n        if (typeof key === 'string') {\n          key = [key]; // eslint-disable-line no-param-reassign\n        }\n\n        var value = (0, _lodash4['default'])(key, function (result, keyPart) {\n          if (result) {\n            // Support immutable structures\n            if ((0, _lodash6['default'])(result.has) && (0, _lodash6['default'])(result.get)) {\n              return result.get(keyPart);\n            }\n\n            if (result.hasOwnProperty(keyPart)) {\n              return result[keyPart];\n            }\n          }\n        }, state);\n\n        if (value !== undefined) {\n          // done to support null values\n          (0, _lodash10['default'])(saveState, key, value);\n        }\n      });\n      blacklist.forEach(function (key) {\n        // Support strings for one-level paths\n        if (typeof key === 'string') {\n          key = [key]; // eslint-disable-line no-param-reassign\n        } // Support immutable structures\n\n\n        var value = state[key[0]];\n        var blacklistedState = saveState[key[0]] || value;\n\n        if (blacklistedState && (0, _lodash6['default'])(blacklistedState.deleteIn)) {\n          // Handle multiple blacklist path with same key\n          saveState[key[0]] = blacklistedState.deleteIn(key.slice(1));\n          return;\n        } // If we're a nested path ...\n\n\n        if (key.length > 1) {\n          // ... and inside a object ...\n          var myKey = key.slice(0, -1);\n          var subValue = (0, _lodash2['default'])(saveState, myKey);\n\n          if ((0, _lodash8['default'])(subValue)) {\n            // ... clone it, as we don't want to change the state!\n            (0, _lodash10['default'])(saveState, myKey, _extends({}, subValue));\n          }\n        }\n\n        (0, _lodash12['default'])(saveState, key);\n      });\n      return engine.save(saveState);\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}