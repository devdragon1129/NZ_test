{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _without2 = _interopRequireDefault(require(\"lodash/without\"));\n\nvar _isNil2 = _interopRequireDefault(require(\"lodash/isNil\"));\n\nvar _isUndefined2 = _interopRequireDefault(require(\"lodash/isUndefined\"));\n\nvar _invoke2 = _interopRequireDefault(require(\"lodash/invoke\"));\n\nvar _isElement2 = _interopRequireDefault(require(\"lodash/isElement\"));\n\nvar _isArray2 = _interopRequireDefault(require(\"lodash/isArray\"));\n\nvar _pick2 = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar _includes2 = _interopRequireDefault(require(\"lodash/includes\"));\n\nvar _reduce2 = _interopRequireDefault(require(\"lodash/reduce\"));\n\nvar _eventStack = _interopRequireDefault(require(\"@semantic-ui-react/event-stack\"));\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactPopper = require(\"react-popper\");\n\nvar _shallowequal = _interopRequireDefault(require(\"shallowequal\"));\n\nvar _lib = require(\"../../lib\");\n\nvar _Portal = _interopRequireDefault(require(\"../../addons/Portal\"));\n\nvar _positions = require(\"./lib/positions\");\n\nvar _createReferenceProxy = _interopRequireDefault(require(\"./lib/createReferenceProxy\"));\n\nvar _PopupContent = _interopRequireDefault(require(\"./PopupContent\"));\n\nvar _PopupHeader = _interopRequireDefault(require(\"./PopupHeader\"));\n/**\n * A Popup displays additional information on top of a page.\n */\n\n\nvar Popup = /*#__PURE__*/function (_Component) {\n  (0, _inheritsLoose2.default)(Popup, _Component);\n\n  function Popup() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.state = {};\n    _this.open = false;\n    _this.zIndexWasSynced = false;\n    _this.triggerRef = /*#__PURE__*/_react.default.createRef();\n    _this.elementRef = /*#__PURE__*/_react.default.createRef();\n\n    _this.getPortalProps = function () {\n      var portalProps = {};\n      var _this$props = _this.props,\n          on = _this$props.on,\n          hoverable = _this$props.hoverable;\n      var normalizedOn = (0, _isArray2.default)(on) ? on : [on];\n\n      if (hoverable) {\n        portalProps.closeOnPortalMouseLeave = true;\n        portalProps.mouseLeaveDelay = 300;\n      }\n\n      if ((0, _includes2.default)(normalizedOn, 'hover')) {\n        portalProps.openOnTriggerClick = false;\n        portalProps.closeOnTriggerClick = false;\n        portalProps.openOnTriggerMouseEnter = true;\n        portalProps.closeOnTriggerMouseLeave = true; // Taken from SUI: https://git.io/vPmCm\n\n        portalProps.mouseLeaveDelay = 70;\n        portalProps.mouseEnterDelay = 50;\n      }\n\n      if ((0, _includes2.default)(normalizedOn, 'click')) {\n        portalProps.openOnTriggerClick = true;\n        portalProps.closeOnTriggerClick = true;\n        portalProps.closeOnDocumentClick = true;\n      }\n\n      if ((0, _includes2.default)(normalizedOn, 'focus')) {\n        portalProps.openOnTriggerFocus = true;\n        portalProps.closeOnTriggerBlur = true;\n      }\n\n      return portalProps;\n    };\n\n    _this.hideOnScroll = function (e) {\n      // Do not hide the popup when scroll comes from inside the popup\n      // https://github.com/Semantic-Org/Semantic-UI-React/issues/4305\n      if ((0, _isElement2.default)(e.target) && _this.elementRef.current.contains(e.target)) {\n        return;\n      }\n\n      _this.setState({\n        closed: true\n      });\n\n      _lib.eventStack.unsub('scroll', _this.hideOnScroll, {\n        target: window\n      });\n\n      _this.timeoutId = setTimeout(function () {\n        _this.setState({\n          closed: false\n        });\n      }, 50);\n\n      _this.handleClose(e);\n    };\n\n    _this.handleClose = function (e) {\n      (0, _invoke2.default)(_this.props, 'onClose', e, (0, _extends2.default)({}, _this.props, {\n        open: false\n      }));\n    };\n\n    _this.handleOpen = function (e) {\n      (0, _invoke2.default)(_this.props, 'onOpen', e, (0, _extends2.default)({}, _this.props, {\n        open: true\n      }));\n    };\n\n    _this.handlePortalMount = function (e) {\n      (0, _invoke2.default)(_this.props, 'onMount', e, _this.props);\n    };\n\n    _this.handlePortalUnmount = function (e) {\n      _this.positionUpdate = null;\n      (0, _invoke2.default)(_this.props, 'onUnmount', e, _this.props);\n    };\n\n    _this.renderContent = function (_ref) {\n      var popperPlacement = _ref.placement,\n          popperRef = _ref.ref,\n          update = _ref.update,\n          popperStyle = _ref.style;\n      var _this$props2 = _this.props,\n          basic = _this$props2.basic,\n          children = _this$props2.children,\n          className = _this$props2.className,\n          content = _this$props2.content,\n          hideOnScroll = _this$props2.hideOnScroll,\n          flowing = _this$props2.flowing,\n          header = _this$props2.header,\n          inverted = _this$props2.inverted,\n          popper = _this$props2.popper,\n          size = _this$props2.size,\n          style = _this$props2.style,\n          wide = _this$props2.wide;\n      var contentRestProps = _this.state.contentRestProps;\n      _this.positionUpdate = update;\n      var classes = (0, _clsx.default)('ui', _positions.placementMapping[popperPlacement], size, (0, _lib.useKeyOrValueAndKey)(wide, 'wide'), (0, _lib.useKeyOnly)(basic, 'basic'), (0, _lib.useKeyOnly)(flowing, 'flowing'), (0, _lib.useKeyOnly)(inverted, 'inverted'), 'popup transition visible', className);\n      var ElementType = (0, _lib.getElementType)(Popup, _this.props);\n      var styles = (0, _extends2.default)({\n        // Heads up! We need default styles to get working correctly `flowing`\n        left: 'auto',\n        right: 'auto',\n        // This is required to be properly positioned inside wrapping `div`\n        position: 'initial'\n      }, style);\n\n      var innerElement = /*#__PURE__*/_react.default.createElement(ElementType, (0, _extends2.default)({}, contentRestProps, {\n        className: classes,\n        style: styles,\n        ref: _this.elementRef\n      }), _lib.childrenUtils.isNil(children) ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, _PopupHeader.default.create(header, {\n        autoGenerateKey: false\n      }), _PopupContent.default.create(content, {\n        autoGenerateKey: false\n      })) : children, hideOnScroll && /*#__PURE__*/_react.default.createElement(_eventStack.default, {\n        on: _this.hideOnScroll,\n        name: \"scroll\",\n        target: \"window\"\n      })); // https://github.com/popperjs/popper-core/blob/f1f9d1ab75b6b0e962f90a5b2a50f6cfd307d794/src/createPopper.js#L136-L137\n      // Heads up!\n      // A wrapping `div` there is a pure magic, it's required as Popper warns on margins that are\n      // defined by SUI CSS. It also means that this `div` will be positioned instead of `content`.\n\n\n      return (0, _lib.createHTMLDivision)(popper || {}, {\n        overrideProps: {\n          children: innerElement,\n          ref: popperRef,\n          style: (0, _extends2.default)({\n            // Fixes layout for floated elements\n            // https://github.com/Semantic-Org/Semantic-UI-React/issues/4092\n            display: 'flex'\n          }, popperStyle)\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  Popup.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    if (state.closed || state.disabled) return {};\n    var unhandledProps = (0, _lib.getUnhandledProps)(Popup, props);\n    var contentRestProps = (0, _reduce2.default)(unhandledProps, function (acc, val, key) {\n      if (!(0, _includes2.default)(_Portal.default.handledProps, key)) acc[key] = val;\n      return acc;\n    }, {});\n    var portalRestProps = (0, _pick2.default)(unhandledProps, _Portal.default.handledProps);\n    return {\n      contentRestProps: contentRestProps,\n      portalRestProps: portalRestProps\n    };\n  };\n\n  var _proto = Popup.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var depsEqual = (0, _shallowequal.default)(this.props.popperDependencies, prevProps.popperDependencies);\n\n    if (!depsEqual) {\n      this.handleUpdate();\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    clearTimeout(this.timeoutId);\n  };\n\n  _proto.handleUpdate = function handleUpdate() {\n    if (this.positionUpdate) this.positionUpdate();\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props3 = this.props,\n        context = _this$props3.context,\n        disabled = _this$props3.disabled,\n        eventsEnabled = _this$props3.eventsEnabled,\n        offset = _this$props3.offset,\n        pinned = _this$props3.pinned,\n        popper = _this$props3.popper,\n        popperModifiers = _this$props3.popperModifiers,\n        position = _this$props3.position,\n        positionFixed = _this$props3.positionFixed,\n        trigger = _this$props3.trigger;\n    var _this$state = this.state,\n        closed = _this$state.closed,\n        portalRestProps = _this$state.portalRestProps;\n\n    if (closed || disabled) {\n      return trigger;\n    }\n\n    var modifiers = [{\n      name: 'arrow',\n      enabled: false\n    }, {\n      name: 'eventListeners',\n      options: {\n        scroll: !!eventsEnabled,\n        resize: !!eventsEnabled\n      }\n    }, {\n      name: 'flip',\n      enabled: !pinned\n    }, {\n      name: 'preventOverflow',\n      enabled: !!offset\n    }, {\n      name: 'offset',\n      enabled: !!offset,\n      options: {\n        offset: offset\n      }\n    }].concat(popperModifiers, [// We are syncing zIndex from `.ui.popup.content` to avoid layering issues as in SUIR we are using an additional\n    // `div` for Popper.js\n    // https://github.com/Semantic-Org/Semantic-UI-React/issues/4083\n    {\n      name: 'syncZIndex',\n      enabled: true,\n      phase: 'beforeRead',\n      fn: function fn(_ref2) {\n        var _popper$style;\n\n        var state = _ref2.state;\n\n        if (_this2.zIndexWasSynced) {\n          return;\n        } // if zIndex defined in <Popup popper={{ style: {} }} /> there is no sense to override it\n\n\n        var definedZIndex = popper == null ? void 0 : (_popper$style = popper.style) == null ? void 0 : _popper$style.zIndex;\n\n        if ((0, _isUndefined2.default)(definedZIndex)) {\n          // eslint-disable-next-line no-param-reassign\n          state.elements.popper.style.zIndex = window.getComputedStyle(state.elements.popper.firstChild).zIndex;\n        }\n\n        _this2.zIndexWasSynced = true;\n      },\n      effect: function effect() {\n        return function () {\n          _this2.zIndexWasSynced = false;\n        };\n      }\n    }]);\n    var referenceElement = (0, _createReferenceProxy.default)((0, _isNil2.default)(context) ? this.triggerRef : context);\n    var mergedPortalProps = (0, _extends2.default)({}, this.getPortalProps(), portalRestProps);\n    return /*#__PURE__*/_react.default.createElement(_Portal.default, (0, _extends2.default)({}, mergedPortalProps, {\n      onClose: this.handleClose,\n      onMount: this.handlePortalMount,\n      onOpen: this.handleOpen,\n      onUnmount: this.handlePortalUnmount,\n      trigger: trigger,\n      triggerRef: this.triggerRef\n    }), /*#__PURE__*/_react.default.createElement(_reactPopper.Popper, {\n      modifiers: modifiers,\n      placement: _positions.positionsMapping[position],\n      strategy: positionFixed ? 'fixed' : null,\n      referenceElement: referenceElement\n    }, this.renderContent));\n  };\n\n  return Popup;\n}(_react.Component);\n\nexports.default = Popup;\nPopup.handledProps = [\"as\", \"basic\", \"children\", \"className\", \"content\", \"context\", \"disabled\", \"eventsEnabled\", \"flowing\", \"header\", \"hideOnScroll\", \"hoverable\", \"inverted\", \"offset\", \"on\", \"onClose\", \"onMount\", \"onOpen\", \"onUnmount\", \"pinned\", \"popper\", \"popperDependencies\", \"popperModifiers\", \"position\", \"positionFixed\", \"size\", \"style\", \"trigger\", \"wide\"];\nPopup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _propTypes.default.elementType,\n\n  /** Display the popup without the pointing arrow. */\n  basic: _propTypes.default.bool,\n\n  /** Primary content. */\n  children: _propTypes.default.node,\n\n  /** Additional classes. */\n  className: _propTypes.default.string,\n\n  /** Simple text content for the popover. */\n  content: _lib.customPropTypes.itemShorthand,\n\n  /** Existing element the pop-up should be bound to. */\n  context: _propTypes.default.oneOfType([_propTypes.default.object, _lib.customPropTypes.refObject]),\n\n  /** A disabled popup only renders its trigger. */\n  disabled: _propTypes.default.bool,\n\n  /** Enables the Popper.js event listeners. */\n  eventsEnabled: _propTypes.default.bool,\n\n  /** A flowing Popup has no maximum width and continues to flow to fit its content. */\n  flowing: _propTypes.default.bool,\n\n  /** Takes up the entire width of its offset container. */\n  // TODO: implement the Popup fluid layout\n  // fluid: PropTypes.bool,\n\n  /** Header displayed above the content in bold. */\n  header: _lib.customPropTypes.itemShorthand,\n\n  /** Hide the Popup when scrolling the window. */\n  hideOnScroll: _propTypes.default.bool,\n\n  /** Whether the popup should not close on hover. */\n  hoverable: _propTypes.default.bool,\n\n  /** Invert the colors of the Popup. */\n  inverted: _propTypes.default.bool,\n\n  /**\n   * Offset values in px unit to apply to rendered popup. The basic offset accepts an\n   * array with two numbers in the form [skidding, distance]:\n   * - `skidding` displaces the Popup along the reference element\n   * - `distance` displaces the Popup away from, or toward, the reference element in the direction of its placement. A positive number displaces it further away, while a negative number lets it overlap the reference.\n   *\n   * @see https://popper.js.org/docs/v2/modifiers/offset/\n   */\n  offset: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.arrayOf(_propTypes.default.number)]),\n\n  /** Events triggering the popup. */\n  on: _propTypes.default.oneOfType([_propTypes.default.oneOf(['hover', 'click', 'focus']), _propTypes.default.arrayOf(_propTypes.default.oneOf(['hover', 'click', 'focus']))]),\n\n  /**\n   * Called when a close event happens.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClose: _propTypes.default.func,\n\n  /**\n   * Called when the portal is mounted on the DOM.\n   *\n   * @param {null}\n   * @param {object} data - All props.\n   */\n  onMount: _propTypes.default.func,\n\n  /**\n   * Called when an open event happens.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onOpen: _propTypes.default.func,\n\n  /**\n   * Called when the portal is unmounted from the DOM.\n   *\n   * @param {null}\n   * @param {object} data - All props.\n   */\n  onUnmount: _propTypes.default.func,\n\n  /** Disables automatic repositioning of the component, it will always be placed according to the position value. */\n  pinned: _propTypes.default.bool,\n\n  /** Position for the popover. */\n  position: _propTypes.default.oneOf(_positions.positions),\n\n  /** Tells `Popper.js` to use the `position: fixed` strategy to position the popover. */\n  positionFixed: _propTypes.default.bool,\n\n  /** A wrapping element for an actual content that will be used for positioning. */\n  popper: _lib.customPropTypes.itemShorthand,\n\n  /** An array containing custom settings for the Popper.js modifiers. */\n  popperModifiers: _propTypes.default.array,\n\n  /** A popup can have dependencies which update will schedule a position update. */\n  popperDependencies: _propTypes.default.array,\n\n  /** Popup size. */\n  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium', 'big', 'massive')),\n\n  /** Custom Popup style. */\n  style: _propTypes.default.object,\n\n  /** Element to be rendered in-place where the popup is defined. */\n  trigger: _propTypes.default.node,\n\n  /** Popup width. */\n  wide: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['very'])])\n} : {};\nPopup.defaultProps = {\n  disabled: false,\n  eventsEnabled: true,\n  on: ['click', 'hover'],\n  pinned: false,\n  popperModifiers: [],\n  position: 'top left'\n};\nPopup.Content = _PopupContent.default;\nPopup.Header = _PopupHeader.default;","map":null,"metadata":{},"sourceType":"script"}