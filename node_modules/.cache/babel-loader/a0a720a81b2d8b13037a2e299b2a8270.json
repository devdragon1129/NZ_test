{"ast":null,"code":"import { Tools } from \"../Misc/tools\";\nimport { PerfCounter } from '../Misc/perfCounter';\n/**\r\n * This class can be used to get instrumentation data from a Babylon engine\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#sceneinstrumentation\r\n */\n\nvar SceneInstrumentation =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a new scene instrumentation.\r\n   * This class can be used to get instrumentation data from a Babylon engine\r\n   * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#sceneinstrumentation\r\n   * @param scene Defines the scene to instrument\r\n   */\n  function SceneInstrumentation(\n  /**\r\n   * Defines the scene to instrument\r\n   */\n  scene) {\n    var _this = this;\n\n    this.scene = scene;\n    this._captureActiveMeshesEvaluationTime = false;\n    this._activeMeshesEvaluationTime = new PerfCounter();\n    this._captureRenderTargetsRenderTime = false;\n    this._renderTargetsRenderTime = new PerfCounter();\n    this._captureFrameTime = false;\n    this._frameTime = new PerfCounter();\n    this._captureRenderTime = false;\n    this._renderTime = new PerfCounter();\n    this._captureInterFrameTime = false;\n    this._interFrameTime = new PerfCounter();\n    this._captureParticlesRenderTime = false;\n    this._particlesRenderTime = new PerfCounter();\n    this._captureSpritesRenderTime = false;\n    this._spritesRenderTime = new PerfCounter();\n    this._capturePhysicsTime = false;\n    this._physicsTime = new PerfCounter();\n    this._captureAnimationsTime = false;\n    this._animationsTime = new PerfCounter();\n    this._captureCameraRenderTime = false;\n    this._cameraRenderTime = new PerfCounter(); // Observers\n\n    this._onBeforeActiveMeshesEvaluationObserver = null;\n    this._onAfterActiveMeshesEvaluationObserver = null;\n    this._onBeforeRenderTargetsRenderObserver = null;\n    this._onAfterRenderTargetsRenderObserver = null;\n    this._onAfterRenderObserver = null;\n    this._onBeforeDrawPhaseObserver = null;\n    this._onAfterDrawPhaseObserver = null;\n    this._onBeforeAnimationsObserver = null;\n    this._onBeforeParticlesRenderingObserver = null;\n    this._onAfterParticlesRenderingObserver = null;\n    this._onBeforeSpritesRenderingObserver = null;\n    this._onAfterSpritesRenderingObserver = null;\n    this._onBeforePhysicsObserver = null;\n    this._onAfterPhysicsObserver = null;\n    this._onAfterAnimationsObserver = null;\n    this._onBeforeCameraRenderObserver = null;\n    this._onAfterCameraRenderObserver = null; // Before render\n\n    this._onBeforeAnimationsObserver = scene.onBeforeAnimationsObservable.add(function () {\n      if (_this._captureActiveMeshesEvaluationTime) {\n        _this._activeMeshesEvaluationTime.fetchNewFrame();\n      }\n\n      if (_this._captureRenderTargetsRenderTime) {\n        _this._renderTargetsRenderTime.fetchNewFrame();\n      }\n\n      if (_this._captureFrameTime) {\n        Tools.StartPerformanceCounter(\"Scene rendering\");\n\n        _this._frameTime.beginMonitoring();\n      }\n\n      if (_this._captureInterFrameTime) {\n        _this._interFrameTime.endMonitoring();\n      }\n\n      if (_this._captureParticlesRenderTime) {\n        _this._particlesRenderTime.fetchNewFrame();\n      }\n\n      if (_this._captureSpritesRenderTime) {\n        _this._spritesRenderTime.fetchNewFrame();\n      }\n\n      if (_this._captureAnimationsTime) {\n        _this._animationsTime.beginMonitoring();\n      }\n\n      _this.scene.getEngine()._drawCalls.fetchNewFrame();\n    }); // After render\n\n    this._onAfterRenderObserver = scene.onAfterRenderObservable.add(function () {\n      if (_this._captureFrameTime) {\n        Tools.EndPerformanceCounter(\"Scene rendering\");\n\n        _this._frameTime.endMonitoring();\n      }\n\n      if (_this._captureRenderTime) {\n        _this._renderTime.endMonitoring(false);\n      }\n\n      if (_this._captureInterFrameTime) {\n        _this._interFrameTime.beginMonitoring();\n      }\n    });\n  }\n\n  Object.defineProperty(SceneInstrumentation.prototype, \"activeMeshesEvaluationTimeCounter\", {\n    // Properties\n\n    /**\r\n     * Gets the perf counter used for active meshes evaluation time\r\n     */\n    get: function get() {\n      return this._activeMeshesEvaluationTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureActiveMeshesEvaluationTime\", {\n    /**\r\n     * Gets the active meshes evaluation time capture status\r\n     */\n    get: function get() {\n      return this._captureActiveMeshesEvaluationTime;\n    },\n\n    /**\r\n     * Enable or disable the active meshes evaluation time capture\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureActiveMeshesEvaluationTime) {\n        return;\n      }\n\n      this._captureActiveMeshesEvaluationTime = value;\n\n      if (value) {\n        this._onBeforeActiveMeshesEvaluationObserver = this.scene.onBeforeActiveMeshesEvaluationObservable.add(function () {\n          Tools.StartPerformanceCounter(\"Active meshes evaluation\");\n\n          _this._activeMeshesEvaluationTime.beginMonitoring();\n        });\n        this._onAfterActiveMeshesEvaluationObserver = this.scene.onAfterActiveMeshesEvaluationObservable.add(function () {\n          Tools.EndPerformanceCounter(\"Active meshes evaluation\");\n\n          _this._activeMeshesEvaluationTime.endMonitoring();\n        });\n      } else {\n        this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\n        this._onBeforeActiveMeshesEvaluationObserver = null;\n        this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\n        this._onAfterActiveMeshesEvaluationObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"renderTargetsRenderTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for render targets render time\r\n     */\n    get: function get() {\n      return this._renderTargetsRenderTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureRenderTargetsRenderTime\", {\n    /**\r\n     * Gets the render targets render time capture status\r\n     */\n    get: function get() {\n      return this._captureRenderTargetsRenderTime;\n    },\n\n    /**\r\n     * Enable or disable the render targets render time capture\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureRenderTargetsRenderTime) {\n        return;\n      }\n\n      this._captureRenderTargetsRenderTime = value;\n\n      if (value) {\n        this._onBeforeRenderTargetsRenderObserver = this.scene.onBeforeRenderTargetsRenderObservable.add(function () {\n          Tools.StartPerformanceCounter(\"Render targets rendering\");\n\n          _this._renderTargetsRenderTime.beginMonitoring();\n        });\n        this._onAfterRenderTargetsRenderObserver = this.scene.onAfterRenderTargetsRenderObservable.add(function () {\n          Tools.EndPerformanceCounter(\"Render targets rendering\");\n\n          _this._renderTargetsRenderTime.endMonitoring(false);\n        });\n      } else {\n        this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\n        this._onBeforeRenderTargetsRenderObserver = null;\n        this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\n        this._onAfterRenderTargetsRenderObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"particlesRenderTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for particles render time\r\n     */\n    get: function get() {\n      return this._particlesRenderTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureParticlesRenderTime\", {\n    /**\r\n     * Gets the particles render time capture status\r\n     */\n    get: function get() {\n      return this._captureParticlesRenderTime;\n    },\n\n    /**\r\n     * Enable or disable the particles render time capture\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureParticlesRenderTime) {\n        return;\n      }\n\n      this._captureParticlesRenderTime = value;\n\n      if (value) {\n        this._onBeforeParticlesRenderingObserver = this.scene.onBeforeParticlesRenderingObservable.add(function () {\n          Tools.StartPerformanceCounter(\"Particles\");\n\n          _this._particlesRenderTime.beginMonitoring();\n        });\n        this._onAfterParticlesRenderingObserver = this.scene.onAfterParticlesRenderingObservable.add(function () {\n          Tools.EndPerformanceCounter(\"Particles\");\n\n          _this._particlesRenderTime.endMonitoring(false);\n        });\n      } else {\n        this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\n        this._onBeforeParticlesRenderingObserver = null;\n        this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\n        this._onAfterParticlesRenderingObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"spritesRenderTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for sprites render time\r\n     */\n    get: function get() {\n      return this._spritesRenderTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureSpritesRenderTime\", {\n    /**\r\n     * Gets the sprites render time capture status\r\n     */\n    get: function get() {\n      return this._captureSpritesRenderTime;\n    },\n\n    /**\r\n     * Enable or disable the sprites render time capture\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureSpritesRenderTime) {\n        return;\n      }\n\n      this._captureSpritesRenderTime = value;\n\n      if (!this.scene.spriteManagers) {\n        return;\n      }\n\n      if (value) {\n        this._onBeforeSpritesRenderingObserver = this.scene.onBeforeSpritesRenderingObservable.add(function () {\n          Tools.StartPerformanceCounter(\"Sprites\");\n\n          _this._spritesRenderTime.beginMonitoring();\n        });\n        this._onAfterSpritesRenderingObserver = this.scene.onAfterSpritesRenderingObservable.add(function () {\n          Tools.EndPerformanceCounter(\"Sprites\");\n\n          _this._spritesRenderTime.endMonitoring(false);\n        });\n      } else {\n        this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\n        this._onBeforeSpritesRenderingObserver = null;\n        this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\n        this._onAfterSpritesRenderingObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"physicsTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for physics time\r\n     */\n    get: function get() {\n      return this._physicsTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"capturePhysicsTime\", {\n    /**\r\n     * Gets the physics time capture status\r\n     */\n    get: function get() {\n      return this._capturePhysicsTime;\n    },\n\n    /**\r\n     * Enable or disable the physics time capture\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._capturePhysicsTime) {\n        return;\n      }\n\n      if (!this.scene.onBeforePhysicsObservable) {\n        return;\n      }\n\n      this._capturePhysicsTime = value;\n\n      if (value) {\n        this._onBeforePhysicsObserver = this.scene.onBeforePhysicsObservable.add(function () {\n          Tools.StartPerformanceCounter(\"Physics\");\n\n          _this._physicsTime.beginMonitoring();\n        });\n        this._onAfterPhysicsObserver = this.scene.onAfterPhysicsObservable.add(function () {\n          Tools.EndPerformanceCounter(\"Physics\");\n\n          _this._physicsTime.endMonitoring();\n        });\n      } else {\n        this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\n        this._onBeforePhysicsObserver = null;\n        this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\n        this._onAfterPhysicsObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"animationsTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for animations time\r\n     */\n    get: function get() {\n      return this._animationsTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureAnimationsTime\", {\n    /**\r\n     * Gets the animations time capture status\r\n     */\n    get: function get() {\n      return this._captureAnimationsTime;\n    },\n\n    /**\r\n     * Enable or disable the animations time capture\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureAnimationsTime) {\n        return;\n      }\n\n      this._captureAnimationsTime = value;\n\n      if (value) {\n        this._onAfterAnimationsObserver = this.scene.onAfterAnimationsObservable.add(function () {\n          _this._animationsTime.endMonitoring();\n        });\n      } else {\n        this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\n        this._onAfterAnimationsObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"frameTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for frame time capture\r\n     */\n    get: function get() {\n      return this._frameTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureFrameTime\", {\n    /**\r\n     * Gets the frame time capture status\r\n     */\n    get: function get() {\n      return this._captureFrameTime;\n    },\n\n    /**\r\n     * Enable or disable the frame time capture\r\n     */\n    set: function set(value) {\n      this._captureFrameTime = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"interFrameTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for inter-frames time capture\r\n     */\n    get: function get() {\n      return this._interFrameTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureInterFrameTime\", {\n    /**\r\n     * Gets the inter-frames time capture status\r\n     */\n    get: function get() {\n      return this._captureInterFrameTime;\n    },\n\n    /**\r\n     * Enable or disable the inter-frames time capture\r\n     */\n    set: function set(value) {\n      this._captureInterFrameTime = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"renderTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for render time capture\r\n     */\n    get: function get() {\n      return this._renderTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureRenderTime\", {\n    /**\r\n     * Gets the render time capture status\r\n     */\n    get: function get() {\n      return this._captureRenderTime;\n    },\n\n    /**\r\n     * Enable or disable the render time capture\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureRenderTime) {\n        return;\n      }\n\n      this._captureRenderTime = value;\n\n      if (value) {\n        this._onBeforeDrawPhaseObserver = this.scene.onBeforeDrawPhaseObservable.add(function () {\n          _this._renderTime.beginMonitoring();\n\n          Tools.StartPerformanceCounter(\"Main render\");\n        });\n        this._onAfterDrawPhaseObserver = this.scene.onAfterDrawPhaseObservable.add(function () {\n          _this._renderTime.endMonitoring(false);\n\n          Tools.EndPerformanceCounter(\"Main render\");\n        });\n      } else {\n        this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\n        this._onBeforeDrawPhaseObserver = null;\n        this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\n        this._onAfterDrawPhaseObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"cameraRenderTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for camera render time capture\r\n     */\n    get: function get() {\n      return this._cameraRenderTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"captureCameraRenderTime\", {\n    /**\r\n     * Gets the camera render time capture status\r\n     */\n    get: function get() {\n      return this._captureCameraRenderTime;\n    },\n\n    /**\r\n     * Enable or disable the camera render time capture\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureCameraRenderTime) {\n        return;\n      }\n\n      this._captureCameraRenderTime = value;\n\n      if (value) {\n        this._onBeforeCameraRenderObserver = this.scene.onBeforeCameraRenderObservable.add(function (camera) {\n          _this._cameraRenderTime.beginMonitoring();\n\n          Tools.StartPerformanceCounter(\"Rendering camera \" + camera.name);\n        });\n        this._onAfterCameraRenderObserver = this.scene.onAfterCameraRenderObservable.add(function (camera) {\n          _this._cameraRenderTime.endMonitoring(false);\n\n          Tools.EndPerformanceCounter(\"Rendering camera \" + camera.name);\n        });\n      } else {\n        this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n        this._onBeforeCameraRenderObserver = null;\n        this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n        this._onAfterCameraRenderObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SceneInstrumentation.prototype, \"drawCallsCounter\", {\n    /**\r\n     * Gets the perf counter used for draw calls\r\n     */\n    get: function get() {\n      return this.scene.getEngine()._drawCalls;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Dispose and release associated resources.\r\n   */\n\n  SceneInstrumentation.prototype.dispose = function () {\n    this.scene.onAfterRenderObservable.remove(this._onAfterRenderObserver);\n    this._onAfterRenderObserver = null;\n    this.scene.onBeforeActiveMeshesEvaluationObservable.remove(this._onBeforeActiveMeshesEvaluationObserver);\n    this._onBeforeActiveMeshesEvaluationObserver = null;\n    this.scene.onAfterActiveMeshesEvaluationObservable.remove(this._onAfterActiveMeshesEvaluationObserver);\n    this._onAfterActiveMeshesEvaluationObserver = null;\n    this.scene.onBeforeRenderTargetsRenderObservable.remove(this._onBeforeRenderTargetsRenderObserver);\n    this._onBeforeRenderTargetsRenderObserver = null;\n    this.scene.onAfterRenderTargetsRenderObservable.remove(this._onAfterRenderTargetsRenderObserver);\n    this._onAfterRenderTargetsRenderObserver = null;\n    this.scene.onBeforeAnimationsObservable.remove(this._onBeforeAnimationsObserver);\n    this._onBeforeAnimationsObserver = null;\n    this.scene.onBeforeParticlesRenderingObservable.remove(this._onBeforeParticlesRenderingObserver);\n    this._onBeforeParticlesRenderingObserver = null;\n    this.scene.onAfterParticlesRenderingObservable.remove(this._onAfterParticlesRenderingObserver);\n    this._onAfterParticlesRenderingObserver = null;\n\n    if (this._onBeforeSpritesRenderingObserver) {\n      this.scene.onBeforeSpritesRenderingObservable.remove(this._onBeforeSpritesRenderingObserver);\n      this._onBeforeSpritesRenderingObserver = null;\n    }\n\n    if (this._onAfterSpritesRenderingObserver) {\n      this.scene.onAfterSpritesRenderingObservable.remove(this._onAfterSpritesRenderingObserver);\n      this._onAfterSpritesRenderingObserver = null;\n    }\n\n    this.scene.onBeforeDrawPhaseObservable.remove(this._onBeforeDrawPhaseObserver);\n    this._onBeforeDrawPhaseObserver = null;\n    this.scene.onAfterDrawPhaseObservable.remove(this._onAfterDrawPhaseObserver);\n    this._onAfterDrawPhaseObserver = null;\n\n    if (this._onBeforePhysicsObserver) {\n      this.scene.onBeforePhysicsObservable.remove(this._onBeforePhysicsObserver);\n      this._onBeforePhysicsObserver = null;\n    }\n\n    if (this._onAfterPhysicsObserver) {\n      this.scene.onAfterPhysicsObservable.remove(this._onAfterPhysicsObserver);\n      this._onAfterPhysicsObserver = null;\n    }\n\n    this.scene.onAfterAnimationsObservable.remove(this._onAfterAnimationsObserver);\n    this._onAfterAnimationsObserver = null;\n    this.scene.onBeforeCameraRenderObservable.remove(this._onBeforeCameraRenderObserver);\n    this._onBeforeCameraRenderObserver = null;\n    this.scene.onAfterCameraRenderObservable.remove(this._onAfterCameraRenderObserver);\n    this._onAfterCameraRenderObserver = null;\n    this.scene = null;\n  };\n\n  return SceneInstrumentation;\n}();\n\nexport { SceneInstrumentation };","map":null,"metadata":{},"sourceType":"module"}