{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar personal_request_payloads_1 = require(\"./personal-request-payloads\");\n\nvar Personal = /*#__PURE__*/function () {\n  function Personal(provider) {\n    _classCallCheck(this, Personal);\n\n    this.provider = provider;\n    this.request = new personal_request_payloads_1.PersonalRequestPayloads();\n  }\n\n  _createClass(Personal, [{\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var method, params, format;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                method = _ref.method, params = _ref.params, format = _ref.format;\n                _context.t0 = format;\n                _context.next = 4;\n                return this.provider.send(method, params);\n\n              case 4:\n                _context.t1 = _context.sent;\n                return _context.abrupt(\"return\", (0, _context.t0)(_context.t1));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function send(_x) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n  }, {\n    key: \"getAccounts\",\n    value: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var payload;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                payload = this.request.getAccounts();\n                _context2.next = 3;\n                return this.send(payload);\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getAccounts() {\n        return _getAccounts.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }()\n  }, {\n    key: \"newAccount\",\n    value: function () {\n      var _newAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(password) {\n        var payload;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                payload = this.request.newAccount(password);\n                _context3.next = 3;\n                return this.send(payload);\n\n              case 3:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function newAccount(_x2) {\n        return _newAccount.apply(this, arguments);\n      }\n\n      return newAccount;\n    }()\n  }, {\n    key: \"unlockAccount\",\n    value: function () {\n      var _unlockAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(address, password, duration) {\n        var payload;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                payload = this.request.unlockAccount(address, password, duration);\n                _context4.next = 3;\n                return this.send(payload);\n\n              case 3:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unlockAccount(_x3, _x4, _x5) {\n        return _unlockAccount.apply(this, arguments);\n      }\n\n      return unlockAccount;\n    }()\n  }, {\n    key: \"lockAccount\",\n    value: function () {\n      var _lockAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(address) {\n        var payload;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                payload = this.request.lockAccount(address);\n                _context5.next = 3;\n                return this.send(payload);\n\n              case 3:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function lockAccount(_x6) {\n        return _lockAccount.apply(this, arguments);\n      }\n\n      return lockAccount;\n    }()\n  }, {\n    key: \"importRawKey\",\n    value: function () {\n      var _importRawKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(privateKey, password) {\n        var payload;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                payload = this.request.importRawKey(privateKey, password);\n                _context6.next = 3;\n                return this.send(payload);\n\n              case 3:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function importRawKey(_x7, _x8) {\n        return _importRawKey.apply(this, arguments);\n      }\n\n      return importRawKey;\n    }()\n  }, {\n    key: \"sendTransaction\",\n    value: function () {\n      var _sendTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(tx, password) {\n        var payload;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                payload = this.request.sendTransaction(tx, password);\n                _context7.next = 3;\n                return this.send(payload);\n\n              case 3:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function sendTransaction(_x9, _x10) {\n        return _sendTransaction.apply(this, arguments);\n      }\n\n      return sendTransaction;\n    }()\n  }, {\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(tx, password) {\n        var payload;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                payload = this.request.signTransaction(tx, password);\n                _context8.next = 3;\n                return this.send(payload);\n\n              case 3:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 4:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function signTransaction(_x11, _x12) {\n        return _signTransaction.apply(this, arguments);\n      }\n\n      return signTransaction;\n    }()\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(message, address, password) {\n        var payload;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                payload = this.request.sign(message, address, password);\n                _context9.next = 3;\n                return this.send(payload);\n\n              case 3:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function sign(_x13, _x14, _x15) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"ecRecover\",\n    value: function () {\n      var _ecRecover = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(message, signedData) {\n        var payload;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                payload = this.request.ecRecover(message, signedData);\n                _context10.next = 3;\n                return this.send(payload);\n\n              case 3:\n                return _context10.abrupt(\"return\", _context10.sent);\n\n              case 4:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function ecRecover(_x16, _x17) {\n        return _ecRecover.apply(this, arguments);\n      }\n\n      return ecRecover;\n    }()\n  }]);\n\n  return Personal;\n}();\n\nexports.Personal = Personal;","map":null,"metadata":{},"sourceType":"script"}