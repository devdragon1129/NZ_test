{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Contract } from 'web3x/contract';\nimport abi from './DCLRegistrarAbi';\nexport var DCLRegistrar = /*#__PURE__*/function (_Contract) {\n  _inherits(DCLRegistrar, _Contract);\n\n  function DCLRegistrar(eth, address, options) {\n    _classCallCheck(this, DCLRegistrar);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DCLRegistrar).call(this, eth, abi, address, options));\n  }\n\n  return DCLRegistrar;\n}(Contract);\nexport var DCLRegistrarAbi = abi;","map":{"version":3,"sources":["/opt/work/NZ_test/src/contracts/DCLRegistrar.ts"],"names":["Contract","abi","DCLRegistrar","eth","address","options","DCLRegistrarAbi"],"mappings":";;;;AAGA,SAASA,QAAT,QAAoF,gBAApF;AAEA,OAAOC,GAAP,MAAgB,mBAAhB;AA8KA,WAAaC,YAAb;AAAA;;AACE,wBAAYC,GAAZ,EAAsBC,OAAtB,EAAyCC,OAAzC,EAAoE;AAAA;;AAAA,qFAC5DF,GAD4D,EACvDF,GADuD,EAClDG,OADkD,EACzCC,OADyC;AAEnE;;AAHH;AAAA,EAAkCL,QAAlC;AAKA,OAAO,IAAIM,eAAe,GAAGL,GAAtB","sourcesContent":["import BN from 'bn.js'\nimport { Address } from 'web3x/address'\nimport { EventLog, TransactionReceipt } from 'web3x/formatters'\nimport { Contract, ContractOptions, TxCall, TxSend, EventSubscriptionFactory } from 'web3x/contract'\nimport { Eth } from 'web3x/eth'\nimport abi from './DCLRegistrarAbi'\nexport type ApprovalEvent = {\n  owner: Address\n  approved: Address\n  tokenId: string\n}\nexport type ApprovalForAllEvent = {\n  owner: Address\n  operator: Address\n  approved: boolean\n}\nexport type BaseURIEvent = {\n  _oldBaseURI: string\n  _newBaseURI: string\n}\nexport type BaseUpdatedEvent = {\n  _previousBase: Address\n  _newBase: Address\n}\nexport type ControllerAddedEvent = {\n  _controller: Address\n}\nexport type ControllerRemovedEvent = {\n  _controller: Address\n}\nexport type DomainReclaimedEvent = {\n  _tokenId: string\n}\nexport type DomainTransferredEvent = {\n  _newOwner: Address\n  _tokenId: string\n}\nexport type MigrationFinishedEvent = {}\nexport type NameRegisteredEvent = {\n  _caller: Address\n  _beneficiary: Address\n  _labelHash: string\n  _subdomain: string\n  _createdDate: string\n}\nexport type OwnershipTransferredEvent = {\n  previousOwner: Address\n  newOwner: Address\n}\nexport type ReclaimedEvent = {\n  _caller: Address\n  _owner: Address\n  _tokenId: string\n}\nexport type RegistryUpdatedEvent = {\n  _previousRegistry: Address\n  _newRegistry: Address\n}\nexport type TransferEvent = {\n  from: Address\n  to: Address\n  tokenId: string\n}\nexport interface ApprovalEventLog extends EventLog<ApprovalEvent, 'Approval'> {}\nexport interface ApprovalForAllEventLog extends EventLog<ApprovalForAllEvent, 'ApprovalForAll'> {}\nexport interface BaseURIEventLog extends EventLog<BaseURIEvent, 'BaseURI'> {}\nexport interface BaseUpdatedEventLog extends EventLog<BaseUpdatedEvent, 'BaseUpdated'> {}\nexport interface ControllerAddedEventLog extends EventLog<ControllerAddedEvent, 'ControllerAdded'> {}\nexport interface ControllerRemovedEventLog extends EventLog<ControllerRemovedEvent, 'ControllerRemoved'> {}\nexport interface DomainReclaimedEventLog extends EventLog<DomainReclaimedEvent, 'DomainReclaimed'> {}\nexport interface DomainTransferredEventLog extends EventLog<DomainTransferredEvent, 'DomainTransferred'> {}\nexport interface MigrationFinishedEventLog extends EventLog<MigrationFinishedEvent, 'MigrationFinished'> {}\nexport interface NameRegisteredEventLog extends EventLog<NameRegisteredEvent, 'NameRegistered'> {}\nexport interface OwnershipTransferredEventLog extends EventLog<OwnershipTransferredEvent, 'OwnershipTransferred'> {}\nexport interface ReclaimedEventLog extends EventLog<ReclaimedEvent, 'Reclaimed'> {}\nexport interface RegistryUpdatedEventLog extends EventLog<RegistryUpdatedEvent, 'RegistryUpdated'> {}\nexport interface TransferEventLog extends EventLog<TransferEvent, 'Transfer'> {}\ninterface DCLRegistrarEvents {\n  Approval: EventSubscriptionFactory<ApprovalEventLog>\n  ApprovalForAll: EventSubscriptionFactory<ApprovalForAllEventLog>\n  BaseURI: EventSubscriptionFactory<BaseURIEventLog>\n  BaseUpdated: EventSubscriptionFactory<BaseUpdatedEventLog>\n  ControllerAdded: EventSubscriptionFactory<ControllerAddedEventLog>\n  ControllerRemoved: EventSubscriptionFactory<ControllerRemovedEventLog>\n  DomainReclaimed: EventSubscriptionFactory<DomainReclaimedEventLog>\n  DomainTransferred: EventSubscriptionFactory<DomainTransferredEventLog>\n  MigrationFinished: EventSubscriptionFactory<MigrationFinishedEventLog>\n  NameRegistered: EventSubscriptionFactory<NameRegisteredEventLog>\n  OwnershipTransferred: EventSubscriptionFactory<OwnershipTransferredEventLog>\n  Reclaimed: EventSubscriptionFactory<ReclaimedEventLog>\n  RegistryUpdated: EventSubscriptionFactory<RegistryUpdatedEventLog>\n  Transfer: EventSubscriptionFactory<TransferEventLog>\n}\ninterface DCLRegistrarEventLogs {\n  Approval: ApprovalEventLog\n  ApprovalForAll: ApprovalForAllEventLog\n  BaseURI: BaseURIEventLog\n  BaseUpdated: BaseUpdatedEventLog\n  ControllerAdded: ControllerAddedEventLog\n  ControllerRemoved: ControllerRemovedEventLog\n  DomainReclaimed: DomainReclaimedEventLog\n  DomainTransferred: DomainTransferredEventLog\n  MigrationFinished: MigrationFinishedEventLog\n  NameRegistered: NameRegisteredEventLog\n  OwnershipTransferred: OwnershipTransferredEventLog\n  Reclaimed: ReclaimedEventLog\n  RegistryUpdated: RegistryUpdatedEventLog\n  Transfer: TransferEventLog\n}\ninterface DCLRegistrarTxEventLogs {\n  Approval: ApprovalEventLog[]\n  ApprovalForAll: ApprovalForAllEventLog[]\n  BaseURI: BaseURIEventLog[]\n  BaseUpdated: BaseUpdatedEventLog[]\n  ControllerAdded: ControllerAddedEventLog[]\n  ControllerRemoved: ControllerRemovedEventLog[]\n  DomainReclaimed: DomainReclaimedEventLog[]\n  DomainTransferred: DomainTransferredEventLog[]\n  MigrationFinished: MigrationFinishedEventLog[]\n  NameRegistered: NameRegisteredEventLog[]\n  OwnershipTransferred: OwnershipTransferredEventLog[]\n  Reclaimed: ReclaimedEventLog[]\n  RegistryUpdated: RegistryUpdatedEventLog[]\n  Transfer: TransferEventLog[]\n}\nexport interface DCLRegistrarTransactionReceipt extends TransactionReceipt<DCLRegistrarTxEventLogs> {}\ninterface DCLRegistrarMethods {\n  ERC721_RECEIVED(): TxCall<string>\n  addController(controller: Address): TxSend<DCLRegistrarTransactionReceipt>\n  approve(to: Address, tokenId: number | string | BN): TxSend<DCLRegistrarTransactionReceipt>\n  available(_subdomain: string): TxCall<boolean>\n  balanceOf(owner: Address): TxCall<string>\n  base(): TxCall<Address>\n  baseURI(): TxCall<string>\n  controllers(a0: Address): TxCall<boolean>\n  domain(): TxCall<string>\n  domainNameHash(): TxCall<string>\n  getApproved(tokenId: number | string | BN): TxCall<Address>\n  getOwnerOf(_subdomain: string): TxCall<Address>\n  getTokenId(_subdomain: string): TxCall<string>\n  isApprovedForAll(owner: Address, operator: Address): TxCall<boolean>\n  isOwner(): TxCall<boolean>\n  migrateNames(_names: string[], _beneficiaries: Address[], _createdDates: (number | string | BN)[]): TxSend<DCLRegistrarTransactionReceipt>\n  migrated(): TxCall<boolean>\n  migrationFinished(): TxSend<DCLRegistrarTransactionReceipt>\n  name(): TxCall<string>\n  onERC721Received(a0: Address, a1: Address, _tokenId: number | string | BN, a3: string): TxSend<DCLRegistrarTransactionReceipt>\n  owner(): TxCall<Address>\n  ownerOf(tokenId: number | string | BN): TxCall<Address>\n  reclaim(_tokenId: number | string | BN, _owner: Address): TxSend<DCLRegistrarTransactionReceipt>\n  reclaimDomain(_tokenId: number | string | BN): TxSend<DCLRegistrarTransactionReceipt>\n  register(_subdomain: string, _beneficiary: Address): TxSend<DCLRegistrarTransactionReceipt>\n  registry(): TxCall<Address>\n  removeController(controller: Address): TxSend<DCLRegistrarTransactionReceipt>\n  renounceOwnership(): TxSend<DCLRegistrarTransactionReceipt>\n  safeTransferFrom(from: Address, to: Address, tokenId: number | string | BN): TxSend<DCLRegistrarTransactionReceipt>\n  safeTransferFrom(from: Address, to: Address, tokenId: number | string | BN, _data: string): TxSend<DCLRegistrarTransactionReceipt>\n  setApprovalForAll(to: Address, approved: boolean): TxSend<DCLRegistrarTransactionReceipt>\n  subdomains(a0: string): TxCall<string>\n  supportsInterface(interfaceId: string): TxCall<boolean>\n  symbol(): TxCall<string>\n  tokenByIndex(index: number | string | BN): TxCall<string>\n  tokenOfOwnerByIndex(owner: Address, index: number | string | BN): TxCall<string>\n  tokenURI(_tokenId: number | string | BN): TxCall<string>\n  topdomain(): TxCall<string>\n  topdomainNameHash(): TxCall<string>\n  totalSupply(): TxCall<string>\n  transferDomainOwnership(_owner: Address, _tokenId: number | string | BN): TxSend<DCLRegistrarTransactionReceipt>\n  transferFrom(from: Address, to: Address, tokenId: number | string | BN): TxSend<DCLRegistrarTransactionReceipt>\n  transferOwnership(newOwner: Address): TxSend<DCLRegistrarTransactionReceipt>\n  updateBase(_base: Address): TxSend<DCLRegistrarTransactionReceipt>\n  updateBaseURI(_baseURI: string): TxSend<DCLRegistrarTransactionReceipt>\n  updateRegistry(_registry: Address): TxSend<DCLRegistrarTransactionReceipt>\n}\nexport interface DCLRegistrarDefinition {\n  methods: DCLRegistrarMethods\n  events: DCLRegistrarEvents\n  eventLogs: DCLRegistrarEventLogs\n}\nexport class DCLRegistrar extends Contract<DCLRegistrarDefinition> {\n  constructor(eth: Eth, address?: Address, options?: ContractOptions) {\n    super(eth, abi, address, options)\n  }\n}\nexport var DCLRegistrarAbi = abi\n"]},"metadata":{},"sourceType":"module"}