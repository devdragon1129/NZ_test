{"ast":null,"code":"var _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nmodule.exports = function (e, n) {\n  \"use strict\";\n\n  var t = {};\n\n  function __webpack_require__(n) {\n    if (t[n]) {\n      return t[n].exports;\n    }\n\n    var a = t[n] = {\n      i: n,\n      l: false,\n      exports: {}\n    };\n    e[n].call(a.exports, a, a.exports, __webpack_require__);\n    a.l = true;\n    return a.exports;\n  }\n\n  return __webpack_require__(732);\n}({\n  336: function _(e, n, t) {\n    \"use strict\";\n\n    Object.defineProperty(n, \"__esModule\", {\n      value: true\n    });\n    var a = t(946);\n    var r = t(623);\n\n    var LightweightWriter = /*#__PURE__*/function (_r$SceneWriter) {\n      _inherits(LightweightWriter, _r$SceneWriter);\n\n      function LightweightWriter() {\n        var _this;\n\n        _classCallCheck(this, LightweightWriter);\n\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(LightweightWriter).apply(this, arguments));\n        _this.instanceCount = 0;\n        _this.nameMapping = {};\n        return _this;\n      }\n\n      _createClass(LightweightWriter, [{\n        key: \"addEntity\",\n        value: function addEntity(e, n) {\n          if (this.entities.has(e)) {\n            throw new Error(\"There is already an entity with name \\\"\".concat(e, \"\\\"\"));\n          }\n\n          this.nameMapping[e] = ++this.instanceCount;\n          this.entities.set(e, n);\n        }\n      }, {\n        key: \"getEntityName\",\n        value: function getEntityName(e) {\n          var n = _get(_getPrototypeOf(LightweightWriter.prototype), \"getEntityName\", this).call(this, e);\n\n          if (!n) {\n            return n;\n          }\n\n          return \"\" + this.nameMapping[n];\n        }\n      }, {\n        key: \"stepPrologue\",\n        value: function stepPrologue() {\n          return \"dcl.subscribe('sceneStart');\\n\";\n        }\n      }, {\n        key: \"stepStartEntity\",\n        value: function stepStartEntity(e, n) {\n          return \"dcl.addEntity('\".concat(n, \"');\\n\");\n        }\n      }, {\n        key: \"stepSetEntityParent\",\n        value: function stepSetEntityParent(e, n, t) {\n          var a = \"0\";\n\n          if (t) {\n            a = this.getEntityName(t);\n\n            if (!a) {\n              throw new Error(\"Parent entity of \\\"\".concat(_get(_getPrototypeOf(LightweightWriter.prototype), \"getEntityName\", this).call(this, e), \"\\\" is missing, you should add parents first.\"));\n            }\n          }\n\n          return \"dcl.setParent('\".concat(n, \"', '\").concat(a, \"');\\n\");\n        }\n      }, {\n        key: \"stepWriteComponentDeclaration\",\n        value: function stepWriteComponentDeclaration(e, n, t, r) {\n          if (a.getComponentName(n) === \"engine.transform\") {\n            return \"dcl.updateEntityComponent('\".concat(this.getEntityName(e), \"', 'engine.transform', \").concat(a.getComponentClassId(n), \", JSON.stringify(\").concat(JSON.stringify(n), \"));\\n\");\n          }\n\n          return \"dcl.componentCreated('\".concat(t, \"', '\").concat(a.getComponentName(n), \"', \").concat(a.getComponentClassId(n), \");\\ndcl.componentUpdated('\").concat(t, \"', JSON.stringify(\").concat(JSON.stringify(n), \"));\\n\");\n        }\n      }, {\n        key: \"stepSetComponentParent\",\n        value: function stepSetComponentParent(e, n, t, r) {\n          var o = a.getComponentClassId(r);\n\n          if (o !== null) {\n            if (a.isDisposableComponent(r)) {\n              return \"dcl.attachEntityComponent('\".concat(n, \"', '\").concat(a.getComponentName(r), \"', '\").concat(t, \"');\\n\");\n            }\n          }\n\n          return \"\";\n        }\n      }, {\n        key: \"writeComponent\",\n        value: function writeComponent(e, n, t) {\n          return \"\";\n        }\n      }]);\n\n      return LightweightWriter;\n    }(r.SceneWriter);\n\n    n.LightweightWriter = LightweightWriter;\n  },\n  546: function _(e, n) {\n    \"use strict\";\n\n    Object.defineProperty(n, \"__esModule\", {\n      value: true\n    });\n\n    function isLowerCaseChar(e) {\n      return !!e && e.length === 1 && e.toLowerCase() === e;\n    }\n\n    n.isLowerCaseChar = isLowerCaseChar;\n\n    function toCamelCase(e) {\n      var n = \"\";\n      var t = true;\n\n      for (var a = 0; a < e.length; a++) {\n        n += t ? e[a].toLowerCase() : e[a];\n\n        if (a < e.length - 2 && isLowerCaseChar(e[a + 2])) {\n          t = false;\n        }\n      }\n\n      return n;\n    }\n\n    n.toCamelCase = toCamelCase;\n    n.blacklist = [\"Shape\", \"ObservableComponent\"];\n  },\n  623: function _(e, n, t) {\n    \"use strict\";\n\n    Object.defineProperty(n, \"__esModule\", {\n      value: true\n    });\n    var a = t(546);\n\n    var SceneWriter = /*#__PURE__*/function () {\n      function SceneWriter(e, n) {\n        _classCallCheck(this, SceneWriter);\n\n        this.entities = new Map();\n        this.DCL = e;\n        this.map = n || t(847);\n      }\n\n      _createClass(SceneWriter, [{\n        key: \"addEntity\",\n        value: function addEntity(e, n) {\n          if (this.entities.has(e)) {\n            throw new Error(\"There is already an entity with name \\\"\".concat(e, \"\\\"\"));\n          }\n\n          this.entities.set(e, n);\n        }\n      }, {\n        key: \"emitCode\",\n        value: function emitCode() {\n          var _this2 = this;\n\n          var e = [];\n          e.push(this.stepPrologue());\n          var n = {\n            instanceToName: new Map(),\n            takenNames: new Set()\n          };\n          this.entities.forEach(function (t) {\n            e.push(_this2.writeEntity(t, n).trim() + \"\\n\");\n          });\n          return e.join(\"\\n\");\n        }\n      }, {\n        key: \"writeEntity\",\n        value: function writeEntity(e, n) {\n          var t = [];\n          var r = this.getEntityName(e);\n          t.push(this.stepStartEntity(e, r));\n          var o = e.getParent();\n          t.push(this.stepSetEntityParent(e, r, o));\n          var d = Object.keys(e.components);\n\n          for (var _i = 0, _d = d; _i < _d.length; _i++) {\n            var _o = _d[_i];\n            var _d2 = e.components[_o];\n\n            try {\n              var _o2 = n.instanceToName.get(_d2);\n\n              if (!_o2) {\n                var _r = this.getConstructorName(_d2);\n\n                var i = a.toCamelCase(_r);\n                var c = 1;\n                _o2 = i;\n\n                while (n.takenNames.has(_o2)) {\n                  c++;\n                  _o2 = \"\".concat(i).concat(c);\n                }\n\n                var s = this.writeComponent(_o2, _r, _d2);\n                n.takenNames.add(_o2);\n                n.instanceToName.set(_d2, _o2);\n                t.push(this.stepWriteComponentDeclaration(e, _d2, _o2, s));\n              }\n\n              t.push(this.stepSetComponentParent(e, r, _o2, _d2));\n            } catch (e) {\n              console.log(e, e.stack);\n            }\n          }\n\n          return t.join(\"\");\n        }\n      }, {\n        key: \"stepPrologue\",\n        value: function stepPrologue() {\n          return \"\";\n        }\n      }, {\n        key: \"stepStartEntity\",\n        value: function stepStartEntity(e, n) {\n          return \"const \".concat(n, \" = new Entity('\").concat(n, \"')\\n\");\n        }\n      }, {\n        key: \"stepSetEntityParent\",\n        value: function stepSetEntityParent(e, n, t) {\n          if (t) {\n            var _e = this.getEntityName(t);\n\n            if (!_e) {\n              throw new Error(\"Parent entity of \\\"\".concat(n, \"\\\" is missing, you should add parents first.\"));\n            }\n\n            return \"engine.addEntity(\".concat(n, \")\\n\").concat(n, \".setParent(\").concat(_e, \")\\n\");\n          }\n\n          return \"engine.addEntity(\".concat(n, \")\\n\");\n        }\n      }, {\n        key: \"stepWriteComponentDeclaration\",\n        value: function stepWriteComponentDeclaration(e, n, t, a) {\n          return \"const \".concat(t, \" = \").concat(a, \"\\n\");\n        }\n      }, {\n        key: \"stepSetComponentParent\",\n        value: function stepSetComponentParent(e, n, t, a) {\n          return \"\".concat(n, \".addComponentOrReplace(\").concat(t, \")\\n\");\n        }\n      }, {\n        key: \"getConstructorName\",\n        value: function getConstructorName(e) {\n          var n = this.map.members[0];\n          var t = n.members.filter(function (e) {\n            return e.kind === \"Class\" && !a.blacklist.includes(e.name);\n          }).map(function (e) {\n            return e.name;\n          });\n\n          var _iterator = _createForOfIteratorHelper(t),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _n = _step.value;\n\n              if (e instanceof this.DCL[_n]) {\n                return _n;\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      }, {\n        key: \"writeComponent\",\n        value: function writeComponent(e, n, t) {\n          if (n === \"Transform\") {\n            return \"new Transform(\".concat(this.getTransformComponentData(t.data), \")\");\n          } else {\n            var _a = \"new \".concat(n, \"(\").concat(this.getConstructorValues(n, t.data), \")\");\n\n            var r = this.getConstructorParameters(n).reduce(function (e, n) {\n              return e.add(n);\n            }, new Set());\n            var o = this.getReadOnlyProperties(n).reduce(function (e, n) {\n              return e.add(n);\n            }, new Set());\n            var d = Object.keys(t.data).filter(function (e) {\n              return !r.has(e) && !o.has(e);\n            });\n\n            var _iterator2 = _createForOfIteratorHelper(d),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var _n2 = _step2.value;\n                _a += \"\\n\".concat(e, \".\").concat(_n2, \" = \").concat(JSON.stringify(t.data[_n2]));\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n            return _a;\n          }\n        }\n      }, {\n        key: \"getEntityName\",\n        value: function getEntityName(e) {\n          var _iterator3 = _createForOfIteratorHelper(this.entities),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _n3 = _step3.value;\n\n              if (_n3[1] === e) {\n                return _n3[0];\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n      }, {\n        key: \"getConstructorValues\",\n        value: function getConstructorValues(e, n) {\n          var t = this.getConstructorParameters(e);\n\n          if (!t) {\n            return \"\";\n          }\n\n          var a = t.map(function (e) {\n            return JSON.stringify(n[e]);\n          });\n          return a.join(\", \");\n        }\n      }, {\n        key: \"getConstructorParameters\",\n        value: function getConstructorParameters(e) {\n          var n = this.map.members[0];\n          var t = n.members.find(function (n) {\n            return n.name === e;\n          });\n          var a = t.members.find(function (e) {\n            return e.kind === \"Constructor\";\n          });\n\n          if (a) {\n            return a.parameters.map(function (e) {\n              return e.parameterName;\n            });\n          }\n\n          return [];\n        }\n      }, {\n        key: \"getReadOnlyProperties\",\n        value: function getReadOnlyProperties(e) {\n          var n = this.map.members[0];\n          var t = n.members.find(function (n) {\n            return n.name === e;\n          });\n          var a = t.members.filter(function (e) {\n            return e.kind === \"Property\" && e.excerptTokens.some(function (e) {\n              return e.text.toLowerCase().includes(\"readonly\");\n            });\n          }).map(function (e) {\n            return e.name;\n          });\n          return a;\n        }\n      }, {\n        key: \"getTransformComponentData\",\n        value: function getTransformComponentData(e) {\n          var n = [];\n\n          for (var _t in e) {\n            if (e[_t] instanceof this.DCL.Vector3) {\n              n.push(\"\".concat(_t, \": new Vector3(\").concat(e[_t].x, \", \").concat(e[_t].y, \", \").concat(e[_t].z, \")\"));\n            }\n\n            if (e[_t] instanceof this.DCL.Quaternion) {\n              n.push(\"\".concat(_t, \": new Quaternion(\").concat(e[_t].x, \", \").concat(e[_t].y, \", \").concat(e[_t].z, \", \").concat(e[_t].w, \")\"));\n            }\n          }\n\n          return \"{\\n  \".concat(n.join(\",\\n  \"), \"\\n}\");\n        }\n      }]);\n\n      return SceneWriter;\n    }();\n\n    n.SceneWriter = SceneWriter;\n  },\n  732: function _(e, n, t) {\n    \"use strict\";\n\n    Object.defineProperty(n, \"__esModule\", {\n      value: true\n    });\n    var a = t(623);\n    n.SceneWriter = a.SceneWriter;\n    var r = t(336);\n    n.LightweightWriter = r.LightweightWriter;\n    n.default = a.SceneWriter;\n  },\n  847: function _(e) {\n    e.exports = {\n      metadata: {\n        toolPackage: \"@microsoft/api-extractor\",\n        toolVersion: \"7.4.4\",\n        schemaVersion: 1003,\n        oldestForwardsCompatibleVersion: 1001\n      },\n      kind: \"Package\",\n      canonicalReference: \"decentraland-ecs!\",\n      docComment: \"\",\n      name: \"decentraland-ecs\",\n      members: [{\n        kind: \"EntryPoint\",\n        canonicalReference: \"decentraland-ecs!\",\n        name: \"\",\n        members: [{\n          kind: \"Enum\",\n          canonicalReference: \"decentraland-ecs!ActionButton:enum\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare enum ActionButton \"\n          }],\n          releaseTag: \"Public\",\n          name: \"ActionButton\",\n          members: [{\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!ActionButton.ANY:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"ANY = \"\n            }, {\n              kind: \"Content\",\n              text: '\"ANY\"'\n            }],\n            releaseTag: \"Public\",\n            name: \"ANY\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!ActionButton.POINTER:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"POINTER = \"\n            }, {\n              kind: \"Content\",\n              text: '\"POINTER\"'\n            }],\n            releaseTag: \"Public\",\n            name: \"POINTER\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!ActionButton.PRIMARY:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"PRIMARY = \"\n            }, {\n              kind: \"Content\",\n              text: '\"PRIMARY\"'\n            }],\n            releaseTag: \"Public\",\n            name: \"PRIMARY\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!ActionButton.SECONDARY:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"SECONDARY = \"\n            }, {\n              kind: \"Content\",\n              text: '\"SECONDARY\"'\n            }],\n            releaseTag: \"Public\",\n            name: \"SECONDARY\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }]\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Angle:class\",\n          docComment: \"/**\\n * Defines angle representation\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Angle \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Angle\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Angle:constructor(1)\",\n            docComment: '/**\\n * Creates an Angle object of \"radians\" radians (float).\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(radians: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"radians\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Angle.BetweenTwoPoints:member(1)\",\n            docComment: \"/**\\n * Gets a new Angle object valued with the angle value in radians between the two given vectors\\n *\\n * @param a - defines first vector\\n *\\n * @param b - defines second vector\\n *\\n * @returns a new Angle\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static BetweenTwoPoints(a: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \", b: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Angle\",\n              canonicalReference: \"decentraland-ecs!Angle:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"a\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"b\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"BetweenTwoPoints\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Angle#degrees:member(1)\",\n            docComment: \"/**\\n * Get value in degrees\\n *\\n * @returns the Angle value in degrees (float)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"degrees(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"degrees\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Angle.FromDegrees:member(1)\",\n            docComment: \"/**\\n * Gets a new Angle object from the given float in degrees\\n *\\n * @param degrees - defines the angle value in degrees\\n *\\n * @returns a new Angle\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromDegrees(degrees: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Angle\",\n              canonicalReference: \"decentraland-ecs!Angle:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"degrees\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"FromDegrees\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Angle.FromRadians:member(1)\",\n            docComment: \"/**\\n * Gets a new Angle object from the given float in radians\\n *\\n * @param radians - defines the angle value in radians\\n *\\n * @returns a new Angle\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromRadians(radians: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Angle\",\n              canonicalReference: \"decentraland-ecs!Angle:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"radians\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"FromRadians\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Angle#radians:member(1)\",\n            docComment: \"/**\\n * Get value in radians\\n *\\n * @returns the Angle value in radians (float)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"radians(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"radians\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!AnimationParams:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type AnimationParams = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    looping?: boolean;\\n    speed?: number;\\n    weight?: number;\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"AnimationParams\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!AnimationState:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class AnimationState extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"AnimationState\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!AnimationState:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `AnimationState` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(clip: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \", params?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"AnimationParams\",\n              canonicalReference: \"decentraland-ecs!AnimationParams:type\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"clip\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"params\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AnimationState#clip:member\",\n            docComment: \"/**\\n * Name of the animation in the model\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly clip: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"clip\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AnimationState#looping:member\",\n            docComment: \"/**\\n * Does the animation loop?, default: true\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"looping: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"looping\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!AnimationState#pause:member(1)\",\n            docComment: \"/**\\n * Pauses the animation\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"pause(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"pause\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!AnimationState#play:member(1)\",\n            docComment: \"/**\\n * Starts the animation\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"play(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"play\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AnimationState#playing:member\",\n            docComment: \"/**\\n * Is the animation playing? default: true\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"playing: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"playing\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!AnimationState#reset:member(1)\",\n            docComment: \"/**\\n * Resets the animation state to the frame 0\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"reset(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"reset\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!AnimationState#setParams:member(1)\",\n            docComment: \"/**\\n * Sets the clip parameters\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"setParams(params: \"\n            }, {\n              kind: \"Reference\",\n              text: \"AnimationParams\",\n              canonicalReference: \"decentraland-ecs!AnimationParams:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"this\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"params\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"setParams\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AnimationState#shouldReset:member\",\n            docComment: \"/**\\n * Does any anyone asked to reset the animation? default: false\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shouldReset: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shouldReset\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AnimationState#speed:member\",\n            docComment: \"/**\\n * The animation speed\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"speed: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"speed\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!AnimationState#stop:member(1)\",\n            docComment: \"/**\\n * Resets and pauses the animation\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"stop(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"stop\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!AnimationState#toJSON:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toJSON(): \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toJSON\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AnimationState#weight:member\",\n            docComment: \"/**\\n * Weight of the animation, values from 0 to 1, used to blend several animations. default: 1\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"weight: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"weight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Animator:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Animator extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"Shape\",\n            canonicalReference: \"decentraland-ecs!Shape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Animator\",\n          members: [{\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Animator#addClip:member(1)\",\n            docComment: \"/**\\n * Adds an AnimationState to the animation lists.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addClip(clip: \"\n            }, {\n              kind: \"Reference\",\n              text: \"AnimationState\",\n              canonicalReference: \"decentraland-ecs!AnimationState:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"this\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"clip\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"addClip\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Animator#getClip:member(1)\",\n            docComment: \"/**\\n * Gets the animation clip instance for the specified clip name. If the clip doesn't exist a new one will be created.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getClip(clipName: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"AnimationState\",\n              canonicalReference: \"decentraland-ecs!AnimationState:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"clipName\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"getClip\"\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Arc2:class\",\n          docComment: \"/**\\n * This represents an arc in a 2d space.\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Arc2 \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Arc2\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Arc2:constructor(1)\",\n            docComment: \"/**\\n * Creates an Arc object from the three given points : start, middle and end.\\n *\\n * @param startPoint - Defines the start point of the arc\\n *\\n * @param midPoint - Defines the midlle point of the arc\\n *\\n * @param endPoint - Defines the end point of the arc\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(\\n    startPoint: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    midPoint: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    endPoint: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"startPoint\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"midPoint\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"endPoint\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Arc2#angle:member\",\n            docComment: \"/**\\n * Defines the angle of the arc (from mid point to end point).\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"angle: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Angle\",\n              canonicalReference: \"decentraland-ecs!Angle:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"angle\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Arc2#centerPoint:member\",\n            docComment: \"/**\\n * Defines the center point of the arc.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"centerPoint: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"centerPoint\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Arc2#endPoint:member\",\n            docComment: \"/**\\n * Defines the end point of the arc\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"endPoint: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"endPoint\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Arc2#midPoint:member\",\n            docComment: \"/**\\n * Defines the mid point of the arc\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"midPoint: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"midPoint\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Arc2#orientation:member\",\n            docComment: \"/**\\n * Defines the orientation of the arc (clock wise/counter clock wise).\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"orientation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Orientation\",\n              canonicalReference: \"decentraland-ecs!Orientation:enum\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"orientation\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Arc2#radius:member\",\n            docComment: \"/**\\n * Defines the radius of the arc.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"radius: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"radius\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Arc2#startAngle:member\",\n            docComment: \"/**\\n * Defines the start angle of the arc (from start point to middle point).\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"startAngle: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Angle\",\n              canonicalReference: \"decentraland-ecs!Angle:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"startAngle\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Arc2#startPoint:member\",\n            docComment: \"/**\\n * Defines the start point of the arc\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"startPoint: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"startPoint\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Attachable:class\",\n          docComment: \"/**\\n * Entities can be attached to each other by using the `setParent` method. However, there are cases where we might want to attach entities to other objects that are not entities created by the same scene (for example, the player's avatar). For those cases, we have this class.\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare abstract class Attachable \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Attachable\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Attachable.AVATAR:member\",\n            docComment: \"/**\\n * Used to attach entities to the avatar. Entities will follow the avatar when it moves\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static readonly AVATAR: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Attachable\",\n              canonicalReference: \"decentraland-ecs!Attachable:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"AVATAR\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: true\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Attachable.FIRST_PERSON_CAMERA:member\",\n            docComment: \"/**\\n * Used to attach entities to the camera. When in first person mode, the attached entities will also rotate with the camera\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static readonly FIRST_PERSON_CAMERA: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Attachable\",\n              canonicalReference: \"decentraland-ecs!Attachable:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"FIRST_PERSON_CAMERA\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: true\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!AudioClip:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class AudioClip extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"AudioClip\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!AudioClip:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `AudioClip` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(url: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"url\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AudioClip#loop:member\",\n            docComment: \"/**\\n * Is this clip looping by default?\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"loop: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"loop\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AudioClip#url:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly url: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"url\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AudioClip#volume:member\",\n            docComment: \"/**\\n * Clip's master volume. This volume affects all the AudioSources. Valid ranges from 0 to 1\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"volume: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"volume\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!AudioSource:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class AudioSource extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"AudioSource\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!AudioSource:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `AudioSource` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(audioClip: \"\n            }, {\n              kind: \"Reference\",\n              text: \"AudioClip\",\n              canonicalReference: \"decentraland-ecs!AudioClip:class\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"audioClip\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AudioSource#audioClip:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly audioClip: \"\n            }, {\n              kind: \"Reference\",\n              text: \"AudioClip\",\n              canonicalReference: \"decentraland-ecs!AudioClip:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"audioClip\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AudioSource#audioClipId:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly audioClipId: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"audioClipId\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AudioSource#loop:member\",\n            docComment: \"/**\\n * Is this clip looping by default?\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"loop: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"loop\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AudioSource#pitch:member\",\n            docComment: \"/**\\n * Pitch, default: 1.0, range from 0.0 to MaxFloat\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"pitch: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"pitch\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AudioSource#playing:member\",\n            docComment: \"/**\\n * Is this AudioSource playing?\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"playing: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"playing\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!AudioSource#playOnce:member(1)\",\n            docComment: \"/**\\n * Disables the looping and plays the current source once. If the sound was playing, it stops and starts over.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"playOnce(): \"\n            }, {\n              kind: \"Content\",\n              text: \"this\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"playOnce\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AudioSource#volume:member\",\n            docComment: \"/**\\n * Clip's master volume. This volume affects all the AudioSources. Valid ranges from 0 to 1\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"volume: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"volume\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!AudioStream:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class AudioStream extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"AudioStream\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!AudioStream:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `AudioStream` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(url: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"url\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AudioStream#playing:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"playing: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"playing\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AudioStream#url:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly url: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"url\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AudioStream#volume:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"volume: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"volume\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!AvatarForRenderer:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type AvatarForRenderer = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    bodyShape: \"\n          }, {\n            kind: \"Reference\",\n            text: \"WearableId\",\n            canonicalReference: \"decentraland-ecs!WearableId:type\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    skinColor: \"\n          }, {\n            kind: \"Reference\",\n            text: \"ReadOnlyColor4\",\n            canonicalReference: \"decentraland-ecs!ReadOnlyColor4:type\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    hairColor: \"\n          }, {\n            kind: \"Reference\",\n            text: \"ReadOnlyColor4\",\n            canonicalReference: \"decentraland-ecs!ReadOnlyColor4:type\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    eyeColor: \"\n          }, {\n            kind: \"Reference\",\n            text: \"ReadOnlyColor4\",\n            canonicalReference: \"decentraland-ecs!ReadOnlyColor4:type\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    wearables: \"\n          }, {\n            kind: \"Reference\",\n            text: \"WearableId\",\n            canonicalReference: \"decentraland-ecs!WearableId:type\"\n          }, {\n            kind: \"Content\",\n            text: \"[];\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"AvatarForRenderer\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 12\n          }\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!AvatarShape:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class AvatarShape extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"AvatarShape\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AvatarShape#bodyShape:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"bodyShape: \"\n            }, {\n              kind: \"Reference\",\n              text: \"WearableId\",\n              canonicalReference: \"decentraland-ecs!WearableId:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"bodyShape\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!AvatarShape.Dummy:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Dummy(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"AvatarShape\",\n              canonicalReference: \"decentraland-ecs!AvatarShape:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Dummy\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AvatarShape#expressionTriggerId:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"expressionTriggerId: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"expressionTriggerId\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AvatarShape#expressionTriggerTimestamp:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"expressionTriggerTimestamp: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"expressionTriggerTimestamp\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AvatarShape#eyeColor:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"eyeColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyColor4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyColor4:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"eyeColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AvatarShape#hairColor:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hairColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyColor4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyColor4:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"hairColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AvatarShape#id:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"id: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"id\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AvatarShape#name:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"name: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"name\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AvatarShape#skinColor:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"skinColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyColor4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyColor4:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"skinColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AvatarShape#useDummyModel:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"useDummyModel: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"useDummyModel\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!AvatarShape#wearables:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"wearables: \"\n            }, {\n              kind: \"Reference\",\n              text: \"WearableId\",\n              canonicalReference: \"decentraland-ecs!WearableId:type\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"wearables\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Axis:class\",\n          docComment: \"/**\\n * Defines the 3 main axes\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Axis \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Axis\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Axis.X:member\",\n            docComment: \"/**\\n * X axis\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static X: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"X\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: true\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Axis.Y:member\",\n            docComment: \"/**\\n * Y axis\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Y: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Y\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: true\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Axis.Z:member\",\n            docComment: \"/**\\n * Z axis\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Z: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Z\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: true\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!BasicAvatarInfo:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface BasicAvatarInfo \"\n          }],\n          releaseTag: \"Public\",\n          name: \"BasicAvatarInfo\",\n          members: [{\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!BasicAvatarInfo#name:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"name: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"name\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!BasicAvatarInfo#userId:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"userId: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"userId\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          extendsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!BasicMaterial:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class BasicMaterial extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"BasicMaterial\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!BasicMaterial#alphaTest:member\",\n            docComment: \"/**\\n * A number between 0 and 1. Any pixel with an alpha lower than this value will be shown as transparent.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"alphaTest: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"alphaTest\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!BasicMaterial#texture:member\",\n            docComment: \"/**\\n * The source of the texture image.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"texture?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Texture\",\n              canonicalReference: \"decentraland-ecs!Texture:class\"\n            }, {\n              kind: \"Content\",\n              text: \" | \"\n            }, {\n              kind: \"Reference\",\n              text: \"VideoTexture\",\n              canonicalReference: \"decentraland-ecs!VideoTexture:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"texture\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 4\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!BezierCurve:class\",\n          docComment: \"/**\\n * Class used to represent a Bezier curve\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class BezierCurve \"\n          }],\n          releaseTag: \"Public\",\n          name: \"BezierCurve\",\n          members: [{\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!BezierCurve.Interpolate:member(1)\",\n            docComment: '/**\\n * Returns the cubic Bezier interpolated value (float) at \"t\" (float) from the given x1, y1, x2, y2 floats\\n *\\n * @param t - defines the time\\n *\\n * @param x1 - defines the left coordinate on X axis\\n *\\n * @param y1 - defines the left coordinate on Y axis\\n *\\n * @param x2 - defines the right coordinate on X axis\\n *\\n * @param y2 - defines the right coordinate on Y axis\\n *\\n * @returns the interpolated value\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Interpolate(t: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", x1: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y1: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", x2: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y2: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"t\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"x1\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"y1\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"x2\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"y2\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }],\n            name: \"Interpolate\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Billboard:class\",\n          docComment: \"/**\\n * Billboard defines a behavior that makes the entity face the camera in any moment.\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Billboard extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Billboard\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Billboard:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `Billboard` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(x?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \", y?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \", z?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Billboard#x:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"x: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"x\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Billboard#y:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"y: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"y\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Billboard#z:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"z: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"z\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!BodyShapeRespresentation:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type BodyShapeRespresentation = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    bodyShapes: string[];\\n    mainFile: string;\\n    contents: \"\n          }, {\n            kind: \"Reference\",\n            text: \"FileAndHash\",\n            canonicalReference: \"decentraland-ecs!FileAndHash:type\"\n          }, {\n            kind: \"Content\",\n            text: \"[];\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"BodyShapeRespresentation\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 4\n          }\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!BoxShape:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class BoxShape extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"Shape\",\n            canonicalReference: \"decentraland-ecs!Shape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"BoxShape\",\n          members: [],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Camera:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Camera \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Camera\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Camera:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `Camera` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor();\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: []\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Camera#feetPosition:member\",\n            docComment: \"/**\\n * Feet position, relative to the parcel.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly feetPosition: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"feetPosition\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Camera#position:member\",\n            docComment: \"/**\\n * Camera position, relative to the parcel.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly position: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"position\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Camera#rotation:member\",\n            docComment: \"/**\\n * Camera rotation\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly rotation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"rotation\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Camera#worldPosition:member\",\n            docComment: \"/**\\n * Camera position, absolute.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly worldPosition: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"worldPosition\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!CircleShape:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class CircleShape extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"Shape\",\n            canonicalReference: \"decentraland-ecs!Shape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"CircleShape\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!CircleShape#arc:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"arc?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"arc\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!CircleShape#segments:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"segments?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"segments\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Color3:class\",\n          docComment: \"/**\\n * Class used to hold a RBG color\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Color3 \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Color3\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Color3:constructor(1)\",\n            docComment: \"/**\\n * Creates a new Color3 object from red, green, blue values, all between 0 and 1\\n *\\n * @param r - defines the red component (between 0 and 1, default is 0)\\n *\\n * @param g - defines the green component (between 0 and 1, default is 0)\\n *\\n * @param b - defines the blue component (between 0 and 1, default is 0)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(\\n    r?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    g?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    b?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"r\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"g\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"b\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#add:member(1)\",\n            docComment: \"/**\\n * Creates a new Color3 set with the added values of the current Color3 and of the given one\\n *\\n * @param otherColor - defines the second operand\\n *\\n * @returns the new Color3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"add(otherColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherColor\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"add\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#addToRef:member(1)\",\n            docComment: '/**\\n * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\\n *\\n * @param otherColor - defines the second operand\\n *\\n * @param result - defines Color3 object to store the result into\\n *\\n * @returns the unmodified current Color3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addToRef(otherColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherColor\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"addToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#asArray:member(1)\",\n            docComment: \"/**\\n * Returns a new array populated with 3 numeric elements : red, green and blue values\\n *\\n * @returns the new array\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"asArray(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"asArray\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Color3#b:member\",\n            docComment: \"/**\\n * Defines the blue component (between 0 and 1, default is 0)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"b: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"b\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.Black:member(1)\",\n            docComment: \"/**\\n * Returns a Color3 value containing a black color\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Black(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Black\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.Blue:member(1)\",\n            docComment: \"/**\\n * Returns a Color3 value containing a blue color\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Blue(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Blue\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#clampToRef:member(1)\",\n            docComment: '/**\\n * Clamps the rgb values by the min and max values and stores the result into \"result\"\\n *\\n * @param min - defines minimum clamping value (default is 0)\\n *\\n * @param max - defines maximum clamping value (default is 1)\\n *\\n * @param result - defines color to store the result into\\n *\\n * @returns the original Color3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"clampToRef(min: \"\n            }, {\n              kind: \"Content\",\n              text: \"number | undefined\"\n            }, {\n              kind: \"Content\",\n              text: \", max: \"\n            }, {\n              kind: \"Content\",\n              text: \"number | undefined\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"min\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"max\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"clampToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#clone:member(1)\",\n            docComment: \"/**\\n * Copy the current object\\n *\\n * @returns a new Color3 copied the current one\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"clone(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"clone\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#copyFrom:member(1)\",\n            docComment: \"/**\\n * Copies the rgb values from the source in the current Color3\\n *\\n * @param source - defines the source Color3 object\\n *\\n * @returns the updated Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFrom(source: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"source\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"copyFrom\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#copyFromFloats:member(1)\",\n            docComment: \"/**\\n * Updates the Color3 rgb values from the given floats\\n *\\n * @param r - defines the red component to read from\\n *\\n * @param g - defines the green component to read from\\n *\\n * @param b - defines the blue component to read from\\n *\\n * @returns the current Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFromFloats(r: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", g: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", b: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"r\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"g\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"b\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"copyFromFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#equals:member(1)\",\n            docComment: \"/**\\n * Determines equality between Color3 objects\\n *\\n * @param otherColor - defines the second operand\\n *\\n * @returns true if the rgb values are equal to the given ones\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"equals(otherColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherColor\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"equals\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#equalsFloats:member(1)\",\n            docComment: \"/**\\n * Determines equality between the current Color3 object and a set of r,b,g values\\n *\\n * @param r - defines the red component to check\\n *\\n * @param g - defines the green component to check\\n *\\n * @param b - defines the blue component to check\\n *\\n * @returns true if the rgb values are equal to the given ones\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"equalsFloats(r: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", g: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", b: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"r\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"g\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"b\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"equalsFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.FromArray:member(1)\",\n            docComment: \"/**\\n * Creates a new Vector3 from the starting index of the given array\\n *\\n * @param array - defines the source array\\n *\\n * @param offset - defines an offset in the source array\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromArray(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ArrayLike\",\n              canonicalReference: \"!ArrayLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<number>\"\n            }, {\n              kind: \"Content\",\n              text: \", offset?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }],\n            name: \"FromArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.FromHexString:member(1)\",\n            docComment: \"/**\\n * Creates a new Color3 from the string containing valid hexadecimal values\\n *\\n * @param hex - defines a string containing valid hexadecimal values\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromHexString(hex: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"hex\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"FromHexString\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.FromInts:member(1)\",\n            docComment: \"/**\\n * Creates a new Color3 from integer values (less than 256)\\n *\\n * @param r - defines the red component to read from (value between 0 and 255)\\n *\\n * @param g - defines the green component to read from (value between 0 and 255)\\n *\\n * @param b - defines the blue component to read from (value between 0 and 255)\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromInts(r: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", g: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", b: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"r\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"g\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"b\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"FromInts\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Color3#g:member\",\n            docComment: \"/**\\n * Defines the green component (between 0 and 1, default is 0)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"g: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"g\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#getClassName:member(1)\",\n            docComment: '/**\\n * Returns the string \"Color3\"\\n *\\n * @returns \"Color3\"\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getClassName(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getClassName\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#getHashCode:member(1)\",\n            docComment: \"/**\\n * Compute the Color3 hash code\\n *\\n * @returns an unique number that can be used to hash Color3 objects\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getHashCode(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getHashCode\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.Gray:member(1)\",\n            docComment: \"/**\\n * Returns a Color3 value containing a gray color\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Gray(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Gray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.Green:member(1)\",\n            docComment: \"/**\\n * Returns a Color3 value containing a green color\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Green(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Green\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.Lerp:member(1)\",\n            docComment: '/**\\n * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\\n *\\n * @param start - defines the start Color3 value\\n *\\n * @param end - defines the end Color3 value\\n *\\n * @param amount - defines the gradient value between start and end\\n *\\n * @returns a new Color3 object\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Lerp(start: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", end: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"start\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"end\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Lerp\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.LerpToRef:member(1)\",\n            docComment: '/**\\n * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\\n *\\n * @param left - defines the start value\\n *\\n * @param right - defines the end value\\n *\\n * @param amount - defines the gradient factor\\n *\\n * @param result - defines the Color3 object where to store the result\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static LerpToRef(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"LerpToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.Magenta:member(1)\",\n            docComment: \"/**\\n * Returns a Color3 value containing a magenta color\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Magenta(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Magenta\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#multiply:member(1)\",\n            docComment: \"/**\\n * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\\n *\\n * @param otherColor - defines the second operand\\n *\\n * @returns the new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiply(otherColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherColor\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"multiply\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#multiplyToRef:member(1)\",\n            docComment: '/**\\n * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\\n *\\n * @param otherColor - defines the second operand\\n *\\n * @param result - defines the Color3 object where to store the result\\n *\\n * @returns the current Color3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyToRef(otherColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherColor\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"multiplyToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.Purple:member(1)\",\n            docComment: \"/**\\n * Returns a Color3 value containing a purple color\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Purple(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Purple\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Color3#r:member\",\n            docComment: \"/**\\n * Defines the red component (between 0 and 1, default is 0)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"r: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"r\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.Random:member(1)\",\n            docComment: \"/**\\n * Returns a Color3 value containing a random color\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Random(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Random\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.Red:member(1)\",\n            docComment: \"/**\\n * Returns a Color3 value containing a red color\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Red(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Red\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#scale:member(1)\",\n            docComment: \"/**\\n * Multiplies in place each rgb value by scale\\n *\\n * @param scale - defines the scaling factor\\n *\\n * @returns the updated Color3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scale(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"scale\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#scaleAndAddToRef:member(1)\",\n            docComment: \"/**\\n * Scale the current Color3 values by a factor and add the result to a given Color3\\n *\\n * @param scale - defines the scale factor\\n *\\n * @param result - defines color to store the result into\\n *\\n * @returns the unmodified current Color3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleAndAddToRef(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"scaleAndAddToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#scaleToRef:member(1)\",\n            docComment: '/**\\n * Multiplies the rgb values by scale and stores the result into \"result\"\\n *\\n * @param scale - defines the scaling factor\\n *\\n * @param result - defines the Color3 object where to store the result\\n *\\n * @returns the unmodified current Color3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleToRef(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"scaleToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#set:member(1)\",\n            docComment: \"/**\\n * Updates the Color3 rgb values from the given floats\\n *\\n * @param r - defines the red component to read from\\n *\\n * @param g - defines the green component to read from\\n *\\n * @param b - defines the blue component to read from\\n *\\n * @returns the current Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"set(r: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", g: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", b: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"r\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"g\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"b\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"set\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#subtract:member(1)\",\n            docComment: \"/**\\n * Returns a new Color3 set with the subtracted values of the given one from the current Color3\\n *\\n * @param otherColor - defines the second operand\\n *\\n * @returns the new Color3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtract(otherColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherColor\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"subtract\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#subtractToRef:member(1)\",\n            docComment: '/**\\n * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\\n *\\n * @param otherColor - defines the second operand\\n *\\n * @param result - defines Color3 object to store the result into\\n *\\n * @returns the unmodified current Color3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtractToRef(otherColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherColor\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"subtractToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.Teal:member(1)\",\n            docComment: \"/**\\n * Returns a Color3 value containing a teal color\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Teal(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Teal\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#toArray:member(1)\",\n            docComment: \"/**\\n * Stores in the given array from the given starting index the red, green, blue values as successive elements\\n *\\n * @param array - defines the array where to store the r,g,b components\\n *\\n * @param index - defines an optional index in the target array to define where to start storing values\\n *\\n * @returns the current Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toArray(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"FloatArray\",\n              canonicalReference: \"decentraland-ecs!FloatArray:type\"\n            }, {\n              kind: \"Content\",\n              text: \", index?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"index\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"toArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#toColor4:member(1)\",\n            docComment: \"/**\\n * Returns a new Color4 object from the current Color3 and the given alpha\\n *\\n * @param alpha - defines the alpha component on the new Color4 object (default is 1)\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toColor4(alpha?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"alpha\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"toColor4\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#toGammaSpace:member(1)\",\n            docComment: \"/**\\n * Computes a new Color3 converted from the current one to gamma space\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toGammaSpace(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toGammaSpace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#toGammaSpaceToRef:member(1)\",\n            docComment: '/**\\n * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\\n *\\n * @param convertedColor - defines the Color3 object where to store the gamma space version\\n *\\n * @returns the unmodified Color3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toGammaSpaceToRef(convertedColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"convertedColor\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"toGammaSpaceToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#toHexString:member(1)\",\n            docComment: \"/**\\n * Compute the Color3 hexadecimal code as a string\\n *\\n * @returns a string containing the hexadecimal representation of the Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toHexString(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toHexString\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#toJSON:member(1)\",\n            docComment: \"/**\\n * Serializes Color3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toJSON(): \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        r: number;\\n        g: number;\\n        b: number;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toJSON\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#toLinearSpace:member(1)\",\n            docComment: \"/**\\n * Computes a new Color3 converted from the current one to linear space\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toLinearSpace(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toLinearSpace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#toLinearSpaceToRef:member(1)\",\n            docComment: '/**\\n * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\\n *\\n * @param convertedColor - defines the Color3 object where to store the linear space version\\n *\\n * @returns the unmodified Color3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toLinearSpaceToRef(convertedColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"convertedColor\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"toLinearSpaceToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#toLuminance:member(1)\",\n            docComment: \"/**\\n * Returns the luminance value\\n *\\n * @returns a float value\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toLuminance(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toLuminance\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3#toString:member(1)\",\n            docComment: \"/**\\n * Creates a string with the Color3 current values\\n *\\n * @returns the string representation of the Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toString(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toString\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.White:member(1)\",\n            docComment: \"/**\\n * Returns a Color3 value containing a white color\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static White(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"White\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color3.Yellow:member(1)\",\n            docComment: \"/**\\n * Returns a Color3 value containing a yellow color\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Yellow(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Yellow\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Color4:class\",\n          docComment: \"/**\\n * Class used to hold a RBGA color\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Color4 \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Color4\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Color4:constructor(1)\",\n            docComment: \"/**\\n * Creates a new Color4 object from red, green, blue values, all between 0 and 1\\n *\\n * @param r - defines the red component (between 0 and 1, default is 0)\\n *\\n * @param g - defines the green component (between 0 and 1, default is 0)\\n *\\n * @param b - defines the blue component (between 0 and 1, default is 0)\\n *\\n * @param a - defines the alpha component (between 0 and 1, default is 1)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(\\n    r?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    g?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    b?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    a?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"r\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"g\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"b\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"a\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Color4#a:member\",\n            docComment: \"/**\\n * Defines the alpha component (between 0 and 1, default is 1)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"a: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"a\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#add:member(1)\",\n            docComment: \"/**\\n * Creates a new Color4 set with the added values of the current Color4 and of the given one\\n *\\n * @param right - defines the second operand\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"add(right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"add\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#addInPlace:member(1)\",\n            docComment: \"/**\\n * Adds in place the given Color4 values to the current Color4 object\\n *\\n * @param right - defines the second operand\\n *\\n * @returns the current updated Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addInPlace(right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"addInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#asArray:member(1)\",\n            docComment: \"/**\\n * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\\n *\\n * @returns the new array\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"asArray(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"asArray\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Color4#b:member\",\n            docComment: \"/**\\n * Defines the blue component (between 0 and 1, default is 0)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"b: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"b\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.Black:member(1)\",\n            docComment: \"/**\\n * Returns a Color4 value containing a black color\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Black(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Black\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.Blue:member(1)\",\n            docComment: \"/**\\n * Returns a Color4 value containing a blue color\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Blue(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Blue\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.CheckColors4:member(1)\",\n            docComment: \"/**\\n * Check the content of a given array and convert it to an array containing RGBA data If the original array was already containing count * 4 values then it is returned directly\\n *\\n * @param colors - defines the array to check\\n *\\n * @param count - defines the number of RGBA data to expect\\n *\\n * @returns an array containing count * 4 values (RGBA)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static CheckColors4(colors: \"\n            }, {\n              kind: \"Content\",\n              text: \"number[]\"\n            }, {\n              kind: \"Content\",\n              text: \", count: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"colors\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"count\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"CheckColors4\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#clampToRef:member(1)\",\n            docComment: '/**\\n * Clamps the rgb values by the min and max values and stores the result into \"result\"\\n *\\n * @param min - defines minimum clamping value (default is 0)\\n *\\n * @param max - defines maximum clamping value (default is 1)\\n *\\n * @param result - defines color to store the result into.\\n *\\n * @returns the cuurent Color4\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"clampToRef(min: \"\n            }, {\n              kind: \"Content\",\n              text: \"number | undefined\"\n            }, {\n              kind: \"Content\",\n              text: \", max: \"\n            }, {\n              kind: \"Content\",\n              text: \"number | undefined\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"min\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"max\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"clampToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.Clear:member(1)\",\n            docComment: \"/**\\n * Returns a Color4 value containing a transparent color\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Clear(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Clear\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#clone:member(1)\",\n            docComment: \"/**\\n * Creates a new Color4 copied from the current one\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"clone(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"clone\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#copyFrom:member(1)\",\n            docComment: \"/**\\n * Copies the given Color4 values into the current one\\n *\\n * @param source - defines the source Color4 object\\n *\\n * @returns the current updated Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFrom(source: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"source\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"copyFrom\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#copyFromFloats:member(1)\",\n            docComment: \"/**\\n * Copies the given float values into the current one\\n *\\n * @param r - defines the red component to read from\\n *\\n * @param g - defines the green component to read from\\n *\\n * @param b - defines the blue component to read from\\n *\\n * @param a - defines the alpha component to read from\\n *\\n * @returns the current updated Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFromFloats(r: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", g: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", b: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", a: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"r\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"g\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"b\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"a\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"copyFromFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.FromArray:member(1)\",\n            docComment: \"/**\\n * Creates a new Color4 from the starting index element of the given array\\n *\\n * @param array - defines the source array to read from\\n *\\n * @param offset - defines the offset in the source array\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromArray(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ArrayLike\",\n              canonicalReference: \"!ArrayLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<number>\"\n            }, {\n              kind: \"Content\",\n              text: \", offset?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }],\n            name: \"FromArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.FromColor3:member(1)\",\n            docComment: \"/**\\n * Creates a new Color4 from a Color3 and an alpha value\\n *\\n * @param color3 - defines the source Color3 to read from\\n *\\n * @param alpha - defines the alpha component (1.0 by default)\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromColor3(color3: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", alpha?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"color3\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"alpha\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"FromColor3\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.FromHexString:member(1)\",\n            docComment: \"/**\\n * Creates a new Color4 from the string containing valid hexadecimal values\\n *\\n * @param hex - defines a string containing valid hexadecimal values\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromHexString(hex: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"hex\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"FromHexString\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.FromInts:member(1)\",\n            docComment: \"/**\\n * Creates a new Color3 from integer values (less than 256)\\n *\\n * @param r - defines the red component to read from (value between 0 and 255)\\n *\\n * @param g - defines the green component to read from (value between 0 and 255)\\n *\\n * @param b - defines the blue component to read from (value between 0 and 255)\\n *\\n * @param a - defines the alpha component to read from (value between 0 and 255)\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromInts(r: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", g: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", b: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", a: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"r\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"g\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"b\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"a\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"FromInts\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Color4#g:member\",\n            docComment: \"/**\\n * Defines the green component (between 0 and 1, default is 0)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"g: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"g\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#getClassName:member(1)\",\n            docComment: '/**\\n * Returns the string \"Color4\"\\n *\\n * @returns \"Color4\"\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getClassName(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getClassName\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#getHashCode:member(1)\",\n            docComment: \"/**\\n * Compute the Color4 hash code\\n *\\n * @returns an unique number that can be used to hash Color4 objects\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getHashCode(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getHashCode\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.Gray:member(1)\",\n            docComment: \"/**\\n * Returns a Color4 value containing a gray color\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Gray(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Gray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.Green:member(1)\",\n            docComment: \"/**\\n * Returns a Color4 value containing a green color\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Green(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Green\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.Lerp:member(1)\",\n            docComment: '/**\\n * Creates a new Color4 object set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\\n *\\n * @param left - defines the start value\\n *\\n * @param right - defines the end value\\n *\\n * @param amount - defines the gradient factor\\n *\\n * @returns a new Color4 object\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Lerp(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Lerp\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.LerpToRef:member(1)\",\n            docComment: '/**\\n * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\\n *\\n * @param left - defines the start value\\n *\\n * @param right - defines the end value\\n *\\n * @param amount - defines the gradient factor\\n *\\n * @param result - defines the Color4 object where to store data\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static LerpToRef(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"LerpToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.Magenta:member(1)\",\n            docComment: \"/**\\n * Returns a Color4 value containing a magenta color\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Magenta(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Magenta\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#multiply:member(1)\",\n            docComment: \"/**\\n * Multipy an Color4 value by another and return a new Color4 object\\n *\\n * @param color - defines the Color4 value to multiply by\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiply(color: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"color\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"multiply\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#multiplyToRef:member(1)\",\n            docComment: \"/**\\n * Multipy a Color4 value by another and push the result in a reference value\\n *\\n * @param color - defines the Color4 value to multiply by\\n *\\n * @param result - defines the Color4 to fill the result in\\n *\\n * @returns the result Color4\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyToRef(color: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"color\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"multiplyToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.Purple:member(1)\",\n            docComment: \"/**\\n * Returns a Color4 value containing a purple color\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Purple(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Purple\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Color4#r:member\",\n            docComment: \"/**\\n * Defines the red component (between 0 and 1, default is 0)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"r: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"r\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.Red:member(1)\",\n            docComment: \"/**\\n * Returns a Color4 value containing a red color\\n *\\n * @returns a new Color3 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Red(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Red\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#scale:member(1)\",\n            docComment: \"/**\\n * Creates a new Color4 with the current Color4 values multiplied by scale\\n *\\n * @param scale - defines the scaling factor to apply\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scale(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"scale\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#scaleAndAddToRef:member(1)\",\n            docComment: \"/**\\n * Scale the current Color4 values by a factor and add the result to a given Color4\\n *\\n * @param scale - defines the scale factor\\n *\\n * @param result - defines the Color4 object where to store the result\\n *\\n * @returns the unmodified current Color4\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleAndAddToRef(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"scaleAndAddToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#scaleToRef:member(1)\",\n            docComment: '/**\\n * Multiplies the current Color4 values by scale and stores the result in \"result\"\\n *\\n * @param scale - defines the scaling factor to apply\\n *\\n * @param result - defines the Color4 object where to store the result\\n *\\n * @returns the current unmodified Color4\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleToRef(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"scaleToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#set:member(1)\",\n            docComment: \"/**\\n * Copies the given float values into the current one\\n *\\n * @param r - defines the red component to read from\\n *\\n * @param g - defines the green component to read from\\n *\\n * @param b - defines the blue component to read from\\n *\\n * @param a - defines the alpha component to read from\\n *\\n * @returns the current updated Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"set(r: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", g: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", b: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", a: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"r\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"g\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"b\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"a\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"set\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#subtract:member(1)\",\n            docComment: \"/**\\n * Creates a new Color4 set with the subtracted values of the given one from the current Color4\\n *\\n * @param right - defines the second operand\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtract(right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"subtract\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#subtractToRef:member(1)\",\n            docComment: '/**\\n * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\\n *\\n * @param right - defines the second operand\\n *\\n * @param result - defines the Color4 object where to store the result\\n *\\n * @returns the current Color4 object\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtractToRef(right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"subtractToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.Teal:member(1)\",\n            docComment: \"/**\\n * Returns a Color4 value containing a teal color\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Teal(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Teal\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#toArray:member(1)\",\n            docComment: \"/**\\n * Stores from the starting index in the given array the Color4 successive values\\n *\\n * @param array - defines the array where to store the r,g,b components\\n *\\n * @param index - defines an optional index in the target array to define where to start storing values\\n *\\n * @returns the current Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toArray(array: \"\n            }, {\n              kind: \"Content\",\n              text: \"number[]\"\n            }, {\n              kind: \"Content\",\n              text: \", index?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"index\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"toArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#toGammaSpace:member(1)\",\n            docComment: \"/**\\n * Computes a new Color4 converted from the current one to gamma space\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toGammaSpace(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toGammaSpace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#toGammaSpaceToRef:member(1)\",\n            docComment: '/**\\n * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\\n *\\n * @param convertedColor - defines the Color4 object where to store the gamma space version\\n *\\n * @returns the unmodified Color4\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toGammaSpaceToRef(convertedColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"convertedColor\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"toGammaSpaceToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#toHexString:member(1)\",\n            docComment: \"/**\\n * Compute the Color4 hexadecimal code as a string\\n *\\n * @returns a string containing the hexadecimal representation of the Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toHexString(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toHexString\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#toLinearSpace:member(1)\",\n            docComment: \"/**\\n * Computes a new Color4 converted from the current one to linear space\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toLinearSpace(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toLinearSpace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#toLinearSpaceToRef:member(1)\",\n            docComment: '/**\\n * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\\n *\\n * @param convertedColor - defines the Color4 object where to store the linear space version\\n *\\n * @returns the unmodified Color4\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toLinearSpaceToRef(convertedColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"convertedColor\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"toLinearSpaceToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4#toString:member(1)\",\n            docComment: \"/**\\n * Creates a string with the Color4 current values\\n *\\n * @returns the string representation of the Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toString(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toString\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.White:member(1)\",\n            docComment: \"/**\\n * Returns a Color4 value containing a white color\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static White(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"White\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Color4.Yellow:member(1)\",\n            docComment: \"/**\\n * Returns a Color4 value containing a yellow color\\n *\\n * @returns a new Color4 object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Yellow(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Yellow\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Function\",\n          canonicalReference: \"decentraland-ecs!Component:function(1)\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare function Component(componentName: \"\n          }, {\n            kind: \"Content\",\n            text: \"string\"\n          }, {\n            kind: \"Content\",\n            text: \", classId?: \"\n          }, {\n            kind: \"Content\",\n            text: \"number\"\n          }, {\n            kind: \"Content\",\n            text: \"): \"\n          }, {\n            kind: \"Content\",\n            text: \"<TFunction extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ComponentConstructor\",\n            canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"<any>>(target: TFunction) => void | TFunction\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          returnTypeTokenRange: {\n            startIndex: 5,\n            endIndex: 8\n          },\n          releaseTag: \"Public\",\n          overloadIndex: 1,\n          parameters: [{\n            parameterName: \"componentName\",\n            parameterTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            parameterName: \"classId\",\n            parameterTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            }\n          }],\n          name: \"Component\"\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!ComponentAdded:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class ComponentAdded \"\n          }],\n          releaseTag: \"Public\",\n          name: \"ComponentAdded\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!ComponentAdded:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `ComponentAdded` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(entity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \", componentName: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \", classId: \"\n            }, {\n              kind: \"Content\",\n              text: \"number | null\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"entity\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"componentName\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"classId\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ComponentAdded#classId:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"classId: \"\n            }, {\n              kind: \"Content\",\n              text: \"number | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"classId\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ComponentAdded#componentName:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"componentName: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"componentName\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ComponentAdded#entity:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"entity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"entity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface ComponentConstructor<T extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ComponentLike\",\n            canonicalReference: \"decentraland-ecs!ComponentLike:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"> \"\n          }],\n          releaseTag: \"Public\",\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            defaultTypeTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            }\n          }],\n          name: \"ComponentConstructor\",\n          members: [{\n            kind: \"ConstructSignature\",\n            canonicalReference: \"decentraland-ecs!ComponentConstructor:new(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"new (...args: \"\n            }, {\n              kind: \"Content\",\n              text: \"any[]\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"args\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!ComponentConstructor#isComponent:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"isComponent?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"isComponent\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!ComponentConstructor#originalClassName:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"originalClassName?: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"originalClassName\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          extendsTokenRanges: []\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!ComponentLike:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface ComponentLike \"\n          }],\n          releaseTag: \"Public\",\n          name: \"ComponentLike\",\n          members: [],\n          extendsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!ComponentRemoved:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class ComponentRemoved \"\n          }],\n          releaseTag: \"Public\",\n          name: \"ComponentRemoved\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!ComponentRemoved:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `ComponentRemoved` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(entity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \", componentName: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \", component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentLike\",\n              canonicalReference: \"decentraland-ecs!ComponentLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"entity\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"componentName\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ComponentRemoved#component:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentLike\",\n              canonicalReference: \"decentraland-ecs!ComponentLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"component\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ComponentRemoved#componentName:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"componentName: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"componentName\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ComponentRemoved#entity:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"entity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"entity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!ConeShape:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class ConeShape extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"Shape\",\n            canonicalReference: \"decentraland-ecs!Shape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"ConeShape\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ConeShape#arc:member\",\n            docComment: \"/**\\n * Sets the ratio (max 1) to apply to the circumference to slice the cone. Defaults to 360.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"arc: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"arc\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ConeShape#openEnded:member\",\n            docComment: \"/**\\n * Adds two extra faces per subdivision to enclose the cone around its height axis. Defaults to false.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"openEnded: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"openEnded\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ConeShape#radius:member\",\n            docComment: \"/**\\n * Sets the radius of the top and bottom caps at once.\\n *\\n * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"radius: \"\n            }, {\n              kind: \"Content\",\n              text: \"number | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"radius\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ConeShape#radiusBottom:member\",\n            docComment: \"/**\\n * The radius of the base of the cone. Defaults to 1.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"radiusBottom: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"radiusBottom\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ConeShape#radiusTop:member\",\n            docComment: \"/**\\n * The radius of the top of a truncated cone. Defaults to 0.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"radiusTop: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"radiusTop\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ConeShape#segmentsHeight:member\",\n            docComment: \"/**\\n * Sets the number of rings along the cone height (positive integer). Defaults to 1.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"segmentsHeight: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"segmentsHeight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ConeShape#segmentsRadial:member\",\n            docComment: \"/**\\n * Sets the number of cone sides (positive integer). Defaults to 36.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"segmentsRadial: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"segmentsRadial\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Curve3:class\",\n          docComment: \"/**\\n * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space. A Curve3 is designed from a series of successive Vector3. {@link https://doc.babylonjs.com/how_to/how_to_use_curve3}\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Curve3 \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Curve3\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Curve3:constructor(1)\",\n            docComment: \"/**\\n * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space. A Curve3 is designed from a series of successive Vector3. {@link http://doc.babylonjs.com/tutorials/How_to_use_Curve3#curve3-object | Tutorial}\\n *\\n * @param points - points which make up the curve\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(points: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"points\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Curve3#continue:member(1)\",\n            docComment: \"/**\\n * Returns a new instance of Curve3 object : var curve = curveA.continue(curveB); This new Curve3 is built by translating and sticking the curveB at the end of the curveA. curveA and curveB keep unchanged.\\n *\\n * @param curve - the curve to continue from this curve\\n *\\n * @returns the newly constructed curve\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"continue(curve: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Curve3\",\n              canonicalReference: \"decentraland-ecs!Curve3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Curve3\",\n              canonicalReference: \"decentraland-ecs!Curve3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"curve\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"continue\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Curve3.CreateCatmullRomSpline:member(1)\",\n            docComment: \"/**\\n * Returns a Curve3 object along a CatmullRom Spline curve :\\n *\\n * @param points - (array of Vector3) the points the spline must pass through. At least, four points required\\n *\\n * @param nbPoints - (integer) the wanted number of points between each curve control points\\n *\\n * @param closed - (boolean) optional with default false, when true forms a closed loop from the points\\n *\\n * @returns the created Curve3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static CreateCatmullRomSpline(points: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \", nbPoints: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", closed?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Curve3\",\n              canonicalReference: \"decentraland-ecs!Curve3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 8,\n              endIndex: 9\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"points\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"nbPoints\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }, {\n              parameterName: \"closed\",\n              parameterTypeTokenRange: {\n                startIndex: 6,\n                endIndex: 7\n              }\n            }],\n            name: \"CreateCatmullRomSpline\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Curve3.CreateCubicBezier:member(1)\",\n            docComment: \"/**\\n * Returns a Curve3 object along a Cubic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#cubic-bezier-curve\\n *\\n * @param v0 - (Vector3) the origin point of the Cubic Bezier\\n *\\n * @param v1 - (Vector3) the first control point\\n *\\n * @param v2 - (Vector3) the second control point\\n *\\n * @param v3 - (Vector3) the end point of the Cubic Bezier\\n *\\n * @param nbPoints - (integer) the wanted number of points in the curve\\n *\\n * @returns the created Curve3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static CreateCubicBezier(v0: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", v1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", v2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", v3: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", nbPoints: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Curve3\",\n              canonicalReference: \"decentraland-ecs!Curve3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"v0\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"v1\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"v2\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"v3\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"nbPoints\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }],\n            name: \"CreateCubicBezier\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Curve3.CreateHermiteSpline:member(1)\",\n            docComment: \"/**\\n * Returns a Curve3 object along a Hermite Spline curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#hermite-spline\\n *\\n * @param p1 - (Vector3) the origin point of the Hermite Spline\\n *\\n * @param t1 - (Vector3) the tangent vector at the origin point\\n *\\n * @param p2 - (Vector3) the end point of the Hermite Spline\\n *\\n * @param t2 - (Vector3) the tangent vector at the end point\\n *\\n * @param nbPoints - (integer) the wanted number of points in the curve\\n *\\n * @returns the created Curve3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static CreateHermiteSpline(p1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", t1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", p2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", t2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", nbPoints: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Curve3\",\n              canonicalReference: \"decentraland-ecs!Curve3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"p1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"t1\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"p2\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"t2\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"nbPoints\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }],\n            name: \"CreateHermiteSpline\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Curve3.CreateQuadraticBezier:member(1)\",\n            docComment: \"/**\\n * Returns a Curve3 object along a Quadratic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#quadratic-bezier-curve\\n *\\n * @param v0 - (Vector3) the origin point of the Quadratic Bezier\\n *\\n * @param v1 - (Vector3) the control point\\n *\\n * @param v2 - (Vector3) the end point of the Quadratic Bezier\\n *\\n * @param nbPoints - (integer) the wanted number of points in the curve\\n *\\n * @returns the created Curve3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static CreateQuadraticBezier(v0: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", v1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", v2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", nbPoints: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Curve3\",\n              canonicalReference: \"decentraland-ecs!Curve3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"v0\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"v1\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"v2\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"nbPoints\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"CreateQuadraticBezier\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Curve3#getPoints:member(1)\",\n            docComment: \"/**\\n * @returns the Curve3 stored array of successive Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getPoints(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getPoints\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Curve3#length:member(1)\",\n            docComment: \"/**\\n * @returns the computed length (float) of the curve.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"length(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"length\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!CylinderShape:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class CylinderShape extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"Shape\",\n            canonicalReference: \"decentraland-ecs!Shape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"CylinderShape\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!CylinderShape#arc:member\",\n            docComment: \"/**\\n * Sets the ratio (max 1) to apply to the circumference to slice the cylinder. Defaults to 360.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"arc: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"arc\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!CylinderShape#openEnded:member\",\n            docComment: \"/**\\n * Adds two extra faces per subdivision to enclose the cylinder around its height axis. Defaults to false.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"openEnded: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"openEnded\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!CylinderShape#radius:member\",\n            docComment: \"/**\\n * Sets the radius of the top and bottom caps at once.\\n *\\n * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"radius: \"\n            }, {\n              kind: \"Content\",\n              text: \"number | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"radius\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!CylinderShape#radiusBottom:member\",\n            docComment: \"/**\\n * The radius of the base of the cylinder. Defaults to 1.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"radiusBottom: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"radiusBottom\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!CylinderShape#radiusTop:member\",\n            docComment: \"/**\\n * The radius of the top of the cylinder. Defaults to 0.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"radiusTop: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"radiusTop\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!CylinderShape#segmentsHeight:member\",\n            docComment: \"/**\\n * Sets the number of rings along the cylinder height (positive integer). Defaults to 1.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"segmentsHeight: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"segmentsHeight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!CylinderShape#segmentsRadial:member\",\n            docComment: \"/**\\n * Sets the number of cylinder sides (positive integer). Defaults to 36.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"segmentsRadial: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"segmentsRadial\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!DecentralandInterface:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type DecentralandInterface = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    DEBUG: boolean;\\n    updateEntity?: never;\\n    log(...a: any[]): void;\\n    error(message: string, data?: any): void;\\n    openExternalUrl(url: string): void;\\n    openNFTDialog(assetContractAddress: string, tokenId: string, comment: string | null): void;\\n    onUpdate(cb: (deltaTime: number) => void): void;\\n    onStart(cb: \"\n          }, {\n            kind: \"Reference\",\n            text: \"Function\",\n            canonicalReference: \"!Function:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"): void;\\n    addEntity(entityId: string): void;\\n    removeEntity(entityId: string): void;\\n    updateEntityComponent(entityId: string, componentName: string, classId: number, json: string): void;\\n    attachEntityComponent(entityId: string, componentName: string, componentId: string): void;\\n    removeEntityComponent(entityId: string, componentName: string): void;\\n    setParent(entityId: string, parentId: string): void;\\n    query(queryType: string, payload: any): void;\\n    componentCreated(componentId: string, componentName: string, classId: number): void;\\n    componentDisposed(componentId: string): void;\\n    componentUpdated(componentId: string, json: string): void;\\n    onEvent(cb: (event: \"\n          }, {\n            kind: \"Reference\",\n            text: \"EngineEvent\",\n            canonicalReference: \"decentraland-ecs!EngineEvent:type\"\n          }, {\n            kind: \"Content\",\n            text: \") => void): void;\\n    subscribe(eventName: string): void;\\n    unsubscribe(eventName: string): void;\\n    loadModule(moduleName: string): \"\n          }, {\n            kind: \"Reference\",\n            text: \"PromiseLike\",\n            canonicalReference: \"!PromiseLike:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"<\"\n          }, {\n            kind: \"Reference\",\n            text: \"ModuleDescriptor\",\n            canonicalReference: \"decentraland-ecs!ModuleDescriptor:type\"\n          }, {\n            kind: \"Content\",\n            text: \">;\\n    callRpc(rpcHandle: string, methodName: string, args: \"\n          }, {\n            kind: \"Reference\",\n            text: \"ArrayLike\",\n            canonicalReference: \"!ArrayLike:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"<any>): \"\n          }, {\n            kind: \"Reference\",\n            text: \"PromiseLike\",\n            canonicalReference: \"!PromiseLike:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"<any>;\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"DecentralandInterface\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 14\n          }\n        }, {\n          kind: \"Variable\",\n          canonicalReference: \"decentraland-ecs!DEG2RAD:var\",\n          docComment: \"/**\\n * Constant used to convert from Euler degrees to radians\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"DEG2RAD: \"\n          }, {\n            kind: \"Content\",\n            text: \"number\"\n          }],\n          releaseTag: \"Public\",\n          name: \"DEG2RAD\",\n          variableTypeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"Function\",\n          canonicalReference: \"decentraland-ecs!DisposableComponent:function(1)\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare function DisposableComponent(componentName: \"\n          }, {\n            kind: \"Content\",\n            text: \"string\"\n          }, {\n            kind: \"Content\",\n            text: \", classId: \"\n          }, {\n            kind: \"Content\",\n            text: \"number\"\n          }, {\n            kind: \"Content\",\n            text: \"): \"\n          }, {\n            kind: \"Content\",\n            text: \"<TFunction extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"DisposableComponentConstructor\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentConstructor:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"<any>>(target: TFunction) => void | TFunction\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          returnTypeTokenRange: {\n            startIndex: 5,\n            endIndex: 8\n          },\n          releaseTag: \"Public\",\n          overloadIndex: 1,\n          parameters: [{\n            parameterName: \"componentName\",\n            parameterTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            parameterName: \"classId\",\n            parameterTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            }\n          }],\n          name: \"DisposableComponent\"\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!DisposableComponentConstructor:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface DisposableComponentConstructor<T extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"DisposableComponentLike\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentLike:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"> \"\n          }],\n          releaseTag: \"Public\",\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            defaultTypeTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            }\n          }],\n          name: \"DisposableComponentConstructor\",\n          members: [{\n            kind: \"ConstructSignature\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentConstructor:new(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"new (...args: \"\n            }, {\n              kind: \"Content\",\n              text: \"any[]\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"args\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentConstructor#isComponent:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"isComponent?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"isComponent\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentConstructor#isDisposableComponent:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"isDisposableComponent?: \"\n            }, {\n              kind: \"Content\",\n              text: \"true\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"isDisposableComponent\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentConstructor#originalClassName:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"originalClassName?: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"originalClassName\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          extendsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!DisposableComponentCreated:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class DisposableComponentCreated \"\n          }],\n          releaseTag: \"Public\",\n          name: \"DisposableComponentCreated\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentCreated:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `DisposableComponentCreated` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(componentId: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \", componentName: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \", classId: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"componentId\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"componentName\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"classId\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentCreated#classId:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"classId: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"classId\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentCreated#componentId:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"componentId: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"componentId\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentCreated#componentName:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"componentName: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"componentName\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!DisposableComponentLike:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface DisposableComponentLike extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ComponentLike\",\n            canonicalReference: \"decentraland-ecs!ComponentLike:interface\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"DisposableComponentLike\",\n          members: [{\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentLike#onDispose:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onDispose?(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"onDispose\"\n          }],\n          extendsTokenRanges: [{\n            startIndex: 1,\n            endIndex: 3\n          }]\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!DisposableComponentRemoved:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class DisposableComponentRemoved \"\n          }],\n          releaseTag: \"Public\",\n          name: \"DisposableComponentRemoved\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentRemoved:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `DisposableComponentRemoved` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(componentId: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"componentId\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentRemoved#componentId:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"componentId: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"componentId\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!DisposableComponentUpdated:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class DisposableComponentUpdated \"\n          }],\n          releaseTag: \"Public\",\n          name: \"DisposableComponentUpdated\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentUpdated:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `DisposableComponentUpdated` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(componentId: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \", component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"DisposableComponentLike\",\n              canonicalReference: \"decentraland-ecs!DisposableComponentLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"componentId\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentUpdated#component:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"DisposableComponentLike\",\n              canonicalReference: \"decentraland-ecs!DisposableComponentLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"component\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentUpdated#componentId:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"componentId: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"componentId\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!double:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type double = \"\n          }, {\n            kind: \"Content\",\n            text: \"number\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"double\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Engine:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Engine implements \"\n          }, {\n            kind: \"Reference\",\n            text: \"IEngine\",\n            canonicalReference: \"decentraland-ecs!IEngine:interface\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Engine\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Engine:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `Engine` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(rootEntity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"rootEntity\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Engine#addEntity:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addEntity(entity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"entity\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"addEntity\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Engine#addSystem:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addSystem(system: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ISystem\",\n              canonicalReference: \"decentraland-ecs!ISystem:interface\"\n            }, {\n              kind: \"Content\",\n              text: \", priority?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"ISystem\",\n              canonicalReference: \"decentraland-ecs!ISystem:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"system\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"priority\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"addSystem\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Engine#avatarEntity:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly avatarEntity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"avatarEntity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Engine#disposeComponent:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"disposeComponent(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"DisposableComponentLike\",\n              canonicalReference: \"decentraland-ecs!DisposableComponentLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"disposeComponent\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Engine#eventManager:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly eventManager: \"\n            }, {\n              kind: \"Reference\",\n              text: \"EventManager\",\n              canonicalReference: \"decentraland-ecs!EventManager:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"eventManager\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Engine#firstPersonCameraEntity:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly firstPersonCameraEntity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"firstPersonCameraEntity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Engine#getComponentGroup:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getComponentGroup(...requires: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentConstructor\",\n              canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<any>[]\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentGroup\",\n              canonicalReference: \"decentraland-ecs!ComponentGroup:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"requires\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }],\n            name: \"getComponentGroup\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Engine#getEntitiesWithComponent:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getEntitiesWithComponent(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Record\",\n              canonicalReference: \"!Record:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<string, any>\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"getEntitiesWithComponent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Engine#getEntitiesWithComponent:member(2)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getEntitiesWithComponent(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentConstructor\",\n              canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<any>\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Record\",\n              canonicalReference: \"!Record:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<string, \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 2,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }],\n            name: \"getEntitiesWithComponent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Engine#registerComponent:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"registerComponent(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"DisposableComponentLike\",\n              canonicalReference: \"decentraland-ecs!DisposableComponentLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"registerComponent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Engine#removeComponentGroup:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"removeComponentGroup(componentGroup: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentGroup\",\n              canonicalReference: \"decentraland-ecs!ComponentGroup:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"componentGroup\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"removeComponentGroup\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Engine#removeEntity:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"removeEntity(entity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"entity\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"removeEntity\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Engine#removeSystem:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"removeSystem(system: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ISystem\",\n              canonicalReference: \"decentraland-ecs!ISystem:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"system\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"removeSystem\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Engine#rootEntity:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly rootEntity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"rootEntity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Engine#update:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"update(dt: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"this\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"dt\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"update\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Engine#updateComponent:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"updateComponent(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"DisposableComponentLike\",\n              canonicalReference: \"decentraland-ecs!DisposableComponentLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"updateComponent\"\n          }],\n          implementsTokenRanges: [{\n            startIndex: 1,\n            endIndex: 3\n          }]\n        }, {\n          kind: \"Variable\",\n          canonicalReference: \"decentraland-ecs!engine:var\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"engine: \"\n          }, {\n            kind: \"Reference\",\n            text: \"Engine\",\n            canonicalReference: \"decentraland-ecs!Engine:class\"\n          }],\n          releaseTag: \"Public\",\n          name: \"engine\",\n          variableTypeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!EngineEvent:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type EngineEvent<T extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"IEventNames\",\n            canonicalReference: \"decentraland-ecs!IEventNames:type\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }, {\n            kind: \"Content\",\n            text: \"= \"\n          }, {\n            kind: \"Reference\",\n            text: \"IEventNames\",\n            canonicalReference: \"decentraland-ecs!IEventNames:type\"\n          }, {\n            kind: \"Content\",\n            text: \", V = \"\n          }, {\n            kind: \"Reference\",\n            text: \"IEvents\",\n            canonicalReference: \"decentraland-ecs!IEvents:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"[T]\"\n          }, {\n            kind: \"Content\",\n            text: \"> = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    type: T;\\n    data: V;\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"EngineEvent\",\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            defaultTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            }\n          }, {\n            typeParameterName: \"V\",\n            constraintTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            },\n            defaultTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 8\n            }\n          }],\n          typeTokenRange: {\n            startIndex: 9,\n            endIndex: 10\n          }\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Entity:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Entity implements \"\n          }, {\n            kind: \"Reference\",\n            text: \"IEntity\",\n            canonicalReference: \"decentraland-ecs!IEntity:interface\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Entity\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Entity:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `Entity` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(name?: \"\n            }, {\n              kind: \"Content\",\n              text: \"string | undefined\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"name\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#addComponent:member(1)\",\n            docComment: \"/**\\n * Adds a component. If the component already exist, it throws an Error.\\n *\\n * @param component - component instance.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addComponent<T extends \"\n            }, {\n              kind: \"Content\",\n              text: \"object\"\n            }, {\n              kind: \"Content\",\n              text: \">(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"addComponent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#addComponentOrReplace:member(1)\",\n            docComment: \"/**\\n * Adds or replaces a component in the entity.\\n *\\n * @param component - component instance.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addComponentOrReplace<T extends \"\n            }, {\n              kind: \"Content\",\n              text: \"object\"\n            }, {\n              kind: \"Content\",\n              text: \">(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"addComponentOrReplace\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Entity#alive:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"alive: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"alive\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Entity#children:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"children: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Record\",\n              canonicalReference: \"!Record:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<string, \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"children\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 5\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Entity#components:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly components: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Record\",\n              canonicalReference: \"!Record:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<string, any>\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"components\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Entity#eventManager:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"eventManager: \"\n            }, {\n              kind: \"Reference\",\n              text: \"EventManager\",\n              canonicalReference: \"decentraland-ecs!EventManager:class\"\n            }, {\n              kind: \"Content\",\n              text: \" | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"eventManager\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#getComponent:member(1)\",\n            docComment: \"/**\\n * Gets a component, if it doesn't exist, it throws an Error.\\n *\\n * @param component - component class or name\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getComponent<T = \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \">(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"getComponent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#getComponent:member(2)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getComponent<T>(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentConstructor\",\n              canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 2,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"getComponent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#getComponentOrCreate:member(1)\",\n            docComment: \"/**\\n * Gets a component, if it doesn't exist, it creates the component and returns it.\\n *\\n * @param component - component class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getComponentOrCreate<T>(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentConstructor\",\n              canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<T> & {\\n        new (): T;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"getComponentOrCreate\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#getComponentOrNull:member(1)\",\n            docComment: \"/**\\n * Gets a component, if it doesn't exist, it returns null.\\n *\\n * @param component - component class or name\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getComponentOrNull<T = \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \">(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"getComponentOrNull\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#getComponentOrNull:member(2)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getComponentOrNull<T>(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentConstructor\",\n              canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 2,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"getComponentOrNull\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#getParent:member(1)\",\n            docComment: \"/**\\n * Gets the parent entity\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getParent(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \" | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getParent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#hasComponent:member(1)\",\n            docComment: \"/**\\n * Returns a boolean indicating if a component is present in the entity.\\n *\\n * @param component - component class, instance or name\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hasComponent<T = \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \">(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"hasComponent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#hasComponent:member(2)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hasComponent<T>(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentConstructor\",\n              canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 2,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"hasComponent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#hasComponent:member(3)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hasComponent<T extends \"\n            }, {\n              kind: \"Content\",\n              text: \"object\"\n            }, {\n              kind: \"Content\",\n              text: \">(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 3,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"hasComponent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#isAddedToEngine:member(1)\",\n            docComment: \"/**\\n * Returns true if the entity is already added to the engine. Returns false if no engine was defined.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"isAddedToEngine(): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"isAddedToEngine\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Entity#name:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"name?: \"\n            }, {\n              kind: \"Content\",\n              text: \"string | undefined\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"name\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#removeComponent:member(1)\",\n            docComment: \"/**\\n * Removes a component instance from the entity.\\n *\\n * @param component - component instance to remove\\n *\\n * @param triggerRemovedEvent - should this action trigger an event?\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"removeComponent(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \", triggerRemovedEvent?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"triggerRemovedEvent\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"removeComponent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#removeComponent:member(2)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"removeComponent<T extends \"\n            }, {\n              kind: \"Content\",\n              text: \"object\"\n            }, {\n              kind: \"Content\",\n              text: \">(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \", triggerRemovedEvent?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 2,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"triggerRemovedEvent\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"removeComponent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#removeComponent:member(3)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"removeComponent(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentConstructor\",\n              canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<any>\"\n            }, {\n              kind: \"Content\",\n              text: \", triggerRemovedEvent?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 3,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"triggerRemovedEvent\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }],\n            name: \"removeComponent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Entity#setParent:member(1)\",\n            docComment: \"/**\\n * Sets the parent entity\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"setParent(_parent: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \" | \"\n            }, {\n              kind: \"Reference\",\n              text: \"Attachable\",\n              canonicalReference: \"decentraland-ecs!Attachable:class\"\n            }, {\n              kind: \"Content\",\n              text: \" | null\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"_parent\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 5\n              }\n            }],\n            name: \"setParent\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Entity#uuid:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly uuid: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"uuid\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: [{\n            startIndex: 1,\n            endIndex: 3\n          }]\n        }, {\n          kind: \"Variable\",\n          canonicalReference: \"decentraland-ecs!Epsilon:var\",\n          docComment: \"/**\\n * Constant used to define the minimal number value in Babylon.js\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"Epsilon = 0.000001\"\n          }],\n          releaseTag: \"Public\",\n          name: \"Epsilon\",\n          variableTypeTokenRange: {\n            startIndex: 0,\n            endIndex: 0\n          }\n        }, {\n          kind: \"Function\",\n          canonicalReference: \"decentraland-ecs!error:function(1)\",\n          docComment: \"/**\\n * Error function. Prints a console error. Only works in debug mode, otherwise it does nothing.\\n *\\n * @param error - string or Error object.\\n *\\n * @param data - any debug information.\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare function error(error: \"\n          }, {\n            kind: \"Content\",\n            text: \"string | \"\n          }, {\n            kind: \"Reference\",\n            text: \"Error\",\n            canonicalReference: \"!Error:interface\"\n          }, {\n            kind: \"Content\",\n            text: \", data?: \"\n          }, {\n            kind: \"Content\",\n            text: \"any\"\n          }, {\n            kind: \"Content\",\n            text: \"): \"\n          }, {\n            kind: \"Content\",\n            text: \"void\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          returnTypeTokenRange: {\n            startIndex: 6,\n            endIndex: 7\n          },\n          releaseTag: \"Public\",\n          overloadIndex: 1,\n          parameters: [{\n            parameterName: \"error\",\n            parameterTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            }\n          }, {\n            parameterName: \"data\",\n            parameterTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            }\n          }],\n          name: \"error\"\n        }, {\n          kind: \"Function\",\n          canonicalReference: \"decentraland-ecs!EventConstructor:function(1)\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare function EventConstructor(): \"\n          }, {\n            kind: \"Reference\",\n            text: \"ClassDecorator\",\n            canonicalReference: \"!ClassDecorator:type\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          returnTypeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          },\n          releaseTag: \"Public\",\n          overloadIndex: 1,\n          parameters: [],\n          name: \"EventConstructor\"\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!EventManager:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class EventManager \"\n          }],\n          releaseTag: \"Public\",\n          name: \"EventManager\",\n          members: [{\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!EventManager#addListener:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addListener<T, X>(eventClass: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEventConstructor\",\n              canonicalReference: \"decentraland-ecs!IEventConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>\"\n            }, {\n              kind: \"Content\",\n              text: \", listener: \"\n            }, {\n              kind: \"Content\",\n              text: \"X\"\n            }, {\n              kind: \"Content\",\n              text: \", listenerFunction: \"\n            }, {\n              kind: \"Content\",\n              text: \"(this: X, event: T) => void\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"this\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 8,\n              endIndex: 9\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"eventClass\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"listener\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }, {\n              parameterName: \"listenerFunction\",\n              parameterTypeTokenRange: {\n                startIndex: 6,\n                endIndex: 7\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }, {\n              typeParameterName: \"X\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"addListener\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!EventManager#fireEvent:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"fireEvent<T extends \"\n            }, {\n              kind: \"Content\",\n              text: \"object\"\n            }, {\n              kind: \"Content\",\n              text: \">(event: \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"this\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"event\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"fireEvent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!EventManager#removeListener:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"removeListener<X>(listener: \"\n            }, {\n              kind: \"Content\",\n              text: \"X\"\n            }, {\n              kind: \"Content\",\n              text: \", eventClass: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEventConstructor\",\n              canonicalReference: \"decentraland-ecs!IEventConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<any>\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"listener\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"eventClass\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 5\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"X\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"removeListener\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Function\",\n          canonicalReference: \"decentraland-ecs!executeTask:function(1)\",\n          docComment: \"/**\\n * Executes an asynchronous task\\n *\\n * @param task - the task to execute\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare function executeTask<T>(task: \"\n          }, {\n            kind: \"Content\",\n            text: \"() => \"\n          }, {\n            kind: \"Reference\",\n            text: \"Promise\",\n            canonicalReference: \"!Promise:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"<T>\"\n          }, {\n            kind: \"Content\",\n            text: \"): \"\n          }, {\n            kind: \"Reference\",\n            text: \"TaskResult\",\n            canonicalReference: \"decentraland-ecs!TaskResult:type\"\n          }, {\n            kind: \"Content\",\n            text: \"<T>\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          returnTypeTokenRange: {\n            startIndex: 5,\n            endIndex: 7\n          },\n          releaseTag: \"Public\",\n          overloadIndex: 1,\n          parameters: [{\n            parameterName: \"task\",\n            parameterTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 4\n            }\n          }],\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            },\n            defaultTypeTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            }\n          }],\n          name: \"executeTask\"\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!FileAndHash:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type FileAndHash = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    file: string;\\n    hash: string;\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"FileAndHash\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!float:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type float = \"\n          }, {\n            kind: \"Content\",\n            text: \"number\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"float\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!FloatArray:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type FloatArray = \"\n          }, {\n            kind: \"Content\",\n            text: \"number[]\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"FloatArray\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Font:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Font extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Font\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Font:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `Font` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(src?: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"src\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Font#src:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly src: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"src\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Enum\",\n          canonicalReference: \"decentraland-ecs!Fonts:enum\",\n          docComment: \"\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare enum Fonts \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Fonts\",\n          members: [{\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!Fonts.LiberationSans:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"LiberationSans = \"\n            }, {\n              kind: \"Content\",\n              text: '\"builtin:LiberationSans SDF\"'\n            }],\n            releaseTag: \"Public\",\n            name: \"LiberationSans\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!Fonts.SanFrancisco:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"SanFrancisco = \"\n            }, {\n              kind: \"Content\",\n              text: '\"builtin:SF-UI-Text-Regular SDF\"'\n            }],\n            releaseTag: \"Public\",\n            name: \"SanFrancisco\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!Fonts.SanFrancisco_Heavy:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"SanFrancisco_Heavy = \"\n            }, {\n              kind: \"Content\",\n              text: '\"builtin:SF-UI-Text-Heavy SDF\"'\n            }],\n            releaseTag: \"Public\",\n            name: \"SanFrancisco_Heavy\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!Fonts.SanFrancisco_Semibold:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"SanFrancisco_Semibold = \"\n            }, {\n              kind: \"Content\",\n              text: '\"builtin:SF-UI-Text-Semibold SDF\"'\n            }],\n            releaseTag: \"Public\",\n            name: \"SanFrancisco_Semibold\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }]\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Frustum:class\",\n          docComment: \"/**\\n * Reprasents a camera frustum\\n *\\n * @beta\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Frustum \"\n          }],\n          releaseTag: \"Beta\",\n          name: \"Frustum\",\n          members: [{\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Frustum.GetBottomPlaneToRef:member(1)\",\n            docComment: \"/**\\n * Gets the bottom frustum plane transformed by the transform matrix\\n *\\n * @param transform - transformation matrix to be applied to the resulting frustum plane\\n *\\n * @param frustumPlane - the resuling frustum plane\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static GetBottomPlaneToRef(transform: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", frustumPlane: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Beta\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"transform\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"frustumPlane\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"GetBottomPlaneToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Frustum.GetFarPlaneToRef:member(1)\",\n            docComment: \"/**\\n * Gets the far frustum plane transformed by the transform matrix\\n *\\n * @param transform - transformation matrix to be applied to the resulting frustum plane\\n *\\n * @param frustumPlane - the resuling frustum plane\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static GetFarPlaneToRef(transform: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", frustumPlane: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Beta\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"transform\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"frustumPlane\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"GetFarPlaneToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Frustum.GetLeftPlaneToRef:member(1)\",\n            docComment: \"/**\\n * Gets the left frustum plane transformed by the transform matrix\\n *\\n * @param transform - transformation matrix to be applied to the resulting frustum plane\\n *\\n * @param frustumPlane - the resuling frustum plane\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static GetLeftPlaneToRef(transform: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", frustumPlane: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Beta\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"transform\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"frustumPlane\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"GetLeftPlaneToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Frustum.GetNearPlaneToRef:member(1)\",\n            docComment: \"/**\\n * Gets the near frustum plane transformed by the transform matrix\\n *\\n * @param transform - transformation matrix to be applied to the resulting frustum plane\\n *\\n * @param frustumPlane - the resuling frustum plane\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static GetNearPlaneToRef(transform: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", frustumPlane: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Beta\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"transform\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"frustumPlane\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"GetNearPlaneToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Frustum.GetPlanes:member(1)\",\n            docComment: \"/**\\n * Gets the planes representing the frustum\\n *\\n * @param transform - matrix to be applied to the returned planes\\n *\\n * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static GetPlanes(transform: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 5\n            },\n            releaseTag: \"Beta\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"transform\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"GetPlanes\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Frustum.GetPlanesToRef:member(1)\",\n            docComment: '/**\\n * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\\n *\\n * @param transform - transformation matrix to be applied to the resulting frustum planes\\n *\\n * @param frustumPlanes - the resuling frustum planes\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static GetPlanesToRef(transform: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", frustumPlanes: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Beta\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"transform\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"frustumPlanes\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 5\n              }\n            }],\n            name: \"GetPlanesToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Frustum.GetRightPlaneToRef:member(1)\",\n            docComment: \"/**\\n * Gets the right frustum plane transformed by the transform matrix\\n *\\n * @param transform - transformation matrix to be applied to the resulting frustum plane\\n *\\n * @param frustumPlane - the resuling frustum plane\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static GetRightPlaneToRef(transform: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", frustumPlane: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Beta\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"transform\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"frustumPlane\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"GetRightPlaneToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Frustum.GetTopPlaneToRef:member(1)\",\n            docComment: \"/**\\n * Gets the top frustum plane transformed by the transform matrix\\n *\\n * @param transform - transformation matrix to be applied to the resulting frustum plane\\n *\\n * @param frustumPlane - the resuling frustum plane\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static GetTopPlaneToRef(transform: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", frustumPlane: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Beta\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"transform\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"frustumPlane\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"GetTopPlaneToRef\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Function\",\n          canonicalReference: \"decentraland-ecs!getComponentClassId:function(1)\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare function getComponentClassId<T extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"Record\",\n            canonicalReference: \"!Record:type\"\n          }, {\n            kind: \"Content\",\n            text: \"<any, any> \"\n          }, {\n            kind: \"Content\",\n            text: \"= \"\n          }, {\n            kind: \"Content\",\n            text: \"any\"\n          }, {\n            kind: \"Content\",\n            text: \">(component: \"\n          }, {\n            kind: \"Content\",\n            text: \"T | \"\n          }, {\n            kind: \"Reference\",\n            text: \"ComponentConstructor\",\n            canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"<T>\"\n          }, {\n            kind: \"Content\",\n            text: \"): \"\n          }, {\n            kind: \"Content\",\n            text: \"number | null\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          returnTypeTokenRange: {\n            startIndex: 10,\n            endIndex: 11\n          },\n          releaseTag: \"Public\",\n          overloadIndex: 1,\n          parameters: [{\n            parameterName: \"component\",\n            parameterTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 9\n            }\n          }],\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            defaultTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            }\n          }],\n          name: \"getComponentClassId\"\n        }, {\n          kind: \"Function\",\n          canonicalReference: \"decentraland-ecs!getComponentId:function(1)\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare function getComponentId<T extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"DisposableComponentLike\",\n            canonicalReference: \"decentraland-ecs!DisposableComponentLike:interface\"\n          }, {\n            kind: \"Content\",\n            text: \">(component: \"\n          }, {\n            kind: \"Content\",\n            text: \"T\"\n          }, {\n            kind: \"Content\",\n            text: \"): \"\n          }, {\n            kind: \"Content\",\n            text: \"string\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          returnTypeTokenRange: {\n            startIndex: 5,\n            endIndex: 6\n          },\n          releaseTag: \"Public\",\n          overloadIndex: 1,\n          parameters: [{\n            parameterName: \"component\",\n            parameterTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            }\n          }],\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            defaultTypeTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            }\n          }],\n          name: \"getComponentId\"\n        }, {\n          kind: \"Function\",\n          canonicalReference: \"decentraland-ecs!getComponentName:function(1)\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare function getComponentName<T extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"Record\",\n            canonicalReference: \"!Record:type\"\n          }, {\n            kind: \"Content\",\n            text: \"<any, any> \"\n          }, {\n            kind: \"Content\",\n            text: \"= \"\n          }, {\n            kind: \"Content\",\n            text: \"any\"\n          }, {\n            kind: \"Content\",\n            text: \">(component: \"\n          }, {\n            kind: \"Content\",\n            text: \"T | \"\n          }, {\n            kind: \"Reference\",\n            text: \"ComponentConstructor\",\n            canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"<T>\"\n          }, {\n            kind: \"Content\",\n            text: \"): \"\n          }, {\n            kind: \"Content\",\n            text: \"string\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          returnTypeTokenRange: {\n            startIndex: 10,\n            endIndex: 11\n          },\n          releaseTag: \"Public\",\n          overloadIndex: 1,\n          parameters: [{\n            parameterName: \"component\",\n            parameterTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 9\n            }\n          }],\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            defaultTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            }\n          }],\n          name: \"getComponentName\"\n        }, {\n          kind: \"Enum\",\n          canonicalReference: \"decentraland-ecs!Gizmo:enum\",\n          docComment: \"/**\\n * Gizmo identifiers\\n *\\n * @beta\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare enum Gizmo \"\n          }],\n          releaseTag: \"Beta\",\n          name: \"Gizmo\",\n          members: [{\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!Gizmo.MOVE:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"MOVE = \"\n            }, {\n              kind: \"Content\",\n              text: '\"MOVE\"'\n            }],\n            releaseTag: \"Beta\",\n            name: \"MOVE\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!Gizmo.NONE:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"NONE = \"\n            }, {\n              kind: \"Content\",\n              text: '\"NONE\"'\n            }],\n            releaseTag: \"Beta\",\n            name: \"NONE\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!Gizmo.ROTATE:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"ROTATE = \"\n            }, {\n              kind: \"Content\",\n              text: '\"ROTATE\"'\n            }],\n            releaseTag: \"Beta\",\n            name: \"ROTATE\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!Gizmo.SCALE:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"SCALE = \"\n            }, {\n              kind: \"Content\",\n              text: '\"SCALE\"'\n            }],\n            releaseTag: \"Beta\",\n            name: \"SCALE\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }]\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!GizmoDragEndEvent:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type GizmoDragEndEvent = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    type: 'gizmoDragEnded';\\n    transforms: {\\n        position: \"\n          }, {\n            kind: \"Reference\",\n            text: \"ReadOnlyVector3\",\n            canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n        rotation: \"\n          }, {\n            kind: \"Reference\",\n            text: \"ReadOnlyQuaternion\",\n            canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n        scale: \"\n          }, {\n            kind: \"Reference\",\n            text: \"ReadOnlyVector3\",\n            canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n        entityId: string;\\n    }[];\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"GizmoDragEndEvent\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 8\n          }\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Gizmos:class\",\n          docComment: \"/**\\n * Enables gizmos in the entity. Gizmos only work in EDITOR, PREVIEW or DEBUG modes.\\n *\\n * @beta\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Gizmos extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Beta\",\n          name: \"Gizmos\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Gizmos#cycle:member\",\n            docComment: \"/**\\n * Cycle through gizmos using click.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"cycle: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Beta\",\n            name: \"cycle\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Gizmos#localReference:member\",\n            docComment: \"/**\\n * Align the gizmos to match the local reference system\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"localReference: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Beta\",\n            name: \"localReference\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Gizmos#position:member\",\n            docComment: \"/**\\n * Enable position gizmo\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"position: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Beta\",\n            name: \"position\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Gizmos#rotation:member\",\n            docComment: \"/**\\n * Enable rotation gizmo\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"rotation: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Beta\",\n            name: \"rotation\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Gizmos#scale:member\",\n            docComment: \"/**\\n * Enable scale gizmo\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Beta\",\n            name: \"scale\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Gizmos#selectedGizmo:member\",\n            docComment: \"/**\\n * If cycle is false, this will be the selected gizmo\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"selectedGizmo?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Gizmo\",\n              canonicalReference: \"decentraland-ecs!Gizmo:enum\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Beta\",\n            name: \"selectedGizmo\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!GizmoSelectedEvent:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type GizmoSelectedEvent = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    type: 'gizmoSelected';\\n    gizmoType: 'MOVE' | 'ROTATE' | 'SCALE' | 'NONE';\\n    entities: string[];\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"GizmoSelectedEvent\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!GlobalInputEventResult:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type GlobalInputEventResult = \"\n          }, {\n            kind: \"Reference\",\n            text: \"InputEventResult\",\n            canonicalReference: \"decentraland-ecs!InputEventResult:type\"\n          }, {\n            kind: \"Content\",\n            text: \" & {\\n    type: \"\n          }, {\n            kind: \"Reference\",\n            text: \"InputEventType\",\n            canonicalReference: \"decentraland-ecs!InputEventType:enum\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"GlobalInputEventResult\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 5\n          }\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!GlobalPointerDown:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class GlobalPointerDown extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"PointerEventComponent\",\n            canonicalReference: \"decentraland-ecs!PointerEventComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"GlobalPointerDown\",\n          members: [],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!GlobalPointerUp:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class GlobalPointerUp extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"PointerEventComponent\",\n            canonicalReference: \"decentraland-ecs!PointerEventComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"GlobalPointerUp\",\n          members: [],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!GLTFShape:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class GLTFShape extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"Shape\",\n            canonicalReference: \"decentraland-ecs!Shape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"GLTFShape\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!GLTFShape:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `GLTFShape` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(src: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"src\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!GLTFShape#src:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly src: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"src\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!HitEntityInfo:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface HitEntityInfo \"\n          }],\n          releaseTag: \"Public\",\n          name: \"HitEntityInfo\",\n          members: [{\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!HitEntityInfo#entityId:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"entityId: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"entityId\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!HitEntityInfo#isValid:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"isValid: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"isValid\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!HitEntityInfo#meshName:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"meshName: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"meshName\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          extendsTokenRanges: []\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!IEngine:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface IEngine \"\n          }],\n          releaseTag: \"Public\",\n          name: \"IEngine\",\n          members: [{\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEngine#addEntity:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addEntity(entity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"entity\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"addEntity\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEngine#addSystem:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addSystem(system: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ISystem\",\n              canonicalReference: \"decentraland-ecs!ISystem:interface\"\n            }, {\n              kind: \"Content\",\n              text: \", priority: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"system\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"priority\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"addSystem\"\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEngine#avatarEntity:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly avatarEntity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"avatarEntity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEngine#entities:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly entities: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Readonly\",\n              canonicalReference: \"!Readonly:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"Record\",\n              canonicalReference: \"!Record:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<string, \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \">>\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"entities\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 7\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEngine#firstPersonCameraEntity:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly firstPersonCameraEntity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"firstPersonCameraEntity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEngine#removeEntity:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"removeEntity(entity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"entity\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"removeEntity\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEngine#removeSystem:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"removeSystem(system: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ISystem\",\n              canonicalReference: \"decentraland-ecs!ISystem:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"system\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"removeSystem\"\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEngine#rootEntity:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"rootEntity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"rootEntity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          extendsTokenRanges: []\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!IEntity:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface IEntity \"\n          }],\n          releaseTag: \"Public\",\n          name: \"IEntity\",\n          members: [{\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#addComponent:member(1)\",\n            docComment: \"/**\\n * Adds a component. If the component already exist, it throws an Error.\\n *\\n * @param component - component instance.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addComponent<T extends \"\n            }, {\n              kind: \"Content\",\n              text: \"object\"\n            }, {\n              kind: \"Content\",\n              text: \">(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"addComponent\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#addComponentOrReplace:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addComponentOrReplace<T extends \"\n            }, {\n              kind: \"Content\",\n              text: \"object\"\n            }, {\n              kind: \"Content\",\n              text: \">(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"addComponentOrReplace\"\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#alive:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"alive: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"alive\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#children:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"children: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Record\",\n              canonicalReference: \"!Record:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<string, \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"children\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 5\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#components:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly components: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Record\",\n              canonicalReference: \"!Record:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<string, any>\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"components\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#eventManager:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"eventManager: \"\n            }, {\n              kind: \"Reference\",\n              text: \"EventManager\",\n              canonicalReference: \"decentraland-ecs!EventManager:class\"\n            }, {\n              kind: \"Content\",\n              text: \" | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"eventManager\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            }\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#getComponent:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getComponent<T = \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \">(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"getComponent\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#getComponent:member(2)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getComponent<T>(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentConstructor\",\n              canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 2,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"getComponent\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#getComponent:member(3)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getComponent<T>(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentConstructor\",\n              canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<T> | string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 3,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"getComponent\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#getComponentOrCreate:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getComponentOrCreate<T>(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentConstructor\",\n              canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<T> & {\\n        new (): T;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"getComponentOrCreate\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#getComponentOrNull:member(1)\",\n            docComment: \"/**\\n * Gets a component, if it doesn't exist, it returns null.\\n *\\n * @param component - component class or name\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getComponentOrNull<T = \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \">(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"getComponentOrNull\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#getComponentOrNull:member(2)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getComponentOrNull<T>(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentConstructor\",\n              canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 2,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"getComponentOrNull\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#getComponentOrNull:member(3)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getComponentOrNull<T>(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentConstructor\",\n              canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<T> | string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 3,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"getComponentOrNull\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#getParent:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getParent(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \" | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getParent\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#hasComponent:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hasComponent<T = \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \">(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"hasComponent\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#hasComponent:member(2)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hasComponent<T>(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentConstructor\",\n              canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 2,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"hasComponent\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#hasComponent:member(3)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hasComponent<T extends \"\n            }, {\n              kind: \"Content\",\n              text: \"object\"\n            }, {\n              kind: \"Content\",\n              text: \">(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 3,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"hasComponent\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#hasComponent:member(4)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hasComponent<T>(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentConstructor\",\n              canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<T> | string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 4,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"hasComponent\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#isAddedToEngine:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"isAddedToEngine(): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"isAddedToEngine\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#removeComponent:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"removeComponent(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \", triggerRemovedEvent?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"triggerRemovedEvent\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"removeComponent\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#removeComponent:member(2)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"removeComponent<T extends \"\n            }, {\n              kind: \"Content\",\n              text: \"object\"\n            }, {\n              kind: \"Content\",\n              text: \">(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \", triggerRemovedEvent?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 2,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"triggerRemovedEvent\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"removeComponent\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#removeComponent:member(3)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"removeComponent(component: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ComponentConstructor\",\n              canonicalReference: \"decentraland-ecs!ComponentConstructor:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<any>\"\n            }, {\n              kind: \"Content\",\n              text: \", triggerRemovedEvent?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 3,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"triggerRemovedEvent\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }],\n            name: \"removeComponent\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#removeComponent:member(4)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"removeComponent(component: \"\n            }, {\n              kind: \"Content\",\n              text: \"object | string | \"\n            }, {\n              kind: \"Reference\",\n              text: \"Function\",\n              canonicalReference: \"!Function:interface\"\n            }, {\n              kind: \"Content\",\n              text: \", triggerRemovedEvent: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 4,\n            parameters: [{\n              parameterName: \"component\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"triggerRemovedEvent\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }],\n            name: \"removeComponent\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#setParent:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"setParent(e: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \" | \"\n            }, {\n              kind: \"Reference\",\n              text: \"Attachable\",\n              canonicalReference: \"decentraland-ecs!Attachable:class\"\n            }, {\n              kind: \"Content\",\n              text: \" | null\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"e\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 5\n              }\n            }],\n            name: \"setParent\"\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEntity#uuid:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly uuid: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"uuid\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          extendsTokenRanges: []\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!IEventConstructor:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface IEventConstructor<T> \"\n          }],\n          releaseTag: \"Public\",\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            },\n            defaultTypeTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            }\n          }],\n          name: \"IEventConstructor\",\n          members: [{\n            kind: \"ConstructSignature\",\n            canonicalReference: \"decentraland-ecs!IEventConstructor:new(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"new (...args: \"\n            }, {\n              kind: \"Content\",\n              text: \"any[]\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"args\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }],\n          extendsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!IEventNames:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type IEventNames = \"\n          }, {\n            kind: \"Content\",\n            text: \"keyof \"\n          }, {\n            kind: \"Reference\",\n            text: \"IEvents\",\n            canonicalReference: \"decentraland-ecs!IEvents:interface\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"IEventNames\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          }\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!IEvents:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface IEvents \"\n          }],\n          releaseTag: \"Public\",\n          name: \"IEvents\",\n          members: [{\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#builderSceneStart:member\",\n            docComment: \"/**\\n * This is triggered once the builder scene is loaded.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"builderSceneStart: \"\n            }, {\n              kind: \"Content\",\n              text: \"{}\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"builderSceneStart\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#builderSceneUnloaded:member\",\n            docComment: \"/**\\n * This is triggered once the builder scene is unloaded.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"builderSceneUnloaded: \"\n            }, {\n              kind: \"Content\",\n              text: \"{}\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"builderSceneUnloaded\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#chatMessage:member\",\n            docComment: \"/**\\n * `chatMessage` is triggered when the user sends a message through chat entity.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"chatMessage: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        id: string;\\n        sender: string;\\n        message: string;\\n        isCommand: boolean;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"chatMessage\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#comms:member\",\n            docComment: \"/**\\n * This event gets triggered after receiving a comms message.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"comms: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        sender: string;\\n        message: string;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"comms\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#entitiesOutOfBoundaries:member\",\n            docComment: \"/**\\n * After checking entities outside the fences, if any is outside, this event will be triggered with all the entities outside the scene.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"entitiesOutOfBoundaries: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        entities: string[];\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"entitiesOutOfBoundaries\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#entityBackInScene:member\",\n            docComment: \"/**\\n * This event gets triggered when an entity enters the scene fences.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"entityBackInScene: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        entityId: string;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"entityBackInScene\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#entityOutOfScene:member\",\n            docComment: \"/**\\n * This event gets triggered when an entity leaves the scene fences.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"entityOutOfScene: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        entityId: string;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"entityOutOfScene\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#gizmoEvent:member\",\n            docComment: \"/**\\n * For gizmos\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"gizmoEvent: \"\n            }, {\n              kind: \"Reference\",\n              text: \"GizmoDragEndEvent\",\n              canonicalReference: \"decentraland-ecs!GizmoDragEndEvent:type\"\n            }, {\n              kind: \"Content\",\n              text: \" | \"\n            }, {\n              kind: \"Reference\",\n              text: \"GizmoSelectedEvent\",\n              canonicalReference: \"decentraland-ecs!GizmoSelectedEvent:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"gizmoEvent\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 4\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#limitsExceeded:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"limitsExceeded: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        given: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Record\",\n              canonicalReference: \"!Record:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<string, number>;\\n        limit: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Record\",\n              canonicalReference: \"!Record:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<string, number>;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"limitsExceeded\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 6\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#metricsUpdate:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"metricsUpdate: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        given: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Record\",\n              canonicalReference: \"!Record:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<string, number>;\\n        limit: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Record\",\n              canonicalReference: \"!Record:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<string, number>;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"metricsUpdate\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 6\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#onAnimationEnd:member\",\n            docComment: \"/**\\n * `onAnimationEnd` is triggered when an animation clip gets finish\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onAnimationEnd: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        clipName: string;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"onAnimationEnd\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#onBlur:member\",\n            docComment: \"/**\\n * `onBlur` is triggered when an entity loses its focus. Dispatched by the `ui-input` and `ui-password` entities when the value is changed. It triggers a callback.\\n *\\n * Notice: Only entities with ID will be listening for click events.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onBlur: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        entityId: string;\\n        pointerId: number;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"onBlur\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#onChange:member\",\n            docComment: \"/**\\n * `onChange` is triggered when an entity changes its own internal state. Dispatched by the `ui-*` entities when their value is changed. It triggers a callback. Notice: Only entities with ID will be listening for click events.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onChange: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        value?: any;\\n        pointerId?: number;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"onChange\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#onClick:member\",\n            docComment: \"/**\\n * The onClick event is only used for UI elements\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onClick: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        entityId: string;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"onClick\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#onEnter:member\",\n            docComment: '/**\\n * `onEnter` is triggered when the user hits the \"Enter\" key from the keyboard Used principally by the Chat internal scene\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onEnter: \"\n            }, {\n              kind: \"Content\",\n              text: \"{}\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"onEnter\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#onFocus:member\",\n            docComment: \"/**\\n * `onFocus` is triggered when an entity focus is active. Dispatched by the `ui-input` and `ui-password` entities when the value is changed. It triggers a callback.\\n *\\n * Notice: Only entities with ID will be listening for click events.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onFocus: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        entityId: string;\\n        pointerId: number;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"onFocus\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#onTextSubmit:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onTextSubmit: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        text: string;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"onTextSubmit\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#pointerDown:member\",\n            docComment: \"/**\\n * `pointerDown` is triggered when the user press an input pointer. It could be a VR controller, a touch screen or the mouse.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"pointerDown: \"\n            }, {\n              kind: \"Reference\",\n              text: \"InputEventResult\",\n              canonicalReference: \"decentraland-ecs!InputEventResult:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"pointerDown\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#pointerEvent:member\",\n            docComment: \"/**\\n * `pointerEvent` is triggered when the user press or releases an input pointer. It could be a VR controller, a touch screen or the mouse.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"pointerEvent: \"\n            }, {\n              kind: \"Reference\",\n              text: \"GlobalInputEventResult\",\n              canonicalReference: \"decentraland-ecs!GlobalInputEventResult:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"pointerEvent\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#pointerUp:member\",\n            docComment: \"/**\\n * `pointerUp` is triggered when the user releases an input pointer. It could be a VR controller, a touch screen or the mouse.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"pointerUp: \"\n            }, {\n              kind: \"Reference\",\n              text: \"InputEventResult\",\n              canonicalReference: \"decentraland-ecs!InputEventResult:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"pointerUp\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#positionChanged:member\",\n            docComment: \"/**\\n * `positionChanged` is triggered when the position of the camera changes This event is throttled to 10 times per second.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"positionChanged: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        position: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\\n        cameraPosition: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\\n        playerHeight: number;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"positionChanged\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 6\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#raycastResponse:member\",\n            docComment: \"/**\\n * `raycastResponse` is triggered in response to a raycast query\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"raycastResponse: \"\n            }, {\n              kind: \"Reference\",\n              text: \"RaycastResponse\",\n              canonicalReference: \"decentraland-ecs!RaycastResponse:class\"\n            }, {\n              kind: \"Content\",\n              text: \"<any>\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"raycastResponse\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#rotationChanged:member\",\n            docComment: \"/**\\n * `rotationChanged` is triggered when the rotation of the camera changes. This event is throttled to 10 times per second.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"rotationChanged: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        rotation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\\n        quaternion: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"rotationChanged\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 6\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#sceneStart:member\",\n            docComment: \"/**\\n * This is triggered once the scene should start.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"sceneStart: \"\n            }, {\n              kind: \"Content\",\n              text: \"{}\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"sceneStart\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!IEvents#uuidEvent:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"uuidEvent: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        uuid: string;\\n        payload: any;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"uuidEvent\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          extendsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Input:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Input \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Input\",\n          members: [{\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Input.ensureInstance:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static ensureInstance(): \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"ensureInstance\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Input#handlePointerEvent:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"handlePointerEvent(data: \"\n            }, {\n              kind: \"Reference\",\n              text: \"GlobalInputEventResult\",\n              canonicalReference: \"decentraland-ecs!GlobalInputEventResult:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"data\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"handlePointerEvent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Input#isButtonPressed:member(1)\",\n            docComment: \"/**\\n * Allows to know if a button is pressed\\n *\\n * Returns true if the button is pressed\\n *\\n * @param buttonId - The id of the button.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"isButtonPressed(buttonId: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ActionButton\",\n              canonicalReference: \"decentraland-ecs!ActionButton:enum\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        BUTTON_DOWN: boolean;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"buttonId\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"isButtonPressed\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Input#subscribe:member(1)\",\n            docComment: \"/**\\n * Subscribes to an input event and triggers the provided callback.\\n *\\n * Returns a function that can be called to remove the subscription.\\n *\\n * @param eventName - The name of the event (see InputEventKind).\\n *\\n * @param buttonId - The id of the button.\\n *\\n * @param useRaycast - Enables getting raycast information.\\n *\\n * @param fn - A callback function to be called when the event is triggered.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subscribe(eventName: \"\n            }, {\n              kind: \"Reference\",\n              text: \"InputEventKind\",\n              canonicalReference: \"decentraland-ecs!InputEventKind:type\"\n            }, {\n              kind: \"Content\",\n              text: \", buttonId: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ActionButton\",\n              canonicalReference: \"decentraland-ecs!ActionButton:enum\"\n            }, {\n              kind: \"Content\",\n              text: \", useRaycast: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \", fn: \"\n            }, {\n              kind: \"Content\",\n              text: \"(e: \"\n            }, {\n              kind: \"Reference\",\n              text: \"LocalActionButtonEvent\",\n              canonicalReference: \"decentraland-ecs!LocalActionButtonEvent:type\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"() => false | \"\n            }, {\n              kind: \"Reference\",\n              text: \"Subscription\",\n              canonicalReference: \"decentraland-ecs!~Subscription:class\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 14\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"eventName\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"buttonId\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"useRaycast\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"fn\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 10\n              }\n            }],\n            name: \"subscribe\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Input#unsubscribe:member(1)\",\n            docComment: \"/**\\n * Removes an existing input event subscription.\\n *\\n * @param eventName - The name of the event (see InputEventKind).\\n *\\n * @param buttonId - The id of the button.\\n *\\n * @param fn - The callback function used when subscribing to the event.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"unsubscribe(eventName: \"\n            }, {\n              kind: \"Reference\",\n              text: \"InputEventKind\",\n              canonicalReference: \"decentraland-ecs!InputEventKind:type\"\n            }, {\n              kind: \"Content\",\n              text: \", buttonId: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ActionButton\",\n              canonicalReference: \"decentraland-ecs!ActionButton:enum\"\n            }, {\n              kind: \"Content\",\n              text: \", fn: \"\n            }, {\n              kind: \"Content\",\n              text: \"(e: \"\n            }, {\n              kind: \"Reference\",\n              text: \"LocalActionButtonEvent\",\n              canonicalReference: \"decentraland-ecs!LocalActionButtonEvent:type\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"false | \"\n            }, {\n              kind: \"Reference\",\n              text: \"Subscription\",\n              canonicalReference: \"decentraland-ecs!~Subscription:class\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"eventName\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"buttonId\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"fn\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 8\n              }\n            }],\n            name: \"unsubscribe\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!InputEventKind:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type InputEventKind = \"\n          }, {\n            kind: \"Content\",\n            text: \"'BUTTON_DOWN' | 'BUTTON_UP'\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"InputEventKind\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!InputEventResult:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type InputEventResult = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    origin: \"\n          }, {\n            kind: \"Reference\",\n            text: \"ReadOnlyVector3\",\n            canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    direction: \"\n          }, {\n            kind: \"Reference\",\n            text: \"ReadOnlyVector3\",\n            canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    buttonId: number;\\n    hit?: {\\n        length: number;\\n        hitPoint: \"\n          }, {\n            kind: \"Reference\",\n            text: \"ReadOnlyVector3\",\n            canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n        meshName: string;\\n        normal: \"\n          }, {\n            kind: \"Reference\",\n            text: \"ReadOnlyVector3\",\n            canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n        worldNormal: \"\n          }, {\n            kind: \"Reference\",\n            text: \"ReadOnlyVector3\",\n            canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n        entityId: string;\\n    };\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"InputEventResult\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 12\n          }\n        }, {\n          kind: \"Enum\",\n          canonicalReference: \"decentraland-ecs!InputEventType:enum\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare enum InputEventType \"\n          }],\n          releaseTag: \"Public\",\n          name: \"InputEventType\",\n          members: [{\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!InputEventType.DOWN:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"DOWN = \"\n            }, {\n              kind: \"Content\",\n              text: \"0\"\n            }],\n            releaseTag: \"Public\",\n            name: \"DOWN\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!InputEventType.UP:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"UP = \"\n            }, {\n              kind: \"Content\",\n              text: \"1\"\n            }],\n            releaseTag: \"Public\",\n            name: \"UP\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }]\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!InputState:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type InputState = \"\n          }, {\n            kind: \"Reference\",\n            text: \"Record\",\n            canonicalReference: \"!Record:type\"\n          }, {\n            kind: \"Content\",\n            text: \"<\"\n          }, {\n            kind: \"Reference\",\n            text: \"ActionButton\",\n            canonicalReference: \"decentraland-ecs!ActionButton:enum\"\n          }, {\n            kind: \"Content\",\n            text: \", {\\n    BUTTON_DOWN: boolean;\\n}>\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"InputState\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 5\n          }\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!IPhysicsCast:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface IPhysicsCast \"\n          }],\n          releaseTag: \"Public\",\n          name: \"IPhysicsCast\",\n          members: [{\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IPhysicsCast#hitAll:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hitAll(ray: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Ray\",\n              canonicalReference: \"decentraland-ecs!Ray:interface\"\n            }, {\n              kind: \"Content\",\n              text: \", hitCallback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"RaycastHitEntities\",\n              canonicalReference: \"decentraland-ecs!RaycastHitEntities:interface\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \", id?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"ray\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"hitCallback\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"id\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"hitAll\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!IPhysicsCast#hitFirst:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hitFirst(ray: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Ray\",\n              canonicalReference: \"decentraland-ecs!Ray:interface\"\n            }, {\n              kind: \"Content\",\n              text: \", hitCallback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"RaycastHitEntity\",\n              canonicalReference: \"decentraland-ecs!RaycastHitEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \", id?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"ray\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"hitCallback\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"id\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"hitFirst\"\n          }],\n          extendsTokenRanges: []\n        }, {\n          kind: \"Function\",\n          canonicalReference: \"decentraland-ecs!isDisposableComponent:function(1)\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare function isDisposableComponent(component: \"\n          }, {\n            kind: \"Reference\",\n            text: \"ComponentLike\",\n            canonicalReference: \"decentraland-ecs!ComponentLike:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"): \"\n          }, {\n            kind: \"Content\",\n            text: \"boolean\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          returnTypeTokenRange: {\n            startIndex: 3,\n            endIndex: 4\n          },\n          releaseTag: \"Public\",\n          overloadIndex: 1,\n          parameters: [{\n            parameterName: \"component\",\n            parameterTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          name: \"isDisposableComponent\"\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!ISize:interface\",\n          docComment: \"/**\\n * Interface for the size containing width and height\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface ISize \"\n          }],\n          releaseTag: \"Public\",\n          name: \"ISize\",\n          members: [{\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!ISize#height:member\",\n            docComment: \"/**\\n * Heighht\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"height: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"height\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!ISize#width:member\",\n            docComment: \"/**\\n * Width\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"width: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"width\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          extendsTokenRanges: []\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!ISystem:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface ISystem \"\n          }],\n          releaseTag: \"Public\",\n          name: \"ISystem\",\n          members: [{\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!ISystem#activate:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"activate?(engine: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEngine\",\n              canonicalReference: \"decentraland-ecs!IEngine:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"engine\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"activate\"\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!ISystem#active:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"active?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"active\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!ISystem#deactivate:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"deactivate?(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"deactivate\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!ISystem#onAddEntity:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onAddEntity?(entity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"entity\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"onAddEntity\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!ISystem#onRemoveEntity:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onRemoveEntity?(entity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"entity\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"onRemoveEntity\"\n          }, {\n            kind: \"MethodSignature\",\n            canonicalReference: \"decentraland-ecs!ISystem#update:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"update?(dt: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"dt\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"update\"\n          }],\n          extendsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!LocalActionButtonEvent:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type LocalActionButtonEvent = \"\n          }, {\n            kind: \"Reference\",\n            text: \"GlobalInputEventResult\",\n            canonicalReference: \"decentraland-ecs!GlobalInputEventResult:type\"\n          }, {\n            kind: \"Content\",\n            text: \" & {\\n    origin: \"\n          }, {\n            kind: \"Reference\",\n            text: \"Vector3\",\n            canonicalReference: \"decentraland-ecs!Vector3:class\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    direction: \"\n          }, {\n            kind: \"Reference\",\n            text: \"Vector3\",\n            canonicalReference: \"decentraland-ecs!Vector3:class\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    button: \"\n          }, {\n            kind: \"Reference\",\n            text: \"ActionButton\",\n            canonicalReference: \"decentraland-ecs!ActionButton:enum\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    hit?: \"\n          }, {\n            kind: \"Reference\",\n            text: \"GlobalInputEventResult\",\n            canonicalReference: \"decentraland-ecs!GlobalInputEventResult:type\"\n          }, {\n            kind: \"Content\",\n            text: \"['hit'] & {\\n        hitPoint: \"\n          }, {\n            kind: \"Reference\",\n            text: \"Vector3\",\n            canonicalReference: \"decentraland-ecs!Vector3:class\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n        normal: \"\n          }, {\n            kind: \"Reference\",\n            text: \"Vector3\",\n            canonicalReference: \"decentraland-ecs!Vector3:class\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n        worldNormal: \"\n          }, {\n            kind: \"Reference\",\n            text: \"Vector3\",\n            canonicalReference: \"decentraland-ecs!Vector3:class\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    };\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"LocalActionButtonEvent\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 17\n          }\n        }, {\n          kind: \"Function\",\n          canonicalReference: \"decentraland-ecs!log:function(1)\",\n          docComment: \"/**\\n * Log function. Only works in debug mode, otherwise it does nothing.\\n *\\n * @param args - any loggable parameter\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare function log(...args: \"\n          }, {\n            kind: \"Content\",\n            text: \"any[]\"\n          }, {\n            kind: \"Content\",\n            text: \"): \"\n          }, {\n            kind: \"Content\",\n            text: \"void\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          returnTypeTokenRange: {\n            startIndex: 3,\n            endIndex: 4\n          },\n          releaseTag: \"Public\",\n          overloadIndex: 1,\n          parameters: [{\n            parameterName: \"args\",\n            parameterTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          name: \"log\"\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Material:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Material extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Material\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#albedoColor:member\",\n            docComment: \"/**\\n * AKA Diffuse Color in other nomenclature. Defaults to #CCCCCC.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"albedoColor?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \" | \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"albedoColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 4\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#albedoTexture:member\",\n            docComment: \"/**\\n * Texture applied as material.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"albedoTexture?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Texture\",\n              canonicalReference: \"decentraland-ecs!Texture:class\"\n            }, {\n              kind: \"Content\",\n              text: \" | \"\n            }, {\n              kind: \"Reference\",\n              text: \"VideoTexture\",\n              canonicalReference: \"decentraland-ecs!VideoTexture:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"albedoTexture\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 4\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#alphaTest:member\",\n            docComment: \"/**\\n * Cutoff level for ALPHATEST mode. Range is between 0 and 1. Defaults to 0.5\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"alphaTest?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"alphaTest\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#alphaTexture:member\",\n            docComment: \"/**\\n * Texture applied as opacity. Default: the same texture used in albedoTexture.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"alphaTexture?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Texture\",\n              canonicalReference: \"decentraland-ecs!Texture:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"alphaTexture\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#ambientColor:member\",\n            docComment: \"/**\\n * AKA Diffuse Color in other nomenclature. Defaults to black.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"ambientColor?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"ambientColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#bumpTexture:member\",\n            docComment: \"/**\\n * Stores surface normal data used to displace a mesh in a texture.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"bumpTexture?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Texture\",\n              canonicalReference: \"decentraland-ecs!Texture:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"bumpTexture\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#directIntensity:member\",\n            docComment: \"/**\\n * Intensity of the direct lights e.g. the four lights available in scene. This impacts both the direct diffuse and specular highlights. Defaults to 1.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"directIntensity?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"directIntensity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#disableLighting:member\",\n            docComment: \"/**\\n * If sets to true, disables all the lights affecting the material. Defaults to false.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"disableLighting?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"disableLighting\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#emissiveColor:member\",\n            docComment: \"/**\\n * The color emitted from the material. Defaults to black.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"emissiveColor?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"emissiveColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#emissiveIntensity:member\",\n            docComment: \"/**\\n * Intensity of the emissive part of the material. This helps controlling the emissive effect without modifying the emissive color. Defaults to 1.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"emissiveIntensity?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"emissiveIntensity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#emissiveTexture:member\",\n            docComment: \"/**\\n * Emissive texture.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"emissiveTexture?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Texture\",\n              canonicalReference: \"decentraland-ecs!Texture:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"emissiveTexture\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#environmentIntensity:member\",\n            docComment: \"/**\\n * Intensity of the environment e.g. how much the environment will light the object either through harmonics for rough material or through the refelction for shiny ones. Defaults to 1.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"environmentIntensity?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"environmentIntensity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#metallic:member\",\n            docComment: \"/**\\n * Specifies the metallic scalar of the metallic/roughness workflow. Can also be used to scale the metalness values of the metallic texture. Defaults to 0.5.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"metallic?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"metallic\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#microSurface:member\",\n            docComment: \"/**\\n * AKA Glossiness in other nomenclature. Defaults to 1.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"microSurface?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"microSurface\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#reflectionColor:member\",\n            docComment: \"/**\\n * The color reflected from the material. Defaults to white.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"reflectionColor?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"reflectionColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#reflectivityColor:member\",\n            docComment: \"/**\\n * AKA Specular Color in other nomenclature. Defaults to white.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"reflectivityColor?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"reflectivityColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#refractionTexture:member\",\n            docComment: \"/**\\n * Stores the refracted light information in a texture.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"refractionTexture?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Texture\",\n              canonicalReference: \"decentraland-ecs!Texture:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"refractionTexture\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#roughness:member\",\n            docComment: \"/**\\n * Specifies the roughness scalar of the metallic/roughness workflow. Can also be used to scale the roughness values of the metallic texture. Defaults to 0.5.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"roughness?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"roughness\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#specularIntensity:member\",\n            docComment: \"/**\\n * This is a special control allowing the reduction of the specular highlights coming from the four lights of the scene. Those highlights may not be needed in full environment lighting. Defaults to 1.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"specularIntensity?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"specularIntensity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Material#transparencyMode:member\",\n            docComment: \"/**\\n * Sets the transparency mode of the material. Defaults to -1.\\n *\\n * | Value | Type | | ----- | ---------------------------------------------- | | 0 | OPAQUE (default) | | 1 | ALPHATEST | | 2 | ALPHABLEND | | 3 | ALPHATESTANDBLEND | | 4 | AUTO (ALPHABLEND if alpha OPAQUE otherwise |\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"transparencyMode: \"\n            }, {\n              kind: \"Reference\",\n              text: \"TransparencyMode\",\n              canonicalReference: \"decentraland-ecs!TransparencyMode:enum\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"transparencyMode\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Matrix:class\",\n          docComment: \"/**\\n * Class used to store matrix data (4x4)\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Matrix \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Matrix\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Matrix:constructor(1)\",\n            docComment: \"/**\\n * Creates an empty matrix (filled with zeros)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor();\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: []\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#add:member(1)\",\n            docComment: \"/**\\n * Adds the current matrix with a second one\\n *\\n * @param other - defines the matrix to add\\n *\\n * @returns a new matrix as the addition of the current matrix and the given one\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"add(other: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"other\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"add\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#addAtIndex:member(1)\",\n            docComment: \"/**\\n * add a value at the specified position in the current Matrix\\n *\\n * @param index - the index of the value within the matrix. between 0 and 15.\\n *\\n * @param value - the value to be added\\n *\\n * @returns the current updated matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addAtIndex(index: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", value: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"index\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"addAtIndex\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#addToRef:member(1)\",\n            docComment: '/**\\n * Sets the given matrix \"result\" to the addition of the current matrix and the given one\\n *\\n * @param other - defines the matrix to add\\n *\\n * @param result - defines the target matrix\\n *\\n * @returns the current matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addToRef(other: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"other\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"addToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#addToSelf:member(1)\",\n            docComment: \"/**\\n * Adds in place the given matrix to the current matrix\\n *\\n * @param other - defines the second operand\\n *\\n * @returns the current updated matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addToSelf(other: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"other\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"addToSelf\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#asArray:member(1)\",\n            docComment: \"/**\\n * Returns the matrix as a FloatArray\\n *\\n * @returns the matrix underlying array.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"asArray(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Readonly\",\n              canonicalReference: \"!Readonly:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"FloatArray\",\n              canonicalReference: \"decentraland-ecs!FloatArray:type\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"asArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#clone:member(1)\",\n            docComment: \"/**\\n * Clone the current matrix\\n *\\n * @returns a new matrix from the current matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"clone(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"clone\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.Compose:member(1)\",\n            docComment: \"/**\\n * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\\n *\\n * @param scale - defines the scale vector3\\n *\\n * @param rotation - defines the rotation quaternion\\n *\\n * @param translation - defines the translation vector3\\n *\\n * @returns a new matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Compose(scale: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", rotation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \", translation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"rotation\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"translation\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Compose\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.ComposeToRef:member(1)\",\n            docComment: \"/**\\n * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\\n *\\n * @param scale - defines the scale vector3\\n *\\n * @param rotation - defines the rotation quaternion\\n *\\n * @param translation - defines the translation vector3\\n *\\n * @param result - defines the target matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static ComposeToRef(scale: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", rotation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \", translation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"rotation\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"translation\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"ComposeToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#copyFrom:member(1)\",\n            docComment: \"/**\\n * Copy the current matrix from the given one\\n *\\n * @param other - defines the source matrix\\n *\\n * @returns the current updated matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFrom(other: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Readonly\",\n              canonicalReference: \"!Readonly:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"other\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 5\n              }\n            }],\n            name: \"copyFrom\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#copyToArray:member(1)\",\n            docComment: \"/**\\n * Populates the given array from the starting index with the current matrix values\\n *\\n * @param array - defines the target array\\n *\\n * @param offset - defines the offset in the target array where to start storing values\\n *\\n * @returns the current matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyToArray(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"FloatArray\",\n              canonicalReference: \"decentraland-ecs!FloatArray:type\"\n            }, {\n              kind: \"Content\",\n              text: \", offset?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"copyToArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#decompose:member(1)\",\n            docComment: \"/**\\n * Decomposes the current Matrix into a translation, rotation and scaling components\\n *\\n * @param scale - defines the scale vector3 given as a reference to update\\n *\\n * @param rotation - defines the rotation quaternion given as a reference to update\\n *\\n * @param translation - defines the translation vector3 given as a reference to update\\n *\\n * @returns true if operation was successful\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"decompose(scale?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", rotation?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \", translation?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"rotation\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"translation\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"decompose\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.DecomposeLerp:member(1)\",\n            docComment: '/**\\n * Builds a new matrix whose values are computed by: * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\\n *\\n * @param startValue - defines the first matrix\\n *\\n * @param endValue - defines the second matrix\\n *\\n * @param gradient - defines the gradient between the two matrices\\n *\\n * @returns the new matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static DecomposeLerp(startValue: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", endValue: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", gradient: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"startValue\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"endValue\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"gradient\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"DecomposeLerp\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.DecomposeLerpToRef:member(1)\",\n            docComment: '/**\\n * Update a matrix to values which are computed by: * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\\n *\\n * @param startValue - defines the first matrix\\n *\\n * @param endValue - defines the second matrix\\n *\\n * @param gradient - defines the gradient between the two matrices\\n *\\n * @param result - defines the target matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static DecomposeLerpToRef(startValue: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", endValue: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", gradient: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"startValue\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"endValue\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"gradient\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"DecomposeLerpToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#determinant:member(1)\",\n            docComment: \"/**\\n * Gets the determinant of the matrix\\n *\\n * @returns the matrix determinant\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"determinant(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"determinant\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#equals:member(1)\",\n            docComment: \"/**\\n * Check equality between this matrix and a second one\\n *\\n * @param value - defines the second matrix to compare\\n *\\n * @returns true is the current matrix and the given one values are strictly equal\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"equals(value: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"equals\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.FromArray:member(1)\",\n            docComment: \"/**\\n * Creates a matrix from an array\\n *\\n * @param array - defines the source array\\n *\\n * @param offset - defines an offset in the source array\\n *\\n * @returns a new Matrix set from the starting index of the given array\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromArray(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ArrayLike\",\n              canonicalReference: \"!ArrayLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<number>\"\n            }, {\n              kind: \"Content\",\n              text: \", offset?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }],\n            name: \"FromArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.FromArrayToRef:member(1)\",\n            docComment: \"/**\\n * Copy the content of an array into a given matrix\\n *\\n * @param array - defines the source array\\n *\\n * @param offset - defines an offset in the source array\\n *\\n * @param result - defines the target matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromArrayToRef(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ArrayLike\",\n              canonicalReference: \"!ArrayLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<number>\"\n            }, {\n              kind: \"Content\",\n              text: \", offset: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 8,\n              endIndex: 9\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 6,\n                endIndex: 7\n              }\n            }],\n            name: \"FromArrayToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.FromFloatArrayToRefScaled:member(1)\",\n            docComment: \"/**\\n * Stores an array into a matrix after having multiplied each component by a given factor\\n *\\n * @param array - defines the source array\\n *\\n * @param offset - defines the offset in the source array\\n *\\n * @param scale - defines the scaling factor\\n *\\n * @param result - defines the target matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromFloatArrayToRefScaled(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"FloatArray\",\n              canonicalReference: \"decentraland-ecs!FloatArray:type\"\n            }, {\n              kind: \"Content\",\n              text: \", offset: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"FromFloatArrayToRefScaled\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.FromQuaternionToRef:member(1)\",\n            docComment: \"/**\\n * Creates a rotation matrix from a quaternion and stores it in a target matrix\\n *\\n * @param quat - defines the quaternion to use\\n *\\n * @param result - defines the target matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromQuaternionToRef(quat: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"quat\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"FromQuaternionToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.FromValues:member(1)\",\n            docComment: \"/**\\n * Creates new matrix from a list of values (16)\\n *\\n * @param initialM11 - defines 1st value of 1st row\\n *\\n * @param initialM12 - defines 2nd value of 1st row\\n *\\n * @param initialM13 - defines 3rd value of 1st row\\n *\\n * @param initialM14 - defines 4th value of 1st row\\n *\\n * @param initialM21 - defines 1st value of 2nd row\\n *\\n * @param initialM22 - defines 2nd value of 2nd row\\n *\\n * @param initialM23 - defines 3rd value of 2nd row\\n *\\n * @param initialM24 - defines 4th value of 2nd row\\n *\\n * @param initialM31 - defines 1st value of 3rd row\\n *\\n * @param initialM32 - defines 2nd value of 3rd row\\n *\\n * @param initialM33 - defines 3rd value of 3rd row\\n *\\n * @param initialM34 - defines 4th value of 3rd row\\n *\\n * @param initialM41 - defines 1st value of 4th row\\n *\\n * @param initialM42 - defines 2nd value of 4th row\\n *\\n * @param initialM43 - defines 3rd value of 4th row\\n *\\n * @param initialM44 - defines 4th value of 4th row\\n *\\n * @returns the new matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromValues(initialM11: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM12: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM13: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM14: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM21: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM22: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM23: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM24: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM31: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM32: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM33: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM34: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM41: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM42: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM43: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM44: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 33,\n              endIndex: 34\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"initialM11\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"initialM12\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"initialM13\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"initialM14\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"initialM21\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }, {\n              parameterName: \"initialM22\",\n              parameterTypeTokenRange: {\n                startIndex: 11,\n                endIndex: 12\n              }\n            }, {\n              parameterName: \"initialM23\",\n              parameterTypeTokenRange: {\n                startIndex: 13,\n                endIndex: 14\n              }\n            }, {\n              parameterName: \"initialM24\",\n              parameterTypeTokenRange: {\n                startIndex: 15,\n                endIndex: 16\n              }\n            }, {\n              parameterName: \"initialM31\",\n              parameterTypeTokenRange: {\n                startIndex: 17,\n                endIndex: 18\n              }\n            }, {\n              parameterName: \"initialM32\",\n              parameterTypeTokenRange: {\n                startIndex: 19,\n                endIndex: 20\n              }\n            }, {\n              parameterName: \"initialM33\",\n              parameterTypeTokenRange: {\n                startIndex: 21,\n                endIndex: 22\n              }\n            }, {\n              parameterName: \"initialM34\",\n              parameterTypeTokenRange: {\n                startIndex: 23,\n                endIndex: 24\n              }\n            }, {\n              parameterName: \"initialM41\",\n              parameterTypeTokenRange: {\n                startIndex: 25,\n                endIndex: 26\n              }\n            }, {\n              parameterName: \"initialM42\",\n              parameterTypeTokenRange: {\n                startIndex: 27,\n                endIndex: 28\n              }\n            }, {\n              parameterName: \"initialM43\",\n              parameterTypeTokenRange: {\n                startIndex: 29,\n                endIndex: 30\n              }\n            }, {\n              parameterName: \"initialM44\",\n              parameterTypeTokenRange: {\n                startIndex: 31,\n                endIndex: 32\n              }\n            }],\n            name: \"FromValues\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.FromValuesToRef:member(1)\",\n            docComment: \"/**\\n * Stores a list of values (16) inside a given matrix\\n *\\n * @param initialM11 - defines 1st value of 1st row\\n *\\n * @param initialM12 - defines 2nd value of 1st row\\n *\\n * @param initialM13 - defines 3rd value of 1st row\\n *\\n * @param initialM14 - defines 4th value of 1st row\\n *\\n * @param initialM21 - defines 1st value of 2nd row\\n *\\n * @param initialM22 - defines 2nd value of 2nd row\\n *\\n * @param initialM23 - defines 3rd value of 2nd row\\n *\\n * @param initialM24 - defines 4th value of 2nd row\\n *\\n * @param initialM31 - defines 1st value of 3rd row\\n *\\n * @param initialM32 - defines 2nd value of 3rd row\\n *\\n * @param initialM33 - defines 3rd value of 3rd row\\n *\\n * @param initialM34 - defines 4th value of 3rd row\\n *\\n * @param initialM41 - defines 1st value of 4th row\\n *\\n * @param initialM42 - defines 2nd value of 4th row\\n *\\n * @param initialM43 - defines 3rd value of 4th row\\n *\\n * @param initialM44 - defines 4th value of 4th row\\n *\\n * @param result - defines the target matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromValuesToRef(initialM11: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM12: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM13: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM14: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM21: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM22: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM23: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM24: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM31: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM32: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM33: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM34: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM41: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM42: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM43: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", initialM44: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 35,\n              endIndex: 36\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"initialM11\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"initialM12\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"initialM13\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"initialM14\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"initialM21\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }, {\n              parameterName: \"initialM22\",\n              parameterTypeTokenRange: {\n                startIndex: 11,\n                endIndex: 12\n              }\n            }, {\n              parameterName: \"initialM23\",\n              parameterTypeTokenRange: {\n                startIndex: 13,\n                endIndex: 14\n              }\n            }, {\n              parameterName: \"initialM24\",\n              parameterTypeTokenRange: {\n                startIndex: 15,\n                endIndex: 16\n              }\n            }, {\n              parameterName: \"initialM31\",\n              parameterTypeTokenRange: {\n                startIndex: 17,\n                endIndex: 18\n              }\n            }, {\n              parameterName: \"initialM32\",\n              parameterTypeTokenRange: {\n                startIndex: 19,\n                endIndex: 20\n              }\n            }, {\n              parameterName: \"initialM33\",\n              parameterTypeTokenRange: {\n                startIndex: 21,\n                endIndex: 22\n              }\n            }, {\n              parameterName: \"initialM34\",\n              parameterTypeTokenRange: {\n                startIndex: 23,\n                endIndex: 24\n              }\n            }, {\n              parameterName: \"initialM41\",\n              parameterTypeTokenRange: {\n                startIndex: 25,\n                endIndex: 26\n              }\n            }, {\n              parameterName: \"initialM42\",\n              parameterTypeTokenRange: {\n                startIndex: 27,\n                endIndex: 28\n              }\n            }, {\n              parameterName: \"initialM43\",\n              parameterTypeTokenRange: {\n                startIndex: 29,\n                endIndex: 30\n              }\n            }, {\n              parameterName: \"initialM44\",\n              parameterTypeTokenRange: {\n                startIndex: 31,\n                endIndex: 32\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 33,\n                endIndex: 34\n              }\n            }],\n            name: \"FromValuesToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.FromXYZAxesToRef:member(1)\",\n            docComment: \"/**\\n * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\\n *\\n * @param xaxis - defines the value of the 1st axis\\n *\\n * @param yaxis - defines the value of the 2nd axis\\n *\\n * @param zaxis - defines the value of the 3rd axis\\n *\\n * @param result - defines the target matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromXYZAxesToRef(xaxis: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", yaxis: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", zaxis: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"xaxis\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"yaxis\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"zaxis\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"FromXYZAxesToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.GetAsMatrix2x2:member(1)\",\n            docComment: \"/**\\n * Extracts a 2x2 matrix from a given matrix and store the result in a FloatArray\\n *\\n * @param matrix - defines the matrix to use\\n *\\n * @returns a new FloatArray array with 4 elements : the 2x2 matrix extracted from the given matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static GetAsMatrix2x2(matrix: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"FloatArray\",\n              canonicalReference: \"decentraland-ecs!FloatArray:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"matrix\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"GetAsMatrix2x2\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.GetAsMatrix3x3:member(1)\",\n            docComment: \"/**\\n * Extracts a 3x3 matrix from a given matrix and store the result in a FloatArray\\n *\\n * @param matrix - defines the matrix to use\\n *\\n * @returns a new FloatArray array with 9 elements : the 3x3 matrix extracted from the given matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static GetAsMatrix3x3(matrix: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"FloatArray\",\n              canonicalReference: \"decentraland-ecs!FloatArray:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"matrix\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"GetAsMatrix3x3\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#getClassName:member(1)\",\n            docComment: '/**\\n * Returns the name of the current matrix class\\n *\\n * @returns the string \"Matrix\"\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getClassName(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getClassName\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#getHashCode:member(1)\",\n            docComment: \"/**\\n * Gets the hash code of the current matrix\\n *\\n * @returns the hash code\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getHashCode(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getHashCode\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#getRotationMatrix:member(1)\",\n            docComment: \"/**\\n * Gets only rotation part of the current matrix\\n *\\n * @returns a new matrix sets to the extracted rotation matrix from the current one\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getRotationMatrix(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getRotationMatrix\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#getRotationMatrixToRef:member(1)\",\n            docComment: '/**\\n * Extracts the rotation matrix from the current one and sets it as the given \"result\"\\n *\\n * @param result - defines the target matrix to store data to\\n *\\n * @returns the current matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getRotationMatrixToRef(result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"getRotationMatrixToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#getRow:member(1)\",\n            docComment: \"/**\\n * Gets specific row of the matrix\\n *\\n * @param index - defines the number of the row to get\\n *\\n * @returns the index-th row of the current matrix as a new Vector4\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getRow(index: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Nullable\",\n              canonicalReference: \"decentraland-ecs!Nullable:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"index\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"getRow\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#getTranslation:member(1)\",\n            docComment: \"/**\\n * Gets the translation value of the current matrix\\n *\\n * @returns a new Vector3 as the extracted translation from the matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getTranslation(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getTranslation\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#getTranslationToRef:member(1)\",\n            docComment: \"/**\\n * Fill a Vector3 with the extracted translation from the matrix\\n *\\n * @param result - defines the Vector3 where to store the translation\\n *\\n * @returns the current matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getTranslationToRef(result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"getTranslationToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.Identity:member(1)\",\n            docComment: \"/**\\n * Creates a new identity matrix\\n *\\n * @returns a new identity matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Identity(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Identity\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.IdentityToRef:member(1)\",\n            docComment: \"/**\\n * Creates a new identity matrix and stores the result in a given matrix\\n *\\n * @param result - defines the target matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static IdentityToRef(result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"IdentityToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#invert:member(1)\",\n            docComment: \"/**\\n * Inverts the current matrix in place\\n *\\n * @returns the current inverted matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"invert(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"invert\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.Invert:member(1)\",\n            docComment: \"/**\\n * Creates a new matrix as the invert of a given matrix\\n *\\n * @param source - defines the source matrix\\n *\\n * @returns the new matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Invert(source: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"source\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"Invert\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#invertToRef:member(1)\",\n            docComment: \"/**\\n * Sets the given matrix to the current inverted Matrix\\n *\\n * @param other - defines the target matrix\\n *\\n * @returns the unmodified current matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"invertToRef(other: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"other\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"invertToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#isIdentity:member(1)\",\n            docComment: \"/**\\n * Check if the current matrix is identity\\n *\\n * @returns true is the matrix is the identity matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"isIdentity(): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"isIdentity\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#isIdentityAs3x2:member(1)\",\n            docComment: \"/**\\n * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\\n *\\n * @returns true is the matrix is the identity matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"isIdentityAs3x2(): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"isIdentityAs3x2\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.Lerp:member(1)\",\n            docComment: '/**\\n * Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\\n *\\n * @param startValue - defines the start value\\n *\\n * @param endValue - defines the end value\\n *\\n * @param gradient - defines the gradient factor\\n *\\n * @returns the new matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Lerp(startValue: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", endValue: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", gradient: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"startValue\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"endValue\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"gradient\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Lerp\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.LerpToRef:member(1)\",\n            docComment: '/**\\n * Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\\n *\\n * @param startValue - defines the start value\\n *\\n * @param endValue - defines the end value\\n *\\n * @param gradient - defines the gradient factor\\n *\\n * @param result - defines the Matrix object where to store data\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static LerpToRef(startValue: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", endValue: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", gradient: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"startValue\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"endValue\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"gradient\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"LerpToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.LookAtLH:member(1)\",\n            docComment: '/**\\n * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\" This function works in left handed mode\\n *\\n * @param eye - defines the final position of the entity\\n *\\n * @param target - defines where the entity should look at\\n *\\n * @param up - defines the up vector for the entity\\n *\\n * @returns the new matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static LookAtLH(eye: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", target: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", up: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"eye\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"up\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"LookAtLH\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.LookAtLHToRef:member(1)\",\n            docComment: '/**\\n * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\". This function works in left handed mode\\n *\\n * @param eye - defines the final position of the entity\\n *\\n * @param target - defines where the entity should look at\\n *\\n * @param up - defines the up vector for the entity\\n *\\n * @param result - defines the target matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static LookAtLHToRef(eye: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", target: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", up: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"eye\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"up\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"LookAtLHToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.LookAtRH:member(1)\",\n            docComment: '/**\\n * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\" This function works in right handed mode\\n *\\n * @param eye - defines the final position of the entity\\n *\\n * @param target - defines where the entity should look at\\n *\\n * @param up - defines the up vector for the entity\\n *\\n * @returns the new matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static LookAtRH(eye: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", target: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", up: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"eye\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"up\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"LookAtRH\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.LookAtRHToRef:member(1)\",\n            docComment: '/**\\n * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\". This function works in right handed mode\\n *\\n * @param eye - defines the final position of the entity\\n *\\n * @param target - defines where the entity should look at\\n *\\n * @param up - defines the up vector for the entity\\n *\\n * @param result - defines the target matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static LookAtRHToRef(eye: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", target: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", up: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"eye\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"up\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"LookAtRHToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#multiply:member(1)\",\n            docComment: \"/**\\n * Multiply two matrices\\n *\\n * @param other - defines the second operand\\n *\\n * @returns a new matrix set with the multiplication result of the current Matrix and the given one\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiply(other: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Readonly\",\n              canonicalReference: \"!Readonly:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"other\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 5\n              }\n            }],\n            name: \"multiply\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#multiplyAtIndex:member(1)\",\n            docComment: \"/**\\n * mutiply the specified position in the current Matrix by a value\\n *\\n * @param index - the index of the value within the matrix. between 0 and 15.\\n *\\n * @param value - the value to be added\\n *\\n * @returns the current updated matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyAtIndex(index: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", value: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"index\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"multiplyAtIndex\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#multiplyToArray:member(1)\",\n            docComment: '/**\\n * Sets the FloatArray \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one\\n *\\n * @param other - defines the second operand\\n *\\n * @param result - defines the array where to store the multiplication\\n *\\n * @param offset - defines the offset in the target array where to start storing values\\n *\\n * @returns the current matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyToArray(other: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Readonly\",\n              canonicalReference: \"!Readonly:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"FloatArray\",\n              canonicalReference: \"decentraland-ecs!FloatArray:type\"\n            }, {\n              kind: \"Content\",\n              text: \", offset: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 10,\n              endIndex: 11\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"other\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 5\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 6,\n                endIndex: 7\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 8,\n                endIndex: 9\n              }\n            }],\n            name: \"multiplyToArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#multiplyToRef:member(1)\",\n            docComment: '/**\\n * Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one\\n *\\n * @param other - defines the second operand\\n *\\n * @param result - defines the matrix where to store the multiplication\\n *\\n * @returns the current matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyToRef(other: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Readonly\",\n              canonicalReference: \"!Readonly:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 8,\n              endIndex: 9\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"other\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 5\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 6,\n                endIndex: 7\n              }\n            }],\n            name: \"multiplyToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.OrthoLH:member(1)\",\n            docComment: \"/**\\n * Create a left-handed orthographic projection matrix\\n *\\n * @param width - defines the viewport width\\n *\\n * @param height - defines the viewport height\\n *\\n * @param znear - defines the near clip plane\\n *\\n * @param zfar - defines the far clip plane\\n *\\n * @returns a new matrix as a left-handed orthographic projection matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static OrthoLH(width: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", height: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", znear: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", zfar: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"width\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"height\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"znear\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"zfar\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"OrthoLH\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.OrthoLHToRef:member(1)\",\n            docComment: \"/**\\n * Store a left-handed orthographic projection to a given matrix\\n *\\n * @param width - defines the viewport width\\n *\\n * @param height - defines the viewport height\\n *\\n * @param znear - defines the near clip plane\\n *\\n * @param zfar - defines the far clip plane\\n *\\n * @param result - defines the target matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static OrthoLHToRef(width: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", height: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", znear: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", zfar: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"width\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"height\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"znear\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"zfar\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }],\n            name: \"OrthoLHToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.OrthoOffCenterLH:member(1)\",\n            docComment: \"/**\\n * Create a left-handed orthographic projection matrix\\n *\\n * @param left - defines the viewport left coordinate\\n *\\n * @param right - defines the viewport right coordinate\\n *\\n * @param bottom - defines the viewport bottom coordinate\\n *\\n * @param top - defines the viewport top coordinate\\n *\\n * @param znear - defines the near clip plane\\n *\\n * @param zfar - defines the far clip plane\\n *\\n * @returns a new matrix as a left-handed orthographic projection matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static OrthoOffCenterLH(left: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", bottom: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", top: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", znear: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", zfar: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 13,\n              endIndex: 14\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"bottom\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"top\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"znear\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }, {\n              parameterName: \"zfar\",\n              parameterTypeTokenRange: {\n                startIndex: 11,\n                endIndex: 12\n              }\n            }],\n            name: \"OrthoOffCenterLH\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.OrthoOffCenterLHToRef:member(1)\",\n            docComment: \"/**\\n * Stores a left-handed orthographic projection into a given matrix\\n *\\n * @param left - defines the viewport left coordinate\\n *\\n * @param right - defines the viewport right coordinate\\n *\\n * @param bottom - defines the viewport bottom coordinate\\n *\\n * @param top - defines the viewport top coordinate\\n *\\n * @param znear - defines the near clip plane\\n *\\n * @param zfar - defines the far clip plane\\n *\\n * @param result - defines the target matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static OrthoOffCenterLHToRef(left: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", bottom: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", top: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", znear: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", zfar: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 15,\n              endIndex: 16\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"bottom\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"top\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"znear\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }, {\n              parameterName: \"zfar\",\n              parameterTypeTokenRange: {\n                startIndex: 11,\n                endIndex: 12\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 13,\n                endIndex: 14\n              }\n            }],\n            name: \"OrthoOffCenterLHToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.OrthoOffCenterRH:member(1)\",\n            docComment: \"/**\\n * Creates a right-handed orthographic projection matrix\\n *\\n * @param left - defines the viewport left coordinate\\n *\\n * @param right - defines the viewport right coordinate\\n *\\n * @param bottom - defines the viewport bottom coordinate\\n *\\n * @param top - defines the viewport top coordinate\\n *\\n * @param znear - defines the near clip plane\\n *\\n * @param zfar - defines the far clip plane\\n *\\n * @returns a new matrix as a right-handed orthographic projection matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static OrthoOffCenterRH(left: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", bottom: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", top: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", znear: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", zfar: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 13,\n              endIndex: 14\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"bottom\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"top\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"znear\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }, {\n              parameterName: \"zfar\",\n              parameterTypeTokenRange: {\n                startIndex: 11,\n                endIndex: 12\n              }\n            }],\n            name: \"OrthoOffCenterRH\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.OrthoOffCenterRHToRef:member(1)\",\n            docComment: \"/**\\n * Stores a right-handed orthographic projection into a given matrix\\n *\\n * @param left - defines the viewport left coordinate\\n *\\n * @param right - defines the viewport right coordinate\\n *\\n * @param bottom - defines the viewport bottom coordinate\\n *\\n * @param top - defines the viewport top coordinate\\n *\\n * @param znear - defines the near clip plane\\n *\\n * @param zfar - defines the far clip plane\\n *\\n * @param result - defines the target matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static OrthoOffCenterRHToRef(left: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", bottom: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", top: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", znear: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", zfar: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 15,\n              endIndex: 16\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"bottom\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"top\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"znear\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }, {\n              parameterName: \"zfar\",\n              parameterTypeTokenRange: {\n                startIndex: 11,\n                endIndex: 12\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 13,\n                endIndex: 14\n              }\n            }],\n            name: \"OrthoOffCenterRHToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.PerspectiveFovLH:member(1)\",\n            docComment: \"/**\\n * Creates a left-handed perspective projection matrix\\n *\\n * @param fov - defines the horizontal field of view\\n *\\n * @param aspect - defines the aspect ratio\\n *\\n * @param znear - defines the near clip plane\\n *\\n * @param zfar - defines the far clip plane\\n *\\n * @returns a new matrix as a left-handed perspective projection matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static PerspectiveFovLH(fov: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", aspect: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", znear: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", zfar: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"fov\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"aspect\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"znear\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"zfar\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"PerspectiveFovLH\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.PerspectiveFovLHToRef:member(1)\",\n            docComment: \"/**\\n * Stores a left-handed perspective projection into a given matrix\\n *\\n * @param fov - defines the horizontal field of view\\n *\\n * @param aspect - defines the aspect ratio\\n *\\n * @param znear - defines the near clip plane\\n *\\n * @param zfar - defines the far clip plane\\n *\\n * @param result - defines the target matrix\\n *\\n * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static PerspectiveFovLHToRef(fov: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", aspect: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", znear: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", zfar: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", isVerticalFovFixed?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 13,\n              endIndex: 14\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"fov\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"aspect\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"znear\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"zfar\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }, {\n              parameterName: \"isVerticalFovFixed\",\n              parameterTypeTokenRange: {\n                startIndex: 11,\n                endIndex: 12\n              }\n            }],\n            name: \"PerspectiveFovLHToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.PerspectiveFovRH:member(1)\",\n            docComment: \"/**\\n * Creates a right-handed perspective projection matrix\\n *\\n * @param fov - defines the horizontal field of view\\n *\\n * @param aspect - defines the aspect ratio\\n *\\n * @param znear - defines the near clip plane\\n *\\n * @param zfar - defines the far clip plane\\n *\\n * @returns a new matrix as a right-handed perspective projection matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static PerspectiveFovRH(fov: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", aspect: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", znear: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", zfar: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"fov\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"aspect\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"znear\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"zfar\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"PerspectiveFovRH\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.PerspectiveFovRHToRef:member(1)\",\n            docComment: \"/**\\n * Stores a right-handed perspective projection into a given matrix\\n *\\n * @param fov - defines the horizontal field of view\\n *\\n * @param aspect - defines the aspect ratio\\n *\\n * @param znear - defines the near clip plane\\n *\\n * @param zfar - defines the far clip plane\\n *\\n * @param result - defines the target matrix\\n *\\n * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static PerspectiveFovRHToRef(fov: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", aspect: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", znear: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", zfar: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", isVerticalFovFixed?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 13,\n              endIndex: 14\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"fov\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"aspect\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"znear\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"zfar\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }, {\n              parameterName: \"isVerticalFovFixed\",\n              parameterTypeTokenRange: {\n                startIndex: 11,\n                endIndex: 12\n              }\n            }],\n            name: \"PerspectiveFovRHToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.PerspectiveFovWebVRToRef:member(1)\",\n            docComment: \"/**\\n * Stores a perspective projection for WebVR info a given matrix\\n *\\n * @param fov - defines the field of view\\n *\\n * @param znear - defines the near clip plane\\n *\\n * @param zfar - defines the far clip plane\\n *\\n * @param result - defines the target matrix\\n *\\n * @param rightHanded - defines if the matrix must be in right-handed mode (false by default)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static PerspectiveFovWebVRToRef(fov: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        upDegrees: number;\\n        downDegrees: number;\\n        leftDegrees: number;\\n        rightDegrees: number;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \", znear: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", zfar: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", rightHanded?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"fov\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"znear\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"zfar\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"rightHanded\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }],\n            name: \"PerspectiveFovWebVRToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.PerspectiveLH:member(1)\",\n            docComment: \"/**\\n * Creates a left-handed perspective projection matrix\\n *\\n * @param width - defines the viewport width\\n *\\n * @param height - defines the viewport height\\n *\\n * @param znear - defines the near clip plane\\n *\\n * @param zfar - defines the far clip plane\\n *\\n * @returns a new matrix as a left-handed perspective projection matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static PerspectiveLH(width: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", height: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", znear: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", zfar: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"width\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"height\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"znear\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"zfar\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"PerspectiveLH\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.Reflection:member(1)\",\n            docComment: \"/**\\n * Computes a reflection matrix from a plane\\n *\\n * @param plane - defines the reflection plane\\n *\\n * @returns a new matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Reflection(plane: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"plane\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"Reflection\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.ReflectionToRef:member(1)\",\n            docComment: \"/**\\n * Computes a reflection matrix from a plane\\n *\\n * @param plane - defines the reflection plane\\n *\\n * @param result - defines the target matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static ReflectionToRef(plane: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"plane\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"ReflectionToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#removeRotationAndScaling:member(1)\",\n            docComment: \"/**\\n * Remove rotation and scaling part from the matrix\\n *\\n * @returns the updated matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"removeRotationAndScaling(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"removeRotationAndScaling\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#reset:member(1)\",\n            docComment: \"/**\\n * Sets all the matrix elements to zero\\n *\\n * @returns the current matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"reset(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"reset\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.RotationAxis:member(1)\",\n            docComment: '/**\\n * Creates a new rotation matrix for \"angle\" radians around the given axis\\n *\\n * @param axis - defines the axis to use\\n *\\n * @param angle - defines the angle (in radians) to use\\n *\\n * @returns the new matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationAxis(axis: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", angle: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"axis\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"angle\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"RotationAxis\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.RotationAxisToRef:member(1)\",\n            docComment: '/**\\n * Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix\\n *\\n * @param axis - defines the axis to use\\n *\\n * @param angle - defines the angle (in radians) to use\\n *\\n * @param result - defines the target matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationAxisToRef(axis: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", angle: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"axis\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"angle\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"RotationAxisToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.RotationX:member(1)\",\n            docComment: '/**\\n * Creates a new rotation matrix for \"angle\" radians around the X axis\\n *\\n * @param angle - defines the angle (in radians) to use\\n *\\n * @returns the new matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationX(angle: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"angle\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"RotationX\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.RotationXToRef:member(1)\",\n            docComment: '/**\\n * Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix\\n *\\n * @param angle - defines the angle (in radians) to use\\n *\\n * @param result - defines the target matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationXToRef(angle: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"angle\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"RotationXToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.RotationY:member(1)\",\n            docComment: '/**\\n * Creates a new rotation matrix for \"angle\" radians around the Y axis\\n *\\n * @param angle - defines the angle (in radians) to use\\n *\\n * @returns the new matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationY(angle: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"angle\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"RotationY\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.RotationYawPitchRoll:member(1)\",\n            docComment: \"/**\\n * Creates a rotation matrix\\n *\\n * @param yaw - defines the yaw angle in radians (Y axis)\\n *\\n * @param pitch - defines the pitch angle in radians (X axis)\\n *\\n * @param roll - defines the roll angle in radians (X axis)\\n *\\n * @returns the new rotation matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationYawPitchRoll(yaw: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", pitch: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", roll: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"yaw\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"pitch\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"roll\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"RotationYawPitchRoll\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.RotationYawPitchRollToRef:member(1)\",\n            docComment: \"/**\\n * Creates a rotation matrix and stores it in a given matrix\\n *\\n * @param yaw - defines the yaw angle in radians (Y axis)\\n *\\n * @param pitch - defines the pitch angle in radians (X axis)\\n *\\n * @param roll - defines the roll angle in radians (X axis)\\n *\\n * @param result - defines the target matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationYawPitchRollToRef(yaw: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", pitch: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", roll: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"yaw\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"pitch\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"roll\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"RotationYawPitchRollToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.RotationYToRef:member(1)\",\n            docComment: '/**\\n * Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix\\n *\\n * @param angle - defines the angle (in radians) to use\\n *\\n * @param result - defines the target matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationYToRef(angle: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"angle\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"RotationYToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.RotationZ:member(1)\",\n            docComment: '/**\\n * Creates a new rotation matrix for \"angle\" radians around the Z axis\\n *\\n * @param angle - defines the angle (in radians) to use\\n *\\n * @returns the new matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationZ(angle: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"angle\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"RotationZ\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.RotationZToRef:member(1)\",\n            docComment: '/**\\n * Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix\\n *\\n * @param angle - defines the angle (in radians) to use\\n *\\n * @param result - defines the target matrix\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationZToRef(angle: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"angle\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"RotationZToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#scale:member(1)\",\n            docComment: \"/**\\n * Compute a new matrix set with the current matrix values multiplied by scale (float)\\n *\\n * @param scale - defines the scale factor\\n *\\n * @returns a new matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scale(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"scale\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#scaleAndAddToRef:member(1)\",\n            docComment: \"/**\\n * Scale the current matrix values by a factor and add the result to a given matrix\\n *\\n * @param scale - defines the scale factor\\n *\\n * @param result - defines the Matrix to store the result\\n *\\n * @returns the current matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleAndAddToRef(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"scaleAndAddToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#scaleToRef:member(1)\",\n            docComment: \"/**\\n * Scale the current matrix values by a factor to a given result matrix\\n *\\n * @param scale - defines the scale factor\\n *\\n * @param result - defines the matrix to store the result\\n *\\n * @returns the current matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleToRef(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"scaleToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.Scaling:member(1)\",\n            docComment: \"/**\\n * Creates a scaling matrix\\n *\\n * @param x - defines the scale factor on X axis\\n *\\n * @param y - defines the scale factor on Y axis\\n *\\n * @param z - defines the scale factor on Z axis\\n *\\n * @returns the new matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Scaling(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Scaling\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.ScalingToRef:member(1)\",\n            docComment: \"/**\\n * Creates a scaling matrix and stores it in a given matrix\\n *\\n * @param x - defines the scale factor on X axis\\n *\\n * @param y - defines the scale factor on Y axis\\n *\\n * @param z - defines the scale factor on Z axis\\n *\\n * @param result - defines the target matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static ScalingToRef(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"ScalingToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#setRow:member(1)\",\n            docComment: \"/**\\n * Sets the index-th row of the current matrix to the vector4 values\\n *\\n * @param index - defines the number of the row to set\\n *\\n * @param row - defines the target vector4\\n *\\n * @returns the updated current matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"setRow(index: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", row: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"index\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"row\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"setRow\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#setRowFromFloats:member(1)\",\n            docComment: \"/**\\n * Sets the index-th row of the current matrix with the given 4 x float values\\n *\\n * @param index - defines the row index\\n *\\n * @param x - defines the x component to set\\n *\\n * @param y - defines the y component to set\\n *\\n * @param z - defines the z component to set\\n *\\n * @param w - defines the w component to set\\n *\\n * @returns the updated current matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"setRowFromFloats(index: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", w: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"index\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"w\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }],\n            name: \"setRowFromFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#setTranslation:member(1)\",\n            docComment: \"/**\\n * Inserts the translation vector in the current matrix\\n *\\n * @param vector3 - defines the translation to insert\\n *\\n * @returns the current updated matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"setTranslation(vector3: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector3\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"setTranslation\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#setTranslationFromFloats:member(1)\",\n            docComment: \"/**\\n * Inserts the translation vector (using 3 floats) in the current matrix\\n *\\n * @param x - defines the 1st component of the translation\\n *\\n * @param y - defines the 2nd component of the translation\\n *\\n * @param z - defines the 3rd component of the translation\\n *\\n * @returns the current updated matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"setTranslationFromFloats(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"setTranslationFromFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#toArray:member(1)\",\n            docComment: \"/**\\n * Returns the matrix as a FloatArray\\n *\\n * @returns the matrix underlying array\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toArray(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Readonly\",\n              canonicalReference: \"!Readonly:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"FloatArray\",\n              canonicalReference: \"decentraland-ecs!FloatArray:type\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#toggleModelMatrixHandInPlace:member(1)\",\n            docComment: \"/**\\n * Toggles model matrix from being right handed to left handed in place and vice versa\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toggleModelMatrixHandInPlace(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toggleModelMatrixHandInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#toggleProjectionMatrixHandInPlace:member(1)\",\n            docComment: \"/**\\n * Toggles projection matrix from being right handed to left handed in place and vice versa\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toggleProjectionMatrixHandInPlace(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toggleProjectionMatrixHandInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#toNormalMatrix:member(1)\",\n            docComment: \"/**\\n * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).\\n *\\n * @param ref - matrix to store the result\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toNormalMatrix(ref: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"ref\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"toNormalMatrix\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.Translation:member(1)\",\n            docComment: \"/**\\n * Creates a translation matrix\\n *\\n * @param x - defines the translation on X axis\\n *\\n * @param y - defines the translation on Y axis\\n *\\n * @param z - defines the translationon Z axis\\n *\\n * @returns the new matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Translation(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Translation\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.TranslationToRef:member(1)\",\n            docComment: \"/**\\n * Creates a translation matrix and stores it in a given matrix\\n *\\n * @param x - defines the translation on X axis\\n *\\n * @param y - defines the translation on Y axis\\n *\\n * @param z - defines the translationon Z axis\\n *\\n * @param result - defines the target matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static TranslationToRef(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"TranslationToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#transpose:member(1)\",\n            docComment: \"/**\\n * Compute the transpose of the matrix\\n *\\n * @returns the new transposed matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"transpose(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"transpose\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.Transpose:member(1)\",\n            docComment: \"/**\\n * Compute the transpose of a given matrix\\n *\\n * @param matrix - defines the matrix to transpose\\n *\\n * @returns the new matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Transpose(matrix: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"matrix\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"Transpose\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix#transposeToRef:member(1)\",\n            docComment: \"/**\\n * Compute the transpose of the matrix and store it in a given matrix\\n *\\n * @param result - defines the target matrix\\n *\\n * @returns the current matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"transposeToRef(result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"transposeToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.TransposeToRef:member(1)\",\n            docComment: \"/**\\n * Compute the transpose of a matrix and store it in a target matrix\\n *\\n * @param matrix - defines the matrix to transpose\\n *\\n * @param result - defines the target matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static TransposeToRef(matrix: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"matrix\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"TransposeToRef\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Matrix#updateFlag:member\",\n            docComment: \"/**\\n * Gets the update flag of the matrix which is an unique number for the matrix. It will be incremented every time the matrix data change. You can use it to speed the comparison between two versions of the same matrix.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"updateFlag: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"updateFlag\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Matrix.Zero:member(1)\",\n            docComment: \"/**\\n * Creates a new zero matrix\\n *\\n * @returns a new zero matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Zero(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Zero\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!MessageBus:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class MessageBus \"\n          }],\n          releaseTag: \"Public\",\n          name: \"MessageBus\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!MessageBus:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `MessageBus` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor();\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: []\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!MessageBus#emit:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"emit(message: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \", payload: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Record\",\n              canonicalReference: \"!Record:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<any, any>\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"message\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"payload\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 5\n              }\n            }],\n            name: \"emit\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!MessageBus#on:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"on(message: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \", callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(value: any, sender: string) => void\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Observer\",\n              canonicalReference: \"decentraland-ecs!Observer:class\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"IEvents\",\n              canonicalReference: \"decentraland-ecs!IEvents:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"['comms']>\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 9\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"message\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"on\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!MethodDescriptor:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type MethodDescriptor = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    name: string;\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"MethodDescriptor\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!MinimapSceneInfo:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type MinimapSceneInfo = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    name: string;\\n    owner: string;\\n    description: string;\\n    previewImageUrl: string | undefined;\\n    type: number;\\n    parcels: {\\n        x: number;\\n        y: number;\\n    }[];\\n    isPOI: boolean;\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"MinimapSceneInfo\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!ModuleDescriptor:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type ModuleDescriptor = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    rpcHandle: string;\\n    methods: \"\n          }, {\n            kind: \"Reference\",\n            text: \"MethodDescriptor\",\n            canonicalReference: \"decentraland-ecs!MethodDescriptor:type\"\n          }, {\n            kind: \"Content\",\n            text: \"[];\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"ModuleDescriptor\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 4\n          }\n        }, {\n          kind: \"Function\",\n          canonicalReference: \"decentraland-ecs!movePlayerTo:function(1)\",\n          docComment: \"/**\\n * move player to a position inside the scene\\n *\\n * @param  - position PositionType\\n *\\n * @param  - cameraTarget PositionType\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare function movePlayerTo(position: \"\n          }, {\n            kind: \"Reference\",\n            text: \"PositionType\",\n            canonicalReference: \"decentraland-ecs!~PositionType:type\"\n          }, {\n            kind: \"Content\",\n            text: \", cameraTarget?: \"\n          }, {\n            kind: \"Reference\",\n            text: \"PositionType\",\n            canonicalReference: \"decentraland-ecs!~PositionType:type\"\n          }, {\n            kind: \"Content\",\n            text: \"): \"\n          }, {\n            kind: \"Content\",\n            text: \"void\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          returnTypeTokenRange: {\n            startIndex: 5,\n            endIndex: 6\n          },\n          releaseTag: \"Public\",\n          overloadIndex: 1,\n          parameters: [{\n            parameterName: \"position\",\n            parameterTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            parameterName: \"cameraTarget\",\n            parameterTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            }\n          }],\n          name: \"movePlayerTo\"\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!MultiObserver:class\",\n          docComment: \"/**\\n * Represent a list of observers registered to multiple Observables object.\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class MultiObserver<T> \"\n          }],\n          releaseTag: \"Public\",\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            },\n            defaultTypeTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            }\n          }],\n          name: \"MultiObserver\",\n          members: [{\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!MultiObserver#dispose:member(1)\",\n            docComment: \"/**\\n * Release associated resources\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"dispose(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"dispose\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!MultiObserver.Watch:member(1)\",\n            docComment: \"/**\\n * Raise a callback when one of the observable will notify\\n *\\n * @param observables - defines a list of observables to watch\\n *\\n * @param callback - defines the callback to call on notification\\n *\\n * @param mask - defines the mask used to filter notifications\\n *\\n * @param scope - defines the current scope used to restore the JS context\\n *\\n * @returns the new MultiObserver\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Watch<T>(observables: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Observable\",\n              canonicalReference: \"decentraland-ecs!Observable:class\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>[]\"\n            }, {\n              kind: \"Content\",\n              text: \", callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(eventData: T, eventState: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ObserverEventState\",\n              canonicalReference: \"decentraland-ecs!ObserverEventState:class\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \", mask?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", scope?: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"MultiObserver\",\n              canonicalReference: \"decentraland-ecs!MultiObserver:class\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 12,\n              endIndex: 14\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"observables\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 7\n              }\n            }, {\n              parameterName: \"mask\",\n              parameterTypeTokenRange: {\n                startIndex: 8,\n                endIndex: 9\n              }\n            }, {\n              parameterName: \"scope\",\n              parameterTypeTokenRange: {\n                startIndex: 10,\n                endIndex: 11\n              }\n            }],\n            typeParameters: [{\n              typeParameterName: \"T\",\n              constraintTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              },\n              defaultTypeTokenRange: {\n                startIndex: 0,\n                endIndex: 0\n              }\n            }],\n            name: \"Watch\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Function\",\n          canonicalReference: \"decentraland-ecs!newId:function(1)\",\n          docComment: \"/**\\n * Generates a new prefixed id\\n *\\n * @beta\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare function newId(type: \"\n          }, {\n            kind: \"Content\",\n            text: \"string\"\n          }, {\n            kind: \"Content\",\n            text: \"): \"\n          }, {\n            kind: \"Content\",\n            text: \"string\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          returnTypeTokenRange: {\n            startIndex: 3,\n            endIndex: 4\n          },\n          releaseTag: \"Beta\",\n          overloadIndex: 1,\n          parameters: [{\n            parameterName: \"type\",\n            parameterTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          name: \"newId\"\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!NFTShape:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class NFTShape extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"Shape\",\n            canonicalReference: \"decentraland-ecs!Shape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"NFTShape\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!NFTShape:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `NFTShape` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(src: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"src\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!NFTShape:constructor(2)\",\n            docComment: \"/**\\n * Constructs a new instance of the `NFTShape` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(src: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \", color: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 2,\n            parameters: [{\n              parameterName: \"src\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"color\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!NFTShape:constructor(3)\",\n            docComment: \"/**\\n * Constructs a new instance of the `NFTShape` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(src: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \", args: \"\n            }, {\n              kind: \"Reference\",\n              text: \"NFTShapeConstructorArgs\",\n              canonicalReference: \"decentraland-ecs!NFTShapeConstructorArgs:type\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 3,\n            parameters: [{\n              parameterName: \"src\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"args\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!NFTShape#color:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"color: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"color\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!NFTShape#src:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly src: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"src\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!NFTShape#style:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly style: \"\n            }, {\n              kind: \"Reference\",\n              text: \"PictureFrameStyle\",\n              canonicalReference: \"decentraland-ecs!PictureFrameStyle:enum\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"style\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!NFTShapeConstructorArgs:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type NFTShapeConstructorArgs = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    color?: \"\n          }, {\n            kind: \"Reference\",\n            text: \"Color3\",\n            canonicalReference: \"decentraland-ecs!Color3:class\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    style?: \"\n          }, {\n            kind: \"Reference\",\n            text: \"PictureFrameStyle\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle:enum\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"NFTShapeConstructorArgs\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 6\n          }\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!Nullable:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type Nullable<T> = \"\n          }, {\n            kind: \"Content\",\n            text: \"T | null\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"Nullable\",\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            },\n            defaultTypeTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            }\n          }],\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!OBJShape:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class OBJShape extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"Shape\",\n            canonicalReference: \"decentraland-ecs!Shape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"OBJShape\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!OBJShape:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `OBJShape` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(src: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"src\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OBJShape#src:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly src: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"src\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Observable:class\",\n          docComment: \"/**\\n * The Observable class is a simple implementation of the Observable pattern.\\n *\\n * There's one slight particularity though: a given Observable can notify its observer using a particular mask value, only the Observers registered with this mask value will be notified. This enable a more fine grained execution without having to rely on multiple different Observable objects. For instance you may have a given Observable that have four different types of notifications: Move (mask = 0x01), Stop (mask = 0x02), Turn Right (mask = 0X04), Turn Left (mask = 0X08). A given observer can register itself with only Move and Stop (mask = 0x03), then it will only be notified when one of these two occurs and will never be for Turn Left/Right.\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Observable<T> \"\n          }],\n          releaseTag: \"Public\",\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            },\n            defaultTypeTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            }\n          }],\n          name: \"Observable\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Observable:constructor(1)\",\n            docComment: \"/**\\n * Creates a new observable\\n *\\n * @param onObserverAdded - defines a callback to call when a new observer is added\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(onObserverAdded?: \"\n            }, {\n              kind: \"Content\",\n              text: \"(observer: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Observer\",\n              canonicalReference: \"decentraland-ecs!Observer:class\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>) => void\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"onObserverAdded\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Observable#add:member(1)\",\n            docComment: \"/**\\n * Create a new Observer with the specified callback\\n *\\n * @param callback - the callback that will be executed for that Observer\\n *\\n * @param mask - the mask used to filter observers\\n *\\n * @param insertFirst - if true the callback will be inserted at the first position, hence executed before the others ones. If false (default behavior) the callback will be inserted at the last position, executed after all the others already present.\\n *\\n * @param scope - optional scope for the callback to be called from\\n *\\n * @param unregisterOnFirstCall - defines if the observer as to be unregistered after the next notification\\n *\\n * @returns the new observer created for the callback\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"add(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(eventData: T, eventState: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ObserverEventState\",\n              canonicalReference: \"decentraland-ecs!ObserverEventState:class\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \", mask?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", insertFirst?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \", scope?: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \", unregisterOnFirstCall?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"null | \"\n            }, {\n              kind: \"Reference\",\n              text: \"Observer\",\n              canonicalReference: \"decentraland-ecs!Observer:class\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 13,\n              endIndex: 16\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"mask\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"insertFirst\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"scope\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }, {\n              parameterName: \"unregisterOnFirstCall\",\n              parameterTypeTokenRange: {\n                startIndex: 11,\n                endIndex: 12\n              }\n            }],\n            name: \"add\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Observable#addOnce:member(1)\",\n            docComment: \"/**\\n * Create a new Observer with the specified callback and unregisters after the next notification\\n *\\n * @param callback - the callback that will be executed for that Observer\\n *\\n * @returns the new observer created for the callback\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addOnce(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(eventData: T, eventState: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ObserverEventState\",\n              canonicalReference: \"decentraland-ecs!ObserverEventState:class\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"null | \"\n            }, {\n              kind: \"Reference\",\n              text: \"Observer\",\n              canonicalReference: \"decentraland-ecs!Observer:class\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }],\n            name: \"addOnce\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Observable#clear:member(1)\",\n            docComment: \"/**\\n * Clear the list of observers\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"clear(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"clear\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Observable#clone:member(1)\",\n            docComment: \"/**\\n * Clone the current observable\\n *\\n * @returns a new observable\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"clone(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Observable\",\n              canonicalReference: \"decentraland-ecs!Observable:class\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"clone\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Observable#hasObservers:member(1)\",\n            docComment: \"/**\\n * Gets a boolean indicating if the observable has at least one observer\\n *\\n * @returns true is the Observable has at least one Observer registered\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hasObservers(): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"hasObservers\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Observable#hasSpecificMask:member(1)\",\n            docComment: \"/**\\n * Does this observable handles observer registered with a given mask\\n *\\n * @param mask - defines the mask to be tested\\n *\\n * @returns whether or not one observer registered with the given mask is handeled\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hasSpecificMask(mask?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"mask\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"hasSpecificMask\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Observable#notifyObserver:member(1)\",\n            docComment: \"/**\\n * Notify a specific observer\\n *\\n * @param observer - defines the observer to notify\\n *\\n * @param eventData - defines the data to be sent to each callback\\n *\\n * @param mask - is used to filter observers defaults to -1\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"notifyObserver(observer: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Observer\",\n              canonicalReference: \"decentraland-ecs!Observer:class\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>\"\n            }, {\n              kind: \"Content\",\n              text: \", eventData: \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \", mask?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 8,\n              endIndex: 9\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"observer\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"eventData\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }, {\n              parameterName: \"mask\",\n              parameterTypeTokenRange: {\n                startIndex: 6,\n                endIndex: 7\n              }\n            }],\n            name: \"notifyObserver\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Observable#notifyObservers:member(1)\",\n            docComment: \"/**\\n * Notify all Observers by calling their respective callback with the given data Will return true if all observers were executed, false if an observer set skipNextObservers to true, then prevent the subsequent ones to execute\\n *\\n * @param eventData - defines the data to send to all observers\\n *\\n * @param mask - defines the mask of the current notification (observers with incompatible mask (ie mask & observer.mask === 0) will not be notified)\\n *\\n * @param target - defines the original target of the state\\n *\\n * @param currentTarget - defines the current target of the state\\n *\\n * @returns false if the complete observer chain was not processed (because one observer set the skipNextObservers to true)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"notifyObservers(eventData: \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \", mask?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", target?: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \", currentTarget?: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"eventData\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"mask\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"currentTarget\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"notifyObservers\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Observable#notifyObserversWithPromise:member(1)\",\n            docComment: \"/**\\n * Calling this will execute each callback, expecting it to be a promise or return a value. If at any point in the chain one function fails, the promise will fail and the execution will not continue. This is useful when a chain of events (sometimes async events) is needed to initialize a certain object and it is crucial that all callbacks will be executed. The order of the callbacks is kept, callbacks are not executed parallel.\\n *\\n * @param eventData - The data to be sent to each callback\\n *\\n * @param mask - is used to filter observers defaults to -1\\n *\\n * @param target - defines the callback target (see EventState)\\n *\\n * @param currentTarget - defines he current object in the bubbling phase\\n *\\n * @returns will return a Promise than resolves when all callbacks executed successfully.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"notifyObserversWithPromise(eventData: \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \", mask?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", target?: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \", currentTarget?: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Promise\",\n              canonicalReference: \"!Promise:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 11\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"eventData\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"mask\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"currentTarget\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"notifyObserversWithPromise\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Observable#remove:member(1)\",\n            docComment: \"/**\\n * Remove an Observer from the Observable object\\n *\\n * @param observer - the instance of the Observer to remove\\n *\\n * @returns false if it doesn't belong to this Observable\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"remove(observer: \"\n            }, {\n              kind: \"Content\",\n              text: \"null | \"\n            }, {\n              kind: \"Reference\",\n              text: \"Observer\",\n              canonicalReference: \"decentraland-ecs!Observer:class\"\n            }, {\n              kind: \"Content\",\n              text: \"<T>\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"observer\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }],\n            name: \"remove\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Observable#removeCallback:member(1)\",\n            docComment: \"/**\\n * Remove a callback from the Observable object\\n *\\n * @param callback - the callback to remove\\n *\\n * @param scope - optional scope. If used only the callbacks with this scope will be removed\\n *\\n * @returns false if it doesn't belong to this Observable\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"removeCallback(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(eventData: T, eventState: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ObserverEventState\",\n              canonicalReference: \"decentraland-ecs!ObserverEventState:class\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \", scope?: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"scope\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"removeCallback\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!ObservableComponent:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class ObservableComponent \"\n          }],\n          releaseTag: \"Public\",\n          name: \"ObservableComponent\",\n          members: [{\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent.component:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static component(target: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ObservableComponent\",\n              canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n            }, {\n              kind: \"Content\",\n              text: \", propertyKey: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"propertyKey\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"component\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent#data:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"data: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"data\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent#dirty:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"dirty: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"dirty\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent.field:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static field(target: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ObservableComponent\",\n              canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n            }, {\n              kind: \"Content\",\n              text: \", propertyKey: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"propertyKey\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"field\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent#onChange:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onChange(fn: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ObservableComponentSubscription\",\n              canonicalReference: \"decentraland-ecs!ObservableComponentSubscription:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"this\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"fn\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"onChange\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent.readonly:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static readonly(target: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ObservableComponent\",\n              canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n            }, {\n              kind: \"Content\",\n              text: \", propertyKey: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"propertyKey\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"readonly\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent#toJSON:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toJSON(): \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toJSON\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent.uiValue:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static uiValue(target: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ObservableComponent\",\n              canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n            }, {\n              kind: \"Content\",\n              text: \", propertyKey: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"propertyKey\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"uiValue\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!ObservableComponentSubscription:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type ObservableComponentSubscription = \"\n          }, {\n            kind: \"Content\",\n            text: \"(key: string, newVal: any, oldVal: any) => void\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"ObservableComponentSubscription\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Observer:class\",\n          docComment: \"/**\\n * Represent an Observer registered to a given Observable object.\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Observer<T> \"\n          }],\n          releaseTag: \"Public\",\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            },\n            defaultTypeTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            }\n          }],\n          name: \"Observer\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Observer#_willBeUnregistered:member\",\n            docComment: \"/**\\n * For internal usage\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"_willBeUnregistered: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"_willBeUnregistered\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Observer:constructor(1)\",\n            docComment: \"/**\\n * Creates a new observer\\n *\\n * @param callback - defines the callback to call when the observer is notified\\n *\\n * @param mask - defines the mask of the observer (used to filter notifications)\\n *\\n * @param scope - defines the current scope used to restore the JS context\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(\\n    callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(eventData: T, eventState: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ObserverEventState\",\n              canonicalReference: \"decentraland-ecs!ObserverEventState:class\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    mask: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    scope?: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"mask\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"scope\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Observer#callback:member\",\n            docComment: \"/**\\n * Defines the callback to call when the observer is notified\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(eventData: T, eventState: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ObserverEventState\",\n              canonicalReference: \"decentraland-ecs!ObserverEventState:class\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"callback\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 4\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Observer#mask:member\",\n            docComment: \"/**\\n * Defines the mask of the observer (used to filter notifications)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"mask: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"mask\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Observer#scope:member\",\n            docComment: \"/**\\n * Defines the current scope used to restore the JS context\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scope: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"scope\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Observer#unregisterOnNextCall:member\",\n            docComment: \"/**\\n * Gets or sets a property defining that the observer as to be unregistered after the next notification\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"unregisterOnNextCall: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"unregisterOnNextCall\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!ObserverEventState:class\",\n          docComment: \"/**\\n * A class serves as a medium between the observable and its observers\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class ObserverEventState \"\n          }],\n          releaseTag: \"Public\",\n          name: \"ObserverEventState\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!ObserverEventState:constructor(1)\",\n            docComment: \"/**\\n * Create a new EventState\\n *\\n * @param mask - defines the mask associated with this state\\n *\\n * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\\n *\\n * @param target - defines the original target of the state\\n *\\n * @param currentTarget - defines the current target of the state\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(mask: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", skipNextObservers?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \", target?: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \", currentTarget?: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"mask\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"skipNextObservers\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"currentTarget\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ObserverEventState#currentTarget:member\",\n            docComment: \"/**\\n * The current object in the bubbling phase\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"currentTarget?: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"currentTarget\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!ObserverEventState#initalize:member(1)\",\n            docComment: \"/**\\n * Initialize the current event state\\n *\\n * @param mask - defines the mask associated with this state\\n *\\n * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\\n *\\n * @param target - defines the original target of the state\\n *\\n * @param currentTarget - defines the current target of the state\\n *\\n * @returns the current event state\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"initalize(mask: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", skipNextObservers?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \", target?: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \", currentTarget?: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"ObserverEventState\",\n              canonicalReference: \"decentraland-ecs!ObserverEventState:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"mask\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"skipNextObservers\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"currentTarget\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"initalize\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ObserverEventState#lastReturnValue:member\",\n            docComment: \"/**\\n * This will be populated with the return value of the last function that was executed. If it is the first function in the callback chain it will be the event data.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"lastReturnValue?: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"lastReturnValue\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ObserverEventState#mask:member\",\n            docComment: \"/**\\n * Get the mask value that were used to trigger the event corresponding to this EventState object\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"mask: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"mask\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ObserverEventState#skipNextObservers:member\",\n            docComment: \"/**\\n * An Observer can set this property to true to prevent subsequent observers of being notified\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"skipNextObservers: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"skipNextObservers\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ObserverEventState#target:member\",\n            docComment: \"/**\\n * The object that originally notified the event\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"target?: \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"target\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!OnAnimationEnd:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class OnAnimationEnd extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"OnUUIDEvent\",\n            canonicalReference: \"decentraland-ecs!OnUUIDEvent:class\"\n          }, {\n            kind: \"Content\",\n            text: \"<'onAnimationEnd'> \"\n          }],\n          releaseTag: \"Public\",\n          name: \"OnAnimationEnd\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnAnimationEnd#type:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly type: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"type\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!OnBlur:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class OnBlur extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"OnUUIDEvent\",\n            canonicalReference: \"decentraland-ecs!OnUUIDEvent:class\"\n          }, {\n            kind: \"Content\",\n            text: \"<'onBlur'> \"\n          }],\n          releaseTag: \"Public\",\n          name: \"OnBlur\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!OnBlur:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `OnBlur` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEvents\",\n              canonicalReference: \"decentraland-ecs!IEvents:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"['onBlur']) => void\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnBlur#type:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly type: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"type\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!OnChanged:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class OnChanged extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"OnUUIDEvent\",\n            canonicalReference: \"decentraland-ecs!OnUUIDEvent:class\"\n          }, {\n            kind: \"Content\",\n            text: \"<'onChange'> \"\n          }],\n          releaseTag: \"Public\",\n          name: \"OnChanged\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!OnChanged:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `OnChanged` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEvents\",\n              canonicalReference: \"decentraland-ecs!IEvents:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"['onChange']) => void\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnChanged#type:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly type: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"type\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!OnClick:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class OnClick extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"OnPointerUUIDEvent\",\n            canonicalReference: \"decentraland-ecs!OnPointerUUIDEvent:class\"\n          }, {\n            kind: \"Content\",\n            text: \"<'onClick'> \"\n          }],\n          releaseTag: \"Public\",\n          name: \"OnClick\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!OnClick:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `OnClick` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEvents\",\n              canonicalReference: \"decentraland-ecs!IEvents:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"['onClick']) => void\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!OnClick:constructor(2)\",\n            docComment: \"/**\\n * Constructs a new instance of the `OnClick` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEvents\",\n              canonicalReference: \"decentraland-ecs!IEvents:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"['onClick']) => void\"\n            }, {\n              kind: \"Content\",\n              text: \", options: \"\n            }, {\n              kind: \"Reference\",\n              text: \"OnPointerUUIDEventOptions\",\n              canonicalReference: \"decentraland-ecs!OnPointerUUIDEventOptions:type\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 2,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"options\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnClick#type:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly type: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"type\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!OnEnter:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class OnEnter extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"OnUUIDEvent\",\n            canonicalReference: \"decentraland-ecs!OnUUIDEvent:class\"\n          }, {\n            kind: \"Content\",\n            text: \"<'onEnter'> \"\n          }],\n          releaseTag: \"Public\",\n          name: \"OnEnter\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!OnEnter:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `OnEnter` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEvents\",\n              canonicalReference: \"decentraland-ecs!IEvents:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"['onEnter']) => void\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnEnter#type:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly type: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"type\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!OnFocus:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class OnFocus extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"OnUUIDEvent\",\n            canonicalReference: \"decentraland-ecs!OnUUIDEvent:class\"\n          }, {\n            kind: \"Content\",\n            text: \"<'onFocus'> \"\n          }],\n          releaseTag: \"Public\",\n          name: \"OnFocus\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!OnFocus:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `OnFocus` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEvents\",\n              canonicalReference: \"decentraland-ecs!IEvents:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"['onFocus']) => void\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnFocus#type:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly type: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"type\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!OnGizmoEvent:class\",\n          docComment: \"/**\\n * This event is triggered after the user finalizes dragging a gizmo.\\n *\\n * @beta\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class OnGizmoEvent extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"OnUUIDEvent\",\n            canonicalReference: \"decentraland-ecs!OnUUIDEvent:class\"\n          }, {\n            kind: \"Content\",\n            text: \"<'gizmoEvent'> \"\n          }],\n          releaseTag: \"Beta\",\n          name: \"OnGizmoEvent\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnGizmoEvent#type:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly type: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Beta\",\n            name: \"type\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!OnPointerDown:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class OnPointerDown extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"OnPointerUUIDEvent\",\n            canonicalReference: \"decentraland-ecs!OnPointerUUIDEvent:class\"\n          }, {\n            kind: \"Content\",\n            text: \"<'pointerDown'> \"\n          }],\n          releaseTag: \"Public\",\n          name: \"OnPointerDown\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!OnPointerDown:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `OnPointerDown` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEvents\",\n              canonicalReference: \"decentraland-ecs!IEvents:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"['pointerDown']) => void\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!OnPointerDown:constructor(2)\",\n            docComment: \"/**\\n * Constructs a new instance of the `OnPointerDown` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEvents\",\n              canonicalReference: \"decentraland-ecs!IEvents:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"['pointerDown']) => void\"\n            }, {\n              kind: \"Content\",\n              text: \", options: \"\n            }, {\n              kind: \"Reference\",\n              text: \"OnPointerUUIDEventOptions\",\n              canonicalReference: \"decentraland-ecs!OnPointerUUIDEventOptions:type\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 2,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"options\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnPointerDown#type:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly type: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"type\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!OnPointerUp:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class OnPointerUp extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"OnPointerUUIDEvent\",\n            canonicalReference: \"decentraland-ecs!OnPointerUUIDEvent:class\"\n          }, {\n            kind: \"Content\",\n            text: \"<'pointerUp'> \"\n          }],\n          releaseTag: \"Public\",\n          name: \"OnPointerUp\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!OnPointerUp:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `OnPointerUp` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEvents\",\n              canonicalReference: \"decentraland-ecs!IEvents:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"['pointerUp']) => void\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!OnPointerUp:constructor(2)\",\n            docComment: \"/**\\n * Constructs a new instance of the `OnPointerUp` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEvents\",\n              canonicalReference: \"decentraland-ecs!IEvents:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"['pointerUp']) => void\"\n            }, {\n              kind: \"Content\",\n              text: \", options: \"\n            }, {\n              kind: \"Reference\",\n              text: \"OnPointerUUIDEventOptions\",\n              canonicalReference: \"decentraland-ecs!OnPointerUUIDEventOptions:type\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 2,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"options\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnPointerUp#type:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly type: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"type\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!OnPointerUUIDEvent:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class OnPointerUUIDEvent<T extends \"\n          }, {\n            kind: \"Content\",\n            text: \"keyof \"\n          }, {\n            kind: \"Reference\",\n            text: \"IEvents\",\n            canonicalReference: \"decentraland-ecs!IEvents:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"> extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"OnUUIDEvent\",\n            canonicalReference: \"decentraland-ecs!OnUUIDEvent:class\"\n          }, {\n            kind: \"Content\",\n            text: \"<T> \"\n          }],\n          releaseTag: \"Public\",\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            defaultTypeTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            }\n          }],\n          name: \"OnPointerUUIDEvent\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnPointerUUIDEvent#button:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"button: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ActionButton\",\n              canonicalReference: \"decentraland-ecs!ActionButton:enum\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"button\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnPointerUUIDEvent#distance:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"distance: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"distance\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnPointerUUIDEvent#hoverText:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hoverText: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"hoverText\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnPointerUUIDEvent#showFeedback:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"showFeedback: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"showFeedback\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!OnPointerUUIDEvent#toJSON:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toJSON(): \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        uuid: string;\\n        type: string | undefined;\\n        button: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ActionButton\",\n              canonicalReference: \"decentraland-ecs!ActionButton:enum\"\n            }, {\n              kind: \"Content\",\n              text: \";\\n        hoverText: string;\\n        distance: number;\\n        showFeedback: boolean;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toJSON\"\n          }],\n          extendsTokenRange: {\n            startIndex: 4,\n            endIndex: 6\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!OnPointerUUIDEventOptions:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type OnPointerUUIDEventOptions = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    button?: \"\n          }, {\n            kind: \"Reference\",\n            text: \"ActionButton\",\n            canonicalReference: \"decentraland-ecs!ActionButton:enum\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    hoverText?: string;\\n    showFeedback?: boolean;\\n    distance?: number;\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"OnPointerUUIDEventOptions\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 4\n          }\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!OnTextSubmit:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class OnTextSubmit extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"OnUUIDEvent\",\n            canonicalReference: \"decentraland-ecs!OnUUIDEvent:class\"\n          }, {\n            kind: \"Content\",\n            text: \"<'onTextSubmit'> \"\n          }],\n          releaseTag: \"Public\",\n          name: \"OnTextSubmit\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!OnTextSubmit:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `OnTextSubmit` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEvents\",\n              canonicalReference: \"decentraland-ecs!IEvents:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"['onTextSubmit']) => void\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnTextSubmit#type:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly type: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"type\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!OnUUIDEvent:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class OnUUIDEvent<T extends \"\n          }, {\n            kind: \"Content\",\n            text: \"keyof \"\n          }, {\n            kind: \"Reference\",\n            text: \"IEvents\",\n            canonicalReference: \"decentraland-ecs!IEvents:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"> extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            defaultTypeTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            }\n          }],\n          name: \"OnUUIDEvent\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!OnUUIDEvent:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `OnUUIDEvent` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEvents\",\n              canonicalReference: \"decentraland-ecs!IEvents:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"[T]) => void\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnUUIDEvent#callback:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: any) => void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"callback\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!OnUUIDEvent#toJSON:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toJSON(): \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        uuid: string;\\n        type: string | undefined;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toJSON\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnUUIDEvent#type:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly type: \"\n            }, {\n              kind: \"Content\",\n              text: \"string | undefined\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"type\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!OnUUIDEvent#uuid:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly uuid: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"uuid\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!OnUUIDEvent.uuidEvent:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static uuidEvent(target: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ObservableComponent\",\n              canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n            }, {\n              kind: \"Content\",\n              text: \", propertyKey: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"propertyKey\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"uuidEvent\"\n          }],\n          extendsTokenRange: {\n            startIndex: 4,\n            endIndex: 6\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Function\",\n          canonicalReference: \"decentraland-ecs!openExternalURL:function(1)\",\n          docComment: \"\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare function openExternalURL(url: \"\n          }, {\n            kind: \"Content\",\n            text: \"string\"\n          }, {\n            kind: \"Content\",\n            text: \"): \"\n          }, {\n            kind: \"Content\",\n            text: \"void\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          returnTypeTokenRange: {\n            startIndex: 3,\n            endIndex: 4\n          },\n          releaseTag: \"Public\",\n          overloadIndex: 1,\n          parameters: [{\n            parameterName: \"url\",\n            parameterTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          name: \"openExternalURL\"\n        }, {\n          kind: \"Function\",\n          canonicalReference: \"decentraland-ecs!openNFTDialog:function(1)\",\n          docComment: \"/**\\n * Popup NFT info dialog\\n *\\n * @param  - scr 'ethereum://contractAddress/tokenID'\\n *\\n * @param  - comment optional. add a comment.\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare function openNFTDialog(scr: \"\n          }, {\n            kind: \"Content\",\n            text: \"string\"\n          }, {\n            kind: \"Content\",\n            text: \", comment?: \"\n          }, {\n            kind: \"Content\",\n            text: \"string | null\"\n          }, {\n            kind: \"Content\",\n            text: \"): \"\n          }, {\n            kind: \"Content\",\n            text: \"void\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          returnTypeTokenRange: {\n            startIndex: 5,\n            endIndex: 6\n          },\n          releaseTag: \"Public\",\n          overloadIndex: 1,\n          parameters: [{\n            parameterName: \"scr\",\n            parameterTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            parameterName: \"comment\",\n            parameterTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            }\n          }],\n          name: \"openNFTDialog\"\n        }, {\n          kind: \"Enum\",\n          canonicalReference: \"decentraland-ecs!Orientation:enum\",\n          docComment: \"/**\\n * Defines potential orientation for back face culling\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare enum Orientation \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Orientation\",\n          members: [{\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!Orientation.CCW:member\",\n            docComment: \"/**\\n * Counter clockwise\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"CCW = \"\n            }, {\n              kind: \"Content\",\n              text: \"1\"\n            }],\n            releaseTag: \"Public\",\n            name: \"CCW\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!Orientation.CW:member\",\n            docComment: \"/**\\n * Clockwise\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"CW = \"\n            }, {\n              kind: \"Content\",\n              text: \"0\"\n            }],\n            releaseTag: \"Public\",\n            name: \"CW\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }]\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!ParentChanged:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class ParentChanged \"\n          }],\n          releaseTag: \"Public\",\n          name: \"ParentChanged\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!ParentChanged:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `ParentChanged` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(entity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \", parent: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \" | null\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"entity\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"parent\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 5\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ParentChanged#entity:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"entity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"entity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!ParentChanged#parent:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"parent: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \" | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"parent\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Path2:class\",\n          docComment: \"/**\\n * Represents a 2D path made up of multiple 2D points\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Path2 \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Path2\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Path2:constructor(1)\",\n            docComment: \"/**\\n * Creates a Path2 object from the starting 2D coordinates x and y.\\n *\\n * @param x - the starting points x value\\n *\\n * @param y - the starting points y value\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Path2#addArcTo:member(1)\",\n            docComment: \"/**\\n * Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2.\\n *\\n * @param midX - middle point x value\\n *\\n * @param midY - middle point y value\\n *\\n * @param endX - end point x value\\n *\\n * @param endY - end point y value\\n *\\n * @param numberOfSegments - (default: 36)\\n *\\n * @returns the updated Path2.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addArcTo(midX: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", midY: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", endX: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", endY: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", numberOfSegments?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Path2\",\n              canonicalReference: \"decentraland-ecs!Path2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"midX\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"midY\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"endX\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"endY\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"numberOfSegments\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }],\n            name: \"addArcTo\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Path2#addLineTo:member(1)\",\n            docComment: \"/**\\n * Adds a new segment until the given coordinates (x, y) to the current Path2.\\n *\\n * @param x - the added points x value\\n *\\n * @param y - the added points y value\\n *\\n * @returns the updated Path2.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addLineTo(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Path2\",\n              canonicalReference: \"decentraland-ecs!Path2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"addLineTo\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Path2#close:member(1)\",\n            docComment: \"/**\\n * Closes the Path2.\\n *\\n * @returns the Path2.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"close(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Path2\",\n              canonicalReference: \"decentraland-ecs!Path2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"close\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Path2#closed:member\",\n            docComment: \"/**\\n * If the path start and end point are the same\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"closed: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"closed\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Path2#getPointAtLengthPosition:member(1)\",\n            docComment: \"/**\\n * Retreives the point at the distance aways from the starting point\\n *\\n * @param normalizedLengthPosition - the length along the path to retreive the point from\\n *\\n * @returns a new Vector2 located at a percentage of the Path2 total length on this path.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getPointAtLengthPosition(normalizedLengthPosition: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"normalizedLengthPosition\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"getPointAtLengthPosition\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Path2#getPoints:member(1)\",\n            docComment: \"/**\\n * Gets the points which construct the path\\n *\\n * @returns the Path2 internal array of points.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getPoints(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getPoints\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Path2#length:member(1)\",\n            docComment: \"/**\\n * Gets the sum of the distance between each sequential point in the path\\n *\\n * @returns the Path2 total length (float).\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"length(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"length\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Path2.StartingAt:member(1)\",\n            docComment: \"/**\\n * Creates a new path starting from an x and y position\\n *\\n * @param x - starting x value\\n *\\n * @param y - starting y value\\n *\\n * @returns a new Path2 starting at the coordinates (x, y).\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static StartingAt(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Path2\",\n              canonicalReference: \"decentraland-ecs!Path2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"StartingAt\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Path3D:class\",\n          docComment: \"/**\\n * Represents a 3D path made up of multiple 3D points\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Path3D \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Path3D\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Path3D:constructor(1)\",\n            docComment: \"/**\\n * new Path3D(path, normal, raw) Creates a Path3D. A Path3D is a logical math object, so not a mesh. please read the description in the tutorial : http://doc.babylonjs.com/tutorials/How_to_use_Path3D\\n *\\n * @param path - an array of Vector3, the curve axis of the Path3D\\n *\\n * @param normal - (options) Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.\\n *\\n * @param raw - (optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path acceleration or speed.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(\\n    path: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \", firstNormal?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Nullable\",\n              canonicalReference: \"decentraland-ecs!Nullable:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \", raw?: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"path\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"firstNormal\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"raw\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Path3D#getBinormals:member(1)\",\n            docComment: \"/**\\n * Returns an array populated with binormal vectors on each Path3D curve point.\\n *\\n * @returns an array populated with binormal vectors on each Path3D curve point.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getBinormals(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getBinormals\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Path3D#getCurve:member(1)\",\n            docComment: \"/**\\n * Returns the Path3D array of successive Vector3 designing its curve.\\n *\\n * @returns the Path3D array of successive Vector3 designing its curve.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getCurve(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getCurve\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Path3D#getDistances:member(1)\",\n            docComment: \"/**\\n * Returns an array populated with distances (float) of the i-th point from the first curve point.\\n *\\n * @returns an array populated with distances (float) of the i-th point from the first curve point.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getDistances(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getDistances\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Path3D#getNormals:member(1)\",\n            docComment: \"/**\\n * Returns an array populated with normal vectors on each Path3D curve point.\\n *\\n * @returns an array populated with normal vectors on each Path3D curve point.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getNormals(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getNormals\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Path3D#getTangents:member(1)\",\n            docComment: \"/**\\n * Returns an array populated with tangent vectors on each Path3D curve point.\\n *\\n * @returns an array populated with tangent vectors on each Path3D curve point.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getTangents(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getTangents\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Path3D#path:member\",\n            docComment: \"/**\\n * an array of Vector3, the curve axis of the Path3D\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"path: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"path\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Path3D#update:member(1)\",\n            docComment: \"/**\\n * Forces the Path3D tangent, normal, binormal and distance recomputation.\\n *\\n * @param path - path which all values are copied into the curves points\\n *\\n * @param firstNormal - which should be projected onto the curve\\n *\\n * @returns the same object updated.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"update(path: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \", firstNormal?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Nullable\",\n              canonicalReference: \"decentraland-ecs!Nullable:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Path3D\",\n              canonicalReference: \"decentraland-ecs!Path3D:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"path\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"firstNormal\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 8\n              }\n            }],\n            name: \"update\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!PhysicsCast:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class PhysicsCast implements \"\n          }, {\n            kind: \"Reference\",\n            text: \"IPhysicsCast\",\n            canonicalReference: \"decentraland-ecs!IPhysicsCast:interface\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"PhysicsCast\",\n          members: [{\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!PhysicsCast.ensureInstance:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static ensureInstance(): \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"ensureInstance\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!PhysicsCast#getRayFromCamera:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getRayFromCamera(distance: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Ray\",\n              canonicalReference: \"decentraland-ecs!Ray:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"distance\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"getRayFromCamera\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!PhysicsCast#getRayFromPositions:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getRayFromPositions(from: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", to: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Ray\",\n              canonicalReference: \"decentraland-ecs!Ray:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"from\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"to\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"getRayFromPositions\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!PhysicsCast#handleRaycastHitAllResponse:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"handleRaycastHitAllResponse(response: \"\n            }, {\n              kind: \"Reference\",\n              text: \"RaycastResponse\",\n              canonicalReference: \"decentraland-ecs!RaycastResponse:class\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"RaycastHitEntities\",\n              canonicalReference: \"decentraland-ecs!RaycastHitEntities:interface\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"response\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 5\n              }\n            }],\n            name: \"handleRaycastHitAllResponse\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!PhysicsCast#handleRaycastHitFirstResponse:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"handleRaycastHitFirstResponse(response: \"\n            }, {\n              kind: \"Reference\",\n              text: \"RaycastResponse\",\n              canonicalReference: \"decentraland-ecs!RaycastResponse:class\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"RaycastHitEntity\",\n              canonicalReference: \"decentraland-ecs!RaycastHitEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"response\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 5\n              }\n            }],\n            name: \"handleRaycastHitFirstResponse\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!PhysicsCast#hitAll:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hitAll(ray: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Ray\",\n              canonicalReference: \"decentraland-ecs!Ray:interface\"\n            }, {\n              kind: \"Content\",\n              text: \", hitCallback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"RaycastHitEntities\",\n              canonicalReference: \"decentraland-ecs!RaycastHitEntities:interface\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \", id?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"ray\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"hitCallback\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"id\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"hitAll\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!PhysicsCast#hitAllAvatars:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hitAllAvatars(ray: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Ray\",\n              canonicalReference: \"decentraland-ecs!Ray:interface\"\n            }, {\n              kind: \"Content\",\n              text: \", hitCallback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"RaycastHitAvatars\",\n              canonicalReference: \"decentraland-ecs!RaycastHitAvatars:interface\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"ray\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"hitCallback\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 6\n              }\n            }],\n            name: \"hitAllAvatars\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!PhysicsCast#hitFirst:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hitFirst(ray: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Ray\",\n              canonicalReference: \"decentraland-ecs!Ray:interface\"\n            }, {\n              kind: \"Content\",\n              text: \", hitCallback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"RaycastHitEntity\",\n              canonicalReference: \"decentraland-ecs!RaycastHitEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \", id?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"ray\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"hitCallback\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"id\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"hitFirst\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!PhysicsCast#hitFirstAvatar:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hitFirstAvatar(ray: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Ray\",\n              canonicalReference: \"decentraland-ecs!Ray:interface\"\n            }, {\n              kind: \"Content\",\n              text: \", hitCallback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"RaycastHitAvatar\",\n              canonicalReference: \"decentraland-ecs!RaycastHitAvatar:interface\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"ray\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"hitCallback\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 6\n              }\n            }],\n            name: \"hitFirstAvatar\"\n          }],\n          implementsTokenRanges: [{\n            startIndex: 1,\n            endIndex: 3\n          }]\n        }, {\n          kind: \"Enum\",\n          canonicalReference: \"decentraland-ecs!PictureFrameStyle:enum\",\n          docComment: \"\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare enum PictureFrameStyle \"\n          }],\n          releaseTag: \"Public\",\n          name: \"PictureFrameStyle\",\n          members: [{\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Baroque_Ornament:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Baroque_Ornament = \"\n            }, {\n              kind: \"Content\",\n              text: \"1\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Baroque_Ornament\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Blocky:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Blocky = \"\n            }, {\n              kind: \"Content\",\n              text: \"5\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Blocky\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Canvas:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Canvas = \"\n            }, {\n              kind: \"Content\",\n              text: \"21\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Canvas\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Classic:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Classic = \"\n            }, {\n              kind: \"Content\",\n              text: \"0\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Classic\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Diamond_Ornament:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Diamond_Ornament = \"\n            }, {\n              kind: \"Content\",\n              text: \"2\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Diamond_Ornament\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Gold_Carved:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Gold_Carved = \"\n            }, {\n              kind: \"Content\",\n              text: \"7\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Gold_Carved\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Gold_Edges:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Gold_Edges = \"\n            }, {\n              kind: \"Content\",\n              text: \"6\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Gold_Edges\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Gold_Rounded:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Gold_Rounded = \"\n            }, {\n              kind: \"Content\",\n              text: \"9\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Gold_Rounded\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Gold_Wide:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Gold_Wide = \"\n            }, {\n              kind: \"Content\",\n              text: \"8\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Gold_Wide\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Metal_Medium:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Metal_Medium = \"\n            }, {\n              kind: \"Content\",\n              text: \"10\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Metal_Medium\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Metal_Rounded:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Metal_Rounded = \"\n            }, {\n              kind: \"Content\",\n              text: \"13\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Metal_Rounded\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Metal_Slim:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Metal_Slim = \"\n            }, {\n              kind: \"Content\",\n              text: \"12\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Metal_Slim\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Metal_Wide:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Metal_Wide = \"\n            }, {\n              kind: \"Content\",\n              text: \"11\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Metal_Wide\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Minimal_Black:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Minimal_Black = \"\n            }, {\n              kind: \"Content\",\n              text: \"15\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Minimal_Black\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Minimal_Grey:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Minimal_Grey = \"\n            }, {\n              kind: \"Content\",\n              text: \"4\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Minimal_Grey\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Minimal_White:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Minimal_White = \"\n            }, {\n              kind: \"Content\",\n              text: \"16\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Minimal_White\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Minimal_Wide:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Minimal_Wide = \"\n            }, {\n              kind: \"Content\",\n              text: \"3\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Minimal_Wide\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Pins:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Pins = \"\n            }, {\n              kind: \"Content\",\n              text: \"14\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Pins\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Tape:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Tape = \"\n            }, {\n              kind: \"Content\",\n              text: \"17\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Tape\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Wood_Slim:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Wood_Slim = \"\n            }, {\n              kind: \"Content\",\n              text: \"18\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Wood_Slim\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Wood_Twigs:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Wood_Twigs = \"\n            }, {\n              kind: \"Content\",\n              text: \"20\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Wood_Twigs\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!PictureFrameStyle.Wood_Wide:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"Wood_Wide = \"\n            }, {\n              kind: \"Content\",\n              text: \"19\"\n            }],\n            releaseTag: \"Public\",\n            name: \"Wood_Wide\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }]\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Plane:class\",\n          docComment: \"/**\\n * Represens a plane by the equation ax + by + cz + d = 0\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Plane \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Plane\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Plane:constructor(1)\",\n            docComment: \"/**\\n * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0\\n *\\n * @param a - a component of the plane\\n *\\n * @param b - b component of the plane\\n *\\n * @param c - c component of the plane\\n *\\n * @param d - d component of the plane\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(a: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", b: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", c: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", d: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"a\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"b\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"c\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"d\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Plane#asArray:member(1)\",\n            docComment: \"/**\\n * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"asArray(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"asArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Plane#clone:member(1)\",\n            docComment: \"/**\\n * @returns a new plane copied from the current Plane.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"clone(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"clone\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Plane#copyFromPoints:member(1)\",\n            docComment: \"/**\\n * Updates the current Plane from the plane defined by the three given points.\\n *\\n * @param point1 - one of the points used to contruct the plane\\n *\\n * @param point2 - one of the points used to contruct the plane\\n *\\n * @param point3 - one of the points used to contruct the plane\\n *\\n * @returns the updated Plane.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFromPoints(point1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", point2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", point3: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"point1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"point2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"point3\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"copyFromPoints\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Plane#d:member\",\n            docComment: \"/**\\n * d component of the plane\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"d: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"d\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Plane#dotCoordinate:member(1)\",\n            docComment: \"/**\\n * Calcualtte the dot product between the point and the plane normal\\n *\\n * @param point - point to calculate the dot product with\\n *\\n * @returns the dot product (float) of the point coordinates and the plane normal.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"dotCoordinate(point: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"point\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"dotCoordinate\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Plane.FromArray:member(1)\",\n            docComment: \"/**\\n * Creates a plane from an array\\n *\\n * @param array - the array to create a plane from\\n *\\n * @returns a new Plane from the given array.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromArray(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ArrayLike\",\n              canonicalReference: \"!ArrayLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<number>\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 4,\n              endIndex: 5\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }],\n            name: \"FromArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Plane.FromPoints:member(1)\",\n            docComment: \"/**\\n * Creates a plane from three points\\n *\\n * @param point1 - point used to create the plane\\n *\\n * @param point2 - point used to create the plane\\n *\\n * @param point3 - point used to create the plane\\n *\\n * @returns a new Plane defined by the three given points.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromPoints(point1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", point2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", point3: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"point1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"point2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"point3\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"FromPoints\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Plane.FromPositionAndNormal:member(1)\",\n            docComment: '/**\\n * Creates a plane from an origin point and a normal\\n *\\n * @param origin - origin of the plane to be constructed\\n *\\n * @param normal - normal of the plane to be constructed\\n *\\n * @returns a new Plane the normal vector to this plane at the given origin point. Note : the vector \"normal\" is updated because normalized.\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromPositionAndNormal(origin: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", normal: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"origin\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"normal\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"FromPositionAndNormal\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Plane#getClassName:member(1)\",\n            docComment: '/**\\n * @returns the string \"Plane\".\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getClassName(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getClassName\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Plane#getHashCode:member(1)\",\n            docComment: \"/**\\n * @returns the Plane hash code.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getHashCode(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getHashCode\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Plane#isFrontFacingTo:member(1)\",\n            docComment: '/**\\n * Checks if the plane is facing a given direction\\n *\\n * @param direction - the direction to check if the plane is facing\\n *\\n * @param epsilon - value the dot product is compared against (returns true if dot &lt;= epsilon)\\n *\\n * @returns True is the vector \"direction\" is the same side than the plane normal.\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"isFrontFacingTo(direction: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", epsilon: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"direction\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"epsilon\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"isFrontFacingTo\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Plane#normal:member\",\n            docComment: \"/**\\n * Normal of the plane (a,b,c)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"normal: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"normal\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Plane#normalize:member(1)\",\n            docComment: \"/**\\n * Normalize the current Plane in place.\\n *\\n * @returns the updated Plane.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"normalize(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"normalize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Plane#signedDistanceTo:member(1)\",\n            docComment: \"/**\\n * Calculates the distance to a point\\n *\\n * @param point - point to calculate distance to\\n *\\n * @returns the signed distance (float) from the given point to the Plane.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"signedDistanceTo(point: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"point\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"signedDistanceTo\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Plane.SignedDistanceToPlaneFromPositionAndNormal:member(1)\",\n            docComment: '/**\\n * Calculates the distance from a plane and a point\\n *\\n * @param origin - origin of the plane to be constructed\\n *\\n * @param normal - normal of the plane to be constructed\\n *\\n * @param point - point to calculate distance to\\n *\\n * @returns the signed distance between the plane defined by the normal vector at the \"origin\"\" point and the given other point.\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static SignedDistanceToPlaneFromPositionAndNormal(origin: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", normal: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", point: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"origin\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"normal\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"point\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"SignedDistanceToPlaneFromPositionAndNormal\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Plane#transform:member(1)\",\n            docComment: \"/**\\n * Applies a transformation the plane and returns the result\\n *\\n * @param transformation - the transformation matrix to be applied to the plane\\n *\\n * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"transform(transformation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Plane\",\n              canonicalReference: \"decentraland-ecs!Plane:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"transformation\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"transform\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!PlaneShape:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class PlaneShape extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"Shape\",\n            canonicalReference: \"decentraland-ecs!Shape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"PlaneShape\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!PlaneShape#height:member\",\n            docComment: \"/**\\n * Sets the vertical length of the plane. Defaults to 1.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"height: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"height\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!PlaneShape#uvs:member\",\n            docComment: \"/**\\n * Sets the UV coordinates for the plane. Used to map specific pieces of a Material's texture into the plane's geometry.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"uvs?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"uvs\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!PlaneShape#width:member\",\n            docComment: \"/**\\n * Sets the horizontal length of the plane. Defaults to 1.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"width: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"width\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!PointerEvent:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class PointerEvent<GlobalInputEventResult> \"\n          }],\n          releaseTag: \"Public\",\n          typeParameters: [{\n            typeParameterName: \"GlobalInputEventResult\",\n            constraintTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            },\n            defaultTypeTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            }\n          }],\n          name: \"PointerEvent\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!PointerEvent:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `PointerEvent` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(payload: \"\n            }, {\n              kind: \"Content\",\n              text: \"GlobalInputEventResult\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"payload\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!PointerEvent#payload:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly payload: \"\n            }, {\n              kind: \"Content\",\n              text: \"GlobalInputEventResult\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"payload\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!PointerEventComponent:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class PointerEventComponent \"\n          }],\n          releaseTag: \"Public\",\n          name: \"PointerEventComponent\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!PointerEventComponent:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `PointerEventComponent` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"LocalActionButtonEvent\",\n              canonicalReference: \"decentraland-ecs!LocalActionButtonEvent:type\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"callback\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!PointerEventComponent#callback:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly callback: \"\n            }, {\n              kind: \"Content\",\n              text: \"(event: \"\n            }, {\n              kind: \"Reference\",\n              text: \"LocalActionButtonEvent\",\n              canonicalReference: \"decentraland-ecs!LocalActionButtonEvent:type\"\n            }, {\n              kind: \"Content\",\n              text: \") => void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"callback\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 4\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!PointerEventSystem:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class PointerEventSystem implements \"\n          }, {\n            kind: \"Reference\",\n            text: \"ISystem\",\n            canonicalReference: \"decentraland-ecs!ISystem:interface\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"PointerEventSystem\",\n          members: [{\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!PointerEventSystem#activate:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"activate(engine: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Engine\",\n              canonicalReference: \"decentraland-ecs!Engine:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"engine\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"activate\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!PointerEventSystem#deactivate:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"deactivate(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"deactivate\"\n          }],\n          implementsTokenRanges: [{\n            startIndex: 1,\n            endIndex: 3\n          }]\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!ProfileForRenderer:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type ProfileForRenderer = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    userId: string;\\n    name: string;\\n    description: string;\\n    email: string;\\n    avatar: \"\n          }, {\n            kind: \"Reference\",\n            text: \"AvatarForRenderer\",\n            canonicalReference: \"decentraland-ecs!AvatarForRenderer:type\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    inventory: \"\n          }, {\n            kind: \"Reference\",\n            text: \"WearableId\",\n            canonicalReference: \"decentraland-ecs!WearableId:type\"\n          }, {\n            kind: \"Content\",\n            text: \"[];\\n    snapshots: {\\n        face: string;\\n        body: string;\\n    };\\n    version: number;\\n    hasConnectedWeb3: boolean;\\n    updatedAt?: number;\\n    createdAt?: number;\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"ProfileForRenderer\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 6\n          }\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Quaternion:class\",\n          docComment: \"/**\\n * Class used to store quaternion data {@link https://en.wikipedia.org/wiki/Quaternion} {@link http://doc.babylonjs.com/features/position,_rotation,_scaling}\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Quaternion \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Quaternion\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Quaternion:constructor(1)\",\n            docComment: \"/**\\n * Creates a new Quaternion from the given floats\\n *\\n * @param x - defines the first component (0 by default)\\n *\\n * @param y - defines the second component (0 by default)\\n *\\n * @param z - defines the third component (0 by default)\\n *\\n * @param w - defines the fourth component (1.0 by default)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(\\n    x?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    y?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    z?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    w?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"w\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.Angle:member(1)\",\n            docComment: \"/**\\n * Returns the angle in degrees between two rotations a and b.\\n *\\n * @param quat1 - defines the first quaternion\\n *\\n * @param quat2 - defines the second quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Angle(quat1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \", quat2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"quat1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"quat2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Angle\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#angleAxis:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"angleAxis(degress: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", axis: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"degress\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"axis\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"angleAxis\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.AreClose:member(1)\",\n            docComment: \"/**\\n * Checks if the two quaternions are close to each other\\n *\\n * @param quat0 - defines the first quaternion to check\\n *\\n * @param quat1 - defines the second quaternion to check\\n *\\n * @returns true if the two quaternions are close to each other\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static AreClose(quat0: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \", quat1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"quat0\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"quat1\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"AreClose\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#asArray:member(1)\",\n            docComment: \"/**\\n * Copy the quaternion to an array\\n *\\n * @returns a new array populated with 4 elements from the quaternion coordinates\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"asArray(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"asArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#clone:member(1)\",\n            docComment: \"/**\\n * Clone the current quaternion\\n *\\n * @returns a new quaternion copied from the current one\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"clone(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"clone\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#conjugate:member(1)\",\n            docComment: \"/**\\n * Conjugates in place (1-q) the current quaternion\\n *\\n * @returns a new quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"conjugate(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"conjugate\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#conjugateInPlace:member(1)\",\n            docComment: \"/**\\n * Conjugates in place (1-q) the current quaternion\\n *\\n * @returns the current updated quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"conjugateInPlace(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"conjugateInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#conjugateToRef:member(1)\",\n            docComment: \"/**\\n * Conjugates (1-q) the current quaternion and stores the result in the given quaternion\\n *\\n * @param ref - defines the target quaternion\\n *\\n * @returns the current quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"conjugateToRef(ref: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"ref\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"conjugateToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#copyFrom:member(1)\",\n            docComment: \"/**\\n * Copy a quaternion to the current one\\n *\\n * @param other - defines the other quaternion\\n *\\n * @returns the updated current quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFrom(other: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"other\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"copyFrom\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#copyFromFloats:member(1)\",\n            docComment: \"/**\\n * Updates the current quaternion with the given float coordinates\\n *\\n * @param x - defines the x coordinate\\n *\\n * @param y - defines the y coordinate\\n *\\n * @param z - defines the z coordinate\\n *\\n * @param w - defines the w coordinate\\n *\\n * @returns the updated current quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFromFloats(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", w: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"w\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"copyFromFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.Dot:member(1)\",\n            docComment: '/**\\n * Returns the dot product (float) between the quaternions \"left\" and \"right\"\\n *\\n * @param left - defines the left operand\\n *\\n * @param right - defines the right operand\\n *\\n * @returns the dot product\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Dot(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Dot\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#equals:member(1)\",\n            docComment: \"/**\\n * Check if two quaternions are equals\\n *\\n * @param otherQuaternion - defines the second operand\\n *\\n * @returns true if the current quaternion and the given one coordinates are strictly equals\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"equals(otherQuaternion: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherQuaternion\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"equals\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.Euler:member(1)\",\n            docComment: \"/**\\n * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.\\n *\\n * @param x - the rotation on the x axis in euler degrees\\n *\\n * @param y - the rotation on the y axis in euler degrees\\n *\\n * @param z - the rotation on the z axis in euler degrees\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Euler(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Euler\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.FromArray:member(1)\",\n            docComment: \"/**\\n * Creates a new quaternion from data stored into an array\\n *\\n * @param array - defines the data source\\n *\\n * @param offset - defines the offset in the source array where the data starts\\n *\\n * @returns a new quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromArray(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ArrayLike\",\n              canonicalReference: \"!ArrayLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<number>\"\n            }, {\n              kind: \"Content\",\n              text: \", offset?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }],\n            name: \"FromArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.FromEulerAnglesRef:member(1)\",\n            docComment: \"/**\\n * Creates a new quaternion from a set of euler angles and stores it in the target quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromEulerAnglesRef(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"FromEulerAnglesRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#fromRotationMatrix:member(1)\",\n            docComment: \"/**\\n * Updates the current quaternion from the given rotation matrix values\\n *\\n * @param matrix - defines the source matrix\\n *\\n * @returns the current updated quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"fromRotationMatrix(matrix: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"matrix\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"fromRotationMatrix\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.FromRotationMatrix:member(1)\",\n            docComment: \"/**\\n * Creates a new quaternion from a rotation matrix\\n *\\n * @param matrix - defines the source matrix\\n *\\n * @returns a new quaternion created from the given rotation matrix values\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromRotationMatrix(matrix: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"matrix\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"FromRotationMatrix\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.FromRotationMatrixToRef:member(1)\",\n            docComment: \"/**\\n * Updates the given quaternion with the given rotation matrix values\\n *\\n * @param matrix - defines the source matrix\\n *\\n * @param result - defines the target quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromRotationMatrixToRef(matrix: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"matrix\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"FromRotationMatrixToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.FromToRotation:member(1)\",\n            docComment: \"/**\\n * Creates a rotation which rotates from fromDirection to toDirection.\\n *\\n * @param from - defines the first Vector\\n *\\n * @param to - defines the second Vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromToRotation(from: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", to: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"from\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"to\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"FromToRotation\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#getClassName:member(1)\",\n            docComment: '/**\\n * Gets the class name of the quaternion\\n *\\n * @returns the string \"Quaternion\"\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getClassName(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getClassName\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#getHashCode:member(1)\",\n            docComment: \"/**\\n * Gets a hash code for this quaternion\\n *\\n * @returns the quaternion hash code\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getHashCode(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getHashCode\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.Hermite:member(1)\",\n            docComment: \"/**\\n * Interpolate between two quaternions using Hermite interpolation\\n *\\n * @param value1 - defines first quaternion\\n *\\n * @param tangent1 - defines the incoming tangent\\n *\\n * @param value2 - defines second quaternion\\n *\\n * @param tangent2 - defines the outgoing tangent\\n *\\n * @param amount - defines the target quaternion\\n *\\n * @returns the new interpolated quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Hermite(value1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \", tangent1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \", tangent2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"tangent1\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"value2\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"tangent2\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }],\n            name: \"Hermite\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.Inverse:member(1)\",\n            docComment: \"/**\\n * Inverse a given quaternion\\n *\\n * @param q - defines the source quaternion\\n *\\n * @returns a new quaternion as the inverted current quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Inverse(q: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"q\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"Inverse\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.IsIdentity:member(1)\",\n            docComment: \"/**\\n * Gets a boolean indicating if the given quaternion is identity\\n *\\n * @param quaternion - defines the quaternion to check\\n *\\n * @returns true if the quaternion is identity\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static IsIdentity(quaternion: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"quaternion\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"IsIdentity\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.LookRotation:member(1)\",\n            docComment: \"/**\\n * Creates a rotation with the specified forward and upwards directions.\\n *\\n * @param forward - the direction to look in\\n *\\n * @param up - the vector that defines in which direction up is\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static LookRotation(forward: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", up?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"forward\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"up\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"LookRotation\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#multiply:member(1)\",\n            docComment: '/**\\n * Multiplies two quaternions\\n *\\n * @param q1 - defines the second operand\\n *\\n * @returns a new quaternion set as the multiplication result of the current one with the given one \"q1\"\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiply(q1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"q1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"multiply\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#multiplyInPlace:member(1)\",\n            docComment: '/**\\n * Updates the current quaternion with the multiplication of itself with the given one \"q1\"\\n *\\n * @param q1 - defines the second operand\\n *\\n * @returns the currentupdated quaternion\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyInPlace(q1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"q1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"multiplyInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#multiplyToRef:member(1)\",\n            docComment: '/**\\n * Sets the given \"result\" as the the multiplication result of the current one with the given one \"q1\"\\n *\\n * @param q1 - defines the second operand\\n *\\n * @param result - defines the target quaternion\\n *\\n * @returns the current quaternion\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyToRef(q1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"q1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"multiplyToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#normalize:member(1)\",\n            docComment: \"/**\\n * Normalize in place the current quaternion\\n *\\n * @returns the current updated quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"normalize(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"normalize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.RotateTowards:member(1)\",\n            docComment: \"/**\\n * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.\\n *\\n * @param from - defines the first quaternion\\n *\\n * @param to - defines the second quaternion\\n *\\n * @param maxDegreesDelta - the interval step\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotateTowards(from: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \", to: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \", maxDegreesDelta: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"from\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"to\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"maxDegreesDelta\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"RotateTowards\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.RotationAlphaBetaGamma:member(1)\",\n            docComment: \"/**\\n * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation\\n *\\n * @param alpha - defines the rotation around first axis\\n *\\n * @param beta - defines the rotation around second axis\\n *\\n * @param gamma - defines the rotation around third axis\\n *\\n * @returns the new quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationAlphaBetaGamma(alpha: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", beta: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", gamma: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"alpha\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"beta\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"gamma\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"RotationAlphaBetaGamma\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.RotationAlphaBetaGammaToRef:member(1)\",\n            docComment: \"/**\\n * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion\\n *\\n * @param alpha - defines the rotation around first axis\\n *\\n * @param beta - defines the rotation around second axis\\n *\\n * @param gamma - defines the rotation around third axis\\n *\\n * @param result - defines the target quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationAlphaBetaGammaToRef(alpha: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", beta: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", gamma: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"alpha\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"beta\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"gamma\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"RotationAlphaBetaGammaToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.RotationAxis:member(1)\",\n            docComment: \"/**\\n * Creates a quaternion from a rotation around an axis\\n *\\n * @param axis - defines the axis to use\\n *\\n * @param angle - defines the angle to use (in Euler degrees)\\n *\\n * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationAxis(axis: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", angle: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"axis\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"angle\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"RotationAxis\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.RotationAxisToRef:member(1)\",\n            docComment: \"/**\\n * Creates a rotation around an axis and stores it into the given quaternion\\n *\\n * @param axis - defines the axis to use\\n *\\n * @param angle - defines the angle to use (in Euler degrees)\\n *\\n * @param result - defines the target quaternion\\n *\\n * @returns the target quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationAxisToRef(axis: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", angle: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"axis\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"angle\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"RotationAxisToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.RotationQuaternionFromAxis:member(1)\",\n            docComment: \"/**\\n * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\\n *\\n * @param axis1 - defines the first axis\\n *\\n * @param axis2 - defines the second axis\\n *\\n * @param axis3 - defines the third axis\\n *\\n * @returns the new quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationQuaternionFromAxis(axis1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", axis2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", axis3: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"axis1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"axis2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"axis3\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"RotationQuaternionFromAxis\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.RotationQuaternionFromAxisToRef:member(1)\",\n            docComment: \"/**\\n * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\\n *\\n * @param axis1 - defines the first axis\\n *\\n * @param axis2 - defines the second axis\\n *\\n * @param axis3 - defines the third axis\\n *\\n * @param ref - defines the target quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationQuaternionFromAxisToRef(axis1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", axis2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", axis3: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", ref: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"axis1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"axis2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"axis3\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"ref\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"RotationQuaternionFromAxisToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.RotationYawPitchRoll:member(1)\",\n            docComment: \"/**\\n * Creates a new quaternion from the given Euler float angles (y, x, z)\\n *\\n * @param yaw - defines the rotation around Y axis\\n *\\n * @param pitch - defines the rotation around X axis\\n *\\n * @param roll - defines the rotation around Z axis\\n *\\n * @returns the new quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationYawPitchRoll(yaw: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", pitch: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", roll: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"yaw\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"pitch\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"roll\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"RotationYawPitchRoll\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.RotationYawPitchRollToRef:member(1)\",\n            docComment: \"/**\\n * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\\n *\\n * @param yaw - defines the rotation around Y axis\\n *\\n * @param pitch - defines the rotation around X axis\\n *\\n * @param roll - defines the rotation around Z axis\\n *\\n * @param result - defines the target quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationYawPitchRollToRef(yaw: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", pitch: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", roll: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"yaw\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"pitch\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"roll\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"RotationYawPitchRollToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#scale:member(1)\",\n            docComment: '/**\\n * Multiplies the current quaternion by a scale factor\\n *\\n * @param value - defines the scale factor\\n *\\n * @returns a new quaternion set by multiplying the current quaternion coordinates by the float \"scale\"\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scale(value: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"scale\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#scaleAndAddToRef:member(1)\",\n            docComment: \"/**\\n * Scale the current quaternion values by a factor and add the result to a given quaternion\\n *\\n * @param scale - defines the scale factor\\n *\\n * @param result - defines the Quaternion object where to store the result\\n *\\n * @returns the unmodified current quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleAndAddToRef(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"scaleAndAddToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#scaleInPlace:member(1)\",\n            docComment: \"/**\\n * Multiplies in place the current quaternion by a scale factor\\n *\\n * @param value - defines the scale factor\\n *\\n * @returns the current modified quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleInPlace(value: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"scaleInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#scaleToRef:member(1)\",\n            docComment: \"/**\\n * Scale the current quaternion values by a factor and stores the result to a given quaternion\\n *\\n * @param scale - defines the scale factor\\n *\\n * @param result - defines the Quaternion object where to store the result\\n *\\n * @returns the unmodified current quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleToRef(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"scaleToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#set:member(1)\",\n            docComment: \"/**\\n * Updates the current quaternion from the given float coordinates\\n *\\n * @param x - defines the x coordinate\\n *\\n * @param y - defines the y coordinate\\n *\\n * @param z - defines the z coordinate\\n *\\n * @param w - defines the w coordinate\\n *\\n * @returns the updated current quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"set(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", w: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"w\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"set\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#setEuler:member(1)\",\n            docComment: \"/**\\n * Updates the current quaternion from the given euler angles\\n *\\n * @returns the updated current quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"setEuler(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"setEuler\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#setFromToRotation:member(1)\",\n            docComment: \"/**\\n * Creates a rotation which rotates from fromDirection to toDirection.\\n *\\n * @param from - defines the first Vector\\n *\\n * @param to - defines the second Vector\\n *\\n * @param up - defines the direction\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"setFromToRotation(from: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", to: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", up?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"from\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"to\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"up\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"setFromToRotation\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.Slerp:member(1)\",\n            docComment: \"/**\\n * Interpolates between two quaternions\\n *\\n * @param left - defines first quaternion\\n *\\n * @param right - defines second quaternion\\n *\\n * @param amount - defines the gradient to use\\n *\\n * @returns the new interpolated quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Slerp(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Slerp\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.SlerpToRef:member(1)\",\n            docComment: \"/**\\n * Interpolates between two quaternions and stores it into a target quaternion\\n *\\n * @param left - defines first quaternion\\n *\\n * @param right - defines second quaternion\\n *\\n * @param amount - defines the gradient to use\\n *\\n * @param result - defines the target quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static SlerpToRef(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyQuaternion\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"SlerpToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#subtract:member(1)\",\n            docComment: \"/**\\n * Subtract two quaternions\\n *\\n * @param other - defines the second operand\\n *\\n * @returns a new quaternion as the subtraction result of the given one from the current one\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtract(other: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"other\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"subtract\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#toRotationMatrix:member(1)\",\n            docComment: \"/**\\n * Updates the given rotation matrix with the current quaternion values\\n *\\n * @param result - defines the target matrix\\n *\\n * @returns the current unchanged quaternion\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toRotationMatrix(result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"toRotationMatrix\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion#toString:member(1)\",\n            docComment: \"/**\\n * Gets a string representation for the current quaternion\\n *\\n * @returns a string with the Quaternion coordinates\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toString(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toString\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Quaternion#w:member\",\n            docComment: \"/**\\n * defines the fourth component (1.0 by default)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"w: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"w\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Quaternion#x:member\",\n            docComment: \"/**\\n * defines the first component (0 by default)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"x\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Quaternion#y:member\",\n            docComment: \"/**\\n * defines the second component (0 by default)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"y\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Quaternion#z:member\",\n            docComment: \"/**\\n * defines the third component (0 by default)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"z\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Quaternion.Zero:member(1)\",\n            docComment: \"/**\\n * Creates an empty quaternion\\n *\\n * @returns a new quaternion set to (0.0, 0.0, 0.0)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Zero(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Zero\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!QueryType:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type QueryType = \"\n          }, {\n            kind: \"Content\",\n            text: \"'HitFirst' | 'HitAll' | 'HitFirstAvatar' | 'HitAllAvatars'\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"QueryType\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"Variable\",\n          canonicalReference: \"decentraland-ecs!RAD2DEG:var\",\n          docComment: \"/**\\n * Constant used to convert from radians to Euler degrees\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"RAD2DEG: \"\n          }, {\n            kind: \"Content\",\n            text: \"number\"\n          }],\n          releaseTag: \"Public\",\n          name: \"RAD2DEG\",\n          variableTypeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!Ray:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface Ray \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Ray\",\n          members: [{\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!Ray#direction:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"direction: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"direction\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!Ray#distance:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"distance: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"distance\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!Ray#origin:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"origin: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"origin\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          extendsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!RaycastEventSystem:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class RaycastEventSystem implements \"\n          }, {\n            kind: \"Reference\",\n            text: \"ISystem\",\n            canonicalReference: \"decentraland-ecs!ISystem:interface\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"RaycastEventSystem\",\n          members: [{\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!RaycastEventSystem#activate:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"activate(engine: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Engine\",\n              canonicalReference: \"decentraland-ecs!Engine:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"engine\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"activate\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!RaycastEventSystem#deactivate:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"deactivate(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"deactivate\"\n          }],\n          implementsTokenRanges: [{\n            startIndex: 1,\n            endIndex: 3\n          }]\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!RaycastHit:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface RaycastHit \"\n          }],\n          releaseTag: \"Public\",\n          name: \"RaycastHit\",\n          members: [{\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!RaycastHit#didHit:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"didHit: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"didHit\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!RaycastHit#hitNormal:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hitNormal: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"hitNormal\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!RaycastHit#hitPoint:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hitPoint: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"hitPoint\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!RaycastHit#ray:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"ray: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Ray\",\n              canonicalReference: \"decentraland-ecs!Ray:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"ray\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          extendsTokenRanges: []\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!RaycastHitAvatar:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface RaycastHitAvatar extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"RaycastHit\",\n            canonicalReference: \"decentraland-ecs!RaycastHit:interface\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"RaycastHitAvatar\",\n          members: [{\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!RaycastHitAvatar#avatar:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"avatar: \"\n            }, {\n              kind: \"Reference\",\n              text: \"BasicAvatarInfo\",\n              canonicalReference: \"decentraland-ecs!BasicAvatarInfo:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"avatar\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          extendsTokenRanges: [{\n            startIndex: 1,\n            endIndex: 3\n          }]\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!RaycastHitAvatars:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface RaycastHitAvatars extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"RaycastHit\",\n            canonicalReference: \"decentraland-ecs!RaycastHit:interface\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"RaycastHitAvatars\",\n          members: [{\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!RaycastHitAvatars#avatars:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"avatars: \"\n            }, {\n              kind: \"Reference\",\n              text: \"BasicAvatarInfo\",\n              canonicalReference: \"decentraland-ecs!BasicAvatarInfo:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"avatars\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            }\n          }],\n          extendsTokenRanges: [{\n            startIndex: 1,\n            endIndex: 3\n          }]\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!RaycastHitEntities:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface RaycastHitEntities extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"RaycastHit\",\n            canonicalReference: \"decentraland-ecs!RaycastHit:interface\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"RaycastHitEntities\",\n          members: [{\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!RaycastHitEntities#entities:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"entities: \"\n            }, {\n              kind: \"Reference\",\n              text: \"RaycastHitEntity\",\n              canonicalReference: \"decentraland-ecs!RaycastHitEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"entities\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            }\n          }],\n          extendsTokenRanges: [{\n            startIndex: 1,\n            endIndex: 3\n          }]\n        }, {\n          kind: \"Interface\",\n          canonicalReference: \"decentraland-ecs!RaycastHitEntity:interface\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export interface RaycastHitEntity extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"RaycastHit\",\n            canonicalReference: \"decentraland-ecs!RaycastHit:interface\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"RaycastHitEntity\",\n          members: [{\n            kind: \"PropertySignature\",\n            canonicalReference: \"decentraland-ecs!RaycastHitEntity#entity:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"entity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"HitEntityInfo\",\n              canonicalReference: \"decentraland-ecs!HitEntityInfo:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"entity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          extendsTokenRanges: [{\n            startIndex: 1,\n            endIndex: 3\n          }]\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!RaycastResponse:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class RaycastResponse<T> \"\n          }],\n          releaseTag: \"Public\",\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            },\n            defaultTypeTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            }\n          }],\n          name: \"RaycastResponse\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!RaycastResponse:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `RaycastResponse` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(payload: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        queryId: string;\\n        queryType: string;\\n        payload: T;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"payload\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!RaycastResponse#payload:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly payload: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        queryId: string;\\n        queryType: string;\\n        payload: T;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"payload\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!ReadOnlyColor4:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type ReadOnlyColor4 = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    readonly r: number;\\n    readonly g: number;\\n    readonly b: number;\\n    readonly a: number;\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"ReadOnlyColor4\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!ReadOnlyQuaternion:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type ReadOnlyQuaternion = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    readonly x: number;\\n    readonly y: number;\\n    readonly z: number;\\n    readonly w: number;\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"ReadOnlyQuaternion\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type ReadOnlyVector2 = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    readonly x: number;\\n    readonly y: number;\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"ReadOnlyVector2\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type ReadOnlyVector3 = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    readonly y: number;\\n    readonly x: number;\\n    readonly z: number;\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"ReadOnlyVector3\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type ReadOnlyVector4 = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    readonly y: number;\\n    readonly x: number;\\n    readonly z: number;\\n    readonly w: number;\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"ReadOnlyVector4\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Scalar:class\",\n          docComment: \"/**\\n * Scalar computation library\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Scalar \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Scalar\",\n          members: [{\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.Clamp:member(1)\",\n            docComment: \"/**\\n * Returns the value itself if it's between min and max. Returns min if the value is lower than min. Returns max if the value is greater than max.\\n *\\n * @param value - the value to clmap\\n *\\n * @param min - the min value to clamp to (default: 0)\\n *\\n * @param max - the max value to clamp to (default: 1)\\n *\\n * @returns the clamped value\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Clamp(value: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", min?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", max?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"min\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"max\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Clamp\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.DeltaAngle:member(1)\",\n            docComment: \"/**\\n * Calculates the shortest difference between two given angles given in degrees.\\n *\\n * @param current - current angle in degrees\\n *\\n * @param target - target angle in degrees\\n *\\n * @returns the delta\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static DeltaAngle(current: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", target: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"current\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"DeltaAngle\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.Denormalize:member(1)\",\n            docComment: \"/**\\n * Denormalize the value from 0.0 and 1.0 using min and max values\\n *\\n * @param normalized - value to denormalize\\n *\\n * @param min - max to denormalize between\\n *\\n * @param max - min to denormalize between\\n *\\n * @returns the denormalized value\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Denormalize(normalized: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", min: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", max: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"normalized\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"min\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"max\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Denormalize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.Hermite:member(1)\",\n            docComment: '/**\\n * Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\". {@link http://mathworld.wolfram.com/HermitePolynomial.html}\\n *\\n * @param value1 - spline value\\n *\\n * @param tangent1 - spline value\\n *\\n * @param value2 - spline value\\n *\\n * @param tangent2 - spline value\\n *\\n * @param amount - input value\\n *\\n * @returns hermite result\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Hermite(value1: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", tangent1: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", value2: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", tangent2: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"tangent1\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"value2\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"tangent2\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }],\n            name: \"Hermite\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.InverseLerp:member(1)\",\n            docComment: \"/**\\n * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\\n *\\n * @param a - start value\\n *\\n * @param b - target value\\n *\\n * @param value - value between a and b\\n *\\n * @returns the inverseLerp value\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static InverseLerp(a: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", b: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", value: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"a\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"b\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"InverseLerp\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.Lerp:member(1)\",\n            docComment: '/**\\n * Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar.\\n *\\n * @param start - start value\\n *\\n * @param end - target value\\n *\\n * @param amount - amount to lerp between\\n *\\n * @returns the lerped value\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Lerp(start: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", end: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"start\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"end\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Lerp\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.LerpAngle:member(1)\",\n            docComment: \"/**\\n * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees. The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\\n *\\n * @param start - start value\\n *\\n * @param end - target value\\n *\\n * @param amount - amount to lerp between\\n *\\n * @returns the lerped value\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static LerpAngle(start: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", end: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"start\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"end\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"LerpAngle\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.Log2:member(1)\",\n            docComment: \"/**\\n * the log2 of value.\\n *\\n * @param value - the value to compute log2 of\\n *\\n * @returns the log2 of value.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Log2(value: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"Log2\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.MoveTowards:member(1)\",\n            docComment: \"/**\\n * Moves a value current towards target.\\n *\\n * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta. Negative values of maxDelta pushes the value away from target.\\n *\\n * @param current - current value\\n *\\n * @param target - target value\\n *\\n * @param maxDelta - max distance to move\\n *\\n * @returns resulting value\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static MoveTowards(current: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", target: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", maxDelta: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"current\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"maxDelta\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"MoveTowards\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.MoveTowardsAngle:member(1)\",\n            docComment: \"/**\\n * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\\n *\\n * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\\n *\\n * @param current - current value\\n *\\n * @param target - target value\\n *\\n * @param maxDelta - max distance to move\\n *\\n * @returns resulting angle\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static MoveTowardsAngle(current: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", target: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", maxDelta: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"current\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"maxDelta\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"MoveTowardsAngle\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.Normalize:member(1)\",\n            docComment: \"/**\\n * Normalize the value between 0.0 and 1.0 using min and max values\\n *\\n * @param value - value to normalize\\n *\\n * @param min - max to normalize between\\n *\\n * @param max - min to normalize between\\n *\\n * @returns the normalized value\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Normalize(value: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", min: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", max: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"min\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"max\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Normalize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.NormalizeRadians:member(1)\",\n            docComment: \"/**\\n * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\\n *\\n * @param angle - The angle to normalize in radian.\\n *\\n * @returns The converted angle.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static NormalizeRadians(angle: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"angle\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"NormalizeRadians\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.PercentToRange:member(1)\",\n            docComment: \"/**\\n * This function returns number that corresponds to the percentage in a given range.\\n *\\n * PercentToRange(0.34,0,100) will return 34.\\n *\\n * @param percent - to convert to number\\n *\\n * @param min - min range\\n *\\n * @param max - max range\\n *\\n * @returns the number\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static PercentToRange(percent: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", min: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", max: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"percent\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"min\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"max\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"PercentToRange\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.PingPong:member(1)\",\n            docComment: \"/**\\n * PingPongs the value t, so that it is never larger than length and never smaller than 0.\\n *\\n * @param tx - value\\n *\\n * @param length - length\\n *\\n * @returns The returned value will move back and forth between 0 and length\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static PingPong(tx: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", length: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"tx\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"length\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"PingPong\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.RandomRange:member(1)\",\n            docComment: \"/**\\n * Returns a random float number between and min and max values\\n *\\n * @param min - min value of random\\n *\\n * @param max - max value of random\\n *\\n * @returns random value\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RandomRange(min: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", max: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"min\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"max\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"RandomRange\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.RangeToPercent:member(1)\",\n            docComment: \"/**\\n * This function returns percentage of a number in a given range.\\n *\\n * RangeToPercent(40,20,60) will return 0.5 (50%) RangeToPercent(34,0,100) will return 0.34 (34%)\\n *\\n * @param num - to convert to percentage\\n *\\n * @param min - min range\\n *\\n * @param max - max range\\n *\\n * @returns the percentage\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RangeToPercent(num: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", min: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", max: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"num\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"min\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"max\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"RangeToPercent\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.Repeat:member(1)\",\n            docComment: \"/**\\n * Loops the value, so that it is never larger than length and never smaller than 0.\\n *\\n * This is similar to the modulo operator but it works with floating point numbers. For example, using 3.0 for t and 2.5 for length, the result would be 0.5. With t = 5 and length = 2.5, the result would be 0.0. Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\\n *\\n * @param value - the value\\n *\\n * @param length - the length\\n *\\n * @returns the looped value\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Repeat(value: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", length: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"length\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Repeat\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.Sign:member(1)\",\n            docComment: \"/**\\n * Returns -1 if value is negative and +1 is value is positive.\\n *\\n * @param _value - the value\\n *\\n * @returns the value itself if it's equal to zero.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Sign(value: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"Sign\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.SmoothStep:member(1)\",\n            docComment: \"/**\\n * Interpolates between min and max with smoothing at the limits.\\n *\\n * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\\n *\\n * @param from - from\\n *\\n * @param to - to\\n *\\n * @param tx - value\\n *\\n * @returns the smooth stepped value\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static SmoothStep(from: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", to: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", tx: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"from\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"to\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"tx\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"SmoothStep\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.ToHex:member(1)\",\n            docComment: \"/**\\n * Returns a string : the upper case translation of the number i to hexadecimal.\\n *\\n * @param i - number\\n *\\n * @returns the upper case translation of the number i to hexadecimal.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static ToHex(i: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"i\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"ToHex\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Scalar.TwoPi:member\",\n            docComment: \"/**\\n * Two pi constants convenient for computation.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static TwoPi: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"TwoPi\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: true\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Scalar.WithinEpsilon:member(1)\",\n            docComment: \"/**\\n * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\\n *\\n * @param a - number\\n *\\n * @param b - number\\n *\\n * @param epsilon - (default = 1.401298E-45)\\n *\\n * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static WithinEpsilon(a: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", b: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", epsilon?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"a\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"b\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"epsilon\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"WithinEpsilon\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Shape:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Shape extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Shape\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Shape#isPointerBlocker:member\",\n            docComment: \"/**\\n * Set to true to turn on the PointerEvents blocking for the entity.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"isPointerBlocker: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"isPointerBlocker\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Shape#visible:member\",\n            docComment: \"/**\\n * Defines if the entity and its children should be rendered\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"visible: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"visible\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Shape#withCollisions:member\",\n            docComment: \"/**\\n * Set to true to turn on the collider for the entity.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"withCollisions: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"withCollisions\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Size:class\",\n          docComment: \"/**\\n * Size containing widht and height\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Size implements \"\n          }, {\n            kind: \"Reference\",\n            text: \"ISize\",\n            canonicalReference: \"decentraland-ecs!ISize:interface\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Size\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Size:constructor(1)\",\n            docComment: \"/**\\n * Creates a Size object from the given width and height (floats).\\n *\\n * @param width - width of the new size\\n *\\n * @param height - height of the new size\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(width: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", height: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"width\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"height\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Size#add:member(1)\",\n            docComment: \"/**\\n * Sums the width and height of two sizes\\n *\\n * @param otherSize - size to add to this size\\n *\\n * @returns a new Size set as the addition result of the current Size and the given one.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"add(otherSize: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Size\",\n              canonicalReference: \"decentraland-ecs!Size:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Size\",\n              canonicalReference: \"decentraland-ecs!Size:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherSize\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"add\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Size#clone:member(1)\",\n            docComment: \"/**\\n * Clones the size\\n *\\n * @returns a new Size copied from the given one.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"clone(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Size\",\n              canonicalReference: \"decentraland-ecs!Size:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"clone\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Size#copyFrom:member(1)\",\n            docComment: \"/**\\n * Updates the current size from the given one.\\n *\\n * @param src - the given size\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFrom(src: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Size\",\n              canonicalReference: \"decentraland-ecs!Size:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"src\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"copyFrom\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Size#copyFromFloats:member(1)\",\n            docComment: \"/**\\n * Updates in place the current Size from the given floats.\\n *\\n * @param width - width of the new size\\n *\\n * @param height - height of the new size\\n *\\n * @returns the updated Size.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFromFloats(width: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", height: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Size\",\n              canonicalReference: \"decentraland-ecs!Size:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"width\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"height\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"copyFromFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Size#equals:member(1)\",\n            docComment: \"/**\\n * True if the current Size and the given one width and height are strictly equal.\\n *\\n * @param other - the other size to compare against\\n *\\n * @returns True if the current Size and the given one width and height are strictly equal.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"equals(other: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Size\",\n              canonicalReference: \"decentraland-ecs!Size:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"other\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"equals\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Size#getClassName:member(1)\",\n            docComment: '/**\\n * \"Size\"\\n *\\n * @returns the string \"Size\"\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getClassName(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getClassName\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Size#getHashCode:member(1)\",\n            docComment: \"/**\\n * Returns the Size hash code.\\n *\\n * @returns a hash code for a unique width and height\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getHashCode(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getHashCode\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Size#height:member\",\n            docComment: \"/**\\n * Height\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"height: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"height\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Size.Lerp:member(1)\",\n            docComment: '/**\\n * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\\n *\\n * @param start - starting size to lerp between\\n *\\n * @param end - end size to lerp between\\n *\\n * @param amount - amount to lerp between the start and end values\\n *\\n * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Lerp(start: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Size\",\n              canonicalReference: \"decentraland-ecs!Size:class\"\n            }, {\n              kind: \"Content\",\n              text: \", end: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Size\",\n              canonicalReference: \"decentraland-ecs!Size:class\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Size\",\n              canonicalReference: \"decentraland-ecs!Size:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"start\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"end\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Lerp\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Size#multiplyByFloats:member(1)\",\n            docComment: \"/**\\n * Multiplies the width and height by numbers\\n *\\n * @param w - factor to multiple the width by\\n *\\n * @param h - factor to multiple the height by\\n *\\n * @returns a new Size set with the multiplication result of the current Size and the given floats.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyByFloats(w: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", h: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Size\",\n              canonicalReference: \"decentraland-ecs!Size:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"w\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"h\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"multiplyByFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Size#set:member(1)\",\n            docComment: \"/**\\n * Updates in place the current Size from the given floats.\\n *\\n * @param width - width to set\\n *\\n * @param height - height to set\\n *\\n * @returns the updated Size.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"set(width: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", height: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Size\",\n              canonicalReference: \"decentraland-ecs!Size:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"width\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"height\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"set\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Size#subtract:member(1)\",\n            docComment: \"/**\\n * Subtracts the width and height of two\\n *\\n * @param otherSize - size to subtract to this size\\n *\\n * @returns a new Size set as the subtraction result of the given one from the current Size.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtract(otherSize: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Size\",\n              canonicalReference: \"decentraland-ecs!Size:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Size\",\n              canonicalReference: \"decentraland-ecs!Size:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherSize\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"subtract\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Size#toString:member(1)\",\n            docComment: \"/**\\n * Returns a string with the Size width and height\\n *\\n * @returns a string with the Size width and height\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toString(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toString\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Size#width:member\",\n            docComment: \"/**\\n * Width\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"width: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"width\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Size.Zero:member(1)\",\n            docComment: \"/**\\n * Create a new size of zero\\n *\\n * @returns a new Size set to (0.0, 0.0)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Zero(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Size\",\n              canonicalReference: \"decentraland-ecs!Size:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Zero\"\n          }],\n          implementsTokenRanges: [{\n            startIndex: 1,\n            endIndex: 3\n          }]\n        }, {\n          kind: \"Enum\",\n          canonicalReference: \"decentraland-ecs!Space:enum\",\n          docComment: \"/**\\n * Defines supported spaces\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare enum Space \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Space\",\n          members: [{\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!Space.BONE:member\",\n            docComment: \"/**\\n * Bone space\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"BONE = \"\n            }, {\n              kind: \"Content\",\n              text: \"2\"\n            }],\n            releaseTag: \"Public\",\n            name: \"BONE\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!Space.LOCAL:member\",\n            docComment: \"/**\\n * Local (object) space\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"LOCAL = \"\n            }, {\n              kind: \"Content\",\n              text: \"0\"\n            }],\n            releaseTag: \"Public\",\n            name: \"LOCAL\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!Space.WORLD:member\",\n            docComment: \"/**\\n * World space\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"WORLD = \"\n            }, {\n              kind: \"Content\",\n              text: \"1\"\n            }],\n            releaseTag: \"Public\",\n            name: \"WORLD\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }]\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!SphereShape:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class SphereShape extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"Shape\",\n            canonicalReference: \"decentraland-ecs!Shape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"SphereShape\",\n          members: [],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!TaskResult:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type TaskResult<T> = \"\n          }, {\n            kind: \"Reference\",\n            text: \"Promise\",\n            canonicalReference: \"!Promise:interface\"\n          }, {\n            kind: \"Content\",\n            text: \"<T> & {\\n    isComplete: boolean;\\n    didFail?: boolean;\\n    error?: \"\n          }, {\n            kind: \"Reference\",\n            text: \"Error\",\n            canonicalReference: \"!Error:interface\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    result?: T;\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"TaskResult\",\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            },\n            defaultTypeTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            }\n          }],\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 5\n          }\n        }, {\n          kind: \"Function\",\n          canonicalReference: \"decentraland-ecs!teleportTo:function(1)\",\n          docComment: '/**\\n * teleport player to a destination\\n *\\n * @param  - destination \"coordX,coordY\", \"magic\", \"crowd\"\\n */\\n',\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare function teleportTo(destination: \"\n          }, {\n            kind: \"Content\",\n            text: \"string\"\n          }, {\n            kind: \"Content\",\n            text: \"): \"\n          }, {\n            kind: \"Content\",\n            text: \"void\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          returnTypeTokenRange: {\n            startIndex: 3,\n            endIndex: 4\n          },\n          releaseTag: \"Public\",\n          overloadIndex: 1,\n          parameters: [{\n            parameterName: \"destination\",\n            parameterTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          name: \"teleportTo\"\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!TextShape:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class TextShape extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"Shape\",\n            canonicalReference: \"decentraland-ecs!Shape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"TextShape\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!TextShape:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `TextShape` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(value?: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#billboard:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"billboard: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"billboard\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#color:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"color: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"color\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#font:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"font?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Font\",\n              canonicalReference: \"decentraland-ecs!Font:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"font\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#fontSize:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"fontSize: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"fontSize\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#fontWeight:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"fontWeight: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"fontWeight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#height:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"height: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"height\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#hTextAlign:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hTextAlign: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"hTextAlign\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#isPickable:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"isPickable: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"isPickable\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#lineCount:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"lineCount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"lineCount\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#lineSpacing:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"lineSpacing: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"lineSpacing\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#opacity:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"opacity: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"opacity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#outlineColor:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"outlineColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"outlineColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#outlineWidth:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"outlineWidth: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"outlineWidth\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#paddingBottom:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingBottom: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingBottom\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#paddingLeft:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingLeft: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingLeft\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#paddingRight:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingRight: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingRight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#paddingTop:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingTop: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingTop\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#resizeToFit:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"resizeToFit: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"resizeToFit\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#shadowBlur:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowBlur: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowBlur\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#shadowColor:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color3\",\n              canonicalReference: \"decentraland-ecs!Color3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#shadowOffsetX:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowOffsetX: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowOffsetX\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#shadowOffsetY:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowOffsetY: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowOffsetY\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#textWrapping:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"textWrapping: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"textWrapping\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#value:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"value: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"value\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#vTextAlign:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"vTextAlign: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"vTextAlign\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#width:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"width: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"width\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!TextShape#zIndex:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"zIndex: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"zIndex\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Texture:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Texture extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Texture\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Texture:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `Texture` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(src: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \", opts?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Partial\",\n              canonicalReference: \"!Partial:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"Pick\",\n              canonicalReference: \"!Pick:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"Texture\",\n              canonicalReference: \"decentraland-ecs!Texture:class\"\n            }, {\n              kind: \"Content\",\n              text: \", 'samplingMode' | 'wrap' | 'hasAlpha'>>\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"src\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"opts\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 9\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Texture#hasAlpha:member\",\n            docComment: \"/**\\n * Defines if this texture has an alpha channel\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly hasAlpha: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"hasAlpha\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Texture#samplingMode:member\",\n            docComment: \"/**\\n * Enables crisper images based on the provided sampling mode. | Value | Type | |-------|-----------| | 0 | NEAREST | | 1 | BILINEAR | | 2 | TRILINEAR |\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly samplingMode: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"samplingMode\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Texture#src:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly src: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"src\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Texture#wrap:member\",\n            docComment: \"/**\\n * Enables texture wrapping for this material. | Value | Type | |-------|-----------| | 0 | CLAMP | | 1 | WRAP | | 2 | MIRROR |\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly wrap: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"wrap\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Variable\",\n          canonicalReference: \"decentraland-ecs!ToGammaSpace:var\",\n          docComment: \"/**\\n * Constant used to convert a value to gamma space\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"ToGammaSpace: \"\n          }, {\n            kind: \"Content\",\n            text: \"number\"\n          }],\n          releaseTag: \"Public\",\n          name: \"ToGammaSpace\",\n          variableTypeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }, {\n          kind: \"Variable\",\n          canonicalReference: \"decentraland-ecs!ToLinearSpace:var\",\n          docComment: \"/**\\n * Constant used to convert a value to linear space\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"ToLinearSpace = 2.2\"\n          }],\n          releaseTag: \"Public\",\n          name: \"ToLinearSpace\",\n          variableTypeTokenRange: {\n            startIndex: 0,\n            endIndex: 0\n          }\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!TranformConstructorArgs:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type TranformConstructorArgs = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    position?: \"\n          }, {\n            kind: \"Reference\",\n            text: \"Vector3\",\n            canonicalReference: \"decentraland-ecs!Vector3:class\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    rotation?: \"\n          }, {\n            kind: \"Reference\",\n            text: \"Quaternion\",\n            canonicalReference: \"decentraland-ecs!Quaternion:class\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    scale?: \"\n          }, {\n            kind: \"Reference\",\n            text: \"Vector3\",\n            canonicalReference: \"decentraland-ecs!Vector3:class\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"TranformConstructorArgs\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 8\n          }\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Transform:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Transform extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Transform\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Transform:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `Transform` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(args?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"TranformConstructorArgs\",\n              canonicalReference: \"decentraland-ecs!TranformConstructorArgs:type\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"args\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Transform#lookAt:member(1)\",\n            docComment: \"/**\\n * Rotates the transform so the forward vector points at target's current position.\\n *\\n * @public\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"lookAt(target: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", worldUp?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"this\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"target\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"worldUp\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"lookAt\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Transform#position:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"position: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"position\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Transform#rotate:member(1)\",\n            docComment: \"/**\\n * Applies a rotation of euler angles around the x, y and z axis.\\n *\\n * @public\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"rotate(axis: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", angle: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"this\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"axis\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"angle\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"rotate\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Transform#rotation:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"rotation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"rotation\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Transform#scale:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scale: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"scale\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Transform#translate:member(1)\",\n            docComment: \"/**\\n * Moves the transform in the direction and distance of translation.\\n *\\n * @public\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"translate(vec: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"this\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vec\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"translate\"\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Enum\",\n          canonicalReference: \"decentraland-ecs!TransparencyMode:enum\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare enum TransparencyMode \"\n          }],\n          releaseTag: \"Public\",\n          name: \"TransparencyMode\",\n          members: [{\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!TransparencyMode.ALPHA_BLEND:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"ALPHA_BLEND = \"\n            }, {\n              kind: \"Content\",\n              text: \"2\"\n            }],\n            releaseTag: \"Public\",\n            name: \"ALPHA_BLEND\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!TransparencyMode.ALPHA_TEST:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"ALPHA_TEST = \"\n            }, {\n              kind: \"Content\",\n              text: \"1\"\n            }],\n            releaseTag: \"Public\",\n            name: \"ALPHA_TEST\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!TransparencyMode.ALPHA_TEST_AND_BLEND:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"ALPHA_TEST_AND_BLEND = \"\n            }, {\n              kind: \"Content\",\n              text: \"3\"\n            }],\n            releaseTag: \"Public\",\n            name: \"ALPHA_TEST_AND_BLEND\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!TransparencyMode.AUTO:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"AUTO = \"\n            }, {\n              kind: \"Content\",\n              text: \"4\"\n            }],\n            releaseTag: \"Public\",\n            name: \"AUTO\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!TransparencyMode.OPAQUE:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"OPAQUE = \"\n            }, {\n              kind: \"Content\",\n              text: \"0\"\n            }],\n            releaseTag: \"Public\",\n            name: \"OPAQUE\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }]\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!UIButton:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class UIButton extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"UIShape\",\n            canonicalReference: \"decentraland-ecs!UIShape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"UIButton\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIButton#background:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"background: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"background\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIButton#color:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"color: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"color\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIButton#cornerRadius:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"cornerRadius: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"cornerRadius\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIButton#fontSize:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"fontSize: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"fontSize\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIButton#fontWeight:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"fontWeight: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"fontWeight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIButton#paddingBottom:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingBottom: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingBottom\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIButton#paddingLeft:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingLeft: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingLeft\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIButton#paddingRight:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingRight: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingRight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIButton#paddingTop:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingTop: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingTop\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIButton#shadowBlur:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowBlur: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowBlur\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIButton#shadowColor:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIButton#shadowOffsetX:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowOffsetX: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowOffsetX\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIButton#shadowOffsetY:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowOffsetY: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowOffsetY\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIButton#text:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"text: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"text\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIButton#thickness:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"thickness: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"thickness\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!UICanvas:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class UICanvas extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"UIShape\",\n            canonicalReference: \"decentraland-ecs!UIShape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"UICanvas\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!UICanvas:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `UICanvas` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor();\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: []\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!UIContainerRect:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class UIContainerRect extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"UIShape\",\n            canonicalReference: \"decentraland-ecs!UIShape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"UIContainerRect\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIContainerRect#adaptHeight:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"adaptHeight: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"adaptHeight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIContainerRect#adaptWidth:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"adaptWidth: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"adaptWidth\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIContainerRect#alignmentUsesSize:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"alignmentUsesSize: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"alignmentUsesSize\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIContainerRect#color:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"color: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"color\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIContainerRect#thickness:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"thickness: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"thickness\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!UIContainerStack:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class UIContainerStack extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"UIShape\",\n            canonicalReference: \"decentraland-ecs!UIShape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"UIContainerStack\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIContainerStack#adaptHeight:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"adaptHeight: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"adaptHeight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIContainerStack#adaptWidth:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"adaptWidth: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"adaptWidth\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIContainerStack#color:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"color: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"color\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIContainerStack#spacing:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"spacing: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Number\",\n              canonicalReference: \"!Number:interface\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"spacing\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIContainerStack#stackOrientation:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"stackOrientation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"UIStackOrientation\",\n              canonicalReference: \"decentraland-ecs!UIStackOrientation:enum\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"stackOrientation\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!UIImage:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class UIImage extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"UIShape\",\n            canonicalReference: \"decentraland-ecs!UIShape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"UIImage\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!UIImage:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `UIImage` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(parent: \"\n            }, {\n              kind: \"Reference\",\n              text: \"UIShape\",\n              canonicalReference: \"decentraland-ecs!UIShape:class\"\n            }, {\n              kind: \"Content\",\n              text: \", source: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Texture\",\n              canonicalReference: \"decentraland-ecs!Texture:class\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"parent\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"source\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIImage#onClick:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onClick: \"\n            }, {\n              kind: \"Reference\",\n              text: \"OnClick\",\n              canonicalReference: \"decentraland-ecs!OnClick:class\"\n            }, {\n              kind: \"Content\",\n              text: \" | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"onClick\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIImage#paddingBottom:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingBottom: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingBottom\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIImage#paddingLeft:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingLeft: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingLeft\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIImage#paddingRight:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingRight: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingRight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIImage#paddingTop:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingTop: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingTop\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIImage#sizeInPixels:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"sizeInPixels: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"sizeInPixels\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIImage#source:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"source?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Texture\",\n              canonicalReference: \"decentraland-ecs!Texture:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"source\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIImage#sourceHeight:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"sourceHeight: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"sourceHeight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIImage#sourceLeft:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"sourceLeft: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"sourceLeft\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIImage#sourceTop:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"sourceTop: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"sourceTop\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIImage#sourceWidth:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"sourceWidth: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"sourceWidth\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!UIInputText:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class UIInputText extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"UIShape\",\n            canonicalReference: \"decentraland-ecs!UIShape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"UIInputText\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#autoStretchWidth:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"autoStretchWidth: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"autoStretchWidth\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#background:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"background: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"background\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#color:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"color: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"color\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#focusedBackground:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"focusedBackground: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"focusedBackground\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#font:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"font?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Font\",\n              canonicalReference: \"decentraland-ecs!Font:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"font\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#fontSize:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"fontSize: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"fontSize\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#fontWeight:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"fontWeight: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"fontWeight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#hTextAlign:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hTextAlign: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"hTextAlign\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#margin:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"margin: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"margin\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#maxWidth:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"maxWidth: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"maxWidth\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#onBlur:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onBlur: \"\n            }, {\n              kind: \"Reference\",\n              text: \"OnBlur\",\n              canonicalReference: \"decentraland-ecs!OnBlur:class\"\n            }, {\n              kind: \"Content\",\n              text: \" | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"onBlur\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#onChanged:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onChanged: \"\n            }, {\n              kind: \"Reference\",\n              text: \"OnChanged\",\n              canonicalReference: \"decentraland-ecs!OnChanged:class\"\n            }, {\n              kind: \"Content\",\n              text: \" | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"onChanged\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#onFocus:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onFocus: \"\n            }, {\n              kind: \"Reference\",\n              text: \"OnFocus\",\n              canonicalReference: \"decentraland-ecs!OnFocus:class\"\n            }, {\n              kind: \"Content\",\n              text: \" | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"onFocus\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#onTextSubmit:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onTextSubmit: \"\n            }, {\n              kind: \"Reference\",\n              text: \"OnTextSubmit\",\n              canonicalReference: \"decentraland-ecs!OnTextSubmit:class\"\n            }, {\n              kind: \"Content\",\n              text: \" | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"onTextSubmit\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#outlineColor:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"outlineColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"outlineColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#outlineWidth:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"outlineWidth: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"outlineWidth\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#paddingBottom:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingBottom: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingBottom\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#paddingLeft:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingLeft: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingLeft\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#paddingRight:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingRight: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingRight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#paddingTop:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingTop: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingTop\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#placeholder:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"placeholder: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"placeholder\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#placeholderColor:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"placeholderColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"placeholderColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#shadowBlur:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowBlur: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowBlur\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#shadowColor:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#shadowOffsetX:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowOffsetX: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowOffsetX\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#shadowOffsetY:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowOffsetY: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowOffsetY\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#textWrapping:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"textWrapping: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"textWrapping\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#thickness:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"thickness: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"thickness\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#value:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"value: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"value\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIInputText#vTextAlign:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"vTextAlign: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"vTextAlign\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!UIScrollRect:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class UIScrollRect extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"UIShape\",\n            canonicalReference: \"decentraland-ecs!UIShape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"UIScrollRect\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIScrollRect#backgroundColor:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"backgroundColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"backgroundColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIScrollRect#borderColor:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"borderColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"borderColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIScrollRect#isHorizontal:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"isHorizontal: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"isHorizontal\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIScrollRect#isVertical:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"isVertical: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"isVertical\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIScrollRect#onChanged:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onChanged: \"\n            }, {\n              kind: \"Reference\",\n              text: \"OnChanged\",\n              canonicalReference: \"decentraland-ecs!OnChanged:class\"\n            }, {\n              kind: \"Content\",\n              text: \" | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"onChanged\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 3\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIScrollRect#paddingBottom:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingBottom: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingBottom\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIScrollRect#paddingLeft:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingLeft: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingLeft\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIScrollRect#paddingRight:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingRight: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingRight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIScrollRect#paddingTop:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingTop: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingTop\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIScrollRect#valueX:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"valueX: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"valueX\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIScrollRect#valueY:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"valueY: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"valueY\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!UIShape:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare abstract class UIShape extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"UIShape\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!UIShape:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `UIShape` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(parent: \"\n            }, {\n              kind: \"Reference\",\n              text: \"UIShape\",\n              canonicalReference: \"decentraland-ecs!UIShape:class\"\n            }, {\n              kind: \"Content\",\n              text: \" | null\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"parent\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIShape#hAlign:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hAlign: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"hAlign\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIShape#height:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"height: \"\n            }, {\n              kind: \"Content\",\n              text: \"string | number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"height\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIShape#isPointerBlocker:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"isPointerBlocker: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"isPointerBlocker\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIShape#name:member\",\n            docComment: \"/**\\n * Defines if the entity and its children should be rendered\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"name: \"\n            }, {\n              kind: \"Content\",\n              text: \"string | null\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"name\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIShape#opacity:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"opacity: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"opacity\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIShape#positionX:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"positionX: \"\n            }, {\n              kind: \"Content\",\n              text: \"string | number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"positionX\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIShape#positionY:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"positionY: \"\n            }, {\n              kind: \"Content\",\n              text: \"string | number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"positionY\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIShape#vAlign:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"vAlign: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"vAlign\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIShape#visible:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"visible: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"visible\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIShape#width:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"width: \"\n            }, {\n              kind: \"Content\",\n              text: \"string | number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"width\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Enum\",\n          canonicalReference: \"decentraland-ecs!UIStackOrientation:enum\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare enum UIStackOrientation \"\n          }],\n          releaseTag: \"Public\",\n          name: \"UIStackOrientation\",\n          members: [{\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!UIStackOrientation.HORIZONTAL:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"HORIZONTAL = \"\n            }, {\n              kind: \"Content\",\n              text: \"1\"\n            }],\n            releaseTag: \"Public\",\n            name: \"HORIZONTAL\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!UIStackOrientation.VERTICAL:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"VERTICAL = \"\n            }, {\n              kind: \"Content\",\n              text: \"0\"\n            }],\n            releaseTag: \"Public\",\n            name: \"VERTICAL\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }]\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!UIText:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class UIText extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"UIShape\",\n            canonicalReference: \"decentraland-ecs!UIShape:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"UIText\",\n          members: [{\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#adaptHeight:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"adaptHeight: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"adaptHeight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#adaptWidth:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"adaptWidth: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"adaptWidth\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#color:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"color: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"color\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#font:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"font?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Font\",\n              canonicalReference: \"decentraland-ecs!Font:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"font\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#fontAutoSize:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"fontAutoSize: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"fontAutoSize\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#fontSize:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"fontSize: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"fontSize\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#fontWeight:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"fontWeight: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"fontWeight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#hTextAlign:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"hTextAlign: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"hTextAlign\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#lineCount:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"lineCount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"lineCount\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#lineSpacing:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"lineSpacing: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"lineSpacing\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#outlineColor:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"outlineColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"outlineColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#outlineWidth:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"outlineWidth: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"outlineWidth\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#paddingBottom:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingBottom: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingBottom\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#paddingLeft:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingLeft: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingLeft\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#paddingRight:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingRight: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingRight\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#paddingTop:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"paddingTop: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"paddingTop\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#shadowBlur:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowBlur: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowBlur\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#shadowColor:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowColor: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Color4\",\n              canonicalReference: \"decentraland-ecs!Color4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowColor\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#shadowOffsetX:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowOffsetX: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowOffsetX\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#shadowOffsetY:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"shadowOffsetY: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"shadowOffsetY\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#textWrapping:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"textWrapping: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"textWrapping\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#value:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"value: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"value\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIText#vTextAlign:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"vTextAlign: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"vTextAlign\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!UIValue:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class UIValue \"\n          }],\n          releaseTag: \"Public\",\n          name: \"UIValue\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!UIValue:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `UIValue` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(value: \"\n            }, {\n              kind: \"Content\",\n              text: \"string | number\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!UIValue#toString:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toString(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toString\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIValue#type:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"type: \"\n            }, {\n              kind: \"Reference\",\n              text: \"UIValueType\",\n              canonicalReference: \"decentraland-ecs!UIValueType:enum\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"type\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UIValue#value:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"value: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"value\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Enum\",\n          canonicalReference: \"decentraland-ecs!UIValueType:enum\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare enum UIValueType \"\n          }],\n          releaseTag: \"Public\",\n          name: \"UIValueType\",\n          members: [{\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!UIValueType.PERCENT:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"PERCENT = \"\n            }, {\n              kind: \"Content\",\n              text: \"0\"\n            }],\n            releaseTag: \"Public\",\n            name: \"PERCENT\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }, {\n            kind: \"EnumMember\",\n            canonicalReference: \"decentraland-ecs!UIValueType.PIXELS:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"PIXELS = \"\n            }, {\n              kind: \"Content\",\n              text: \"1\"\n            }],\n            releaseTag: \"Public\",\n            name: \"PIXELS\",\n            initializerTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }]\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!UUIDEvent:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class UUIDEvent<T = \"\n          }, {\n            kind: \"Content\",\n            text: \"any\"\n          }, {\n            kind: \"Content\",\n            text: \"> \"\n          }],\n          releaseTag: \"Public\",\n          typeParameters: [{\n            typeParameterName: \"T\",\n            constraintTokenRange: {\n              startIndex: 0,\n              endIndex: 0\n            },\n            defaultTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            }\n          }],\n          name: \"UUIDEvent\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!UUIDEvent:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `UUIDEvent` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(uuid: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \", payload: \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"uuid\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"payload\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UUIDEvent#payload:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly payload: \"\n            }, {\n              kind: \"Content\",\n              text: \"T\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"payload\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UUIDEvent#uuid:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly uuid: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"uuid\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!UUIDEventSystem:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class UUIDEventSystem implements \"\n          }, {\n            kind: \"Reference\",\n            text: \"ISystem\",\n            canonicalReference: \"decentraland-ecs!ISystem:interface\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"UUIDEventSystem\",\n          members: [{\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!UUIDEventSystem#activate:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"activate(engine: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Engine\",\n              canonicalReference: \"decentraland-ecs!Engine:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"engine\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"activate\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!UUIDEventSystem#deactivate:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"deactivate(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"deactivate\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!UUIDEventSystem#handlerMap:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"handlerMap: \"\n            }, {\n              kind: \"Content\",\n              text: \"{\\n        [uuid: string]: \"\n            }, {\n              kind: \"Reference\",\n              text: \"OnUUIDEvent\",\n              canonicalReference: \"decentraland-ecs!OnUUIDEvent:class\"\n            }, {\n              kind: \"Content\",\n              text: \"<any>;\\n    }\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"handlerMap\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 4\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!UUIDEventSystem#onAddEntity:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onAddEntity(entity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"entity\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"onAddEntity\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!UUIDEventSystem#onRemoveEntity:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"onRemoveEntity(entity: \"\n            }, {\n              kind: \"Reference\",\n              text: \"IEntity\",\n              canonicalReference: \"decentraland-ecs!IEntity:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"entity\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"onRemoveEntity\"\n          }],\n          implementsTokenRanges: [{\n            startIndex: 1,\n            endIndex: 3\n          }]\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Vector2:class\",\n          docComment: \"/**\\n * Class representing a vector containing 2 coordinates\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Vector2 \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Vector2\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Vector2:constructor(1)\",\n            docComment: \"/**\\n * Creates a new Vector2 from the given x and y coordinates\\n *\\n * @param x - defines the first coordinate\\n *\\n * @param y - defines the second coordinate\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(\\n    x?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    y?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#add:member(1)\",\n            docComment: \"/**\\n * Add another vector with the current one\\n *\\n * @param otherVector - defines the other vector\\n *\\n * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"add(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"add\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.Add:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector2 as the result of the addition of the two given vectors.\\n *\\n * @param vector1 - the first vector\\n *\\n * @param vector2 - the second vector\\n *\\n * @returns the resulting vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Add(vector1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", vector2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"vector2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Add\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#addInPlace:member(1)\",\n            docComment: \"/**\\n * Set the Vector2 coordinates by adding the given Vector2 coordinates\\n *\\n * @param otherVector - defines the other vector\\n *\\n * @returns the current updated Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addInPlace(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"addInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#addToRef:member(1)\",\n            docComment: '/**\\n * Sets the \"result\" coordinates with the addition of the current Vector2 and the given one coordinates\\n *\\n * @param otherVector - defines the other vector\\n *\\n * @param result - defines the target vector\\n *\\n * @returns the unmodified current Vector2\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addToRef(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"addToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#addVector3:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates\\n *\\n * @param otherVector - defines the other vector\\n *\\n * @returns a new Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addVector3(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"addVector3\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#asArray:member(1)\",\n            docComment: \"/**\\n * Copy the current vector to an array\\n *\\n * @returns a new array with 2 elements: the Vector2 coordinates.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"asArray(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"asArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.CatmullRom:member(1)\",\n            docComment: '/**\\n * Gets a new Vector2 located for \"amount\" (float) on the CatmullRom spline defined by the given four Vector2\\n *\\n * @param value1 - defines 1st point of control\\n *\\n * @param value2 - defines 2nd point of control\\n *\\n * @param value3 - defines 3rd point of control\\n *\\n * @param value4 - defines 4th point of control\\n *\\n * @param amount - defines the interpolation factor\\n *\\n * @returns a new Vector2\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static CatmullRom(value1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value3: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value4: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"value2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"value3\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"value4\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }],\n            name: \"CatmullRom\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.Center:member(1)\",\n            docComment: '/**\\n * Gets a new Vector2 located at the center of the vectors \"value1\" and \"value2\"\\n *\\n * @param value1 - defines first vector\\n *\\n * @param value2 - defines second vector\\n *\\n * @returns a new Vector2\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Center(value1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"value2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Center\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.Clamp:member(1)\",\n            docComment: '/**\\n * Returns a new Vector2 set with same the coordinates than \"value\" ones if the vector \"value\" is in the square defined by \"min\" and \"max\". If a coordinate of \"value\" is lower than \"min\" coordinates, the returned Vector2 is given this \"min\" coordinate. If a coordinate of \"value\" is greater than \"max\" coordinates, the returned Vector2 is given this \"max\" coordinate\\n *\\n * @param value - defines the value to clamp\\n *\\n * @param min - defines the lower limit\\n *\\n * @param max - defines the upper limit\\n *\\n * @returns a new Vector2\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Clamp(value: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", min: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", max: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"min\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"max\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Clamp\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#clone:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector2 copied from the Vector2\\n *\\n * @returns a new Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"clone(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"clone\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#copyFrom:member(1)\",\n            docComment: \"/**\\n * Sets the Vector2 coordinates with the given Vector2 coordinates\\n *\\n * @param source - defines the source Vector2\\n *\\n * @returns the current updated Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFrom(source: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"source\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"copyFrom\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#copyFromFloats:member(1)\",\n            docComment: \"/**\\n * Sets the Vector2 coordinates with the given floats\\n *\\n * @param x - defines the first coordinate\\n *\\n * @param y - defines the second coordinate\\n *\\n * @returns the current updated Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFromFloats(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"copyFromFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.Distance:member(1)\",\n            docComment: '/**\\n * Gets the distance between the vectors \"value1\" and \"value2\"\\n *\\n * @param value1 - defines first vector\\n *\\n * @param value2 - defines second vector\\n *\\n * @returns the distance between vectors\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Distance(value1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \", value2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"value2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Distance\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.DistanceOfPointFromSegment:member(1)\",\n            docComment: '/**\\n * Gets the shortest distance (float) between the point \"p\" and the segment defined by the two points \"segA\" and \"segB\".\\n *\\n * @param p - defines the middle point\\n *\\n * @param segA - defines one point of the segment\\n *\\n * @param segB - defines the other point of the segment\\n *\\n * @returns the shortest distance\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static DistanceOfPointFromSegment(p: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \", segA: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \", segB: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"p\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"segA\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"segB\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"DistanceOfPointFromSegment\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.DistanceSquared:member(1)\",\n            docComment: '/**\\n * Returns the squared distance between the vectors \"value1\" and \"value2\"\\n *\\n * @param value1 - defines first vector\\n *\\n * @param value2 - defines second vector\\n *\\n * @returns the squared distance between vectors\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static DistanceSquared(value1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"value2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"DistanceSquared\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#divide:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates\\n *\\n * @param otherVector - defines the other vector\\n *\\n * @returns a new Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"divide(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"divide\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#divideInPlace:member(1)\",\n            docComment: \"/**\\n * Divides the current Vector2 coordinates by the given ones\\n *\\n * @param otherVector - defines the other vector\\n *\\n * @returns the current updated Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"divideInPlace(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"divideInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#divideToRef:member(1)\",\n            docComment: '/**\\n * Sets the \"result\" coordinates with the Vector2 divided by the given one coordinates\\n *\\n * @param otherVector - defines the other vector\\n *\\n * @param result - defines the target vector\\n *\\n * @returns the unmodified current Vector2\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"divideToRef(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"divideToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.Dot:member(1)\",\n            docComment: '/**\\n * Gets the dot product of the vector \"left\" and the vector \"right\"\\n *\\n * @param left - defines first vector\\n *\\n * @param right - defines second vector\\n *\\n * @returns the dot product (float)\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Dot(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Dot\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#equals:member(1)\",\n            docComment: \"/**\\n * Gets a boolean if two vectors are equals\\n *\\n * @param otherVector - defines the other vector\\n *\\n * @returns true if the given vector coordinates strictly equal the current Vector2 ones\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"equals(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"equals\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#equalsWithEpsilon:member(1)\",\n            docComment: \"/**\\n * Gets a boolean if two vectors are equals (using an epsilon value)\\n *\\n * @param otherVector - defines the other vector\\n *\\n * @param epsilon - defines the minimal distance to consider equality\\n *\\n * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"equalsWithEpsilon(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", epsilon?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"epsilon\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"equalsWithEpsilon\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#floor:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector2 from current Vector2 floored values\\n *\\n * @returns a new Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"floor(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"floor\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#fract:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector2 from current Vector2 floored values\\n *\\n * @returns a new Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"fract(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"fract\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.FromArray:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector2 set from the given index element of the given array\\n *\\n * @param array - defines the data source\\n *\\n * @param offset - defines the offset in the data source\\n *\\n * @returns a new Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromArray(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ArrayLike\",\n              canonicalReference: \"!ArrayLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<number>\"\n            }, {\n              kind: \"Content\",\n              text: \", offset?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }],\n            name: \"FromArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.FromArrayToRef:member(1)\",\n            docComment: '/**\\n * Sets \"result\" from the given index element of the given array\\n *\\n * @param array - defines the data source\\n *\\n * @param offset - defines the offset in the data source\\n *\\n * @param result - defines the target vector\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromArrayToRef(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ArrayLike\",\n              canonicalReference: \"!ArrayLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<number>\"\n            }, {\n              kind: \"Content\",\n              text: \", offset: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 8,\n              endIndex: 9\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 6,\n                endIndex: 7\n              }\n            }],\n            name: \"FromArrayToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#getClassName:member(1)\",\n            docComment: '/**\\n * Gets class name\\n *\\n * @returns the string \"Vector2\"\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getClassName(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getClassName\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#getHashCode:member(1)\",\n            docComment: \"/**\\n * Gets current vector hash code\\n *\\n * @returns the Vector2 hash code as a number\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getHashCode(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getHashCode\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.Hermite:member(1)\",\n            docComment: '/**\\n * Returns a new Vector2 located for \"amount\" (float) on the Hermite spline defined by the vectors \"value1\", \"value3\", \"tangent1\", \"tangent2\"\\n *\\n * @param value1 - defines the 1st control point\\n *\\n * @param tangent1 - defines the outgoing tangent\\n *\\n * @param value2 - defines the 2nd control point\\n *\\n * @param tangent2 - defines the incoming tangent\\n *\\n * @param amount - defines the interpolation factor\\n *\\n * @returns a new Vector2\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Hermite(value1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", tangent1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", tangent2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"tangent1\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"value2\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"tangent2\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }],\n            name: \"Hermite\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#length:member(1)\",\n            docComment: \"/**\\n * Gets the length of the vector\\n *\\n * @returns the vector length (float)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"length(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"length\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#lengthSquared:member(1)\",\n            docComment: \"/**\\n * Gets the vector squared length\\n *\\n * @returns the vector squared length (float)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"lengthSquared(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"lengthSquared\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.Lerp:member(1)\",\n            docComment: '/**\\n * Returns a new Vector2 located for \"amount\" (float) on the linear interpolation between the vector \"start\" adn the vector \"end\".\\n *\\n * @param start - defines the start vector\\n *\\n * @param end - defines the end vector\\n *\\n * @param amount - defines the interpolation factor\\n *\\n * @returns a new Vector2\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Lerp(start: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", end: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"start\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"end\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Lerp\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.Maximize:member(1)\",\n            docComment: '/**\\n * Gets a new Vecto2 set with the maximal coordinate values from the \"left\" and \"right\" vectors\\n *\\n * @param left - defines 1st vector\\n *\\n * @param right - defines 2nd vector\\n *\\n * @returns a new Vector2\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Maximize(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Maximize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.Minimize:member(1)\",\n            docComment: '/**\\n * Gets a new Vector2 set with the minimal coordinate values from the \"left\" and \"right\" vectors\\n *\\n * @param left - defines 1st vector\\n *\\n * @param right - defines 2nd vector\\n *\\n * @returns a new Vector2\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Minimize(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Minimize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#multiply:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates\\n *\\n * @param otherVector - defines the other vector\\n *\\n * @returns a new Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiply(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"multiply\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#multiplyByFloats:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats\\n *\\n * @param x - defines the first coordinate\\n *\\n * @param y - defines the second coordinate\\n *\\n * @returns a new Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyByFloats(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"multiplyByFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#multiplyInPlace:member(1)\",\n            docComment: \"/**\\n * Multiplies in place the current Vector2 coordinates by the given ones\\n *\\n * @param otherVector - defines the other vector\\n *\\n * @returns the current updated Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyInPlace(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"multiplyInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#multiplyToRef:member(1)\",\n            docComment: '/**\\n * Sets \"result\" coordinates with the multiplication of the current Vector2 and the given one coordinates\\n *\\n * @param otherVector - defines the other vector\\n *\\n * @param result - defines the target vector\\n *\\n * @returns the unmodified current Vector2\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyToRef(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"multiplyToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#negate:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector2 with current Vector2 negated coordinates\\n *\\n * @returns a new Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"negate(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"negate\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#normalize:member(1)\",\n            docComment: \"/**\\n * Normalize the vector\\n *\\n * @returns the current updated Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"normalize(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"normalize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.Normalize:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector2 equal to the normalized given vector\\n *\\n * @param vector - defines the vector to normalize\\n *\\n * @returns a new Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Normalize(vector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"Normalize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.One:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector2(1, 1)\\n *\\n * @returns a new Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static One(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"One\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.PointInTriangle:member(1)\",\n            docComment: '/**\\n * Determines if a given vector is included in a triangle\\n *\\n * @param p - defines the vector to test\\n *\\n * @param p0 - defines 1st triangle point\\n *\\n * @param p1 - defines 2nd triangle point\\n *\\n * @param p2 - defines 3rd triangle point\\n *\\n * @returns true if the point \"p\" is in the triangle defined by the vertors \"p0\", \"p1\", \"p2\"\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static PointInTriangle(p: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", p0: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", p1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", p2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"p\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"p0\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"p1\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"p2\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"PointInTriangle\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#scale:member(1)\",\n            docComment: '/**\\n * Returns a new Vector2 scaled by \"scale\" from the current Vector2\\n *\\n * @param scale - defines the scaling factor\\n *\\n * @returns a new Vector2\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scale(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"scale\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#scaleAndAddToRef:member(1)\",\n            docComment: \"/**\\n * Scale the current Vector2 values by a factor and add the result to a given Vector2\\n *\\n * @param scale - defines the scale factor\\n *\\n * @param result - defines the Vector2 object where to store the result\\n *\\n * @returns the unmodified current Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleAndAddToRef(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"scaleAndAddToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#scaleInPlace:member(1)\",\n            docComment: \"/**\\n * Multiply the Vector2 coordinates by scale\\n *\\n * @param scale - defines the scaling factor\\n *\\n * @returns the current updated Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleInPlace(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"scaleInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#scaleToRef:member(1)\",\n            docComment: \"/**\\n * Scale the current Vector2 values by a factor to a given Vector2\\n *\\n * @param scale - defines the scale factor\\n *\\n * @param result - defines the Vector2 object where to store the result\\n *\\n * @returns the unmodified current Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleToRef(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"scaleToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#set:member(1)\",\n            docComment: \"/**\\n * Sets the Vector2 coordinates with the given floats\\n *\\n * @param x - defines the first coordinate\\n *\\n * @param y - defines the second coordinate\\n *\\n * @returns the current updated Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"set(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"set\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#subtract:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2\\n *\\n * @param otherVector - defines the other vector\\n *\\n * @returns a new Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtract(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"subtract\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#subtractInPlace:member(1)\",\n            docComment: \"/**\\n * Sets the current Vector2 coordinates by subtracting from it the given one coordinates\\n *\\n * @param otherVector - defines the other vector\\n *\\n * @returns the current updated Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtractInPlace(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"subtractInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#subtractToRef:member(1)\",\n            docComment: '/**\\n * Sets the \"result\" coordinates with the subtraction of the given one from the current Vector2 coordinates.\\n *\\n * @param otherVector - defines the other vector\\n *\\n * @param result - defines the target vector\\n *\\n * @returns the unmodified current Vector2\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtractToRef(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"subtractToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#toArray:member(1)\",\n            docComment: \"/**\\n * Sets the Vector2 coordinates in the given array or FloatArray from the given index.\\n *\\n * @param array - defines the source array\\n *\\n * @param index - defines the offset in source array\\n *\\n * @returns the current Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toArray(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"FloatArray\",\n              canonicalReference: \"decentraland-ecs!FloatArray:type\"\n            }, {\n              kind: \"Content\",\n              text: \", index?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"index\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"toArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2#toString:member(1)\",\n            docComment: \"/**\\n * Gets a string with the Vector2 coordinates\\n *\\n * @returns a string with the Vector2 coordinates\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toString(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toString\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.Transform:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix\\n *\\n * @param vector - defines the vector to transform\\n *\\n * @param transformation - defines the matrix to apply\\n *\\n * @returns a new Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Transform(vector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \", transformation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"transformation\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Transform\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.TransformToRef:member(1)\",\n            docComment: '/**\\n * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector \"result\" coordinates\\n *\\n * @param vector - defines the vector to transform\\n *\\n * @param transformation - defines the matrix to apply\\n *\\n * @param result - defines the target vector\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static TransformToRef(vector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector2\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector2:type\"\n            }, {\n              kind: \"Content\",\n              text: \", transformation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"transformation\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"TransformToRef\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Vector2#x:member\",\n            docComment: \"/**\\n * defines the first coordinate\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"x\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Vector2#y:member\",\n            docComment: \"/**\\n * defines the second coordinate\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"y\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector2.Zero:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector2(0, 0)\\n *\\n * @returns a new Vector2\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Zero(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector2\",\n              canonicalReference: \"decentraland-ecs!Vector2:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Zero\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Vector3:class\",\n          docComment: \"/**\\n * Classed used to store (x,y,z) vector representation A Vector3 is the main object used in 3D geometry It can represent etiher the coordinates of a point the space, either a direction Reminder: Babylon.js uses a left handed forward facing system\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Vector3 \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Vector3\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Vector3:constructor(1)\",\n            docComment: \"/**\\n * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\\n *\\n * @param x - defines the first coordinates (on X axis)\\n *\\n * @param y - defines the second coordinates (on Y axis)\\n *\\n * @param z - defines the third coordinates (on Z axis)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(\\n    x?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    y?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    z?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#add:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector3, result of the addition the current Vector3 and the given vector\\n *\\n * @param otherVector - defines the second operand\\n *\\n * @returns the resulting Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"add(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"add\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Add:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 as the result of the addition of the two given vectors.\\n *\\n * @param vector1 - the first vector\\n *\\n * @param vector2 - the second vector\\n *\\n * @returns the resulting vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Add(vector1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", vector2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"vector2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Add\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#addInPlace:member(1)\",\n            docComment: \"/**\\n * Adds the given vector to the current Vector3\\n *\\n * @param otherVector - defines the second operand\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addInPlace(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"addInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#addInPlaceFromFloats:member(1)\",\n            docComment: \"/**\\n * Adds the given coordinates to the current Vector3\\n *\\n * @param x - defines the x coordinate of the operand\\n *\\n * @param y - defines the y coordinate of the operand\\n *\\n * @param z - defines the z coordinate of the operand\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addInPlaceFromFloats(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"addInPlaceFromFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#addToRef:member(1)\",\n            docComment: '/**\\n * Adds the current Vector3 to the given one and stores the result in the vector \"result\"\\n *\\n * @param otherVector - defines the second operand\\n *\\n * @param result - defines the Vector3 object where to store the result\\n *\\n * @returns the current Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addToRef(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"addToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#applyMatrix4:member(1)\",\n            docComment: \"/**\\n * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective\\n *\\n * @param matrix - The transformation matrix\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"applyMatrix4(matrix: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"matrix\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"applyMatrix4\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#applyMatrix4ToRef:member(1)\",\n            docComment: '/**\\n * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective and set the given vector \"result\" with this result\\n *\\n * @param matrix - The transformation matrix\\n *\\n * @param result - defines the Vector3 object where to store the result\\n *\\n * @returns the current Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"applyMatrix4ToRef(matrix: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"matrix\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"applyMatrix4ToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#asArray:member(1)\",\n            docComment: \"/**\\n * Creates an array containing three elements : the coordinates of the Vector3\\n *\\n * @returns a new array of numbers\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"asArray(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"asArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Backward:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 set to (0.0, 0.0, -1.0)\\n *\\n * @returns a new forward Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Backward(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Backward\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.CatmullRom:member(1)\",\n            docComment: '/**\\n * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\\n *\\n * @param value1 - defines the first control point\\n *\\n * @param value2 - defines the second control point\\n *\\n * @param value3 - defines the third control point\\n *\\n * @param value4 - defines the fourth control point\\n *\\n * @param amount - defines the amount on the spline to use\\n *\\n * @returns the new Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static CatmullRom(value1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value3: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value4: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"value2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"value3\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"value4\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }],\n            name: \"CatmullRom\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Center:member(1)\",\n            docComment: '/**\\n * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\\n *\\n * @param value1 - defines the first operand\\n *\\n * @param value2 - defines the second operand\\n *\\n * @returns the new Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Center(value1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"value2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Center\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Clamp:member(1)\",\n            docComment: '/**\\n * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\" If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\\n *\\n * @param value - defines the current value\\n *\\n * @param min - defines the lower range value\\n *\\n * @param max - defines the upper range value\\n *\\n * @returns the new Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Clamp(value: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", min: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", max: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"min\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"max\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Clamp\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.ClampToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\" If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\\n *\\n * @param value - defines the current value\\n *\\n * @param min - defines the lower range value\\n *\\n * @param max - defines the upper range value\\n *\\n * @param result - defines the Vector3 where to store the result\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static ClampToRef(value: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", min: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", max: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"min\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"max\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"ClampToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#clone:member(1)\",\n            docComment: \"/**\\n * Creates a new Vector3 copied from the current Vector3\\n *\\n * @returns the new Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"clone(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"clone\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#copyFrom:member(1)\",\n            docComment: \"/**\\n * Copies the given vector coordinates to the current Vector3 ones\\n *\\n * @param source - defines the source Vector3\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFrom(source: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"source\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"copyFrom\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#copyFromFloats:member(1)\",\n            docComment: \"/**\\n * Copies the given floats to the current Vector3 coordinates\\n *\\n * @param x - defines the x coordinate of the operand\\n *\\n * @param y - defines the y coordinate of the operand\\n *\\n * @param z - defines the z coordinate of the operand\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFromFloats(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"copyFromFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Cross:member(1)\",\n            docComment: '/**\\n * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\" The cross product is then orthogonal to both \"left\" and \"right\"\\n *\\n * @param left - defines the left operand\\n *\\n * @param right - defines the right operand\\n *\\n * @returns the cross product\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Cross(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Cross\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.CrossToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" with the cross product of \"left\" and \"right\" The cross product is then orthogonal to both \"left\" and \"right\"\\n *\\n * @param left - defines the left operand\\n *\\n * @param right - defines the right operand\\n *\\n * @param result - defines the Vector3 where to store the result\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static CrossToRef(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"CrossToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Distance:member(1)\",\n            docComment: '/**\\n * Returns the distance between the vectors \"value1\" and \"value2\"\\n *\\n * @param value1 - defines the first operand\\n *\\n * @param value2 - defines the second operand\\n *\\n * @returns the distance\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Distance(value1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"value2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Distance\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.DistanceSquared:member(1)\",\n            docComment: '/**\\n * Returns the squared distance between the vectors \"value1\" and \"value2\"\\n *\\n * @param value1 - defines the first operand\\n *\\n * @param value2 - defines the second operand\\n *\\n * @returns the squared distance\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static DistanceSquared(value1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"value2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"DistanceSquared\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#divide:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\\n *\\n * @param otherVector - defines the second operand\\n *\\n * @returns the new Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"divide(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"divide\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#divideInPlace:member(1)\",\n            docComment: \"/**\\n * Divides the current Vector3 coordinates by the given ones.\\n *\\n * @param otherVector - defines the second operand\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"divideInPlace(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"divideInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#divideToRef:member(1)\",\n            docComment: '/**\\n * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\\n *\\n * @param otherVector - defines the second operand\\n *\\n * @param result - defines the Vector3 object where to store the result\\n *\\n * @returns the current Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"divideToRef(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"divideToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Dot:member(1)\",\n            docComment: '/**\\n * Returns the dot product (float) between the vectors \"left\" and \"right\"\\n *\\n * @param left - defines the left operand\\n *\\n * @param right - defines the right operand\\n *\\n * @returns the dot product\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Dot(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Dot\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Down:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 set to (0.0, -1.0, 0.0)\\n *\\n * @returns a new down Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Down(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Down\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#equals:member(1)\",\n            docComment: \"/**\\n * Returns true if the current Vector3 and the given vector coordinates are strictly equal\\n *\\n * @param otherVector - defines the second operand\\n *\\n * @returns true if both vectors are equals\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"equals(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"equals\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#equalsToFloats:member(1)\",\n            docComment: \"/**\\n * Returns true if the current Vector3 coordinates equals the given floats\\n *\\n * @param x - defines the x coordinate of the operand\\n *\\n * @param y - defines the y coordinate of the operand\\n *\\n * @param z - defines the z coordinate of the operand\\n *\\n * @returns true if both vectors are equals\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"equalsToFloats(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"equalsToFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#equalsWithEpsilon:member(1)\",\n            docComment: \"/**\\n * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\\n *\\n * @param otherVector - defines the second operand\\n *\\n * @param epsilon - defines the minimal distance to define values as equals\\n *\\n * @returns true if both vectors are distant less than epsilon\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"equalsWithEpsilon(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", epsilon?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"epsilon\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"equalsWithEpsilon\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#floor:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector3 from current Vector3 floored values\\n *\\n * @returns a new Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"floor(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"floor\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Forward:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 set to (0.0, 0.0, 1.0)\\n *\\n * @returns a new forward Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Forward(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Forward\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#fract:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector3 from current Vector3 floored values\\n *\\n * @returns a new Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"fract(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"fract\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.FromArray:member(1)\",\n            docComment: '/**\\n * Returns a new Vector3 set from the index \"offset\" of the given array\\n *\\n * @param array - defines the source array\\n *\\n * @param offset - defines the offset in the source array\\n *\\n * @returns the new Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromArray(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ArrayLike\",\n              canonicalReference: \"!ArrayLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<number>\"\n            }, {\n              kind: \"Content\",\n              text: \", offset?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }],\n            name: \"FromArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.FromArrayToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\\n *\\n * @param array - defines the source array\\n *\\n * @param offset - defines the offset in the source array\\n *\\n * @param result - defines the Vector3 where to store the result\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromArrayToRef(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ArrayLike\",\n              canonicalReference: \"!ArrayLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<number>\"\n            }, {\n              kind: \"Content\",\n              text: \", offset: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 8,\n              endIndex: 9\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 6,\n                endIndex: 7\n              }\n            }],\n            name: \"FromArrayToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.FromFloatArray:member(1)\",\n            docComment: '/**\\n * Returns a new Vector3 set from the index \"offset\" of the given FloatArray This function is deprecated. Use FromArray instead\\n *\\n * @param array - defines the source array\\n *\\n * @param offset - defines the offset in the source array\\n *\\n * @returns the new Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromFloatArray(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"FloatArray\",\n              canonicalReference: \"decentraland-ecs!FloatArray:type\"\n            }, {\n              kind: \"Content\",\n              text: \", offset?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"FromFloatArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.FromFloatArrayToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" with the element values from the index \"offset\" of the given FloatArray This function is deprecated. Use FromArrayToRef instead.\\n *\\n * @param array - defines the source array\\n *\\n * @param offset - defines the offset in the source array\\n *\\n * @param result - defines the Vector3 where to store the result\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromFloatArrayToRef(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"FloatArray\",\n              canonicalReference: \"decentraland-ecs!FloatArray:type\"\n            }, {\n              kind: \"Content\",\n              text: \", offset: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"FromFloatArrayToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.FromFloatsToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" with the given floats.\\n *\\n * @param x - defines the x coordinate of the source\\n *\\n * @param y - defines the y coordinate of the source\\n *\\n * @param z - defines the z coordinate of the source\\n *\\n * @param result - defines the Vector3 where to store the result\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromFloatsToRef(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"FromFloatsToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.GetAngleBetweenVectors:member(1)\",\n            docComment: \"/**\\n * Get angle between two vectors\\n *\\n * @param vector0 - angle between vector0 and vector1\\n *\\n * @param vector1 - angle between vector0 and vector1\\n *\\n * @param normal - direction of the normal\\n *\\n * @returns the angle between vector0 and vector1\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static GetAngleBetweenVectors(vector0: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", vector1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", normal: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector0\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"vector1\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"normal\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"GetAngleBetweenVectors\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#getClassName:member(1)\",\n            docComment: '/**\\n * Gets the class name\\n *\\n * @returns the string \"Vector3\"\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getClassName(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getClassName\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.GetClipFactor:member(1)\",\n            docComment: \"/**\\n * Get the clip factor between two vectors\\n *\\n * @param vector0 - defines the first operand\\n *\\n * @param vector1 - defines the second operand\\n *\\n * @param axis - defines the axis to use\\n *\\n * @param size - defines the size along the axis\\n *\\n * @returns the clip factor\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static GetClipFactor(vector0: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", vector1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", axis: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", size: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector0\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"vector1\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"axis\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"size\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"GetClipFactor\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#getHashCode:member(1)\",\n            docComment: \"/**\\n * Creates the Vector3 hash code\\n *\\n * @returns a number which tends to be unique between Vector3 instances\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getHashCode(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getHashCode\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Hermite:member(1)\",\n            docComment: '/**\\n * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\\n *\\n * @param value1 - defines the first control point\\n *\\n * @param tangent1 - defines the first tangent vector\\n *\\n * @param value2 - defines the second control point\\n *\\n * @param tangent2 - defines the second tangent vector\\n *\\n * @param amount - defines the amount on the interpolation spline (between 0 and 1)\\n *\\n * @returns the new Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Hermite(value1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", tangent1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", tangent2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"tangent1\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"value2\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"tangent2\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }],\n            name: \"Hermite\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Left:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\\n *\\n * @returns a new left Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Left(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Left\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#length:member(1)\",\n            docComment: \"/**\\n * Gets the length of the Vector3\\n *\\n * @returns the length of the Vecto3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"length(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"length\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#lengthSquared:member(1)\",\n            docComment: \"/**\\n * Gets the squared length of the Vector3\\n *\\n * @returns squared length of the Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"lengthSquared(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"lengthSquared\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Lerp:member(1)\",\n            docComment: '/**\\n * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\\n *\\n * @param start - defines the start value\\n *\\n * @param end - defines the end value\\n *\\n * @param amount - max defines amount between both (between 0 and 1)\\n *\\n * @returns the new Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Lerp(start: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", end: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"start\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"end\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"Lerp\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.LerpToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\\n *\\n * @param start - defines the start value\\n *\\n * @param end - defines the end value\\n *\\n * @param amount - max defines amount between both (between 0 and 1)\\n *\\n * @param result - defines the Vector3 where to store the result\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static LerpToRef(start: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", end: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", amount: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"start\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"end\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"amount\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"LerpToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Maximize:member(1)\",\n            docComment: \"/**\\n * Gets the maximal coordinate values between two Vector3\\n *\\n * @param left - defines the first operand\\n *\\n * @param right - defines the second operand\\n *\\n * @returns the new Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Maximize(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Maximize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#maximizeInPlace:member(1)\",\n            docComment: \"/**\\n * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.\\n *\\n * @param other - defines the second operand\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"maximizeInPlace(other: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"other\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"maximizeInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#maximizeInPlaceFromFloats:member(1)\",\n            docComment: \"/**\\n * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.\\n *\\n * @param x - defines the x coordinate of the operand\\n *\\n * @param y - defines the y coordinate of the operand\\n *\\n * @param z - defines the z coordinate of the operand\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"maximizeInPlaceFromFloats(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"maximizeInPlaceFromFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Minimize:member(1)\",\n            docComment: \"/**\\n * Gets the minimal coordinate values between two Vector3\\n *\\n * @param left - defines the first operand\\n *\\n * @param right - defines the second operand\\n *\\n * @returns the new Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Minimize(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Minimize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#minimizeInPlace:member(1)\",\n            docComment: \"/**\\n * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones\\n *\\n * @param other - defines the second operand\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"minimizeInPlace(other: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"other\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"minimizeInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#minimizeInPlaceFromFloats:member(1)\",\n            docComment: \"/**\\n * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates\\n *\\n * @param x - defines the x coordinate of the operand\\n *\\n * @param y - defines the y coordinate of the operand\\n *\\n * @param z - defines the z coordinate of the operand\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"minimizeInPlaceFromFloats(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"minimizeInPlaceFromFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#multiply:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector\\n *\\n * @param otherVector - defines the second operand\\n *\\n * @returns the new Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiply(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"multiply\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#multiplyByFloats:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\\n *\\n * @param x - defines the x coordinate of the operand\\n *\\n * @param y - defines the y coordinate of the operand\\n *\\n * @param z - defines the z coordinate of the operand\\n *\\n * @returns the new Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyByFloats(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"multiplyByFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#multiplyInPlace:member(1)\",\n            docComment: \"/**\\n * Multiplies the current Vector3 coordinates by the given ones\\n *\\n * @param otherVector - defines the second operand\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyInPlace(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"multiplyInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#multiplyToRef:member(1)\",\n            docComment: '/**\\n * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\\n *\\n * @param otherVector - defines the second operand\\n *\\n * @param result - defines the Vector3 object where to store the result\\n *\\n * @returns the current Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyToRef(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"multiplyToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#negate:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector3 set with the current Vector3 negated coordinates\\n *\\n * @returns a new Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"negate(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"negate\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#normalize:member(1)\",\n            docComment: \"/**\\n * Normalize the current Vector3. Please note that this is an in place operation.\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"normalize(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"normalize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Normalize:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 as the normalization of the given vector\\n *\\n * @param vector - defines the Vector3 to normalize\\n *\\n * @returns the new Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Normalize(vector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"Normalize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#normalizeFromLength:member(1)\",\n            docComment: \"/**\\n * Normalize the current Vector3 with the given input length. Please note that this is an in place operation.\\n *\\n * @param len - the length of the vector\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"normalizeFromLength(len: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"len\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"normalizeFromLength\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#normalizeToNew:member(1)\",\n            docComment: \"/**\\n * Normalize the current Vector3 to a new vector\\n *\\n * @returns the new Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"normalizeToNew(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"normalizeToNew\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#normalizeToRef:member(1)\",\n            docComment: \"/**\\n * Normalize the current Vector3 to the reference\\n *\\n * @param reference - define the Vector3 to update\\n *\\n * @returns the updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"normalizeToRef(reference: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"reference\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"normalizeToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.NormalizeToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" with the normalization of the given first vector\\n *\\n * @param vector - defines the Vector3 to normalize\\n *\\n * @param result - defines the Vector3 where to store the result\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static NormalizeToRef(vector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"NormalizeToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.One:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 set to (1.0, 1.0, 1.0)\\n *\\n * @returns a new unit Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static One(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"One\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Right:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 set to (1.0, 0.0, 0.0)\\n *\\n * @returns a new right Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Right(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Right\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#rotate:member(1)\",\n            docComment: \"/**\\n * Rotates the current Vector3 based on the given quaternion\\n *\\n * @param q - defines the Quaternion\\n *\\n * @returns the current Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"rotate(q: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"q\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"rotate\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#rotateToRef:member(1)\",\n            docComment: \"/**\\n * Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.\\n *\\n * @param q - defines the Quaternion\\n *\\n * @param result - defines the target Vector3\\n *\\n * @returns the current Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"rotateToRef(q: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"q\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"rotateToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.RotationFromAxis:member(1)\",\n            docComment: \"/**\\n * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system), RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply to something in order to rotate it from its local system to the given target system Note: axis1, axis2 and axis3 are normalized during this operation\\n *\\n * @param axis1 - defines the first axis\\n *\\n * @param axis2 - defines the second axis\\n *\\n * @param axis3 - defines the third axis\\n *\\n * @returns a new Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationFromAxis(axis1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", axis2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", axis3: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"axis1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"axis2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"axis3\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"RotationFromAxis\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.RotationFromAxisToRef:member(1)\",\n            docComment: \"/**\\n * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\\n *\\n * @param axis1 - defines the first axis\\n *\\n * @param axis2 - defines the second axis\\n *\\n * @param axis3 - defines the third axis\\n *\\n * @param ref - defines the Vector3 where to store the result\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static RotationFromAxisToRef(axis1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", axis2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", axis3: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \", ref: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"axis1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"axis2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"axis3\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"ref\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"RotationFromAxisToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#scale:member(1)\",\n            docComment: '/**\\n * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\\n *\\n * @param scale - defines the multiplier factor\\n *\\n * @returns a new Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scale(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"scale\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#scaleAndAddToRef:member(1)\",\n            docComment: \"/**\\n * Scale the current Vector3 values by a factor and add the result to a given Vector3\\n *\\n * @param scale - defines the scale factor\\n *\\n * @param result - defines the Vector3 object where to store the result\\n *\\n * @returns the unmodified current Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleAndAddToRef(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"scaleAndAddToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#scaleInPlace:member(1)\",\n            docComment: '/**\\n * Multiplies the Vector3 coordinates by the float \"scale\"\\n *\\n * @param scale - defines the multiplier factor\\n *\\n * @returns the current updated Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleInPlace(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"scaleInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#scaleToRef:member(1)\",\n            docComment: '/**\\n * Multiplies the current Vector3 coordinates by the float \"scale\" and stores the result in the given vector \"result\" coordinates\\n *\\n * @param scale - defines the multiplier factor\\n *\\n * @param result - defines the Vector3 object where to store the result\\n *\\n * @returns the current Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleToRef(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"scaleToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#set:member(1)\",\n            docComment: \"/**\\n * Copies the given floats to the current Vector3 coordinates\\n *\\n * @param x - defines the x coordinate of the operand\\n *\\n * @param y - defines the y coordinate of the operand\\n *\\n * @param z - defines the z coordinate of the operand\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"set(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"set\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#setAll:member(1)\",\n            docComment: \"/**\\n * Copies the given float to the current Vector3 coordinates\\n *\\n * @param v - defines the x, y and z coordinates of the operand\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"setAll(v: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"v\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"setAll\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#subtract:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3\\n *\\n * @param otherVector - defines the second operand\\n *\\n * @returns the resulting Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtract(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"subtract\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#subtractFromFloats:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates\\n *\\n * @param x - defines the x coordinate of the operand\\n *\\n * @param y - defines the y coordinate of the operand\\n *\\n * @param z - defines the z coordinate of the operand\\n *\\n * @returns the resulting Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtractFromFloats(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"subtractFromFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#subtractFromFloatsToRef:member(1)\",\n            docComment: '/**\\n * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\\n *\\n * @param x - defines the x coordinate of the operand\\n *\\n * @param y - defines the y coordinate of the operand\\n *\\n * @param z - defines the z coordinate of the operand\\n *\\n * @param result - defines the Vector3 object where to store the result\\n *\\n * @returns the current Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtractFromFloatsToRef(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"subtractFromFloatsToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#subtractInPlace:member(1)\",\n            docComment: \"/**\\n * Subtract the given vector from the current Vector3\\n *\\n * @param otherVector - defines the second operand\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtractInPlace(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"subtractInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#subtractToRef:member(1)\",\n            docComment: '/**\\n * Subtracts the given vector from the current Vector3 and stores the result in the vector \"result\".\\n *\\n * @param otherVector - defines the second operand\\n *\\n * @param result - defines the Vector3 object where to store the result\\n *\\n * @returns the current Vector3\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtractToRef(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"subtractToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#toArray:member(1)\",\n            docComment: \"/**\\n * Populates the given array or FloatArray from the given index with the successive coordinates of the Vector3\\n *\\n * @param array - defines the destination array\\n *\\n * @param index - defines the offset in the destination array\\n *\\n * @returns the current Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toArray(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"FloatArray\",\n              canonicalReference: \"decentraland-ecs!FloatArray:type\"\n            }, {\n              kind: \"Content\",\n              text: \", index?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"index\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"toArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#toQuaternion:member(1)\",\n            docComment: \"/**\\n * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)\\n *\\n * @returns a new Quaternion object, computed from the Vector3 coordinates\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toQuaternion(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Quaternion\",\n              canonicalReference: \"decentraland-ecs!Quaternion:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toQuaternion\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3#toString:member(1)\",\n            docComment: \"/**\\n * Creates a string representation of the Vector3\\n *\\n * @returns a string with the Vector3 coordinates.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toString(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toString\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.TransformCoordinates:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector. This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\\n *\\n * @param vector - defines the Vector3 to transform\\n *\\n * @param transformation - defines the transformation matrix\\n *\\n * @returns the transformed Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static TransformCoordinates(vector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", transformation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"transformation\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"TransformCoordinates\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.TransformCoordinatesFromFloatsToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z) This method computes tranformed coordinates only, not transformed direction vectors\\n *\\n * @param x - define the x coordinate of the source vector\\n *\\n * @param y - define the y coordinate of the source vector\\n *\\n * @param z - define the z coordinate of the source vector\\n *\\n * @param transformation - defines the transformation matrix\\n *\\n * @param result - defines the Vector3 where to store the result\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static TransformCoordinatesFromFloatsToRef(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", transformation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Readonly\",\n              canonicalReference: \"!Readonly:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 14,\n              endIndex: 15\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"transformation\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 11\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 12,\n                endIndex: 13\n              }\n            }],\n            name: \"TransformCoordinatesFromFloatsToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.TransformCoordinatesToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\\n *\\n * @param vector - defines the Vector3 to transform\\n *\\n * @param transformation - defines the transformation matrix\\n *\\n * @param result - defines the Vector3 where to store the result\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static TransformCoordinatesToRef(vector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", transformation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Readonly\",\n              canonicalReference: \"!Readonly:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 10,\n              endIndex: 11\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"transformation\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 7\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 8,\n                endIndex: 9\n              }\n            }],\n            name: \"TransformCoordinatesToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.TransformNormal:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\\n *\\n * @param vector - defines the Vector3 to transform\\n *\\n * @param transformation - defines the transformation matrix\\n *\\n * @returns the new Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static TransformNormal(vector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", transformation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"transformation\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"TransformNormal\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.TransformNormalFromFloatsToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z) This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\\n *\\n * @param x - define the x coordinate of the source vector\\n *\\n * @param y - define the y coordinate of the source vector\\n *\\n * @param z - define the z coordinate of the source vector\\n *\\n * @param transformation - defines the transformation matrix\\n *\\n * @param result - defines the Vector3 where to store the result\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static TransformNormalFromFloatsToRef(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", transformation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Readonly\",\n              canonicalReference: \"!Readonly:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 14,\n              endIndex: 15\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"transformation\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 11\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 12,\n                endIndex: 13\n              }\n            }],\n            name: \"TransformNormalFromFloatsToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.TransformNormalToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\\n *\\n * @param vector - defines the Vector3 to transform\\n *\\n * @param transformation - defines the transformation matrix\\n *\\n * @param result - defines the Vector3 where to store the result\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static TransformNormalToRef(vector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector3\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector3:type\"\n            }, {\n              kind: \"Content\",\n              text: \", transformation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Readonly\",\n              canonicalReference: \"!Readonly:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \">\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 10,\n              endIndex: 11\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"transformation\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 7\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 8,\n                endIndex: 9\n              }\n            }],\n            name: \"TransformNormalToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Up:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 set to (0.0, 1.0, 0.0)\\n *\\n * @returns a new up Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Up(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Up\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Vector3#x:member\",\n            docComment: \"/**\\n * Defines the first coordinates (on X axis)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"x\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Vector3#y:member\",\n            docComment: \"/**\\n * Defines the second coordinates (on Y axis)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"y\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Vector3#z:member\",\n            docComment: \"/**\\n * Defines the third coordinates (on Z axis)\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"z\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector3.Zero:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 set to (0.0, 0.0, 0.0)\\n *\\n * @returns a new empty Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Zero(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Zero\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!Vector4:class\",\n          docComment: \"/**\\n * Vector4 class created for EulerAngle class conversion to Quaternion\\n *\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class Vector4 \"\n          }],\n          releaseTag: \"Public\",\n          name: \"Vector4\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!Vector4:constructor(1)\",\n            docComment: \"/**\\n * Creates a Vector4 object from the given floats.\\n *\\n * @param x - x value of the vector\\n *\\n * @param y - y value of the vector\\n *\\n * @param z - z value of the vector\\n *\\n * @param w - w value of the vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(\\n    x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", \\n    w: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"w\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }]\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#add:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.\\n *\\n * @param otherVector - the vector to add\\n *\\n * @returns the resulting vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"add(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"add\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.Add:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector4 as the result of the addition of the two given vectors.\\n *\\n * @param vector1 - the first vector\\n *\\n * @param vector2 - the second vector\\n *\\n * @returns the resulting vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Add(vector1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \", vector2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"vector2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Add\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#addInPlace:member(1)\",\n            docComment: \"/**\\n * Adds the given vector to the current Vector4.\\n *\\n * @param otherVector - the vector to add\\n *\\n * @returns the updated Vector4.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addInPlace(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"addInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#addToRef:member(1)\",\n            docComment: '/**\\n * Updates the given vector \"result\" with the result of the addition of the current Vector4 and the given one.\\n *\\n * @param otherVector - the vector to add\\n *\\n * @param result - the vector to store the result\\n *\\n * @returns the current Vector4.\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"addToRef(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"addToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#asArray:member(1)\",\n            docComment: \"/**\\n * Returns a new array populated with 4 elements : the Vector4 coordinates.\\n *\\n * @returns the resulting array\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"asArray(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number[]\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"asArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.Center:member(1)\",\n            docComment: '/**\\n * Returns a new Vector4 located at the center between the vectors \"value1\" and \"value2\".\\n *\\n * @param value1 - value to calulate the center between\\n *\\n * @param value2 - value to calulate the center between\\n *\\n * @returns the center between the two vectors\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Center(value1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"value2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Center\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#clone:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector4 copied from the current one.\\n *\\n * @returns the new cloned vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"clone(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"clone\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#copyFrom:member(1)\",\n            docComment: \"/**\\n * Updates the current Vector4 with the given one coordinates.\\n *\\n * @param source - the source vector to copy from\\n *\\n * @returns the updated Vector4.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFrom(source: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"source\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"copyFrom\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#copyFromFloats:member(1)\",\n            docComment: \"/**\\n * Updates the current Vector4 coordinates with the given floats.\\n *\\n * @param x - float to copy from\\n *\\n * @param y - float to copy from\\n *\\n * @param z - float to copy from\\n *\\n * @param w - float to copy from\\n *\\n * @returns the updated Vector4.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"copyFromFloats(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", w: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"w\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"copyFromFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.Distance:member(1)\",\n            docComment: '/**\\n * Returns the distance (float) between the vectors \"value1\" and \"value2\".\\n *\\n * @param value1 - value to calulate the distance between\\n *\\n * @param value2 - value to calulate the distance between\\n *\\n * @returns the distance between the two vectors\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Distance(value1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"value2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Distance\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.DistanceSquared:member(1)\",\n            docComment: '/**\\n * Returns the squared distance (float) between the vectors \"value1\" and \"value2\".\\n *\\n * @param value1 - value to calulate the distance between\\n *\\n * @param value2 - value to calulate the distance between\\n *\\n * @returns the distance between the two vectors squared\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static DistanceSquared(value1: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \", value2: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"value1\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"value2\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"DistanceSquared\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#divide:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector4 set with the division result of the current Vector4 by the given one.\\n *\\n * @param otherVector - vector to devide with\\n *\\n * @returns resulting new vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"divide(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"divide\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#divideInPlace:member(1)\",\n            docComment: \"/**\\n * Divides the current Vector3 coordinates by the given ones.\\n *\\n * @param otherVector - vector to devide with\\n *\\n * @returns the updated Vector3.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"divideInPlace(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"divideInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#divideToRef:member(1)\",\n            docComment: '/**\\n * Updates the given vector \"result\" with the division result of the current Vector4 by the given one.\\n *\\n * @param otherVector - vector to devide with\\n *\\n * @param result - vector to store the result\\n *\\n * @returns the current Vector4.\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"divideToRef(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"divideToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#equals:member(1)\",\n            docComment: \"/**\\n * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.\\n *\\n * @param otherVector - the vector to compare against\\n *\\n * @returns true if they are equal\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"equals(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"equals\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#equalsToFloats:member(1)\",\n            docComment: \"/**\\n * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.\\n *\\n * @param x - x value to compare against\\n *\\n * @param y - y value to compare against\\n *\\n * @param z - z value to compare against\\n *\\n * @param w - w value to compare against\\n *\\n * @returns true if equal\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"equalsToFloats(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", w: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"w\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"equalsToFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#equalsWithEpsilon:member(1)\",\n            docComment: '/**\\n * Boolean : True if the current Vector4 coordinates are each beneath the distance \"epsilon\" from the given vector ones.\\n *\\n * @param otherVector - vector to compare against\\n *\\n * @param epsilon - (Default: very small number)\\n *\\n * @returns true if they are equal\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"equalsWithEpsilon(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \", epsilon?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"epsilon\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"equalsWithEpsilon\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#floor:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector4 from current Vector4 floored values\\n *\\n * @returns a new Vector4\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"floor(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"floor\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#fract:member(1)\",\n            docComment: \"/**\\n * Gets a new Vector4 from current Vector3 floored values\\n *\\n * @returns a new Vector4\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"fract(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"fract\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.FromArray:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector4 set from the starting index of the given array.\\n *\\n * @param array - the array to pull values from\\n *\\n * @param offset - the offset into the array to start at\\n *\\n * @returns the new vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromArray(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ArrayLike\",\n              canonicalReference: \"!ArrayLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<number>\"\n            }, {\n              kind: \"Content\",\n              text: \", offset?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 6,\n              endIndex: 7\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }],\n            name: \"FromArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.FromArrayToRef:member(1)\",\n            docComment: '/**\\n * Updates the given vector \"result\" from the starting index of the given array.\\n *\\n * @param array - the array to pull values from\\n *\\n * @param offset - the offset into the array to start at\\n *\\n * @param result - the vector to store the result in\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromArrayToRef(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ArrayLike\",\n              canonicalReference: \"!ArrayLike:interface\"\n            }, {\n              kind: \"Content\",\n              text: \"<number>\"\n            }, {\n              kind: \"Content\",\n              text: \", offset: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 8,\n              endIndex: 9\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 3\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 4,\n                endIndex: 5\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 6,\n                endIndex: 7\n              }\n            }],\n            name: \"FromArrayToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.FromFloatArrayToRef:member(1)\",\n            docComment: '/**\\n * Updates the given vector \"result\" from the starting index of the given FloatArray.\\n *\\n * @param array - the array to pull values from\\n *\\n * @param offset - the offset into the array to start at\\n *\\n * @param result - the vector to store the result in\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromFloatArrayToRef(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"FloatArray\",\n              canonicalReference: \"decentraland-ecs!FloatArray:type\"\n            }, {\n              kind: \"Content\",\n              text: \", offset: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"offset\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"FromFloatArrayToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.FromFloatsToRef:member(1)\",\n            docComment: '/**\\n * Updates the given vector \"result\" coordinates from the given floats.\\n *\\n * @param x - float to set from\\n *\\n * @param y - float to set from\\n *\\n * @param z - float to set from\\n *\\n * @param w - float to set from\\n *\\n * @param result - the vector to the floats in\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static FromFloatsToRef(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", w: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"w\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }],\n            name: \"FromFloatsToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#getClassName:member(1)\",\n            docComment: '/**\\n * Returns the string \"Vector4\".\\n *\\n * @returns \"Vector4\"\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getClassName(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getClassName\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#getHashCode:member(1)\",\n            docComment: \"/**\\n * Returns the Vector4 hash code.\\n *\\n * @returns a unique hash code\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"getHashCode(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"getHashCode\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#length:member(1)\",\n            docComment: \"/**\\n * Returns the Vector4 length (float).\\n *\\n * @returns the length\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"length(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"length\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#lengthSquared:member(1)\",\n            docComment: \"/**\\n * Returns the Vector4 squared length (float).\\n *\\n * @returns the length squared\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"lengthSquared(): \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"lengthSquared\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.Maximize:member(1)\",\n            docComment: \"/**\\n * Returns a vector with the maximum values from the left and right vectors\\n *\\n * @param left - left vector to maximize\\n *\\n * @param right - right vector to maximize\\n *\\n * @returns a new vector with the maximum of the left and right vector values\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Maximize(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Maximize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#maximizeInPlace:member(1)\",\n            docComment: \"/**\\n * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones\\n *\\n * @param other - defines the second operand\\n *\\n * @returns the current updated Vector4\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"maximizeInPlace(other: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"other\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"maximizeInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.Minimize:member(1)\",\n            docComment: \"/**\\n * Returns a vector with the minimum values from the left and right vectors\\n *\\n * @param left - left vector to minimize\\n *\\n * @param right - right vector to minimize\\n *\\n * @returns a new vector with the minimum of the left and right vector values\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Minimize(left: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \", right: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"left\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"right\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"Minimize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#minimizeInPlace:member(1)\",\n            docComment: \"/**\\n * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones\\n *\\n * @param other - defines the second operand\\n *\\n * @returns the current updated Vector4\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"minimizeInPlace(other: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"other\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"minimizeInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#multiply:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.\\n *\\n * @param otherVector - vector to multiple with\\n *\\n * @returns resulting new vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiply(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"multiply\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#multiplyByFloats:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.\\n *\\n * @param x - x value multiply with\\n *\\n * @param y - y value multiply with\\n *\\n * @param z - z value multiply with\\n *\\n * @param w - w value multiply with\\n *\\n * @returns resulting new vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyByFloats(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", w: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"w\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"multiplyByFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#multiplyInPlace:member(1)\",\n            docComment: \"/**\\n * Multiplies in place the current Vector4 by the given one.\\n *\\n * @param otherVector - vector to multiple with\\n *\\n * @returns the updated Vector4.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyInPlace(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"multiplyInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#multiplyToRef:member(1)\",\n            docComment: '/**\\n * Updates the given vector \"result\" with the multiplication result of the current Vector4 and the given one.\\n *\\n * @param otherVector - vector to multiple with\\n *\\n * @param result - vector to store the result\\n *\\n * @returns the current Vector4.\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"multiplyToRef(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"multiplyToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#negate:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector4 set with the current Vector4 negated coordinates.\\n *\\n * @returns a new vector with the negated values\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"negate(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"negate\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#normalize:member(1)\",\n            docComment: \"/**\\n * Normalizes in place the Vector4.\\n *\\n * @returns the updated Vector4.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"normalize(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"normalize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.Normalize:member(1)\",\n            docComment: \"/**\\n * Returns a new normalized Vector4 from the given one.\\n *\\n * @param vector - the vector to normalize\\n *\\n * @returns the vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Normalize(vector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"Normalize\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.NormalizeToRef:member(1)\",\n            docComment: '/**\\n * Updates the given vector \"result\" from the normalization of the given one.\\n *\\n * @param vector - the vector to normalize\\n *\\n * @param result - the vector to store the result in\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static NormalizeToRef(vector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"NormalizeToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.One:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)\\n *\\n * @returns the new vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static One(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"One\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#scale:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).\\n *\\n * @param scale - the number to scale with\\n *\\n * @returns a new vector with the result\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scale(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"scale\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#scaleAndAddToRef:member(1)\",\n            docComment: \"/**\\n * Scale the current Vector4 values by a factor and add the result to a given Vector4\\n *\\n * @param scale - defines the scale factor\\n *\\n * @param result - defines the Vector4 object where to store the result\\n *\\n * @returns the unmodified current Vector4\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleAndAddToRef(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"scaleAndAddToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#scaleInPlace:member(1)\",\n            docComment: \"/**\\n * Multiplies the current Vector4 coordinates by scale (float).\\n *\\n * @param scale - the number to scale with\\n *\\n * @returns the updated Vector4.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleInPlace(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"scaleInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#scaleToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" with the current Vector4 coordinates multiplied by scale (float).\\n *\\n * @param scale - the number to scale with\\n *\\n * @param result - a vector to store the result in\\n *\\n * @returns the current Vector4.\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"scaleToRef(scale: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"scale\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"scaleToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#set:member(1)\",\n            docComment: \"/**\\n * Updates the current Vector4 coordinates with the given floats.\\n *\\n * @param x - float to set from\\n *\\n * @param y - float to set from\\n *\\n * @param z - float to set from\\n *\\n * @param w - float to set from\\n *\\n * @returns the updated Vector4.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"set(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", w: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"w\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"set\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#setAll:member(1)\",\n            docComment: \"/**\\n * Copies the given float to the current Vector3 coordinates\\n *\\n * @param v - defines the x, y, z and w coordinates of the operand\\n *\\n * @returns the current updated Vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"setAll(v: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"v\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"setAll\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#subtract:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.\\n *\\n * @param otherVector - the vector to add\\n *\\n * @returns the new vector with the result\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtract(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"subtract\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#subtractFromFloats:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\\n *\\n * @param x - value to subtract\\n *\\n * @param y - value to subtract\\n *\\n * @param z - value to subtract\\n *\\n * @param w - value to subtract\\n *\\n * @returns new vector containing the result\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtractFromFloats(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", w: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 9,\n              endIndex: 10\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"w\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }],\n            name: \"subtractFromFloats\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#subtractFromFloatsToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" set with the result of the subtraction of the given floats from the current Vector4 coordinates.\\n *\\n * @param x - value to subtract\\n *\\n * @param y - value to subtract\\n *\\n * @param z - value to subtract\\n *\\n * @param w - value to subtract\\n *\\n * @param result - the vector to store the result in\\n *\\n * @returns the current Vector4.\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtractFromFloatsToRef(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", w: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 11,\n              endIndex: 12\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"w\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }],\n            name: \"subtractFromFloatsToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#subtractInPlace:member(1)\",\n            docComment: \"/**\\n * Subtract in place the given vector from the current Vector4.\\n *\\n * @param otherVector - the vector to subtract\\n *\\n * @returns the updated Vector4.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtractInPlace(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"subtractInPlace\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#subtractToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" with the result of the subtraction of the given vector from the current Vector4.\\n *\\n * @param otherVector - the vector to subtract\\n *\\n * @param result - the vector to store the result\\n *\\n * @returns the current Vector4.\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"subtractToRef(otherVector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"otherVector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"subtractToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#toArray:member(1)\",\n            docComment: \"/**\\n * Populates the given array from the given index with the Vector4 coordinates.\\n *\\n * @param array - array to populate\\n *\\n * @param index - index of the array to start at (default: 0)\\n *\\n * @returns the Vector4.\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toArray(array: \"\n            }, {\n              kind: \"Reference\",\n              text: \"FloatArray\",\n              canonicalReference: \"decentraland-ecs!FloatArray:type\"\n            }, {\n              kind: \"Content\",\n              text: \", index?: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"array\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"index\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"toArray\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#toString:member(1)\",\n            docComment: \"/**\\n * Returns the string with the Vector4 coordinates.\\n *\\n * @returns a string containing all the vector values\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toString(): \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toString\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4#toVector3:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.\\n *\\n * @returns this converted to a new vector3\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toVector3(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector3\",\n              canonicalReference: \"decentraland-ecs!Vector3:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toVector3\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.TransformNormal:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector. This methods computes transformed normalized direction vectors only.\\n *\\n * @param vector - the vector to transform\\n *\\n * @param transformation - the transformation matrix to apply\\n *\\n * @returns the new vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static TransformNormal(vector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \", transformation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 5,\n              endIndex: 6\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"transformation\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }],\n            name: \"TransformNormal\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.TransformNormalFromFloatsToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w). This methods computes transformed normalized direction vectors only.\\n *\\n * @param x - value to transform\\n *\\n * @param y - value to transform\\n *\\n * @param z - value to transform\\n *\\n * @param w - value to transform\\n *\\n * @param transformation - the transformation matrix to apply\\n *\\n * @param result - the vector to store the results in\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static TransformNormalFromFloatsToRef(x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", w: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \", transformation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 13,\n              endIndex: 14\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"x\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"y\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"z\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }, {\n              parameterName: \"w\",\n              parameterTypeTokenRange: {\n                startIndex: 7,\n                endIndex: 8\n              }\n            }, {\n              parameterName: \"transformation\",\n              parameterTypeTokenRange: {\n                startIndex: 9,\n                endIndex: 10\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 11,\n                endIndex: 12\n              }\n            }],\n            name: \"TransformNormalFromFloatsToRef\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.TransformNormalToRef:member(1)\",\n            docComment: '/**\\n * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector. This methods computes transformed normalized direction vectors only.\\n *\\n * @param vector - the vector to transform\\n *\\n * @param transformation - the transformation matrix to apply\\n *\\n * @param result - the vector to store the result in\\n */\\n',\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static TransformNormalToRef(vector: \"\n            }, {\n              kind: \"Reference\",\n              text: \"ReadOnlyVector4\",\n              canonicalReference: \"decentraland-ecs!ReadOnlyVector4:type\"\n            }, {\n              kind: \"Content\",\n              text: \", transformation: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Matrix\",\n              canonicalReference: \"decentraland-ecs!Matrix:class\"\n            }, {\n              kind: \"Content\",\n              text: \", result: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 7,\n              endIndex: 8\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"vector\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"transformation\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 4\n              }\n            }, {\n              parameterName: \"result\",\n              parameterTypeTokenRange: {\n                startIndex: 5,\n                endIndex: 6\n              }\n            }],\n            name: \"TransformNormalToRef\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Vector4#w:member\",\n            docComment: \"/**\\n * w value of the vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"w: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"w\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Vector4#x:member\",\n            docComment: \"/**\\n * x value of the vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"x: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"x\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Vector4#y:member\",\n            docComment: \"/**\\n * y value of the vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"y: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"y\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!Vector4#z:member\",\n            docComment: \"/**\\n * z value of the vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"z: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"z\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!Vector4.Zero:member(1)\",\n            docComment: \"/**\\n * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)\\n *\\n * @returns the new vector\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"static Zero(): \"\n            }, {\n              kind: \"Reference\",\n              text: \"Vector4\",\n              canonicalReference: \"decentraland-ecs!Vector4:class\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: true,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"Zero\"\n          }],\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!VideoClip:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class VideoClip extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"VideoClip\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!VideoClip:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `VideoClip` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(url: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"url\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!VideoClip#url:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly url: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"url\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"Class\",\n          canonicalReference: \"decentraland-ecs!VideoTexture:class\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare class VideoTexture extends \"\n          }, {\n            kind: \"Reference\",\n            text: \"ObservableComponent\",\n            canonicalReference: \"decentraland-ecs!ObservableComponent:class\"\n          }, {\n            kind: \"Content\",\n            text: \" \"\n          }],\n          releaseTag: \"Public\",\n          name: \"VideoTexture\",\n          members: [{\n            kind: \"Constructor\",\n            canonicalReference: \"decentraland-ecs!VideoTexture:constructor(1)\",\n            docComment: \"/**\\n * Constructs a new instance of the `VideoTexture` class\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"constructor(videoClip: \"\n            }, {\n              kind: \"Reference\",\n              text: \"VideoClip\",\n              canonicalReference: \"decentraland-ecs!VideoClip:class\"\n            }, {\n              kind: \"Content\",\n              text: \", opts?: \"\n            }, {\n              kind: \"Reference\",\n              text: \"Partial\",\n              canonicalReference: \"!Partial:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"Pick\",\n              canonicalReference: \"!Pick:type\"\n            }, {\n              kind: \"Content\",\n              text: \"<\"\n            }, {\n              kind: \"Reference\",\n              text: \"VideoTexture\",\n              canonicalReference: \"decentraland-ecs!VideoTexture:class\"\n            }, {\n              kind: \"Content\",\n              text: \", 'samplingMode' | 'wrap'>>\"\n            }, {\n              kind: \"Content\",\n              text: \");\"\n            }],\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"videoClip\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }, {\n              parameterName: \"opts\",\n              parameterTypeTokenRange: {\n                startIndex: 3,\n                endIndex: 9\n              }\n            }]\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!VideoTexture#loop:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"loop: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"loop\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!VideoTexture#pause:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"pause(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"pause\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!VideoTexture#play:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"play(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"play\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!VideoTexture#playbackRate:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"playbackRate: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"playbackRate\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!VideoTexture#playing:member\",\n            docComment: \"/**\\n * Is this VideoTexture playing?\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"playing: \"\n            }, {\n              kind: \"Content\",\n              text: \"boolean\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"playing\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!VideoTexture#reset:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"reset(): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"reset\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!VideoTexture#samplingMode:member\",\n            docComment: \"/**\\n * Enables crisper images based on the provided sampling mode. | Value | Type | |-------|-----------| | 1 | NEAREST | | 2 | BILINEAR | | 3 | TRILINEAR |\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly samplingMode: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"samplingMode\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!VideoTexture#seek:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"seek: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"seek\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!VideoTexture#seekTime:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"seekTime(seconds: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \"): \"\n            }, {\n              kind: \"Content\",\n              text: \"void\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 3,\n              endIndex: 4\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [{\n              parameterName: \"seconds\",\n              parameterTypeTokenRange: {\n                startIndex: 1,\n                endIndex: 2\n              }\n            }],\n            name: \"seekTime\"\n          }, {\n            kind: \"Method\",\n            canonicalReference: \"decentraland-ecs!VideoTexture#toJSON:member(1)\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"toJSON(): \"\n            }, {\n              kind: \"Content\",\n              text: \"any\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            isStatic: false,\n            returnTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            releaseTag: \"Public\",\n            overloadIndex: 1,\n            parameters: [],\n            name: \"toJSON\"\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!VideoTexture#videoClipId:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly videoClipId: \"\n            }, {\n              kind: \"Content\",\n              text: \"string\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"videoClipId\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!VideoTexture#volume:member\",\n            docComment: \"\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"volume: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"volume\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }, {\n            kind: \"Property\",\n            canonicalReference: \"decentraland-ecs!VideoTexture#wrap:member\",\n            docComment: \"/**\\n * Enables texture wrapping for this material. | Value | Type | |-------|-----------| | 1 | CLAMP | | 2 | WRAP | | 3 | MIRROR |\\n */\\n\",\n            excerptTokens: [{\n              kind: \"Content\",\n              text: \"readonly wrap: \"\n            }, {\n              kind: \"Content\",\n              text: \"number\"\n            }, {\n              kind: \"Content\",\n              text: \";\"\n            }],\n            releaseTag: \"Public\",\n            name: \"wrap\",\n            propertyTypeTokenRange: {\n              startIndex: 1,\n              endIndex: 2\n            },\n            isStatic: false\n          }],\n          extendsTokenRange: {\n            startIndex: 1,\n            endIndex: 3\n          },\n          implementsTokenRanges: []\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!Wearable:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type Wearable = \"\n          }, {\n            kind: \"Content\",\n            text: \"{\\n    id: \"\n          }, {\n            kind: \"Reference\",\n            text: \"WearableId\",\n            canonicalReference: \"decentraland-ecs!WearableId:type\"\n          }, {\n            kind: \"Content\",\n            text: \";\\n    type: 'wearable';\\n    category: string;\\n    baseUrl: string;\\n    tags: string[];\\n    representations: \"\n          }, {\n            kind: \"Reference\",\n            text: \"BodyShapeRespresentation\",\n            canonicalReference: \"decentraland-ecs!BodyShapeRespresentation:type\"\n          }, {\n            kind: \"Content\",\n            text: \"[];\\n}\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"Wearable\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 6\n          }\n        }, {\n          kind: \"TypeAlias\",\n          canonicalReference: \"decentraland-ecs!WearableId:type\",\n          docComment: \"/**\\n * @public\\n */\\n\",\n          excerptTokens: [{\n            kind: \"Content\",\n            text: \"export declare type WearableId = \"\n          }, {\n            kind: \"Content\",\n            text: \"string\"\n          }, {\n            kind: \"Content\",\n            text: \";\"\n          }],\n          releaseTag: \"Public\",\n          name: \"WearableId\",\n          typeTokenRange: {\n            startIndex: 1,\n            endIndex: 2\n          }\n        }]\n      }]\n    };\n  },\n  946: function _() {\n    !function (e, n) {\n      for (var t in n) {\n        e[t] = n[t];\n      }\n    }(this, function (e) {\n      var t = {};\n\n      function n(a) {\n        if (t[a]) return t[a].exports;\n        var r = t[a] = {\n          i: a,\n          l: !1,\n          exports: {}\n        };\n        return e[a].call(r.exports, r, r.exports, n), r.l = !0, r.exports;\n      }\n\n      return n.m = e, n.c = t, n.d = function (e, t, a) {\n        n.o(e, t) || Object.defineProperty(e, t, {\n          enumerable: !0,\n          get: a\n        });\n      }, n.r = function (e) {\n        \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n          value: \"Module\"\n        }), Object.defineProperty(e, \"__esModule\", {\n          value: !0\n        });\n      }, n.t = function (e, t) {\n        if (1 & t && (e = n(e)), 8 & t) return e;\n        if (4 & t && \"object\" == typeof e && e && e.__esModule) return e;\n        var a = Object.create(null);\n        if (n.r(a), Object.defineProperty(a, \"default\", {\n          enumerable: !0,\n          value: e\n        }), 2 & t && \"string\" != typeof e) for (var r in e) {\n          n.d(a, r, function (n) {\n            return e[n];\n          }.bind(null, r));\n        }\n        return a;\n      }, n.n = function (e) {\n        var t = e && e.__esModule ? function () {\n          return e.default;\n        } : function () {\n          return e;\n        };\n        return n.d(t, \"a\", t), t;\n      }, n.o = function (e, n) {\n        return Object.prototype.hasOwnProperty.call(e, n);\n      }, n.p = \"\", n(n.s = 30);\n    }([function (e, n, a) {\n      \"use strict\";\n\n      var r = this && this.__assign || function () {\n        return (r = Object.assign || function (e) {\n          for (var n, t = 1, a = arguments.length; t < a; t++) {\n            for (var r in n = arguments[t]) {\n              Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n            }\n          }\n\n          return e;\n        }).apply(this, arguments);\n      },\n          o = this && this.__decorate || function (e, n, t, a) {\n        var r,\n            o = arguments.length,\n            d = o < 3 ? n : null === a ? a = Object.getOwnPropertyDescriptor(n, t) : a;\n        if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) d = Reflect.decorate(e, n, t, a);else for (var i = e.length - 1; i >= 0; i--) {\n          (r = e[i]) && (d = (o < 3 ? r(d) : o > 3 ? r(n, t, d) : r(n, t)) || d);\n        }\n        return o > 3 && d && Object.defineProperty(n, t, d), d;\n      },\n          i = this && this.__read || function (e, n) {\n        var t = \"function\" == typeof Symbol && e[Symbol.iterator];\n        if (!t) return e;\n        var a,\n            r,\n            o = t.call(e),\n            d = [];\n\n        try {\n          for (; (void 0 === n || n-- > 0) && !(a = o.next()).done;) {\n            d.push(a.value);\n          }\n        } catch (e) {\n          r = {\n            error: e\n          };\n        } finally {\n          try {\n            a && !a.done && (t = o.return) && t.call(o);\n          } finally {\n            if (r) throw r.error;\n          }\n        }\n\n        return d;\n      },\n          c = this && this.__spread || function () {\n        for (var e = [], n = 0; n < arguments.length; n++) {\n          e = e.concat(i(arguments[n]));\n        }\n\n        return e;\n      };\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var s = a(1),\n          l = a(8),\n          m = a(18),\n          p = function () {\n        function t(e, n, t) {\n          this.componentId = e, this.componentName = n, this.classId = t;\n        }\n\n        return t = o([l.EventConstructor()], t);\n      }();\n\n      n.DisposableComponentCreated = p;\n\n      var x = function () {\n        function t(e) {\n          this.componentId = e;\n        }\n\n        return t = o([l.EventConstructor()], t);\n      }();\n\n      n.DisposableComponentRemoved = x;\n\n      var k = function () {\n        function t(e, n) {\n          this.componentId = e, this.component = n;\n        }\n\n        return t = o([l.EventConstructor()], t);\n      }();\n\n      function d(e, n) {\n        return function (t) {\n          if (t.isComponent) throw new TypeError(\"You cannot extend a component. Trying to extend \" + t.originalClassName + \" with: \" + e);\n          if (\"number\" != typeof n || isNaN(n)) throw new Error(\"classId: \" + n + \" is an invalid integer\");\n\n          var a = t,\n              r = function r() {\n            if (!d.engine) throw new Error(\"You need to set a DisposableComponent.engine before creating disposable components\");\n            var t = Array.prototype.slice.call(arguments),\n                r = new (a.bind.apply(a, c([void 0], t)))(),\n                o = s.newId(\"C\");\n            return Object.defineProperty(r, \"__name__symbol_\", {\n              enumerable: !1,\n              writable: !1,\n              configurable: !1,\n              value: e\n            }), Object.defineProperty(r, \"__component__id_\", {\n              enumerable: !1,\n              writable: !1,\n              configurable: !1,\n              value: o\n            }), void 0 !== n && Object.defineProperty(r, \"__classId__symbol_\", {\n              enumerable: !1,\n              writable: !1,\n              configurable: !1,\n              value: n\n            }), d.engine && d.engine.registerComponent(r), r;\n          };\n\n          return void 0 !== n && (r.__classId__symbol_ = n), r.__name__symbol_ = e, r.isComponent = !0, r.isDisposableComponent = !0, r.originalClassName = e, (r.prototype = t.prototype).constructor = t, r;\n        };\n      }\n\n      function f(e) {\n        if (!e) throw new TypeError(e + \" is not a component.\");\n        if (e.__component__id_) return e.__component__id_;\n        throw new TypeError(e + \" is not a registered disposable component.\");\n      }\n\n      n.DisposableComponentUpdated = k, n.Component = function (e, n) {\n        return function (t) {\n          if (t.isComponent) throw new TypeError(\"You cannot extend a component. Trying to extend \" + t.originalClassName + \" with: \" + e);\n\n          var a = t,\n              r = function r() {\n            var t = Array.prototype.slice.call(arguments),\n                r = new (a.bind.apply(a, c([void 0], t)))();\n            return Object.defineProperty(r, \"__name__symbol_\", {\n              enumerable: !1,\n              writable: !1,\n              configurable: !1,\n              value: e\n            }), void 0 !== n && Object.defineProperty(r, \"__classId__symbol_\", {\n              enumerable: !1,\n              writable: !1,\n              configurable: !1,\n              value: n\n            }), r;\n          };\n\n          return void 0 !== n && (r.__classId__symbol_ = n), r.__name__symbol_ = e, r.isComponent = !0, r.originalClassName = e, (r.prototype = t.prototype).constructor = t, r;\n        };\n      }, n.DisposableComponent = d, function (e) {\n        e.engine = null;\n      }(d = n.DisposableComponent || (n.DisposableComponent = {})), n.getComponentName = function (e) {\n        if (!e) throw new TypeError(e + \" is not a component.\");\n        if (e.__name__symbol_) return e.__name__symbol_;\n        throw new TypeError(e + \" is not a registered component.\");\n      }, n.getComponentClassId = function (e) {\n        if (!e) throw new TypeError(e + \" is not a component.\");\n        if (e.__classId__symbol_) return e.__classId__symbol_;\n        if (!e.__name__symbol_) throw new TypeError(e + \" is not a registered component.\");\n        return null;\n      }, n.getComponentId = f;\n\n      var u = function () {\n        function t() {\n          this.dirty = !1, this.data = {}, this.subscriptions = [];\n        }\n\n        return t.component = function (e, n) {\n          if (delete e[n]) {\n            var t = n + \"_\" + Math.random();\n            e[t] = void 0, Object.defineProperty(e, t, r(r({}, Object.getOwnPropertyDescriptor(e, t)), {\n              enumerable: !1\n            })), Object.defineProperty(e, n.toString(), {\n              get: function get() {\n                return this[t];\n              },\n              set: function set(e) {\n                var a = this[t];\n\n                if (this.data[n] = e ? f(e) : null, this[t] = e, e !== a) {\n                  this.dirty = !0;\n\n                  for (var r = 0; r < this.subscriptions.length; r++) {\n                    this.subscriptions[r](n, e, a);\n                  }\n                }\n              },\n              enumerable: !0\n            });\n          }\n        }, t.field = function (e, n) {\n          delete e[n] && Object.defineProperty(e, n.toString(), {\n            get: function get() {\n              return this.data[n];\n            },\n            set: function set(e) {\n              var t = this.data[n];\n\n              if (this.data[n] = e, e !== t) {\n                this.dirty = !0;\n\n                for (var a = 0; a < this.subscriptions.length; a++) {\n                  this.subscriptions[a](n, e, t);\n                }\n              }\n            },\n            enumerable: !0\n          });\n        }, t.uiValue = function (e, n) {\n          delete e[n] && Object.defineProperty(e, n.toString(), {\n            get: function get() {\n              return this.data[n].toString();\n            },\n            set: function set(e) {\n              var t = this.data[n],\n                  a = new m.UIValue(e);\n\n              if (this.data[n] = a, a !== t) {\n                this.dirty = !0;\n\n                for (var r = 0; r < this.subscriptions.length; r++) {\n                  this.subscriptions[r](n, a, t);\n                }\n              }\n            },\n            enumerable: !0\n          });\n        }, t.readonly = function (e, n) {\n          delete e[n] && Object.defineProperty(e, n.toString(), {\n            get: function get() {\n              if (n in this.data == !1) throw new Error(\"The field \" + n + \" is uninitialized\");\n              return this.data[n];\n            },\n            set: function set(e) {\n              if (n in this.data) throw new Error(\"The field \" + n + \" is readonly\");\n              this.data[n] = e, this.dirty = !0;\n            },\n            enumerable: !0,\n            configurable: !1\n          });\n        }, t.prototype.onChange = function (e) {\n          return this.subscriptions.push(e), this;\n        }, t.prototype.toJSON = function () {\n          return this.data;\n        }, t;\n      }();\n\n      n.ObservableComponent = u, n.isDisposableComponent = function (e) {\n        return \"__component__id_\" in e;\n      };\n    }, function (e, n, t) {\n      \"use strict\";\n\n      var a = this && this.__read || function (e, n) {\n        var t = \"function\" == typeof Symbol && e[Symbol.iterator];\n        if (!t) return e;\n        var a,\n            r,\n            o = t.call(e),\n            d = [];\n\n        try {\n          for (; (void 0 === n || n-- > 0) && !(a = o.next()).done;) {\n            d.push(a.value);\n          }\n        } catch (e) {\n          r = {\n            error: e\n          };\n        } finally {\n          try {\n            a && !a.done && (t = o.return) && t.call(o);\n          } finally {\n            if (r) throw r.error;\n          }\n        }\n\n        return d;\n      },\n          r = this && this.__spread || function () {\n        for (var e = [], n = 0; n < arguments.length; n++) {\n          e = e.concat(a(arguments[n]));\n        }\n\n        return e;\n      };\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n      var o = 0;\n      n.log = function () {\n        for (var e = [], n = 0; n < arguments.length; n++) {\n          e[n] = arguments[n];\n        }\n\n        \"undefined\" != typeof dcl ? dcl.log.apply(dcl, r(e)) : console.log.apply(console, r([\"DEBUG:\"], e));\n      }, n.error = function (e, n) {\n        \"undefined\" != typeof dcl ? dcl.error(e, n) : console.error(\"ERROR:\", e, n);\n      }, n.newId = function (e) {\n        if (o++, 0 === e.length) throw new Error(\"newId(type: string): type cannot be empty\");\n        return e + o.toString(36);\n      }, n.uuid = function () {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (e) {\n          var n = 16 * Math.random() | 0;\n          return (\"x\" === e ? n : 3 & n | 8).toString(16);\n        });\n      }, n.buildArray = function (e, n) {\n        for (var t = [], a = 0; a < e; ++a) {\n          t.push(n());\n        }\n\n        return t;\n      }, n.openExternalURL = function (e) {\n        \"undefined\" != typeof dcl ? dcl.openExternalUrl(e) : console.error(\"ERROR: openExternalURL dcl is undefined\");\n      }, n.openNFTDialog = function (e, n) {\n        if (void 0 === n && (n = null), \"undefined\" != typeof dcl) {\n          var t = e.match(/ethereum:\\/\\/(.+)\\/(.+)/);\n          if (!t || t.length < 3) return;\n          dcl.openNFTDialog(t[1], t[2], n);\n        } else console.error(\"ERROR: openNFTDialog dcl is undefined\");\n      };\n    }, function (e, n, t) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      }), function (e) {\n        e[e.CW = 0] = \"CW\", e[e.CCW = 1] = \"CCW\";\n      }(n.Orientation || (n.Orientation = {})), function (e) {\n        e[e.LOCAL = 0] = \"LOCAL\", e[e.WORLD = 1] = \"WORLD\", e[e.BONE = 2] = \"BONE\";\n      }(n.Space || (n.Space = {})), n.ToGammaSpace = 1 / 2.2, n.ToLinearSpace = 2.2, n.Epsilon = 1e-6, n.DEG2RAD = Math.PI / 180, n.RAD2DEG = 360 / (2 * Math.PI);\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(9),\n          o = a(2),\n          d = a(10),\n          i = a(6),\n          c = function () {\n        function t(e, n, t) {\n          void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === t && (t = 0), this.x = e, this.y = n, this.z = t;\n        }\n\n        return Object.defineProperty(t.prototype, \"isNonUniform\", {\n          get: function get() {\n            var e = Math.abs(this.x),\n                n = Math.abs(this.y);\n            if (e !== n) return !0;\n            var t = Math.abs(this.z);\n            return e !== t || n !== t;\n          },\n          enumerable: !0,\n          configurable: !0\n        }), t.Add = function (e, n) {\n          return new t(e.x, e.y, e.z).addInPlace(n);\n        }, t.GetClipFactor = function (e, n, a, r) {\n          var o = t.Dot(e, a) - r;\n          return o / (o - (t.Dot(n, a) - r));\n        }, t.GetAngleBetweenVectors = function (e, n, a) {\n          var o = e.normalizeToRef(r.MathTmp.Vector3[1]),\n              d = n.normalizeToRef(r.MathTmp.Vector3[2]),\n              i = t.Dot(o, d),\n              c = r.MathTmp.Vector3[3];\n          return t.CrossToRef(o, d, c), t.Dot(c, a) > 0 ? Math.acos(i) : -Math.acos(i);\n        }, t.FromArray = function (e, n) {\n          return void 0 === n && (n = 0), new t(e[n], e[n + 1], e[n + 2]);\n        }, t.FromFloatArray = function (e, n) {\n          return t.FromArray(e, n);\n        }, t.FromArrayToRef = function (e, n, t) {\n          t.x = e[n], t.y = e[n + 1], t.z = e[n + 2];\n        }, t.FromFloatArrayToRef = function (e, n, a) {\n          return t.FromArrayToRef(e, n, a);\n        }, t.FromFloatsToRef = function (e, n, t, a) {\n          a.copyFromFloats(e, n, t);\n        }, t.Zero = function () {\n          return new t(0, 0, 0);\n        }, t.One = function () {\n          return new t(1, 1, 1);\n        }, t.Up = function () {\n          return new t(0, 1, 0);\n        }, t.Down = function () {\n          return new t(0, -1, 0);\n        }, t.Forward = function () {\n          return new t(0, 0, 1);\n        }, t.Backward = function () {\n          return new t(0, 0, -1);\n        }, t.Right = function () {\n          return new t(1, 0, 0);\n        }, t.Left = function () {\n          return new t(-1, 0, 0);\n        }, t.TransformCoordinates = function (e, n) {\n          var a = t.Zero();\n          return t.TransformCoordinatesToRef(e, n, a), a;\n        }, t.TransformCoordinatesToRef = function (e, n, a) {\n          return t.TransformCoordinatesFromFloatsToRef(e.x, e.y, e.z, n, a);\n        }, t.TransformCoordinatesFromFloatsToRef = function (e, n, t, a, r) {\n          var o = a.m,\n              d = e * o[0] + n * o[4] + t * o[8] + o[12],\n              i = e * o[1] + n * o[5] + t * o[9] + o[13],\n              c = e * o[2] + n * o[6] + t * o[10] + o[14],\n              s = 1 / (e * o[3] + n * o[7] + t * o[11] + o[15]);\n          r.x = d * s, r.y = i * s, r.z = c * s;\n        }, t.TransformNormal = function (e, n) {\n          var a = t.Zero();\n          return t.TransformNormalToRef(e, n, a), a;\n        }, t.TransformNormalToRef = function (e, n, t) {\n          this.TransformNormalFromFloatsToRef(e.x, e.y, e.z, n, t);\n        }, t.TransformNormalFromFloatsToRef = function (e, n, t, a, r) {\n          var o = a.m;\n          r.x = e * o[0] + n * o[4] + t * o[8], r.y = e * o[1] + n * o[5] + t * o[9], r.z = e * o[2] + n * o[6] + t * o[10];\n        }, t.CatmullRom = function (e, n, a, r, o) {\n          var d = o * o,\n              i = o * d;\n          return new t(.5 * (2 * n.x + (-e.x + a.x) * o + (2 * e.x - 5 * n.x + 4 * a.x - r.x) * d + (-e.x + 3 * n.x - 3 * a.x + r.x) * i), .5 * (2 * n.y + (-e.y + a.y) * o + (2 * e.y - 5 * n.y + 4 * a.y - r.y) * d + (-e.y + 3 * n.y - 3 * a.y + r.y) * i), .5 * (2 * n.z + (-e.z + a.z) * o + (2 * e.z - 5 * n.z + 4 * a.z - r.z) * d + (-e.z + 3 * n.z - 3 * a.z + r.z) * i));\n        }, t.Clamp = function (e, n, a) {\n          var r = new t();\n          return t.ClampToRef(e, n, a, r), r;\n        }, t.ClampToRef = function (e, n, t, a) {\n          var r = e.x;\n          r = (r = r > t.x ? t.x : r) < n.x ? n.x : r;\n          var o = e.y;\n          o = (o = o > t.y ? t.y : o) < n.y ? n.y : o;\n          var d = e.z;\n          d = (d = d > t.z ? t.z : d) < n.z ? n.z : d, a.copyFromFloats(r, o, d);\n        }, t.Hermite = function (e, n, a, r, o) {\n          var d = o * o,\n              i = o * d,\n              c = 2 * i - 3 * d + 1,\n              s = -2 * i + 3 * d,\n              l = i - 2 * d + o,\n              m = i - d;\n          return new t(e.x * c + a.x * s + n.x * l + r.x * m, e.y * c + a.y * s + n.y * l + r.y * m, e.z * c + a.z * s + n.z * l + r.z * m);\n        }, t.Lerp = function (e, n, a) {\n          var r = new t(0, 0, 0);\n          return t.LerpToRef(e, n, a, r), r;\n        }, t.LerpToRef = function (e, n, t, a) {\n          a.x = e.x + (n.x - e.x) * t, a.y = e.y + (n.y - e.y) * t, a.z = e.z + (n.z - e.z) * t;\n        }, t.Dot = function (e, n) {\n          return e.x * n.x + e.y * n.y + e.z * n.z;\n        }, t.Cross = function (e, n) {\n          var a = t.Zero();\n          return t.CrossToRef(e, n, a), a;\n        }, t.CrossToRef = function (e, n, t) {\n          var a = e.y * n.z - e.z * n.y,\n              r = e.z * n.x - e.x * n.z,\n              o = e.x * n.y - e.y * n.x;\n          t.copyFromFloats(a, r, o);\n        }, t.Normalize = function (e) {\n          var n = t.Zero();\n          return t.NormalizeToRef(e, n), n;\n        }, t.NormalizeToRef = function (e, n) {\n          e.normalizeToRef(n);\n        }, t.Minimize = function (e, n) {\n          var a = new t(e.x, e.y, e.z);\n          return a.minimizeInPlace(n), a;\n        }, t.Maximize = function (e, n) {\n          var a = new t(e.x, e.y, e.z);\n          return a.maximizeInPlace(n), a;\n        }, t.Distance = function (e, n) {\n          return Math.sqrt(t.DistanceSquared(e, n));\n        }, t.DistanceSquared = function (e, n) {\n          var t = e.x - n.x,\n              a = e.y - n.y,\n              r = e.z - n.z;\n          return t * t + a * a + r * r;\n        }, t.Center = function (e, n) {\n          var a = t.Add(e, n);\n          return a.scaleInPlace(.5), a;\n        }, t.RotationFromAxis = function (e, n, a) {\n          var r = t.Zero();\n          return t.RotationFromAxisToRef(e, n, a, r), r;\n        }, t.RotationFromAxisToRef = function (e, n, t, a) {\n          var o = r.MathTmp.Quaternion[0];\n          d.Quaternion.RotationQuaternionFromAxisToRef(e, n, t, o), a.copyFrom(o.eulerAngles);\n        }, t.prototype.toString = function () {\n          return \"(\" + this.x + \", \" + this.y + \", \" + this.z + \")\";\n        }, t.prototype.getClassName = function () {\n          return \"Vector3\";\n        }, t.prototype.getHashCode = function () {\n          var e = this.x || 0;\n          return e = 397 * (e = 397 * e ^ (this.y || 0)) ^ (this.z || 0);\n        }, t.prototype.asArray = function () {\n          var e = [];\n          return this.toArray(e, 0), e;\n        }, t.prototype.toArray = function (e, n) {\n          return void 0 === n && (n = 0), e[n] = this.x, e[n + 1] = this.y, e[n + 2] = this.z, this;\n        }, t.prototype.toQuaternion = function () {\n          return d.Quaternion.Identity.setEuler(this.y, this.x, this.z);\n        }, t.prototype.addInPlace = function (e) {\n          return this.addInPlaceFromFloats(e.x, e.y, e.z);\n        }, t.prototype.addInPlaceFromFloats = function (e, n, t) {\n          return this.x += e, this.y += n, this.z += t, this;\n        }, t.prototype.add = function (e) {\n          return new t(this.x + e.x, this.y + e.y, this.z + e.z);\n        }, t.prototype.addToRef = function (e, n) {\n          return n.copyFromFloats(this.x + e.x, this.y + e.y, this.z + e.z);\n        }, t.prototype.subtractInPlace = function (e) {\n          return this.x -= e.x, this.y -= e.y, this.z -= e.z, this;\n        }, t.prototype.subtract = function (e) {\n          return new t(this.x - e.x, this.y - e.y, this.z - e.z);\n        }, t.prototype.subtractToRef = function (e, n) {\n          return this.subtractFromFloatsToRef(e.x, e.y, e.z, n);\n        }, t.prototype.subtractFromFloats = function (e, n, a) {\n          return new t(this.x - e, this.y - n, this.z - a);\n        }, t.prototype.subtractFromFloatsToRef = function (e, n, t, a) {\n          return a.copyFromFloats(this.x - e, this.y - n, this.z - t);\n        }, t.prototype.applyMatrix4 = function (e) {\n          this.applyMatrix4ToRef(e, this);\n        }, t.prototype.applyMatrix4ToRef = function (e, n) {\n          var t = this.x,\n              a = this.y,\n              r = this.z,\n              o = e.m,\n              d = 1 / (o[3] * t + o[7] * a + o[11] * r + o[15]);\n          return n.x = (o[0] * t + o[4] * a + o[8] * r + o[12]) * d, n.y = (o[1] * t + o[5] * a + o[9] * r + o[13]) * d, n.z = (o[2] * t + o[6] * a + o[10] * r + o[14]) * d, n;\n        }, t.prototype.rotate = function (e) {\n          return this.rotateToRef(e, this);\n        }, t.prototype.rotateToRef = function (e, n) {\n          var t = this.x,\n              a = this.y,\n              r = this.z,\n              o = e.x,\n              d = e.y,\n              i = e.z,\n              c = e.w,\n              s = c * t + d * r - i * a,\n              l = c * a + i * t - o * r,\n              m = c * r + o * a - d * t,\n              p = -o * t - d * a - i * r;\n          return n.x = s * c + p * -o + l * -i - m * -d, n.y = l * c + p * -d + m * -o - s * -i, n.z = m * c + p * -i + s * -d - l * -o, n;\n        }, t.prototype.negate = function () {\n          return new t(-this.x, -this.y, -this.z);\n        }, t.prototype.scaleInPlace = function (e) {\n          return this.x *= e, this.y *= e, this.z *= e, this;\n        }, t.prototype.scale = function (e) {\n          return new t(this.x * e, this.y * e, this.z * e);\n        }, t.prototype.scaleToRef = function (e, n) {\n          return n.copyFromFloats(this.x * e, this.y * e, this.z * e);\n        }, t.prototype.scaleAndAddToRef = function (e, n) {\n          return n.addInPlaceFromFloats(this.x * e, this.y * e, this.z * e);\n        }, t.prototype.equals = function (e) {\n          return e && this.x === e.x && this.y === e.y && this.z === e.z;\n        }, t.prototype.equalsWithEpsilon = function (e, n) {\n          return void 0 === n && (n = o.Epsilon), e && i.Scalar.WithinEpsilon(this.x, e.x, n) && i.Scalar.WithinEpsilon(this.y, e.y, n) && i.Scalar.WithinEpsilon(this.z, e.z, n);\n        }, t.prototype.equalsToFloats = function (e, n, t) {\n          return this.x === e && this.y === n && this.z === t;\n        }, t.prototype.multiplyInPlace = function (e) {\n          return this.x *= e.x, this.y *= e.y, this.z *= e.z, this;\n        }, t.prototype.multiply = function (e) {\n          return this.multiplyByFloats(e.x, e.y, e.z);\n        }, t.prototype.multiplyToRef = function (e, n) {\n          return n.copyFromFloats(this.x * e.x, this.y * e.y, this.z * e.z);\n        }, t.prototype.multiplyByFloats = function (e, n, a) {\n          return new t(this.x * e, this.y * n, this.z * a);\n        }, t.prototype.divide = function (e) {\n          return new t(this.x / e.x, this.y / e.y, this.z / e.z);\n        }, t.prototype.divideToRef = function (e, n) {\n          return n.copyFromFloats(this.x / e.x, this.y / e.y, this.z / e.z);\n        }, t.prototype.divideInPlace = function (e) {\n          return this.divideToRef(e, this);\n        }, t.prototype.minimizeInPlace = function (e) {\n          return this.minimizeInPlaceFromFloats(e.x, e.y, e.z);\n        }, t.prototype.maximizeInPlace = function (e) {\n          return this.maximizeInPlaceFromFloats(e.x, e.y, e.z);\n        }, t.prototype.minimizeInPlaceFromFloats = function (e, n, t) {\n          return e < this.x && (this.x = e), n < this.y && (this.y = n), t < this.z && (this.z = t), this;\n        }, t.prototype.maximizeInPlaceFromFloats = function (e, n, t) {\n          return e > this.x && (this.x = e), n > this.y && (this.y = n), t > this.z && (this.z = t), this;\n        }, t.prototype.floor = function () {\n          return new t(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\n        }, t.prototype.fract = function () {\n          return new t(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z));\n        }, t.prototype.length = function () {\n          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n        }, t.prototype.lengthSquared = function () {\n          return this.x * this.x + this.y * this.y + this.z * this.z;\n        }, t.prototype.normalize = function () {\n          return this.normalizeFromLength(this.length());\n        }, t.prototype.normalizeFromLength = function (e) {\n          return 0 === e || 1 === e ? this : this.scaleInPlace(1 / e);\n        }, t.prototype.normalizeToNew = function () {\n          var e = new t(0, 0, 0);\n          return this.normalizeToRef(e), e;\n        }, t.prototype.normalizeToRef = function (e) {\n          var n = this.length();\n          return 0 === n || 1 === n ? e.copyFromFloats(this.x, this.y, this.z) : this.scaleToRef(1 / n, e);\n        }, t.prototype.clone = function () {\n          return new t(this.x, this.y, this.z);\n        }, t.prototype.copyFrom = function (e) {\n          return this.copyFromFloats(e.x, e.y, e.z);\n        }, t.prototype.copyFromFloats = function (e, n, t) {\n          return this.x = e, this.y = n, this.z = t, this;\n        }, t.prototype.set = function (e, n, t) {\n          return this.copyFromFloats(e, n, t);\n        }, t.prototype.setAll = function (e) {\n          return this.x = this.y = this.z = e, this;\n        }, t;\n      }();\n\n      n.Vector3 = c;\n    }, function (t, a, r) {\n      \"use strict\";\n\n      var _o3,\n          d = this && this.__extends || (_o3 = function o(e, n) {\n        return (_o3 = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (e, n) {\n          e.__proto__ = n;\n        } || function (e, n) {\n          for (var t in n) {\n            n.hasOwnProperty(t) && (e[t] = n[t]);\n          }\n        })(e, n);\n      }, function (e, t) {\n        function n() {\n          this.constructor = e;\n        }\n\n        _o3(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());\n      }),\n          i = this && this.__assign || function () {\n        return (i = Object.assign || function (e) {\n          for (var n, t = 1, a = arguments.length; t < a; t++) {\n            for (var r in n = arguments[t]) {\n              Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n            }\n          }\n\n          return e;\n        }).apply(this, arguments);\n      },\n          c = this && this.__decorate || function (e, n, t, a) {\n        var r,\n            o = arguments.length,\n            d = o < 3 ? n : null === a ? a = Object.getOwnPropertyDescriptor(n, t) : a;\n        if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) d = Reflect.decorate(e, n, t, a);else for (var i = e.length - 1; i >= 0; i--) {\n          (r = e[i]) && (d = (o < 3 ? r(d) : o > 3 ? r(n, t, d) : r(n, t)) || d);\n        }\n        return o > 3 && d && Object.defineProperty(n, t, d), d;\n      };\n\n      Object.defineProperty(a, \"__esModule\", {\n        value: !0\n      });\n      var s,\n          l = r(0),\n          m = r(5),\n          p = r(26),\n          x = r(1),\n          k = r(16);\n      !function (e) {\n        e[e.TRANSFORM = 1] = \"TRANSFORM\", e[e.UUID_CALLBACK = 8] = \"UUID_CALLBACK\", e[e.BOX_SHAPE = 16] = \"BOX_SHAPE\", e[e.SPHERE_SHAPE = 17] = \"SPHERE_SHAPE\", e[e.PLANE_SHAPE = 18] = \"PLANE_SHAPE\", e[e.CONE_SHAPE = 19] = \"CONE_SHAPE\", e[e.CYLINDER_SHAPE = 20] = \"CYLINDER_SHAPE\", e[e.TEXT_SHAPE = 21] = \"TEXT_SHAPE\", e[e.NFT_SHAPE = 22] = \"NFT_SHAPE\", e[e.UI_WORLD_SPACE_SHAPE = 23] = \"UI_WORLD_SPACE_SHAPE\", e[e.UI_SCREEN_SPACE_SHAPE = 24] = \"UI_SCREEN_SPACE_SHAPE\", e[e.UI_CONTAINER_RECT = 25] = \"UI_CONTAINER_RECT\", e[e.UI_CONTAINER_STACK = 26] = \"UI_CONTAINER_STACK\", e[e.UI_TEXT_SHAPE = 27] = \"UI_TEXT_SHAPE\", e[e.UI_INPUT_TEXT_SHAPE = 28] = \"UI_INPUT_TEXT_SHAPE\", e[e.UI_IMAGE_SHAPE = 29] = \"UI_IMAGE_SHAPE\", e[e.UI_SLIDER_SHAPE = 30] = \"UI_SLIDER_SHAPE\", e[e.CIRCLE_SHAPE = 31] = \"CIRCLE_SHAPE\", e[e.BILLBOARD = 32] = \"BILLBOARD\", e[e.ANIMATION = 33] = \"ANIMATION\", e[e.FONT = 34] = \"FONT\", e[e.UI_FULLSCREEN_SHAPE = 40] = \"UI_FULLSCREEN_SHAPE\", e[e.UI_BUTTON_SHAPE = 41] = \"UI_BUTTON_SHAPE\", e[e.GLTF_SHAPE = 54] = \"GLTF_SHAPE\", e[e.OBJ_SHAPE = 55] = \"OBJ_SHAPE\", e[e.AVATAR_SHAPE = 56] = \"AVATAR_SHAPE\", e[e.BASIC_MATERIAL = 64] = \"BASIC_MATERIAL\", e[e.PBR_MATERIAL = 65] = \"PBR_MATERIAL\", e[e.HIGHLIGHT_ENTITY = 66] = \"HIGHLIGHT_ENTITY\", e[e.SOUND = 67] = \"SOUND\", e[e.TEXTURE = 68] = \"TEXTURE\", e[e.VIDEO_CLIP = 70] = \"VIDEO_CLIP\", e[e.VIDEO_TEXTURE = 71] = \"VIDEO_TEXTURE\", e[e.AUDIO_CLIP = 200] = \"AUDIO_CLIP\", e[e.AUDIO_SOURCE = 201] = \"AUDIO_SOURCE\", e[e.AUDIO_STREAM = 202] = \"AUDIO_STREAM\", e[e.GIZMOS = 203] = \"GIZMOS\", e[e.SMART_ITEM = 204] = \"SMART_ITEM\";\n      }(s = a.CLASS_ID || (a.CLASS_ID = {}));\n\n      var u = function (n) {\n        function e(e) {\n          void 0 === e && (e = {});\n          var t = n.call(this) || this;\n          return t.position = e.position || m.Vector3.Zero(), t.rotation = e.rotation || m.Quaternion.Identity, t.scale = e.scale || new m.Vector3(1, 1, 1), t;\n        }\n\n        return d(e, n), Object.defineProperty(e.prototype, \"eulerAngles\", {\n          get: function get() {\n            return this.rotation.eulerAngles;\n          },\n          enumerable: !0,\n          configurable: !0\n        }), e.prototype.lookAt = function (e, n) {\n          void 0 === n && (n = m.MathTmp.staticUp);\n          var t = new m.Matrix();\n          return m.Matrix.LookAtLHToRef(this.position, e, n, t), t.invert(), m.Quaternion.FromRotationMatrixToRef(t, this.rotation), this;\n        }, e.prototype.rotate = function (e, n) {\n          return this.rotation.multiplyInPlace(this.rotation.angleAxis(n, e)), this;\n        }, e.prototype.translate = function (e) {\n          return this.position.addInPlace(e), this;\n        }, c([l.ObservableComponent.field], e.prototype, \"position\", void 0), c([l.ObservableComponent.field], e.prototype, \"rotation\", void 0), c([l.ObservableComponent.field], e.prototype, \"scale\", void 0), e = c([l.Component(\"engine.transform\", s.TRANSFORM)], e);\n      }(l.ObservableComponent);\n\n      a.Transform = u;\n\n      var f = function (n) {\n        function e(e, t, a) {\n          void 0 === e && (e = !0), void 0 === t && (t = !0), void 0 === a && (a = !0);\n          var r = n.call(this) || this;\n          return r.x = !0, r.y = !0, r.z = !0, r.x = e, r.y = t, r.z = a, r;\n        }\n\n        return d(e, n), c([l.ObservableComponent.field], e.prototype, \"x\", void 0), c([l.ObservableComponent.field], e.prototype, \"y\", void 0), c([l.ObservableComponent.field], e.prototype, \"z\", void 0), e = c([l.Component(\"engine.billboard\", s.BILLBOARD)], e);\n      }(l.ObservableComponent);\n\n      a.Billboard = f;\n\n      var T = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.withCollisions = !0, e.isPointerBlocker = !0, e.visible = !0, e;\n        }\n\n        return d(e, n), c([l.ObservableComponent.field], e.prototype, \"withCollisions\", void 0), c([l.ObservableComponent.field], e.prototype, \"isPointerBlocker\", void 0), c([l.ObservableComponent.field], e.prototype, \"visible\", void 0), e;\n      }(l.ObservableComponent);\n\n      a.Shape = T;\n\n      var C = function (n) {\n        function e() {\n          return null !== n && n.apply(this, arguments) || this;\n        }\n\n        return d(e, n), e = c([l.DisposableComponent(\"engine.shape\", s.BOX_SHAPE)], e);\n      }(T);\n\n      a.BoxShape = C;\n\n      var R = function (n) {\n        function e() {\n          return null !== n && n.apply(this, arguments) || this;\n        }\n\n        return d(e, n), e = c([l.DisposableComponent(\"engine.shape\", s.SPHERE_SHAPE)], e);\n      }(T);\n\n      a.SphereShape = R;\n\n      var y = function (n) {\n        function e() {\n          return null !== n && n.apply(this, arguments) || this;\n        }\n\n        return d(e, n), c([l.ObservableComponent.field], e.prototype, \"segments\", void 0), c([l.ObservableComponent.field], e.prototype, \"arc\", void 0), e = c([l.DisposableComponent(\"engine.shape\", s.CIRCLE_SHAPE)], e);\n      }(T);\n\n      a.CircleShape = y;\n\n      var h = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.width = 1, e.height = 1, e;\n        }\n\n        return d(e, n), c([l.ObservableComponent.field], e.prototype, \"width\", void 0), c([l.ObservableComponent.field], e.prototype, \"height\", void 0), c([l.ObservableComponent.field], e.prototype, \"uvs\", void 0), e = c([l.DisposableComponent(\"engine.shape\", s.PLANE_SHAPE)], e);\n      }(T);\n\n      a.PlaneShape = h;\n\n      var g = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.radiusTop = 0, e.radiusBottom = 1, e.segmentsHeight = 1, e.segmentsRadial = 36, e.openEnded = !1, e.radius = null, e.arc = 360, e;\n        }\n\n        return d(e, n), c([l.ObservableComponent.field], e.prototype, \"radiusTop\", void 0), c([l.ObservableComponent.field], e.prototype, \"radiusBottom\", void 0), c([l.ObservableComponent.field], e.prototype, \"segmentsHeight\", void 0), c([l.ObservableComponent.field], e.prototype, \"segmentsRadial\", void 0), c([l.ObservableComponent.field], e.prototype, \"openEnded\", void 0), c([l.ObservableComponent.field], e.prototype, \"radius\", void 0), c([l.ObservableComponent.field], e.prototype, \"arc\", void 0), e = c([l.DisposableComponent(\"engine.shape\", s.CONE_SHAPE)], e);\n      }(T);\n\n      a.ConeShape = g;\n\n      var I = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.radiusTop = 0, e.radiusBottom = 1, e.segmentsHeight = 1, e.segmentsRadial = 36, e.openEnded = !1, e.radius = null, e.arc = 360, e;\n        }\n\n        return d(e, n), c([l.ObservableComponent.field], e.prototype, \"radiusTop\", void 0), c([l.ObservableComponent.field], e.prototype, \"radiusBottom\", void 0), c([l.ObservableComponent.field], e.prototype, \"segmentsHeight\", void 0), c([l.ObservableComponent.field], e.prototype, \"segmentsRadial\", void 0), c([l.ObservableComponent.field], e.prototype, \"openEnded\", void 0), c([l.ObservableComponent.field], e.prototype, \"radius\", void 0), c([l.ObservableComponent.field], e.prototype, \"arc\", void 0), e = c([l.DisposableComponent(\"engine.shape\", s.CYLINDER_SHAPE)], e);\n      }(T);\n\n      a.CylinderShape = I;\n\n      var b,\n          v = function (n) {\n        function e(e) {\n          var t = n.call(this) || this;\n          return t.src = e, t;\n        }\n\n        return d(e, n), c([T.readonly], e.prototype, \"src\", void 0), e = c([l.DisposableComponent(\"engine.shape\", s.GLTF_SHAPE)], e);\n      }(T);\n\n      a.GLTFShape = v, function (e) {\n        e[e.Classic = 0] = \"Classic\", e[e.Baroque_Ornament = 1] = \"Baroque_Ornament\", e[e.Diamond_Ornament = 2] = \"Diamond_Ornament\", e[e.Minimal_Wide = 3] = \"Minimal_Wide\", e[e.Minimal_Grey = 4] = \"Minimal_Grey\", e[e.Blocky = 5] = \"Blocky\", e[e.Gold_Edges = 6] = \"Gold_Edges\", e[e.Gold_Carved = 7] = \"Gold_Carved\", e[e.Gold_Wide = 8] = \"Gold_Wide\", e[e.Gold_Rounded = 9] = \"Gold_Rounded\", e[e.Metal_Medium = 10] = \"Metal_Medium\", e[e.Metal_Wide = 11] = \"Metal_Wide\", e[e.Metal_Slim = 12] = \"Metal_Slim\", e[e.Metal_Rounded = 13] = \"Metal_Rounded\", e[e.Pins = 14] = \"Pins\", e[e.Minimal_Black = 15] = \"Minimal_Black\", e[e.Minimal_White = 16] = \"Minimal_White\", e[e.Tape = 17] = \"Tape\", e[e.Wood_Slim = 18] = \"Wood_Slim\", e[e.Wood_Wide = 19] = \"Wood_Wide\", e[e.Wood_Twigs = 20] = \"Wood_Twigs\", e[e.Canvas = 21] = \"Canvas\";\n      }(b = a.PictureFrameStyle || (a.PictureFrameStyle = {}));\n\n      var P = function (n) {\n        function e(e, t) {\n          void 0 === t && (t = {});\n          var a = n.call(this) || this;\n          a.src = e;\n          var r = new m.Color3(.6404918, .611472, .8584906),\n              o = b.Classic;\n          return t instanceof m.Color3 ? r = t : null != t && (t.color && (r = t.color), t.style && (o = t.style)), a.color = r, a.style = o, a;\n        }\n\n        return d(e, n), c([T.readonly], e.prototype, \"src\", void 0), c([T.readonly], e.prototype, \"style\", void 0), c([l.ObservableComponent.field], e.prototype, \"color\", void 0), e = c([l.DisposableComponent(\"engine.shape\", s.NFT_SHAPE)], e);\n      }(T);\n\n      a.NFTShape = P;\n\n      var S = function (n) {\n        function e(e, t) {\n          var a = n.call(this) || this;\n          if (a.src = e, t) for (var r in t) {\n            a[r] = t[r];\n          }\n          return a;\n        }\n\n        return d(e, n), c([l.ObservableComponent.readonly], e.prototype, \"src\", void 0), c([l.ObservableComponent.readonly], e.prototype, \"samplingMode\", void 0), c([l.ObservableComponent.readonly], e.prototype, \"wrap\", void 0), c([l.ObservableComponent.readonly], e.prototype, \"hasAlpha\", void 0), e = c([l.DisposableComponent(\"engine.texture\", s.TEXTURE)], e);\n      }(l.ObservableComponent);\n\n      a.Texture = S;\n\n      var w = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.states = [], e;\n        }\n\n        return d(e, n), e.prototype.addClip = function (e) {\n          var n = this;\n          return this.states.push(e), e.onChange(function () {\n            n.dirty = !0;\n          }), this;\n        }, e.prototype.getClip = function (e) {\n          for (var n = 0; n < this.states.length; n++) {\n            var t = this.states[n];\n            if (t.clip === e) return t;\n          }\n\n          var a = new p.AnimationState(e);\n          return this.addClip(a), a;\n        }, c([l.ObservableComponent.readonly], e.prototype, \"states\", void 0), e = c([l.Component(\"engine.animator\", s.ANIMATION)], e);\n      }(T);\n\n      a.Animator = w;\n\n      var V = function (n) {\n        function e(e) {\n          var t = n.call(this) || this;\n          return t.src = e, t;\n        }\n\n        return d(e, n), c([l.ObservableComponent.readonly], e.prototype, \"src\", void 0), e = c([l.DisposableComponent(\"engine.shape\", s.OBJ_SHAPE)], e);\n      }(T);\n\n      a.OBJShape = V;\n\n      var M = function (n) {\n        function e(e) {\n          void 0 === e && (e = \"\");\n          var t = n.call(this) || this;\n          return t.src = e, t;\n        }\n\n        return d(e, n), c([l.ObservableComponent.readonly], e.prototype, \"src\", void 0), e = c([l.DisposableComponent(\"engine.font\", s.FONT)], e);\n      }(l.ObservableComponent);\n\n      a.Font = M, function (e) {\n        e.SanFrancisco = \"builtin:SF-UI-Text-Regular SDF\", e.SanFrancisco_Heavy = \"builtin:SF-UI-Text-Heavy SDF\", e.SanFrancisco_Semibold = \"builtin:SF-UI-Text-Semibold SDF\", e.LiberationSans = \"builtin:LiberationSans SDF\";\n      }(a.Fonts || (a.Fonts = {}));\n\n      var N,\n          O = function (n) {\n        function e(e) {\n          var t = n.call(this) || this;\n          return t.outlineWidth = 0, t.outlineColor = new m.Color3(1, 1, 1), t.color = new m.Color3(1, 1, 1), t.fontSize = 10, t.fontWeight = \"normal\", t.opacity = 1, t.value = \"\", t.lineSpacing = \"0px\", t.lineCount = 0, t.resizeToFit = !1, t.textWrapping = !1, t.shadowBlur = 0, t.shadowOffsetX = 0, t.shadowOffsetY = 0, t.shadowColor = new m.Color3(1, 1, 1), t.zIndex = 0, t.hTextAlign = \"center\", t.vTextAlign = \"center\", t.width = 1, t.height = 1, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0, t.paddingLeft = 0, t.isPickable = !1, t.billboard = !1, e && (t.value = e), t;\n        }\n\n        return d(e, n), c([l.ObservableComponent.field], e.prototype, \"outlineWidth\", void 0), c([l.ObservableComponent.field], e.prototype, \"outlineColor\", void 0), c([l.ObservableComponent.field], e.prototype, \"color\", void 0), c([l.ObservableComponent.field], e.prototype, \"fontSize\", void 0), c([l.ObservableComponent.field], e.prototype, \"fontWeight\", void 0), c([l.ObservableComponent.component], e.prototype, \"font\", void 0), c([l.ObservableComponent.field], e.prototype, \"opacity\", void 0), c([l.ObservableComponent.field], e.prototype, \"value\", void 0), c([l.ObservableComponent.field], e.prototype, \"lineSpacing\", void 0), c([l.ObservableComponent.field], e.prototype, \"lineCount\", void 0), c([l.ObservableComponent.field], e.prototype, \"resizeToFit\", void 0), c([l.ObservableComponent.field], e.prototype, \"textWrapping\", void 0), c([l.ObservableComponent.field], e.prototype, \"shadowBlur\", void 0), c([l.ObservableComponent.field], e.prototype, \"shadowOffsetX\", void 0), c([l.ObservableComponent.field], e.prototype, \"shadowOffsetY\", void 0), c([l.ObservableComponent.field], e.prototype, \"shadowColor\", void 0), c([l.ObservableComponent.field], e.prototype, \"zIndex\", void 0), c([l.ObservableComponent.field], e.prototype, \"hTextAlign\", void 0), c([l.ObservableComponent.field], e.prototype, \"vTextAlign\", void 0), c([l.ObservableComponent.field], e.prototype, \"width\", void 0), c([l.ObservableComponent.field], e.prototype, \"height\", void 0), c([l.ObservableComponent.field], e.prototype, \"paddingTop\", void 0), c([l.ObservableComponent.field], e.prototype, \"paddingRight\", void 0), c([l.ObservableComponent.field], e.prototype, \"paddingBottom\", void 0), c([l.ObservableComponent.field], e.prototype, \"paddingLeft\", void 0), c([l.ObservableComponent.field], e.prototype, \"isPickable\", void 0), c([l.ObservableComponent.field], e.prototype, \"billboard\", void 0), e = c([l.Component(\"engine.text\", s.TEXT_SHAPE)], e);\n      }(T);\n\n      a.TextShape = O, function (e) {\n        e[e.OPAQUE = 0] = \"OPAQUE\", e[e.ALPHA_TEST = 1] = \"ALPHA_TEST\", e[e.ALPHA_BLEND = 2] = \"ALPHA_BLEND\", e[e.ALPHA_TEST_AND_BLEND = 3] = \"ALPHA_TEST_AND_BLEND\", e[e.AUTO = 4] = \"AUTO\";\n      }(N = a.TransparencyMode || (a.TransparencyMode = {}));\n\n      var E = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.alphaTest = .5, e.transparencyMode = N.AUTO, e;\n        }\n\n        return d(e, n), c([l.ObservableComponent.field], e.prototype, \"alphaTest\", void 0), c([l.ObservableComponent.field], e.prototype, \"albedoColor\", void 0), c([l.ObservableComponent.field], e.prototype, \"emissiveColor\", void 0), c([l.ObservableComponent.field], e.prototype, \"metallic\", void 0), c([l.ObservableComponent.field], e.prototype, \"roughness\", void 0), c([l.ObservableComponent.field], e.prototype, \"ambientColor\", void 0), c([l.ObservableComponent.field], e.prototype, \"reflectionColor\", void 0), c([l.ObservableComponent.field], e.prototype, \"reflectivityColor\", void 0), c([l.ObservableComponent.field], e.prototype, \"directIntensity\", void 0), c([l.ObservableComponent.field], e.prototype, \"microSurface\", void 0), c([l.ObservableComponent.field], e.prototype, \"emissiveIntensity\", void 0), c([l.ObservableComponent.field], e.prototype, \"environmentIntensity\", void 0), c([l.ObservableComponent.field], e.prototype, \"specularIntensity\", void 0), c([l.ObservableComponent.component], e.prototype, \"albedoTexture\", void 0), c([l.ObservableComponent.component], e.prototype, \"alphaTexture\", void 0), c([l.ObservableComponent.component], e.prototype, \"emissiveTexture\", void 0), c([l.ObservableComponent.component], e.prototype, \"bumpTexture\", void 0), c([l.ObservableComponent.component], e.prototype, \"refractionTexture\", void 0), c([l.ObservableComponent.field], e.prototype, \"disableLighting\", void 0), c([l.ObservableComponent.field], e.prototype, \"transparencyMode\", void 0), e = c([l.DisposableComponent(\"engine.material\", s.PBR_MATERIAL)], e);\n      }(l.ObservableComponent);\n\n      a.Material = E;\n\n      var A = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.alphaTest = .5, e;\n        }\n\n        return d(e, n), c([l.ObservableComponent.component], e.prototype, \"texture\", void 0), c([l.ObservableComponent.field], e.prototype, \"alphaTest\", void 0), e = c([l.DisposableComponent(\"engine.material\", s.BASIC_MATERIAL)], e);\n      }(l.ObservableComponent);\n\n      a.BasicMaterial = A;\n\n      var z = function (n) {\n        function e(e) {\n          var t = n.call(this) || this;\n          if (t.uuid = x.newId(\"UUID\"), !e || !(\"apply\" in e) || !(\"call\" in e)) throw new Error(\"Callback is not a function\");\n          return t.callback = e, t;\n        }\n\n        return d(e, n), e.uuidEvent = function (n, t) {\n          if (delete n[t]) {\n            var a = t + \"_\" + Math.random();\n            n[a] = void 0, Object.defineProperty(n, a, i(i({}, Object.getOwnPropertyDescriptor(n, a)), {\n              enumerable: !1\n            })), Object.defineProperty(n, t.toString(), {\n              get: function get() {\n                return this[a];\n              },\n              set: function set(n) {\n                var r = this[a];\n\n                if (n) {\n                  if (!(n instanceof e)) throw new Error(\"value is not an OnUUIDEvent\");\n                  this.data[t] = n.uuid;\n                } else this.data[t] = null;\n\n                if (this[a] = n, n !== r) {\n                  this.dirty = !0;\n\n                  for (var o = 0; o < this.subscriptions.length; o++) {\n                    this.subscriptions[o](t, n, r);\n                  }\n                }\n              },\n              enumerable: !0\n            });\n          }\n        }, e.prototype.toJSON = function () {\n          return {\n            uuid: this.uuid,\n            type: this.type\n          };\n        }, c([l.ObservableComponent.field], e.prototype, \"callback\", void 0), e;\n      }(l.ObservableComponent);\n\n      a.OnUUIDEvent = z;\n\n      var _ = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.button = k.ActionButton.ANY, e.hoverText = \"Interact\", e.distance = 10, e.showFeedback = !0, e;\n        }\n\n        return d(e, n), e.prototype.toJSON = function () {\n          return {\n            uuid: this.uuid,\n            type: this.type,\n            button: this.button,\n            hoverText: this.hoverText,\n            distance: this.distance,\n            showFeedback: this.showFeedback\n          };\n        }, c([l.ObservableComponent.field], e.prototype, \"button\", void 0), c([l.ObservableComponent.field], e.prototype, \"hoverText\", void 0), c([l.ObservableComponent.field], e.prototype, \"distance\", void 0), c([l.ObservableComponent.field], e.prototype, \"showFeedback\", void 0), e;\n      }(z);\n\n      a.OnPointerUUIDEvent = _;\n\n      var F = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.type = \"onPointerLock\", e;\n        }\n\n        return d(e, n), c([l.ObservableComponent.readonly], e.prototype, \"type\", void 0), e = c([l.Component(\"engine.onPointerLock\", s.UUID_CALLBACK)], e);\n      }(z);\n\n      a.OnPointerLock = F;\n\n      var D = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.type = \"onAnimationEnd\", e;\n        }\n\n        return d(e, n), c([l.ObservableComponent.readonly], e.prototype, \"type\", void 0), e = c([l.Component(\"engine.onAnimationEnd\", s.UUID_CALLBACK)], e);\n      }(z);\n\n      a.OnAnimationEnd = D;\n\n      var U = function (n) {\n        function e() {\n          return null !== n && n.apply(this, arguments) || this;\n        }\n\n        return d(e, n), e = c([l.Component(\"engine.smartItem\", s.SMART_ITEM)], e);\n      }(l.ObservableComponent);\n\n      a.SmartItem = U;\n\n      var L = function (n) {\n        function e(e) {\n          var t = n.call(this) || this;\n          return t.url = e, t;\n        }\n\n        return d(e, n), c([l.ObservableComponent.readonly], e.prototype, \"url\", void 0), e = c([l.DisposableComponent(\"engine.VideoClip\", s.VIDEO_CLIP)], e);\n      }(l.ObservableComponent);\n\n      a.VideoClip = L;\n\n      var B = function (n) {\n        function e(e, t) {\n          var a = n.call(this) || this;\n          if (a.volume = 1, a.playbackRate = 1, a.loop = !1, a.seek = -1, a.playing = !1, !(e instanceof L)) throw new Error(\"Trying to create VideoTexture(VideoClip) with an invalid VideoClip\");\n          if (a.videoClipId = l.getComponentId(e), t) for (var r in t) {\n            a[r] = t[r];\n          }\n          return a;\n        }\n\n        return d(e, n), e.prototype.play = function () {\n          this.playing = !0;\n        }, e.prototype.pause = function () {\n          this.playing = !1;\n        }, e.prototype.reset = function () {\n          this.seekTime(0);\n        }, e.prototype.seekTime = function (e) {\n          this.seek = e, this.dirty = !0, this.data.nonce = Math.random();\n        }, e.prototype.toJSON = function () {\n          if (this.seek < 0) return n.prototype.toJSON.call(this);\n          var e = JSON.parse(JSON.stringify(n.prototype.toJSON.call(this)));\n          return this.seek = -1, e;\n        }, c([l.ObservableComponent.readonly], e.prototype, \"videoClipId\", void 0), c([l.ObservableComponent.readonly], e.prototype, \"samplingMode\", void 0), c([l.ObservableComponent.readonly], e.prototype, \"wrap\", void 0), c([l.ObservableComponent.field], e.prototype, \"volume\", void 0), c([l.ObservableComponent.field], e.prototype, \"playbackRate\", void 0), c([l.ObservableComponent.field], e.prototype, \"loop\", void 0), c([l.ObservableComponent.field], e.prototype, \"seek\", void 0), c([l.ObservableComponent.field], e.prototype, \"playing\", void 0), e = c([l.DisposableComponent(\"engine.VideoTexture\", s.VIDEO_TEXTURE)], e);\n      }(l.ObservableComponent);\n\n      a.VideoTexture = B;\n    }, function (e, n, t) {\n      \"use strict\";\n\n      function o(e) {\n        for (var t in e) {\n          n.hasOwnProperty(t) || (n[t] = e[t]);\n        }\n      }\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      }), o(t(2)), o(t(9)), o(t(22)), o(t(23)), o(t(36)), o(t(37)), o(t(38)), o(t(24)), o(t(39)), o(t(40)), o(t(11)), o(t(41)), o(t(42)), o(t(25)), o(t(10)), o(t(6)), o(t(43)), o(t(15)), o(t(3)), o(t(21)), o(t(5));\n    }, function (e, n, t) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var a = function () {\n        function t() {}\n\n        return t.WithinEpsilon = function (e, n, t) {\n          void 0 === t && (t = 1.401298e-45);\n          var a = e - n;\n          return -t <= a && a <= t;\n        }, t.ToHex = function (e) {\n          var n = e.toString(16);\n          return e <= 15 ? (\"0\" + n).toUpperCase() : n.toUpperCase();\n        }, t.Sign = function (e) {\n          var n = +e;\n          return 0 === n || isNaN(n) ? n : n > 0 ? 1 : -1;\n        }, t.Clamp = function (e, n, t) {\n          return void 0 === n && (n = 0), void 0 === t && (t = 1), Math.min(t, Math.max(n, e));\n        }, t.Log2 = function (e) {\n          return Math.log(e) * Math.LOG2E;\n        }, t.Repeat = function (e, n) {\n          return e - Math.floor(e / n) * n;\n        }, t.Normalize = function (e, n, t) {\n          return (e - n) / (t - n);\n        }, t.Denormalize = function (e, n, t) {\n          return e * (t - n) + n;\n        }, t.DeltaAngle = function (e, n) {\n          var a = t.Repeat(n - e, 360);\n          return a > 180 && (a -= 360), a;\n        }, t.PingPong = function (e, n) {\n          var a = t.Repeat(e, 2 * n);\n          return n - Math.abs(a - n);\n        }, t.SmoothStep = function (e, n, a) {\n          var r = t.Clamp(a);\n          return n * (r = -2 * r * r * r + 3 * r * r) + e * (1 - r);\n        }, t.MoveTowards = function (e, n, a) {\n          return Math.abs(n - e) <= a ? n : e + t.Sign(n - e) * a;\n        }, t.MoveTowardsAngle = function (e, n, a) {\n          var r = t.DeltaAngle(e, n);\n          return -a < r && r < a ? n : t.MoveTowards(e, e + r, a);\n        }, t.Lerp = function (e, n, t) {\n          return e + (n - e) * t;\n        }, t.LerpAngle = function (e, n, a) {\n          var r = t.Repeat(n - e, 360);\n          return r > 180 && (r -= 360), e + r * t.Clamp(a);\n        }, t.InverseLerp = function (e, n, a) {\n          return e !== n ? t.Clamp((a - e) / (n - e)) : 0;\n        }, t.Hermite = function (e, n, t, a, r) {\n          var o = r * r,\n              d = r * o;\n          return e * (2 * d - 3 * o + 1) + t * (-2 * d + 3 * o) + n * (d - 2 * o + r) + a * (d - o);\n        }, t.RandomRange = function (e, n) {\n          return e === n ? e : Math.random() * (n - e) + e;\n        }, t.RangeToPercent = function (e, n, t) {\n          return (e - n) / (t - n);\n        }, t.PercentToRange = function (e, n, t) {\n          return (t - n) * e + n;\n        }, t.NormalizeRadians = function (e) {\n          return e - t.TwoPi * Math.floor((e + Math.PI) / t.TwoPi);\n        }, t.TwoPi = 2 * Math.PI, t;\n      }();\n\n      n.Scalar = a;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      var r = this && this.__decorate || function (e, n, t, a) {\n        var r,\n            o = arguments.length,\n            d = o < 3 ? n : null === a ? a = Object.getOwnPropertyDescriptor(n, t) : a;\n        if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) d = Reflect.decorate(e, n, t, a);else for (var i = e.length - 1; i >= 0; i--) {\n          (r = e[i]) && (d = (o < 3 ? r(d) : o > 3 ? r(n, t, d) : r(n, t)) || d);\n        }\n        return o > 3 && d && Object.defineProperty(n, t, d), d;\n      };\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var o = a(8),\n          d = function () {\n        function t(e, n, t) {\n          this.entity = e, this.componentName = n, this.component = t;\n        }\n\n        return t = r([o.EventConstructor()], t);\n      }();\n\n      n.ComponentRemoved = d;\n\n      var i = function () {\n        function t(e, n, t) {\n          this.entity = e, this.componentName = n, this.classId = t;\n        }\n\n        return t = r([o.EventConstructor()], t);\n      }();\n\n      n.ComponentAdded = i;\n\n      var c = function () {\n        function t(e, n) {\n          this.entity = e, this.parent = n;\n        }\n\n        return t = r([o.EventConstructor()], t);\n      }();\n\n      n.ParentChanged = c;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n      var r = a(1),\n          o = [];\n\n      function i(e) {\n        if (!(\"__event_name__\" in e) || \"string\" != typeof e.__event_name__) throw new Error(\"The EventConstructor is not registered\");\n        return e.__event_name__;\n      }\n\n      var d = function () {\n        function t() {\n          this.listeners = {};\n        }\n\n        return t.prototype.addListener = function (e, n, t) {\n          if (!e || \"function\" != typeof e) throw new Error(\"Invalid EventConstructor\");\n          var a = i(e),\n              r = this.listeners[a];\n          r || (r = this.listeners[a] = []);\n\n          for (var o = 0; o < r.length; o++) {\n            if (r[o].listener === n) throw new Error(\"The provided listener is already registered\");\n          }\n\n          return r.push({\n            listener: n,\n            fn: t\n          }), this;\n        }, t.prototype.removeListener = function (e, n) {\n          if (!n || \"function\" != typeof n) throw new Error(\"Invalid EventConstructor\");\n          var t = i(n),\n              a = this.listeners[t];\n          if (!a) return !1;\n\n          for (var r = 0; r < a.length; r++) {\n            if (a[r].listener === e) return a.splice(r, 1), !0;\n          }\n\n          return !1;\n        }, t.prototype.fireEvent = function (e) {\n          var n = i(e.constructor),\n              t = this.listeners[n];\n          if (t) for (var a = 0; a < t.length; a++) {\n            try {\n              var o = t[a];\n              o.fn.call(o.listener, e);\n            } catch (e) {\n              r.error(e);\n            }\n          }\n          return this;\n        }, t;\n      }();\n\n      n.EventManager = d, n.EventConstructor = function () {\n        var e = r.newId(\"EV\");\n        if (-1 !== o.indexOf(e)) throw new Error(\"The event name \" + e + \" is already taken\");\n        return o.push(e), function (n) {\n          return n.__event_name__ = e, n;\n        };\n      };\n    }, function (e, n, t) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n      var a = t(1),\n          r = t(3),\n          o = t(10),\n          d = t(11);\n      n.MathTmp = {\n        Vector3: a.buildArray(6, r.Vector3.Zero),\n        Matrix: a.buildArray(2, d.Matrix.Identity),\n        Quaternion: a.buildArray(3, o.Quaternion.Zero),\n        staticUp: r.Vector3.Up(),\n        tmpMatrix: d.Matrix.Zero()\n      };\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(11),\n          o = a(3),\n          d = a(9),\n          i = a(2),\n          c = function () {\n        function t(e, n, t, a) {\n          void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === t && (t = 0), void 0 === a && (a = 1), this.x = e, this.y = n, this.z = t, this.w = a;\n        }\n\n        return t.FromRotationMatrix = function (e) {\n          var n = new t();\n          return t.FromRotationMatrixToRef(e, n), n;\n        }, t.FromRotationMatrixToRef = function (e, n) {\n          var t,\n              a = e.m,\n              r = a[0],\n              o = a[4],\n              d = a[8],\n              i = a[1],\n              c = a[5],\n              s = a[9],\n              l = a[2],\n              m = a[6],\n              p = a[10],\n              x = r + c + p;\n          x > 0 ? (t = .5 / Math.sqrt(x + 1), n.w = .25 / t, n.x = (m - s) * t, n.y = (d - l) * t, n.z = (i - o) * t) : r > c && r > p ? (t = 2 * Math.sqrt(1 + r - c - p), n.w = (m - s) / t, n.x = .25 * t, n.y = (o + i) / t, n.z = (d + l) / t) : c > p ? (t = 2 * Math.sqrt(1 + c - r - p), n.w = (d - l) / t, n.x = (o + i) / t, n.y = .25 * t, n.z = (s + m) / t) : (t = 2 * Math.sqrt(1 + p - r - c), n.w = (i - o) / t, n.x = (d + l) / t, n.y = (s + m) / t, n.z = .25 * t);\n        }, t.Dot = function (e, n) {\n          return e.x * n.x + e.y * n.y + e.z * n.z + e.w * n.w;\n        }, t.AreClose = function (e, n) {\n          return t.Dot(e, n) >= 0;\n        }, t.Zero = function () {\n          return new t(0, 0, 0, 0);\n        }, t.Inverse = function (e) {\n          return new t(-e.x, -e.y, -e.z, e.w);\n        }, t.IsIdentity = function (e) {\n          return e && 0 === e.x && 0 === e.y && 0 === e.z && 1 === e.w;\n        }, t.RotationAxis = function (e, n) {\n          var a = n * i.DEG2RAD;\n          return t.RotationAxisToRef(e, a, new t());\n        }, t.RotationAxisToRef = function (e, n, t) {\n          var a = n * i.DEG2RAD,\n              r = Math.sin(a / 2);\n          return e.normalize(), t.w = Math.cos(a / 2), t.x = e.x * r, t.y = e.y * r, t.z = e.z * r, t;\n        }, t.FromArray = function (e, n) {\n          return void 0 === n && (n = 0), new t(e[n], e[n + 1], e[n + 2], e[n + 3]);\n        }, t.FromEulerAnglesRef = function (e, n, a, r) {\n          return t.RotationYawPitchRollToRef(n * i.DEG2RAD, e * i.DEG2RAD, a * i.DEG2RAD, r);\n        }, t.RotationYawPitchRoll = function (e, n, a) {\n          var r = new t();\n          return t.RotationYawPitchRollToRef(e, n, a, r), r;\n        }, t.RotationYawPitchRollToRef = function (e, n, t, a) {\n          var r = .5 * t,\n              o = .5 * n,\n              d = .5 * e,\n              i = Math.cos(o),\n              c = Math.cos(d),\n              s = Math.cos(r),\n              l = Math.sin(o),\n              m = Math.sin(d),\n              p = Math.sin(r);\n          a.x = l * c * s + i * m * p, a.y = i * m * s - l * c * p, a.z = i * c * p + l * m * s, a.w = i * c * s - l * m * p;\n        }, t.RotationAlphaBetaGamma = function (e, n, a) {\n          var r = new t();\n          return t.RotationAlphaBetaGammaToRef(e, n, a, r), r;\n        }, t.RotationAlphaBetaGammaToRef = function (e, n, t, a) {\n          var r = .5 * (t + e),\n              o = .5 * (t - e),\n              d = .5 * n;\n          a.x = Math.cos(o) * Math.sin(d), a.y = Math.sin(o) * Math.sin(d), a.z = Math.sin(r) * Math.cos(d), a.w = Math.cos(r) * Math.cos(d);\n        }, t.RotationQuaternionFromAxis = function (e, n, a) {\n          var r = new t(0, 0, 0, 0);\n          return t.RotationQuaternionFromAxisToRef(e, n, a, r), r;\n        }, t.RotationQuaternionFromAxisToRef = function (e, n, a, o) {\n          var i = d.MathTmp.Matrix[0];\n          r.Matrix.FromXYZAxesToRef(e.normalize(), n.normalize(), a.normalize(), i), t.FromRotationMatrixToRef(i, o);\n        }, t.Slerp = function (e, n, a) {\n          var r = t.Identity;\n          return t.SlerpToRef(e, n, a, r), r;\n        }, t.SlerpToRef = function (e, n, t, a) {\n          var r,\n              o,\n              d = e.x * n.x + e.y * n.y + e.z * n.z + e.w * n.w,\n              i = !1;\n          if (d < 0 && (i = !0, d = -d), d > .999999) o = 1 - t, r = i ? -t : t;else {\n            var c = Math.acos(d),\n                s = 1 / Math.sin(c);\n            o = Math.sin((1 - t) * c) * s, r = i ? -Math.sin(t * c) * s : Math.sin(t * c) * s;\n          }\n          a.x = o * e.x + r * n.x, a.y = o * e.y + r * n.y, a.z = o * e.z + r * n.z, a.w = o * e.w + r * n.w;\n        }, t.Hermite = function (e, n, a, r, o) {\n          var d = o * o,\n              i = o * d,\n              c = 2 * i - 3 * d + 1,\n              s = -2 * i + 3 * d,\n              l = i - 2 * d + o,\n              m = i - d;\n          return new t(e.x * c + a.x * s + n.x * l + r.x * m, e.y * c + a.y * s + n.y * l + r.y * m, e.z * c + a.z * s + n.z * l + r.z * m, e.w * c + a.w * s + n.w * l + r.w * m);\n        }, Object.defineProperty(t, \"Identity\", {\n          get: function get() {\n            return new t(0, 0, 0, 1);\n          },\n          enumerable: !0,\n          configurable: !0\n        }), t.Angle = function (e, n) {\n          var a = t.Dot(e, n);\n          return 2 * Math.acos(Math.min(Math.abs(a), 1)) * i.RAD2DEG;\n        }, t.Euler = function (e, n, a) {\n          return t.RotationYawPitchRoll(n * i.DEG2RAD, e * i.DEG2RAD, a * i.DEG2RAD);\n        }, t.LookRotation = function (e, n) {\n          void 0 === n && (n = d.MathTmp.staticUp);\n          var a = o.Vector3.Normalize(e),\n              r = o.Vector3.Normalize(o.Vector3.Cross(n, a)),\n              i = o.Vector3.Cross(a, r),\n              c = r.x,\n              s = r.y,\n              l = r.z,\n              m = i.x,\n              p = i.y,\n              x = i.z,\n              k = a.x,\n              u = a.y,\n              f = a.z,\n              T = c + p + f,\n              C = new t();\n\n          if (T > 0) {\n            var R = Math.sqrt(T + 1);\n            return C.w = .5 * R, R = .5 / R, C.x = (x - u) * R, C.y = (k - l) * R, C.z = (s - m) * R, C;\n          }\n\n          if (c >= p && c >= f) {\n            var y = Math.sqrt(1 + c - p - f),\n                h = .5 / y;\n            return C.x = .5 * y, C.y = (s + m) * h, C.z = (l + k) * h, C.w = (x - u) * h, C;\n          }\n\n          if (p > f) {\n            var g = Math.sqrt(1 + p - c - f),\n                I = .5 / g;\n            return C.x = (m + s) * I, C.y = .5 * g, C.z = (u + x) * I, C.w = (k - l) * I, C;\n          }\n\n          var b = Math.sqrt(1 + f - c - p),\n              v = .5 / b;\n          return C.x = (k + l) * v, C.y = (u + x) * v, C.z = .5 * b, C.w = (s - m) * v, C;\n        }, t.RotateTowards = function (e, n, a) {\n          var r = t.Angle(e, n);\n          if (0 === r) return n;\n          var o = Math.min(1, a / r);\n          return t.Slerp(e, n, o);\n        }, t.FromToRotation = function (e, n) {\n          var a = new t(),\n              r = e.normalize(),\n              d = n.normalize(),\n              c = o.Vector3.Dot(r, d);\n\n          if (c > -1 + i.Epsilon) {\n            var s = Math.sqrt(2 * (1 + c)),\n                l = 1 / s,\n                m = o.Vector3.Cross(r, d).scaleInPlace(l);\n            a.set(m.x, m.y, m.z, .5 * s);\n          } else {\n            if (c > 1 - i.Epsilon) return new t(0, 0, 0, 1);\n            var p = o.Vector3.Cross(o.Vector3.Right(), r);\n            p.lengthSquared() < i.Epsilon && (p = o.Vector3.Cross(o.Vector3.Forward(), r)), a.set(p.x, p.y, p.z, 0);\n          }\n\n          return a.normalize();\n        }, Object.defineProperty(t.prototype, \"normalized\", {\n          get: function get() {\n            return this.normalize();\n          },\n          enumerable: !0,\n          configurable: !0\n        }), t.prototype.setFromToRotation = function (e, n, a) {\n          void 0 === a && (a = d.MathTmp.staticUp), d.MathTmp.tmpMatrix = r.Matrix.Zero(), r.Matrix.LookAtLHToRef(e, n, a, d.MathTmp.tmpMatrix), d.MathTmp.tmpMatrix.invert(), t.FromRotationMatrixToRef(d.MathTmp.tmpMatrix, this);\n        }, Object.defineProperty(t.prototype, \"eulerAngles\", {\n          get: function get() {\n            var e = new o.Vector3(),\n                n = new r.Matrix();\n            this.toRotationMatrix(n);\n            var t = r.Matrix.GetAsMatrix3x3(n);\n            return e.y = i.RAD2DEG * Math.asin(Math.max(-1, Math.min(1, t[6]))), Math.abs(t[6]) < .99999 ? (e.x = i.RAD2DEG * Math.atan2(-t[7], t[8]), e.z = i.RAD2DEG * Math.atan2(-t[3], t[0])) : (e.x = i.RAD2DEG * Math.atan2(t[5], t[4]), e.z = 0), e;\n          },\n          set: function set(e) {\n            this.setEuler(e.x, e.y, e.z);\n          },\n          enumerable: !0,\n          configurable: !0\n        }), t.prototype.toString = function () {\n          return \"(\" + this.x + \", \" + this.y + \", \" + this.z + \", \" + this.w + \")\";\n        }, Object.defineProperty(t.prototype, \"length\", {\n          get: function get() {\n            return Math.sqrt(this.lengthSquared);\n          },\n          enumerable: !0,\n          configurable: !0\n        }), Object.defineProperty(t.prototype, \"lengthSquared\", {\n          get: function get() {\n            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n          },\n          enumerable: !0,\n          configurable: !0\n        }), t.prototype.getClassName = function () {\n          return \"Quaternion\";\n        }, t.prototype.getHashCode = function () {\n          var e = this.x || 0;\n          return e = 397 * (e = 397 * (e = 397 * e ^ (this.y || 0)) ^ (this.z || 0)) ^ (this.w || 0);\n        }, t.prototype.asArray = function () {\n          return [this.x, this.y, this.z, this.w];\n        }, t.prototype.equals = function (e) {\n          return e && this.x === e.x && this.y === e.y && this.z === e.z && this.w === e.w;\n        }, t.prototype.clone = function () {\n          return new t(this.x, this.y, this.z, this.w);\n        }, t.prototype.copyFrom = function (e) {\n          return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w, this;\n        }, t.prototype.copyFromFloats = function (e, n, t, a) {\n          return this.x = e, this.y = n, this.z = t, this.w = a, this;\n        }, t.prototype.set = function (e, n, t, a) {\n          return this.copyFromFloats(e, n, t, a);\n        }, t.prototype.setEuler = function (e, n, a) {\n          return t.RotationYawPitchRollToRef(n * i.DEG2RAD, e * i.DEG2RAD, a * i.DEG2RAD, this), this;\n        }, t.prototype.add = function (e) {\n          return new t(this.x + e.x, this.y + e.y, this.z + e.z, this.w + e.w);\n        }, t.prototype.addInPlace = function (e) {\n          return this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this;\n        }, t.prototype.subtract = function (e) {\n          return new t(this.x - e.x, this.y - e.y, this.z - e.z, this.w - e.w);\n        }, t.prototype.scale = function (e) {\n          return new t(this.x * e, this.y * e, this.z * e, this.w * e);\n        }, t.prototype.scaleToRef = function (e, n) {\n          return n.x = this.x * e, n.y = this.y * e, n.z = this.z * e, n.w = this.w * e, this;\n        }, t.prototype.scaleInPlace = function (e) {\n          return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;\n        }, t.prototype.scaleAndAddToRef = function (e, n) {\n          return n.x += this.x * e, n.y += this.y * e, n.z += this.z * e, n.w += this.w * e, this;\n        }, t.prototype.multiply = function (e) {\n          var n = new t(0, 0, 0, 1);\n          return this.multiplyToRef(e, n), n;\n        }, t.prototype.multiplyToRef = function (e, n) {\n          var t = this.x * e.w + this.y * e.z - this.z * e.y + this.w * e.x,\n              a = -this.x * e.z + this.y * e.w + this.z * e.x + this.w * e.y,\n              r = this.x * e.y - this.y * e.x + this.z * e.w + this.w * e.z,\n              o = -this.x * e.x - this.y * e.y - this.z * e.z + this.w * e.w;\n          return n.copyFromFloats(t, a, r, o), this;\n        }, t.prototype.multiplyInPlace = function (e) {\n          return this.multiplyToRef(e, this), this;\n        }, t.prototype.conjugateToRef = function (e) {\n          return e.copyFromFloats(-this.x, -this.y, -this.z, this.w), this;\n        }, t.prototype.conjugateInPlace = function () {\n          return this.x *= -1, this.y *= -1, this.z *= -1, this;\n        }, t.prototype.conjugate = function () {\n          return new t(-this.x, -this.y, -this.z, this.w);\n        }, t.prototype.normalize = function () {\n          var e = 1 / this.length;\n          return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;\n        }, t.prototype.angleAxis = function (e, n) {\n          if (0 === n.lengthSquared()) return t.Identity;\n          var a = t.Identity,\n              r = e * i.DEG2RAD;\n          r *= .5;\n          var o = n.normalize();\n          return o = n.scaleInPlace(Math.sin(r)), a.x = o.x, a.y = o.y, a.z = o.z, a.w = Math.cos(r), a.normalize();\n        }, t.prototype.toRotationMatrix = function (e) {\n          return r.Matrix.FromQuaternionToRef(this, e), this;\n        }, t.prototype.fromRotationMatrix = function (e) {\n          return t.FromRotationMatrixToRef(e, this), this;\n        }, t;\n      }();\n\n      n.Quaternion = c;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(3),\n          o = a(10),\n          d = a(9),\n          i = a(21),\n          c = function () {\n        function t() {\n          this._isIdentity = !1, this._isIdentityDirty = !0, this._isIdentity3x2 = !0, this._isIdentity3x2Dirty = !0, this._m = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], this._updateIdentityStatus(!1);\n        }\n\n        return Object.defineProperty(t.prototype, \"m\", {\n          get: function get() {\n            return this._m;\n          },\n          enumerable: !0,\n          configurable: !0\n        }), Object.defineProperty(t, \"IdentityReadOnly\", {\n          get: function get() {\n            return t._identityReadOnly;\n          },\n          enumerable: !0,\n          configurable: !0\n        }), t.FromArray = function (e, n) {\n          void 0 === n && (n = 0);\n          var a = new t();\n          return t.FromArrayToRef(e, n, a), a;\n        }, t.FromArrayToRef = function (e, n, t) {\n          for (var a = 0; a < 16; a++) {\n            t._m[a] = e[a + n];\n          }\n\n          t._markAsUpdated();\n        }, t.FromFloatArrayToRefScaled = function (e, n, t, a) {\n          for (var r = 0; r < 16; r++) {\n            a._m[r] = e[r + n] * t;\n          }\n\n          a._markAsUpdated();\n        }, t.FromValuesToRef = function (e, n, t, a, r, o, d, i, c, s, l, m, p, x, k, u, f) {\n          var T = f._m;\n          T[0] = e, T[1] = n, T[2] = t, T[3] = a, T[4] = r, T[5] = o, T[6] = d, T[7] = i, T[8] = c, T[9] = s, T[10] = l, T[11] = m, T[12] = p, T[13] = x, T[14] = k, T[15] = u, f._markAsUpdated();\n        }, t.FromValues = function (e, n, a, r, o, d, i, c, s, l, m, p, x, k, u, f) {\n          var T = new t(),\n              C = T._m;\n          return C[0] = e, C[1] = n, C[2] = a, C[3] = r, C[4] = o, C[5] = d, C[6] = i, C[7] = c, C[8] = s, C[9] = l, C[10] = m, C[11] = p, C[12] = x, C[13] = k, C[14] = u, C[15] = f, T._markAsUpdated(), T;\n        }, t.Compose = function (e, n, a) {\n          var r = new t();\n          return t.ComposeToRef(e, n, a, r), r;\n        }, t.ComposeToRef = function (e, n, a, r) {\n          t.ScalingToRef(e.x, e.y, e.z, d.MathTmp.Matrix[1]), n.toRotationMatrix(d.MathTmp.Matrix[0]), d.MathTmp.Matrix[1].multiplyToRef(d.MathTmp.Matrix[0], r), r.setTranslation(a);\n        }, t.Identity = function () {\n          var e = t.FromValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n          return e._updateIdentityStatus(!0), e;\n        }, t.IdentityToRef = function (e) {\n          t.FromValuesToRef(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, e), e._updateIdentityStatus(!0);\n        }, t.Zero = function () {\n          var e = t.FromValues(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n          return e._updateIdentityStatus(!1), e;\n        }, t.RotationX = function (e) {\n          var n = new t();\n          return t.RotationXToRef(e, n), n;\n        }, t.Invert = function (e) {\n          var n = new t();\n          return e.invertToRef(n), n;\n        }, t.RotationXToRef = function (e, n) {\n          var a = Math.sin(e),\n              r = Math.cos(e);\n          t.FromValuesToRef(1, 0, 0, 0, 0, r, a, 0, 0, -a, r, 0, 0, 0, 0, 1, n), n._updateIdentityStatus(1 === r && 0 === a);\n        }, t.RotationY = function (e) {\n          var n = new t();\n          return t.RotationYToRef(e, n), n;\n        }, t.RotationYToRef = function (e, n) {\n          var a = Math.sin(e),\n              r = Math.cos(e);\n          t.FromValuesToRef(r, 0, -a, 0, 0, 1, 0, 0, a, 0, r, 0, 0, 0, 0, 1, n), n._updateIdentityStatus(1 === r && 0 === a);\n        }, t.RotationZ = function (e) {\n          var n = new t();\n          return t.RotationZToRef(e, n), n;\n        }, t.RotationZToRef = function (e, n) {\n          var a = Math.sin(e),\n              r = Math.cos(e);\n          t.FromValuesToRef(r, a, 0, 0, -a, r, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, n), n._updateIdentityStatus(1 === r && 0 === a);\n        }, t.RotationAxis = function (e, n) {\n          var a = new t();\n          return t.RotationAxisToRef(e, n, a), a;\n        }, t.RotationAxisToRef = function (e, n, t) {\n          var a = Math.sin(-n),\n              r = Math.cos(-n),\n              o = 1 - r;\n          e.normalize();\n          var d = t._m;\n          d[0] = e.x * e.x * o + r, d[1] = e.x * e.y * o - e.z * a, d[2] = e.x * e.z * o + e.y * a, d[3] = 0, d[4] = e.y * e.x * o + e.z * a, d[5] = e.y * e.y * o + r, d[6] = e.y * e.z * o - e.x * a, d[7] = 0, d[8] = e.z * e.x * o - e.y * a, d[9] = e.z * e.y * o + e.x * a, d[10] = e.z * e.z * o + r, d[11] = 0, d[12] = 0, d[13] = 0, d[14] = 0, d[15] = 1, t._markAsUpdated();\n        }, t.RotationYawPitchRoll = function (e, n, a) {\n          var r = new t();\n          return t.RotationYawPitchRollToRef(e, n, a, r), r;\n        }, t.RotationYawPitchRollToRef = function (e, n, t, a) {\n          o.Quaternion.RotationYawPitchRollToRef(e, n, t, d.MathTmp.Quaternion[0]), d.MathTmp.Quaternion[0].toRotationMatrix(a);\n        }, t.Scaling = function (e, n, a) {\n          var r = new t();\n          return t.ScalingToRef(e, n, a, r), r;\n        }, t.ScalingToRef = function (e, n, a, r) {\n          t.FromValuesToRef(e, 0, 0, 0, 0, n, 0, 0, 0, 0, a, 0, 0, 0, 0, 1, r), r._updateIdentityStatus(1 === e && 1 === n && 1 === a);\n        }, t.Translation = function (e, n, a) {\n          var r = new t();\n          return t.TranslationToRef(e, n, a, r), r;\n        }, t.TranslationToRef = function (e, n, a, r) {\n          t.FromValuesToRef(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, e, n, a, 1, r), r._updateIdentityStatus(0 === e && 0 === n && 0 === a);\n        }, t.Lerp = function (e, n, a) {\n          var r = new t();\n          return t.LerpToRef(e, n, a, r), r;\n        }, t.LerpToRef = function (e, n, t, a) {\n          for (var r = 0; r < 16; r++) {\n            a._m[r] = e._m[r] * (1 - t) + n._m[r] * t;\n          }\n\n          a._markAsUpdated();\n        }, t.DecomposeLerp = function (e, n, a) {\n          var r = new t();\n          return t.DecomposeLerpToRef(e, n, a, r), r;\n        }, t.DecomposeLerpToRef = function (e, n, a, i) {\n          var c = d.MathTmp.Vector3[0],\n              s = d.MathTmp.Quaternion[0],\n              l = d.MathTmp.Vector3[1];\n          e.decompose(c, s, l);\n          var m = d.MathTmp.Vector3[2],\n              p = d.MathTmp.Quaternion[1],\n              x = d.MathTmp.Vector3[3];\n          n.decompose(m, p, x);\n          var k = d.MathTmp.Vector3[4];\n          r.Vector3.LerpToRef(c, m, a, k);\n          var u = d.MathTmp.Quaternion[2];\n          o.Quaternion.SlerpToRef(s, p, a, u);\n          var f = d.MathTmp.Vector3[5];\n          r.Vector3.LerpToRef(l, x, a, f), t.ComposeToRef(k, u, f, i);\n        }, t.LookAtLH = function (e, n, a) {\n          var r = new t();\n          return t.LookAtLHToRef(e, n, a, r), r;\n        }, t.LookAtLHToRef = function (e, n, a, o) {\n          var i = d.MathTmp.Vector3[0],\n              c = d.MathTmp.Vector3[1],\n              s = d.MathTmp.Vector3[2];\n          n.subtractToRef(e, s), s.normalize(), r.Vector3.CrossToRef(a, s, i);\n          var l = i.lengthSquared();\n          0 === l ? i.x = 1 : i.normalizeFromLength(Math.sqrt(l)), r.Vector3.CrossToRef(s, i, c), c.normalize();\n          var m = -r.Vector3.Dot(i, e),\n              p = -r.Vector3.Dot(c, e),\n              x = -r.Vector3.Dot(s, e);\n          t.FromValuesToRef(i.x, c.x, s.x, 0, i.y, c.y, s.y, 0, i.z, c.z, s.z, 0, m, p, x, 1, o);\n        }, t.LookAtRH = function (e, n, a) {\n          var r = new t();\n          return t.LookAtRHToRef(e, n, a, r), r;\n        }, t.LookAtRHToRef = function (e, n, a, o) {\n          var i = d.MathTmp.Vector3[0],\n              c = d.MathTmp.Vector3[1],\n              s = d.MathTmp.Vector3[2];\n          e.subtractToRef(n, s), s.normalize(), r.Vector3.CrossToRef(a, s, i);\n          var l = i.lengthSquared();\n          0 === l ? i.x = 1 : i.normalizeFromLength(Math.sqrt(l)), r.Vector3.CrossToRef(s, i, c), c.normalize();\n          var m = -r.Vector3.Dot(i, e),\n              p = -r.Vector3.Dot(c, e),\n              x = -r.Vector3.Dot(s, e);\n          t.FromValuesToRef(i.x, c.x, s.x, 0, i.y, c.y, s.y, 0, i.z, c.z, s.z, 0, m, p, x, 1, o);\n        }, t.OrthoLH = function (e, n, a, r) {\n          var o = new t();\n          return t.OrthoLHToRef(e, n, a, r, o), o;\n        }, t.OrthoLHToRef = function (e, n, a, r, o) {\n          var d = 2 / e,\n              i = 2 / n,\n              c = 2 / (r - a),\n              s = -(r + a) / (r - a);\n          t.FromValuesToRef(d, 0, 0, 0, 0, i, 0, 0, 0, 0, c, 0, 0, 0, s, 1, o), o._updateIdentityStatus(1 === d && 1 === i && 1 === c && 0 === s);\n        }, t.OrthoOffCenterLH = function (e, n, a, r, o, d) {\n          var i = new t();\n          return t.OrthoOffCenterLHToRef(e, n, a, r, o, d, i), i;\n        }, t.OrthoOffCenterLHToRef = function (e, n, a, r, o, d, i) {\n          var c = 2 / (n - e),\n              s = 2 / (r - a),\n              l = 2 / (d - o),\n              m = -(d + o) / (d - o),\n              p = (e + n) / (e - n),\n              x = (r + a) / (a - r);\n          t.FromValuesToRef(c, 0, 0, 0, 0, s, 0, 0, 0, 0, l, 0, p, x, m, 1, i), i._markAsUpdated();\n        }, t.OrthoOffCenterRH = function (e, n, a, r, o, d) {\n          var i = new t();\n          return t.OrthoOffCenterRHToRef(e, n, a, r, o, d, i), i;\n        }, t.OrthoOffCenterRHToRef = function (e, n, a, r, o, d, i) {\n          t.OrthoOffCenterLHToRef(e, n, a, r, o, d, i), i._m[10] *= -1;\n        }, t.PerspectiveLH = function (e, n, a, r) {\n          var o = new t(),\n              d = 2 * a / e,\n              i = 2 * a / n,\n              c = (r + a) / (r - a),\n              s = -2 * r * a / (r - a);\n          return t.FromValuesToRef(d, 0, 0, 0, 0, i, 0, 0, 0, 0, c, 1, 0, 0, s, 0, o), o._updateIdentityStatus(!1), o;\n        }, t.PerspectiveFovLH = function (e, n, a, r) {\n          var o = new t();\n          return t.PerspectiveFovLHToRef(e, n, a, r, o), o;\n        }, t.PerspectiveFovLHToRef = function (e, n, a, r, o, d) {\n          void 0 === d && (d = !0);\n          var i = a,\n              c = r,\n              s = 1 / Math.tan(.5 * e),\n              l = d ? s / n : s,\n              m = d ? s : s * n,\n              p = (c + i) / (c - i),\n              x = -2 * c * i / (c - i);\n          t.FromValuesToRef(l, 0, 0, 0, 0, m, 0, 0, 0, 0, p, 1, 0, 0, x, 0, o), o._updateIdentityStatus(!1);\n        }, t.PerspectiveFovRH = function (e, n, a, r) {\n          var o = new t();\n          return t.PerspectiveFovRHToRef(e, n, a, r, o), o;\n        }, t.PerspectiveFovRHToRef = function (e, n, a, r, o, d) {\n          void 0 === d && (d = !0);\n          var i = a,\n              c = r,\n              s = 1 / Math.tan(.5 * e),\n              l = d ? s / n : s,\n              m = d ? s : s * n,\n              p = -(c + i) / (c - i),\n              x = -2 * c * i / (c - i);\n          t.FromValuesToRef(l, 0, 0, 0, 0, m, 0, 0, 0, 0, p, -1, 0, 0, x, 0, o), o._updateIdentityStatus(!1);\n        }, t.PerspectiveFovWebVRToRef = function (e, n, t, a, r) {\n          void 0 === r && (r = !1);\n          var o = r ? -1 : 1,\n              d = Math.tan(e.upDegrees * Math.PI / 180),\n              i = Math.tan(e.downDegrees * Math.PI / 180),\n              c = Math.tan(e.leftDegrees * Math.PI / 180),\n              s = Math.tan(e.rightDegrees * Math.PI / 180),\n              l = 2 / (c + s),\n              m = 2 / (d + i),\n              p = a._m;\n          p[0] = l, p[1] = p[2] = p[3] = p[4] = 0, p[5] = m, p[6] = p[7] = 0, p[8] = (c - s) * l * .5, p[9] = -(d - i) * m * .5, p[10] = -t / (n - t), p[11] = 1 * o, p[12] = p[13] = p[15] = 0, p[14] = -2 * t * n / (t - n), a._markAsUpdated();\n        }, t.GetAsMatrix2x2 = function (e) {\n          return [e._m[0], e._m[1], e._m[4], e._m[5]];\n        }, t.GetAsMatrix3x3 = function (e) {\n          return [e._m[0], e._m[1], e._m[2], e._m[4], e._m[5], e._m[6], e._m[8], e._m[9], e._m[10]];\n        }, t.Transpose = function (e) {\n          var n = new t();\n          return t.TransposeToRef(e, n), n;\n        }, t.TransposeToRef = function (e, n) {\n          var t = n._m,\n              a = e._m;\n          t[0] = a[0], t[1] = a[4], t[2] = a[8], t[3] = a[12], t[4] = a[1], t[5] = a[5], t[6] = a[9], t[7] = a[13], t[8] = a[2], t[9] = a[6], t[10] = a[10], t[11] = a[14], t[12] = a[3], t[13] = a[7], t[14] = a[11], t[15] = a[15], n._updateIdentityStatus(e._isIdentity, e._isIdentityDirty);\n        }, t.Reflection = function (e) {\n          var n = new t();\n          return t.ReflectionToRef(e, n), n;\n        }, t.ReflectionToRef = function (e, n) {\n          e.normalize();\n          var a = e.normal.x,\n              r = e.normal.y,\n              o = e.normal.z,\n              d = -2 * a,\n              i = -2 * r,\n              c = -2 * o;\n          t.FromValuesToRef(d * a + 1, i * a, c * a, 0, d * r, i * r + 1, c * r, 0, d * o, i * o, c * o + 1, 0, d * e.d, i * e.d, c * e.d, 1, n);\n        }, t.FromXYZAxesToRef = function (e, n, a, r) {\n          t.FromValuesToRef(e.x, e.y, e.z, 0, n.x, n.y, n.z, 0, a.x, a.y, a.z, 0, 0, 0, 0, 1, r);\n        }, t.FromQuaternionToRef = function (e, n) {\n          var t = e.x * e.x,\n              a = e.y * e.y,\n              r = e.z * e.z,\n              o = e.x * e.y,\n              d = e.z * e.w,\n              i = e.z * e.x,\n              c = e.y * e.w,\n              s = e.y * e.z,\n              l = e.x * e.w;\n          n._m[0] = 1 - 2 * (a + r), n._m[1] = 2 * (o + d), n._m[2] = 2 * (i - c), n._m[3] = 0, n._m[4] = 2 * (o - d), n._m[5] = 1 - 2 * (r + t), n._m[6] = 2 * (s + l), n._m[7] = 0, n._m[8] = 2 * (i + c), n._m[9] = 2 * (s - l), n._m[10] = 1 - 2 * (a + t), n._m[11] = 0, n._m[12] = 0, n._m[13] = 0, n._m[14] = 0, n._m[15] = 1, n._markAsUpdated();\n        }, t.prototype._markAsUpdated = function () {\n          this.updateFlag = t._updateFlagSeed++, this._isIdentity = !1, this._isIdentity3x2 = !1, this._isIdentityDirty = !0, this._isIdentity3x2Dirty = !0;\n        }, t.prototype.isIdentity = function () {\n          if (this._isIdentityDirty) {\n            this._isIdentityDirty = !1;\n            var e = this._m;\n            this._isIdentity = 1 === e[0] && 0 === e[1] && 0 === e[2] && 0 === e[3] && 0 === e[4] && 1 === e[5] && 0 === e[6] && 0 === e[7] && 0 === e[8] && 0 === e[9] && 1 === e[10] && 0 === e[11] && 0 === e[12] && 0 === e[13] && 0 === e[14] && 1 === e[15];\n          }\n\n          return this._isIdentity;\n        }, t.prototype.isIdentityAs3x2 = function () {\n          return this._isIdentity3x2Dirty && (this._isIdentity3x2Dirty = !1, 1 !== this._m[0] || 1 !== this._m[5] || 1 !== this._m[15] || 0 !== this._m[1] || 0 !== this._m[2] || 0 !== this._m[3] || 0 !== this._m[4] || 0 !== this._m[6] || 0 !== this._m[7] || 0 !== this._m[8] || 0 !== this._m[9] || 0 !== this._m[10] || 0 !== this._m[11] || 0 !== this._m[12] || 0 !== this._m[13] || 0 !== this._m[14] ? this._isIdentity3x2 = !1 : this._isIdentity3x2 = !0), this._isIdentity3x2;\n        }, t.prototype.determinant = function () {\n          if (!0 === this._isIdentity) return 1;\n          var e = this._m,\n              n = e[0],\n              t = e[1],\n              a = e[2],\n              r = e[3],\n              o = e[4],\n              d = e[5],\n              i = e[6],\n              c = e[7],\n              s = e[8],\n              l = e[9],\n              m = e[10],\n              p = e[11],\n              x = e[12],\n              k = e[13],\n              u = e[14],\n              f = e[15],\n              T = m * f - u * p,\n              C = l * f - k * p,\n              R = l * u - k * m,\n              y = s * f - x * p,\n              h = s * u - m * x,\n              g = s * k - x * l;\n          return n * +(d * T - i * C + c * R) + t * -(o * T - i * y + c * h) + a * +(o * C - d * y + c * g) + r * -(o * R - d * h + i * g);\n        }, t.prototype.toArray = function () {\n          return this._m;\n        }, t.prototype.asArray = function () {\n          return this._m;\n        }, t.prototype.invert = function () {\n          return this.invertToRef(this), this;\n        }, t.prototype.reset = function () {\n          return t.FromValuesToRef(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, this), this._updateIdentityStatus(!1), this;\n        }, t.prototype.add = function (e) {\n          var n = new t();\n          return this.addToRef(e, n), n;\n        }, t.prototype.addToRef = function (e, n) {\n          for (var t = 0; t < 16; t++) {\n            n._m[t] = this._m[t] + e._m[t];\n          }\n\n          return n._markAsUpdated(), this;\n        }, t.prototype.addToSelf = function (e) {\n          for (var n = 0; n < 16; n++) {\n            this._m[n] += e._m[n];\n          }\n\n          return this._markAsUpdated(), this;\n        }, t.prototype.invertToRef = function (e) {\n          if (!0 === this._isIdentity) return t.IdentityToRef(e), this;\n          var n = this._m,\n              a = n[0],\n              r = n[1],\n              o = n[2],\n              d = n[3],\n              i = n[4],\n              c = n[5],\n              s = n[6],\n              l = n[7],\n              m = n[8],\n              p = n[9],\n              x = n[10],\n              k = n[11],\n              u = n[12],\n              f = n[13],\n              T = n[14],\n              C = n[15],\n              R = x * C - T * k,\n              y = p * C - f * k,\n              h = p * T - f * x,\n              g = m * C - u * k,\n              I = m * T - x * u,\n              b = m * f - u * p,\n              v = +(c * R - s * y + l * h),\n              P = -(i * R - s * g + l * I),\n              S = +(i * y - c * g + l * b),\n              w = -(i * h - c * I + s * b),\n              V = a * v + r * P + o * S + d * w;\n          if (0 === V) return e.copyFrom(this), this;\n\n          var M = 1 / V,\n              N = s * C - T * l,\n              O = c * C - f * l,\n              E = c * T - f * s,\n              A = i * C - u * l,\n              z = i * T - u * s,\n              _ = i * f - u * c,\n              F = s * k - x * l,\n              D = c * k - p * l,\n              U = c * x - p * s,\n              L = i * k - m * l,\n              B = i * x - m * s,\n              H = i * p - m * c,\n              q = -(r * R - o * y + d * h),\n              j = +(a * R - o * g + d * I),\n              G = -(a * y - r * g + d * b),\n              Q = +(a * h - r * I + o * b),\n              W = +(r * N - o * O + d * E),\n              Y = -(a * N - o * A + d * z),\n              X = +(a * O - r * A + d * _),\n              Z = -(a * E - r * z + o * _),\n              J = -(r * F - o * D + d * U),\n              $ = +(a * F - o * L + d * B),\n              K = -(a * D - r * L + d * H),\n              ee = +(a * U - r * B + o * H);\n\n          return t.FromValuesToRef(v * M, q * M, W * M, J * M, P * M, j * M, Y * M, $ * M, S * M, G * M, X * M, K * M, w * M, Q * M, Z * M, ee * M, e), this;\n        }, t.prototype.addAtIndex = function (e, n) {\n          return this._m[e] += n, this._markAsUpdated(), this;\n        }, t.prototype.multiplyAtIndex = function (e, n) {\n          return this._m[e] *= n, this._markAsUpdated(), this;\n        }, t.prototype.setTranslationFromFloats = function (e, n, t) {\n          return this._m[12] = e, this._m[13] = n, this._m[14] = t, this._markAsUpdated(), this;\n        }, t.prototype.setTranslation = function (e) {\n          return this.setTranslationFromFloats(e.x, e.y, e.z);\n        }, t.prototype.getTranslation = function () {\n          return new r.Vector3(this._m[12], this._m[13], this._m[14]);\n        }, t.prototype.getTranslationToRef = function (e) {\n          return e.x = this._m[12], e.y = this._m[13], e.z = this._m[14], this;\n        }, t.prototype.removeRotationAndScaling = function () {\n          var e = this.m;\n          return t.FromValuesToRef(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, e[12], e[13], e[14], e[15], this), this._updateIdentityStatus(0 === e[12] && 0 === e[13] && 0 === e[14] && 1 === e[15]), this;\n        }, t.prototype.multiply = function (e) {\n          var n = new t();\n          return this.multiplyToRef(e, n), n;\n        }, t.prototype.copyFrom = function (e) {\n          e.copyToArray(this._m);\n          var n = e;\n          return this._updateIdentityStatus(n._isIdentity, n._isIdentityDirty, n._isIdentity3x2, n._isIdentity3x2Dirty), this;\n        }, t.prototype.copyToArray = function (e, n) {\n          void 0 === n && (n = 0);\n\n          for (var t = 0; t < 16; t++) {\n            e[n + t] = this._m[t];\n          }\n\n          return this;\n        }, t.prototype.multiplyToRef = function (e, n) {\n          return this._isIdentity ? (n.copyFrom(e), this) : e._isIdentity ? (n.copyFrom(this), this) : (this.multiplyToArray(e, n._m, 0), n._markAsUpdated(), this);\n        }, t.prototype.multiplyToArray = function (e, n, t) {\n          var a = this._m,\n              r = e.m,\n              o = a[0],\n              d = a[1],\n              i = a[2],\n              c = a[3],\n              s = a[4],\n              l = a[5],\n              m = a[6],\n              p = a[7],\n              x = a[8],\n              k = a[9],\n              u = a[10],\n              f = a[11],\n              T = a[12],\n              C = a[13],\n              R = a[14],\n              y = a[15],\n              h = r[0],\n              g = r[1],\n              I = r[2],\n              b = r[3],\n              v = r[4],\n              P = r[5],\n              S = r[6],\n              w = r[7],\n              V = r[8],\n              M = r[9],\n              N = r[10],\n              O = r[11],\n              E = r[12],\n              A = r[13],\n              z = r[14],\n              _ = r[15];\n          return n[t] = o * h + d * v + i * V + c * E, n[t + 1] = o * g + d * P + i * M + c * A, n[t + 2] = o * I + d * S + i * N + c * z, n[t + 3] = o * b + d * w + i * O + c * _, n[t + 4] = s * h + l * v + m * V + p * E, n[t + 5] = s * g + l * P + m * M + p * A, n[t + 6] = s * I + l * S + m * N + p * z, n[t + 7] = s * b + l * w + m * O + p * _, n[t + 8] = x * h + k * v + u * V + f * E, n[t + 9] = x * g + k * P + u * M + f * A, n[t + 10] = x * I + k * S + u * N + f * z, n[t + 11] = x * b + k * w + u * O + f * _, n[t + 12] = T * h + C * v + R * V + y * E, n[t + 13] = T * g + C * P + R * M + y * A, n[t + 14] = T * I + C * S + R * N + y * z, n[t + 15] = T * b + C * w + R * O + y * _, this;\n        }, t.prototype.equals = function (e) {\n          var n = e;\n          if (!n) return !1;\n          if ((this._isIdentity || n._isIdentity) && !this._isIdentityDirty && !n._isIdentityDirty) return this._isIdentity && n._isIdentity;\n          var t = this.m,\n              a = n.m;\n          return t[0] === a[0] && t[1] === a[1] && t[2] === a[2] && t[3] === a[3] && t[4] === a[4] && t[5] === a[5] && t[6] === a[6] && t[7] === a[7] && t[8] === a[8] && t[9] === a[9] && t[10] === a[10] && t[11] === a[11] && t[12] === a[12] && t[13] === a[13] && t[14] === a[14] && t[15] === a[15];\n        }, t.prototype.clone = function () {\n          var e = new t();\n          return e.copyFrom(this), e;\n        }, t.prototype.getClassName = function () {\n          return \"Matrix\";\n        }, t.prototype.getHashCode = function () {\n          for (var e = this._m[0] || 0, n = 1; n < 16; n++) {\n            e = 397 * e ^ (this._m[n] || 0);\n          }\n\n          return e;\n        }, t.prototype.decompose = function (e, n, a) {\n          if (this._isIdentity) return a && a.setAll(0), e && e.setAll(1), n && n.copyFromFloats(0, 0, 0, 1), !0;\n          var r = this._m;\n          a && a.copyFromFloats(r[12], r[13], r[14]);\n          var i = e || d.MathTmp.Vector3[0];\n          if (i.x = Math.sqrt(r[0] * r[0] + r[1] * r[1] + r[2] * r[2]), i.y = Math.sqrt(r[4] * r[4] + r[5] * r[5] + r[6] * r[6]), i.z = Math.sqrt(r[8] * r[8] + r[9] * r[9] + r[10] * r[10]), this.determinant() <= 0 && (i.y *= -1), 0 === i.x || 0 === i.y || 0 === i.z) return n && n.copyFromFloats(0, 0, 0, 1), !1;\n\n          if (n) {\n            var c = 1 / i.x,\n                s = 1 / i.y,\n                l = 1 / i.z;\n            t.FromValuesToRef(r[0] * c, r[1] * c, r[2] * c, 0, r[4] * s, r[5] * s, r[6] * s, 0, r[8] * l, r[9] * l, r[10] * l, 0, 0, 0, 0, 1, d.MathTmp.Matrix[0]), o.Quaternion.FromRotationMatrixToRef(d.MathTmp.Matrix[0], n);\n          }\n\n          return !0;\n        }, t.prototype.getRow = function (e) {\n          if (e < 0 || e > 3) return null;\n          var n = 4 * e;\n          return new i.Vector4(this._m[n + 0], this._m[n + 1], this._m[n + 2], this._m[n + 3]);\n        }, t.prototype.setRow = function (e, n) {\n          return this.setRowFromFloats(e, n.x, n.y, n.z, n.w);\n        }, t.prototype.transpose = function () {\n          return t.Transpose(this);\n        }, t.prototype.transposeToRef = function (e) {\n          return t.TransposeToRef(this, e), this;\n        }, t.prototype.setRowFromFloats = function (e, n, t, a, r) {\n          if (e < 0 || e > 3) return this;\n          var o = 4 * e;\n          return this._m[o + 0] = n, this._m[o + 1] = t, this._m[o + 2] = a, this._m[o + 3] = r, this._markAsUpdated(), this;\n        }, t.prototype.scale = function (e) {\n          var n = new t();\n          return this.scaleToRef(e, n), n;\n        }, t.prototype.scaleToRef = function (e, n) {\n          for (var t = 0; t < 16; t++) {\n            n._m[t] = this._m[t] * e;\n          }\n\n          return n._markAsUpdated(), this;\n        }, t.prototype.scaleAndAddToRef = function (e, n) {\n          for (var t = 0; t < 16; t++) {\n            n._m[t] += this._m[t] * e;\n          }\n\n          return n._markAsUpdated(), this;\n        }, t.prototype.toNormalMatrix = function (e) {\n          var n = d.MathTmp.Matrix[0];\n          this.invertToRef(n), n.transposeToRef(e);\n          var a = e._m;\n          t.FromValuesToRef(a[0], a[1], a[2], 0, a[4], a[5], a[6], 0, a[8], a[9], a[10], 0, 0, 0, 0, 1, e);\n        }, t.prototype.getRotationMatrix = function () {\n          var e = new t();\n          return this.getRotationMatrixToRef(e), e;\n        }, t.prototype.getRotationMatrixToRef = function (e) {\n          var n = d.MathTmp.Vector3[0];\n          if (!this.decompose(n)) return t.IdentityToRef(e), this;\n          var a = this._m,\n              r = 1 / n.x,\n              o = 1 / n.y,\n              i = 1 / n.z;\n          return t.FromValuesToRef(a[0] * r, a[1] * r, a[2] * r, 0, a[4] * o, a[5] * o, a[6] * o, 0, a[8] * i, a[9] * i, a[10] * i, 0, 0, 0, 0, 1, e), this;\n        }, t.prototype.toggleModelMatrixHandInPlace = function () {\n          var e = this._m;\n          e[2] *= -1, e[6] *= -1, e[8] *= -1, e[9] *= -1, e[14] *= -1, this._markAsUpdated();\n        }, t.prototype.toggleProjectionMatrixHandInPlace = function () {\n          var e = this._m;\n          e[8] *= -1, e[9] *= -1, e[10] *= -1, e[11] *= -1, this._markAsUpdated();\n        }, t.prototype._updateIdentityStatus = function (e, n, a, r) {\n          void 0 === n && (n = !1), void 0 === a && (a = !1), void 0 === r && (r = !0), this.updateFlag = t._updateFlagSeed++, this._isIdentity = e, this._isIdentity3x2 = e || a, this._isIdentityDirty = !this._isIdentity && n, this._isIdentity3x2Dirty = !this._isIdentity3x2 && r;\n        }, t._updateFlagSeed = 0, t._identityReadOnly = t.Identity(), t;\n      }();\n\n      n.Matrix = c;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(0),\n          o = a(7),\n          d = a(1),\n          i = function () {\n        function t(e) {\n          this.name = e, this.children = {}, this.eventManager = null, this.alive = !1, this.uuid = d.newId(\"E\"), this.components = {}, this.engine = null, this._parent = null;\n        }\n\n        return t.prototype.addComponentOrReplace = function (e) {\n          if (\"function\" == typeof e) throw new Error(\"You passed a function or class as a component, an instance of component is expected\");\n          if (\"object\" != typeof e) throw new Error(\"You passed a \" + typeof e + \", an instance of component is expected\");\n          var n = r.getComponentName(e);\n\n          if (this.components[n]) {\n            if (this.components[n] === e) return e;\n            this.removeComponent(this.components[n], !1);\n          }\n\n          return this.addComponent(e);\n        }, t.prototype.hasComponent = function (e) {\n          var n = typeof e;\n          if (\"string\" !== n && \"object\" !== n && \"function\" !== n) throw new Error(\"Entity#has(component): component is not a class, name or instance\");\n          if (null == e) return !1;\n          var t = \"string\" === n ? e : r.getComponentName(e),\n              a = this.components[t];\n          return !!a && (\"object\" === n ? a === e : \"function\" !== n || a instanceof e);\n        }, t.prototype.getComponent = function (e) {\n          var n = typeof e;\n          if (\"string\" !== n && \"function\" !== n) throw new Error(\"Entity#get(component): component is not a class or name\");\n          var t = \"string\" === n ? e : r.getComponentName(e),\n              a = this.components[t];\n          if (!a) throw new Error('Can not get component \"' + t + '\" from entity \"' + this.identifier + '\"');\n\n          if (\"function\" === n) {\n            if (a instanceof e) return a;\n            throw new Error('Can not get component \"' + t + '\" from entity \"' + this.identifier + '\" (by instance)');\n          }\n\n          return a;\n        }, t.prototype.getComponentOrNull = function (e) {\n          var n = typeof e;\n          if (\"string\" !== n && \"function\" !== n) throw new Error(\"Entity#getOrNull(component): component is not a class or name\");\n          var t = \"string\" === n ? e : r.getComponentName(e),\n              a = this.components[t];\n          return a ? \"function\" === n ? a instanceof e ? a : null : a : null;\n        }, t.prototype.getComponentOrCreate = function (e) {\n          if (\"function\" != typeof e) throw new Error(\"Entity#getOrCreate(component): component is not a class\");\n          var n = this.getComponentOrNull(e);\n          return n || (n = new e(), r.getComponentName(n), this.addComponentOrReplace(n)), n;\n        }, t.prototype.addComponent = function (e) {\n          if (\"object\" != typeof e) throw new Error(\"Entity#add(component): You passed a function or class as a component, an instance of component is expected\");\n          var n = r.getComponentName(e),\n              t = r.getComponentClassId(e);\n          if (this.components[n]) throw new Error('A component of type \"' + n + '\" is already present in entity \"' + this.identifier + '\"');\n          this.components[n] = e, this.eventManager && this.eventManager.fireEvent(new o.ComponentAdded(this, n, t));\n          var a = e;\n          return \"function\" == typeof a.addedToEntity && a.addedToEntity(this), e;\n        }, t.prototype.removeComponent = function (e, n) {\n          void 0 === n && (n = !0);\n          var t = typeof e;\n          if (\"string\" !== t && \"function\" !== t && \"object\" !== t) throw new Error(\"Entity#remove(component): component is not a class, class or name\");\n          var a = \"string\" === t ? e : r.getComponentName(e),\n              i = this.components[a];\n\n          if (i) {\n            if (\"function\" === t) return i instanceof e ? (delete this.components[a], void (i && (n && this.eventManager && this.eventManager.fireEvent(new o.ComponentRemoved(this, a, i)), \"function\" == typeof i.removedFromEntity && i.removedFromEntity(this)))) : void d.log('Entity Warning: Trying to remove wrong (by constructor) component \"' + a + '\" from entity \"' + this.identifier + '\"');\n            delete this.components[a], i && (n && this.eventManager && this.eventManager.fireEvent(new o.ComponentRemoved(this, a, i)), \"function\" == typeof i.removedFromEntity && i.removedFromEntity(this));\n          } else d.log('Entity Warning: Trying to remove inexisting component \"' + a + '\" from entity \"' + this.identifier + '\"');\n        }, t.prototype.isAddedToEngine = function () {\n          return !(!this.engine || !(this.uuid in this.engine.entities) && this.engine.rootEntity !== this);\n        }, t.prototype.setParent = function (e) {\n          var n;\n\n          if (e && \"getEntityRepresentation\" in e) {\n            if (!this.engine) throw new Error(\"In order to set an attachable as parent, you first need to add the entity to the engine.\");\n            n = e.getEntityRepresentation(this.engine);\n          } else n = !e && this.engine ? this.engine.rootEntity : e;\n\n          var t = this.getParent();\n          if (n === this) throw new Error('Failed to set parent for entity \"' + this.identifier + \"\\\": An entity can't set itself as a its own parent\");\n          if (n === t) return this;\n          var a = this.getCircularAncestor(n);\n          if (a) throw new Error('Failed to set parent for entity \"' + this.identifier + '\": Circular parent references are not allowed (See entity \"' + a + '\")');\n          return t && delete t.children[this.uuid], null !== n && \"0\" !== n.uuid && (!n.isAddedToEngine() && this.isAddedToEngine() && this.engine.removeEntity(this), n.isAddedToEngine() && !this.isAddedToEngine() && n.engine.addEntity(this)), this._parent = n || null, this.registerAsChild(), this.eventManager && this.engine && this.eventManager.fireEvent(new o.ParentChanged(this, n)), this;\n        }, t.prototype.getParent = function () {\n          return this._parent;\n        }, Object.defineProperty(t.prototype, \"identifier\", {\n          get: function get() {\n            return this.name || this.uuid;\n          },\n          enumerable: !0,\n          configurable: !0\n        }), t.prototype.getCircularAncestor = function (e) {\n          for (var n = this.engine ? this.engine.rootEntity : null, t = e; t && t !== n;) {\n            var a = t.getParent();\n            if (a === this) return t.uuid;\n            t = a;\n          }\n\n          return null;\n        }, t.prototype.registerAsChild = function () {\n          var e = this.getParent();\n          this.uuid && e && (e.children[this.uuid] = this);\n        }, t;\n      }();\n\n      n.Entity = i;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      var r = this && this.__decorate || function (e, n, t, a) {\n        var r,\n            o = arguments.length,\n            d = o < 3 ? n : null === a ? a = Object.getOwnPropertyDescriptor(n, t) : a;\n        if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) d = Reflect.decorate(e, n, t, a);else for (var i = e.length - 1; i >= 0; i--) {\n          (r = e[i]) && (d = (o < 3 ? r(d) : o > 3 ? r(n, t, d) : r(n, t)) || d);\n        }\n        return o > 3 && d && Object.defineProperty(n, t, d), d;\n      };\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var o = a(8),\n          d = function () {\n        function t(e, n) {\n          this.uuid = e, this.payload = n;\n        }\n\n        return t = r([o.EventConstructor()], t);\n      }();\n\n      n.UUIDEvent = d;\n\n      var i = function () {\n        function t(e) {\n          this.payload = e;\n        }\n\n        return t = r([o.EventConstructor()], t);\n      }();\n\n      n.RaycastResponse = i;\n\n      var c = function () {\n        function t(e) {\n          this.payload = e;\n        }\n\n        return t = r([o.EventConstructor()], t);\n      }();\n\n      n.PointerEvent = c;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(13),\n          o = a(4),\n          d = a(7),\n          i = a(16),\n          c = a(28),\n          s = function () {\n        function t() {}\n\n        return t.prototype.activate = function (e) {\n          e.eventManager.addListener(r.RaycastResponse, this, function (e) {\n            \"HitFirst\" === e.payload.queryType ? c.PhysicsCast.instance.handleRaycastHitFirstResponse(e) : \"HitAll\" === e.payload.queryType && c.PhysicsCast.instance.handleRaycastHitAllResponse(e);\n          }), \"undefined\" != typeof dcl && dcl.subscribe(\"raycastResponse\");\n        }, t.prototype.deactivate = function () {\n          \"undefined\" != typeof dcl && dcl.unsubscribe(\"raycastResponse\");\n        }, t;\n      }();\n\n      n.RaycastEventSystem = s, n.raycastEventSystem = new s();\n\n      var l = function () {\n        function t() {}\n\n        return t.prototype.activate = function (e) {\n          e.eventManager.addListener(r.PointerEvent, this, function (e) {\n            i.Input.instance.handlePointerEvent(e.payload);\n          }), \"undefined\" != typeof dcl && (dcl.subscribe(\"pointerUp\"), dcl.subscribe(\"pointerDown\"), dcl.subscribe(\"pointerEvent\"));\n        }, t.prototype.deactivate = function () {\n          \"undefined\" != typeof dcl && (dcl.unsubscribe(\"pointerUp\"), dcl.unsubscribe(\"pointerDown\"), dcl.unsubscribe(\"pointerEvent\"));\n        }, t;\n      }();\n\n      n.PointerEventSystem = l, n.pointerEventSystem = new l();\n\n      var m = function () {\n        function t() {\n          this.handlerMap = {};\n        }\n\n        return t.prototype.activate = function (e) {\n          e.eventManager.addListener(r.UUIDEvent, this, this.handleEvent), e.eventManager.addListener(d.ComponentAdded, this, this.componentAdded), e.eventManager.addListener(d.ComponentRemoved, this, this.componentRemoved), \"undefined\" != typeof dcl && dcl.subscribe(\"uuidEvent\");\n        }, t.prototype.deactivate = function () {\n          \"undefined\" != typeof dcl && dcl.unsubscribe(\"uuidEvent\");\n        }, t.prototype.onAddEntity = function (e) {\n          for (var n in e.components) {\n            var t = e.components[n];\n            t instanceof o.OnUUIDEvent && (this.handlerMap[t.uuid] = t);\n          }\n        }, t.prototype.onRemoveEntity = function (e) {\n          for (var n in e.components) {\n            var t = e.components[n];\n            t instanceof o.OnUUIDEvent && delete this.handlerMap[t.uuid];\n          }\n        }, t.prototype.componentAdded = function (e) {\n          if (e.entity.isAddedToEngine()) {\n            var n = e.entity.components[e.componentName];\n            n instanceof o.OnUUIDEvent && (this.handlerMap[n.uuid] = n);\n          }\n        }, t.prototype.componentRemoved = function (e) {\n          e.entity.isAddedToEngine() && e.component instanceof o.OnUUIDEvent && delete this.handlerMap[e.component.uuid];\n        }, t.prototype.handleEvent = function (e) {\n          if (e.uuid in this.handlerMap) {\n            var n = this.handlerMap[e.uuid];\n            n && n.callback && \"call\" in n.callback && n.callback(e.payload);\n          }\n        }, t;\n      }();\n\n      n.UUIDEventSystem = m, n.uuidEventSystem = new m();\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(2),\n          o = a(6),\n          d = function () {\n        function t(e, n) {\n          void 0 === e && (e = 0), void 0 === n && (n = 0), this.x = e, this.y = n;\n        }\n\n        return t.Zero = function () {\n          return new t(0, 0);\n        }, t.One = function () {\n          return new t(1, 1);\n        }, t.Add = function (e, n) {\n          return new t(e.x, e.y).addInPlace(n);\n        }, t.FromArray = function (e, n) {\n          return void 0 === n && (n = 0), new t(e[n], e[n + 1]);\n        }, t.FromArrayToRef = function (e, n, t) {\n          t.x = e[n], t.y = e[n + 1];\n        }, t.CatmullRom = function (e, n, a, r, o) {\n          var d = o * o,\n              i = o * d;\n          return new t(.5 * (2 * n.x + (-e.x + a.x) * o + (2 * e.x - 5 * n.x + 4 * a.x - r.x) * d + (-e.x + 3 * n.x - 3 * a.x + r.x) * i), .5 * (2 * n.y + (-e.y + a.y) * o + (2 * e.y - 5 * n.y + 4 * a.y - r.y) * d + (-e.y + 3 * n.y - 3 * a.y + r.y) * i));\n        }, t.Clamp = function (e, n, a) {\n          var r = e.x;\n          r = (r = r > a.x ? a.x : r) < n.x ? n.x : r;\n          var o = e.y;\n          return new t(r, o = (o = o > a.y ? a.y : o) < n.y ? n.y : o);\n        }, t.Hermite = function (e, n, a, r, o) {\n          var d = o * o,\n              i = o * d,\n              c = 2 * i - 3 * d + 1,\n              s = -2 * i + 3 * d,\n              l = i - 2 * d + o,\n              m = i - d;\n          return new t(e.x * c + a.x * s + n.x * l + r.x * m, e.y * c + a.y * s + n.y * l + r.y * m);\n        }, t.Lerp = function (e, n, a) {\n          return new t(e.x + (n.x - e.x) * a, e.y + (n.y - e.y) * a);\n        }, t.Dot = function (e, n) {\n          return e.x * n.x + e.y * n.y;\n        }, t.Normalize = function (e) {\n          var n = new t(e.x, e.y);\n          return n.normalize(), n;\n        }, t.Minimize = function (e, n) {\n          return new t(e.x < n.x ? e.x : n.x, e.y < n.y ? e.y : n.y);\n        }, t.Maximize = function (e, n) {\n          return new t(e.x > n.x ? e.x : n.x, e.y > n.y ? e.y : n.y);\n        }, t.Transform = function (e, n) {\n          var a = t.Zero();\n          return t.TransformToRef(e, n, a), a;\n        }, t.TransformToRef = function (e, n, t) {\n          var a = n.m,\n              r = e.x * a[0] + e.y * a[4] + a[12],\n              o = e.x * a[1] + e.y * a[5] + a[13];\n          t.x = r, t.y = o;\n        }, t.PointInTriangle = function (e, n, t, a) {\n          var r = .5 * (-t.y * a.x + n.y * (-t.x + a.x) + n.x * (t.y - a.y) + t.x * a.y),\n              o = r < 0 ? -1 : 1,\n              d = (n.y * a.x - n.x * a.y + (a.y - n.y) * e.x + (n.x - a.x) * e.y) * o,\n              i = (n.x * t.y - n.y * t.x + (n.y - t.y) * e.x + (t.x - n.x) * e.y) * o;\n          return d > 0 && i > 0 && d + i < 2 * r * o;\n        }, t.Distance = function (e, n) {\n          return Math.sqrt(t.DistanceSquared(e, n));\n        }, t.DistanceSquared = function (e, n) {\n          var t = e.x - n.x,\n              a = e.y - n.y;\n          return t * t + a * a;\n        }, t.Center = function (e, n) {\n          var a = t.Add(e, n);\n          return a.scaleInPlace(.5), a;\n        }, t.DistanceOfPointFromSegment = function (e, n, a) {\n          var r = t.DistanceSquared(n, a);\n          if (0 === r) return t.Distance(e, n);\n          var o = a.subtract(n),\n              d = Math.max(0, Math.min(1, t.Dot(e.subtract(n), o) / r)),\n              i = n.add(o.multiplyByFloats(d, d));\n          return t.Distance(e, i);\n        }, t.prototype.toString = function () {\n          return \"{X: \" + this.x + \" Y:\" + this.y + \"}\";\n        }, t.prototype.getClassName = function () {\n          return \"Vector2\";\n        }, t.prototype.getHashCode = function () {\n          var e = this.x || 0;\n          return e = 397 * e ^ (this.y || 0);\n        }, t.prototype.toArray = function (e, n) {\n          return void 0 === n && (n = 0), e[n] = this.x, e[n + 1] = this.y, this;\n        }, t.prototype.asArray = function () {\n          var e = new Array();\n          return this.toArray(e, 0), e;\n        }, t.prototype.copyFrom = function (e) {\n          return this.x = e.x, this.y = e.y, this;\n        }, t.prototype.copyFromFloats = function (e, n) {\n          return this.x = e, this.y = n, this;\n        }, t.prototype.set = function (e, n) {\n          return this.copyFromFloats(e, n);\n        }, t.prototype.add = function (e) {\n          return new t(this.x + e.x, this.y + e.y);\n        }, t.prototype.addToRef = function (e, n) {\n          return n.x = this.x + e.x, n.y = this.y + e.y, this;\n        }, t.prototype.addInPlace = function (e) {\n          return this.x += e.x, this.y += e.y, this;\n        }, t.prototype.addVector3 = function (e) {\n          return new t(this.x + e.x, this.y + e.y);\n        }, t.prototype.subtract = function (e) {\n          return new t(this.x - e.x, this.y - e.y);\n        }, t.prototype.subtractToRef = function (e, n) {\n          return n.x = this.x - e.x, n.y = this.y - e.y, this;\n        }, t.prototype.subtractInPlace = function (e) {\n          return this.x -= e.x, this.y -= e.y, this;\n        }, t.prototype.multiplyInPlace = function (e) {\n          return this.x *= e.x, this.y *= e.y, this;\n        }, t.prototype.multiply = function (e) {\n          return new t(this.x * e.x, this.y * e.y);\n        }, t.prototype.multiplyToRef = function (e, n) {\n          return n.x = this.x * e.x, n.y = this.y * e.y, this;\n        }, t.prototype.multiplyByFloats = function (e, n) {\n          return new t(this.x * e, this.y * n);\n        }, t.prototype.divide = function (e) {\n          return new t(this.x / e.x, this.y / e.y);\n        }, t.prototype.divideToRef = function (e, n) {\n          return n.x = this.x / e.x, n.y = this.y / e.y, this;\n        }, t.prototype.divideInPlace = function (e) {\n          return this.divideToRef(e, this);\n        }, t.prototype.negate = function () {\n          return new t(-this.x, -this.y);\n        }, t.prototype.scaleInPlace = function (e) {\n          return this.x *= e, this.y *= e, this;\n        }, t.prototype.scale = function (e) {\n          var n = new t(0, 0);\n          return this.scaleToRef(e, n), n;\n        }, t.prototype.scaleToRef = function (e, n) {\n          return n.x = this.x * e, n.y = this.y * e, this;\n        }, t.prototype.scaleAndAddToRef = function (e, n) {\n          return n.x += this.x * e, n.y += this.y * e, this;\n        }, t.prototype.equals = function (e) {\n          return e && this.x === e.x && this.y === e.y;\n        }, t.prototype.equalsWithEpsilon = function (e, n) {\n          return void 0 === n && (n = r.Epsilon), e && o.Scalar.WithinEpsilon(this.x, e.x, n) && o.Scalar.WithinEpsilon(this.y, e.y, n);\n        }, t.prototype.floor = function () {\n          return new t(Math.floor(this.x), Math.floor(this.y));\n        }, t.prototype.fract = function () {\n          return new t(this.x - Math.floor(this.x), this.y - Math.floor(this.y));\n        }, t.prototype.length = function () {\n          return Math.sqrt(this.x * this.x + this.y * this.y);\n        }, t.prototype.lengthSquared = function () {\n          return this.x * this.x + this.y * this.y;\n        }, t.prototype.normalize = function () {\n          var e = this.length();\n          if (0 === e) return this;\n          var n = 1 / e;\n          return this.x *= n, this.y *= n, this;\n        }, t.prototype.clone = function () {\n          return new t(this.x, this.y);\n        }, t;\n      }();\n\n      n.Vector2 = d;\n    }, function (a, r, o) {\n      \"use strict\";\n\n      var _d3,\n          i = this && this.__extends || (_d3 = function d(e, n) {\n        return (_d3 = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (e, n) {\n          e.__proto__ = n;\n        } || function (e, n) {\n          for (var t in n) {\n            n.hasOwnProperty(t) && (e[t] = n[t]);\n          }\n        })(e, n);\n      }, function (e, t) {\n        function n() {\n          this.constructor = e;\n        }\n\n        _d3(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());\n      }),\n          c = this && this.__assign || function () {\n        return (c = Object.assign || function (e) {\n          for (var n, t = 1, a = arguments.length; t < a; t++) {\n            for (var r in n = arguments[t]) {\n              Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n            }\n          }\n\n          return e;\n        }).apply(this, arguments);\n      },\n          s = this && this.__decorate || function (e, n, t, a) {\n        var r,\n            o = arguments.length,\n            d = o < 3 ? n : null === a ? a = Object.getOwnPropertyDescriptor(n, t) : a;\n        if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) d = Reflect.decorate(e, n, t, a);else for (var i = e.length - 1; i >= 0; i--) {\n          (r = e[i]) && (d = (o < 3 ? r(d) : o > 3 ? r(n, t, d) : r(n, t)) || d);\n        }\n        return o > 3 && d && Object.defineProperty(n, t, d), d;\n      };\n\n      Object.defineProperty(r, \"__esModule\", {\n        value: !0\n      });\n      var l,\n          m = o(27),\n          p = o(5),\n          x = o(0);\n      !function (e) {\n        e.POINTER = \"POINTER\", e.PRIMARY = \"PRIMARY\", e.SECONDARY = \"SECONDARY\", e.ANY = \"ANY\";\n      }(l = r.ActionButton || (r.ActionButton = {}));\n\n      var k = function k(e) {\n        if (this.callback = e, !e || !(\"apply\" in e) || !(\"call\" in e)) throw new Error(\"Callback is not a function\");\n        C.ensureInstance();\n      };\n\n      r.PointerEventComponent = k;\n\n      var u = function (n) {\n        function e() {\n          return null !== n && n.apply(this, arguments) || this;\n        }\n\n        return i(e, n), e = s([x.Component(\"pointerDown\")], e);\n      }(k);\n\n      r.GlobalPointerDown = u;\n\n      var f = function (n) {\n        function e() {\n          return null !== n && n.apply(this, arguments) || this;\n        }\n\n        return i(e, n), e = s([x.Component(\"pointerUp\")], e);\n      }(k);\n\n      r.GlobalPointerUp = f;\n\n      var T = function T(e, n) {\n        this.fn = e, this.useRaycast = n;\n      },\n          C = function () {\n        function t() {\n          var e, n;\n          this.subscriptions = ((e = {})[l.POINTER] = {\n            BUTTON_DOWN: [],\n            BUTTON_UP: []\n          }, e[l.PRIMARY] = {\n            BUTTON_DOWN: [],\n            BUTTON_UP: []\n          }, e[l.SECONDARY] = {\n            BUTTON_DOWN: [],\n            BUTTON_UP: []\n          }, e[l.ANY] = {\n            BUTTON_DOWN: [],\n            BUTTON_UP: []\n          }, e), this.internalState = ((n = {})[l.POINTER] = {\n            BUTTON_DOWN: !1\n          }, n[l.PRIMARY] = {\n            BUTTON_DOWN: !1\n          }, n[l.SECONDARY] = {\n            BUTTON_DOWN: !1\n          }, n[l.ANY] = {\n            BUTTON_DOWN: !1\n          }, n);\n        }\n\n        return Object.defineProperty(t, \"instance\", {\n          get: function get() {\n            return t.ensureInstance(), t._instance;\n          },\n          enumerable: !0,\n          configurable: !0\n        }), t.ensureInstance = function () {\n          t._instance || (t._instance = new t());\n        }, t.prototype.isButtonPressed = function (e) {\n          return this.internalState[e];\n        }, t.prototype.subscribe = function (e, n, t, a) {\n          var r = this;\n          return this.subscriptions[n][e].push(new T(a, t)), function () {\n            return r.unsubscribe(e, n, a);\n          };\n        }, t.prototype.unsubscribe = function (e, n, t) {\n          var a = this.getSubscriptionId(e, n, t);\n          return a > -1 && this.subscriptions[n][e].splice(a, 1);\n        }, t.prototype.handlePointerEvent = function (e) {\n          var n = this.getPointerById(e.buttonId),\n              t = c(c({}, e), {\n            button: n,\n            direction: new p.Vector3().copyFrom(e.direction),\n            origin: new p.Vector3().copyFrom(e.origin),\n            hit: void 0\n          }),\n              a = e.hit ? c(c({}, e.hit), {\n            hitPoint: new p.Vector3().copyFrom(e.hit.hitPoint),\n            normal: new p.Vector3().copyFrom(e.hit.normal),\n            worldNormal: new p.Vector3().copyFrom(e.hit.worldNormal)\n          }) : void 0;\n\n          if (e.type === m.InputEventType.DOWN) {\n            this.internalState[n].BUTTON_DOWN = !0;\n\n            for (var r = 0; r < this.subscriptions[n].BUTTON_DOWN.length; r++) {\n              (o = this.subscriptions[n].BUTTON_DOWN[r]).useRaycast ? t.hit = a : t.hit = void 0, o.fn(t);\n            }\n\n            if (a && a.entityId && x.DisposableComponent.engine) (i = (d = x.DisposableComponent.engine.entities[a.entityId]) && d.getComponentOrNull(u)) && (t.hit = a, i.callback(t));\n          } else {\n            this.internalState[n].BUTTON_DOWN = !1;\n\n            for (r = 0; r < this.subscriptions[n].BUTTON_UP.length; r++) {\n              var o;\n              (o = this.subscriptions[n].BUTTON_UP[r]).useRaycast ? t.hit = a : t.hit = void 0, o.fn(t);\n            }\n\n            var d, i;\n            if (a && a.entityId && x.DisposableComponent.engine) (i = (d = x.DisposableComponent.engine.entities[a.entityId]) && d.getComponentOrNull(f)) && (t.hit = a, i.callback(t));\n          }\n        }, t.prototype.getSubscriptionId = function (e, n, t) {\n          for (var a = 0; a < this.subscriptions[n][e].length; a++) {\n            if (this.subscriptions[n][e][a].fn === t) return a;\n          }\n\n          return -1;\n        }, t.prototype.getPointerById = function (e) {\n          return 0 === e ? l.POINTER : 1 === e ? l.PRIMARY : l.SECONDARY;\n        }, t;\n      }();\n\n      r.Input = C;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      var r = this && this.__read || function (e, n) {\n        var t = \"function\" == typeof Symbol && e[Symbol.iterator];\n        if (!t) return e;\n        var a,\n            r,\n            o = t.call(e),\n            d = [];\n\n        try {\n          for (; (void 0 === n || n-- > 0) && !(a = o.next()).done;) {\n            d.push(a.value);\n          }\n        } catch (e) {\n          r = {\n            error: e\n          };\n        } finally {\n          try {\n            a && !a.done && (t = o.return) && t.call(o);\n          } finally {\n            if (r) throw r.error;\n          }\n        }\n\n        return d;\n      },\n          o = this && this.__spread || function () {\n        for (var e = [], n = 0; n < arguments.length; n++) {\n          e = e.concat(r(arguments[n]));\n        }\n\n        return e;\n      };\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var d = a(7),\n          i = a(0),\n          c = a(8),\n          s = a(32),\n          l = a(1),\n          m = a(12),\n          p = function () {\n        function t(e) {\n          this.eventManager = new c.EventManager(), this.systems = [], this.entityLists = {}, this.addedSystems = [], this._entities = {}, this._disposableComponents = {}, this._componentGroups = {}, this.simpleSystems = [], this.eventManager.addListener(d.ComponentAdded, this, this.componentAddedHandler), this.eventManager.addListener(d.ComponentRemoved, this, this.componentRemovedHandler), this.rootEntity = e, this.firstPersonCameraEntity = new m.Entity(), this.firstPersonCameraEntity.uuid = \"FirstPersonCameraEntityReference\", this.addEntity(this.firstPersonCameraEntity), this.avatarEntity = new m.Entity(), this.avatarEntity.uuid = \"AvatarEntityReference\", this.addEntity(this.avatarEntity);\n        }\n\n        return Object.defineProperty(t.prototype, \"entities\", {\n          get: function get() {\n            return this._entities;\n          },\n          enumerable: !0,\n          configurable: !0\n        }), Object.defineProperty(t.prototype, \"disposableComponents\", {\n          get: function get() {\n            return this._disposableComponents;\n          },\n          enumerable: !0,\n          configurable: !0\n        }), t.prototype.addEntity = function (e) {\n          var n = e.getParent();\n          if (e.isAddedToEngine()) return e;\n\n          for (var t in e.eventManager = this.eventManager, e.engine = this, this._entities[e.uuid] = e, this.checkRequirementsAndAdd(e), n ? n.isAddedToEngine() || n === this.rootEntity || l.log(\"Engine: warning, added an entity with a parent not present in the engine. Parent id: \" + n.uuid) : e.setParent(this.rootEntity), e.alive = !0, e.children) {\n            var a = e.children[t];\n            a && (a.isAddedToEngine() || this.addEntity(a));\n          }\n\n          return e;\n        }, t.prototype.removeEntity = function (e) {\n          var n = e.uuid;\n\n          if (e.isAddedToEngine()) {\n            for (var t in e.components) {\n              var a = this._componentGroups[t];\n              if (a) for (var r in a) {\n                a[r].removeEntity(e);\n              }\n              delete this.entityLists[t][n];\n            }\n\n            for (var o = 0; o < this.simpleSystems.length; o++) {\n              var d = this.simpleSystems[o];\n              d.onRemoveEntity && d.onRemoveEntity(e);\n            }\n\n            for (var o in e.children) {\n              var i = e.children[o];\n              i && this.removeEntity(i);\n            }\n\n            return e.alive = !1, e.eventManager = null, delete this._entities[n], !0;\n          }\n\n          for (var t in l.log(\"Engine: Trying to remove non existent entity from engine.\"), e.isAddedToEngine() ? l.log(\"Engine: Entity id: \" + n) : l.log('Engine: Entity \"' + e.uuid + '\" has not been added to any engine yet.'), l.log(\"Engine: Entity's components:\"), e.components) {\n            l.log(t);\n          }\n\n          return !1;\n        }, t.prototype.addSystem = function (e, n) {\n          if (void 0 === n && (n = 0), -1 !== this.addedSystems.indexOf(e)) return l.log(\"Engine: Trying to add a system that is already added. Aborting\"), e;\n          if (this.systems.length > 0) for (var t = 0; t < this.systems.length; t++) {\n            var a = this.systems[t],\n                r = t === this.systems.length - 1;\n\n            if (a.priority > n) {\n              this.addedSystems.push(e), this.systems.splice(t, 0, {\n                system: e,\n                priority: n\n              });\n              break;\n            }\n\n            if (r) {\n              this.addedSystems.push(e), this.systems.splice(t + 1, 0, {\n                system: e,\n                priority: n\n              });\n              break;\n            }\n          } else this.addedSystems.push(e), this.systems.splice(1, 0, {\n            system: e,\n            priority: n\n          });\n          return this.registerSystem(e), e;\n        }, t.prototype.removeSystem = function (e) {\n          var n = this.addedSystems.indexOf(e);\n\n          if (-1 !== n) {\n            e.active = !1, e.deactivate && e.deactivate(), this.addedSystems.splice(n, 1);\n\n            for (var t = 0; t < this.systems.length; t++) {\n              this.systems[t].system === e && this.systems.splice(t, 1);\n            }\n\n            return !0;\n          }\n\n          return !1;\n        }, t.prototype.update = function (e) {\n          for (var n in this.systems) {\n            var t = this.systems[n].system;\n            if (t.active && t.update) try {\n              t.update(e);\n            } catch (e) {\n              l.error(e);\n            }\n          }\n\n          return this;\n        }, t.prototype.getEntitiesWithComponent = function (e) {\n          var n = \"string\" == typeof e ? e : i.getComponentName(e);\n          return n in this.entityLists ? this.entityLists[n] : this.entityLists[n] = {};\n        }, t.prototype.registerComponent = function (e) {\n          var n = i.getComponentId(e),\n              t = i.getComponentName(e),\n              a = i.getComponentClassId(e);\n          this._disposableComponents[n] = e, null !== a && (this.eventManager.fireEvent(new i.DisposableComponentCreated(n, t, a)), this.eventManager.fireEvent(new i.DisposableComponentUpdated(n, e)));\n        }, t.prototype.disposeComponent = function (e) {\n          var n = i.getComponentId(e);\n          return delete this._disposableComponents[n] && (this.eventManager.fireEvent(new i.DisposableComponentRemoved(n)), e.onDispose && e.onDispose(), !0);\n        }, t.prototype.updateComponent = function (e) {\n          this.eventManager.fireEvent(new i.DisposableComponentUpdated(i.getComponentId(e), e));\n        }, t.prototype.getComponentGroup = function () {\n          for (var e = [], n = 0; n < arguments.length; n++) {\n            e[n] = arguments[n];\n          }\n\n          var t = new (s.ComponentGroup.bind.apply(s.ComponentGroup, o([void 0], e)))();\n          t.active = !0;\n\n          for (var a = t.requiresNames, r = 0; r < a.length; r++) {\n            var d = a[r],\n                i = this._componentGroups[d];\n            i || (this._componentGroups[d] = i = []), -1 === i.indexOf(t) && i.push(t);\n          }\n\n          for (var c in this._entities) {\n            this.checkRequirements(this._entities[c], t);\n          }\n\n          return t;\n        }, t.prototype.removeComponentGroup = function (e) {\n          if (e.active) {\n            e.active = !1;\n\n            for (var n = e.requiresNames, t = 0; t < n.length; t++) {\n              var a = n[t],\n                  r = this._componentGroups[a];\n\n              if (r) {\n                var o = r.indexOf(e);\n                -1 !== o && r.splice(o, 1);\n              }\n            }\n\n            return !0;\n          }\n\n          return !1;\n        }, t.prototype.registerSystem = function (e) {\n          e.active = !0, e.activate && e.activate(this), this.simpleSystems.push(e);\n        }, t.prototype.checkRequirementsAndAdd = function (e) {\n          if (e.isAddedToEngine()) {\n            for (var n in e.components) {\n              n in this.entityLists || (this.entityLists[n] = {}), this.entityLists[n][e.uuid] = e;\n              var t = this._componentGroups[n];\n              if (t) for (var a in t) {\n                this.checkRequirements(e, t[a]);\n              }\n            }\n\n            for (var r = 0; r < this.simpleSystems.length; r++) {\n              var o = this.simpleSystems[r];\n              o.onAddEntity && o.onAddEntity(e);\n            }\n          }\n        }, t.prototype.checkRequirements = function (e, n) {\n          n.meetsRequirements(e) ? n.hasEntity(e) || n.addEntity(e) : n.hasEntity(e) && n.removeEntity(e);\n        }, t.prototype.componentAddedHandler = function (e) {\n          var n,\n              t = e.entity,\n              a = e.componentName;\n\n          if (t.isAddedToEngine()) {\n            this.entityLists[a] ? this.entityLists[a][t.uuid] = t : this.entityLists[a] = ((n = {})[t.uuid] = t, n);\n            var r = this._componentGroups[a];\n            if (r) for (var o in r) {\n              this.checkRequirements(t, r[o]);\n            }\n          }\n        }, t.prototype.componentRemovedHandler = function (e) {\n          var n = e.entity,\n              t = e.componentName;\n\n          if (n.isAddedToEngine()) {\n            delete this.entityLists[t][n.uuid];\n            var a = this._componentGroups[t];\n            if (a) for (var r in a) {\n              this.checkRequirements(n, a[r]);\n            }\n          }\n        }, t;\n      }();\n\n      n.Engine = p;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      var r;\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      }), function (e) {\n        e[e.PERCENT = 0] = \"PERCENT\", e[e.PIXELS = 1] = \"PIXELS\";\n      }(r = n.UIValueType || (n.UIValueType = {}));\n\n      var o = function () {\n        function t(e) {\n          if (this.type = r.PIXELS, \"string\" == typeof e) {\n            var n = e;\n            n.indexOf(\"px\") > -1 ? this.type = r.PIXELS : n.indexOf(\"%\") > -1 && (this.type = r.PERCENT), this.value = parseFloat(n);\n          } else this.value = e;\n        }\n\n        return t.prototype.toString = function () {\n          var e = this.value.toString();\n          return this.type === r.PERCENT ? e += \"%\" : e += \"px\", e;\n        }, t;\n      }();\n\n      n.UIValue = o;\n    }, function (e, n, t) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n      var a = t(1),\n          r = Promise.resolve().then.bind(Promise.resolve());\n\n      n.executeTask = function (e) {\n        var n = r(e);\n        return n.isComplete = !1, n.then(function (e) {\n          n.isComplete = !0, n.result = e, n.didFail = !1;\n        }).catch(function (e) {\n          n.isComplete = !0, n.error = e, n.didFail = !0, a.error(\"executeTask: FAILED \" + e.toString(), e);\n        }), n;\n      };\n    }, function (e, n, a) {\n      \"use strict\";\n\n      var r = this && this.__awaiter || function (e, n, t, r) {\n        return new (t || (t = Promise))(function (o, d) {\n          function s(e) {\n            try {\n              p(r.next(e));\n            } catch (e) {\n              d(e);\n            }\n          }\n\n          function a(e) {\n            try {\n              p(r.throw(e));\n            } catch (e) {\n              d(e);\n            }\n          }\n\n          function p(e) {\n            var n;\n            e.done ? o(e.value) : (n = e.value, n instanceof t ? n : new t(function (e) {\n              e(n);\n            })).then(s, a);\n          }\n\n          p((r = r.apply(e, n || [])).next());\n        });\n      },\n          o = this && this.__generator || function (e, n) {\n        var t,\n            r,\n            o,\n            d,\n            i = {\n          label: 0,\n          sent: function sent() {\n            if (1 & o[0]) throw o[1];\n            return o[1];\n          },\n          trys: [],\n          ops: []\n        };\n        return d = {\n          next: a(0),\n          throw: a(1),\n          return: a(2)\n        }, \"function\" == typeof Symbol && (d[Symbol.iterator] = function () {\n          return this;\n        }), d;\n\n        function a(a) {\n          return function (d) {\n            return function (a) {\n              if (t) throw new TypeError(\"Generator is already executing.\");\n\n              for (; i;) {\n                try {\n                  if (t = 1, r && (o = 2 & a[0] ? r.return : a[0] ? r.throw || ((o = r.return) && o.call(r), 0) : r.next) && !(o = o.call(r, a[1])).done) return o;\n\n                  switch (r = 0, o && (a = [2 & a[0], o.value]), a[0]) {\n                    case 0:\n                    case 1:\n                      o = a;\n                      break;\n\n                    case 4:\n                      return i.label++, {\n                        value: a[1],\n                        done: !1\n                      };\n\n                    case 5:\n                      i.label++, r = a[1], a = [0];\n                      continue;\n\n                    case 7:\n                      a = i.ops.pop(), i.trys.pop();\n                      continue;\n\n                    default:\n                      if (!(o = i.trys, (o = o.length > 0 && o[o.length - 1]) || 6 !== a[0] && 2 !== a[0])) {\n                        i = 0;\n                        continue;\n                      }\n\n                      if (3 === a[0] && (!o || a[1] > o[0] && a[1] < o[3])) {\n                        i.label = a[1];\n                        break;\n                      }\n\n                      if (6 === a[0] && i.label < o[1]) {\n                        i.label = o[1], o = a;\n                        break;\n                      }\n\n                      if (o && i.label < o[2]) {\n                        i.label = o[2], i.ops.push(a);\n                        break;\n                      }\n\n                      o[2] && i.ops.pop(), i.trys.pop();\n                      continue;\n                  }\n\n                  a = n.call(e, i);\n                } catch (e) {\n                  a = [6, e], r = 0;\n                } finally {\n                  t = o = 0;\n                }\n              }\n\n              if (5 & a[0]) throw a[1];\n              return {\n                value: a[0] ? a[1] : void 0,\n                done: !0\n              };\n            }([a, d]);\n          };\n        }\n      },\n          d = this && this.__values || function (e) {\n        var n = \"function\" == typeof Symbol && Symbol.iterator,\n            t = n && e[n],\n            a = 0;\n        if (t) return t.call(e);\n        if (e && \"number\" == typeof e.length) return {\n          next: function next() {\n            return e && a >= e.length && (e = void 0), {\n              value: e && e[a++],\n              done: !e\n            };\n          }\n        };\n        throw new TypeError(n ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n      };\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var i = a(19),\n          c = function () {\n        function t(e, n, t, a) {\n          void 0 === n && (n = !1), this.initalize(e, n, t, a);\n        }\n\n        return t.prototype.initalize = function (e, n, t, a) {\n          return void 0 === n && (n = !1), this.mask = e, this.skipNextObservers = n, this.target = t, this.currentTarget = a, this;\n        }, t;\n      }();\n\n      n.ObserverEventState = c;\n\n      var s = function s(e, n, t) {\n        void 0 === t && (t = null), this.callback = e, this.mask = n, this.scope = t, this.unregisterOnNextCall = !1, this._willBeUnregistered = !1;\n      };\n\n      n.Observer = s;\n\n      var l = function () {\n        function t() {\n          this._observers = null, this._observables = null;\n        }\n\n        return t.Watch = function (e, n, a, r) {\n          var o, i;\n          void 0 === a && (a = -1), void 0 === r && (r = null);\n          var c = new t();\n          c._observers = new Array(), c._observables = e;\n\n          try {\n            for (var s = d(e), l = s.next(); !l.done; l = s.next()) {\n              var m = l.value.add(n, a, !1, r);\n              m && c._observers.push(m);\n            }\n          } catch (e) {\n            o = {\n              error: e\n            };\n          } finally {\n            try {\n              l && !l.done && (i = s.return) && i.call(s);\n            } finally {\n              if (o) throw o.error;\n            }\n          }\n\n          return c;\n        }, t.prototype.dispose = function () {\n          if (this._observers && this._observables) for (var e = 0; e < this._observers.length; e++) {\n            this._observables[e].remove(this._observers[e]);\n          }\n          this._observers = null, this._observables = null;\n        }, t;\n      }();\n\n      n.MultiObserver = l;\n\n      var m = function () {\n        function t(e) {\n          this._observers = new Array(), this._onObserverAdded = null, this._eventState = new c(0), e && (this._onObserverAdded = e);\n        }\n\n        return t.prototype.add = function (e, n, t, a, r) {\n          if (void 0 === n && (n = -1), void 0 === t && (t = !1), void 0 === a && (a = null), void 0 === r && (r = !1), !e) return null;\n          var o = new s(e, n, a);\n          return o.unregisterOnNextCall = r, t ? this._observers.unshift(o) : this._observers.push(o), this._onObserverAdded && this._onObserverAdded(o), o;\n        }, t.prototype.addOnce = function (e) {\n          return this.add(e, void 0, void 0, void 0, !0);\n        }, t.prototype.remove = function (e) {\n          return !!e && -1 !== this._observers.indexOf(e) && (this._deferUnregister(e), !0);\n        }, t.prototype.removeCallback = function (e, n) {\n          for (var t = 0; t < this._observers.length; t++) {\n            if (this._observers[t].callback === e && (!n || n === this._observers[t].scope)) return this._deferUnregister(this._observers[t]), !0;\n          }\n\n          return !1;\n        }, t.prototype.notifyObservers = function (e, n, t, a) {\n          var r, o;\n          if (void 0 === n && (n = -1), !this._observers.length) return !0;\n          var i = this._eventState;\n          i.mask = n, i.target = t, i.currentTarget = a, i.skipNextObservers = !1, i.lastReturnValue = e;\n\n          try {\n            for (var c = d(this._observers), s = c.next(); !s.done; s = c.next()) {\n              var l = s.value;\n              if (!l._willBeUnregistered && (l.mask & n && (l.scope ? i.lastReturnValue = l.callback.apply(l.scope, [e, i]) : i.lastReturnValue = l.callback(e, i), l.unregisterOnNextCall && this._deferUnregister(l)), i.skipNextObservers)) return !1;\n            }\n          } catch (e) {\n            r = {\n              error: e\n            };\n          } finally {\n            try {\n              s && !s.done && (o = c.return) && o.call(c);\n            } finally {\n              if (r) throw r.error;\n            }\n          }\n\n          return !0;\n        }, t.prototype.notifyObserversWithPromise = function (e, n, t, a) {\n          var r = this;\n          void 0 === n && (n = -1);\n          var o = Promise.resolve(e);\n          if (!this._observers.length) return o;\n          var d = this._eventState;\n          return d.mask = n, d.target = t, d.currentTarget = a, d.skipNextObservers = !1, this._observers.forEach(function (t) {\n            d.skipNextObservers || t._willBeUnregistered || t.mask & n && (o = t.scope ? o.then(function (n) {\n              return d.lastReturnValue = n, t.callback.apply(t.scope, [e, d]);\n            }) : o.then(function (n) {\n              return d.lastReturnValue = n, t.callback(e, d);\n            }), t.unregisterOnNextCall && r._deferUnregister(t));\n          }), o.then(function () {\n            return e;\n          });\n        }, t.prototype.notifyObserver = function (e, n, t) {\n          void 0 === t && (t = -1);\n          var a = this._eventState;\n          a.mask = t, a.skipNextObservers = !1, e.callback(n, a);\n        }, t.prototype.hasObservers = function () {\n          return this._observers.length > 0;\n        }, t.prototype.clear = function () {\n          this._observers = new Array(), this._onObserverAdded = null;\n        }, t.prototype.clone = function () {\n          var e = new t();\n          return e._observers = this._observers.slice(0), e;\n        }, t.prototype.hasSpecificMask = function (e) {\n          var n, t;\n          void 0 === e && (e = -1);\n\n          try {\n            for (var a = d(this._observers), r = a.next(); !r.done; r = a.next()) {\n              var o = r.value;\n              if (o.mask & e || o.mask === e) return !0;\n            }\n          } catch (e) {\n            n = {\n              error: e\n            };\n          } finally {\n            try {\n              r && !r.done && (t = a.return) && t.call(a);\n            } finally {\n              if (n) throw n.error;\n            }\n          }\n\n          return !1;\n        }, t.prototype._deferUnregister = function (e) {\n          var n = this;\n          e.unregisterOnNextCall = !1, e._willBeUnregistered = !0, i.executeTask(function () {\n            return r(n, void 0, void 0, function () {\n              return o(this, function (n) {\n                return [2, this._remove(e)];\n              });\n            });\n          });\n        }, t.prototype._remove = function (e) {\n          if (!e) return !1;\n\n          var n = this._observers.indexOf(e);\n\n          return -1 !== n && (this._observers.splice(n, 1), !0);\n        }, t;\n      }();\n\n      n.Observable = m;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(2),\n          o = a(6),\n          d = a(3),\n          i = function () {\n        function t(e, n, t, a) {\n          this.x = e, this.y = n, this.z = t, this.w = a;\n        }\n\n        return t.Add = function (e, n) {\n          return new t(e.x, e.y, e.z, e.w).addInPlace(n);\n        }, t.FromArray = function (e, n) {\n          return void 0 === n && (n = 0), new t(e[n], e[n + 1], e[n + 2], e[n + 3]);\n        }, t.FromArrayToRef = function (e, n, t) {\n          t.x = e[n], t.y = e[n + 1], t.z = e[n + 2], t.w = e[n + 3];\n        }, t.FromFloatArrayToRef = function (e, n, a) {\n          t.FromArrayToRef(e, n, a);\n        }, t.FromFloatsToRef = function (e, n, t, a, r) {\n          r.x = e, r.y = n, r.z = t, r.w = a;\n        }, t.Zero = function () {\n          return new t(0, 0, 0, 0);\n        }, t.One = function () {\n          return new t(1, 1, 1, 1);\n        }, t.Normalize = function (e) {\n          var n = t.Zero();\n          return t.NormalizeToRef(e, n), n;\n        }, t.NormalizeToRef = function (e, n) {\n          n.copyFrom(e), n.normalize();\n        }, t.Minimize = function (e, n) {\n          var a = new t(e.x, e.y, e.z, e.w);\n          return a.minimizeInPlace(n), a;\n        }, t.Maximize = function (e, n) {\n          var a = new t(e.x, e.y, e.z, e.w);\n          return a.maximizeInPlace(n), a;\n        }, t.Distance = function (e, n) {\n          return Math.sqrt(t.DistanceSquared(e, n));\n        }, t.DistanceSquared = function (e, n) {\n          var t = e.x - n.x,\n              a = e.y - n.y,\n              r = e.z - n.z,\n              o = e.w - n.w;\n          return t * t + a * a + r * r + o * o;\n        }, t.Center = function (e, n) {\n          var a = t.Add(e, n);\n          return a.scaleInPlace(.5), a;\n        }, t.TransformNormal = function (e, n) {\n          var a = t.Zero();\n          return t.TransformNormalToRef(e, n, a), a;\n        }, t.TransformNormalToRef = function (e, n, t) {\n          var a = n.m,\n              r = e.x * a[0] + e.y * a[4] + e.z * a[8],\n              o = e.x * a[1] + e.y * a[5] + e.z * a[9],\n              d = e.x * a[2] + e.y * a[6] + e.z * a[10];\n          t.x = r, t.y = o, t.z = d, t.w = e.w;\n        }, t.TransformNormalFromFloatsToRef = function (e, n, t, a, r, o) {\n          var d = r.m;\n          o.x = e * d[0] + n * d[4] + t * d[8], o.y = e * d[1] + n * d[5] + t * d[9], o.z = e * d[2] + n * d[6] + t * d[10], o.w = a;\n        }, t.prototype.toString = function () {\n          return \"{X: \" + this.x + \" Y:\" + this.y + \" Z:\" + this.z + \" W:\" + this.w + \"}\";\n        }, t.prototype.getClassName = function () {\n          return \"Vector4\";\n        }, t.prototype.getHashCode = function () {\n          var e = this.x || 0;\n          return e = 397 * (e = 397 * (e = 397 * e ^ (this.y || 0)) ^ (this.z || 0)) ^ (this.w || 0);\n        }, t.prototype.asArray = function () {\n          var e = new Array();\n          return this.toArray(e, 0), e;\n        }, t.prototype.toArray = function (e, n) {\n          return void 0 === n && (n = 0), e[n] = this.x, e[n + 1] = this.y, e[n + 2] = this.z, e[n + 3] = this.w, this;\n        }, t.prototype.addInPlace = function (e) {\n          return this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this;\n        }, t.prototype.add = function (e) {\n          return new t(this.x + e.x, this.y + e.y, this.z + e.z, this.w + e.w);\n        }, t.prototype.addToRef = function (e, n) {\n          return n.x = this.x + e.x, n.y = this.y + e.y, n.z = this.z + e.z, n.w = this.w + e.w, this;\n        }, t.prototype.subtractInPlace = function (e) {\n          return this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this;\n        }, t.prototype.subtract = function (e) {\n          return new t(this.x - e.x, this.y - e.y, this.z - e.z, this.w - e.w);\n        }, t.prototype.subtractToRef = function (e, n) {\n          return n.x = this.x - e.x, n.y = this.y - e.y, n.z = this.z - e.z, n.w = this.w - e.w, this;\n        }, t.prototype.subtractFromFloats = function (e, n, a, r) {\n          return new t(this.x - e, this.y - n, this.z - a, this.w - r);\n        }, t.prototype.subtractFromFloatsToRef = function (e, n, t, a, r) {\n          return r.x = this.x - e, r.y = this.y - n, r.z = this.z - t, r.w = this.w - a, this;\n        }, t.prototype.negate = function () {\n          return new t(-this.x, -this.y, -this.z, -this.w);\n        }, t.prototype.scaleInPlace = function (e) {\n          return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;\n        }, t.prototype.scale = function (e) {\n          return new t(this.x * e, this.y * e, this.z * e, this.w * e);\n        }, t.prototype.scaleToRef = function (e, n) {\n          return n.x = this.x * e, n.y = this.y * e, n.z = this.z * e, n.w = this.w * e, this;\n        }, t.prototype.scaleAndAddToRef = function (e, n) {\n          return n.x += this.x * e, n.y += this.y * e, n.z += this.z * e, n.w += this.w * e, this;\n        }, t.prototype.equals = function (e) {\n          return e && this.x === e.x && this.y === e.y && this.z === e.z && this.w === e.w;\n        }, t.prototype.equalsWithEpsilon = function (e, n) {\n          return void 0 === n && (n = r.Epsilon), e && o.Scalar.WithinEpsilon(this.x, e.x, n) && o.Scalar.WithinEpsilon(this.y, e.y, n) && o.Scalar.WithinEpsilon(this.z, e.z, n) && o.Scalar.WithinEpsilon(this.w, e.w, n);\n        }, t.prototype.equalsToFloats = function (e, n, t, a) {\n          return this.x === e && this.y === n && this.z === t && this.w === a;\n        }, t.prototype.multiplyInPlace = function (e) {\n          return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this;\n        }, t.prototype.multiply = function (e) {\n          return new t(this.x * e.x, this.y * e.y, this.z * e.z, this.w * e.w);\n        }, t.prototype.multiplyToRef = function (e, n) {\n          return n.x = this.x * e.x, n.y = this.y * e.y, n.z = this.z * e.z, n.w = this.w * e.w, this;\n        }, t.prototype.multiplyByFloats = function (e, n, a, r) {\n          return new t(this.x * e, this.y * n, this.z * a, this.w * r);\n        }, t.prototype.divide = function (e) {\n          return new t(this.x / e.x, this.y / e.y, this.z / e.z, this.w / e.w);\n        }, t.prototype.divideToRef = function (e, n) {\n          return n.x = this.x / e.x, n.y = this.y / e.y, n.z = this.z / e.z, n.w = this.w / e.w, this;\n        }, t.prototype.divideInPlace = function (e) {\n          return this.divideToRef(e, this);\n        }, t.prototype.minimizeInPlace = function (e) {\n          return e.x < this.x && (this.x = e.x), e.y < this.y && (this.y = e.y), e.z < this.z && (this.z = e.z), e.w < this.w && (this.w = e.w), this;\n        }, t.prototype.maximizeInPlace = function (e) {\n          return e.x > this.x && (this.x = e.x), e.y > this.y && (this.y = e.y), e.z > this.z && (this.z = e.z), e.w > this.w && (this.w = e.w), this;\n        }, t.prototype.floor = function () {\n          return new t(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));\n        }, t.prototype.fract = function () {\n          return new t(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z), this.w - Math.floor(this.w));\n        }, t.prototype.length = function () {\n          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n        }, t.prototype.lengthSquared = function () {\n          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n        }, t.prototype.normalize = function () {\n          var e = this.length();\n          return 0 === e ? this : this.scaleInPlace(1 / e);\n        }, t.prototype.toVector3 = function () {\n          return new d.Vector3(this.x, this.y, this.z);\n        }, t.prototype.clone = function () {\n          return new t(this.x, this.y, this.z, this.w);\n        }, t.prototype.copyFrom = function (e) {\n          return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w, this;\n        }, t.prototype.copyFromFloats = function (e, n, t, a) {\n          return this.x = e, this.y = n, this.z = t, this.w = a, this;\n        }, t.prototype.set = function (e, n, t, a) {\n          return this.copyFromFloats(e, n, t, a);\n        }, t.prototype.setAll = function (e) {\n          return this.x = this.y = this.z = this.w = e, this;\n        }, t;\n      }();\n\n      n.Vector4 = i;\n    }, function (e, n, t) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var a = function () {\n        function t(e) {\n          this._radians = e, this._radians < 0 && (this._radians += 2 * Math.PI);\n        }\n\n        return t.BetweenTwoPoints = function (e, n) {\n          var a = n.subtract(e);\n          return new t(Math.atan2(a.y, a.x));\n        }, t.FromRadians = function (e) {\n          return new t(e);\n        }, t.FromDegrees = function (e) {\n          return new t(e * Math.PI / 180);\n        }, t.prototype.degrees = function () {\n          return 180 * this._radians / Math.PI;\n        }, t.prototype.radians = function () {\n          return this._radians;\n        }, t;\n      }();\n\n      n.Angle = a;\n    }, function (e, n, t) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var a = t(22),\n          r = t(15),\n          o = t(2),\n          d = function d(e, n, t) {\n        this.startPoint = e, this.midPoint = n, this.endPoint = t;\n        var d = Math.pow(n.x, 2) + Math.pow(n.y, 2),\n            i = (Math.pow(e.x, 2) + Math.pow(e.y, 2) - d) / 2,\n            c = (d - Math.pow(t.x, 2) - Math.pow(t.y, 2)) / 2,\n            s = (e.x - n.x) * (n.y - t.y) - (n.x - t.x) * (e.y - n.y);\n        this.centerPoint = new r.Vector2((i * (n.y - t.y) - c * (e.y - n.y)) / s, ((e.x - n.x) * c - (n.x - t.x) * i) / s), this.radius = this.centerPoint.subtract(this.startPoint).length(), this.startAngle = a.Angle.BetweenTwoPoints(this.centerPoint, this.startPoint);\n        var l = this.startAngle.degrees(),\n            m = a.Angle.BetweenTwoPoints(this.centerPoint, this.midPoint).degrees(),\n            p = a.Angle.BetweenTwoPoints(this.centerPoint, this.endPoint).degrees();\n        m - l > 180 && (m -= 360), m - l < -180 && (m += 360), p - m > 180 && (p -= 360), p - m < -180 && (p += 360), this.orientation = m - l < 0 ? o.Orientation.CW : o.Orientation.CCW, this.angle = a.Angle.FromDegrees(this.orientation === o.Orientation.CW ? l - p : p - l);\n      };\n\n      n.Arc2 = d;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(6),\n          o = a(2),\n          d = function () {\n        function t(e, n, t, a) {\n          void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === t && (t = 0), void 0 === a && (a = 1), this.r = e, this.g = n, this.b = t, this.a = a;\n        }\n\n        return t.FromHexString = function (e) {\n          if (\"#\" !== e.substring(0, 1) || 9 !== e.length) return new t(0, 0, 0, 0);\n          var n = parseInt(e.substring(1, 3), 16),\n              a = parseInt(e.substring(3, 5), 16),\n              r = parseInt(e.substring(5, 7), 16),\n              o = parseInt(e.substring(7, 9), 16);\n          return t.FromInts(n, a, r, o);\n        }, t.Lerp = function (e, n, a) {\n          var r = new t(0, 0, 0, 0);\n          return t.LerpToRef(e, n, a, r), r;\n        }, t.LerpToRef = function (e, n, t, a) {\n          a.r = e.r + (n.r - e.r) * t, a.g = e.g + (n.g - e.g) * t, a.b = e.b + (n.b - e.b) * t, a.a = e.a + (n.a - e.a) * t;\n        }, t.Red = function () {\n          return new t(1, 0, 0, 1);\n        }, t.Green = function () {\n          return new t(0, 1, 0, 1);\n        }, t.Blue = function () {\n          return new t(0, 0, 1, 1);\n        }, t.Black = function () {\n          return new t(0, 0, 0, 1);\n        }, t.White = function () {\n          return new t(1, 1, 1, 1);\n        }, t.Purple = function () {\n          return new t(.5, 0, .5, 1);\n        }, t.Magenta = function () {\n          return new t(1, 0, 1, 1);\n        }, t.Yellow = function () {\n          return new t(1, 1, 0, 1);\n        }, t.Gray = function () {\n          return new t(.5, .5, .5, 1);\n        }, t.Teal = function () {\n          return new t(0, 1, 1, 1);\n        }, t.Clear = function () {\n          return new t(0, 0, 0, 0);\n        }, t.FromColor3 = function (e, n) {\n          return void 0 === n && (n = 1), new t(e.r, e.g, e.b, n);\n        }, t.FromArray = function (e, n) {\n          return void 0 === n && (n = 0), new t(e[n], e[n + 1], e[n + 2], e[n + 3]);\n        }, t.FromInts = function (e, n, a, r) {\n          return new t(e / 255, n / 255, a / 255, r / 255);\n        }, t.CheckColors4 = function (e, n) {\n          if (e.length === 3 * n) {\n            for (var t = [], a = 0; a < e.length; a += 3) {\n              var r = a / 3 * 4;\n              t[r] = e[a], t[r + 1] = e[a + 1], t[r + 2] = e[a + 2], t[r + 3] = 1;\n            }\n\n            return t;\n          }\n\n          return e;\n        }, t.prototype.addInPlace = function (e) {\n          return this.r += e.r, this.g += e.g, this.b += e.b, this.a += e.a, this;\n        }, t.prototype.asArray = function () {\n          var e = new Array();\n          return this.toArray(e, 0), e;\n        }, t.prototype.toArray = function (e, n) {\n          return void 0 === n && (n = 0), e[n] = this.r, e[n + 1] = this.g, e[n + 2] = this.b, e[n + 3] = this.a, this;\n        }, t.prototype.add = function (e) {\n          return new t(this.r + e.r, this.g + e.g, this.b + e.b, this.a + e.a);\n        }, t.prototype.subtract = function (e) {\n          return new t(this.r - e.r, this.g - e.g, this.b - e.b, this.a - e.a);\n        }, t.prototype.subtractToRef = function (e, n) {\n          return n.r = this.r - e.r, n.g = this.g - e.g, n.b = this.b - e.b, n.a = this.a - e.a, this;\n        }, t.prototype.scale = function (e) {\n          return new t(this.r * e, this.g * e, this.b * e, this.a * e);\n        }, t.prototype.scaleToRef = function (e, n) {\n          return n.r = this.r * e, n.g = this.g * e, n.b = this.b * e, n.a = this.a * e, this;\n        }, t.prototype.scaleAndAddToRef = function (e, n) {\n          return n.r += this.r * e, n.g += this.g * e, n.b += this.b * e, n.a += this.a * e, this;\n        }, t.prototype.clampToRef = function (e, n, t) {\n          return void 0 === e && (e = 0), void 0 === n && (n = 1), t.r = r.Scalar.Clamp(this.r, e, n), t.g = r.Scalar.Clamp(this.g, e, n), t.b = r.Scalar.Clamp(this.b, e, n), t.a = r.Scalar.Clamp(this.a, e, n), this;\n        }, t.prototype.multiply = function (e) {\n          return new t(this.r * e.r, this.g * e.g, this.b * e.b, this.a * e.a);\n        }, t.prototype.multiplyToRef = function (e, n) {\n          return n.r = this.r * e.r, n.g = this.g * e.g, n.b = this.b * e.b, n.a = this.a * e.a, n;\n        }, t.prototype.toString = function () {\n          return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \" A:\" + this.a + \"}\";\n        }, t.prototype.getClassName = function () {\n          return \"Color4\";\n        }, t.prototype.getHashCode = function () {\n          var e = this.r || 0;\n          return e = 397 * (e = 397 * (e = 397 * e ^ (this.g || 0)) ^ (this.b || 0)) ^ (this.a || 0);\n        }, t.prototype.clone = function () {\n          return new t(this.r, this.g, this.b, this.a);\n        }, t.prototype.copyFrom = function (e) {\n          return this.r = e.r, this.g = e.g, this.b = e.b, this.a = e.a, this;\n        }, t.prototype.copyFromFloats = function (e, n, t, a) {\n          return this.r = e, this.g = n, this.b = t, this.a = a, this;\n        }, t.prototype.set = function (e, n, t, a) {\n          return this.copyFromFloats(e, n, t, a);\n        }, t.prototype.toHexString = function () {\n          var e = 255 * this.r | 0,\n              n = 255 * this.g | 0,\n              t = 255 * this.b | 0,\n              a = 255 * this.a | 0;\n          return \"#\" + r.Scalar.ToHex(e) + r.Scalar.ToHex(n) + r.Scalar.ToHex(t) + r.Scalar.ToHex(a);\n        }, t.prototype.toLinearSpace = function () {\n          var e = new t();\n          return this.toLinearSpaceToRef(e), e;\n        }, t.prototype.toLinearSpaceToRef = function (e) {\n          return e.r = Math.pow(this.r, o.ToLinearSpace), e.g = Math.pow(this.g, o.ToLinearSpace), e.b = Math.pow(this.b, o.ToLinearSpace), e.a = this.a, this;\n        }, t.prototype.toGammaSpace = function () {\n          var e = new t();\n          return this.toGammaSpaceToRef(e), e;\n        }, t.prototype.toGammaSpaceToRef = function (e) {\n          return e.r = Math.pow(this.r, o.ToGammaSpace), e.g = Math.pow(this.g, o.ToGammaSpace), e.b = Math.pow(this.b, o.ToGammaSpace), e.a = this.a, this;\n        }, t;\n      }();\n\n      n.Color4 = d;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(3),\n          o = a(11),\n          d = a(9),\n          i = function () {\n        function t(e, n, t, a) {\n          this.normal = new r.Vector3(e, n, t), this.d = a;\n        }\n\n        return t.FromArray = function (e) {\n          return new t(e[0], e[1], e[2], e[3]);\n        }, t.FromPoints = function (e, n, a) {\n          var r = new t(0, 0, 0, 0);\n          return r.copyFromPoints(e, n, a), r;\n        }, t.FromPositionAndNormal = function (e, n) {\n          var a = new t(0, 0, 0, 0);\n          return n.normalize(), a.normal = n, a.d = -(n.x * e.x + n.y * e.y + n.z * e.z), a;\n        }, t.SignedDistanceToPlaneFromPositionAndNormal = function (e, n, t) {\n          var a = -(n.x * e.x + n.y * e.y + n.z * e.z);\n          return r.Vector3.Dot(t, n) + a;\n        }, t.prototype.asArray = function () {\n          return [this.normal.x, this.normal.y, this.normal.z, this.d];\n        }, t.prototype.clone = function () {\n          return new t(this.normal.x, this.normal.y, this.normal.z, this.d);\n        }, t.prototype.getClassName = function () {\n          return \"Plane\";\n        }, t.prototype.getHashCode = function () {\n          var e = this.normal.getHashCode();\n          return e = 397 * e ^ (this.d || 0);\n        }, t.prototype.normalize = function () {\n          var e = Math.sqrt(this.normal.x * this.normal.x + this.normal.y * this.normal.y + this.normal.z * this.normal.z),\n              n = 0;\n          return 0 !== e && (n = 1 / e), this.normal.x *= n, this.normal.y *= n, this.normal.z *= n, this.d *= n, this;\n        }, t.prototype.transform = function (e) {\n          var n = d.MathTmp.Matrix[0];\n          o.Matrix.TransposeToRef(e, n);\n          var a = n.m,\n              r = this.normal.x,\n              i = this.normal.y,\n              c = this.normal.z,\n              s = this.d;\n          return new t(r * a[0] + i * a[1] + c * a[2] + s * a[3], r * a[4] + i * a[5] + c * a[6] + s * a[7], r * a[8] + i * a[9] + c * a[10] + s * a[11], r * a[12] + i * a[13] + c * a[14] + s * a[15]);\n        }, t.prototype.dotCoordinate = function (e) {\n          return this.normal.x * e.x + this.normal.y * e.y + this.normal.z * e.z + this.d;\n        }, t.prototype.copyFromPoints = function (e, n, t) {\n          var a,\n              r = n.x - e.x,\n              o = n.y - e.y,\n              d = n.z - e.z,\n              i = t.x - e.x,\n              c = t.y - e.y,\n              s = t.z - e.z,\n              l = o * s - d * c,\n              m = d * i - r * s,\n              p = r * c - o * i,\n              x = Math.sqrt(l * l + m * m + p * p);\n          return a = 0 !== x ? 1 / x : 0, this.normal.x = l * a, this.normal.y = m * a, this.normal.z = p * a, this.d = -(this.normal.x * e.x + this.normal.y * e.y + this.normal.z * e.z), this;\n        }, t.prototype.isFrontFacingTo = function (e, n) {\n          return r.Vector3.Dot(this.normal, e) <= n;\n        }, t.prototype.signedDistanceTo = function (e) {\n          return r.Vector3.Dot(e, this.normal) + this.d;\n        }, t;\n      }();\n\n      n.Plane = i;\n    }, function (t, a, r) {\n      \"use strict\";\n\n      var _o4,\n          d = this && this.__extends || (_o4 = function o(e, n) {\n        return (_o4 = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (e, n) {\n          e.__proto__ = n;\n        } || function (e, n) {\n          for (var t in n) {\n            n.hasOwnProperty(t) && (e[t] = n[t]);\n          }\n        })(e, n);\n      }, function (e, t) {\n        function n() {\n          this.constructor = e;\n        }\n\n        _o4(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());\n      }),\n          i = this && this.__assign || function () {\n        return (i = Object.assign || function (e) {\n          for (var n, t = 1, a = arguments.length; t < a; t++) {\n            for (var r in n = arguments[t]) {\n              Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n            }\n          }\n\n          return e;\n        }).apply(this, arguments);\n      },\n          c = this && this.__decorate || function (e, n, t, a) {\n        var r,\n            o = arguments.length,\n            d = o < 3 ? n : null === a ? a = Object.getOwnPropertyDescriptor(n, t) : a;\n        if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) d = Reflect.decorate(e, n, t, a);else for (var i = e.length - 1; i >= 0; i--) {\n          (r = e[i]) && (d = (o < 3 ? r(d) : o > 3 ? r(n, t, d) : r(n, t)) || d);\n        }\n        return o > 3 && d && Object.defineProperty(n, t, d), d;\n      };\n\n      Object.defineProperty(a, \"__esModule\", {\n        value: !0\n      });\n\n      var s = r(0),\n          l = r(1),\n          m = {\n        looping: !0,\n        speed: 1,\n        weight: 1\n      },\n          p = function (n) {\n        function e(e, t) {\n          void 0 === t && (t = m);\n          var a = n.call(this) || this;\n          return a.isAnimationClip = !0, a.looping = m.looping, a.weight = m.weight, a.playing = !1, a.shouldReset = !1, a.speed = m.speed, a.name = l.newId(\"AnimClip\"), a.clip = e, a.setParams(i({}, t)), a;\n        }\n\n        return d(e, n), e.prototype.setParams = function (e) {\n          return this.looping = void 0 !== e.looping ? e.looping : this.looping, this.speed = e.speed || this.speed, this;\n        }, e.prototype.toJSON = function () {\n          var e = JSON.parse(JSON.stringify(n.prototype.toJSON.call(this)));\n          return this.shouldReset && (this.shouldReset = !1), e;\n        }, e.prototype.play = function () {\n          this.playing = !0;\n        }, e.prototype.pause = function () {\n          this.playing = !1;\n        }, e.prototype.reset = function () {\n          this.shouldReset = !0;\n        }, e.prototype.stop = function () {\n          this.reset(), this.pause();\n        }, c([s.ObservableComponent.readonly], e.prototype, \"clip\", void 0), c([s.ObservableComponent.field], e.prototype, \"looping\", void 0), c([s.ObservableComponent.field], e.prototype, \"weight\", void 0), c([s.ObservableComponent.field], e.prototype, \"playing\", void 0), c([s.ObservableComponent.field], e.prototype, \"shouldReset\", void 0), c([s.ObservableComponent.field], e.prototype, \"speed\", void 0), c([s.ObservableComponent.readonly], e.prototype, \"name\", void 0), e;\n      }(s.ObservableComponent);\n\n      a.AnimationState = p;\n    }, function (e, n, t) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      }), function (e) {\n        e[e.DOWN = 0] = \"DOWN\", e[e.UP = 1] = \"UP\";\n      }(n.InputEventType || (n.InputEventType = {})), n.AVATAR_OBSERVABLE = \"AVATAR_OBSERVABLE\";\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n      var r,\n          o = a(5),\n          d = a(1),\n          i = a(29);\n      !function (e) {\n        e.HitFirst = \"rqhf\", e.HitAll = \"rqha\";\n      }(r || (r = {}));\n\n      var c = function () {\n        function t() {\n          this.queries = {};\n        }\n\n        return Object.defineProperty(t, \"instance\", {\n          get: function get() {\n            return t.ensureInstance(), t._instance;\n          },\n          enumerable: !0,\n          configurable: !0\n        }), t.ensureInstance = function () {\n          t._instance || (t._instance = new t());\n        }, t.prototype.getRayFromCamera = function (e) {\n          var n = i.Camera.instance.rotation,\n              t = o.Matrix.Identity();\n          n.toRotationMatrix(t);\n          var a = o.Vector3.TransformCoordinates(o.Vector3.Forward(), t);\n          return {\n            origin: i.Camera.instance.position,\n            direction: a,\n            distance: e\n          };\n        }, t.prototype.getRayFromPositions = function (e, n) {\n          var t = n.subtract(e),\n              a = t.length();\n          return {\n            origin: e,\n            direction: t.normalize(),\n            distance: a\n          };\n        }, t.prototype.hitFirst = function (e, n, t) {\n          var a = \"number\" == typeof t ? r.HitFirst + t : d.uuid();\n          this.queries[a] = n, dcl && dcl.query(\"raycast\", {\n            queryId: a,\n            queryType: \"HitFirst\",\n            ray: e\n          });\n        }, t.prototype.hitAll = function (e, n, t) {\n          var a = \"number\" == typeof t ? r.HitAll + t : d.uuid();\n          this.queries[a] = n, dcl && dcl.query(\"raycast\", {\n            queryId: a,\n            queryType: \"HitAll\",\n            ray: e\n          });\n        }, t.prototype.hitFirstAvatar = function (e, n) {\n          d.log(\"not implemented yet\");\n        }, t.prototype.hitAllAvatars = function (e, n) {\n          d.log(\"not implemented yet\");\n        }, t.prototype.handleRaycastHitFirstResponse = function (e) {\n          this.queries[e.payload.queryId](e.payload.payload), delete this.queries[e.payload.queryId];\n        }, t.prototype.handleRaycastHitAllResponse = function (e) {\n          this.queries[e.payload.queryId](e.payload.payload), delete this.queries[e.payload.queryId];\n        }, t;\n      }();\n\n      n.PhysicsCast = c;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(5),\n          o = function () {\n        function t() {\n          var e = this;\n          this.position = new r.Vector3(), this.rotation = new r.Quaternion(), this.feetPosition = new r.Vector3(), this.worldPosition = new r.Vector3(), this.lastEventPosition = {\n            x: 0,\n            y: 0,\n            z: 0\n          }, this.lastEventWorldPosition = {\n            x: 0,\n            y: 0,\n            z: 0\n          }, this.lastEventRotation = {\n            x: 0,\n            y: 0,\n            z: 0,\n            w: 1\n          }, this._playerHeight = 1.6, \"undefined\" != typeof dcl && (dcl.subscribe(\"positionChanged\"), dcl.subscribe(\"rotationChanged\"), dcl.onEvent(function (n) {\n            switch (n.type) {\n              case \"positionChanged\":\n                e.positionChanged(n.data);\n                break;\n\n              case \"rotationChanged\":\n                e.rotationChanged(n.data);\n            }\n          })), Object.defineProperty(this.position, \"x\", {\n            get: function get() {\n              return e.lastEventPosition.x;\n            }\n          }), Object.defineProperty(this.position, \"y\", {\n            get: function get() {\n              return e.lastEventPosition.y;\n            }\n          }), Object.defineProperty(this.position, \"z\", {\n            get: function get() {\n              return e.lastEventPosition.z;\n            }\n          }), Object.defineProperty(this.worldPosition, \"x\", {\n            get: function get() {\n              return e.lastEventWorldPosition.x;\n            }\n          }), Object.defineProperty(this.worldPosition, \"y\", {\n            get: function get() {\n              return e.lastEventWorldPosition.y;\n            }\n          }), Object.defineProperty(this.worldPosition, \"z\", {\n            get: function get() {\n              return e.lastEventWorldPosition.z;\n            }\n          }), Object.defineProperty(this.feetPosition, \"x\", {\n            get: function get() {\n              return e.lastEventPosition.x;\n            }\n          }), Object.defineProperty(this.feetPosition, \"y\", {\n            get: function get() {\n              return e.lastEventPosition.y - e.playerHeight;\n            }\n          }), Object.defineProperty(this.feetPosition, \"z\", {\n            get: function get() {\n              return e.lastEventPosition.z;\n            }\n          }), Object.defineProperty(this.rotation, \"x\", {\n            get: function get() {\n              return e.lastEventRotation.x;\n            }\n          }), Object.defineProperty(this.rotation, \"y\", {\n            get: function get() {\n              return e.lastEventRotation.y;\n            }\n          }), Object.defineProperty(this.rotation, \"z\", {\n            get: function get() {\n              return e.lastEventRotation.z;\n            }\n          }), Object.defineProperty(this.rotation, \"w\", {\n            get: function get() {\n              return e.lastEventRotation.w;\n            }\n          });\n        }\n\n        return Object.defineProperty(t, \"instance\", {\n          get: function get() {\n            return t._instance || (t._instance = new t()), t._instance;\n          },\n          enumerable: !0,\n          configurable: !0\n        }), Object.defineProperty(t.prototype, \"playerHeight\", {\n          get: function get() {\n            return this._playerHeight;\n          },\n          enumerable: !0,\n          configurable: !0\n        }), t.prototype.positionChanged = function (e) {\n          this.lastEventPosition = e.position, this.lastEventWorldPosition = e.cameraPosition, this._playerHeight = e.playerHeight;\n        }, t.prototype.rotationChanged = function (e) {\n          this.lastEventRotation = e.quaternion;\n        }, t;\n      }();\n\n      n.Camera = o;\n    }, function (e, n, t) {\n      \"use strict\";\n\n      function o(e) {\n        for (var t in e) {\n          n.hasOwnProperty(t) || (n[t] = e[t]);\n        }\n      }\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      }), o(t(31)), o(t(17)), o(t(0)), o(t(12)), o(t(7)), o(t(19)), o(t(1)), o(t(20)), o(t(18)), o(t(8)), o(t(33)), o(t(34));\n      var a = t(35),\n          r = t(17),\n          d = new (t(12).Entity)(\"scene\");\n      d.uuid = \"0\";\n      var i = new r.Engine(d);\n      n.engine = i, t(0).DisposableComponent.engine = i, \"undefined\" != typeof dcl && i.addSystem(new a.DecentralandSynchronizationSystem(dcl), 1 / 0);\n      var c = t(14);\n      i.addSystem(c.uuidEventSystem), i.addSystem(c.pointerEventSystem), i.addSystem(c.raycastEventSystem), o(t(27)), o(t(4)), o(t(14)), o(t(13)), o(t(29)), o(t(5)), o(t(26)), o(t(16)), o(t(44)), o(t(45)), o(t(46)), o(t(47)), o(t(48)), o(t(49)), o(t(28));\n    }, function (e, n, t) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var a = function () {\n        function t() {}\n\n        return t.AVATAR = {\n          getEntityRepresentation: function getEntityRepresentation(e) {\n            return e.avatarEntity;\n          }\n        }, t.FIRST_PERSON_CAMERA = {\n          getEntityRepresentation: function getEntityRepresentation(e) {\n            return e.firstPersonCameraEntity;\n          }\n        }, t;\n      }();\n\n      n.Attachable = a;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(0),\n          o = function () {\n        function t() {\n          for (var e = [], n = 0; n < arguments.length; n++) {\n            e[n] = arguments[n];\n          }\n\n          if (this.entities = [], this.active = !1, this._requiresNames = [], !e) throw new Error(\"ComponentGroup: Could not load the requires list\");\n          if (!(e instanceof Array)) throw new Error(\"ComponentGroup: requires list is not an Array\");\n          Object.defineProperty(this, \"requires\", {\n            get: function get() {\n              return e.slice();\n            }\n          }), Object.defineProperty(this, \"requiresNames\", {\n            get: function get() {\n              return this._requiresNames.slice();\n            }\n          });\n\n          for (var t = function t(n) {\n            var t = e[n],\n                o = null;\n            if (!t) throw new Error(\"ComponentGroup: the required component at location \" + n + \" is invalid\");\n\n            try {\n              o = r.getComponentName(t);\n            } catch (e) {\n              throw new Error(\"ComponentGroup: the required component at location \" + n + \" is not registered as a @Component. Remember to provide the class of the component, not the name\");\n            }\n\n            if (a._requiresNames.some(function (e) {\n              return e === o;\n            })) throw new Error(\"ComponentGroup: the required component list has a repeated name \" + o);\n\n            a._requiresNames.push(o);\n          }, a = this, o = 0; o < e.length; o++) {\n            t(o);\n          }\n        }\n\n        return t.prototype.hasEntity = function (e) {\n          return !!e.isAddedToEngine() && -1 !== this.entities.indexOf(e);\n        }, t.prototype.addEntity = function (e) {\n          if (!e.isAddedToEngine()) throw new TypeError(\"ComponentGroup: Cannot add a entity that is not added to the engine\");\n          -1 === this.entities.indexOf(e) && this.entities.push(e);\n        }, t.prototype.removeEntity = function (e) {\n          var n = this.entities.indexOf(e);\n          -1 !== n && this.entities.splice(n, 1);\n        }, t.prototype.componentRemoved = function (e, n) {\n          -1 !== this._requiresNames.indexOf(n) && this.removeEntity(e);\n        }, t.prototype.meetsRequirements = function (e) {\n          for (var n = 0; n < this._requiresNames.length; n++) {\n            if (!(this._requiresNames[n] in e.components)) return !1;\n          }\n\n          return !0;\n        }, t;\n      }();\n\n      n.ComponentGroup = o;\n    }, function (e, n, t) {\n      \"use strict\";\n\n      var a;\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      }), n.teleportTo = function (e) {\n        var n, t;\n        n = \"requestTeleport\", t = [e], void 0 === a && \"undefined\" != typeof dcl && (a = dcl.loadModule(\"@decentraland/UserActionModule\")), void 0 !== a && \"undefined\" != typeof dcl && a.then(function (e) {\n          dcl.callRpc(e.rpcHandle, n, t);\n        });\n      };\n    }, function (e, n, t) {\n      \"use strict\";\n\n      var a;\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      }), n.movePlayerTo = function (e, n) {\n        var t, r;\n        t = \"movePlayerTo\", r = [e, n], void 0 === a && \"undefined\" != typeof dcl && (a = dcl.loadModule(\"@decentraland/RestrictedActionModule\")), void 0 !== a && \"undefined\" != typeof dcl && a.then(function (e) {\n          dcl.callRpc(e.rpcHandle, t, r);\n        });\n      };\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(0),\n          o = a(7),\n          d = a(13),\n          i = function () {\n        function t(e) {\n          this.dcl = e, this.cachedComponents = {};\n        }\n\n        return t.prototype.activate = function (e) {\n          var n = this;\n          this.engine = e, e.eventManager.addListener(o.ComponentAdded, this, this.componentAdded), e.eventManager.addListener(o.ComponentRemoved, this, this.componentRemoved), e.eventManager.addListener(r.DisposableComponentCreated, this, this.disposableComponentCreated), e.eventManager.addListener(r.DisposableComponentRemoved, this, this.disposableComponentRemoved), e.eventManager.addListener(r.DisposableComponentUpdated, this, this.disposableComponentUpdated), e.eventManager.addListener(o.ParentChanged, this, this.parentChanged);\n          var t = e.rootEntity.uuid;\n          this.dcl.addEntity(t), this.dcl.onUpdate(function (t) {\n            e.update(t), n.presentEntities();\n          }), this.dcl.onEvent(function (n) {\n            var t = n.data;\n\n            switch (n.type) {\n              case \"uuidEvent\":\n                e.eventManager.fireEvent(new d.UUIDEvent(t.uuid, t.payload));\n                break;\n\n              case \"raycastResponse\":\n                (\"HitFirst\" === t.queryType || \"HitAll\" === t.queryType) && e.eventManager.fireEvent(new d.RaycastResponse(t));\n                break;\n\n              case \"pointerEvent\":\n                e.eventManager.fireEvent(new d.PointerEvent(t.payload));\n            }\n          });\n        }, t.prototype.onAddEntity = function (e) {\n          if (e && e.isAddedToEngine()) {\n            var n = e.uuid,\n                t = e.getParent();\n\n            for (var a in this.dcl.addEntity(n), t && this.dcl.setParent(n, t.uuid), this.cachedComponents[n] = {}, e.components) {\n              var o = e.components[a],\n                  d = r.getComponentClassId(o);\n              if (null !== d) if (r.isDisposableComponent(o)) this.dcl.attachEntityComponent(e.uuid, a, r.getComponentId(o));else {\n                var i = JSON.stringify(o);\n                this.dcl.updateEntityComponent(n, a, d, i), this.cachedComponents[n][a] = i;\n              }\n            }\n          }\n        }, t.prototype.onRemoveEntity = function (e) {\n          if (e.isAddedToEngine()) {\n            var n = e.uuid;\n            this.dcl.removeEntity(n), delete this.cachedComponents[n];\n          }\n        }, t.prototype.presentEntities = function () {\n          for (var e in this.engine.entities) {\n            var n = this.engine.entities[e];\n\n            for (var t in n.components) {\n              var a = n.components[t],\n                  o = r.getComponentClassId(a);\n\n              if (null !== o && !r.isDisposableComponent(a)) {\n                var d = this.getJsonIfDirty(n.uuid, t, a);\n                d && (this.dcl.updateEntityComponent(n.uuid, t, o, d), this.clearDirty(n.uuid, t, a, d));\n              }\n            }\n          }\n\n          for (var i in this.engine.disposableComponents) {\n            (a = this.engine.disposableComponents[i]) instanceof r.ObservableComponent && a.dirty && (this.dcl.componentUpdated(i, JSON.stringify(a)), a.dirty = !1);\n          }\n        }, t.prototype.componentAdded = function (e) {\n          if (e.entity.isAddedToEngine()) {\n            var n = e.entity.components[e.componentName];\n            if (r.isDisposableComponent(n)) this.dcl.attachEntityComponent(e.entity.uuid, e.componentName, r.getComponentId(n));else if (null !== e.classId) {\n              var t = JSON.stringify(n);\n              this.dcl.updateEntityComponent(e.entity.uuid, e.componentName, e.classId, t), this.cachedComponents[e.entity.uuid][e.componentName] = t;\n            }\n          }\n        }, t.prototype.componentRemoved = function (e) {\n          e.entity.isAddedToEngine() && (this.dcl.removeEntityComponent(e.entity.uuid, e.componentName), delete this.cachedComponents[e.entity.uuid][e.componentName]);\n        }, t.prototype.disposableComponentCreated = function (e) {\n          this.dcl.componentCreated(e.componentId, e.componentName, e.classId);\n        }, t.prototype.disposableComponentRemoved = function (e) {\n          this.dcl.componentDisposed(e.componentId);\n        }, t.prototype.disposableComponentUpdated = function (e) {\n          this.dcl.componentUpdated(e.componentId, JSON.stringify(e.component));\n        }, t.prototype.parentChanged = function (e) {\n          this.dcl.setParent(e.entity.uuid, e.parent ? e.parent.uuid : \"0\");\n        }, t.prototype.getJsonIfDirty = function (e, n, t) {\n          var a = JSON.stringify(t);\n          return a !== this.cachedComponents[e][n] && a;\n        }, t.prototype.clearDirty = function (e, n, t, a) {\n          this.cachedComponents[e][n] = a;\n        }, t;\n      }();\n\n      n.DecentralandSynchronizationSystem = i;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(3),\n          o = function () {\n        function t() {}\n\n        return t.X = new r.Vector3(1, 0, 0), t.Y = new r.Vector3(0, 1, 0), t.Z = new r.Vector3(0, 0, 1), t;\n      }();\n\n      n.Axis = o;\n    }, function (e, n, t) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var a = function () {\n        function t() {}\n\n        return t.Interpolate = function (e, n, t, a, r) {\n          for (var o = 1 - 3 * a + 3 * n, d = 3 * a - 6 * n, i = 3 * n, c = e, s = 0; s < 5; s++) {\n            var l = c * c;\n            c -= (o * (l * c) + d * l + i * c - e) * (1 / (3 * o * l + 2 * d * c + i)), c = Math.min(1, Math.max(0, c));\n          }\n\n          return 3 * Math.pow(1 - c, 2) * c * t + 3 * (1 - c) * Math.pow(c, 2) * r + Math.pow(c, 3);\n        }, t;\n      }();\n\n      n.BezierCurve = a;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(2),\n          o = a(24),\n          d = a(6),\n          i = function () {\n        function t(e, n, t) {\n          void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === t && (t = 0), this.r = e, this.g = n, this.b = t;\n        }\n\n        return t.FromHexString = function (e) {\n          if (\"#\" !== e.substring(0, 1) || 7 !== e.length) return new t(0, 0, 0);\n          var n = parseInt(e.substring(1, 3), 16),\n              a = parseInt(e.substring(3, 5), 16),\n              r = parseInt(e.substring(5, 7), 16);\n          return t.FromInts(n, a, r);\n        }, t.FromArray = function (e, n) {\n          return void 0 === n && (n = 0), new t(e[n], e[n + 1], e[n + 2]);\n        }, t.FromInts = function (e, n, a) {\n          return new t(e / 255, n / 255, a / 255);\n        }, t.Lerp = function (e, n, a) {\n          var r = new t(0, 0, 0);\n          return t.LerpToRef(e, n, a, r), r;\n        }, t.LerpToRef = function (e, n, t, a) {\n          a.r = e.r + (n.r - e.r) * t, a.g = e.g + (n.g - e.g) * t, a.b = e.b + (n.b - e.b) * t;\n        }, t.Red = function () {\n          return new t(1, 0, 0);\n        }, t.Green = function () {\n          return new t(0, 1, 0);\n        }, t.Blue = function () {\n          return new t(0, 0, 1);\n        }, t.Black = function () {\n          return new t(0, 0, 0);\n        }, t.White = function () {\n          return new t(1, 1, 1);\n        }, t.Purple = function () {\n          return new t(.5, 0, .5);\n        }, t.Magenta = function () {\n          return new t(1, 0, 1);\n        }, t.Yellow = function () {\n          return new t(1, 1, 0);\n        }, t.Gray = function () {\n          return new t(.5, .5, .5);\n        }, t.Teal = function () {\n          return new t(0, 1, 1);\n        }, t.Random = function () {\n          return new t(Math.random(), Math.random(), Math.random());\n        }, t.prototype.toString = function () {\n          return \"{R: \" + this.r + \" G:\" + this.g + \" B:\" + this.b + \"}\";\n        }, t.prototype.getClassName = function () {\n          return \"Color3\";\n        }, t.prototype.getHashCode = function () {\n          var e = this.r || 0;\n          return e = 397 * (e = 397 * e ^ (this.g || 0)) ^ (this.b || 0);\n        }, t.prototype.toArray = function (e, n) {\n          return void 0 === n && (n = 0), e[n] = this.r, e[n + 1] = this.g, e[n + 2] = this.b, this;\n        }, t.prototype.toColor4 = function (e) {\n          return void 0 === e && (e = 1), new o.Color4(this.r, this.g, this.b, e);\n        }, t.prototype.asArray = function () {\n          var e = new Array();\n          return this.toArray(e, 0), e;\n        }, t.prototype.toLuminance = function () {\n          return .3 * this.r + .59 * this.g + .11 * this.b;\n        }, t.prototype.multiply = function (e) {\n          return new t(this.r * e.r, this.g * e.g, this.b * e.b);\n        }, t.prototype.multiplyToRef = function (e, n) {\n          return n.r = this.r * e.r, n.g = this.g * e.g, n.b = this.b * e.b, this;\n        }, t.prototype.equals = function (e) {\n          return e && this.r === e.r && this.g === e.g && this.b === e.b;\n        }, t.prototype.equalsFloats = function (e, n, t) {\n          return this.r === e && this.g === n && this.b === t;\n        }, t.prototype.scale = function (e) {\n          return new t(this.r * e, this.g * e, this.b * e);\n        }, t.prototype.scaleToRef = function (e, n) {\n          return n.r = this.r * e, n.g = this.g * e, n.b = this.b * e, this;\n        }, t.prototype.scaleAndAddToRef = function (e, n) {\n          return n.r += this.r * e, n.g += this.g * e, n.b += this.b * e, this;\n        }, t.prototype.clampToRef = function (e, n, t) {\n          return void 0 === e && (e = 0), void 0 === n && (n = 1), t.r = d.Scalar.Clamp(this.r, e, n), t.g = d.Scalar.Clamp(this.g, e, n), t.b = d.Scalar.Clamp(this.b, e, n), this;\n        }, t.prototype.add = function (e) {\n          return new t(this.r + e.r, this.g + e.g, this.b + e.b);\n        }, t.prototype.addToRef = function (e, n) {\n          return n.r = this.r + e.r, n.g = this.g + e.g, n.b = this.b + e.b, this;\n        }, t.prototype.subtract = function (e) {\n          return new t(this.r - e.r, this.g - e.g, this.b - e.b);\n        }, t.prototype.subtractToRef = function (e, n) {\n          return n.r = this.r - e.r, n.g = this.g - e.g, n.b = this.b - e.b, this;\n        }, t.prototype.clone = function () {\n          return new t(this.r, this.g, this.b);\n        }, t.prototype.copyFrom = function (e) {\n          return this.r = e.r, this.g = e.g, this.b = e.b, this;\n        }, t.prototype.copyFromFloats = function (e, n, t) {\n          return this.r = e, this.g = n, this.b = t, this;\n        }, t.prototype.set = function (e, n, t) {\n          return this.copyFromFloats(e, n, t);\n        }, t.prototype.toHexString = function () {\n          var e = 255 * this.r | 0,\n              n = 255 * this.g | 0,\n              t = 255 * this.b | 0;\n          return \"#\" + d.Scalar.ToHex(e) + d.Scalar.ToHex(n) + d.Scalar.ToHex(t);\n        }, t.prototype.toLinearSpace = function () {\n          var e = new t();\n          return this.toLinearSpaceToRef(e), e;\n        }, t.prototype.toLinearSpaceToRef = function (e) {\n          return e.r = Math.pow(this.r, r.ToLinearSpace), e.g = Math.pow(this.g, r.ToLinearSpace), e.b = Math.pow(this.b, r.ToLinearSpace), this;\n        }, t.prototype.toGammaSpace = function () {\n          var e = new t();\n          return this.toGammaSpaceToRef(e), e;\n        }, t.prototype.toGammaSpaceToRef = function (e) {\n          return e.r = Math.pow(this.r, r.ToGammaSpace), e.g = Math.pow(this.g, r.ToGammaSpace), e.b = Math.pow(this.b, r.ToGammaSpace), this;\n        }, t.prototype.toJSON = function () {\n          return {\n            r: this.r,\n            g: this.g,\n            b: this.b\n          };\n        }, t;\n      }();\n\n      n.Color3 = i;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(3),\n          o = function () {\n        function t(e) {\n          this._length = 0, this._points = e, this._length = this._computeLength(e);\n        }\n\n        return t.CreateQuadraticBezier = function (e, n, a, o) {\n          o = o > 2 ? o : 3;\n\n          for (var d = new Array(), i = function i(e, n, t, a) {\n            return (1 - e) * (1 - e) * n + 2 * e * (1 - e) * t + e * e * a;\n          }, c = 0; c <= o; c++) {\n            d.push(new r.Vector3(i(c / o, e.x, n.x, a.x), i(c / o, e.y, n.y, a.y), i(c / o, e.z, n.z, a.z)));\n          }\n\n          return new t(d);\n        }, t.CreateCubicBezier = function (e, n, a, o, d) {\n          d = d > 3 ? d : 4;\n\n          for (var i = new Array(), c = function c(e, n, t, a, r) {\n            return (1 - e) * (1 - e) * (1 - e) * n + 3 * e * (1 - e) * (1 - e) * t + 3 * e * e * (1 - e) * a + e * e * e * r;\n          }, s = 0; s <= d; s++) {\n            i.push(new r.Vector3(c(s / d, e.x, n.x, a.x, o.x), c(s / d, e.y, n.y, a.y, o.y), c(s / d, e.z, n.z, a.z, o.z)));\n          }\n\n          return new t(i);\n        }, t.CreateHermiteSpline = function (e, n, a, o, d) {\n          for (var i = new Array(), c = 1 / d, s = 0; s <= d; s++) {\n            i.push(r.Vector3.Hermite(e, n, a, o, s * c));\n          }\n\n          return new t(i);\n        }, t.CreateCatmullRomSpline = function (e, n, a) {\n          var o = new Array(),\n              d = 1 / n,\n              i = 0;\n\n          if (a) {\n            for (var c = e.length, s = 0; s < c; s++) {\n              i = 0;\n\n              for (var l = 0; l < n; l++) {\n                o.push(r.Vector3.CatmullRom(e[s % c], e[(s + 1) % c], e[(s + 2) % c], e[(s + 3) % c], i)), i += d;\n              }\n            }\n\n            o.push(o[0]);\n          } else {\n            var m = new Array();\n            m.push(e[0].clone()), Array.prototype.push.apply(m, e), m.push(e[e.length - 1].clone());\n            s = 0;\n\n            for (s = 0; s < m.length - 3; s++) {\n              i = 0;\n\n              for (l = 0; l < n; l++) {\n                o.push(r.Vector3.CatmullRom(m[s], m[s + 1], m[s + 2], m[s + 3], i)), i += d;\n              }\n            }\n\n            s--, o.push(r.Vector3.CatmullRom(m[s], m[s + 1], m[s + 2], m[s + 3], i));\n          }\n\n          return new t(o);\n        }, t.prototype.getPoints = function () {\n          return this._points;\n        }, t.prototype.length = function () {\n          return this._length;\n        }, t.prototype.continue = function (e) {\n          for (var n = this._points[this._points.length - 1], a = this._points.slice(), r = e.getPoints(), o = 1; o < r.length; o++) {\n            a.push(r[o].subtract(r[0]).add(n));\n          }\n\n          return new t(a);\n        }, t.prototype._computeLength = function (e) {\n          for (var n = 0, t = 1; t < e.length; t++) {\n            n += e[t].subtract(e[t - 1]).length();\n          }\n\n          return n;\n        }, t;\n      }();\n\n      n.Curve3 = o;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(25),\n          o = function () {\n        function t() {}\n\n        return t.GetPlanes = function (e) {\n          for (var n = [], a = 0; a < 6; a++) {\n            n.push(new r.Plane(0, 0, 0, 0));\n          }\n\n          return t.GetPlanesToRef(e, n), n;\n        }, t.GetNearPlaneToRef = function (e, n) {\n          var t = e.m;\n          n.normal.x = t[3] + t[2], n.normal.y = t[7] + t[6], n.normal.z = t[11] + t[10], n.d = t[15] + t[14], n.normalize();\n        }, t.GetFarPlaneToRef = function (e, n) {\n          var t = e.m;\n          n.normal.x = t[3] - t[2], n.normal.y = t[7] - t[6], n.normal.z = t[11] - t[10], n.d = t[15] - t[14], n.normalize();\n        }, t.GetLeftPlaneToRef = function (e, n) {\n          var t = e.m;\n          n.normal.x = t[3] + t[0], n.normal.y = t[7] + t[4], n.normal.z = t[11] + t[8], n.d = t[15] + t[12], n.normalize();\n        }, t.GetRightPlaneToRef = function (e, n) {\n          var t = e.m;\n          n.normal.x = t[3] - t[0], n.normal.y = t[7] - t[4], n.normal.z = t[11] - t[8], n.d = t[15] - t[12], n.normalize();\n        }, t.GetTopPlaneToRef = function (e, n) {\n          var t = e.m;\n          n.normal.x = t[3] - t[1], n.normal.y = t[7] - t[5], n.normal.z = t[11] - t[9], n.d = t[15] - t[13], n.normalize();\n        }, t.GetBottomPlaneToRef = function (e, n) {\n          var t = e.m;\n          n.normal.x = t[3] + t[1], n.normal.y = t[7] + t[5], n.normal.z = t[11] + t[9], n.d = t[15] + t[13], n.normalize();\n        }, t.GetPlanesToRef = function (e, n) {\n          t.GetNearPlaneToRef(e, n[0]), t.GetFarPlaneToRef(e, n[1]), t.GetLeftPlaneToRef(e, n[2]), t.GetRightPlaneToRef(e, n[3]), t.GetTopPlaneToRef(e, n[4]), t.GetBottomPlaneToRef(e, n[5]);\n        }, t;\n      }();\n\n      n.Frustum = o;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(15),\n          o = a(23),\n          d = a(2),\n          i = function () {\n        function t(e, n) {\n          this.closed = !1, this._points = new Array(), this._length = 0, this._points.push(new r.Vector2(e, n));\n        }\n\n        return t.StartingAt = function (e, n) {\n          return new t(e, n);\n        }, t.prototype.addLineTo = function (e, n) {\n          if (this.closed) return this;\n          var t = new r.Vector2(e, n),\n              a = this._points[this._points.length - 1];\n          return this._points.push(t), this._length += t.subtract(a).length(), this;\n        }, t.prototype.addArcTo = function (e, n, t, a, i) {\n          if (void 0 === i && (i = 36), this.closed) return this;\n          var c = this._points[this._points.length - 1],\n              s = new r.Vector2(e, n),\n              l = new r.Vector2(t, a),\n              m = new o.Arc2(c, s, l),\n              p = m.angle.radians() / i;\n          m.orientation === d.Orientation.CW && (p *= -1);\n\n          for (var x = m.startAngle.radians() + p, k = 0; k < i; k++) {\n            var u = Math.cos(x) * m.radius + m.centerPoint.x,\n                f = Math.sin(x) * m.radius + m.centerPoint.y;\n            this.addLineTo(u, f), x += p;\n          }\n\n          return this;\n        }, t.prototype.close = function () {\n          return this.closed = !0, this;\n        }, t.prototype.length = function () {\n          var e = this._length;\n\n          if (!this.closed) {\n            var n = this._points[this._points.length - 1];\n            e += this._points[0].subtract(n).length();\n          }\n\n          return e;\n        }, t.prototype.getPoints = function () {\n          return this._points;\n        }, t.prototype.getPointAtLengthPosition = function (e) {\n          if (e < 0 || e > 1) return r.Vector2.Zero();\n\n          for (var n = e * this.length(), t = 0, a = 0; a < this._points.length; a++) {\n            var o = (a + 1) % this._points.length,\n                d = this._points[a],\n                i = this._points[o].subtract(d),\n                c = i.length() + t;\n\n            if (n >= t && n <= c) {\n              var s = i.normalize(),\n                  l = n - t;\n              return new r.Vector2(d.x + s.x * l, d.y + s.y * l);\n            }\n\n            t = c;\n          }\n\n          return r.Vector2.Zero();\n        }, t;\n      }();\n\n      n.Path2 = i;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var r = a(3),\n          o = a(2),\n          d = a(6),\n          i = function () {\n        function t(e, n, t) {\n          void 0 === n && (n = null), this.path = e, this._curve = new Array(), this._distances = new Array(), this._tangents = new Array(), this._normals = new Array(), this._binormals = new Array();\n\n          for (var a = 0; a < e.length; a++) {\n            this._curve[a] = e[a].clone();\n          }\n\n          this._raw = t || !1, this._compute(n);\n        }\n\n        return t.prototype.getCurve = function () {\n          return this._curve;\n        }, t.prototype.getTangents = function () {\n          return this._tangents;\n        }, t.prototype.getNormals = function () {\n          return this._normals;\n        }, t.prototype.getBinormals = function () {\n          return this._binormals;\n        }, t.prototype.getDistances = function () {\n          return this._distances;\n        }, t.prototype.update = function (e, n) {\n          void 0 === n && (n = null);\n\n          for (var t = 0; t < e.length; t++) {\n            this._curve[t].x = e[t].x, this._curve[t].y = e[t].y, this._curve[t].z = e[t].z;\n          }\n\n          return this._compute(n), this;\n        }, t.prototype._compute = function (e) {\n          var n = this._curve.length;\n          this._tangents[0] = this._getFirstNonNullVector(0), this._raw || this._tangents[0].normalize(), this._tangents[n - 1] = this._curve[n - 1].subtract(this._curve[n - 2]), this._raw || this._tangents[n - 1].normalize();\n\n          var t,\n              a,\n              o,\n              d,\n              i = this._tangents[0],\n              c = this._normalVector(this._curve[0], i, e);\n\n          this._normals[0] = c, this._raw || this._normals[0].normalize(), this._binormals[0] = r.Vector3.Cross(i, this._normals[0]), this._raw || this._binormals[0].normalize(), this._distances[0] = 0;\n\n          for (var s = 1; s < n; s++) {\n            t = this._getLastNonNullVector(s), s < n - 1 && (a = this._getFirstNonNullVector(s), this._tangents[s] = t.add(a), this._tangents[s].normalize()), this._distances[s] = this._distances[s - 1] + t.length(), o = this._tangents[s], d = this._binormals[s - 1], this._normals[s] = r.Vector3.Cross(d, o), this._raw || this._normals[s].normalize(), this._binormals[s] = r.Vector3.Cross(o, this._normals[s]), this._raw || this._binormals[s].normalize();\n          }\n        }, t.prototype._getFirstNonNullVector = function (e) {\n          for (var n = 1, t = this._curve[e + n].subtract(this._curve[e]); 0 === t.length() && e + n + 1 < this._curve.length;) {\n            n++, t = this._curve[e + n].subtract(this._curve[e]);\n          }\n\n          return t;\n        }, t.prototype._getLastNonNullVector = function (e) {\n          for (var n = 1, t = this._curve[e].subtract(this._curve[e - n]); 0 === t.length() && e > n + 1;) {\n            n++, t = this._curve[e].subtract(this._curve[e - n]);\n          }\n\n          return t;\n        }, t.prototype._normalVector = function (e, n, t) {\n          var a,\n              i = n.length();\n\n          if (0 === i && (i = 1), null == t) {\n            var c = void 0;\n            c = d.Scalar.WithinEpsilon(Math.abs(n.y) / i, 1, o.Epsilon) ? d.Scalar.WithinEpsilon(Math.abs(n.x) / i, 1, o.Epsilon) ? d.Scalar.WithinEpsilon(Math.abs(n.z) / i, 1, o.Epsilon) ? r.Vector3.Zero() : new r.Vector3(0, 0, 1) : new r.Vector3(1, 0, 0) : new r.Vector3(0, -1, 0), a = r.Vector3.Cross(n, c);\n          } else a = r.Vector3.Cross(n, t), r.Vector3.CrossToRef(a, n, a);\n\n          return a.normalize(), a;\n        }, t;\n      }();\n\n      n.Path3D = i;\n    }, function (e, n, t) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n\n      var a = function () {\n        function t(e, n) {\n          this.width = e, this.height = n;\n        }\n\n        return Object.defineProperty(t.prototype, \"surface\", {\n          get: function get() {\n            return this.width * this.height;\n          },\n          enumerable: !0,\n          configurable: !0\n        }), t.Zero = function () {\n          return new t(0, 0);\n        }, t.Lerp = function (e, n, a) {\n          return new t(e.width + (n.width - e.width) * a, e.height + (n.height - e.height) * a);\n        }, t.prototype.toString = function () {\n          return \"{W: \" + this.width + \", H: \" + this.height + \"}\";\n        }, t.prototype.getClassName = function () {\n          return \"Size\";\n        }, t.prototype.getHashCode = function () {\n          var e = this.width || 0;\n          return e = 397 * e ^ (this.height || 0);\n        }, t.prototype.copyFrom = function (e) {\n          this.width = e.width, this.height = e.height;\n        }, t.prototype.copyFromFloats = function (e, n) {\n          return this.width = e, this.height = n, this;\n        }, t.prototype.set = function (e, n) {\n          return this.copyFromFloats(e, n);\n        }, t.prototype.multiplyByFloats = function (e, n) {\n          return new t(this.width * e, this.height * n);\n        }, t.prototype.clone = function () {\n          return new t(this.width, this.height);\n        }, t.prototype.equals = function (e) {\n          return !!e && this.width === e.width && this.height === e.height;\n        }, t.prototype.add = function (e) {\n          return new t(this.width + e.width, this.height + e.height);\n        }, t.prototype.subtract = function (e) {\n          return new t(this.width - e.width, this.height - e.height);\n        }, t;\n      }();\n\n      n.Size = a;\n    }, function (t, a, r) {\n      \"use strict\";\n\n      var _o5,\n          d = this && this.__extends || (_o5 = function o(e, n) {\n        return (_o5 = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (e, n) {\n          e.__proto__ = n;\n        } || function (e, n) {\n          for (var t in n) {\n            n.hasOwnProperty(t) && (e[t] = n[t]);\n          }\n        })(e, n);\n      }, function (e, t) {\n        function n() {\n          this.constructor = e;\n        }\n\n        _o5(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());\n      }),\n          i = this && this.__decorate || function (e, n, t, a) {\n        var r,\n            o = arguments.length,\n            d = o < 3 ? n : null === a ? a = Object.getOwnPropertyDescriptor(n, t) : a;\n        if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) d = Reflect.decorate(e, n, t, a);else for (var i = e.length - 1; i >= 0; i--) {\n          (r = e[i]) && (d = (o < 3 ? r(d) : o > 3 ? r(n, t, d) : r(n, t)) || d);\n        }\n        return o > 3 && d && Object.defineProperty(n, t, d), d;\n      };\n\n      Object.defineProperty(a, \"__esModule\", {\n        value: !0\n      });\n\n      var c = r(0),\n          s = r(4),\n          l = function (n) {\n        function e(e) {\n          var t = n.call(this) || this;\n          return t.loop = !1, t.volume = 1, t.url = e, t;\n        }\n\n        return d(e, n), i([c.ObservableComponent.readonly], e.prototype, \"url\", void 0), i([c.ObservableComponent.field], e.prototype, \"loop\", void 0), i([c.ObservableComponent.field], e.prototype, \"loadingCompleteEventId\", void 0), i([c.ObservableComponent.field], e.prototype, \"volume\", void 0), e = i([c.DisposableComponent(\"engine.AudioClip\", s.CLASS_ID.AUDIO_CLIP)], e);\n      }(c.ObservableComponent);\n\n      a.AudioClip = l;\n\n      var m = function (n) {\n        function e(e) {\n          var t = n.call(this) || this;\n          if (t.audioClip = e, t.loop = !1, t.volume = 1, t.playing = !1, t.pitch = 1, !(e instanceof l)) throw new Error(\"Trying to create AudioSource(AudioClip) with an invalid AudioClip\");\n          return t.audioClipId = c.getComponentId(e), t;\n        }\n\n        return d(e, n), e.prototype.playOnce = function () {\n          return this.playing = !0, this.dirty = !0, this.data.nonce = Math.random(), this;\n        }, i([c.ObservableComponent.readonly], e.prototype, \"audioClipId\", void 0), i([c.ObservableComponent.field], e.prototype, \"loop\", void 0), i([c.ObservableComponent.field], e.prototype, \"volume\", void 0), i([c.ObservableComponent.field], e.prototype, \"playing\", void 0), i([c.ObservableComponent.field], e.prototype, \"pitch\", void 0), e = i([c.Component(\"engine.AudioSource\", s.CLASS_ID.AUDIO_SOURCE)], e);\n      }(c.ObservableComponent);\n\n      a.AudioSource = m;\n\n      var p = function (n) {\n        function e(e) {\n          var t = n.call(this) || this;\n          return t.playing = !1, t.volume = 1, t.url = e, t.playing = !0, t;\n        }\n\n        return d(e, n), i([c.ObservableComponent.readonly], e.prototype, \"url\", void 0), i([c.ObservableComponent.field], e.prototype, \"playing\", void 0), i([c.ObservableComponent.field], e.prototype, \"volume\", void 0), e = i([c.Component(\"engine.AudioStream\", s.CLASS_ID.AUDIO_STREAM)], e);\n      }(c.ObservableComponent);\n\n      a.AudioStream = p;\n    }, function (t, a, r) {\n      \"use strict\";\n\n      var _o6,\n          d = this && this.__extends || (_o6 = function o(e, n) {\n        return (_o6 = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (e, n) {\n          e.__proto__ = n;\n        } || function (e, n) {\n          for (var t in n) {\n            n.hasOwnProperty(t) && (e[t] = n[t]);\n          }\n        })(e, n);\n      }, function (e, t) {\n        function n() {\n          this.constructor = e;\n        }\n\n        _o6(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());\n      }),\n          i = this && this.__decorate || function (e, n, t, a) {\n        var r,\n            o = arguments.length,\n            d = o < 3 ? n : null === a ? a = Object.getOwnPropertyDescriptor(n, t) : a;\n        if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) d = Reflect.decorate(e, n, t, a);else for (var i = e.length - 1; i >= 0; i--) {\n          (r = e[i]) && (d = (o < 3 ? r(d) : o > 3 ? r(n, t, d) : r(n, t)) || d);\n        }\n        return o > 3 && d && Object.defineProperty(n, t, d), d;\n      };\n\n      Object.defineProperty(a, \"__esModule\", {\n        value: !0\n      });\n      var c = r(0),\n          s = r(4);\n      !function (e) {\n        e.MOVE = \"MOVE\", e.ROTATE = \"ROTATE\", e.SCALE = \"SCALE\", e.NONE = \"NONE\";\n      }(a.Gizmo || (a.Gizmo = {}));\n\n      var l = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.type = \"gizmoEvent\", e;\n        }\n\n        return d(e, n), i([c.ObservableComponent.readonly], e.prototype, \"type\", void 0), e = i([c.Component(\"engine.gizmoEvent\", s.CLASS_ID.UUID_CALLBACK)], e);\n      }(s.OnUUIDEvent);\n\n      a.OnGizmoEvent = l;\n\n      var m = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.position = !0, e.rotation = !0, e.scale = !0, e.cycle = !0, e.localReference = !1, e;\n        }\n\n        return d(e, n), i([c.ObservableComponent.field], e.prototype, \"position\", void 0), i([c.ObservableComponent.field], e.prototype, \"rotation\", void 0), i([c.ObservableComponent.field], e.prototype, \"scale\", void 0), i([c.ObservableComponent.field], e.prototype, \"cycle\", void 0), i([c.ObservableComponent.field], e.prototype, \"selectedGizmo\", void 0), i([c.ObservableComponent.field], e.prototype, \"localReference\", void 0), e = i([c.Component(\"engine.gizmos\", s.CLASS_ID.GIZMOS)], e);\n      }(c.ObservableComponent);\n\n      a.Gizmos = m;\n    }, function (t, a, r) {\n      \"use strict\";\n\n      var _o7,\n          d = this && this.__extends || (_o7 = function o(e, n) {\n        return (_o7 = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (e, n) {\n          e.__proto__ = n;\n        } || function (e, n) {\n          for (var t in n) {\n            n.hasOwnProperty(t) && (e[t] = n[t]);\n          }\n        })(e, n);\n      }, function (e, t) {\n        function n() {\n          this.constructor = e;\n        }\n\n        _o7(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());\n      }),\n          i = this && this.__decorate || function (e, n, t, a) {\n        var r,\n            o = arguments.length,\n            d = o < 3 ? n : null === a ? a = Object.getOwnPropertyDescriptor(n, t) : a;\n        if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) d = Reflect.decorate(e, n, t, a);else for (var i = e.length - 1; i >= 0; i--) {\n          (r = e[i]) && (d = (o < 3 ? r(d) : o > 3 ? r(n, t, d) : r(n, t)) || d);\n        }\n        return o > 3 && d && Object.defineProperty(n, t, d), d;\n      };\n\n      Object.defineProperty(a, \"__esModule\", {\n        value: !0\n      });\n\n      var c = r(0),\n          s = r(4),\n          l = r(5),\n          m = function (n) {\n        function e(e) {\n          var t = n.call(this) || this;\n          return t.name = null, t.visible = !0, t.opacity = 1, t.hAlign = \"center\", t.vAlign = \"center\", t.width = \"100px\", t.height = \"50px\", t.positionX = \"0px\", t.positionY = \"0px\", t.isPointerBlocker = !0, e && (t._parent = e, t.data.parentComponent = c.getComponentId(e)), t;\n        }\n\n        return d(e, n), Object.defineProperty(e.prototype, \"parent\", {\n          get: function get() {\n            return this._parent;\n          },\n          enumerable: !0,\n          configurable: !0\n        }), Object.defineProperty(e.prototype, \"parentComponent\", {\n          get: function get() {\n            return this.data.parentComponent;\n          },\n          enumerable: !0,\n          configurable: !0\n        }), i([c.ObservableComponent.field], e.prototype, \"name\", void 0), i([c.ObservableComponent.field], e.prototype, \"visible\", void 0), i([c.ObservableComponent.field], e.prototype, \"opacity\", void 0), i([c.ObservableComponent.field], e.prototype, \"hAlign\", void 0), i([c.ObservableComponent.field], e.prototype, \"vAlign\", void 0), i([c.ObservableComponent.uiValue], e.prototype, \"width\", void 0), i([c.ObservableComponent.uiValue], e.prototype, \"height\", void 0), i([c.ObservableComponent.uiValue], e.prototype, \"positionX\", void 0), i([c.ObservableComponent.uiValue], e.prototype, \"positionY\", void 0), i([c.ObservableComponent.field], e.prototype, \"isPointerBlocker\", void 0), e;\n      }(c.ObservableComponent);\n\n      a.UIShape = m;\n\n      var p = function (n) {\n        function e() {\n          return n.call(this, null) || this;\n        }\n\n        return d(e, n), e = i([c.DisposableComponent(\"engine.shape\", s.CLASS_ID.UI_FULLSCREEN_SHAPE)], e);\n      }(m);\n\n      a.UIFullScreen = p;\n\n      var x = function (n) {\n        function e() {\n          return n.call(this, null) || this;\n        }\n\n        return d(e, n), e = i([c.DisposableComponent(\"engine.shape\", s.CLASS_ID.UI_WORLD_SPACE_SHAPE)], e);\n      }(m);\n\n      a.UIWorldSpace = x;\n\n      var k = function (n) {\n        function e() {\n          return n.call(this, null) || this;\n        }\n\n        return d(e, n), e = i([c.DisposableComponent(\"engine.shape\", s.CLASS_ID.UI_SCREEN_SPACE_SHAPE)], e);\n      }(m);\n\n      a.UICanvas = k;\n\n      var u,\n          f = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.adaptWidth = !1, e.adaptHeight = !1, e.thickness = 0, e.color = l.Color4.Clear(), e.alignmentUsesSize = !0, e;\n        }\n\n        return d(e, n), i([c.ObservableComponent.field], e.prototype, \"adaptWidth\", void 0), i([c.ObservableComponent.field], e.prototype, \"adaptHeight\", void 0), i([c.ObservableComponent.field], e.prototype, \"thickness\", void 0), i([c.ObservableComponent.field], e.prototype, \"color\", void 0), i([c.ObservableComponent.field], e.prototype, \"alignmentUsesSize\", void 0), e = i([c.DisposableComponent(\"engine.shape\", s.CLASS_ID.UI_CONTAINER_RECT)], e);\n      }(m);\n\n      a.UIContainerRect = f, function (e) {\n        e[e.VERTICAL = 0] = \"VERTICAL\", e[e.HORIZONTAL = 1] = \"HORIZONTAL\";\n      }(u = a.UIStackOrientation || (a.UIStackOrientation = {}));\n\n      var T = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.adaptWidth = !0, e.adaptHeight = !0, e.color = l.Color4.Clear(), e.stackOrientation = u.VERTICAL, e.spacing = 0, e;\n        }\n\n        return d(e, n), i([c.ObservableComponent.field], e.prototype, \"adaptWidth\", void 0), i([c.ObservableComponent.field], e.prototype, \"adaptHeight\", void 0), i([c.ObservableComponent.field], e.prototype, \"color\", void 0), i([c.ObservableComponent.field], e.prototype, \"stackOrientation\", void 0), i([c.ObservableComponent.field], e.prototype, \"spacing\", void 0), e = i([c.DisposableComponent(\"engine.shape\", s.CLASS_ID.UI_CONTAINER_STACK)], e);\n      }(m);\n\n      a.UIContainerStack = T;\n\n      var C = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.fontSize = 10, e.fontWeight = \"normal\", e.thickness = 0, e.cornerRadius = 0, e.color = l.Color4.White(), e.background = l.Color4.White(), e.paddingTop = 0, e.paddingRight = 0, e.paddingBottom = 0, e.paddingLeft = 0, e.shadowBlur = 0, e.shadowOffsetX = 0, e.shadowOffsetY = 0, e.shadowColor = l.Color4.Black(), e.text = \"button\", e;\n        }\n\n        return d(e, n), i([c.ObservableComponent.field], e.prototype, \"fontSize\", void 0), i([c.ObservableComponent.field], e.prototype, \"fontWeight\", void 0), i([c.ObservableComponent.field], e.prototype, \"thickness\", void 0), i([c.ObservableComponent.field], e.prototype, \"cornerRadius\", void 0), i([c.ObservableComponent.field], e.prototype, \"color\", void 0), i([c.ObservableComponent.field], e.prototype, \"background\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingTop\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingRight\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingBottom\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingLeft\", void 0), i([c.ObservableComponent.field], e.prototype, \"shadowBlur\", void 0), i([c.ObservableComponent.field], e.prototype, \"shadowOffsetX\", void 0), i([c.ObservableComponent.field], e.prototype, \"shadowOffsetY\", void 0), i([c.ObservableComponent.field], e.prototype, \"shadowColor\", void 0), i([c.ObservableComponent.field], e.prototype, \"text\", void 0), e = i([c.DisposableComponent(\"engine.shape\", s.CLASS_ID.UI_BUTTON_SHAPE)], e);\n      }(m);\n\n      a.UIButton = C;\n\n      var R = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.outlineWidth = 0, e.outlineColor = l.Color4.White(), e.color = l.Color4.White(), e.fontSize = 10, e.fontAutoSize = !1, e.fontWeight = \"normal\", e.value = \"\", e.lineSpacing = 0, e.lineCount = 0, e.adaptWidth = !1, e.adaptHeight = !1, e.textWrapping = !1, e.shadowBlur = 0, e.shadowOffsetX = 0, e.shadowOffsetY = 0, e.shadowColor = l.Color4.Black(), e.hTextAlign = \"left\", e.vTextAlign = \"bottom\", e.paddingTop = 0, e.paddingRight = 0, e.paddingBottom = 0, e.paddingLeft = 0, e;\n        }\n\n        return d(e, n), i([c.ObservableComponent.field], e.prototype, \"outlineWidth\", void 0), i([c.ObservableComponent.field], e.prototype, \"outlineColor\", void 0), i([c.ObservableComponent.field], e.prototype, \"color\", void 0), i([c.ObservableComponent.field], e.prototype, \"fontSize\", void 0), i([c.ObservableComponent.field], e.prototype, \"fontAutoSize\", void 0), i([c.ObservableComponent.field], e.prototype, \"fontWeight\", void 0), i([c.ObservableComponent.component], e.prototype, \"font\", void 0), i([c.ObservableComponent.field], e.prototype, \"value\", void 0), i([c.ObservableComponent.field], e.prototype, \"lineSpacing\", void 0), i([c.ObservableComponent.field], e.prototype, \"lineCount\", void 0), i([c.ObservableComponent.field], e.prototype, \"adaptWidth\", void 0), i([c.ObservableComponent.field], e.prototype, \"adaptHeight\", void 0), i([c.ObservableComponent.field], e.prototype, \"textWrapping\", void 0), i([c.ObservableComponent.field], e.prototype, \"shadowBlur\", void 0), i([c.ObservableComponent.field], e.prototype, \"shadowOffsetX\", void 0), i([c.ObservableComponent.field], e.prototype, \"shadowOffsetY\", void 0), i([c.ObservableComponent.field], e.prototype, \"shadowColor\", void 0), i([c.ObservableComponent.field], e.prototype, \"hTextAlign\", void 0), i([c.ObservableComponent.field], e.prototype, \"vTextAlign\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingTop\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingRight\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingBottom\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingLeft\", void 0), e = i([c.DisposableComponent(\"engine.shape\", s.CLASS_ID.UI_TEXT_SHAPE)], e);\n      }(m);\n\n      a.UIText = R;\n\n      var y = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.outlineWidth = 0, e.outlineColor = l.Color4.Black(), e.color = l.Color4.Clear(), e.thickness = 1, e.fontSize = 10, e.fontWeight = \"normal\", e.value = \"\", e.placeholderColor = l.Color4.White(), e.placeholder = \"\", e.margin = 10, e.maxWidth = 100, e.hTextAlign = \"left\", e.vTextAlign = \"bottom\", e.autoStretchWidth = !0, e.background = l.Color4.Black(), e.focusedBackground = l.Color4.Black(), e.textWrapping = !1, e.shadowBlur = 0, e.shadowOffsetX = 0, e.shadowOffsetY = 0, e.shadowColor = l.Color4.White(), e.paddingTop = 0, e.paddingRight = 0, e.paddingBottom = 0, e.paddingLeft = 0, e.onTextSubmit = null, e.onChanged = null, e.onFocus = null, e.onBlur = null, e;\n        }\n\n        return d(e, n), i([c.ObservableComponent.field], e.prototype, \"outlineWidth\", void 0), i([c.ObservableComponent.field], e.prototype, \"outlineColor\", void 0), i([c.ObservableComponent.field], e.prototype, \"color\", void 0), i([c.ObservableComponent.field], e.prototype, \"thickness\", void 0), i([c.ObservableComponent.field], e.prototype, \"fontSize\", void 0), i([c.ObservableComponent.field], e.prototype, \"fontWeight\", void 0), i([c.ObservableComponent.component], e.prototype, \"font\", void 0), i([c.ObservableComponent.field], e.prototype, \"value\", void 0), i([c.ObservableComponent.field], e.prototype, \"placeholderColor\", void 0), i([c.ObservableComponent.field], e.prototype, \"placeholder\", void 0), i([c.ObservableComponent.field], e.prototype, \"margin\", void 0), i([c.ObservableComponent.field], e.prototype, \"maxWidth\", void 0), i([c.ObservableComponent.field], e.prototype, \"hTextAlign\", void 0), i([c.ObservableComponent.field], e.prototype, \"vTextAlign\", void 0), i([c.ObservableComponent.field], e.prototype, \"autoStretchWidth\", void 0), i([c.ObservableComponent.field], e.prototype, \"background\", void 0), i([c.ObservableComponent.field], e.prototype, \"focusedBackground\", void 0), i([c.ObservableComponent.field], e.prototype, \"textWrapping\", void 0), i([c.ObservableComponent.field], e.prototype, \"shadowBlur\", void 0), i([c.ObservableComponent.field], e.prototype, \"shadowOffsetX\", void 0), i([c.ObservableComponent.field], e.prototype, \"shadowOffsetY\", void 0), i([c.ObservableComponent.field], e.prototype, \"shadowColor\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingTop\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingRight\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingBottom\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingLeft\", void 0), i([s.OnUUIDEvent.uuidEvent], e.prototype, \"onTextSubmit\", void 0), i([s.OnUUIDEvent.uuidEvent], e.prototype, \"onChanged\", void 0), i([s.OnUUIDEvent.uuidEvent], e.prototype, \"onFocus\", void 0), i([s.OnUUIDEvent.uuidEvent], e.prototype, \"onBlur\", void 0), e = i([c.DisposableComponent(\"engine.shape\", s.CLASS_ID.UI_INPUT_TEXT_SHAPE)], e);\n      }(m);\n\n      a.UIInputText = y;\n\n      var h = function (n) {\n        function e(e, t) {\n          var a = n.call(this, e) || this;\n          return a.sourceLeft = 0, a.sourceTop = 0, a.sourceWidth = 1, a.sourceHeight = 1, a.paddingTop = 0, a.paddingRight = 0, a.paddingBottom = 0, a.paddingLeft = 0, a.sizeInPixels = !0, a.onClick = null, a.source = t, a;\n        }\n\n        return d(e, n), i([c.ObservableComponent.field], e.prototype, \"sourceLeft\", void 0), i([c.ObservableComponent.field], e.prototype, \"sourceTop\", void 0), i([c.ObservableComponent.field], e.prototype, \"sourceWidth\", void 0), i([c.ObservableComponent.field], e.prototype, \"sourceHeight\", void 0), i([c.ObservableComponent.component], e.prototype, \"source\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingTop\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingRight\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingBottom\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingLeft\", void 0), i([c.ObservableComponent.field], e.prototype, \"sizeInPixels\", void 0), i([s.OnUUIDEvent.uuidEvent], e.prototype, \"onClick\", void 0), e = i([c.DisposableComponent(\"engine.shape\", s.CLASS_ID.UI_IMAGE_SHAPE)], e);\n      }(m);\n\n      a.UIImage = h;\n\n      var g = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.valueX = 0, e.valueY = 0, e.borderColor = l.Color4.White(), e.backgroundColor = l.Color4.Clear(), e.isHorizontal = !1, e.isVertical = !1, e.paddingTop = 0, e.paddingRight = 0, e.paddingBottom = 0, e.paddingLeft = 0, e.onChanged = null, e;\n        }\n\n        return d(e, n), i([c.ObservableComponent.field], e.prototype, \"valueX\", void 0), i([c.ObservableComponent.field], e.prototype, \"valueY\", void 0), i([c.ObservableComponent.field], e.prototype, \"borderColor\", void 0), i([c.ObservableComponent.field], e.prototype, \"backgroundColor\", void 0), i([c.ObservableComponent.field], e.prototype, \"isHorizontal\", void 0), i([c.ObservableComponent.field], e.prototype, \"isVertical\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingTop\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingRight\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingBottom\", void 0), i([c.ObservableComponent.field], e.prototype, \"paddingLeft\", void 0), i([s.OnUUIDEvent.uuidEvent], e.prototype, \"onChanged\", void 0), e = i([c.DisposableComponent(\"engine.shape\", s.CLASS_ID.UI_SLIDER_SHAPE)], e);\n      }(m);\n\n      a.UIScrollRect = g;\n    }, function (t, a, r) {\n      \"use strict\";\n\n      var _o8,\n          d = this && this.__extends || (_o8 = function o(e, n) {\n        return (_o8 = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (e, n) {\n          e.__proto__ = n;\n        } || function (e, n) {\n          for (var t in n) {\n            n.hasOwnProperty(t) && (e[t] = n[t]);\n          }\n        })(e, n);\n      }, function (e, t) {\n        function n() {\n          this.constructor = e;\n        }\n\n        _o8(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());\n      }),\n          i = this && this.__decorate || function (e, n, t, a) {\n        var r,\n            o = arguments.length,\n            d = o < 3 ? n : null === a ? a = Object.getOwnPropertyDescriptor(n, t) : a;\n        if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) d = Reflect.decorate(e, n, t, a);else for (var i = e.length - 1; i >= 0; i--) {\n          (r = e[i]) && (d = (o < 3 ? r(d) : o > 3 ? r(n, t, d) : r(n, t)) || d);\n        }\n        return o > 3 && d && Object.defineProperty(n, t, d), d;\n      };\n\n      Object.defineProperty(a, \"__esModule\", {\n        value: !0\n      });\n\n      var c = r(0),\n          s = r(4),\n          l = function (n) {\n        function e() {\n          var e = null !== n && n.apply(this, arguments) || this;\n          return e.useDummyModel = !1, e;\n        }\n\n        var t;\n        return d(e, n), t = e, e.Dummy = function () {\n          var e = new t();\n          return e.useDummyModel = !0, e;\n        }, i([c.ObservableComponent.field], e.prototype, \"id\", void 0), i([c.ObservableComponent.field], e.prototype, \"name\", void 0), i([c.ObservableComponent.field], e.prototype, \"expressionTriggerId\", void 0), i([c.ObservableComponent.field], e.prototype, \"expressionTriggerTimestamp\", void 0), i([c.ObservableComponent.field], e.prototype, \"bodyShape\", void 0), i([c.ObservableComponent.field], e.prototype, \"wearables\", void 0), i([c.ObservableComponent.field], e.prototype, \"skinColor\", void 0), i([c.ObservableComponent.field], e.prototype, \"hairColor\", void 0), i([c.ObservableComponent.field], e.prototype, \"eyeColor\", void 0), i([c.ObservableComponent.field], e.prototype, \"useDummyModel\", void 0), e = t = i([c.Component(\"engine.avatarShape\", s.CLASS_ID.AVATAR_SHAPE)], e);\n      }(c.ObservableComponent);\n\n      a.AvatarShape = l;\n    }, function (t, a, r) {\n      \"use strict\";\n\n      var _o9,\n          d = this && this.__extends || (_o9 = function o(e, n) {\n        return (_o9 = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (e, n) {\n          e.__proto__ = n;\n        } || function (e, n) {\n          for (var t in n) {\n            n.hasOwnProperty(t) && (e[t] = n[t]);\n          }\n        })(e, n);\n      }, function (e, t) {\n        function n() {\n          this.constructor = e;\n        }\n\n        _o9(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n());\n      }),\n          i = this && this.__decorate || function (e, n, t, a) {\n        var r,\n            o = arguments.length,\n            d = o < 3 ? n : null === a ? a = Object.getOwnPropertyDescriptor(n, t) : a;\n        if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) d = Reflect.decorate(e, n, t, a);else for (var i = e.length - 1; i >= 0; i--) {\n          (r = e[i]) && (d = (o < 3 ? r(d) : o > 3 ? r(n, t, d) : r(n, t)) || d);\n        }\n        return o > 3 && d && Object.defineProperty(n, t, d), d;\n      };\n\n      Object.defineProperty(a, \"__esModule\", {\n        value: !0\n      });\n\n      var c = r(0),\n          s = r(14),\n          l = r(4),\n          m = function (n) {\n        function e(e) {\n          var t = n.call(this, e) || this;\n          return t.type = \"onFocus\", s.uuidEventSystem.handlerMap[t.uuid] = t, t;\n        }\n\n        return d(e, n), i([c.ObservableComponent.readonly], e.prototype, \"type\", void 0), e = i([c.Component(\"engine.onFocus\", l.CLASS_ID.UUID_CALLBACK)], e);\n      }(l.OnUUIDEvent);\n\n      a.OnFocus = m;\n\n      var p = function (n) {\n        function e(e) {\n          var t = n.call(this, e) || this;\n          return t.type = \"onTextSubmit\", s.uuidEventSystem.handlerMap[t.uuid] = t, t;\n        }\n\n        return d(e, n), i([c.ObservableComponent.readonly], e.prototype, \"type\", void 0), e = i([c.Component(\"engine.onTextSubmit\", l.CLASS_ID.UUID_CALLBACK)], e);\n      }(l.OnUUIDEvent);\n\n      a.OnTextSubmit = p;\n\n      var x = function (n) {\n        function e(e) {\n          var t = n.call(this, e) || this;\n          return t.type = \"onBlur\", s.uuidEventSystem.handlerMap[t.uuid] = t, t;\n        }\n\n        return d(e, n), i([c.ObservableComponent.readonly], e.prototype, \"type\", void 0), e = i([c.Component(\"engine.onBlur\", l.CLASS_ID.UUID_CALLBACK)], e);\n      }(l.OnUUIDEvent);\n\n      a.OnBlur = x;\n\n      var k = function (n) {\n        function e(e) {\n          var t = n.call(this, e) || this;\n          return t.type = \"onEnter\", s.uuidEventSystem.handlerMap[t.uuid] = t, t;\n        }\n\n        return d(e, n), i([c.ObservableComponent.readonly], e.prototype, \"type\", void 0), e = i([c.Component(\"engine.onEnter\", l.CLASS_ID.UUID_CALLBACK)], e);\n      }(l.OnUUIDEvent);\n\n      a.OnEnter = k;\n\n      var u = function (n) {\n        function e(e) {\n          var t = n.call(this, e) || this;\n          return t.type = \"onChange\", s.uuidEventSystem.handlerMap[t.uuid] = t, t;\n        }\n\n        return d(e, n), i([c.ObservableComponent.readonly], e.prototype, \"type\", void 0), e = i([c.Component(\"engine.onChange\", l.CLASS_ID.UUID_CALLBACK)], e);\n      }(l.OnUUIDEvent);\n\n      a.OnChanged = u;\n\n      var f = function (n) {\n        function e(e, t) {\n          var a = n.call(this, e) || this;\n          return a.type = \"onClick\", s.uuidEventSystem.handlerMap[a.uuid] = a, t && (a.showFeedback = !(!1 === t.showFeedback), t.button && (a.button = t.button), t.hoverText && (a.hoverText = t.hoverText), t.distance && (a.distance = t.distance)), a;\n        }\n\n        return d(e, n), i([c.ObservableComponent.readonly], e.prototype, \"type\", void 0), e = i([c.Component(\"engine.onClick\", l.CLASS_ID.UUID_CALLBACK)], e);\n      }(l.OnPointerUUIDEvent);\n\n      a.OnClick = f;\n\n      var T = function (n) {\n        function e(e, t) {\n          var a = n.call(this, e) || this;\n          return a.type = \"pointerDown\", s.uuidEventSystem.handlerMap[a.uuid] = a, t && (a.showFeedback = !(!1 === t.showFeedback), t.button && (a.button = t.button), t.hoverText && (a.hoverText = t.hoverText), t.distance && (a.distance = t.distance)), a;\n        }\n\n        return d(e, n), i([c.ObservableComponent.readonly], e.prototype, \"type\", void 0), e = i([c.Component(\"engine.pointerDown\", l.CLASS_ID.UUID_CALLBACK)], e);\n      }(l.OnPointerUUIDEvent);\n\n      a.OnPointerDown = T;\n\n      var C = function (n) {\n        function e(e, t) {\n          var a = n.call(this, e) || this;\n          return a.type = \"pointerUp\", s.uuidEventSystem.handlerMap[a.uuid] = a, t && (a.showFeedback = !(!1 === t.showFeedback), t.button && (a.button = t.button), t.hoverText && (a.hoverText = t.hoverText), t.distance && (a.distance = t.distance)), a;\n        }\n\n        return d(e, n), i([c.ObservableComponent.readonly], e.prototype, \"type\", void 0), e = i([c.Component(\"engine.pointerUp\", l.CLASS_ID.UUID_CALLBACK)], e);\n      }(l.OnPointerUUIDEvent);\n\n      a.OnPointerUp = C;\n    }, function (e, n, a) {\n      \"use strict\";\n\n      Object.defineProperty(n, \"__esModule\", {\n        value: !0\n      });\n      var r = a(20),\n          o = a(1),\n          d = null,\n          i = null,\n          c = null;\n\n      function p() {\n        return c || (c = new r.Observable()), c;\n      }\n\n      n.getMessageObserver = p;\n\n      var s = function () {\n        function t() {\n          var e = this;\n          this.messageQueue = [], this.connected = !1, this.flushing = !1, function () {\n            if (!i) {\n              (i = dcl.loadModule(\"@decentraland/CommunicationsController\")).then(function (e) {\n                d = e;\n              });\n              var e = p();\n              dcl.subscribe(\"comms\"), dcl.onEvent(function (n) {\n                \"comms\" === n.type && e.notifyObservers(n.data);\n              });\n            }\n\n            return i;\n          }().then(function (n) {\n            e.connected = !0, e.flush();\n          });\n        }\n\n        return t.prototype.on = function (e, n) {\n          return p().add(function (t) {\n            try {\n              var a = JSON.parse(t.message);\n              a.message === e && n(a.payload, t.sender);\n            } catch (t) {\n              dcl.error(\"Error parsing comms message \" + t.message, t);\n            }\n          });\n        }, t.prototype.sendRaw = function (e) {\n          this.messageQueue.push(e), this.connected && this.flush();\n        }, t.prototype.emit = function (e, n) {\n          var t = JSON.stringify({\n            message: e,\n            payload: n\n          });\n          this.sendRaw(t), p().notifyObservers({\n            message: t,\n            sender: \"self\"\n          });\n        }, t.prototype.flush = function () {\n          var e = this;\n\n          if (0 !== this.messageQueue.length && this.connected && d && !this.flushing) {\n            var n = this.messageQueue.shift();\n            this.flushing = !0, dcl.callRpc(d.rpcHandle, \"send\", [n]).then(function (n) {\n              e.flushing = !1, e.flush();\n            }, function (n) {\n              e.flushing = !1, o.error(\"Error flushing MessageBus\", n);\n            });\n          }\n        }, t;\n      }();\n\n      n.MessageBus = s;\n    }]));\n  }\n});","map":null,"metadata":{},"sourceType":"script"}