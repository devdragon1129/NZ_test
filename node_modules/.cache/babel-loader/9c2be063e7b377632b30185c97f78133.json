{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { UniversalCamera } from \"./universalCamera\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Node } from \"../node\";\nNode.AddNodeConstructor(\"GamepadCamera\", function (name, scene) {\n  return function () {\n    return new GamepadCamera(name, Vector3.Zero(), scene);\n  };\n});\n/**\r\n * This represents a FPS type of camera. This is only here for back compat purpose.\r\n * Please use the UniversalCamera instead as both are identical.\r\n * @see https://doc.babylonjs.com/features/cameras#universal-camera\r\n */\n\nvar GamepadCamera =\n/** @class */\nfunction (_super) {\n  __extends(GamepadCamera, _super);\n  /**\r\n   * Instantiates a new Gamepad Camera\r\n   * This represents a FPS type of camera. This is only here for back compat purpose.\r\n   * Please use the UniversalCamera instead as both are identical.\r\n   * @see https://doc.babylonjs.com/features/cameras#universal-camera\r\n   * @param name Define the name of the camera in the scene\r\n   * @param position Define the start position of the camera in the scene\r\n   * @param scene Define the scene the camera belongs to\r\n   */\n\n\n  function GamepadCamera(name, position, scene) {\n    return _super.call(this, name, position, scene) || this;\n  }\n  /**\r\n   * Gets the current object class name.\r\n   * @return the class name\r\n   */\n\n\n  GamepadCamera.prototype.getClassName = function () {\n    return \"GamepadCamera\";\n  };\n\n  return GamepadCamera;\n}(UniversalCamera);\n\nexport { GamepadCamera };","map":null,"metadata":{},"sourceType":"module"}