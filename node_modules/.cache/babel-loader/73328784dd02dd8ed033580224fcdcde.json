{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Material } from \"./material\";\nimport { serialize, expandToProperty, serializeAsTexture, SerializationHelper } from '../Misc/decorators';\nimport { MaterialFlags } from './materialFlags';\nimport { MaterialHelper } from './materialHelper';\n/**\r\n * Define the code related to the detail map parameters of a material\r\n *\r\n * Inspired from:\r\n *   Unity: https://docs.unity3d.com/Packages/com.unity.render-pipelines.high-definition@9.0/manual/Mask-Map-and-Detail-Map.html and https://docs.unity3d.com/Manual/StandardShaderMaterialParameterDetail.html\r\n *   Unreal: https://docs.unrealengine.com/en-US/Engine/Rendering/Materials/HowTo/DetailTexturing/index.html\r\n *   Cryengine: https://docs.cryengine.com/display/SDKDOC2/Detail+Maps\r\n */\n\nvar DetailMapConfiguration =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiate a new detail map\r\n   * @param markAllSubMeshesAsTexturesDirty Callback to flag the material to dirty\r\n   */\n  function DetailMapConfiguration(markAllSubMeshesAsTexturesDirty) {\n    this._texture = null;\n    /**\r\n     * Defines how strongly the detail diffuse/albedo channel is blended with the regular diffuse/albedo texture\r\n     * Bigger values mean stronger blending\r\n     */\n\n    this.diffuseBlendLevel = 1;\n    /**\r\n     * Defines how strongly the detail roughness channel is blended with the regular roughness value\r\n     * Bigger values mean stronger blending. Only used with PBR materials\r\n     */\n\n    this.roughnessBlendLevel = 1;\n    /**\r\n     * Defines how strong the bump effect from the detail map is\r\n     * Bigger values mean stronger effect\r\n     */\n\n    this.bumpLevel = 1;\n    this._normalBlendMethod = Material.MATERIAL_NORMALBLENDMETHOD_WHITEOUT;\n    this._isEnabled = false;\n    /**\r\n     * Enable or disable the detail map on this material\r\n     */\n\n    this.isEnabled = false;\n    this._internalMarkAllSubMeshesAsTexturesDirty = markAllSubMeshesAsTexturesDirty;\n  }\n  /** @hidden */\n\n\n  DetailMapConfiguration.prototype._markAllSubMeshesAsTexturesDirty = function () {\n    this._internalMarkAllSubMeshesAsTexturesDirty();\n  };\n  /**\r\n   * Gets whether the submesh is ready to be used or not.\r\n   * @param defines the list of \"defines\" to update.\r\n   * @param scene defines the scene the material belongs to.\r\n   * @returns - boolean indicating that the submesh is ready or not.\r\n   */\n\n\n  DetailMapConfiguration.prototype.isReadyForSubMesh = function (defines, scene) {\n    var engine = scene.getEngine();\n\n    if (defines._areTexturesDirty && scene.texturesEnabled) {\n      if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled) {\n        // Detail texture cannot be not blocking.\n        if (!this._texture.isReady()) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Update the defines for detail map usage\r\n   * @param defines the list of \"defines\" to update.\r\n   * @param scene defines the scene the material belongs to.\r\n   */\n\n\n  DetailMapConfiguration.prototype.prepareDefines = function (defines, scene) {\n    if (this._isEnabled) {\n      defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\n      var engine = scene.getEngine();\n\n      if (defines._areTexturesDirty) {\n        if (engine.getCaps().standardDerivatives && this._texture && MaterialFlags.DetailTextureEnabled && this._isEnabled) {\n          MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"DETAIL\");\n          defines.DETAIL_NORMALBLENDMETHOD = this._normalBlendMethod;\n        } else {\n          defines.DETAIL = false;\n        }\n      }\n    } else {\n      defines.DETAIL = false;\n    }\n  };\n  /**\r\n   * Binds the material data.\r\n   * @param uniformBuffer defines the Uniform buffer to fill in.\r\n   * @param scene defines the scene the material belongs to.\r\n   * @param isFrozen defines whether the material is frozen or not.\r\n   */\n\n\n  DetailMapConfiguration.prototype.bindForSubMesh = function (uniformBuffer, scene, isFrozen) {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n      if (this._texture && MaterialFlags.DetailTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vDetailInfos\", this._texture.coordinatesIndex, this.diffuseBlendLevel, this.bumpLevel, this.roughnessBlendLevel);\n        MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"detail\");\n      }\n    } // Textures\n\n\n    if (scene.texturesEnabled) {\n      if (this._texture && MaterialFlags.DetailTextureEnabled) {\n        uniformBuffer.setTexture(\"detailSampler\", this._texture);\n      }\n    }\n  };\n  /**\r\n   * Checks to see if a texture is used in the material.\r\n   * @param texture - Base texture to use.\r\n   * @returns - Boolean specifying if a texture is used in the material.\r\n   */\n\n\n  DetailMapConfiguration.prototype.hasTexture = function (texture) {\n    if (this._texture === texture) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Returns an array of the actively used textures.\r\n   * @param activeTextures Array of BaseTextures\r\n   */\n\n\n  DetailMapConfiguration.prototype.getActiveTextures = function (activeTextures) {\n    if (this._texture) {\n      activeTextures.push(this._texture);\n    }\n  };\n  /**\r\n   * Returns the animatable textures.\r\n   * @param animatables Array of animatable textures.\r\n   */\n\n\n  DetailMapConfiguration.prototype.getAnimatables = function (animatables) {\n    if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n      animatables.push(this._texture);\n    }\n  };\n  /**\r\n   * Disposes the resources of the material.\r\n   * @param forceDisposeTextures - Forces the disposal of all textures.\r\n   */\n\n\n  DetailMapConfiguration.prototype.dispose = function (forceDisposeTextures) {\n    var _a;\n\n    if (forceDisposeTextures) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n    }\n  };\n  /**\r\n  * Get the current class name useful for serialization or dynamic coding.\r\n  * @returns \"DetailMap\"\r\n  */\n\n\n  DetailMapConfiguration.prototype.getClassName = function () {\n    return \"DetailMap\";\n  };\n  /**\r\n   * Add the required uniforms to the current list.\r\n   * @param uniforms defines the current uniform list.\r\n   */\n\n\n  DetailMapConfiguration.AddUniforms = function (uniforms) {\n    uniforms.push(\"vDetailInfos\");\n  };\n  /**\r\n   * Add the required samplers to the current list.\r\n   * @param samplers defines the current sampler list.\r\n   */\n\n\n  DetailMapConfiguration.AddSamplers = function (samplers) {\n    samplers.push(\"detailSampler\");\n  };\n  /**\r\n   * Add the required uniforms to the current buffer.\r\n   * @param uniformBuffer defines the current uniform buffer.\r\n   */\n\n\n  DetailMapConfiguration.PrepareUniformBuffer = function (uniformBuffer) {\n    uniformBuffer.addUniform(\"vDetailInfos\", 4);\n    uniformBuffer.addUniform(\"detailMatrix\", 16);\n  };\n  /**\r\n   * Makes a duplicate of the current instance into another one.\r\n   * @param detailMap define the instance where to copy the info\r\n   */\n\n\n  DetailMapConfiguration.prototype.copyTo = function (detailMap) {\n    SerializationHelper.Clone(function () {\n      return detailMap;\n    }, this);\n  };\n  /**\r\n   * Serializes this detail map instance\r\n   * @returns - An object with the serialized instance.\r\n   */\n\n\n  DetailMapConfiguration.prototype.serialize = function () {\n    return SerializationHelper.Serialize(this);\n  };\n  /**\r\n   * Parses a detail map setting from a serialized object.\r\n   * @param source - Serialized object.\r\n   * @param scene Defines the scene we are parsing for\r\n   * @param rootUrl Defines the rootUrl to load from\r\n   */\n\n\n  DetailMapConfiguration.prototype.parse = function (source, scene, rootUrl) {\n    var _this = this;\n\n    SerializationHelper.Parse(function () {\n      return _this;\n    }, source, scene, rootUrl);\n  };\n\n  __decorate([serializeAsTexture(\"detailTexture\"), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], DetailMapConfiguration.prototype, \"texture\", void 0);\n\n  __decorate([serialize()], DetailMapConfiguration.prototype, \"diffuseBlendLevel\", void 0);\n\n  __decorate([serialize()], DetailMapConfiguration.prototype, \"roughnessBlendLevel\", void 0);\n\n  __decorate([serialize()], DetailMapConfiguration.prototype, \"bumpLevel\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], DetailMapConfiguration.prototype, \"normalBlendMethod\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], DetailMapConfiguration.prototype, \"isEnabled\", void 0);\n\n  return DetailMapConfiguration;\n}();\n\nexport { DetailMapConfiguration };","map":null,"metadata":{},"sourceType":"module"}