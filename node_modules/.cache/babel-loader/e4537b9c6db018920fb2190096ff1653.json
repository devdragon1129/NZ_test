{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;\n\nvar code_1 = require(\"./code\");\n\nvar ValueError = /*#__PURE__*/function (_Error) {\n  _inherits(ValueError, _Error);\n\n  function ValueError(name) {\n    var _this;\n\n    _classCallCheck(this, ValueError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ValueError).call(this, \"CodeGen: \\\"code\\\" for \".concat(name, \" not defined\")));\n    _this.value = name.value;\n    return _this;\n  }\n\n  return ValueError;\n}(_wrapNativeSuper(Error));\n\nvar UsedValueState;\n\n(function (UsedValueState) {\n  UsedValueState[UsedValueState[\"Started\"] = 0] = \"Started\";\n  UsedValueState[UsedValueState[\"Completed\"] = 1] = \"Completed\";\n})(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));\n\nexports.varKinds = {\n  const: new code_1.Name(\"const\"),\n  let: new code_1.Name(\"let\"),\n  var: new code_1.Name(\"var\")\n};\n\nvar Scope = /*#__PURE__*/function () {\n  function Scope() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        prefixes = _ref.prefixes,\n        parent = _ref.parent;\n\n    _classCallCheck(this, Scope);\n\n    this._names = {};\n    this._prefixes = prefixes;\n    this._parent = parent;\n  }\n\n  _createClass(Scope, [{\n    key: \"toName\",\n    value: function toName(nameOrPrefix) {\n      return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);\n    }\n  }, {\n    key: \"name\",\n    value: function name(prefix) {\n      return new code_1.Name(this._newName(prefix));\n    }\n  }, {\n    key: \"_newName\",\n    value: function _newName(prefix) {\n      var ng = this._names[prefix] || this._nameGroup(prefix);\n\n      return \"\".concat(prefix).concat(ng.index++);\n    }\n  }, {\n    key: \"_nameGroup\",\n    value: function _nameGroup(prefix) {\n      var _a, _b;\n\n      if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || this._prefixes && !this._prefixes.has(prefix)) {\n        throw new Error(\"CodeGen: prefix \\\"\".concat(prefix, \"\\\" is not allowed in this scope\"));\n      }\n\n      return this._names[prefix] = {\n        prefix: prefix,\n        index: 0\n      };\n    }\n  }]);\n\n  return Scope;\n}();\n\nexports.Scope = Scope;\n\nvar ValueScopeName = /*#__PURE__*/function (_code_1$Name) {\n  _inherits(ValueScopeName, _code_1$Name);\n\n  function ValueScopeName(prefix, nameStr) {\n    var _this2;\n\n    _classCallCheck(this, ValueScopeName);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ValueScopeName).call(this, nameStr));\n    _this2.prefix = prefix;\n    return _this2;\n  }\n\n  _createClass(ValueScopeName, [{\n    key: \"setValue\",\n    value: function setValue(value, _ref2) {\n      var property = _ref2.property,\n          itemIndex = _ref2.itemIndex;\n      this.value = value;\n      this.scopePath = (0, code_1._)(_templateObject || (_templateObject = _taggedTemplateLiteral([\".\", \"[\", \"]\"])), new code_1.Name(property), itemIndex);\n    }\n  }]);\n\n  return ValueScopeName;\n}(code_1.Name);\n\nexports.ValueScopeName = ValueScopeName;\nvar line = (0, code_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n\"], [\"\\\\n\"])));\n\nvar ValueScope = /*#__PURE__*/function (_Scope) {\n  _inherits(ValueScope, _Scope);\n\n  function ValueScope(opts) {\n    var _this3;\n\n    _classCallCheck(this, ValueScope);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(ValueScope).call(this, opts));\n    _this3._values = {};\n    _this3._scope = opts.scope;\n    _this3.opts = _objectSpread({}, opts, {\n      _n: opts.lines ? line : code_1.nil\n    });\n    return _this3;\n  }\n\n  _createClass(ValueScope, [{\n    key: \"get\",\n    value: function get() {\n      return this._scope;\n    }\n  }, {\n    key: \"name\",\n    value: function name(prefix) {\n      return new ValueScopeName(prefix, this._newName(prefix));\n    }\n  }, {\n    key: \"value\",\n    value: function value(nameOrPrefix, _value) {\n      var _a;\n\n      if (_value.ref === undefined) throw new Error(\"CodeGen: ref must be passed in value\");\n      var name = this.toName(nameOrPrefix);\n      var prefix = name.prefix;\n      var valueKey = (_a = _value.key) !== null && _a !== void 0 ? _a : _value.ref;\n      var vs = this._values[prefix];\n\n      if (vs) {\n        var _name = vs.get(valueKey);\n\n        if (_name) return _name;\n      } else {\n        vs = this._values[prefix] = new Map();\n      }\n\n      vs.set(valueKey, name);\n      var s = this._scope[prefix] || (this._scope[prefix] = []);\n      var itemIndex = s.length;\n      s[itemIndex] = _value.ref;\n      name.setValue(_value, {\n        property: prefix,\n        itemIndex: itemIndex\n      });\n      return name;\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(prefix, keyOrRef) {\n      var vs = this._values[prefix];\n      if (!vs) return;\n      return vs.get(keyOrRef);\n    }\n  }, {\n    key: \"scopeRefs\",\n    value: function scopeRefs(scopeName) {\n      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._values;\n      return this._reduceValues(values, function (name) {\n        if (name.scopePath === undefined) throw new Error(\"CodeGen: name \\\"\".concat(name, \"\\\" has no value\"));\n        return (0, code_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \"\", \"\"])), scopeName, name.scopePath);\n      });\n    }\n  }, {\n    key: \"scopeCode\",\n    value: function scopeCode() {\n      var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._values;\n      var usedValues = arguments.length > 1 ? arguments[1] : undefined;\n      var getCode = arguments.length > 2 ? arguments[2] : undefined;\n      return this._reduceValues(values, function (name) {\n        if (name.value === undefined) throw new Error(\"CodeGen: name \\\"\".concat(name, \"\\\" has no value\"));\n        return name.value.code;\n      }, usedValues, getCode);\n    }\n  }, {\n    key: \"_reduceValues\",\n    value: function _reduceValues(values, valueCode) {\n      var _this4 = this;\n\n      var usedValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var getCode = arguments.length > 3 ? arguments[3] : undefined;\n      var code = code_1.nil;\n\n      var _loop = function _loop(prefix) {\n        var vs = values[prefix];\n        if (!vs) return \"continue\";\n        var nameSet = usedValues[prefix] = usedValues[prefix] || new Map();\n        vs.forEach(function (name) {\n          if (nameSet.has(name)) return;\n          nameSet.set(name, UsedValueState.Started);\n          var c = valueCode(name);\n\n          if (c) {\n            var def = _this4.opts.es5 ? exports.varKinds.var : exports.varKinds.const;\n            code = (0, code_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \"\", \" \", \" = \", \";\", \"\"])), code, def, name, c, _this4.opts._n);\n          } else if (c = getCode === null || getCode === void 0 ? void 0 : getCode(name)) {\n            code = (0, code_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \"\", \"\", \"\"])), code, c, _this4.opts._n);\n          } else {\n            throw new ValueError(name);\n          }\n\n          nameSet.set(name, UsedValueState.Completed);\n        });\n      };\n\n      for (var prefix in values) {\n        var _ret = _loop(prefix);\n\n        if (_ret === \"continue\") continue;\n      }\n\n      return code;\n    }\n  }]);\n\n  return ValueScope;\n}(Scope);\n\nexports.ValueScope = ValueScope;","map":null,"metadata":{},"sourceType":"script"}