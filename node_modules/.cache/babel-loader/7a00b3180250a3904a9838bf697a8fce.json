{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/Modals/DeployModal/DeployToPool/DeployToPool.tsx\";\nimport * as React from 'react';\nimport { Button, Header, Loader } from 'decentraland-ui';\nimport Modal from 'decentraland-dapps/dist/containers/Modal';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { getAnalytics } from 'decentraland-dapps/dist/modules/analytics/utils';\nimport { ShareModalType } from 'components/Modals/ShareModal/ShareModal.types';\nimport Icon from 'components/Icon';\nimport './DeployToPool.css';\n\nvar DeployToLand = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DeployToLand, _React$PureComponent);\n\n  function DeployToLand() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DeployToLand);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DeployToLand)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isSubmitting: false,\n      isSuccess: false\n    };\n    _this.analytics = getAnalytics();\n    _this.handleSubmit = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _this$props, project, onDeployToPool, projectId;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$props = _this.props, project = _this$props.project, onDeployToPool = _this$props.onDeployToPool;\n              projectId = project.id;\n\n              _this.setState({\n                isSubmitting: true\n              });\n\n              onDeployToPool(projectId);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.handleClose = function () {\n      var _this$props2 = _this.props,\n          isLoading = _this$props2.isLoading,\n          isRecording = _this$props2.isRecording,\n          isUploadingRecording = _this$props2.isUploadingRecording;\n\n      if (!isLoading && !isRecording && !isUploadingRecording) {\n        _this.props.onClose();\n      }\n    };\n\n    _this.handleLogin = function () {\n      _this.props.onOpenModal('WalletLoginModal');\n    };\n\n    _this.handleShare = function () {\n      var _this$props3 = _this.props,\n          project = _this$props3.project,\n          onOpenModal = _this$props3.onOpenModal;\n      var projectId = project.id;\n      onOpenModal('ShareModal', {\n        type: ShareModalType.POOL,\n        id: projectId\n      });\n    };\n\n    _this.renderView = function () {\n      var _this$props4 = _this.props,\n          isRecording = _this$props4.isRecording,\n          isUploadingRecording = _this$props4.isUploadingRecording,\n          isLoading = _this$props4.isLoading,\n          isLoggedIn = _this$props4.isLoggedIn;\n      var hasProgress = isRecording || isUploadingRecording;\n      if (_this.state.isSuccess) return _this.renderSuccess();\n      if (hasProgress) return _this.renderProgress();\n      if (!hasProgress && !isLoading && isLoggedIn) return _this.renderSubmit();\n      if (!isLoggedIn) return _this.renderLogin();\n      return /*#__PURE__*/React.createElement(Loader, {\n        size: \"big\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 12\n        }\n      });\n    };\n\n    _this.wrapInModal = function (view) {\n      var name = _this.props.name;\n      return /*#__PURE__*/React.createElement(Modal, {\n        name: name,\n        onClose: _this.handleClose,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 7\n        }\n      }, view);\n    };\n\n    return _this;\n  }\n\n  _createClass(DeployToLand, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.analytics.track('Publish to Pool');\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var isLoading = nextProps.isLoading,\n          error = nextProps.error;\n\n      if (this.state.isSubmitting && !isLoading && !error) {\n        this.setState({\n          isSubmitting: false,\n          isSuccess: true\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.setState({\n        isSubmitting: false,\n        isSuccess: false\n      });\n    }\n  }, {\n    key: \"renderSubmit\",\n    value: function renderSubmit() {\n      var _this$props5 = this.props,\n          error = _this$props5.error,\n          isReady = _this$props5.isReady;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"DeployToPool\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modal-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"modal-close\",\n        onClick: this.handleClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Header, {\n        size: \"large\",\n        className: \"modal-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.pool.title')), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"modal-subtitle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.pool.subtitle')), error ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"error\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      }, t('global.error_ocurred'), \" \\\"\", error, \"\\\"\") : null, /*#__PURE__*/React.createElement(Button, {\n        className: \"submit\",\n        primary: true,\n        size: \"small\",\n        onClick: this.handleSubmit,\n        loading: !isReady,\n        disabled: !isReady,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.pool.action')));\n    }\n  }, {\n    key: \"renderSuccess\",\n    value: function renderSuccess() {\n      var _this$props6 = this.props,\n          media = _this$props6.media,\n          onClose = _this$props6.onClose;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"DeployToPool success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: media ? media.preview : '',\n        className: \"preview\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Header, {\n        size: \"large\",\n        className: \"modal-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.pool.success.title')), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"modal-subtitle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.pool.success.body')), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"submit\",\n        size: \"small\",\n        primary: true,\n        onClick: this.handleShare,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }\n      }, t('global.share')), /*#__PURE__*/React.createElement(Button, {\n        className: \"submit\",\n        size: \"small\",\n        secondary: true,\n        onClick: onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }\n      }, t('global.done'))));\n    }\n  }, {\n    key: \"renderProgress\",\n    value: function renderProgress() {\n      var _this$props7 = this.props,\n          isRecording = _this$props7.isRecording,\n          progress = _this$props7.progress;\n      var classes = 'progress-bar';\n\n      if (progress === 100) {\n        classes += ' active';\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"DeployToPool progress\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Header, {\n        size: \"large\",\n        className: \"modal-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 9\n        }\n      }, isRecording ? t('deployment_modal.land.progress.recording.title') : t('deployment_modal.land.progress.uploading_recording.title')), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"modal-subtitle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }\n      }, isRecording ? t('deployment_modal.land.progress.creating_files.description') : t('deployment_modal.land.progress.uploading_recording.description')), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"progress-bar-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes,\n        style: {\n          width: \"\".concat(progress, \"%\")\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }\n      })));\n    }\n  }, {\n    key: \"renderLogin\",\n    value: function renderLogin() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"DeployToPool\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modal-header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"modal-close\",\n        onClick: this.handleClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Header, {\n        size: \"large\",\n        className: \"modal-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.pool.sign_in.title')), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"modal-subtitle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.pool.sign_in.subtitle')), /*#__PURE__*/React.createElement(Button, {\n        className: \"submit\",\n        primary: true,\n        size: \"small\",\n        onClick: this.handleLogin,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      }, t('global.sign_in')));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.wrapInModal(this.renderView());\n    }\n  }]);\n\n  return DeployToLand;\n}(React.PureComponent);\n\nexport { DeployToLand as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/DeployModal/DeployToPool/DeployToPool.tsx"],"names":["React","Button","Header","Loader","Modal","t","getAnalytics","ShareModalType","Icon","DeployToLand","state","isSubmitting","isSuccess","analytics","handleSubmit","props","project","onDeployToPool","projectId","id","setState","handleClose","isLoading","isRecording","isUploadingRecording","onClose","handleLogin","onOpenModal","handleShare","type","POOL","renderView","isLoggedIn","hasProgress","renderSuccess","renderProgress","renderSubmit","renderLogin","wrapInModal","view","name","track","nextProps","error","isReady","media","preview","progress","classes","width","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Button, Header, Loader } from 'decentraland-ui'\nimport Modal from 'decentraland-dapps/dist/containers/Modal'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { getAnalytics } from 'decentraland-dapps/dist/modules/analytics/utils'\nimport { ShareModalType, ShareModalMetadata } from 'components/Modals/ShareModal/ShareModal.types'\nimport Icon from 'components/Icon'\n\nimport { Props, State } from './DeployToPool.types'\nimport './DeployToPool.css'\n\nexport default class DeployToLand extends React.PureComponent<Props, State> {\n  state = {\n    isSubmitting: false,\n    isSuccess: false\n  }\n\n  analytics = getAnalytics()\n\n  componentDidMount() {\n    this.analytics.track('Publish to Pool')\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    const { isLoading, error } = nextProps\n\n    if (this.state.isSubmitting && !isLoading && !error) {\n      this.setState({\n        isSubmitting: false,\n        isSuccess: true\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      isSubmitting: false,\n      isSuccess: false\n    })\n  }\n\n  handleSubmit = async () => {\n    const { project, onDeployToPool } = this.props\n    const projectId = project!.id\n\n    this.setState({ isSubmitting: true })\n\n    onDeployToPool(projectId)\n  }\n\n  handleClose = () => {\n    const { isLoading, isRecording, isUploadingRecording } = this.props\n    if (!isLoading && !isRecording && !isUploadingRecording) {\n      this.props.onClose()\n    }\n  }\n\n  handleLogin = () => {\n    this.props.onOpenModal('WalletLoginModal')\n  }\n\n  handleShare = () => {\n    const { project, onOpenModal } = this.props\n    const projectId = project!.id\n\n    onOpenModal('ShareModal', {\n      type: ShareModalType.POOL,\n      id: projectId\n    } as ShareModalMetadata)\n  }\n\n  renderSubmit() {\n    const { error, isReady } = this.props\n\n    return (\n      <div className=\"DeployToPool\">\n        <div className=\"modal-header\">\n          <Icon name=\"modal-close\" onClick={this.handleClose} />\n        </div>\n        <Header size=\"large\" className=\"modal-title\">\n          {t('deployment_modal.pool.title')}\n        </Header>\n        <p className=\"modal-subtitle\">{t('deployment_modal.pool.subtitle')}</p>\n        {error ? (\n          <div className=\"error\">\n            {t('global.error_ocurred')} \"{error}\"\n          </div>\n        ) : null}\n        <Button className=\"submit\" primary size=\"small\" onClick={this.handleSubmit} loading={!isReady} disabled={!isReady}>\n          {t('deployment_modal.pool.action')}\n        </Button>\n      </div>\n    )\n  }\n\n  renderSuccess() {\n    const { media, onClose } = this.props\n\n    return (\n      <div className=\"DeployToPool success\">\n        <img src={media ? media.preview : ''} className=\"preview\" />\n        <Header size=\"large\" className=\"modal-title\">\n          {t('deployment_modal.pool.success.title')}\n        </Header>\n        <p className=\"modal-subtitle\">{t('deployment_modal.pool.success.body')}</p>\n        <div>\n          <Button className=\"submit\" size=\"small\" primary onClick={this.handleShare}>\n            {t('global.share')}\n          </Button>\n          <Button className=\"submit\" size=\"small\" secondary onClick={onClose}>\n            {t('global.done')}\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  renderProgress() {\n    const { isRecording, progress } = this.props\n\n    let classes = 'progress-bar'\n    if (progress === 100) {\n      classes += ' active'\n    }\n\n    return (\n      <div className=\"DeployToPool progress\">\n        <Header size=\"large\" className=\"modal-title\">\n          {isRecording\n            ? t('deployment_modal.land.progress.recording.title')\n            : t('deployment_modal.land.progress.uploading_recording.title')}\n        </Header>\n        <p className=\"modal-subtitle\">\n          {isRecording\n            ? t('deployment_modal.land.progress.creating_files.description')\n            : t('deployment_modal.land.progress.uploading_recording.description')}\n        </p>\n        <div className=\"progress-bar-container\">\n          <div className={classes} style={{ width: `${progress}%` }} />\n        </div>\n      </div>\n    )\n  }\n\n  renderLogin() {\n    return (\n      <div className=\"DeployToPool\">\n        <div className=\"modal-header\">\n          <Icon name=\"modal-close\" onClick={this.handleClose} />\n        </div>\n        <Header size=\"large\" className=\"modal-title\">\n          {t('deployment_modal.pool.sign_in.title')}\n        </Header>\n        <p className=\"modal-subtitle\">{t('deployment_modal.pool.sign_in.subtitle')}</p>\n        <Button className=\"submit\" primary size=\"small\" onClick={this.handleLogin}>\n          {t('global.sign_in')}\n        </Button>\n      </div>\n    )\n  }\n\n  renderView = () => {\n    const { isRecording, isUploadingRecording, isLoading, isLoggedIn } = this.props\n    const hasProgress = isRecording || isUploadingRecording\n\n    if (this.state.isSuccess) return this.renderSuccess()\n    if (hasProgress) return this.renderProgress()\n    if (!hasProgress && !isLoading && isLoggedIn) return this.renderSubmit()\n    if (!isLoggedIn) return this.renderLogin()\n\n    return <Loader size=\"big\" />\n  }\n\n  wrapInModal = (view: JSX.Element) => {\n    const { name } = this.props\n    return (\n      <Modal name={name} onClose={this.handleClose}>\n        {view}\n      </Modal>\n    )\n  }\n\n  render() {\n    return this.wrapInModal(this.renderView())\n  }\n}\n"]},"metadata":{},"sourceType":"module"}