{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { BaseCameraMouseWheelInput } from \"../../Cameras/Inputs/BaseCameraMouseWheelInput\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\nimport { Coordinate } from \"../../Maths/math.axis\";\n\nvar _CameraProperty;\n\n(function (_CameraProperty) {\n  _CameraProperty[_CameraProperty[\"MoveRelative\"] = 0] = \"MoveRelative\";\n  _CameraProperty[_CameraProperty[\"RotateRelative\"] = 1] = \"RotateRelative\";\n  _CameraProperty[_CameraProperty[\"MoveScene\"] = 2] = \"MoveScene\";\n})(_CameraProperty || (_CameraProperty = {}));\n/**\r\n * Manage the mouse wheel inputs to control a free camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\n\nvar FreeCameraMouseWheelInput =\n/** @class */\nfunction (_super) {\n  __extends(FreeCameraMouseWheelInput, _super);\n\n  function FreeCameraMouseWheelInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._moveRelative = Vector3.Zero();\n    _this._rotateRelative = Vector3.Zero();\n    _this._moveScene = Vector3.Zero();\n    /**\r\n     * These are set to the desired default behaviour.\r\n     */\n\n    _this._wheelXAction = _CameraProperty.MoveRelative;\n    _this._wheelXActionCoordinate = Coordinate.X;\n    _this._wheelYAction = _CameraProperty.MoveRelative;\n    _this._wheelYActionCoordinate = Coordinate.Z;\n    _this._wheelZAction = null;\n    _this._wheelZActionCoordinate = null;\n    return _this;\n  }\n  /**\r\n   * Gets the class name of the current input.\r\n   * @returns the class name\r\n   */\n\n\n  FreeCameraMouseWheelInput.prototype.getClassName = function () {\n    return \"FreeCameraMouseWheelInput\";\n  };\n\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelXMoveRelative\", {\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function get() {\n      if (this._wheelXAction !== _CameraProperty.MoveRelative) {\n        return null;\n      }\n\n      return this._wheelXActionCoordinate;\n    },\n\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's X axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelXAction !== _CameraProperty.MoveRelative) {\n        // Attempting to clear different _wheelXAction.\n        return;\n      }\n\n      this._wheelXAction = _CameraProperty.MoveRelative;\n      this._wheelXActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelYMoveRelative\", {\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function get() {\n      if (this._wheelYAction !== _CameraProperty.MoveRelative) {\n        return null;\n      }\n\n      return this._wheelYActionCoordinate;\n    },\n\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's Y axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelYAction !== _CameraProperty.MoveRelative) {\n        // Attempting to clear different _wheelYAction.\n        return;\n      }\n\n      this._wheelYAction = _CameraProperty.MoveRelative;\n      this._wheelYActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelZMoveRelative\", {\n    /**\r\n     * Get the configured movement axis (relative to camera's orientation) the\r\n     * mouse wheel's Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function get() {\n      if (this._wheelZAction !== _CameraProperty.MoveRelative) {\n        return null;\n      }\n\n      return this._wheelZActionCoordinate;\n    },\n\n    /**\r\n     * Set which movement axis (relative to camera's orientation) the mouse\r\n     * wheel's Z axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelZAction !== _CameraProperty.MoveRelative) {\n        // Attempting to clear different _wheelZAction.\n        return;\n      }\n\n      this._wheelZAction = _CameraProperty.MoveRelative;\n      this._wheelZActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelXRotateRelative\", {\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function get() {\n      if (this._wheelXAction !== _CameraProperty.RotateRelative) {\n        return null;\n      }\n\n      return this._wheelXActionCoordinate;\n    },\n\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's X axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelXAction !== _CameraProperty.RotateRelative) {\n        // Attempting to clear different _wheelXAction.\n        return;\n      }\n\n      this._wheelXAction = _CameraProperty.RotateRelative;\n      this._wheelXActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelYRotateRelative\", {\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function get() {\n      if (this._wheelYAction !== _CameraProperty.RotateRelative) {\n        return null;\n      }\n\n      return this._wheelYActionCoordinate;\n    },\n\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's Y axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelYAction !== _CameraProperty.RotateRelative) {\n        // Attempting to clear different _wheelYAction.\n        return;\n      }\n\n      this._wheelYAction = _CameraProperty.RotateRelative;\n      this._wheelYActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelZRotateRelative\", {\n    /**\r\n     * Get the configured rotation axis (relative to camera's orientation) the\r\n     * mouse wheel's Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function get() {\n      if (this._wheelZAction !== _CameraProperty.RotateRelative) {\n        return null;\n      }\n\n      return this._wheelZActionCoordinate;\n    },\n\n    /**\r\n     * Set which rotation axis (relative to camera's orientation) the mouse\r\n     * wheel's Z axis controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelZAction !== _CameraProperty.RotateRelative) {\n        // Attempting to clear different _wheelZAction.\n        return;\n      }\n\n      this._wheelZAction = _CameraProperty.RotateRelative;\n      this._wheelZActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelXMoveScene\", {\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * X axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function get() {\n      if (this._wheelXAction !== _CameraProperty.MoveScene) {\n        return null;\n      }\n\n      return this._wheelXActionCoordinate;\n    },\n\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's X axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelXAction !== _CameraProperty.MoveScene) {\n        // Attempting to clear different _wheelXAction.\n        return;\n      }\n\n      this._wheelXAction = _CameraProperty.MoveScene;\n      this._wheelXActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelYMoveScene\", {\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * Y axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function get() {\n      if (this._wheelYAction !== _CameraProperty.MoveScene) {\n        return null;\n      }\n\n      return this._wheelYActionCoordinate;\n    },\n\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's Y axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelYAction !== _CameraProperty.MoveScene) {\n        // Attempting to clear different _wheelYAction.\n        return;\n      }\n\n      this._wheelYAction = _CameraProperty.MoveScene;\n      this._wheelYActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FreeCameraMouseWheelInput.prototype, \"wheelZMoveScene\", {\n    /**\r\n     * Get the configured movement axis (relative to the scene) the mouse wheel's\r\n     * Z axis controls.\r\n     * @returns The configured axis or null if none.\r\n     */\n    get: function get() {\n      if (this._wheelZAction !== _CameraProperty.MoveScene) {\n        return null;\n      }\n\n      return this._wheelZActionCoordinate;\n    },\n\n    /**\r\n     * Set which movement axis (relative to the scene) the mouse wheel's Z axis\r\n     * controls.\r\n     * @param axis The axis to be moved. Set null to clear.\r\n     */\n    set: function set(axis) {\n      if (axis === null && this._wheelZAction !== _CameraProperty.MoveScene) {\n        // Attempting to clear different _wheelZAction.\n        return;\n      }\n\n      this._wheelZAction = _CameraProperty.MoveScene;\n      this._wheelZActionCoordinate = axis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Called for each rendered frame.\r\n   */\n\n  FreeCameraMouseWheelInput.prototype.checkInputs = function () {\n    if (this._wheelDeltaX === 0 && this._wheelDeltaY === 0 && this._wheelDeltaZ == 0) {\n      return;\n    } // Clear the camera properties that we might be updating.\n\n\n    this._moveRelative.setAll(0);\n\n    this._rotateRelative.setAll(0);\n\n    this._moveScene.setAll(0); // Set the camera properties that are to be updated.\n\n\n    this._updateCamera();\n\n    if (this.camera.getScene().useRightHandedSystem) {\n      // TODO: Does this need done for worldUpdate too?\n      this._moveRelative.z *= -1;\n    } // Convert updates relative to camera to world position update.\n\n\n    var cameraTransformMatrix = Matrix.Zero();\n    this.camera.getViewMatrix().invertToRef(cameraTransformMatrix);\n    var transformedDirection = Vector3.Zero();\n    Vector3.TransformNormalToRef(this._moveRelative, cameraTransformMatrix, transformedDirection); // Apply updates to camera position.\n\n    this.camera.cameraRotation.x += this._rotateRelative.x / 200;\n    this.camera.cameraRotation.y += this._rotateRelative.y / 200;\n    this.camera.cameraDirection.addInPlace(transformedDirection);\n    this.camera.cameraDirection.addInPlace(this._moveScene); // Call the base class implementation to handle observers and do cleanup.\n\n    _super.prototype.checkInputs.call(this);\n  };\n  /**\r\n   * Update the camera according to any configured properties for the 3\r\n   * mouse-wheel axis.\r\n   */\n\n\n  FreeCameraMouseWheelInput.prototype._updateCamera = function () {\n    var moveRelative = this._moveRelative;\n    var rotateRelative = this._rotateRelative;\n    var moveScene = this._moveScene;\n\n    var updateCameraProperty = function updateCameraProperty(\n    /* Mouse-wheel delta. */\n    value,\n    /* Camera property to be changed. */\n    cameraProperty,\n    /* Axis of Camera property to be changed. */\n    coordinate) {\n      if (value === 0) {\n        // Mouse wheel has not moved.\n        return;\n      }\n\n      if (cameraProperty === null || coordinate === null) {\n        // Mouse wheel axis not configured.\n        return;\n      }\n\n      var action = null;\n\n      switch (cameraProperty) {\n        case _CameraProperty.MoveRelative:\n          action = moveRelative;\n          break;\n\n        case _CameraProperty.RotateRelative:\n          action = rotateRelative;\n          break;\n\n        case _CameraProperty.MoveScene:\n          action = moveScene;\n          break;\n      }\n\n      switch (coordinate) {\n        case Coordinate.X:\n          action.set(value, 0, 0);\n          break;\n\n        case Coordinate.Y:\n          action.set(0, value, 0);\n          break;\n\n        case Coordinate.Z:\n          action.set(0, 0, value);\n          break;\n      }\n    }; // Do the camera updates for each of the 3 touch-wheel axis.\n\n\n    updateCameraProperty(this._wheelDeltaX, this._wheelXAction, this._wheelXActionCoordinate);\n    updateCameraProperty(this._wheelDeltaY, this._wheelYAction, this._wheelYActionCoordinate);\n    updateCameraProperty(this._wheelDeltaZ, this._wheelZAction, this._wheelZActionCoordinate);\n  };\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelXMoveRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelYMoveRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelZMoveRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelXRotateRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelYRotateRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelZRotateRelative\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelXMoveScene\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelYMoveScene\", null);\n\n  __decorate([serialize()], FreeCameraMouseWheelInput.prototype, \"wheelZMoveScene\", null);\n\n  return FreeCameraMouseWheelInput;\n}(BaseCameraMouseWheelInput);\n\nexport { FreeCameraMouseWheelInput };\nCameraInputTypes[\"FreeCameraMouseWheelInput\"] = FreeCameraMouseWheelInput;","map":null,"metadata":{},"sourceType":"module"}