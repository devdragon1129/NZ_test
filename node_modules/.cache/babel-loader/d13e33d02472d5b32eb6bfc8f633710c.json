{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../../Misc/observable\";\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\nimport { WebVRController } from \"./webVRController\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\nimport { Engine } from '../../Engines/engine';\n/**\r\n * Oculus Touch Controller\r\n */\n\nvar OculusTouchController =\n/** @class */\nfunction (_super) {\n  __extends(OculusTouchController, _super);\n  /**\r\n   * Creates a new OculusTouchController from a gamepad\r\n   * @param vrGamepad the gamepad that the controller should be created from\r\n   */\n\n\n  function OculusTouchController(vrGamepad) {\n    var _this = _super.call(this, vrGamepad) || this;\n    /**\r\n     * Fired when the secondary trigger on this controller is modified\r\n     */\n\n\n    _this.onSecondaryTriggerStateChangedObservable = new Observable();\n    /**\r\n     * Fired when the thumb rest on this controller is modified\r\n     */\n\n    _this.onThumbRestChangedObservable = new Observable();\n    _this.controllerType = PoseEnabledControllerType.OCULUS;\n    return _this;\n  }\n  /**\r\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n   * @param scene scene in which to add meshes\r\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n   */\n\n\n  OculusTouchController.prototype.initControllerMesh = function (scene, meshLoaded) {\n    var _this = this;\n\n    var meshName; // Hand\n\n    if (this.hand === 'left') {\n      meshName = OculusTouchController.MODEL_LEFT_FILENAME;\n    } else {\n      // Right is the default if no hand is specified\n      meshName = OculusTouchController.MODEL_RIGHT_FILENAME;\n    }\n\n    SceneLoader.ImportMesh(\"\", OculusTouchController._IsQuest ? OculusTouchController.QUEST_MODEL_BASE_URL : OculusTouchController.MODEL_BASE_URL, meshName, scene, function (newMeshes) {\n      /*\r\n      Parent Mesh name: oculus_touch_left\r\n      - body\r\n      - trigger\r\n      - thumbstick\r\n      - grip\r\n      - button_y\r\n      - button_x\r\n      - button_enter\r\n      */\n      _this._defaultModel = OculusTouchController._IsQuest ? newMeshes[0] : newMeshes[1];\n\n      _this.attachToMesh(_this._defaultModel);\n\n      if (meshLoaded) {\n        meshLoaded(_this._defaultModel);\n      }\n    });\n  };\n\n  Object.defineProperty(OculusTouchController.prototype, \"onAButtonStateChangedObservable\", {\n    /**\r\n     * Fired when the A button on this controller is modified\r\n     */\n    get: function get() {\n      if (this.hand === 'right') {\n        return this.onMainButtonStateChangedObservable;\n      } else {\n        throw new Error('No A button on left hand');\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(OculusTouchController.prototype, \"onBButtonStateChangedObservable\", {\n    /**\r\n     * Fired when the B button on this controller is modified\r\n     */\n    get: function get() {\n      if (this.hand === 'right') {\n        return this.onSecondaryButtonStateChangedObservable;\n      } else {\n        throw new Error('No B button on left hand');\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(OculusTouchController.prototype, \"onXButtonStateChangedObservable\", {\n    /**\r\n     * Fired when the X button on this controller is modified\r\n     */\n    get: function get() {\n      if (this.hand === 'left') {\n        return this.onMainButtonStateChangedObservable;\n      } else {\n        throw new Error('No X button on right hand');\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(OculusTouchController.prototype, \"onYButtonStateChangedObservable\", {\n    /**\r\n     * Fired when the Y button on this controller is modified\r\n     */\n    get: function get() {\n      if (this.hand === 'left') {\n        return this.onSecondaryButtonStateChangedObservable;\n      } else {\n        throw new Error('No Y button on right hand');\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n    * Called once for each button that changed state since the last frame\r\n    * 0) thumb stick (touch, press, value = pressed (0,1)). value is in this.leftStick\r\n    * 1) index trigger (touch (?), press (only when value > 0.1), value 0 to 1)\r\n    * 2) secondary trigger (same)\r\n    * 3) A (right) X (left), touch, pressed = value\r\n    * 4) B / Y\r\n    * 5) thumb rest\r\n    * @param buttonIdx Which button index changed\r\n    * @param state New state of the button\r\n    * @param changes Which properties on the state changed since last frame\r\n    */\n\n  OculusTouchController.prototype._handleButtonChange = function (buttonIdx, state, changes) {\n    var notifyObject = state; //{ state: state, changes: changes };\n\n    var triggerDirection = this.hand === 'right' ? -1 : 1;\n\n    switch (buttonIdx) {\n      case 0:\n        this.onPadStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 1:\n        // index trigger\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          this._defaultModel.getChildren()[3].rotation.x = -notifyObject.value * 0.20;\n          this._defaultModel.getChildren()[3].position.y = -notifyObject.value * 0.005;\n          this._defaultModel.getChildren()[3].position.z = -notifyObject.value * 0.005;\n        }\n\n        this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 2:\n        // secondary trigger\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          this._defaultModel.getChildren()[4].position.x = triggerDirection * notifyObject.value * 0.0035;\n        }\n\n        this.onSecondaryTriggerStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 3:\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          if (notifyObject.pressed) {\n            this._defaultModel.getChildren()[1].position.y = -0.001;\n          } else {\n            this._defaultModel.getChildren()[1].position.y = 0;\n          }\n        }\n\n        this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 4:\n        if (!OculusTouchController._IsQuest && this._defaultModel) {\n          if (notifyObject.pressed) {\n            this._defaultModel.getChildren()[2].position.y = -0.001;\n          } else {\n            this._defaultModel.getChildren()[2].position.y = 0;\n          }\n        }\n\n        this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 5:\n        this.onThumbRestChangedObservable.notifyObservers(notifyObject);\n        return;\n    }\n  };\n  /**\r\n   * Base Url for the controller model.\r\n   */\n\n\n  OculusTouchController.MODEL_BASE_URL = 'https://controllers.babylonjs.com/oculus/';\n  /**\r\n   * File name for the left controller model.\r\n   */\n\n  OculusTouchController.MODEL_LEFT_FILENAME = 'left.babylon';\n  /**\r\n   * File name for the right controller model.\r\n   */\n\n  OculusTouchController.MODEL_RIGHT_FILENAME = 'right.babylon';\n  /**\r\n   * Base Url for the Quest controller model.\r\n   */\n\n  OculusTouchController.QUEST_MODEL_BASE_URL = 'https://controllers.babylonjs.com/oculusQuest/';\n  /**\r\n   * @hidden\r\n   * If the controllers are running on a device that needs the updated Quest controller models\r\n   */\n\n  OculusTouchController._IsQuest = false;\n  return OculusTouchController;\n}(WebVRController);\n\nexport { OculusTouchController };\n\nPoseEnabledControllerHelper._ControllerFactories.push({\n  canCreate: function canCreate(gamepadInfo) {\n    // If the headset reports being an Oculus Quest, use the Quest controller models\n    if (Engine.LastCreatedEngine && Engine.LastCreatedEngine._vrDisplay && Engine.LastCreatedEngine._vrDisplay.displayName === \"Oculus Quest\") {\n      OculusTouchController._IsQuest = true;\n    }\n\n    return gamepadInfo.id.indexOf('Oculus Touch') !== -1;\n  },\n  create: function create(gamepadInfo) {\n    return new OculusTouchController(gamepadInfo);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}