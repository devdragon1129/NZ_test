{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _taggedTemplateLiteral from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject;\n\nimport { gql } from 'apollo-boost';\nimport { config } from 'config';\nimport { createClient } from './graph';\nexport var MARKETPLACE_URL = config.get('MARKETPLACE_GRAPH_URL', '');\nvar graphClient = createClient(MARKETPLACE_URL);\nvar BATCH_SIZE = 1000;\n\nvar getSubdomainQuery = function getSubdomainQuery() {\n  return gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  query getUserNames($owner: String, $offset: Int) {\\n    nfts(first: \", \", skip: $offset, where: { owner: $owner, category: ens }) {\\n      ens {\\n        subdomain\\n      }\\n    }\\n  }\\n\"])), BATCH_SIZE);\n};\n\nexport var MarketplaceAPI = function MarketplaceAPI() {\n  _classCallCheck(this, MarketplaceAPI);\n\n  this.fetchENSList = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address) {\n      var owner, results, page, offset, nextPage, _yield$graphClient$qu, data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (address) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", []);\n\n            case 2:\n              owner = address.toLowerCase();\n              results = [];\n              page = [];\n              offset = 0;\n              nextPage = true;\n\n            case 7:\n              if (!nextPage) {\n                _context.next = 17;\n                break;\n              }\n\n              _context.next = 10;\n              return graphClient.query({\n                query: getSubdomainQuery(),\n                variables: {\n                  owner: owner,\n                  offset: offset\n                }\n              });\n\n            case 10:\n              _yield$graphClient$qu = _context.sent;\n              data = _yield$graphClient$qu.data;\n              page = data.nfts.map(function (ntf) {\n                return \"\".concat(ntf.ens.subdomain);\n              });\n              results = [].concat(_toConsumableArray(results), _toConsumableArray(page));\n\n              if (page.length === BATCH_SIZE) {\n                offset += BATCH_SIZE;\n              } else {\n                nextPage = false;\n              }\n\n              _context.next = 7;\n              break;\n\n            case 17:\n              return _context.abrupt(\"return\", results);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var marketplace = new MarketplaceAPI();","map":{"version":3,"sources":["/opt/work/NZ_test/src/lib/api/marketplace.ts"],"names":["gql","config","createClient","MARKETPLACE_URL","get","graphClient","BATCH_SIZE","getSubdomainQuery","MarketplaceAPI","fetchENSList","address","owner","toLowerCase","results","page","offset","nextPage","query","variables","data","nfts","map","ntf","ens","subdomain","length","marketplace"],"mappings":";;;;;;;;AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,YAAT,QAA6B,SAA7B;AAEA,OAAO,IAAMC,eAAe,GAAGF,MAAM,CAACG,GAAP,CAAW,uBAAX,EAAoC,EAApC,CAAxB;AACP,IAAMC,WAAW,GAAGH,YAAY,CAACC,eAAD,CAAhC;AAEA,IAAMG,UAAU,GAAG,IAAnB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAAMP,GAAN,oQAERM,UAFQ;AAAA,CAA1B;;AAoBA,WAAaE,cAAb;AAAA;;AAAA,OACEC,YADF;AAAA,wEACiB,iBAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBACRA,OADQ;AAAA;AAAA;AAAA;;AAAA,+CAEJ,EAFI;;AAAA;AAIPC,cAAAA,KAJO,GAISD,OAAO,CAACE,WAAR,EAJT;AAKTC,cAAAA,OALS,GAKW,EALX;AAMTC,cAAAA,IANS,GAMQ,EANR;AAOTC,cAAAA,MAPS,GAOA,CAPA;AAQTC,cAAAA,QARS,GAQE,IARF;;AAAA;AAAA,mBASNA,QATM;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAUYX,WAAW,CAACY,KAAZ,CAAwC;AAC7DA,gBAAAA,KAAK,EAAEV,iBAAiB,EADqC;AAE7DW,gBAAAA,SAAS,EAAE;AAAEP,kBAAAA,KAAK,EAALA,KAAF;AAASI,kBAAAA,MAAM,EAANA;AAAT;AAFkD,eAAxC,CAVZ;;AAAA;AAAA;AAUHI,cAAAA,IAVG,yBAUHA,IAVG;AAcXL,cAAAA,IAAI,GAAGK,IAAI,CAACC,IAAL,CAAUC,GAAV,CAAc,UAAAC,GAAG;AAAA,iCAAOA,GAAG,CAACC,GAAJ,CAAQC,SAAf;AAAA,eAAjB,CAAP;AACAX,cAAAA,OAAO,gCAAOA,OAAP,sBAAmBC,IAAnB,EAAP;;AACA,kBAAIA,IAAI,CAACW,MAAL,KAAgBnB,UAApB,EAAgC;AAC9BS,gBAAAA,MAAM,IAAIT,UAAV;AACD,eAFD,MAEO;AACLU,gBAAAA,QAAQ,GAAG,KAAX;AACD;;AApBU;AAAA;;AAAA;AAAA,+CAsBNH,OAtBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA,OAAO,IAAMa,WAAW,GAAG,IAAIlB,cAAJ,EAApB","sourcesContent":["import { gql } from 'apollo-boost'\nimport { config } from 'config'\nimport { createClient } from './graph'\n\nexport const MARKETPLACE_URL = config.get('MARKETPLACE_GRAPH_URL', '')\nconst graphClient = createClient(MARKETPLACE_URL)\n\nconst BATCH_SIZE = 1000\n\nconst getSubdomainQuery = () => gql`\n  query getUserNames($owner: String, $offset: Int) {\n    nfts(first: ${BATCH_SIZE}, skip: $offset, where: { owner: $owner, category: ens }) {\n      ens {\n        subdomain\n      }\n    }\n  }\n`\n\ntype SubdomainTuple = {\n  ens: {\n    subdomain: string[]\n  }\n}\n\ntype SubdomainQueryResult = {\n  nfts: SubdomainTuple[]\n}\n\nexport class MarketplaceAPI {\n  fetchENSList = async (address: string | undefined): Promise<string[]> => {\n    if (!address) {\n      return []\n    }\n    const owner: string = address.toLowerCase()\n    let results: string[] = []\n    let page: string[] = []\n    let offset = 0\n    let nextPage = true\n    while (nextPage) {\n      const { data } = await graphClient.query<SubdomainQueryResult>({\n        query: getSubdomainQuery(),\n        variables: { owner, offset }\n      })\n      page = data.nfts.map(ntf => `${ntf.ens.subdomain}`)\n      results = [...results, ...page]\n      if (page.length === BATCH_SIZE) {\n        offset += BATCH_SIZE\n      } else {\n        nextPage = false\n      }\n    }\n    return results\n  }\n}\n\nexport const marketplace = new MarketplaceAPI()\n"]},"metadata":{},"sourceType":"module"}