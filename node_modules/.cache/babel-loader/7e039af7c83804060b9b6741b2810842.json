{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\nvar _require = require('ipfs-unixfs'),\n    UnixFS = _require.UnixFS;\n\nvar persist = require('../../utils/persist');\n\nvar _require2 = require('ipld-dag-pb'),\n    DAGNode = _require2.DAGNode;\n/**\n * @typedef {import('../../types').BufferImporter} BufferImporter\n */\n\n/**\n * @type {BufferImporter}\n */\n\n\nfunction bufferImporter(_x, _x2, _x3) {\n  return _bufferImporter.apply(this, arguments);\n}\n\nfunction _bufferImporter() {\n  _bufferImporter = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file, block, options) {\n    var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context3.prev = 2;\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n              var buffer;\n              return _regeneratorRuntime.wrap(function _loop$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      buffer = _step.value;\n                      _context2.next = 3;\n                      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                        var unixfs, opts;\n                        return _regeneratorRuntime.wrap(function _callee$(_context) {\n                          while (1) {\n                            switch (_context.prev = _context.next) {\n                              case 0:\n                                options.progress(buffer.length, file.path);\n\n                                /** @type {import('../../types').PersistOptions} */\n                                opts = {\n                                  codec: 'dag-pb',\n                                  cidVersion: options.cidVersion,\n                                  hashAlg: options.hashAlg,\n                                  onlyHash: options.onlyHash\n                                };\n\n                                if (options.rawLeaves) {\n                                  opts.codec = 'raw';\n                                  opts.cidVersion = 1;\n                                } else {\n                                  unixfs = new UnixFS({\n                                    type: options.leafType,\n                                    data: buffer,\n                                    mtime: file.mtime,\n                                    mode: file.mode\n                                  });\n                                  buffer = new DAGNode(unixfs.marshal()).serialize();\n                                }\n\n                                _context.next = 5;\n                                return persist(buffer, block, opts);\n\n                              case 5:\n                                _context.t0 = _context.sent;\n                                _context.t1 = unixfs;\n                                _context.t2 = buffer.length;\n                                return _context.abrupt(\"return\", {\n                                  cid: _context.t0,\n                                  unixfs: _context.t1,\n                                  size: _context.t2\n                                });\n\n                              case 9:\n                              case \"end\":\n                                return _context.stop();\n                            }\n                          }\n                        }, _callee);\n                      }));\n\n                    case 3:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _loop);\n            });\n            _iterator = _asyncIterator(file.content);\n\n          case 5:\n            _context3.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 7:\n            if (!(_iteratorAbruptCompletion = !(_step = _context3.sent).done)) {\n              _context3.next = 12;\n              break;\n            }\n\n            return _context3.delegateYield(_loop(), \"t0\", 9);\n\n          case 9:\n            _iteratorAbruptCompletion = false;\n            _context3.next = 5;\n            break;\n\n          case 12:\n            _context3.next = 18;\n            break;\n\n          case 14:\n            _context3.prev = 14;\n            _context3.t1 = _context3[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context3.t1;\n\n          case 18:\n            _context3.prev = 18;\n            _context3.prev = 19;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context3.next = 23;\n              break;\n            }\n\n            _context3.next = 23;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 23:\n            _context3.prev = 23;\n\n            if (!_didIteratorError) {\n              _context3.next = 26;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 26:\n            return _context3.finish(23);\n\n          case 27:\n            return _context3.finish(18);\n\n          case 28:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2, null, [[2, 14, 18, 28], [19,, 23, 27]]);\n  }));\n  return _bufferImporter.apply(this, arguments);\n}\n\nmodule.exports = bufferImporter;","map":null,"metadata":{},"sourceType":"script"}