{"ast":null,"code":"import _toConsumableArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/Modals/ManageCollectionRoleModal/ManageCollectionRoleModal.tsx\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport * as React from 'react';\nimport { ModalNavigation, ModalActions } from 'decentraland-ui';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport Modal from 'decentraland-dapps/dist/containers/Modal';\nimport { NetworkButton } from 'decentraland-dapps/dist/containers';\nimport { Network } from '@dcl/schemas';\nimport equal from 'fast-deep-equal';\nimport { isValid } from 'lib/address';\nimport { getSaleAddress as _getSaleAddress } from 'modules/collection/utils';\nimport { RoleType } from 'modules/collection/types';\nimport { isEqual } from 'lib/address';\nimport Role from './Role';\nimport EmptyRole from './EmptyRole';\nimport './ManageCollectionRoleModal.css';\n\nvar ManageCollectionRoleModal = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ManageCollectionRoleModal, _React$PureComponent);\n\n  function ManageCollectionRoleModal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ManageCollectionRoleModal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ManageCollectionRoleModal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      roles: _this.getOriginalRoles()\n    };\n\n    _this.handleAddNewRole = function () {\n      var roles = _this.state.roles;\n\n      _this.setState({\n        roles: [].concat(_toConsumableArray(roles), [undefined])\n      });\n    };\n\n    _this.handleAddRole = function (index, role) {\n      if (_this.isValidRole(role)) {\n        var roles = _this.removeRoleAtIndex(index);\n\n        roles.push(role.toLowerCase());\n\n        _this.setState({\n          roles: roles\n        });\n      }\n    };\n\n    _this.handleRemoveRole = function (role) {\n      var roles = _this.state.roles;\n\n      _this.setState({\n        roles: roles.filter(function (_role) {\n          return _role !== role;\n        })\n      });\n    };\n\n    _this.handleCancelNew = function (index) {\n      _this.setState({\n        roles: _this.removeRoleAtIndex(index)\n      });\n    };\n\n    _this.handleSubmit = function () {\n      var collection = _this.props.collection;\n      var roles = _this.state.roles;\n\n      var originalRoles = _this.getOriginalRoles();\n\n      var accessList = [];\n\n      var _iterator = _createForOfIteratorHelper(originalRoles),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var role = _step.value;\n\n          if (!roles.includes(role)) {\n            accessList.push({\n              address: role,\n              hasAccess: false,\n              collection: collection\n            });\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(roles),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _role2 = _step2.value;\n\n          if (!originalRoles.includes(_role2)) {\n            accessList.push({\n              address: _role2,\n              hasAccess: true,\n              collection: collection\n            });\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      _this.setRoles(accessList);\n    };\n\n    return _this;\n  }\n\n  _createClass(ManageCollectionRoleModal, [{\n    key: \"getOriginalRoles\",\n    value: function getOriginalRoles() {\n      var metadata = this.props.metadata;\n      var roles = new Set(metadata.roles);\n      roles.delete(this.getSaleAddress());\n      return Array.from(roles);\n    }\n  }, {\n    key: \"removeRoleAtIndex\",\n    value: function removeRoleAtIndex(index) {\n      var roles = this.state.roles;\n      return [].concat(_toConsumableArray(roles.slice(0, index)), _toConsumableArray(roles.slice(index + 1)));\n    }\n  }, {\n    key: \"isValidRole\",\n    value: function isValidRole(role) {\n      return isValid(role) && !this.state.roles.includes(role) && !isEqual(role, this.getSaleAddress());\n    }\n  }, {\n    key: \"getSaleAddress\",\n    value: function getSaleAddress() {\n      var wallet = this.props.wallet;\n      return _getSaleAddress(wallet.networks.MATIC.chainId);\n    }\n  }, {\n    key: \"setRoles\",\n    value: function setRoles(accessList) {\n      var _this$props = this.props,\n          metadata = _this$props.metadata,\n          collection = _this$props.collection,\n          onSetManagers = _this$props.onSetManagers,\n          onSetMinters = _this$props.onSetMinters;\n      var type = metadata.type;\n\n      switch (type) {\n        case RoleType.MANAGER:\n          return onSetManagers(collection, accessList);\n\n        case RoleType.MINTER:\n          return onSetMinters(collection, accessList);\n\n        default:\n          throw new Error(\"Invalid role type \".concat(type));\n      }\n    }\n  }, {\n    key: \"hasRoleChanged\",\n    value: function hasRoleChanged() {\n      var originalRoles = this.getOriginalRoles().sort();\n      var newRoles = this.state.roles.filter(function (role) {\n        return !!role;\n      }).sort();\n      return !equal(originalRoles, newRoles);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          metadata = _this$props2.metadata,\n          isLoading = _this$props2.isLoading,\n          onClose = _this$props2.onClose;\n      var roles = this.state.roles;\n      var type = metadata.type;\n      return /*#__PURE__*/React.createElement(Modal, {\n        className: \"ManageCollectionRoleModal\",\n        onClose: onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ModalNavigation, {\n        title: t(\"manage_collection_role_modal.\".concat(type, \".title\")),\n        subtitle: t(\"manage_collection_role_modal.\".concat(type, \".subtitle\")),\n        onClose: onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Modal.Content, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"roles\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }\n      }, roles.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"roles-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }\n      }, roles.map(function (role, index) {\n        return role ? /*#__PURE__*/React.createElement(Role, {\n          key: index,\n          address: role,\n          onRemove: _this2.handleRemoveRole,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 23\n          }\n        }) : /*#__PURE__*/React.createElement(EmptyRole, {\n          key: index,\n          onAdd: function onAdd(role) {\n            return _this2.handleAddRole(index, role);\n          },\n          onCancel: function onCancel() {\n            return _this2.handleCancelNew(index);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 23\n          }\n        });\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"add-roles link\",\n        onClick: this.handleAddNewRole,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 17\n        }\n      }, t(\"manage_collection_role_modal.\".concat(type, \".add_new\")))) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"empty-roles-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }\n      }, t(\"manage_collection_role_modal.\".concat(type, \".empty\")), \"\\xA0\", /*#__PURE__*/React.createElement(\"span\", {\n        className: \"link\",\n        onClick: this.handleAddNewRole,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }, t(\"manage_collection_role_modal.adding_one\")))), /*#__PURE__*/React.createElement(ModalActions, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(NetworkButton, {\n        primary: true,\n        onClick: this.handleSubmit,\n        loading: isLoading,\n        disabled: !this.hasRoleChanged(),\n        network: Network.MATIC,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }\n      }, t('global.confirm')))));\n    }\n  }]);\n\n  return ManageCollectionRoleModal;\n}(React.PureComponent);\n\nexport { ManageCollectionRoleModal as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/ManageCollectionRoleModal/ManageCollectionRoleModal.tsx"],"names":["React","ModalNavigation","ModalActions","t","Modal","NetworkButton","Network","equal","isValid","getSaleAddress","RoleType","isEqual","Role","EmptyRole","ManageCollectionRoleModal","state","roles","getOriginalRoles","handleAddNewRole","setState","undefined","handleAddRole","index","role","isValidRole","removeRoleAtIndex","push","toLowerCase","handleRemoveRole","filter","_role","handleCancelNew","handleSubmit","collection","props","originalRoles","accessList","includes","address","hasAccess","setRoles","metadata","Set","delete","Array","from","slice","wallet","networks","MATIC","chainId","onSetManagers","onSetMinters","type","MANAGER","MINTER","Error","sort","newRoles","isLoading","onClose","length","map","hasRoleChanged","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { ModalNavigation, ModalActions } from 'decentraland-ui'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport Modal from 'decentraland-dapps/dist/containers/Modal'\nimport { NetworkButton } from 'decentraland-dapps/dist/containers'\nimport { Network } from '@dcl/schemas'\nimport equal from 'fast-deep-equal'\n\nimport { isValid } from 'lib/address'\nimport { getSaleAddress } from 'modules/collection/utils'\nimport { Access, RoleType } from 'modules/collection/types'\nimport { isEqual } from 'lib/address'\nimport Role from './Role'\nimport EmptyRole from './EmptyRole'\nimport { Props, State } from './ManageCollectionRoleModal.types'\nimport './ManageCollectionRoleModal.css'\n\nexport default class ManageCollectionRoleModal extends React.PureComponent<Props, State> {\n  state: State = { roles: this.getOriginalRoles() }\n\n  getOriginalRoles() {\n    const { metadata } = this.props\n    const roles = new Set(metadata.roles)\n    roles.delete(this.getSaleAddress())\n    return Array.from(roles)\n  }\n\n  handleAddNewRole = () => {\n    const { roles } = this.state\n    this.setState({\n      roles: [...roles, undefined]\n    })\n  }\n\n  handleAddRole = (index: number, role: string) => {\n    if (this.isValidRole(role)) {\n      const roles = this.removeRoleAtIndex(index)\n      roles.push(role.toLowerCase())\n\n      this.setState({ roles })\n    }\n  }\n\n  handleRemoveRole = (role: string) => {\n    const { roles } = this.state\n    this.setState({\n      roles: roles.filter(_role => _role !== role)\n    })\n  }\n\n  handleCancelNew = (index: number) => {\n    this.setState({\n      roles: this.removeRoleAtIndex(index)\n    })\n  }\n\n  handleSubmit = () => {\n    const { collection } = this.props\n    const { roles } = this.state\n    const originalRoles = this.getOriginalRoles()\n\n    const accessList: Access[] = []\n    for (const role of originalRoles) {\n      if (!roles.includes(role)) {\n        accessList.push({ address: role, hasAccess: false, collection })\n      }\n    }\n    for (const role of roles) {\n      if (!originalRoles.includes(role!)) {\n        accessList.push({ address: role!, hasAccess: true, collection })\n      }\n    }\n    this.setRoles(accessList)\n  }\n\n  removeRoleAtIndex(index: number) {\n    const { roles } = this.state\n    return [...roles.slice(0, index), ...roles.slice(index + 1)]\n  }\n\n  isValidRole(role: string) {\n    return isValid(role) && !this.state.roles.includes(role) && !isEqual(role, this.getSaleAddress())\n  }\n\n  getSaleAddress() {\n    const { wallet } = this.props\n    return getSaleAddress(wallet.networks.MATIC.chainId)\n  }\n\n  setRoles(accessList: Access[]) {\n    const { metadata, collection, onSetManagers, onSetMinters } = this.props\n    const { type } = metadata\n\n    switch (type) {\n      case RoleType.MANAGER:\n        return onSetManagers(collection, accessList)\n      case RoleType.MINTER:\n        return onSetMinters(collection, accessList)\n      default:\n        throw new Error(`Invalid role type ${type}`)\n    }\n  }\n\n  hasRoleChanged() {\n    const originalRoles = this.getOriginalRoles().sort()\n    const newRoles = this.state.roles.filter(role => !!role).sort()\n    return !equal(originalRoles, newRoles)\n  }\n\n  render() {\n    const { metadata, isLoading, onClose } = this.props\n    const { roles } = this.state\n    const { type } = metadata\n\n    return (\n      <Modal className=\"ManageCollectionRoleModal\" onClose={onClose}>\n        <ModalNavigation\n          title={t(`manage_collection_role_modal.${type}.title`)}\n          subtitle={t(`manage_collection_role_modal.${type}.subtitle`)}\n          onClose={onClose}\n        />\n        <Modal.Content>\n          <div className=\"roles\">\n            {roles.length > 0 ? (\n              <>\n                <div className=\"roles-list\">\n                  {roles.map((role, index) =>\n                    role ? (\n                      <Role key={index} address={role} onRemove={this.handleRemoveRole} />\n                    ) : (\n                      <EmptyRole\n                        key={index}\n                        onAdd={(role: string) => this.handleAddRole(index, role)}\n                        onCancel={() => this.handleCancelNew(index)}\n                      />\n                    )\n                  )}\n                </div>\n                <div className=\"add-roles link\" onClick={this.handleAddNewRole}>\n                  {t(`manage_collection_role_modal.${type}.add_new`)}\n                </div>\n              </>\n            ) : (\n              <div className=\"empty-roles-list\">\n                {t(`manage_collection_role_modal.${type}.empty`)}&nbsp;\n                <span className=\"link\" onClick={this.handleAddNewRole}>\n                  {t(`manage_collection_role_modal.adding_one`)}\n                </span>\n              </div>\n            )}\n          </div>\n          <ModalActions>\n            <NetworkButton\n              primary\n              onClick={this.handleSubmit}\n              loading={isLoading}\n              disabled={!this.hasRoleChanged()}\n              network={Network.MATIC}\n            >\n              {t('global.confirm')}\n            </NetworkButton>\n          </ModalActions>\n        </Modal.Content>\n      </Modal>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}