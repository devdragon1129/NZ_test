{"ast":null,"code":"import { Tags } from \"../Misc/tags\";\nimport { Quaternion, Vector2, Vector3, Matrix } from \"../Maths/math.vector\";\nimport { _DevTools } from './devTools';\nimport { Color4, Color3 } from '../Maths/math.color';\nvar __decoratorInitialStore = {};\nvar __mergedStore = {};\n\nvar _copySource = function _copySource(creationFunction, source, instanciate) {\n  var destination = creationFunction(); // Tags\n\n  if (Tags) {\n    Tags.AddTagsTo(destination, source.tags);\n  }\n\n  var classStore = getMergedStore(destination); // Properties\n\n  for (var property in classStore) {\n    var propertyDescriptor = classStore[property];\n    var sourceProperty = source[property];\n    var propertyType = propertyDescriptor.type;\n\n    if (sourceProperty !== undefined && sourceProperty !== null && property !== \"uniqueId\") {\n      switch (propertyType) {\n        case 0: // Value\n\n        case 6: // Mesh reference\n\n        case 11:\n          // Camera reference\n          destination[property] = sourceProperty;\n          break;\n\n        case 1:\n          // Texture\n          destination[property] = instanciate || sourceProperty.isRenderTarget ? sourceProperty : sourceProperty.clone();\n          break;\n\n        case 2: // Color3\n\n        case 3: // FresnelParameters\n\n        case 4: // Vector2\n\n        case 5: // Vector3\n\n        case 7: // Color Curves\n\n        case 10: // Quaternion\n\n        case 12:\n          // Matrix\n          destination[property] = instanciate ? sourceProperty : sourceProperty.clone();\n          break;\n      }\n    }\n  }\n\n  return destination;\n};\n\nfunction getDirectStore(target) {\n  var classKey = target.getClassName();\n\n  if (!__decoratorInitialStore[classKey]) {\n    __decoratorInitialStore[classKey] = {};\n  }\n\n  return __decoratorInitialStore[classKey];\n}\n/**\r\n * Return the list of properties flagged as serializable\r\n * @param target: host object\r\n */\n\n\nfunction getMergedStore(target) {\n  var classKey = target.getClassName();\n\n  if (__mergedStore[classKey]) {\n    return __mergedStore[classKey];\n  }\n\n  __mergedStore[classKey] = {};\n  var store = __mergedStore[classKey];\n  var currentTarget = target;\n  var currentKey = classKey;\n\n  while (currentKey) {\n    var initialStore = __decoratorInitialStore[currentKey];\n\n    for (var property in initialStore) {\n      store[property] = initialStore[property];\n    }\n\n    var parent_1 = void 0;\n    var done = false;\n\n    do {\n      parent_1 = Object.getPrototypeOf(currentTarget);\n\n      if (!parent_1.getClassName) {\n        done = true;\n        break;\n      }\n\n      if (parent_1.getClassName() !== currentKey) {\n        break;\n      }\n\n      currentTarget = parent_1;\n    } while (parent_1);\n\n    if (done) {\n      break;\n    }\n\n    currentKey = parent_1.getClassName();\n    currentTarget = parent_1;\n  }\n\n  return store;\n}\n\nfunction generateSerializableMember(type, sourceName) {\n  return function (target, propertyKey) {\n    var classStore = getDirectStore(target);\n\n    if (!classStore[propertyKey]) {\n      classStore[propertyKey] = {\n        type: type,\n        sourceName: sourceName\n      };\n    }\n  };\n}\n\nfunction generateExpandMember(setCallback, targetKey) {\n  if (targetKey === void 0) {\n    targetKey = null;\n  }\n\n  return function (target, propertyKey) {\n    var key = targetKey || \"_\" + propertyKey;\n    Object.defineProperty(target, propertyKey, {\n      get: function get() {\n        return this[key];\n      },\n      set: function set(value) {\n        if (this[key] === value) {\n          return;\n        }\n\n        this[key] = value;\n        target[setCallback].apply(this);\n      },\n      enumerable: true,\n      configurable: true\n    });\n  };\n}\n\nexport function expandToProperty(callback, targetKey) {\n  if (targetKey === void 0) {\n    targetKey = null;\n  }\n\n  return generateExpandMember(callback, targetKey);\n}\nexport function serialize(sourceName) {\n  return generateSerializableMember(0, sourceName); // value member\n}\nexport function serializeAsTexture(sourceName) {\n  return generateSerializableMember(1, sourceName); // texture member\n}\nexport function serializeAsColor3(sourceName) {\n  return generateSerializableMember(2, sourceName); // color3 member\n}\nexport function serializeAsFresnelParameters(sourceName) {\n  return generateSerializableMember(3, sourceName); // fresnel parameters member\n}\nexport function serializeAsVector2(sourceName) {\n  return generateSerializableMember(4, sourceName); // vector2 member\n}\nexport function serializeAsVector3(sourceName) {\n  return generateSerializableMember(5, sourceName); // vector3 member\n}\nexport function serializeAsMeshReference(sourceName) {\n  return generateSerializableMember(6, sourceName); // mesh reference member\n}\nexport function serializeAsColorCurves(sourceName) {\n  return generateSerializableMember(7, sourceName); // color curves\n}\nexport function serializeAsColor4(sourceName) {\n  return generateSerializableMember(8, sourceName); // color 4\n}\nexport function serializeAsImageProcessingConfiguration(sourceName) {\n  return generateSerializableMember(9, sourceName); // image processing\n}\nexport function serializeAsQuaternion(sourceName) {\n  return generateSerializableMember(10, sourceName); // quaternion member\n}\nexport function serializeAsMatrix(sourceName) {\n  return generateSerializableMember(12, sourceName); // matrix member\n}\n/**\r\n * Decorator used to define property that can be serialized as reference to a camera\r\n * @param sourceName defines the name of the property to decorate\r\n */\n\nexport function serializeAsCameraReference(sourceName) {\n  return generateSerializableMember(11, sourceName); // camera reference member\n}\n/**\r\n * Class used to help serialization objects\r\n */\n\nvar SerializationHelper =\n/** @class */\nfunction () {\n  function SerializationHelper() {}\n  /**\r\n   * Appends the serialized animations from the source animations\r\n   * @param source Source containing the animations\r\n   * @param destination Target to store the animations\r\n   */\n\n\n  SerializationHelper.AppendSerializedAnimations = function (source, destination) {\n    if (source.animations) {\n      destination.animations = [];\n\n      for (var animationIndex = 0; animationIndex < source.animations.length; animationIndex++) {\n        var animation = source.animations[animationIndex];\n        destination.animations.push(animation.serialize());\n      }\n    }\n  };\n  /**\r\n   * Static function used to serialized a specific entity\r\n   * @param entity defines the entity to serialize\r\n   * @param serializationObject defines the optional target obecjt where serialization data will be stored\r\n   * @returns a JSON compatible object representing the serialization of the entity\r\n   */\n\n\n  SerializationHelper.Serialize = function (entity, serializationObject) {\n    if (!serializationObject) {\n      serializationObject = {};\n    } // Tags\n\n\n    if (Tags) {\n      serializationObject.tags = Tags.GetTags(entity);\n    }\n\n    var serializedProperties = getMergedStore(entity); // Properties\n\n    for (var property in serializedProperties) {\n      var propertyDescriptor = serializedProperties[property];\n      var targetPropertyName = propertyDescriptor.sourceName || property;\n      var propertyType = propertyDescriptor.type;\n      var sourceProperty = entity[property];\n\n      if (sourceProperty !== undefined && sourceProperty !== null && property !== \"uniqueId\") {\n        switch (propertyType) {\n          case 0:\n            // Value\n            serializationObject[targetPropertyName] = sourceProperty;\n            break;\n\n          case 1:\n            // Texture\n            serializationObject[targetPropertyName] = sourceProperty.serialize();\n            break;\n\n          case 2:\n            // Color3\n            serializationObject[targetPropertyName] = sourceProperty.asArray();\n            break;\n\n          case 3:\n            // FresnelParameters\n            serializationObject[targetPropertyName] = sourceProperty.serialize();\n            break;\n\n          case 4:\n            // Vector2\n            serializationObject[targetPropertyName] = sourceProperty.asArray();\n            break;\n\n          case 5:\n            // Vector3\n            serializationObject[targetPropertyName] = sourceProperty.asArray();\n            break;\n\n          case 6:\n            // Mesh reference\n            serializationObject[targetPropertyName] = sourceProperty.id;\n            break;\n\n          case 7:\n            // Color Curves\n            serializationObject[targetPropertyName] = sourceProperty.serialize();\n            break;\n\n          case 8:\n            // Color 4\n            serializationObject[targetPropertyName] = sourceProperty.asArray();\n            break;\n\n          case 9:\n            // Image Processing\n            serializationObject[targetPropertyName] = sourceProperty.serialize();\n            break;\n\n          case 10:\n            // Quaternion\n            serializationObject[targetPropertyName] = sourceProperty.asArray();\n            break;\n\n          case 11:\n            // Camera reference\n            serializationObject[targetPropertyName] = sourceProperty.id;\n\n          case 12:\n            // Matrix\n            serializationObject[targetPropertyName] = sourceProperty.asArray();\n            break;\n        }\n      }\n    }\n\n    return serializationObject;\n  };\n  /**\r\n   * Creates a new entity from a serialization data object\r\n   * @param creationFunction defines a function used to instanciated the new entity\r\n   * @param source defines the source serialization data\r\n   * @param scene defines the hosting scene\r\n   * @param rootUrl defines the root url for resources\r\n   * @returns a new entity\r\n   */\n\n\n  SerializationHelper.Parse = function (creationFunction, source, scene, rootUrl) {\n    if (rootUrl === void 0) {\n      rootUrl = null;\n    }\n\n    var destination = creationFunction();\n\n    if (!rootUrl) {\n      rootUrl = \"\";\n    } // Tags\n\n\n    if (Tags) {\n      Tags.AddTagsTo(destination, source.tags);\n    }\n\n    var classStore = getMergedStore(destination); // Properties\n\n    for (var property in classStore) {\n      var propertyDescriptor = classStore[property];\n      var sourceProperty = source[propertyDescriptor.sourceName || property];\n      var propertyType = propertyDescriptor.type;\n\n      if (sourceProperty !== undefined && sourceProperty !== null && property !== \"uniqueId\") {\n        var dest = destination;\n\n        switch (propertyType) {\n          case 0:\n            // Value\n            dest[property] = sourceProperty;\n            break;\n\n          case 1:\n            // Texture\n            if (scene) {\n              dest[property] = SerializationHelper._TextureParser(sourceProperty, scene, rootUrl);\n            }\n\n            break;\n\n          case 2:\n            // Color3\n            dest[property] = Color3.FromArray(sourceProperty);\n            break;\n\n          case 3:\n            // FresnelParameters\n            dest[property] = SerializationHelper._FresnelParametersParser(sourceProperty);\n            break;\n\n          case 4:\n            // Vector2\n            dest[property] = Vector2.FromArray(sourceProperty);\n            break;\n\n          case 5:\n            // Vector3\n            dest[property] = Vector3.FromArray(sourceProperty);\n            break;\n\n          case 6:\n            // Mesh reference\n            if (scene) {\n              dest[property] = scene.getLastMeshByID(sourceProperty);\n            }\n\n            break;\n\n          case 7:\n            // Color Curves\n            dest[property] = SerializationHelper._ColorCurvesParser(sourceProperty);\n            break;\n\n          case 8:\n            // Color 4\n            dest[property] = Color4.FromArray(sourceProperty);\n            break;\n\n          case 9:\n            // Image Processing\n            dest[property] = SerializationHelper._ImageProcessingConfigurationParser(sourceProperty);\n            break;\n\n          case 10:\n            // Quaternion\n            dest[property] = Quaternion.FromArray(sourceProperty);\n            break;\n\n          case 11:\n            // Camera reference\n            if (scene) {\n              dest[property] = scene.getCameraByID(sourceProperty);\n            }\n\n          case 12:\n            // Matrix\n            dest[property] = Matrix.FromArray(sourceProperty);\n            break;\n        }\n      }\n    }\n\n    return destination;\n  };\n  /**\r\n   * Clones an object\r\n   * @param creationFunction defines the function used to instanciate the new object\r\n   * @param source defines the source object\r\n   * @returns the cloned object\r\n   */\n\n\n  SerializationHelper.Clone = function (creationFunction, source) {\n    return _copySource(creationFunction, source, false);\n  };\n  /**\r\n   * Instanciates a new object based on a source one (some data will be shared between both object)\r\n   * @param creationFunction defines the function used to instanciate the new object\r\n   * @param source defines the source object\r\n   * @returns the new object\r\n   */\n\n\n  SerializationHelper.Instanciate = function (creationFunction, source) {\n    return _copySource(creationFunction, source, true);\n  };\n  /** @hidden */\n\n\n  SerializationHelper._ImageProcessingConfigurationParser = function (sourceProperty) {\n    throw _DevTools.WarnImport(\"ImageProcessingConfiguration\");\n  };\n  /** @hidden */\n\n\n  SerializationHelper._FresnelParametersParser = function (sourceProperty) {\n    throw _DevTools.WarnImport(\"FresnelParameters\");\n  };\n  /** @hidden */\n\n\n  SerializationHelper._ColorCurvesParser = function (sourceProperty) {\n    throw _DevTools.WarnImport(\"ColorCurves\");\n  };\n  /** @hidden */\n\n\n  SerializationHelper._TextureParser = function (sourceProperty, scene, rootUrl) {\n    throw _DevTools.WarnImport(\"Texture\");\n  };\n\n  return SerializationHelper;\n}();\n\nexport { SerializationHelper };","map":null,"metadata":{},"sourceType":"module"}