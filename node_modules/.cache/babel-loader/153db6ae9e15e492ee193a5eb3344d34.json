{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Wearable = exports.isThirdParty = exports.isStandard = void 0;\n\nvar validation_1 = require(\"../../validation\");\n\nvar rarity_1 = require(\"../../dapps/rarity\");\n\nvar wearable_category_1 = require(\"../../dapps/wearable-category\");\n\nvar i18n_1 = require(\"./i18n\");\n\nvar representation_1 = require(\"./representation\");\n\nvar metrics_1 = require(\"./metrics\");\n\nvar displayable_1 = require(\"../shared/displayable\");\n\nvar merkle_tree_1 = require(\"../merkle-tree\");\n\nvar validateThirdParty = function validateThirdParty(wearable) {\n  if (!merkle_tree_1.MerkleProof.validate(wearable.merkleProof)) return false;\n  if (wearable.merkleProof.hashingKeys.length === 0) return false;\n  var containsAllKeys = wearable.merkleProof.hashingKeys.every(function (key) {\n    return wearable.hasOwnProperty(key);\n  });\n  var proofIsNotEmpty = wearable.merkleProof.proof.length > 0;\n  return containsAllKeys && proofIsNotEmpty;\n};\n\nvar validateStandardWearable = function validateStandardWearable(rarity, collectionAddress) {\n  return rarity_1.Rarity.validate(rarity) && !!collectionAddress;\n};\n\nvar isStandard = function isStandard(wearable) {\n  return validateStandardWearable(wearable.rarity, wearable.collectionAddress);\n};\n\nexports.isStandard = isStandard;\n\nvar isThirdParty = function isThirdParty(wearable) {\n  return validateThirdParty(wearable);\n};\n\nexports.isThirdParty = isThirdParty;\n/** @alpha */\n\nvar Wearable;\n\n(function (Wearable) {\n  Wearable.schema = {\n    type: 'object',\n    properties: _objectSpread({}, displayable_1.displayableProperties, {\n      id: {\n        type: 'string'\n      },\n      description: {\n        type: 'string'\n      },\n      collectionAddress: {\n        type: 'string',\n        nullable: true\n      },\n      rarity: _objectSpread({}, rarity_1.Rarity.schema, {\n        nullable: true\n      }),\n      name: {\n        type: 'string'\n      },\n      i18n: {\n        type: 'array',\n        items: i18n_1.I18N.schema,\n        minItems: 1\n      },\n      data: {\n        type: 'object',\n        properties: {\n          replaces: {\n            type: 'array',\n            items: wearable_category_1.WearableCategory.schema\n          },\n          hides: {\n            type: 'array',\n            items: wearable_category_1.WearableCategory.schema\n          },\n          tags: {\n            type: 'array',\n            items: {\n              type: 'string',\n              minLength: 1\n            }\n          },\n          representations: {\n            type: 'array',\n            items: representation_1.WearableRepresentation.schema,\n            minItems: 1\n          },\n          category: wearable_category_1.WearableCategory.schema\n        },\n        additionalProperties: false,\n        required: ['replaces', 'hides', 'tags', 'representations', 'category']\n      },\n      thumbnail: {\n        type: 'string'\n      },\n      image: {\n        type: 'string'\n      },\n      metrics: _objectSpread({}, metrics_1.Metrics.schema, {\n        nullable: true\n      }),\n      merkleProof: _objectSpread({}, merkle_tree_1.MerkleProof.schema, {\n        nullable: true\n      }),\n      content: {\n        type: 'object',\n        nullable: true,\n        additionalProperties: {\n          type: 'string'\n        },\n        required: []\n      }\n    }),\n    additionalProperties: true,\n    required: ['id', 'description', 'name', 'data', 'thumbnail', 'image', 'i18n']\n  };\n  var schemaValidator = (0, validation_1.generateValidator)(Wearable.schema);\n  /**\n   * Validates that the wearable metadata complies with the standard or third party wearable, and doesn't have repeated locales.\n   * Some fields are defined as optional but those are validated to be present as standard XOR third party:\n   *  Standard Wearables should contain:\n   *    - collectionAddress\n   *    - rarity\n   *  Third Party Wearables should contain:\n   *    - merkleProof\n   */\n\n  Wearable.validate = function (wearable) {\n    return schemaValidator(wearable) && validateDuplicatedLocales(wearable.i18n) && XOR(validateStandardWearable(wearable.rarity, wearable.collectionAddress), validateThirdParty(wearable));\n  };\n\n  var XOR = function XOR(b1, b2) {\n    return b1 && !b2 || b2 && !b1;\n  }; // Returns true only if there are no entries with the same locale\n\n\n  var validateDuplicatedLocales = function validateDuplicatedLocales(i18ns) {\n    return i18ns.every(function (_ref, index) {\n      var code = _ref.code;\n      return i18ns.findIndex(function (i18n) {\n        return i18n.code === code;\n      }) === index;\n    });\n  };\n})(Wearable = exports.Wearable || (exports.Wearable = {}));","map":null,"metadata":{},"sourceType":"script"}