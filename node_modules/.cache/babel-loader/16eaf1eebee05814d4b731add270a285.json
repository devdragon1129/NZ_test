{"ast":null,"code":"/**\r\n * PostProcessRenderPipelineManager class\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocessrenderpipeline\r\n */\nvar PostProcessRenderPipelineManager =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes a PostProcessRenderPipelineManager\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_postprocessrenderpipeline\r\n   */\n  function PostProcessRenderPipelineManager() {\n    this._renderPipelines = {};\n  }\n\n  Object.defineProperty(PostProcessRenderPipelineManager.prototype, \"supportedPipelines\", {\n    /**\r\n     * Gets the list of supported render pipelines\r\n     */\n    get: function get() {\n      var result = [];\n\n      for (var renderPipelineName in this._renderPipelines) {\n        if (this._renderPipelines.hasOwnProperty(renderPipelineName)) {\n          var pipeline = this._renderPipelines[renderPipelineName];\n\n          if (pipeline.isSupported) {\n            result.push(pipeline);\n          }\n        }\n      }\n\n      return result;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Adds a pipeline to the manager\r\n   * @param renderPipeline The pipeline to add\r\n   */\n\n  PostProcessRenderPipelineManager.prototype.addPipeline = function (renderPipeline) {\n    this._renderPipelines[renderPipeline._name] = renderPipeline;\n  };\n  /**\r\n   * Attaches a camera to the pipeline\r\n   * @param renderPipelineName The name of the pipeline to attach to\r\n   * @param cameras the camera to attach\r\n   * @param unique if the camera can be attached multiple times to the pipeline\r\n   */\n\n\n  PostProcessRenderPipelineManager.prototype.attachCamerasToRenderPipeline = function (renderPipelineName, cameras, unique) {\n    if (unique === void 0) {\n      unique = false;\n    }\n\n    var renderPipeline = this._renderPipelines[renderPipelineName];\n\n    if (!renderPipeline) {\n      return;\n    }\n\n    renderPipeline._attachCameras(cameras, unique);\n  };\n  /**\r\n   * Detaches a camera from the pipeline\r\n   * @param renderPipelineName The name of the pipeline to detach from\r\n   * @param cameras the camera to detach\r\n   */\n\n\n  PostProcessRenderPipelineManager.prototype.detachCamerasFromRenderPipeline = function (renderPipelineName, cameras) {\n    var renderPipeline = this._renderPipelines[renderPipelineName];\n\n    if (!renderPipeline) {\n      return;\n    }\n\n    renderPipeline._detachCameras(cameras);\n  };\n  /**\r\n   * Enables an effect by name on a pipeline\r\n   * @param renderPipelineName the name of the pipeline to enable the effect in\r\n   * @param renderEffectName the name of the effect to enable\r\n   * @param cameras the cameras that the effect should be enabled on\r\n   */\n\n\n  PostProcessRenderPipelineManager.prototype.enableEffectInPipeline = function (renderPipelineName, renderEffectName, cameras) {\n    var renderPipeline = this._renderPipelines[renderPipelineName];\n\n    if (!renderPipeline) {\n      return;\n    }\n\n    renderPipeline._enableEffect(renderEffectName, cameras);\n  };\n  /**\r\n   * Disables an effect by name on a pipeline\r\n   * @param renderPipelineName the name of the pipeline to disable the effect in\r\n   * @param renderEffectName the name of the effect to disable\r\n   * @param cameras the cameras that the effect should be disabled on\r\n   */\n\n\n  PostProcessRenderPipelineManager.prototype.disableEffectInPipeline = function (renderPipelineName, renderEffectName, cameras) {\n    var renderPipeline = this._renderPipelines[renderPipelineName];\n\n    if (!renderPipeline) {\n      return;\n    }\n\n    renderPipeline._disableEffect(renderEffectName, cameras);\n  };\n  /**\r\n   * Updates the state of all contained render pipelines and disposes of any non supported pipelines\r\n   */\n\n\n  PostProcessRenderPipelineManager.prototype.update = function () {\n    for (var renderPipelineName in this._renderPipelines) {\n      if (this._renderPipelines.hasOwnProperty(renderPipelineName)) {\n        var pipeline = this._renderPipelines[renderPipelineName];\n\n        if (!pipeline.isSupported) {\n          pipeline.dispose();\n          delete this._renderPipelines[renderPipelineName];\n        } else {\n          pipeline._update();\n        }\n      }\n    }\n  };\n  /** @hidden */\n\n\n  PostProcessRenderPipelineManager.prototype._rebuild = function () {\n    for (var renderPipelineName in this._renderPipelines) {\n      if (this._renderPipelines.hasOwnProperty(renderPipelineName)) {\n        var pipeline = this._renderPipelines[renderPipelineName];\n\n        pipeline._rebuild();\n      }\n    }\n  };\n  /**\r\n   * Disposes of the manager and pipelines\r\n   */\n\n\n  PostProcessRenderPipelineManager.prototype.dispose = function () {\n    for (var renderPipelineName in this._renderPipelines) {\n      if (this._renderPipelines.hasOwnProperty(renderPipelineName)) {\n        var pipeline = this._renderPipelines[renderPipelineName];\n        pipeline.dispose();\n      }\n    }\n  };\n\n  return PostProcessRenderPipelineManager;\n}();\n\nexport { PostProcessRenderPipelineManager };","map":null,"metadata":{},"sourceType":"module"}