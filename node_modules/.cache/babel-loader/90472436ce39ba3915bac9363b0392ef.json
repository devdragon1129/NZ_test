{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/Modals/DeployModal/ClearDeployment/ClearDeployment.tsx\";\nimport * as React from 'react';\nimport { Button, Loader, Header } from 'decentraland-ui';\nimport Modal from 'decentraland-dapps/dist/containers/Modal';\nimport { T, t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { getAnalytics } from 'decentraland-dapps/dist/modules/analytics/utils';\nimport Icon from 'components/Icon';\nimport './ClearDeployment.css';\n\nvar ClearDeployment = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ClearDeployment, _React$PureComponent);\n\n  function ClearDeployment() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ClearDeployment);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ClearDeployment)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      hasError: false,\n      needsConfirmation: true\n    };\n    _this.analytics = getAnalytics();\n\n    _this.handleClearDeploy = function () {\n      var deployment = _this.props.deployment;\n\n      if (deployment) {\n        _this.props.onClearDeployment(deployment.id);\n      }\n    };\n\n    _this.handleConnect = function () {\n      _this.props.onOpenModal('WalletLoginModal');\n    };\n\n    _this.renderConnectForm = function () {\n      var _this$props = _this.props,\n          hasError = _this$props.hasError,\n          isConnecting = _this$props.isConnecting;\n      var errorClasses = 'error';\n\n      if (hasError) {\n        errorClasses += ' visible';\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ClearDeployment\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modal-header\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"modal-close\",\n        onClick: _this.props.onClose,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Header, {\n        size: \"large\",\n        className: \"modal-title\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.clear.connect.title')), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"modal-subtitle\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.clear.connect.description')), /*#__PURE__*/React.createElement(Button, {\n        className: \"connect\",\n        primary: true,\n        size: \"small\",\n        onClick: _this.handleConnect,\n        disabled: isConnecting,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }, isConnecting ? /*#__PURE__*/React.createElement(T, {\n        id: \"@dapps.sign_in.connecting\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 27\n        }\n      }) : /*#__PURE__*/React.createElement(T, {\n        id: \"@dapps.sign_in.connect\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 66\n        }\n      })), /*#__PURE__*/React.createElement(\"p\", {\n        className: errorClasses,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(T, {\n        id: \"@dapps.sign_in.error\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    _this.renderProgress = function () {\n      var _this$props2 = _this.props,\n          deploymentProgress = _this$props2.deploymentProgress,\n          isCreatingFiles = _this$props2.isCreatingFiles,\n          isUploadingAssets = _this$props2.isUploadingAssets;\n      var classes = 'progress-bar';\n      var progress = deploymentProgress.value;\n\n      if (progress === 100) {\n        classes += ' active';\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ClearDeployment progress\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Header, {\n        size: \"large\",\n        className: \"modal-title\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }\n      }, isUploadingAssets && 'Uploading assets', isCreatingFiles && 'Creating Asset files'), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"modal-subtitle\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 9\n        }\n      }, isUploadingAssets && 'Please wait while your scene is uploaded.', isCreatingFiles && 'Please wait while create the files that will be uploaded.'), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"progress-bar-container\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes,\n        style: {\n          width: \"\".concat(progress, \"%\")\n        },\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    _this.renderConfirmation = function () {\n      var _this$props3 = _this.props,\n          deployment = _this$props3.deployment,\n          error = _this$props3.error;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ClearDeployment confirmation\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modal-header\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"modal-close\",\n        onClick: _this.props.onClose,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Header, {\n        size: \"large\",\n        className: \"modal-title\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.clear.confirmation.title')), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"modal-subtitle\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(T, {\n        id: \"deployment_modal.clear.confirmation.description\",\n        values: {\n          project: deployment.name,\n          coords: deployment.base\n        },\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        primary: true,\n        size: \"small\",\n        onClick: _this.handleClearDeploy,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.clear.confirmation.action')), error && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"error visible\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 19\n        }\n      }, error));\n    };\n\n    _this.renderSuccess = function () {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ClearDeployment success\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modal-header\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"modal-close\",\n        onClick: _this.props.onClose,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Header, {\n        size: \"large\",\n        className: \"modal-title\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.clear.success.title')), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"modal-subtitle\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.clear.success.description')), /*#__PURE__*/React.createElement(Button, {\n        size: \"small\",\n        primary: true,\n        onClick: _this.props.onClose,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.clear.success.continue')));\n    };\n\n    _this.renderView = function () {\n      var _this$props4 = _this.props,\n          isConnected = _this$props4.isConnected,\n          isUploadingAssets = _this$props4.isUploadingAssets,\n          isCreatingFiles = _this$props4.isCreatingFiles,\n          deployment = _this$props4.deployment,\n          error = _this$props4.error;\n      var needsConfirmation = _this.state.needsConfirmation;\n      var isLoading = isUploadingAssets || isCreatingFiles;\n      if (!isConnected) return _this.renderConnectForm();\n      if (isConnected && isLoading && !error) return _this.renderProgress();\n      if (!isLoading && needsConfirmation && !deployment) return _this.renderSuccess();\n      if (isConnected && (!isLoading || error) && needsConfirmation) return _this.renderConfirmation();\n      return /*#__PURE__*/React.createElement(Loader, {\n        size: \"big\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 12\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ClearDeployment, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.analytics.track('Unpublish Scene');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          name = _this$props5.name,\n          onClose = _this$props5.onClose;\n      return /*#__PURE__*/React.createElement(Modal, {\n        name: name,\n        onClose: onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 7\n        }\n      }, this.renderView());\n    }\n  }]);\n\n  return ClearDeployment;\n}(React.PureComponent);\n\nexport { ClearDeployment as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/DeployModal/ClearDeployment/ClearDeployment.tsx"],"names":["React","Button","Loader","Header","Modal","T","t","getAnalytics","Icon","ClearDeployment","state","hasError","needsConfirmation","analytics","handleClearDeploy","deployment","props","onClearDeployment","id","handleConnect","onOpenModal","renderConnectForm","isConnecting","errorClasses","onClose","renderProgress","deploymentProgress","isCreatingFiles","isUploadingAssets","classes","progress","value","width","renderConfirmation","error","project","name","coords","base","renderSuccess","renderView","isConnected","isLoading","track","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Button, Loader, Header } from 'decentraland-ui'\nimport Modal from 'decentraland-dapps/dist/containers/Modal'\nimport { T, t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { getAnalytics } from 'decentraland-dapps/dist/modules/analytics/utils'\nimport Icon from 'components/Icon'\nimport { Props, State } from './ClearDeployment.types'\nimport './ClearDeployment.css'\n\nexport default class ClearDeployment extends React.PureComponent<Props, State> {\n  state: State = {\n    hasError: false,\n    needsConfirmation: true\n  }\n\n  analytics = getAnalytics()\n\n  componentDidMount() {\n    this.analytics.track('Unpublish Scene')\n  }\n\n  handleClearDeploy = () => {\n    const { deployment } = this.props\n\n    if (deployment) {\n      this.props.onClearDeployment(deployment.id)\n    }\n  }\n\n  handleConnect = () => {\n    this.props.onOpenModal('WalletLoginModal')\n  }\n\n  renderConnectForm = () => {\n    const { hasError, isConnecting } = this.props\n    let errorClasses = 'error'\n\n    if (hasError) {\n      errorClasses += ' visible'\n    }\n\n    return (\n      <div className=\"ClearDeployment\">\n        <div className=\"modal-header\">\n          <Icon name=\"modal-close\" onClick={this.props.onClose} />\n        </div>\n        <Header size=\"large\" className=\"modal-title\">\n          {t('deployment_modal.clear.connect.title')}\n        </Header>\n        <p className=\"modal-subtitle\">{t('deployment_modal.clear.connect.description')}</p>\n\n        <Button className=\"connect\" primary size=\"small\" onClick={this.handleConnect} disabled={isConnecting}>\n          {isConnecting ? <T id=\"@dapps.sign_in.connecting\" /> : <T id=\"@dapps.sign_in.connect\" />}\n        </Button>\n\n        <p className={errorClasses}>\n          <T id=\"@dapps.sign_in.error\" />\n        </p>\n      </div>\n    )\n  }\n\n  renderProgress = () => {\n    const { deploymentProgress, isCreatingFiles, isUploadingAssets } = this.props\n\n    let classes = 'progress-bar'\n\n    const progress = deploymentProgress.value\n\n    if (progress === 100) {\n      classes += ' active'\n    }\n\n    return (\n      <div className=\"ClearDeployment progress\">\n        <Header size=\"large\" className=\"modal-title\">\n          {isUploadingAssets && 'Uploading assets'}\n          {isCreatingFiles && 'Creating Asset files'}\n        </Header>\n        <p className=\"modal-subtitle\">\n          {isUploadingAssets && 'Please wait while your scene is uploaded.'}\n          {isCreatingFiles && 'Please wait while create the files that will be uploaded.'}\n        </p>\n        <div className=\"progress-bar-container\">\n          <div className={classes} style={{ width: `${progress}%` }} />\n        </div>\n      </div>\n    )\n  }\n\n  renderConfirmation = () => {\n    const { deployment, error } = this.props\n\n    return (\n      <div className=\"ClearDeployment confirmation\">\n        <div className=\"modal-header\">\n          <Icon name=\"modal-close\" onClick={this.props.onClose} />\n        </div>\n        <Header size=\"large\" className=\"modal-title\">\n          {t('deployment_modal.clear.confirmation.title')}\n        </Header>\n        <p className=\"modal-subtitle\">\n          <T id=\"deployment_modal.clear.confirmation.description\" values={{ project: deployment!.name, coords: deployment!.base }} />\n        </p>\n\n        <Button primary size=\"small\" onClick={this.handleClearDeploy}>\n          {t('deployment_modal.clear.confirmation.action')}\n        </Button>\n\n        {error && <div className=\"error visible\">{error}</div>}\n      </div>\n    )\n  }\n\n  renderSuccess = () => {\n    return (\n      <div className=\"ClearDeployment success\">\n        <div className=\"modal-header\">\n          <Icon name=\"modal-close\" onClick={this.props.onClose} />\n        </div>\n        <Header size=\"large\" className=\"modal-title\">\n          {t('deployment_modal.clear.success.title')}\n        </Header>\n        <p className=\"modal-subtitle\">{t('deployment_modal.clear.success.description')}</p>\n        <Button size=\"small\" primary onClick={this.props.onClose}>\n          {t('deployment_modal.clear.success.continue')}\n        </Button>\n      </div>\n    )\n  }\n\n  renderView = () => {\n    const { isConnected, isUploadingAssets, isCreatingFiles, deployment, error } = this.props\n    const { needsConfirmation } = this.state\n    const isLoading = isUploadingAssets || isCreatingFiles\n\n    if (!isConnected) return this.renderConnectForm()\n\n    if (isConnected && isLoading && !error) return this.renderProgress()\n\n    if (!isLoading && needsConfirmation && !deployment) return this.renderSuccess()\n\n    if (isConnected && (!isLoading || error) && needsConfirmation) return this.renderConfirmation()\n\n    return <Loader size=\"big\" />\n  }\n\n  render() {\n    const { name, onClose } = this.props\n    return (\n      <Modal name={name} onClose={onClose}>\n        {this.renderView()}\n      </Modal>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}