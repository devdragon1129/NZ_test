{"ast":null,"code":"import _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/Modals/DeployModal/DeployToLand/DeployToLand.tsx\";\nimport * as React from 'react';\nimport { Button, Loader, Header, Row } from 'decentraland-ui';\nimport Modal from 'decentraland-dapps/dist/containers/Modal';\nimport { T, t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { getAnalytics } from 'decentraland-dapps/dist/modules/analytics/utils';\nimport { DeploymentStatus } from 'modules/deployment/types';\nimport { coordsToId, getExplorerURL } from 'modules/land/utils';\nimport { getDeployment, getStatus } from 'modules/deployment/utils';\nimport Icon from 'components/Icon';\nimport LandAtlas from './LandAtlas';\nimport { DeployToLandView } from './DeployToLand.types';\nimport './DeployToLand.css';\n\nvar DeployToLand = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DeployToLand, _React$PureComponent);\n\n  function DeployToLand() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DeployToLand);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DeployToLand)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      placement: null,\n      needsConfirmation: false,\n      coords: null,\n      view: DeployToLandView.NONE\n    };\n    _this.analytics = getAnalytics();\n\n    _this.handleClose = function () {\n      var view = _this.state.view;\n\n      if (view !== DeployToLandView.PROGRESS) {\n        _this.props.onClose();\n      }\n    };\n\n    _this.handleNavigateHome = function () {\n      _this.props.onNavigateHome();\n\n      _this.props.onClose();\n    };\n\n    _this.handleBack = function () {\n      var view = _this.state.view;\n\n      if (view === DeployToLandView.CONFIRMATION) {\n        _this.setState({\n          view: DeployToLandView.MAP,\n          needsConfirmation: false\n        });\n      } else if (view === DeployToLandView.MAP) {\n        _this.props.onBack();\n      }\n    };\n\n    _this.handleDeploy = function () {\n      var _this$state = _this.state,\n          placement = _this$state.placement,\n          overrideDeploymentId = _this$state.overrideDeploymentId;\n      var project = _this.props.project;\n\n      if (placement && project) {\n        _this.setState({\n          needsConfirmation: true,\n          coords: coordsToId(placement.point.x, placement.point.y)\n        });\n\n        _this.props.onDeploy(project.id, placement, overrideDeploymentId);\n      }\n    };\n\n    _this.handleConnect = function () {\n      _this.props.onOpenModal('WalletLoginModal');\n    };\n\n    _this.handleConfirmPlacement = function (placement, overrideDeploymentId) {\n      _this.setState({\n        placement: placement,\n        overrideDeploymentId: overrideDeploymentId,\n        needsConfirmation: true\n      });\n    };\n\n    _this.handleDeployToPool = function () {\n      _this.props.onDeployToPool();\n    };\n\n    _this.renderConnectForm = function () {\n      var _this$props = _this.props,\n          walletError = _this$props.walletError,\n          isConnecting = _this$props.isConnecting;\n      var errorClasses = 'error';\n\n      if (walletError) {\n        errorClasses += ' visible';\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"DeployToLand connect\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modal-header\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"modal-close\",\n        onClick: _this.handleClose,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Header, {\n        size: \"large\",\n        className: \"modal-title\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.land.connect.title')), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"modal-subtitle\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.land.connect.description')), /*#__PURE__*/React.createElement(Button, {\n        className: \"connect\",\n        primary: true,\n        size: \"small\",\n        onClick: _this.handleConnect,\n        disabled: isConnecting,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }\n      }, isConnecting ? /*#__PURE__*/React.createElement(T, {\n        id: \"@dapps.sign_in.connecting\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 27\n        }\n      }) : /*#__PURE__*/React.createElement(T, {\n        id: \"@dapps.sign_in.connect\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 66\n        }\n      })), /*#__PURE__*/React.createElement(\"p\", {\n        className: errorClasses,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(T, {\n        id: \"@dapps.sign_in.error\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    _this.renderProgress = function () {\n      var _this$props2 = _this.props,\n          mediaProgress = _this$props2.mediaProgress,\n          deploymentProgress = _this$props2.deploymentProgress,\n          isRecording = _this$props2.isRecording,\n          isCreatingFiles = _this$props2.isCreatingFiles,\n          isUploadingAssets = _this$props2.isUploadingAssets,\n          isUploadingRecording = _this$props2.isUploadingRecording;\n      var classes = 'progress-bar active';\n      var progress = isRecording ? mediaProgress : deploymentProgress.value;\n\n      if (progress === 100) {\n        classes += ' active';\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"DeployToLand progress\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Header, {\n        size: \"large\",\n        className: \"modal-title\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 9\n        }\n      }, isUploadingAssets && t('deployment_modal.land.progress.uploading_assets.title'), isRecording && t('deployment_modal.land.progress.recording.title'), isCreatingFiles && t('deployment_modal.land.progress.creating_files.title'), isUploadingRecording && t('deployment_modal.land.progress.uploading_recording.title')), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"modal-subtitle\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }\n      }, isUploadingAssets && t('deployment_modal.land.progress.uploading_assets.description'), isCreatingFiles && t('deployment_modal.land.progress.creating_files.description'), isRecording && t('deployment_modal.land.progress.recording.description'), isUploadingRecording && t('deployment_modal.land.progress.uploading_recording.description')), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"progress-bar-container\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classes,\n        style: {\n          width: \"\".concat(progress, \"%\")\n        },\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }\n      })));\n    };\n\n    _this.renderConfirmation = function () {\n      var _this$props3 = _this.props,\n          media = _this$props3.media,\n          project = _this$props3.project,\n          error = _this$props3.error,\n          deployments = _this$props3.deployments;\n      var placement = _this.state.placement;\n      var _project$layout = project.layout,\n          rows = _project$layout.rows,\n          cols = _project$layout.cols;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"DeployToLand confirmation\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modal-header\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"modal-close\",\n        onClick: _this.handleClose,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }\n      }), deployments.length === 0 && /*#__PURE__*/React.createElement(Icon, {\n        name: \"modal-back\",\n        onClick: _this.handleBack,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 40\n        }\n      })), /*#__PURE__*/React.createElement(Header, {\n        size: \"large\",\n        className: \"modal-title\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.pool.title')), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"modal-subtitle\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.land.confirmation.description')), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"details\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: media ? media.preview : '',\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"details-row\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"detail\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"label\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }\n      }, t('deployment_modal.land.confirmation.title_label')), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"value\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }\n      }, project.title)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"detail\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"label\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 15\n        }\n      }, t('deployment_modal.land.confirmation.size_label')), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"value\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 15\n        }\n      }, rows * cols)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"detail\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"label\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 15\n        }\n      }, t('deployment_modal.land.confirmation.location_label')), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"value\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }\n      }, \"\".concat(placement.point.x, \", \").concat(placement.point.y))))), /*#__PURE__*/React.createElement(Row, {\n        align: \"center\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        primary: true,\n        size: \"small\",\n        onClick: _this.handleDeploy,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }\n      }, t('deployment_modal.land.confirmation.action'))), error && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"error visible\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 19\n        }\n      }, error));\n    };\n\n    _this.renderMap = function () {\n      var _this$props4 = _this.props,\n          ethAddress = _this$props4.ethAddress,\n          media = _this$props4.media,\n          project = _this$props4.project,\n          deployments = _this$props4.deployments,\n          deploymentsByCoord = _this$props4.deploymentsByCoord,\n          landTiles = _this$props4.landTiles,\n          isLoggedIn = _this$props4.isLoggedIn;\n      var deployment = getDeployment(project, deployments);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"DeployToLand atlas\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modal-header\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"modal-close\",\n        onClick: _this.handleClose,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Header, {\n        size: \"large\",\n        className: \"modal-title\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }\n      }, t('deployment_modal.land.map.title')), /*#__PURE__*/React.createElement(Icon, {\n        name: \"modal-back\",\n        onClick: _this.handleBack,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(LandAtlas, {\n        ethAddress: ethAddress,\n        media: media,\n        project: project,\n        deploymentsByCoord: deploymentsByCoord,\n        landTiles: landTiles,\n        deployment: deployment,\n        onConfirmPlacement: _this.handleConfirmPlacement,\n        onNoAuthorizedParcels: _this.handleDeployToPool,\n        isLoggedIn: isLoggedIn,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.renderSuccess = function () {\n      var placement = _this.state.placement;\n      var _point = placement.point,\n          x = _point.x,\n          y = _point.y;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"DeployToLand success\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"modal-header\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"modal-close\",\n        onClick: _this.handleClose,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Header, {\n        size: \"large\",\n        className: \"modal-title\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.land.success.title')), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"modal-subtitle\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 9\n        }\n      }, t('deployment_modal.land.success.description')), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        size: \"small\",\n        primary: true,\n        href: getExplorerURL(x, y),\n        target: \"_blank\",\n        rel: \"no:opener no:referrer\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }\n      }, t('deployment_modal.land.success.jump_in')), /*#__PURE__*/React.createElement(Button, {\n        className: \"hollow\",\n        secondary: true,\n        size: \"small\",\n        onClick: _this.handleClose,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }\n      }, t('deployment_modal.land.success.continue'))));\n    };\n\n    _this.renderView = function () {\n      var view = _this.state.view;\n      if (view === DeployToLandView.CONNECT) return _this.renderConnectForm();\n      if (view === DeployToLandView.PROGRESS) return _this.renderProgress();\n      if (view === DeployToLandView.MAP) return _this.renderMap();\n      if (view === DeployToLandView.SUCCESS) return _this.renderSuccess();\n      if (view === DeployToLandView.CONFIRMATION) return _this.renderConfirmation();\n      return /*#__PURE__*/React.createElement(Loader, {\n        size: \"big\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 12\n        }\n      });\n    };\n\n    _this.wrapInModal = function (view) {\n      var name = _this.props.name;\n      return /*#__PURE__*/React.createElement(Modal, {\n        name: name,\n        onClose: _this.handleClose,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 7\n        }\n      }, view);\n    };\n\n    return _this;\n  }\n\n  _createClass(DeployToLand, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.onRecord();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      var project = props.project,\n          deployments = props.deployments;\n\n      if (deployments.length > 0) {\n        var deployment = getDeployment(project, deployments);\n        this.setState({\n          placement: _objectSpread({}, deployment.placement)\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(_, nextState) {\n      if (nextState.view !== this.state.view) {\n        this.analytics.track('Publish to LAND step', {\n          step: nextState.view\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this$props5 = this.props,\n          isConnected = _this$props5.isConnected,\n          isRecording = _this$props5.isRecording,\n          isUploadingAssets = _this$props5.isUploadingAssets,\n          isCreatingFiles = _this$props5.isCreatingFiles,\n          isUploadingRecording = _this$props5.isUploadingRecording,\n          media = _this$props5.media,\n          project = _this$props5.project,\n          deploymentsByCoord = _this$props5.deploymentsByCoord,\n          error = _this$props5.error;\n      var _this$state2 = this.state,\n          coords = _this$state2.coords,\n          needsConfirmation = _this$state2.needsConfirmation;\n      var isLoading = isRecording || isUploadingAssets || isCreatingFiles || isUploadingRecording;\n      var view = DeployToLandView.NONE;\n      var deployment = coords && deploymentsByCoord[coords];\n\n      if (!isConnected) {\n        view = DeployToLandView.CONNECT;\n      } else if (isConnected && isLoading && !error) {\n        view = DeployToLandView.PROGRESS;\n      } else if (isConnected && media && !needsConfirmation) {\n        view = DeployToLandView.MAP;\n      } else if (!isLoading && deployment && getStatus(project, deployment) === DeploymentStatus.PUBLISHED) {\n        view = DeployToLandView.SUCCESS;\n      } else if (isConnected && media && (!isLoading || error) && needsConfirmation) {\n        view = DeployToLandView.CONFIRMATION;\n      }\n\n      this.setState({\n        view: view\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.wrapInModal(this.renderView());\n    }\n  }]);\n\n  return DeployToLand;\n}(React.PureComponent);\n\nexport { DeployToLand as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/DeployModal/DeployToLand/DeployToLand.tsx"],"names":["React","Button","Loader","Header","Row","Modal","T","t","getAnalytics","DeploymentStatus","coordsToId","getExplorerURL","getDeployment","getStatus","Icon","LandAtlas","DeployToLandView","DeployToLand","state","placement","needsConfirmation","coords","view","NONE","analytics","handleClose","PROGRESS","props","onClose","handleNavigateHome","onNavigateHome","handleBack","CONFIRMATION","setState","MAP","onBack","handleDeploy","overrideDeploymentId","project","point","x","y","onDeploy","id","handleConnect","onOpenModal","handleConfirmPlacement","handleDeployToPool","onDeployToPool","renderConnectForm","walletError","isConnecting","errorClasses","renderProgress","mediaProgress","deploymentProgress","isRecording","isCreatingFiles","isUploadingAssets","isUploadingRecording","classes","progress","value","width","renderConfirmation","media","error","deployments","layout","rows","cols","length","preview","title","renderMap","ethAddress","deploymentsByCoord","landTiles","isLoggedIn","deployment","renderSuccess","renderView","CONNECT","SUCCESS","wrapInModal","name","onRecord","_","nextState","track","step","isConnected","isLoading","PUBLISHED","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Button, Loader, Header, Row } from 'decentraland-ui'\nimport Modal from 'decentraland-dapps/dist/containers/Modal'\nimport { T, t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { getAnalytics } from 'decentraland-dapps/dist/modules/analytics/utils'\nimport { DeploymentStatus } from 'modules/deployment/types'\nimport { coordsToId, getExplorerURL } from 'modules/land/utils'\nimport { getDeployment, getStatus } from 'modules/deployment/utils'\nimport Icon from 'components/Icon'\nimport LandAtlas from './LandAtlas'\nimport { Props, State, DeployToLandView } from './DeployToLand.types'\nimport './DeployToLand.css'\n\nexport default class DeployToLand extends React.PureComponent<Props, State> {\n  state: State = {\n    placement: null,\n    needsConfirmation: false,\n    coords: null,\n    view: DeployToLandView.NONE\n  }\n\n  analytics = getAnalytics()\n\n  componentDidMount() {\n    this.props.onRecord()\n  }\n\n  componentWillReceiveProps(props: Props) {\n    const { project, deployments } = props\n    if (deployments.length > 0) {\n      const deployment = getDeployment(project, deployments)\n      this.setState({\n        placement: { ...deployment.placement }\n      })\n    }\n  }\n\n  componentWillUpdate(_: Props, nextState: State) {\n    if (nextState.view !== this.state.view) {\n      this.analytics.track('Publish to LAND step', { step: nextState.view })\n    }\n  }\n\n  componentDidUpdate() {\n    const {\n      isConnected,\n      isRecording,\n      isUploadingAssets,\n      isCreatingFiles,\n      isUploadingRecording,\n      media,\n      project,\n      deploymentsByCoord,\n      error\n    } = this.props\n    const { coords, needsConfirmation } = this.state\n    const isLoading = isRecording || isUploadingAssets || isCreatingFiles || isUploadingRecording\n    let view: DeployToLandView = DeployToLandView.NONE\n\n    const deployment = coords && deploymentsByCoord[coords]\n\n    if (!isConnected) {\n      view = DeployToLandView.CONNECT\n    } else if (isConnected && isLoading && !error) {\n      view = DeployToLandView.PROGRESS\n    } else if (isConnected && media && !needsConfirmation) {\n      view = DeployToLandView.MAP\n    } else if (!isLoading && deployment && getStatus(project, deployment) === DeploymentStatus.PUBLISHED) {\n      view = DeployToLandView.SUCCESS\n    } else if (isConnected && media && (!isLoading || error) && needsConfirmation) {\n      view = DeployToLandView.CONFIRMATION\n    }\n\n    this.setState({ view })\n  }\n\n  handleClose = () => {\n    const { view } = this.state\n    if (view !== DeployToLandView.PROGRESS) {\n      this.props.onClose()\n    }\n  }\n\n  handleNavigateHome = () => {\n    this.props.onNavigateHome()\n    this.props.onClose()\n  }\n\n  handleBack = () => {\n    const { view } = this.state\n\n    if (view === DeployToLandView.CONFIRMATION) {\n      this.setState({ view: DeployToLandView.MAP, needsConfirmation: false })\n    } else if (view === DeployToLandView.MAP) {\n      this.props.onBack()\n    }\n  }\n\n  handleDeploy = () => {\n    const { placement, overrideDeploymentId } = this.state\n    const { project } = this.props\n\n    if (placement && project) {\n      this.setState({ needsConfirmation: true, coords: coordsToId(placement.point.x, placement.point.y) })\n      this.props.onDeploy(project.id, placement, overrideDeploymentId)\n    }\n  }\n\n  handleConnect = () => {\n    this.props.onOpenModal('WalletLoginModal')\n  }\n\n  handleConfirmPlacement = (placement: State['placement'], overrideDeploymentId?: string) => {\n    this.setState({\n      placement,\n      overrideDeploymentId,\n      needsConfirmation: true\n    })\n  }\n\n  handleDeployToPool = () => {\n    this.props.onDeployToPool()\n  }\n\n  renderConnectForm = () => {\n    const { walletError, isConnecting } = this.props\n    let errorClasses = 'error'\n\n    if (walletError) {\n      errorClasses += ' visible'\n    }\n\n    return (\n      <div className=\"DeployToLand connect\">\n        <div className=\"modal-header\">\n          <Icon name=\"modal-close\" onClick={this.handleClose} />\n        </div>\n        <Header size=\"large\" className=\"modal-title\">\n          {t('deployment_modal.land.connect.title')}\n        </Header>\n        <p className=\"modal-subtitle\">{t('deployment_modal.land.connect.description')}</p>\n\n        <Button className=\"connect\" primary size=\"small\" onClick={this.handleConnect} disabled={isConnecting}>\n          {isConnecting ? <T id=\"@dapps.sign_in.connecting\" /> : <T id=\"@dapps.sign_in.connect\" />}\n        </Button>\n\n        <p className={errorClasses}>\n          <T id=\"@dapps.sign_in.error\" />\n        </p>\n      </div>\n    )\n  }\n\n  renderProgress = () => {\n    const { mediaProgress, deploymentProgress, isRecording, isCreatingFiles, isUploadingAssets, isUploadingRecording } = this.props\n\n    let classes = 'progress-bar active'\n\n    const progress = isRecording ? mediaProgress : deploymentProgress.value\n\n    if (progress === 100) {\n      classes += ' active'\n    }\n\n    return (\n      <div className=\"DeployToLand progress\">\n        <Header size=\"large\" className=\"modal-title\">\n          {isUploadingAssets && t('deployment_modal.land.progress.uploading_assets.title')}\n          {isRecording && t('deployment_modal.land.progress.recording.title')}\n          {isCreatingFiles && t('deployment_modal.land.progress.creating_files.title')}\n          {isUploadingRecording && t('deployment_modal.land.progress.uploading_recording.title')}\n        </Header>\n        <p className=\"modal-subtitle\">\n          {isUploadingAssets && t('deployment_modal.land.progress.uploading_assets.description')}\n          {isCreatingFiles && t('deployment_modal.land.progress.creating_files.description')}\n          {isRecording && t('deployment_modal.land.progress.recording.description')}\n          {isUploadingRecording && t('deployment_modal.land.progress.uploading_recording.description')}\n        </p>\n        <div className=\"progress-bar-container\">\n          <div className={classes} style={{ width: `${progress}%` }} />\n        </div>\n      </div>\n    )\n  }\n\n  renderConfirmation = () => {\n    const { media, project, error, deployments } = this.props\n    const { placement } = this.state\n    const { rows, cols } = project.layout\n\n    return (\n      <div className=\"DeployToLand confirmation\">\n        <div className=\"modal-header\">\n          <Icon name=\"modal-close\" onClick={this.handleClose} />\n          {deployments.length === 0 && <Icon name=\"modal-back\" onClick={this.handleBack} />}\n        </div>\n        <Header size=\"large\" className=\"modal-title\">\n          {t('deployment_modal.pool.title')}\n        </Header>\n        <p className=\"modal-subtitle\">{t('deployment_modal.land.confirmation.description')}</p>\n\n        <div className=\"details\">\n          <img src={media ? media.preview : ''} />\n\n          <div className=\"details-row\">\n            <div className=\"detail\">\n              <span className=\"label\">{t('deployment_modal.land.confirmation.title_label')}</span>\n              <span className=\"value\">{project.title}</span>\n            </div>\n\n            <div className=\"detail\">\n              <span className=\"label\">{t('deployment_modal.land.confirmation.size_label')}</span>\n              <span className=\"value\">{rows * cols}</span>\n            </div>\n\n            <div className=\"detail\">\n              <span className=\"label\">{t('deployment_modal.land.confirmation.location_label')}</span>\n              <span className=\"value\">{`${placement!.point.x}, ${placement!.point.y}`}</span>\n            </div>\n          </div>\n        </div>\n        <Row align=\"center\">\n          <Button primary size=\"small\" onClick={this.handleDeploy}>\n            {t('deployment_modal.land.confirmation.action')}\n          </Button>\n        </Row>\n        {error && <div className=\"error visible\">{error}</div>}\n      </div>\n    )\n  }\n\n  renderMap = () => {\n    const { ethAddress, media, project, deployments, deploymentsByCoord, landTiles, isLoggedIn } = this.props\n    const deployment = getDeployment(project, deployments)\n    return (\n      <div className=\"DeployToLand atlas\">\n        <div className=\"modal-header\">\n          <Icon name=\"modal-close\" onClick={this.handleClose} />\n          <Header size=\"large\" className=\"modal-title\">\n            {t('deployment_modal.land.map.title')}\n          </Header>\n          <Icon name=\"modal-back\" onClick={this.handleBack} />\n        </div>\n        <LandAtlas\n          ethAddress={ethAddress}\n          media={media}\n          project={project}\n          deploymentsByCoord={deploymentsByCoord}\n          landTiles={landTiles}\n          deployment={deployment}\n          onConfirmPlacement={this.handleConfirmPlacement}\n          onNoAuthorizedParcels={this.handleDeployToPool}\n          isLoggedIn={isLoggedIn}\n        />\n      </div>\n    )\n  }\n\n  renderSuccess = () => {\n    const { placement } = this.state\n    const { x, y } = placement!.point\n    return (\n      <div className=\"DeployToLand success\">\n        <div className=\"modal-header\">\n          <Icon name=\"modal-close\" onClick={this.handleClose} />\n        </div>\n        <Header size=\"large\" className=\"modal-title\">\n          {t('deployment_modal.land.success.title')}\n        </Header>\n        <p className=\"modal-subtitle\">{t('deployment_modal.land.success.description')}</p>\n        <div className=\"actions\">\n          <Button size=\"small\" primary href={getExplorerURL(x, y)} target=\"_blank\" rel=\"no:opener no:referrer\">\n            {t('deployment_modal.land.success.jump_in')}\n          </Button>\n\n          <Button className=\"hollow\" secondary size=\"small\" onClick={this.handleClose}>\n            {t('deployment_modal.land.success.continue')}\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  renderView = () => {\n    const { view } = this.state\n\n    if (view === DeployToLandView.CONNECT) return this.renderConnectForm()\n\n    if (view === DeployToLandView.PROGRESS) return this.renderProgress()\n\n    if (view === DeployToLandView.MAP) return this.renderMap()\n\n    if (view === DeployToLandView.SUCCESS) return this.renderSuccess()\n\n    if (view === DeployToLandView.CONFIRMATION) return this.renderConfirmation()\n\n    return <Loader size=\"big\" />\n  }\n\n  wrapInModal = (view: JSX.Element) => {\n    const { name } = this.props\n    return (\n      <Modal name={name} onClose={this.handleClose}>\n        {view}\n      </Modal>\n    )\n  }\n\n  render() {\n    return this.wrapInModal(this.renderView())\n  }\n}\n"]},"metadata":{},"sourceType":"module"}