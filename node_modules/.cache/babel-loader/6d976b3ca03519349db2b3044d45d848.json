{"ast":null,"code":"/**\r\n * Class used to host copy specific utilities\r\n */\nvar CopyTools =\n/** @class */\nfunction () {\n  function CopyTools() {}\n  /**\r\n   * Reads the pixels stored in the webgl texture and returns them as a base64 string\r\n   * @param texture defines the texture to read pixels from\r\n   * @param faceIndex defines the face of the texture to read (in case of cube texture)\r\n   * @param level defines the LOD level of the texture to read (in case of Mip Maps)\r\n   * @returns The base64 encoded string or null\r\n   */\n\n\n  CopyTools.GenerateBase64StringFromTexture = function (texture, faceIndex, level) {\n    if (faceIndex === void 0) {\n      faceIndex = 0;\n    }\n\n    if (level === void 0) {\n      level = 0;\n    }\n\n    var internalTexture = texture.getInternalTexture();\n\n    if (!internalTexture) {\n      return null;\n    }\n\n    var pixels = texture.readPixels(faceIndex, level);\n\n    if (!pixels) {\n      return null;\n    }\n\n    var size = texture.getSize();\n    var width = size.width;\n    var height = size.height;\n\n    if (pixels instanceof Float32Array) {\n      var len = pixels.byteLength / pixels.BYTES_PER_ELEMENT;\n      var npixels = new Uint8Array(len);\n\n      while (--len >= 0) {\n        var val = pixels[len];\n\n        if (val < 0) {\n          val = 0;\n        } else if (val > 1) {\n          val = 1;\n        }\n\n        npixels[len] = val * 255;\n      }\n\n      pixels = npixels;\n    }\n\n    var canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    var ctx = canvas.getContext('2d');\n\n    if (!ctx) {\n      return null;\n    }\n\n    var imageData = ctx.createImageData(width, height);\n    var castData = imageData.data;\n    castData.set(pixels);\n    ctx.putImageData(imageData, 0, 0);\n\n    if (internalTexture.invertY) {\n      var canvas2 = document.createElement('canvas');\n      canvas2.width = width;\n      canvas2.height = height;\n      var ctx2 = canvas2.getContext('2d');\n\n      if (!ctx2) {\n        return null;\n      }\n\n      ctx2.translate(0, height);\n      ctx2.scale(1, -1);\n      ctx2.drawImage(canvas, 0, 0);\n      return canvas2.toDataURL('image/png');\n    }\n\n    return canvas.toDataURL('image/png');\n  };\n\n  return CopyTools;\n}();\n\nexport { CopyTools };","map":null,"metadata":{},"sourceType":"module"}