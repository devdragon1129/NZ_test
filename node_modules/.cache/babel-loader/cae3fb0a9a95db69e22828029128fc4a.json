{"ast":null,"code":"import { Scene } from \"../scene\";\nimport { DepthRenderer } from \"./depthRenderer\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\n\nScene.prototype.enableDepthRenderer = function (camera, storeNonLinearDepth, force32bitsFloat) {\n  if (storeNonLinearDepth === void 0) {\n    storeNonLinearDepth = false;\n  }\n\n  if (force32bitsFloat === void 0) {\n    force32bitsFloat = false;\n  }\n\n  camera = camera || this.activeCamera;\n\n  if (!camera) {\n    throw \"No camera available to enable depth renderer\";\n  }\n\n  if (!this._depthRenderer) {\n    this._depthRenderer = {};\n  }\n\n  if (!this._depthRenderer[camera.id]) {\n    var supportFullfloat = !!this.getEngine().getCaps().textureFloatRender;\n    var textureType = 0;\n\n    if (this.getEngine().getCaps().textureHalfFloatRender && (!force32bitsFloat || !supportFullfloat)) {\n      textureType = 2;\n    } else if (supportFullfloat) {\n      textureType = 1;\n    } else {\n      textureType = 0;\n    }\n\n    this._depthRenderer[camera.id] = new DepthRenderer(this, textureType, camera, storeNonLinearDepth);\n  }\n\n  return this._depthRenderer[camera.id];\n};\n\nScene.prototype.disableDepthRenderer = function (camera) {\n  camera = camera || this.activeCamera;\n\n  if (!camera || !this._depthRenderer || !this._depthRenderer[camera.id]) {\n    return;\n  }\n\n  this._depthRenderer[camera.id].dispose();\n\n  delete this._depthRenderer[camera.id];\n};\n/**\r\n * Defines the Depth Renderer scene component responsible to manage a depth buffer useful\r\n * in several rendering techniques.\r\n */\n\n\nvar DepthRendererSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function DepthRendererSceneComponent(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_DEPTHRENDERER;\n    this.scene = scene;\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  DepthRendererSceneComponent.prototype.register = function () {\n    this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_DEPTHRENDERER, this, this._gatherRenderTargets);\n\n    this.scene._gatherActiveCameraRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERACTIVECAMERARENDERTARGETS_DEPTHRENDERER, this, this._gatherActiveCameraRenderTargets);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  DepthRendererSceneComponent.prototype.rebuild = function () {// Nothing to do for this component\n  };\n  /**\r\n   * Disposes the component and the associated ressources\r\n   */\n\n\n  DepthRendererSceneComponent.prototype.dispose = function () {\n    for (var key in this.scene._depthRenderer) {\n      this.scene._depthRenderer[key].dispose();\n    }\n  };\n\n  DepthRendererSceneComponent.prototype._gatherRenderTargets = function (renderTargets) {\n    if (this.scene._depthRenderer) {\n      for (var key in this.scene._depthRenderer) {\n        var depthRenderer = this.scene._depthRenderer[key];\n\n        if (depthRenderer.enabled && !depthRenderer.useOnlyInActiveCamera) {\n          renderTargets.push(depthRenderer.getDepthMap());\n        }\n      }\n    }\n  };\n\n  DepthRendererSceneComponent.prototype._gatherActiveCameraRenderTargets = function (renderTargets) {\n    if (this.scene._depthRenderer) {\n      for (var key in this.scene._depthRenderer) {\n        var depthRenderer = this.scene._depthRenderer[key];\n\n        if (depthRenderer.enabled && depthRenderer.useOnlyInActiveCamera && this.scene.activeCamera.id === key) {\n          renderTargets.push(depthRenderer.getDepthMap());\n        }\n      }\n    }\n  };\n\n  return DepthRendererSceneComponent;\n}();\n\nexport { DepthRendererSceneComponent };\n\nDepthRenderer._SceneComponentInitialization = function (scene) {\n  // Register the G Buffer component to the scene.\n  var component = scene._getComponent(SceneComponentConstants.NAME_DEPTHRENDERER);\n\n  if (!component) {\n    component = new DepthRendererSceneComponent(scene);\n\n    scene._addComponent(component);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}