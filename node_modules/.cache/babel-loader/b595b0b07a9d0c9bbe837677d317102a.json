{"ast":null,"code":"import { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport { GLTFLoader } from \"../glTFLoader\";\nvar NAME = \"KHR_materials_translucency\";\n/**\r\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/pull/1825)\r\n * !!! Experimental Extension Subject to Changes !!!\r\n */\n\nvar KHR_materials_translucency =\n/** @class */\nfunction () {\n  /** @hidden */\n  function KHR_materials_translucency(loader) {\n    /**\r\n     * The name of this extension.\r\n     */\n    this.name = NAME;\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\n\n    this.order = 175;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n\n    if (this.enabled) {\n      loader.parent.transparencyAsCoverage = true;\n    }\n  }\n  /** @hidden */\n\n\n  KHR_materials_translucency.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /** @hidden */\n\n\n  KHR_materials_translucency.prototype.loadMaterialPropertiesAsync = function (context, material, babylonMaterial) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, function (extensionContext, extension) {\n      var promises = new Array();\n      promises.push(_this._loader.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\n      promises.push(_this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n      promises.push(_this._loadTranslucentPropertiesAsync(extensionContext, material, babylonMaterial, extension));\n      return Promise.all(promises).then(function () {});\n    });\n  };\n\n  KHR_materials_translucency.prototype._loadTranslucentPropertiesAsync = function (context, material, babylonMaterial, extension) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(context + \": Material type not supported\");\n    }\n\n    var pbrMaterial = babylonMaterial; // Enables \"translucency\" texture which represents diffusely-transmitted light.\n\n    pbrMaterial.subSurface.isTranslucencyEnabled = true; // Since this extension models thin-surface transmission only, we must make the\n    // internal IOR == 1.0 and set the thickness to 0.\n\n    pbrMaterial.subSurface.volumeIndexOfRefraction = 1.0;\n    pbrMaterial.subSurface.minimumThickness = 0.0;\n    pbrMaterial.subSurface.maximumThickness = 0.0; // Albedo colour will tint transmission.\n\n    pbrMaterial.subSurface.useAlbedoToTintRefraction = true;\n\n    if (extension.translucencyFactor !== undefined) {\n      pbrMaterial.subSurface.translucencyIntensity = extension.translucencyFactor;\n    } else {\n      pbrMaterial.subSurface.translucencyIntensity = 0.0;\n      pbrMaterial.subSurface.isTranslucencyEnabled = false;\n      return Promise.resolve();\n    }\n\n    if (extension.translucencyTexture) {\n      return this._loader.loadTextureInfoAsync(context + \"/translucencyTexture\", extension.translucencyTexture).then(function (texture) {\n        pbrMaterial.subSurface.thicknessTexture = texture;\n        pbrMaterial.subSurface.useMaskFromThicknessTextureGltf = true;\n      });\n    } else {\n      return Promise.resolve();\n    }\n  };\n\n  return KHR_materials_translucency;\n}();\n\nexport { KHR_materials_translucency };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_materials_translucency(loader);\n});","map":null,"metadata":{},"sourceType":"module"}