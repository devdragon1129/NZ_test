{"ast":null,"code":"import { SphericalPolynomial } from \"../../../Maths/sphericalPolynomial\";\nimport { Engine } from \"../../../Engines/engine\";\nimport { DDSTools } from \"../../../Misc/dds\";\nimport { StringTools } from '../../../Misc/stringTools';\n/**\r\n * Implementation of the DDS Texture Loader.\r\n * @hidden\r\n */\n\nvar _DDSTextureLoader =\n/** @class */\nfunction () {\n  function _DDSTextureLoader() {\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\n    this.supportCascades = true;\n  }\n  /**\r\n   * This returns if the loader support the current file information.\r\n   * @param extension defines the file extension of the file being loaded\r\n   * @returns true if the loader can load the specified file\r\n   */\n\n\n  _DDSTextureLoader.prototype.canLoad = function (extension) {\n    return StringTools.EndsWith(extension, \".dds\");\n  };\n  /**\r\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param createPolynomials will be true if polynomials have been requested\r\n   * @param onLoad defines the callback to trigger once the texture is ready\r\n   * @param onError defines the callback to trigger in case of error\r\n   */\n\n\n  _DDSTextureLoader.prototype.loadCubeData = function (imgs, texture, createPolynomials, onLoad, onError) {\n    var engine = texture.getEngine();\n    var info;\n    var loadMipmap = false;\n\n    if (Array.isArray(imgs)) {\n      for (var index = 0; index < imgs.length; index++) {\n        var data_1 = imgs[index];\n        info = DDSTools.GetDDSInfo(data_1);\n        texture.width = info.width;\n        texture.height = info.height;\n        loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\n\n        engine._unpackFlipY(info.isCompressed);\n\n        DDSTools.UploadDDSLevels(engine, texture, data_1, info, loadMipmap, 6, -1, index);\n\n        if (!info.isFourCC && info.mipmapCount === 1) {\n          engine.generateMipMapsForCubemap(texture);\n        }\n      }\n    } else {\n      var data = imgs;\n      info = DDSTools.GetDDSInfo(data);\n      texture.width = info.width;\n      texture.height = info.height;\n\n      if (createPolynomials) {\n        info.sphericalPolynomial = new SphericalPolynomial();\n      }\n\n      loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps;\n\n      engine._unpackFlipY(info.isCompressed);\n\n      DDSTools.UploadDDSLevels(engine, texture, data, info, loadMipmap, 6);\n\n      if (!info.isFourCC && info.mipmapCount === 1) {\n        // Do not unbind as we still need to set the parameters.\n        engine.generateMipMapsForCubemap(texture, false);\n      }\n    }\n\n    engine._setCubeMapTextureParams(texture, loadMipmap);\n\n    texture.isReady = true;\n    texture.onLoadedObservable.notifyObservers(texture);\n    texture.onLoadedObservable.clear();\n\n    if (onLoad) {\n      onLoad({\n        isDDS: true,\n        width: texture.width,\n        info: info,\n        data: imgs,\n        texture: texture\n      });\n    }\n  };\n  /**\r\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param callback defines the method to call once ready to upload\r\n   */\n\n\n  _DDSTextureLoader.prototype.loadData = function (data, texture, callback) {\n    var info = DDSTools.GetDDSInfo(data);\n    var loadMipmap = (info.isRGB || info.isLuminance || info.mipmapCount > 1) && texture.generateMipMaps && info.width >> info.mipmapCount - 1 === 1;\n    callback(info.width, info.height, loadMipmap, info.isFourCC, function () {\n      DDSTools.UploadDDSLevels(texture.getEngine(), texture, data, info, loadMipmap, 1);\n    });\n  };\n\n  return _DDSTextureLoader;\n}();\n\nexport { _DDSTextureLoader }; // Register the loader.\n\nEngine._TextureLoaders.push(new _DDSTextureLoader());","map":null,"metadata":{},"sourceType":"module"}