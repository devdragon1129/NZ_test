{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/LandAssignENSPage/LandAssignENSForm/LandAssignENSForm.tsx\";\nimport * as React from 'react';\nimport { Form, Row, Button, Icon } from 'decentraland-ui';\nimport { Network } from '@dcl/schemas';\nimport { NetworkButton } from 'decentraland-dapps/dist/containers';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { locations } from 'routing/locations';\nimport { isResolverEmpty, isContentEmpty, isEqualContent } from 'modules/ens/utils';\nimport { ENSOrigin } from 'modules/ens/types';\nimport './LandAssignENSForm.css';\n\nvar LandAssignENSForm = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(LandAssignENSForm, _React$PureComponent);\n\n  function LandAssignENSForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LandAssignENSForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LandAssignENSForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleFinish = function () {\n      var onNavigate = _this.props.onNavigate;\n      onNavigate(locations.ens());\n    };\n\n    _this.handleSetResolver = function () {\n      var _this$props = _this.props,\n          onSetENSResolver = _this$props.onSetENSResolver,\n          ens = _this$props.ens;\n      onSetENSResolver(ens);\n    };\n\n    _this.handleSetContent = function () {\n      var _this$props2 = _this.props,\n          onSetENSContent = _this$props2.onSetENSContent,\n          ens = _this$props2.ens,\n          land = _this$props2.land;\n      onSetENSContent(ens, land);\n    };\n\n    _this.handleBack = function () {\n      _this.props.onBack();\n    };\n\n    return _this;\n  }\n\n  _createClass(LandAssignENSForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          ens = _this$props3.ens,\n          land = _this$props3.land,\n          isLoading = _this$props3.isLoading,\n          isWaitingTxSetContent = _this$props3.isWaitingTxSetContent,\n          isWaitingTxSetResolver = _this$props3.isWaitingTxSetResolver,\n          error = _this$props3.error;\n      var hasResolver = !isResolverEmpty(ens);\n      var hasContent = !isContentEmpty(ens) && isEqualContent(ens, land);\n      var hasData = hasResolver || hasContent;\n      var hasError = error && error.code === 4001;\n      var hasResolverError = hasError && error.origin === ENSOrigin.RESOLVER;\n      var hasContentError = hasError && error.origin === ENSOrigin.CONTENT;\n      var setResolverButtonClassName = hasResolver && !isWaitingTxSetResolver && !hasResolverError ? 'grey-button' : '';\n      var setContentButtonClassName = hasContent && !isWaitingTxSetContent && !hasContentError ? 'grey-button' : '';\n      var isSetResolverButtonDisabled = hasResolverError ? false : hasData || isWaitingTxSetResolver;\n      var isSetContentButtonDisabled = hasContentError ? false : hasResolverError || !hasResolver || hasContent || isWaitingTxSetContent;\n      return /*#__PURE__*/React.createElement(Form, {\n        className: \"LandAssignENSForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }\n      }, t('land_assign_ens_page.set_name_message'))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: isSetResolverButtonDisabled ? 'box box-disabled' : 'box',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }\n      }, t('land_assign_ens_page.set_resolver')), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"message-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }\n      }, t('land_assign_ens_page.set_resolver_explanation')), /*#__PURE__*/React.createElement(NetworkButton, {\n        type: \"submit\",\n        disabled: isSetResolverButtonDisabled,\n        onClick: this.handleSetResolver,\n        className: setResolverButtonClassName,\n        loading: isWaitingTxSetResolver,\n        primary: true,\n        network: Network.ETHEREUM,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }\n      }, hasResolverError ? t('global.retry_tx') : hasResolver ? /*#__PURE__*/React.createElement(React.Fragment, null, t('global.approved_tx'), !isWaitingTxSetResolver ? /*#__PURE__*/React.createElement(Icon, {\n        name: \"check\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 48\n        }\n      }) : null) : t('global.submit'))))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: isSetContentButtonDisabled ? 'box box-disabled' : 'box',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }\n      }, t('land_assign_ens_page.set_content')), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"message-box\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }\n      }, t('land_assign_ens_page.set_content_explanation')), /*#__PURE__*/React.createElement(NetworkButton, {\n        type: \"submit\",\n        disabled: isSetContentButtonDisabled,\n        onClick: this.handleSetContent,\n        className: setContentButtonClassName,\n        loading: isWaitingTxSetContent,\n        primary: true,\n        network: Network.ETHEREUM,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }\n      }, hasContentError ? t('global.retry_tx') : hasContent ? /*#__PURE__*/React.createElement(React.Fragment, null, t('global.approved_tx'), !isWaitingTxSetContent ? /*#__PURE__*/React.createElement(Icon, {\n        name: \"check\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 47\n        }\n      }) : null) : t('global.submit'))))), /*#__PURE__*/React.createElement(Row, {\n        className: \"confirmation-buttons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        onClick: this.handleBack,\n        disabled: hasData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }\n      }, t('global.back')), /*#__PURE__*/React.createElement(Button, {\n        disabled: !hasResolver || !hasContent || isLoading || isWaitingTxSetContent || isWaitingTxSetResolver,\n        onClick: this.handleFinish,\n        primary: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }\n      }, t('global.finish'))));\n    }\n  }]);\n\n  return LandAssignENSForm;\n}(React.PureComponent);\n\nexport { LandAssignENSForm as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/LandAssignENSPage/LandAssignENSForm/LandAssignENSForm.tsx"],"names":["React","Form","Row","Button","Icon","Network","NetworkButton","t","locations","isResolverEmpty","isContentEmpty","isEqualContent","ENSOrigin","LandAssignENSForm","handleFinish","onNavigate","props","ens","handleSetResolver","onSetENSResolver","handleSetContent","onSetENSContent","land","handleBack","onBack","isLoading","isWaitingTxSetContent","isWaitingTxSetResolver","error","hasResolver","hasContent","hasData","hasError","code","hasResolverError","origin","RESOLVER","hasContentError","CONTENT","setResolverButtonClassName","setContentButtonClassName","isSetResolverButtonDisabled","isSetContentButtonDisabled","ETHEREUM","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Form, Row, Button, Icon } from 'decentraland-ui'\nimport { Network } from '@dcl/schemas'\nimport { NetworkButton } from 'decentraland-dapps/dist/containers'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { locations } from 'routing/locations'\nimport { isResolverEmpty, isContentEmpty, isEqualContent } from 'modules/ens/utils'\nimport { ENSOrigin } from 'modules/ens/types'\nimport { Props } from './LandAssignENSForm.types'\nimport './LandAssignENSForm.css'\n\nexport default class LandAssignENSForm extends React.PureComponent<Props> {\n  handleFinish = () => {\n    const { onNavigate } = this.props\n    onNavigate(locations.ens())\n  }\n\n  handleSetResolver = () => {\n    const { onSetENSResolver, ens } = this.props\n    onSetENSResolver(ens)\n  }\n\n  handleSetContent = () => {\n    const { onSetENSContent, ens, land } = this.props\n    onSetENSContent(ens, land)\n  }\n\n  handleBack = () => {\n    this.props.onBack()\n  }\n\n  render() {\n    const { ens, land, isLoading, isWaitingTxSetContent, isWaitingTxSetResolver, error } = this.props\n\n    const hasResolver = !isResolverEmpty(ens)\n    const hasContent = !isContentEmpty(ens) && isEqualContent(ens, land)\n    const hasData = hasResolver || hasContent\n\n    const hasError = error && error.code === 4001\n    const hasResolverError = hasError && error!.origin === ENSOrigin.RESOLVER\n    const hasContentError = hasError && error!.origin === ENSOrigin.CONTENT\n\n    const setResolverButtonClassName = hasResolver && !isWaitingTxSetResolver && !hasResolverError ? 'grey-button' : ''\n    const setContentButtonClassName = hasContent && !isWaitingTxSetContent && !hasContentError ? 'grey-button' : ''\n\n    const isSetResolverButtonDisabled = hasResolverError ? false : hasData || isWaitingTxSetResolver\n    const isSetContentButtonDisabled = hasContentError ? false : hasResolverError || !hasResolver || hasContent || isWaitingTxSetContent\n\n    return (\n      <Form className=\"LandAssignENSForm\">\n        <Row>\n          <p className=\"message\">{t('land_assign_ens_page.set_name_message')}</p>\n        </Row>\n        <Row>\n          <div className={isSetResolverButtonDisabled ? 'box box-disabled' : 'box'}>\n            <h3>{t('land_assign_ens_page.set_resolver')}</h3>\n            <div className=\"message-box\">\n              <p>{t('land_assign_ens_page.set_resolver_explanation')}</p>\n              <NetworkButton\n                type=\"submit\"\n                disabled={isSetResolverButtonDisabled}\n                onClick={this.handleSetResolver}\n                className={setResolverButtonClassName}\n                loading={isWaitingTxSetResolver}\n                primary\n                network={Network.ETHEREUM}\n              >\n                {hasResolverError ? (\n                  t('global.retry_tx')\n                ) : hasResolver ? (\n                  <>\n                    {t('global.approved_tx')}\n                    {!isWaitingTxSetResolver ? <Icon name=\"check\" /> : null}\n                  </>\n                ) : (\n                  t('global.submit')\n                )}\n              </NetworkButton>\n            </div>\n          </div>\n        </Row>\n        <Row>\n          <div className={isSetContentButtonDisabled ? 'box box-disabled' : 'box'}>\n            <h3>{t('land_assign_ens_page.set_content')}</h3>\n            <div className=\"message-box\">\n              <p>{t('land_assign_ens_page.set_content_explanation')}</p>\n              <NetworkButton\n                type=\"submit\"\n                disabled={isSetContentButtonDisabled}\n                onClick={this.handleSetContent}\n                className={setContentButtonClassName}\n                loading={isWaitingTxSetContent}\n                primary\n                network={Network.ETHEREUM}\n              >\n                {hasContentError ? (\n                  t('global.retry_tx')\n                ) : hasContent ? (\n                  <>\n                    {t('global.approved_tx')}\n                    {!isWaitingTxSetContent ? <Icon name=\"check\" /> : null}\n                  </>\n                ) : (\n                  t('global.submit')\n                )}\n              </NetworkButton>\n            </div>\n          </div>\n        </Row>\n        <Row className=\"confirmation-buttons\">\n          <Button onClick={this.handleBack} disabled={hasData}>\n            {t('global.back')}\n          </Button>\n          <Button\n            disabled={!hasResolver || !hasContent || isLoading || isWaitingTxSetContent || isWaitingTxSetResolver}\n            onClick={this.handleFinish}\n            primary\n          >\n            {t('global.finish')}\n          </Button>\n        </Row>\n      </Form>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}