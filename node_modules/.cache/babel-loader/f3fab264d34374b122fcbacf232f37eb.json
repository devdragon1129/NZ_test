{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/SideBar/AssetList/AssetList.tsx\";\nimport React from 'react';\nimport { Grid } from 'decentraland-ui';\nimport Drawer from 'components/Drawer';\nimport AssetCard from 'components/AssetCard';\nimport { GROUND_CATEGORY } from 'modules/asset/types';\nimport './AssetList.css';\nvar DEFAULT_COLUMN_COUNT = 3;\n\nvar AssetList = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(AssetList, _React$PureComponent);\n\n  function AssetList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AssetList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AssetList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleClick = function (asset) {\n      if (asset.category === GROUND_CATEGORY) {\n        var _this$props = _this.props,\n            currentProject = _this$props.currentProject,\n            onSetGround = _this$props.onSetGround;\n\n        if (currentProject) {\n          onSetGround(currentProject.id, asset);\n        }\n      } else {\n        var onAddItem = _this.props.onAddItem;\n        onAddItem(asset);\n      }\n    };\n\n    _this.handleBeginDrag = function (asset) {\n      if (asset.category !== GROUND_CATEGORY) {\n        var onPrefetchAsset = _this.props.onPrefetchAsset;\n        onPrefetchAsset(asset);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(AssetList, [{\n    key: \"getColumnCount\",\n    value: function getColumnCount() {\n      return Number(this.props.columnCount);\n    }\n  }, {\n    key: \"renderGrid\",\n    value: function renderGrid(assets) {\n      var isList = this.props.isList;\n      var columnCount = this.getColumnCount();\n      var el = [];\n\n      for (var i = 0; i < assets.length; i += columnCount) {\n        var row = [];\n\n        for (var j = i; j < i + columnCount; j++) {\n          var item = assets[j];\n          if (!item) break;\n          row.push( /*#__PURE__*/React.createElement(Grid.Column, {\n            key: item.id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(AssetCard, {\n            asset: item,\n            isHorizontal: isList,\n            onClick: this.handleClick,\n            onBeginDrag: this.handleBeginDrag,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 13\n            }\n          })));\n        }\n\n        el.push( /*#__PURE__*/React.createElement(Grid.Row, {\n          key: assets[i].id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 15\n          }\n        }, row));\n      }\n\n      return el;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          category = _this$props2.category,\n          isList = _this$props2.isList,\n          columnCount = _this$props2.columnCount,\n          hasLabel = _this$props2.hasLabel;\n      return /*#__PURE__*/React.createElement(Drawer, {\n        className: \"AssetList\",\n        key: \"drawer-\".concat(category.name),\n        label: category.name,\n        hasLabel: hasLabel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        columns: isList ? 1 : columnCount,\n        padded: \"horizontally\",\n        className: \"asset-grid \".concat(isList ? 'item-list' : 'item-grid'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }, this.renderGrid(category.assets)));\n    }\n  }]);\n\n  return AssetList;\n}(React.PureComponent);\n\nAssetList.defaultProps = {\n  columnCount: DEFAULT_COLUMN_COUNT\n};\nexport { AssetList as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/SideBar/AssetList/AssetList.tsx"],"names":["React","Grid","Drawer","AssetCard","GROUND_CATEGORY","DEFAULT_COLUMN_COUNT","AssetList","handleClick","asset","category","props","currentProject","onSetGround","id","onAddItem","handleBeginDrag","onPrefetchAsset","Number","columnCount","assets","isList","getColumnCount","el","i","length","row","j","item","push","hasLabel","name","renderGrid","PureComponent","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Grid } from 'decentraland-ui'\n\nimport Drawer from 'components/Drawer'\nimport AssetCard from 'components/AssetCard'\nimport { Asset, GROUND_CATEGORY } from 'modules/asset/types'\n\nimport { Props, DefaultProps } from './AssetList.types'\nimport './AssetList.css'\n\nconst DEFAULT_COLUMN_COUNT = 3\n\nexport default class AssetList extends React.PureComponent<Props> {\n  static defaultProps: DefaultProps = {\n    columnCount: DEFAULT_COLUMN_COUNT\n  }\n\n  getColumnCount(): number {\n    return Number(this.props.columnCount)\n  }\n\n  handleClick = (asset: Asset) => {\n    if (asset.category === GROUND_CATEGORY) {\n      const { currentProject, onSetGround } = this.props\n      if (currentProject) {\n        onSetGround(currentProject.id, asset)\n      }\n    } else {\n      const { onAddItem } = this.props\n      onAddItem(asset)\n    }\n  }\n\n  handleBeginDrag = (asset: Asset) => {\n    if (asset.category !== GROUND_CATEGORY) {\n      const { onPrefetchAsset } = this.props\n      onPrefetchAsset(asset)\n    }\n  }\n\n  renderGrid(assets: Asset[]) {\n    const { isList } = this.props\n    const columnCount = this.getColumnCount()\n    let el = []\n\n    for (let i = 0; i < assets.length; i += columnCount) {\n      let row = []\n\n      for (let j = i; j < i + columnCount; j++) {\n        const item = assets[j]\n        if (!item) break\n\n        row.push(\n          <Grid.Column key={item.id}>\n            <AssetCard asset={item} isHorizontal={isList} onClick={this.handleClick} onBeginDrag={this.handleBeginDrag} />\n          </Grid.Column>\n        )\n      }\n\n      el.push(<Grid.Row key={assets[i].id}>{row}</Grid.Row>)\n    }\n\n    return el\n  }\n\n  render() {\n    const { category, isList, columnCount, hasLabel } = this.props\n    return (\n      <Drawer className=\"AssetList\" key={`drawer-${category.name}`} label={category.name} hasLabel={hasLabel}>\n        <Grid columns={isList ? 1 : columnCount} padded=\"horizontally\" className={`asset-grid ${isList ? 'item-list' : 'item-grid'}`}>\n          {this.renderGrid(category.assets)}\n        </Grid>\n      </Drawer>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}