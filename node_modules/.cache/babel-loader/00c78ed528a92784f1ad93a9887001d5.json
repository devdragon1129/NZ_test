{"ast":null,"code":"import { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { openModal } from 'modules/modal/actions';\nimport { getPaginationData as getItemsPaginationData, getLoading as getLoadingItems, getPaginatedCollectionItems } from 'modules/item/selectors';\nimport { getLoading as getLoadingCollections, getPaginatedCollections, getPaginationData } from 'modules/collection/selectors';\nimport { setCollectionPageView } from 'modules/ui/collection/actions';\nimport { getCollectionPageView } from 'modules/ui/collection/selectors';\nimport { isThirdPartyManager } from 'modules/thirdParty/selectors';\nimport { fetchItemsRequest, FETCH_ITEMS_REQUEST } from 'modules/item/actions';\nimport { fetchCollectionsRequest, FETCH_COLLECTIONS_REQUEST } from 'modules/collection/actions';\nimport CollectionsPage from './CollectionsPage';\n\nvar mapState = function mapState(state) {\n  var address = getAddress(state);\n  var paginatedCollections = getPaginatedCollections(state);\n  var items = address ? getPaginatedCollectionItems(state, address) : [];\n  var itemsPaginationData = address ? getItemsPaginationData(state, address) : null;\n  var collectionsPaginationData = getPaginationData(state);\n  return {\n    items: items,\n    address: address,\n    collections: paginatedCollections,\n    collectionsPaginationData: collectionsPaginationData,\n    itemsPaginationData: itemsPaginationData,\n    view: getCollectionPageView(state),\n    isThirdPartyManager: isThirdPartyManager(state),\n    isLoadingCollections: isLoadingType(getLoadingCollections(state), FETCH_COLLECTIONS_REQUEST),\n    isLoadingItems: isLoadingType(getLoadingItems(state), FETCH_ITEMS_REQUEST)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onNavigate: function onNavigate(path) {\n      return dispatch(push(path));\n    },\n    onSetView: function onSetView(view) {\n      return dispatch(setCollectionPageView(view));\n    },\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    },\n    onFetchOrphanItems: function onFetchOrphanItems(address, params) {\n      return dispatch(fetchItemsRequest(address, params));\n    },\n    onFetchCollections: function onFetchCollections(address, params) {\n      return dispatch(fetchCollectionsRequest(address, params));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(CollectionsPage);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/CollectionsPage/CollectionsPage.container.ts"],"names":["connect","push","isLoadingType","getAddress","openModal","getPaginationData","getItemsPaginationData","getLoading","getLoadingItems","getPaginatedCollectionItems","getLoadingCollections","getPaginatedCollections","setCollectionPageView","getCollectionPageView","isThirdPartyManager","fetchItemsRequest","FETCH_ITEMS_REQUEST","fetchCollectionsRequest","FETCH_COLLECTIONS_REQUEST","CollectionsPage","mapState","state","address","paginatedCollections","items","itemsPaginationData","collectionsPaginationData","collections","view","isLoadingCollections","isLoadingItems","mapDispatch","dispatch","onNavigate","path","onSetView","onOpenModal","name","metadata","onFetchOrphanItems","params","onFetchCollections"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,UAAT,QAA2B,kDAA3B;AAEA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SACEC,iBAAiB,IAAIC,sBADvB,EAEEC,UAAU,IAAIC,eAFhB,EAGEC,2BAHF,QAIO,wBAJP;AAKA,SAASF,UAAU,IAAIG,qBAAvB,EAA8CC,uBAA9C,EAAuEN,iBAAvE,QAAgG,8BAAhG;AACA,SAASO,qBAAT,QAAsC,+BAAtC;AACA,SAASC,qBAAT,QAAsC,iCAAtC;AACA,SAASC,mBAAT,QAAoC,8BAApC;AACA,SAASC,iBAAT,EAA4BC,mBAA5B,QAAuD,sBAAvD;AACA,SAASC,uBAAT,EAAkCC,yBAAlC,QAAmE,4BAAnE;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAqC;AACpD,MAAMC,OAAO,GAAGnB,UAAU,CAACkB,KAAD,CAA1B;AACA,MAAME,oBAAoB,GAAGZ,uBAAuB,CAACU,KAAD,CAApD;AACA,MAAMG,KAAK,GAAGF,OAAO,GAAGb,2BAA2B,CAACY,KAAD,EAAQC,OAAR,CAA9B,GAAiD,EAAtE;AACA,MAAMG,mBAAmB,GAAGH,OAAO,GAAGhB,sBAAsB,CAACe,KAAD,EAAQC,OAAR,CAAzB,GAA4C,IAA/E;AACA,MAAMI,yBAAyB,GAAGrB,iBAAiB,CAACgB,KAAD,CAAnD;AAEA,SAAO;AACLG,IAAAA,KAAK,EAALA,KADK;AAELF,IAAAA,OAAO,EAAPA,OAFK;AAGLK,IAAAA,WAAW,EAAEJ,oBAHR;AAILG,IAAAA,yBAAyB,EAAzBA,yBAJK;AAKLD,IAAAA,mBAAmB,EAAnBA,mBALK;AAMLG,IAAAA,IAAI,EAAEf,qBAAqB,CAACQ,KAAD,CANtB;AAOLP,IAAAA,mBAAmB,EAAEA,mBAAmB,CAACO,KAAD,CAPnC;AAQLQ,IAAAA,oBAAoB,EAAE3B,aAAa,CAACQ,qBAAqB,CAACW,KAAD,CAAtB,EAA+BH,yBAA/B,CAR9B;AASLY,IAAAA,cAAc,EAAE5B,aAAa,CAACM,eAAe,CAACa,KAAD,CAAhB,EAAyBL,mBAAzB;AATxB,GAAP;AAWD,CAlBD;;AAoBA,IAAMe,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,UAAU,EAAE,oBAAAC,IAAI;AAAA,aAAIF,QAAQ,CAAC/B,IAAI,CAACiC,IAAD,CAAL,CAAZ;AAAA,KADgD;AAEhEC,IAAAA,SAAS,EAAE,mBAAAP,IAAI;AAAA,aAAII,QAAQ,CAACpB,qBAAqB,CAACgB,IAAD,CAAtB,CAAZ;AAAA,KAFiD;AAGhEQ,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,QAAP;AAAA,aAAoBN,QAAQ,CAAC5B,SAAS,CAACiC,IAAD,EAAOC,QAAP,CAAV,CAA5B;AAAA,KAHmD;AAIhEC,IAAAA,kBAAkB,EAAE,4BAACjB,OAAD,EAAUkB,MAAV;AAAA,aAAqBR,QAAQ,CAACjB,iBAAiB,CAACO,OAAD,EAAUkB,MAAV,CAAlB,CAA7B;AAAA,KAJ4C;AAKhEC,IAAAA,kBAAkB,EAAE,4BAACnB,OAAD,EAAUkB,MAAV;AAAA,aAAqBR,QAAQ,CAACf,uBAAuB,CAACK,OAAD,EAAUkB,MAAV,CAAxB,CAA7B;AAAA;AAL4C,GAA9C;AAAA,CAApB;;AAQA,eAAexC,OAAO,CAACoB,QAAD,EAAWW,WAAX,CAAP,CAA+BZ,eAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { RootState } from 'modules/common/types'\nimport { openModal } from 'modules/modal/actions'\nimport {\n  getPaginationData as getItemsPaginationData,\n  getLoading as getLoadingItems,\n  getPaginatedCollectionItems\n} from 'modules/item/selectors'\nimport { getLoading as getLoadingCollections, getPaginatedCollections, getPaginationData } from 'modules/collection/selectors'\nimport { setCollectionPageView } from 'modules/ui/collection/actions'\nimport { getCollectionPageView } from 'modules/ui/collection/selectors'\nimport { isThirdPartyManager } from 'modules/thirdParty/selectors'\nimport { fetchItemsRequest, FETCH_ITEMS_REQUEST } from 'modules/item/actions'\nimport { fetchCollectionsRequest, FETCH_COLLECTIONS_REQUEST } from 'modules/collection/actions'\nimport { MapStateProps, MapDispatchProps, MapDispatch } from './CollectionsPage.types'\nimport CollectionsPage from './CollectionsPage'\n\nconst mapState = (state: RootState): MapStateProps => {\n  const address = getAddress(state)\n  const paginatedCollections = getPaginatedCollections(state)\n  const items = address ? getPaginatedCollectionItems(state, address) : []\n  const itemsPaginationData = address ? getItemsPaginationData(state, address) : null\n  const collectionsPaginationData = getPaginationData(state)\n\n  return {\n    items,\n    address,\n    collections: paginatedCollections,\n    collectionsPaginationData,\n    itemsPaginationData,\n    view: getCollectionPageView(state),\n    isThirdPartyManager: isThirdPartyManager(state),\n    isLoadingCollections: isLoadingType(getLoadingCollections(state), FETCH_COLLECTIONS_REQUEST),\n    isLoadingItems: isLoadingType(getLoadingItems(state), FETCH_ITEMS_REQUEST)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onNavigate: path => dispatch(push(path)),\n  onSetView: view => dispatch(setCollectionPageView(view)),\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata)),\n  onFetchOrphanItems: (address, params) => dispatch(fetchItemsRequest(address, params)),\n  onFetchCollections: (address, params) => dispatch(fetchCollectionsRequest(address, params))\n})\n\nexport default connect(mapState, mapDispatch)(CollectionsPage)\n"]},"metadata":{},"sourceType":"module"}