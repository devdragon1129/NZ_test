{"ast":null,"code":"import { ThinEngine } from \"../../Engines/thinEngine\";\n\nThinEngine.prototype._readTexturePixels = function (texture, width, height, faceIndex, level, buffer) {\n  if (faceIndex === void 0) {\n    faceIndex = -1;\n  }\n\n  if (level === void 0) {\n    level = 0;\n  }\n\n  if (buffer === void 0) {\n    buffer = null;\n  }\n\n  var gl = this._gl;\n\n  if (!gl) {\n    throw new Error(\"Engine does not have gl rendering context.\");\n  }\n\n  if (!this._dummyFramebuffer) {\n    var dummy = gl.createFramebuffer();\n\n    if (!dummy) {\n      throw new Error(\"Unable to create dummy framebuffer\");\n    }\n\n    this._dummyFramebuffer = dummy;\n  }\n\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this._dummyFramebuffer);\n\n  if (faceIndex > -1) {\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, texture._webGLTexture, level);\n  } else {\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._webGLTexture, level);\n  }\n\n  var readType = texture.type !== undefined ? this._getWebGLTextureType(texture.type) : gl.UNSIGNED_BYTE;\n\n  switch (readType) {\n    case gl.UNSIGNED_BYTE:\n      if (!buffer) {\n        buffer = new Uint8Array(4 * width * height);\n      }\n\n      readType = gl.UNSIGNED_BYTE;\n      break;\n\n    default:\n      if (!buffer) {\n        buffer = new Float32Array(4 * width * height);\n      }\n\n      readType = gl.FLOAT;\n      break;\n  }\n\n  gl.readPixels(0, 0, width, height, gl.RGBA, readType, buffer);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this._currentFramebuffer);\n  return buffer;\n};","map":null,"metadata":{},"sourceType":"module"}