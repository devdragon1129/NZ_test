{"ast":null,"code":"export var SortBy;\n\n(function (SortBy) {\n  SortBy[\"NEWEST\"] = \"updated_at\";\n  SortBy[\"LIKES\"] = \"likes\";\n  SortBy[\"NAME\"] = \"title\";\n  SortBy[\"SIZE\"] = \"parcels\";\n  SortBy[\"ITEMS\"] = \"transforms\";\n  SortBy[\"SMART_ITEMS\"] = \"scripts\";\n})(SortBy || (SortBy = {}));\n\nexport var RECORDS_PER_PAGE = 24;","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/pool/types.ts"],"names":["SortBy","RECORDS_PER_PAGE"],"mappings":"AAyBA,WAAYA,MAAZ;;WAAYA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;AAAAA,EAAAA,M;GAAAA,M,KAAAA,M;;AASZ,OAAO,IAAMC,gBAAgB,GAAG,EAAzB","sourcesContent":["import { Scene } from 'modules/scene/types'\nimport { Project } from 'modules/project/types'\nimport { PaginationOptions } from 'routing/utils'\n\nexport type Pool = Project & {\n  groups: string[]\n  statistics?: {\n    parcels: number\n    transforms: number\n    gltf_shapes: number\n    nft_shapes: number\n    scripts: number\n    entities: number\n  }\n  likes: number\n  like: boolean\n}\n\nexport type Manifest<T = Project> = { version: number; project: T; scene: Scene }\n\nexport type PoolsRequestFilters = PaginationOptions & {\n  group?: string\n  ethAddress?: string\n}\n\nexport enum SortBy {\n  NEWEST = 'updated_at',\n  LIKES = 'likes',\n  NAME = 'title',\n  SIZE = 'parcels',\n  ITEMS = 'transforms',\n  SMART_ITEMS = 'scripts'\n}\n\nexport const RECORDS_PER_PAGE = 24\n"]},"metadata":{},"sourceType":"module"}