{"ast":null,"code":"import { StringTools } from './stringTools';\n/**\r\n * Utility class for reading from a data buffer\r\n */\n\nvar DataReader =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   * @param buffer The buffer to read\r\n   */\n  function DataReader(buffer) {\n    /**\r\n     * The current byte offset from the beginning of the data buffer.\r\n     */\n    this.byteOffset = 0;\n    this.buffer = buffer;\n  }\n  /**\r\n   * Loads the given byte length.\r\n   * @param byteLength The byte length to load\r\n   * @returns A promise that resolves when the load is complete\r\n   */\n\n\n  DataReader.prototype.loadAsync = function (byteLength) {\n    var _this = this;\n\n    return this.buffer.readAsync(this.byteOffset, byteLength).then(function (data) {\n      _this._dataView = new DataView(data.buffer, data.byteOffset, data.byteLength);\n      _this._dataByteOffset = 0;\n    });\n  };\n  /**\r\n   * Read a unsigned 32-bit integer from the currently loaded data range.\r\n   * @returns The 32-bit integer read\r\n   */\n\n\n  DataReader.prototype.readUint32 = function () {\n    var value = this._dataView.getUint32(this._dataByteOffset, true);\n\n    this._dataByteOffset += 4;\n    this.byteOffset += 4;\n    return value;\n  };\n  /**\r\n   * Read a byte array from the currently loaded data range.\r\n   * @param byteLength The byte length to read\r\n   * @returns The byte array read\r\n   */\n\n\n  DataReader.prototype.readUint8Array = function (byteLength) {\n    var value = new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + this._dataByteOffset, byteLength);\n    this._dataByteOffset += byteLength;\n    this.byteOffset += byteLength;\n    return value;\n  };\n  /**\r\n   * Read a string from the currently loaded data range.\r\n   * @param byteLength The byte length to read\r\n   * @returns The string read\r\n   */\n\n\n  DataReader.prototype.readString = function (byteLength) {\n    return StringTools.Decode(this.readUint8Array(byteLength));\n  };\n  /**\r\n   * Skips the given byte length the currently loaded data range.\r\n   * @param byteLength The byte length to skip\r\n   */\n\n\n  DataReader.prototype.skipBytes = function (byteLength) {\n    this._dataByteOffset += byteLength;\n    this.byteOffset += byteLength;\n  };\n\n  return DataReader;\n}();\n\nexport { DataReader };","map":null,"metadata":{},"sourceType":"module"}