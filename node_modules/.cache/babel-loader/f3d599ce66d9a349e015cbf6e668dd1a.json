{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\nvar parallelBatch = require('it-parallel-batch');\n\nvar defaultOptions = require('./options');\n/**\n * @typedef {import('./types').BlockAPI} BlockAPI\n * @typedef {import('./types').ImportCandidate} ImportCandidate\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').Directory} Directory\n * @typedef {import('./types').File} File\n * @typedef {import('./types').ImportResult} ImportResult\n *\n * @typedef {import('./types').Chunker} Chunker\n * @typedef {import('./types').DAGBuilder} DAGBuilder\n * @typedef {import('./types').TreeBuilder} TreeBuilder\n * @typedef {import('./types').BufferImporter} BufferImporter\n * @typedef {import('./types').ChunkValidator} ChunkValidator\n * @typedef {import('./types').Reducer} Reducer\n * @typedef {import('./types').ProgressHandler} ProgressHandler\n */\n\n/**\n * @param {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate> | ImportCandidate} source\n * @param {BlockAPI} block\n * @param {UserImporterOptions} options\n */\n\n\nfunction importer(_x, _x2) {\n  return _importer.apply(this, arguments);\n}\n\nfunction _importer() {\n  _importer = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source, block) {\n    var options,\n        opts,\n        dagBuilder,\n        treeBuilder,\n        candidates,\n        _iteratorAbruptCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        entry,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            opts = defaultOptions(options);\n\n            if (typeof options.dagBuilder === 'function') {\n              dagBuilder = options.dagBuilder;\n            } else {\n              dagBuilder = require('./dag-builder');\n            }\n\n            if (typeof options.treeBuilder === 'function') {\n              treeBuilder = options.treeBuilder;\n            } else {\n              treeBuilder = require('./tree-builder');\n            }\n            /** @type {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate>} */\n\n\n            if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n              // @ts-ignore\n              candidates = source;\n            } else {\n              // @ts-ignore\n              candidates = [source];\n            }\n\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 7;\n            _iterator = _asyncIterator(treeBuilder(parallelBatch(dagBuilder(candidates, block, opts), opts.fileImportConcurrency), block, opts));\n\n          case 9:\n            _context.next = 11;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 11:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 18;\n              break;\n            }\n\n            entry = _step.value;\n            _context.next = 15;\n            return {\n              cid: entry.cid,\n              path: entry.path,\n              unixfs: entry.unixfs,\n              size: entry.size\n            };\n\n          case 15:\n            _iteratorAbruptCompletion = false;\n            _context.next = 9;\n            break;\n\n          case 18:\n            _context.next = 24;\n            break;\n\n          case 20:\n            _context.prev = 20;\n            _context.t0 = _context[\"catch\"](7);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 24:\n            _context.prev = 24;\n            _context.prev = 25;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 29;\n              break;\n            }\n\n            _context.next = 29;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 29:\n            _context.prev = 29;\n\n            if (!_didIteratorError) {\n              _context.next = 32;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 32:\n            return _context.finish(29);\n\n          case 33:\n            return _context.finish(24);\n\n          case 34:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[7, 20, 24, 34], [25,, 29, 33]]);\n  }));\n  return _importer.apply(this, arguments);\n}\n\nmodule.exports = {\n  importer: importer\n};","map":null,"metadata":{},"sourceType":"script"}