{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { VideoTexture } from \"../Materials/Textures/videoTexture\";\nimport { TextureDome } from \"./textureDome\";\n/**\r\n * Display a 360/180 degree video on an approximately spherical surface, useful for VR applications or skyboxes.\r\n * As a subclass of TransformNode, this allow parenting to the camera or multiple videos with different locations in the scene.\r\n * This class achieves its effect with a VideoTexture and a correctly configured BackgroundMaterial on an inverted sphere.\r\n * Potential additions to this helper include zoom and and non-infinite distance rendering effects.\r\n */\n\nvar VideoDome =\n/** @class */\nfunction (_super) {\n  __extends(VideoDome, _super);\n\n  function VideoDome() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(VideoDome.prototype, \"videoTexture\", {\n    /**\r\n     * Get the video texture associated with this video dome\r\n     */\n    get: function get() {\n      return this._texture;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VideoDome.prototype, \"videoMode\", {\n    /**\r\n     * Get the video mode of this dome\r\n     */\n    get: function get() {\n      return this.textureMode;\n    },\n\n    /**\r\n     * Set the video mode of this dome.\r\n     * @see textureMode\r\n     */\n    set: function set(value) {\n      this.textureMode = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  VideoDome.prototype._initTexture = function (urlsOrElement, scene, options) {\n    var _this = this;\n\n    var tempOptions = {\n      loop: options.loop,\n      autoPlay: options.autoPlay,\n      autoUpdateTexture: true,\n      poster: options.poster\n    };\n    var texture = new VideoTexture((this.name || \"videoDome\") + \"_texture\", urlsOrElement, scene, options.generateMipMaps, this._useDirectMapping, Texture.TRILINEAR_SAMPLINGMODE, tempOptions); // optional configuration\n\n    if (options.clickToPlay) {\n      scene.onPointerUp = function () {\n        _this._texture.video.play();\n      };\n    }\n\n    return texture;\n  };\n  /**\r\n   * Define the video source as a Monoscopic panoramic 360 video.\r\n   */\n\n\n  VideoDome.MODE_MONOSCOPIC = TextureDome.MODE_MONOSCOPIC;\n  /**\r\n   * Define the video source as a Stereoscopic TopBottom/OverUnder panoramic 360 video.\r\n   */\n\n  VideoDome.MODE_TOPBOTTOM = TextureDome.MODE_TOPBOTTOM;\n  /**\r\n   * Define the video source as a Stereoscopic Side by Side panoramic 360 video.\r\n   */\n\n  VideoDome.MODE_SIDEBYSIDE = TextureDome.MODE_SIDEBYSIDE;\n  return VideoDome;\n}(TextureDome);\n\nexport { VideoDome };","map":null,"metadata":{},"sourceType":"module"}