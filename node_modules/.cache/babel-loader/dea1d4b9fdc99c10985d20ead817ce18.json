{"ast":null,"code":"import _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { createSelector } from 'reselect';\nimport { getCurrentProject, getUserProjects } from 'modules/project/selectors';\nimport { getLandTiles, getDeploymentsByCoord } from 'modules/land/selectors';\nimport { ProgressStage, DeploymentStatus } from './types';\nimport { getStatus, mergeStatuses } from './utils';\nimport { idToCoords, coordsToId, emptyColorByRole } from 'modules/land/utils';\nexport var getState = function getState(state) {\n  return state.deployment;\n};\nexport var getData = function getData(state) {\n  return getState(state).data;\n};\nexport var isLoading = function isLoading(state) {\n  return getState(state).loading.length > 0;\n};\nexport var getError = function getError(state) {\n  return getState(state).error;\n};\nexport var getProgress = function getProgress(state) {\n  return getState(state).progress;\n};\nexport var isUploadingRecording = function isUploadingRecording(state) {\n  return getState(state).progress.stage === ProgressStage.UPLOAD_RECORDING;\n};\nexport var isUploadingAssets = function isUploadingAssets(state) {\n  return getState(state).progress.stage === ProgressStage.UPLOAD_SCENE_ASSETS;\n};\nexport var isCreatingFiles = function isCreatingFiles(state) {\n  return getState(state).progress.stage === ProgressStage.CREATE_FILES;\n};\nexport var getDeploymentsByProjectId = createSelector(getData, getUserProjects, function (deployments, projects) {\n  var out = {};\n\n  for (var _i = 0, _Object$values = Object.values(deployments); _i < _Object$values.length; _i++) {\n    var deployment = _Object$values[_i];\n    var project = deployment.projectId && deployment.projectId in projects ? projects[deployment.projectId] : null;\n\n    if (project) {\n      var exists = (project.id in out);\n\n      if (!exists) {\n        out[project.id] = [];\n      }\n\n      out[project.id].push(deployment);\n    }\n  }\n\n  return out;\n});\nexport var getCurrentDeployments = createSelector(getDeploymentsByProjectId, getCurrentProject, function (deploymentsByProjectId, project) {\n  return project && project.id in deploymentsByProjectId ? deploymentsByProjectId[project.id] : [];\n});\nexport var getDeploymentStatusByProjectId = createSelector(getDeploymentsByProjectId, getUserProjects, function (deploymentsByProjectId, projects) {\n  var out = {};\n\n  var _loop = function _loop() {\n    var project = _Object$values2[_i2];\n    var deployments = deploymentsByProjectId[project.id] || [];\n    var statuses = deployments.map(function (deployment) {\n      return getStatus(project, deployment);\n    });\n    var status = mergeStatuses(statuses);\n    out[project.id] = status;\n  };\n\n  for (var _i2 = 0, _Object$values2 = Object.values(projects); _i2 < _Object$values2.length; _i2++) {\n    _loop();\n  }\n\n  return out;\n});\nexport var getCurrentDeploymentStatus = createSelector(getCurrentProject, getDeploymentStatusByProjectId, function (project, deploymentStatusByProjectId) {\n  return project ? deploymentStatusByProjectId[project.id] : DeploymentStatus.UNPUBLISHED;\n});\nexport var getEmptyTiles = createSelector(function (state) {\n  return getDeploymentsByCoord(state);\n}, function (state) {\n  return getLandTiles(state);\n}, function (deploymentsByCoord, landTiles) {\n  var result = {};\n\n  for (var _i3 = 0, _Object$keys = Object.keys(landTiles); _i3 < _Object$keys.length; _i3++) {\n    var id = _Object$keys[_i3];\n    var isOccupied = (id in deploymentsByCoord);\n    var role = landTiles[id].land.role;\n\n    if (!isOccupied) {\n      result[id] = {\n        color: emptyColorByRole[role],\n        scale: 1\n      };\n    }\n  } // connect unoccupied tiles\n\n\n  for (var _i4 = 0, _Object$keys2 = Object.keys(result); _i4 < _Object$keys2.length; _i4++) {\n    var _id = _Object$keys2[_i4];\n    var land = landTiles[_id].land;\n\n    var _idToCoords = idToCoords(_id),\n        _idToCoords2 = _slicedToArray(_idToCoords, 2),\n        x = _idToCoords2[0],\n        y = _idToCoords2[1];\n\n    var topId = coordsToId(x, y + 1);\n    var leftId = coordsToId(x - 1, y);\n    var topLeftId = coordsToId(x - 1, y + 1);\n    var topLand = landTiles[topId];\n    var leftLand = landTiles[leftId];\n    var topLeftLand = landTiles[topLeftId];\n    var top = !!topLand && topLand.land.id === land.id;\n    var left = !!leftLand && leftLand.land.id === land.id;\n    var topLeft = !!topLeftLand && topLeftLand.land.id === land.id;\n    result[_id] = _objectSpread({}, result[_id], {\n      top: top,\n      left: left,\n      topLeft: topLeft\n    });\n  }\n\n  return result;\n});","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/deployment/selectors.ts"],"names":["createSelector","getCurrentProject","getUserProjects","getLandTiles","getDeploymentsByCoord","ProgressStage","DeploymentStatus","getStatus","mergeStatuses","idToCoords","coordsToId","emptyColorByRole","getState","state","deployment","getData","data","isLoading","loading","length","getError","error","getProgress","progress","isUploadingRecording","stage","UPLOAD_RECORDING","isUploadingAssets","UPLOAD_SCENE_ASSETS","isCreatingFiles","CREATE_FILES","getDeploymentsByProjectId","deployments","projects","out","Object","values","project","projectId","exists","id","push","getCurrentDeployments","deploymentsByProjectId","getDeploymentStatusByProjectId","statuses","map","status","getCurrentDeploymentStatus","deploymentStatusByProjectId","UNPUBLISHED","getEmptyTiles","deploymentsByCoord","landTiles","result","keys","isOccupied","role","land","color","scale","x","y","topId","leftId","topLeftId","topLand","leftLand","topLeftLand","top","left","topLeft"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect'\nimport { Tile } from 'react-tile-map/lib/src/lib/common'\nimport { RootState } from 'modules/common/types'\nimport { Project } from 'modules/project/types'\nimport { getCurrentProject, getUserProjects } from 'modules/project/selectors'\nimport { getLandTiles, getDeploymentsByCoord } from 'modules/land/selectors'\nimport { LandTile } from 'modules/land/types'\nimport { ProgressStage, DeploymentStatus, Deployment } from './types'\nimport { DeploymentState } from './reducer'\nimport { getStatus, mergeStatuses } from './utils'\nimport { idToCoords, coordsToId, emptyColorByRole } from 'modules/land/utils'\n\nexport const getState = (state: RootState) => state.deployment\nexport const getData = (state: RootState) => getState(state).data\nexport const isLoading = (state: RootState) => getState(state).loading.length > 0\nexport const getError = (state: RootState) => getState(state).error\nexport const getProgress = (state: RootState) => getState(state).progress\nexport const isUploadingRecording = (state: RootState) => getState(state).progress.stage === ProgressStage.UPLOAD_RECORDING\nexport const isUploadingAssets = (state: RootState) => getState(state).progress.stage === ProgressStage.UPLOAD_SCENE_ASSETS\nexport const isCreatingFiles = (state: RootState) => getState(state).progress.stage === ProgressStage.CREATE_FILES\n\nexport const getDeploymentsByProjectId = createSelector<\n  RootState,\n  DeploymentState['data'],\n  Record<string, Project>,\n  Record<string, Deployment[]>\n>(getData, getUserProjects, (deployments, projects) => {\n  let out: Record<string, Deployment[]> = {}\n  for (const deployment of Object.values(deployments)) {\n    const project = deployment.projectId && deployment.projectId in projects ? projects[deployment.projectId] : null\n    if (project) {\n      const exists = project.id in out\n      if (!exists) {\n        out[project.id] = []\n      }\n      out[project.id].push(deployment)\n    }\n  }\n  return out\n})\n\nexport const getCurrentDeployments = createSelector<RootState, Record<string, Deployment[]>, Project | null, Deployment[]>(\n  getDeploymentsByProjectId,\n  getCurrentProject,\n  (deploymentsByProjectId, project) => {\n    return project && project.id in deploymentsByProjectId ? deploymentsByProjectId[project.id] : []\n  }\n)\n\nexport const getDeploymentStatusByProjectId = createSelector<\n  RootState,\n  Record<string, Deployment[]>,\n  Record<string, Project>,\n  Record<string, DeploymentStatus>\n>(getDeploymentsByProjectId, getUserProjects, (deploymentsByProjectId, projects) => {\n  const out: Record<string, DeploymentStatus> = {}\n  for (const project of Object.values(projects)) {\n    const deployments = deploymentsByProjectId[project.id] || []\n    const statuses = deployments.map(deployment => getStatus(project, deployment))\n    const status = mergeStatuses(statuses)\n    out[project.id] = status\n  }\n  return out\n})\n\nexport const getCurrentDeploymentStatus = createSelector<RootState, Project | null, Record<string, DeploymentStatus>, DeploymentStatus>(\n  getCurrentProject,\n  getDeploymentStatusByProjectId,\n  (project, deploymentStatusByProjectId) => {\n    return project ? deploymentStatusByProjectId[project.id] : DeploymentStatus.UNPUBLISHED\n  }\n)\nexport const getEmptyTiles = createSelector<RootState, Record<string, Deployment>, Record<string, LandTile>, Record<string, Tile>>(\n  state => getDeploymentsByCoord(state),\n  state => getLandTiles(state),\n  (deploymentsByCoord, landTiles) => {\n    const result: Record<string, Tile> = {}\n\n    for (const id of Object.keys(landTiles)) {\n      const isOccupied = id in deploymentsByCoord\n      const role = landTiles[id].land.role\n      if (!isOccupied) {\n        result[id] = {\n          color: emptyColorByRole[role],\n          scale: 1\n        }\n      }\n    }\n\n    // connect unoccupied tiles\n    for (const id of Object.keys(result)) {\n      const land = landTiles[id].land\n      const [x, y] = idToCoords(id)\n\n      const topId = coordsToId(x, y + 1)\n      const leftId = coordsToId(x - 1, y)\n      const topLeftId = coordsToId(x - 1, y + 1)\n\n      const topLand = landTiles[topId]\n      const leftLand = landTiles[leftId]\n      const topLeftLand = landTiles[topLeftId]\n\n      const top = !!topLand && topLand.land.id === land.id\n      const left = !!leftLand && leftLand.land.id === land.id\n      const topLeft = !!topLeftLand && topLeftLand.land.id === land.id\n\n      result[id] = {\n        ...result[id],\n        top,\n        left,\n        topLeft\n      }\n    }\n\n    return result\n  }\n)\n"]},"metadata":{},"sourceType":"module"}