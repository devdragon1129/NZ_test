{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Observable } from \"../Misc/observable\";\nimport { WebXRInputSource } from \"./webXRInputSource\";\nimport { WebXRMotionControllerManager } from \"./motionController/webXRMotionControllerManager\";\n/**\r\n * XR input used to track XR inputs such as controllers/rays\r\n */\n\nvar WebXRInput =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes the WebXRInput\r\n   * @param xrSessionManager the xr session manager for this session\r\n   * @param xrCamera the WebXR camera for this session. Mainly used for teleportation\r\n   * @param options = initialization options for this xr input\r\n   */\n  function WebXRInput(\n  /**\r\n   * the xr session manager for this session\r\n   */\n  xrSessionManager,\n  /**\r\n   * the WebXR camera for this session. Mainly used for teleportation\r\n   */\n  xrCamera, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.xrSessionManager = xrSessionManager;\n    this.xrCamera = xrCamera;\n    this.options = options;\n    /**\r\n     * XR controllers being tracked\r\n     */\n\n    this.controllers = [];\n    /**\r\n     * Event when a controller has been connected/added\r\n     */\n\n    this.onControllerAddedObservable = new Observable();\n    /**\r\n     * Event when a controller has been removed/disconnected\r\n     */\n\n    this.onControllerRemovedObservable = new Observable();\n\n    this._onInputSourcesChange = function (event) {\n      _this._addAndRemoveControllers(event.added, event.removed);\n    }; // Remove controllers when exiting XR\n\n\n    this._sessionEndedObserver = this.xrSessionManager.onXRSessionEnded.add(function () {\n      _this._addAndRemoveControllers([], _this.controllers.map(function (c) {\n        return c.inputSource;\n      }));\n    });\n    this._sessionInitObserver = this.xrSessionManager.onXRSessionInit.add(function (session) {\n      session.addEventListener(\"inputsourceschange\", _this._onInputSourcesChange);\n    });\n    this._frameObserver = this.xrSessionManager.onXRFrameObservable.add(function (frame) {\n      // Update controller pose info\n      _this.controllers.forEach(function (controller) {\n        controller.updateFromXRFrame(frame, _this.xrSessionManager.referenceSpace);\n      });\n    });\n\n    if (this.options.customControllersRepositoryURL) {\n      WebXRMotionControllerManager.BaseRepositoryUrl = this.options.customControllersRepositoryURL;\n    }\n\n    WebXRMotionControllerManager.UseOnlineRepository = !this.options.disableOnlineControllerRepository;\n\n    if (WebXRMotionControllerManager.UseOnlineRepository) {\n      // pre-load the profiles list to load the controllers quicker afterwards\n      try {\n        WebXRMotionControllerManager.UpdateProfilesList().catch(function () {\n          WebXRMotionControllerManager.UseOnlineRepository = false;\n        });\n      } catch (e) {\n        WebXRMotionControllerManager.UseOnlineRepository = false;\n      }\n    }\n  }\n\n  WebXRInput.prototype._addAndRemoveControllers = function (addInputs, removeInputs) {\n    var _this = this; // Add controllers if they don't already exist\n\n\n    var sources = this.controllers.map(function (c) {\n      return c.inputSource;\n    });\n\n    for (var _i = 0, addInputs_1 = addInputs; _i < addInputs_1.length; _i++) {\n      var input = addInputs_1[_i];\n\n      if (sources.indexOf(input) === -1) {\n        var controller = new WebXRInputSource(this.xrSessionManager.scene, input, __assign(__assign({}, this.options.controllerOptions || {}), {\n          forceControllerProfile: this.options.forceInputProfile,\n          doNotLoadControllerMesh: this.options.doNotLoadControllerMeshes,\n          disableMotionControllerAnimation: this.options.disableControllerAnimation\n        }));\n        this.controllers.push(controller);\n        this.onControllerAddedObservable.notifyObservers(controller);\n      }\n    } // Remove and dispose of controllers to be disposed\n\n\n    var keepControllers = [];\n    var removedControllers = [];\n    this.controllers.forEach(function (c) {\n      if (removeInputs.indexOf(c.inputSource) === -1) {\n        keepControllers.push(c);\n      } else {\n        removedControllers.push(c);\n      }\n    });\n    this.controllers = keepControllers;\n    removedControllers.forEach(function (c) {\n      _this.onControllerRemovedObservable.notifyObservers(c);\n\n      c.dispose();\n    });\n  };\n  /**\r\n   * Disposes of the object\r\n   */\n\n\n  WebXRInput.prototype.dispose = function () {\n    this.controllers.forEach(function (c) {\n      c.dispose();\n    });\n    this.xrSessionManager.onXRFrameObservable.remove(this._frameObserver);\n    this.xrSessionManager.onXRSessionInit.remove(this._sessionInitObserver);\n    this.xrSessionManager.onXRSessionEnded.remove(this._sessionEndedObserver);\n    this.onControllerAddedObservable.clear();\n    this.onControllerRemovedObservable.clear();\n  };\n\n  return WebXRInput;\n}();\n\nexport { WebXRInput };","map":null,"metadata":{},"sourceType":"module"}