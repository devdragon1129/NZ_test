{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialConnectionPointDirection } from '../../nodeMaterialBlockConnectionPoint';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport { InputBlock } from '../Input/inputBlock';\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\nimport { PBRClearCoatConfiguration } from '../../../PBR/pbrClearCoatConfiguration';\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\n/**\r\n * Block used to implement the clear coat module of the PBR material\r\n */\n\nvar ClearCoatBlock =\n/** @class */\nfunction (_super) {\n  __extends(ClearCoatBlock, _super);\n  /**\r\n   * Create a new ClearCoatBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function ClearCoatBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n    /**\r\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\r\n     */\n\n\n    _this.remapF0OnInterfaceChange = true;\n    _this._isUnique = true;\n\n    _this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"normalMapColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"tintColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"tintAtDistance\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"tintThickness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n\n    _this.registerOutput(\"clearcoat\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"clearcoat\", _this, NodeMaterialConnectionPointDirection.Output, ClearCoatBlock, \"ClearCoatBlock\"));\n\n    return _this;\n  }\n  /**\r\n   * Initialize the block and prepare the context for build\r\n   * @param state defines the state that will be used for the build\r\n   */\n\n\n  ClearCoatBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"clearcoatOut\");\n\n    state._excludeVariableName(\"vClearCoatParams\");\n\n    state._excludeVariableName(\"vClearCoatTintParams\");\n\n    state._excludeVariableName(\"vClearCoatRefractionParams\");\n\n    state._excludeVariableName(\"vClearCoatTangentSpaceParams\");\n  };\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  ClearCoatBlock.prototype.getClassName = function () {\n    return \"ClearCoatBlock\";\n  };\n\n  Object.defineProperty(ClearCoatBlock.prototype, \"intensity\", {\n    /**\r\n     * Gets the intensity input component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"roughness\", {\n    /**\r\n     * Gets the roughness input component\r\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"indexOfRefraction\", {\n    /**\r\n     * Gets the ior input component\r\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"normalMapColor\", {\n    /**\r\n     * Gets the bump texture input component\r\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"uv\", {\n    /**\r\n     * Gets the uv input component\r\n     */\n    get: function get() {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"tintColor\", {\n    /**\r\n     * Gets the tint color input component\r\n     */\n    get: function get() {\n      return this._inputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"tintAtDistance\", {\n    /**\r\n     * Gets the tint \"at distance\" input component\r\n     */\n    get: function get() {\n      return this._inputs[6];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"tintThickness\", {\n    /**\r\n     * Gets the tint thickness input component\r\n     */\n    get: function get() {\n      return this._inputs[7];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"worldTangent\", {\n    /**\r\n     * Gets the world tangent input component\r\n     */\n    get: function get() {\n      return this._inputs[8];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ClearCoatBlock.prototype, \"clearcoat\", {\n    /**\r\n     * Gets the clear coat object output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ClearCoatBlock.prototype.autoConfigure = function (material) {\n    if (!this.intensity.isConnected) {\n      var intensityInput = new InputBlock(\"ClearCoat intensity\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n      intensityInput.value = 1;\n      intensityInput.output.connectTo(this.intensity);\n    }\n  };\n\n  ClearCoatBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    _super.prototype.prepareDefines.call(this, mesh, nodeMaterial, defines);\n\n    defines.setValue(\"CLEARCOAT\", true);\n    defines.setValue(\"CLEARCOAT_TEXTURE\", false, true);\n    defines.setValue(\"CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE\", true, true);\n    defines.setValue(\"CLEARCOAT_TINT\", this.tintColor.isConnected || this.tintThickness.isConnected || this.tintAtDistance.isConnected, true);\n    defines.setValue(\"CLEARCOAT_BUMP\", this.normalMapColor.isConnected, true);\n    defines.setValue(\"CLEARCOAT_DEFAULTIOR\", this.indexOfRefraction.isConnected ? this.indexOfRefraction.connectInputBlock.value === PBRClearCoatConfiguration._DefaultIndexOfRefraction : true, true);\n    defines.setValue(\"CLEARCOAT_REMAP_F0\", this.remapF0OnInterfaceChange, true);\n  };\n\n  ClearCoatBlock.prototype.bind = function (effect, nodeMaterial, mesh, subMesh) {\n    var _a, _b;\n\n    _super.prototype.bind.call(this, effect, nodeMaterial, mesh); // Clear Coat Refraction params\n\n\n    var indexOfRefraction = (_b = (_a = this.indexOfRefraction.connectInputBlock) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    var a = 1 - indexOfRefraction;\n    var b = 1 + indexOfRefraction;\n    var f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\n\n    var eta = 1 / indexOfRefraction;\n    effect.setFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b); // Clear Coat tangent space params\n\n    var mainPBRBlock = this.clearcoat.hasEndpoints ? this.clearcoat.endpoints[0].ownerBlock : null;\n    var perturbedNormalBlock = (mainPBRBlock === null || mainPBRBlock === void 0 ? void 0 : mainPBRBlock.perturbedNormal.isConnected) ? mainPBRBlock.perturbedNormal.connectedPoint.ownerBlock : null;\n\n    if (this._scene._mirroredCameraPosition) {\n      effect.setFloat2(\"vClearCoatTangentSpaceParams\", (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertX) ? 1.0 : -1.0, (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertY) ? 1.0 : -1.0);\n    } else {\n      effect.setFloat2(\"vClearCoatTangentSpaceParams\", (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertX) ? -1.0 : 1.0, (perturbedNormalBlock === null || perturbedNormalBlock === void 0 ? void 0 : perturbedNormalBlock.invertY) ? -1.0 : 1.0);\n    }\n  };\n\n  ClearCoatBlock.prototype._generateTBNSpace = function (state, worldPositionVarName, worldNormalVarName) {\n    var code = \"\";\n    var comments = \"//\" + this.name;\n    var worldTangent = this.worldTangent;\n\n    state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\n\n    var tangentReplaceString = {\n      search: /defined\\(TANGENT\\)/g,\n      replace: worldTangent.isConnected ? \"defined(TANGENT)\" : \"defined(IGNORE)\"\n    };\n\n    if (worldTangent.isConnected) {\n      code += \"vec3 tbnNormal = normalize(\" + worldNormalVarName + \".xyz);\\r\\n\";\n      code += \"vec3 tbnTangent = normalize(\" + worldTangent.associatedVariableName + \".xyz);\\r\\n\";\n      code += \"vec3 tbnBitangent = cross(tbnNormal, tbnTangent);\\r\\n\";\n      code += \"mat3 vTBN = mat3(tbnTangent, tbnBitangent, tbnNormal);\\r\\n\";\n    }\n\n    state._emitFunctionFromInclude(\"bumpFragmentMainFunctions\", comments, {\n      replaceStrings: [tangentReplaceString]\n    });\n\n    return code;\n  };\n  /**\r\n   * Gets the main code of the block (fragment side)\r\n   * @param state current state of the node material building\r\n   * @param ccBlock instance of a ClearCoatBlock or null if the code must be generated without an active clear coat module\r\n   * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\r\n   * @param worldPosVarName name of the variable holding the world position\r\n   * @param generateTBNSpace if true, the code needed to create the TBN coordinate space is generated\r\n   * @param vTBNAvailable indicate that the vTBN variable is already existing because it has already been generated by another block (PerturbNormal or Anisotropy)\r\n   * @param worldNormalVarName name of the variable holding the world normal\r\n   * @returns the shader code\r\n   */\n\n\n  ClearCoatBlock.GetCode = function (state, ccBlock, reflectionBlock, worldPosVarName, generateTBNSpace, vTBNAvailable, worldNormalVarName) {\n    var code = \"\";\n    var intensity = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.intensity.isConnected) ? ccBlock.intensity.associatedVariableName : \"1.\";\n    var roughness = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.roughness.isConnected) ? ccBlock.roughness.associatedVariableName : \"0.\";\n    var normalMapColor = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.normalMapColor.isConnected) ? ccBlock.normalMapColor.associatedVariableName : \"vec3(0.)\";\n    var uv = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.uv.isConnected) ? ccBlock.uv.associatedVariableName : \"vec2(0.)\";\n    var tintColor = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.tintColor.isConnected) ? ccBlock.tintColor.associatedVariableName : \"vec3(1.)\";\n    var tintThickness = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.tintThickness.isConnected) ? ccBlock.tintThickness.associatedVariableName : \"1.\";\n    var tintAtDistance = (ccBlock === null || ccBlock === void 0 ? void 0 : ccBlock.tintAtDistance.isConnected) ? ccBlock.tintAtDistance.associatedVariableName : \"1.\";\n    var tintTexture = \"vec4(0.)\";\n\n    if (ccBlock) {\n      state._emitUniformFromString(\"vClearCoatRefractionParams\", \"vec4\");\n\n      state._emitUniformFromString(\"vClearCoatTangentSpaceParams\", \"vec2\");\n    }\n\n    if (generateTBNSpace && ccBlock) {\n      code += ccBlock._generateTBNSpace(state, worldPosVarName, worldNormalVarName);\n      vTBNAvailable = ccBlock.worldTangent.isConnected;\n    }\n\n    code += \"clearcoatOutParams clearcoatOut;\\n\\n        #ifdef CLEARCOAT\\n            vec2 vClearCoatParams = vec2(\" + intensity + \", \" + roughness + \");\\n            vec4 vClearCoatTintParams = vec4(\" + tintColor + \", \" + tintThickness + \");\\n\\n            clearcoatBlock(\\n                \" + worldPosVarName + \".xyz,\\n                geometricNormalW,\\n                viewDirectionW,\\n                vClearCoatParams,\\n                specularEnvironmentR0,\\n            #ifdef CLEARCOAT_TEXTURE\\n                vec2(0.),\\n            #endif\\n            #ifdef CLEARCOAT_TINT\\n                vClearCoatTintParams,\\n                \" + tintAtDistance + \",\\n                vClearCoatRefractionParams,\\n                #ifdef CLEARCOAT_TINT_TEXTURE\\n                    \" + tintTexture + \",\\n                #endif\\n            #endif\\n            #ifdef CLEARCOAT_BUMP\\n                vec2(0., 1.),\\n                vec4(\" + normalMapColor + \", 0.),\\n                \" + uv + \",\\n                #if defined(\" + (vTBNAvailable ? \"TANGENT\" : \"IGNORE\") + \") && defined(NORMAL)\\n                    vTBN,\\n                #else\\n                    vClearCoatTangentSpaceParams,\\n                #endif\\n                #ifdef OBJECTSPACE_NORMALMAP\\n                    normalMatrix,\\n                #endif\\n            #endif\\n            #if defined(FORCENORMALFORWARD) && defined(NORMAL)\\n                faceNormal,\\n            #endif\\n            #ifdef REFLECTION\\n                \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionMicrosurfaceInfosName) + \",\\n                \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionInfosName) + \",\\n                \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock.reflectionColor) + \",\\n                vLightingIntensity,\\n                #ifdef \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) + \"\\n                    \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName) + \",\\n                #else\\n                    \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName) + \",\\n                #endif\\n                #ifndef LODBASEDMICROSFURACE\\n                    #ifdef \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) + \"\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName) + \",\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName) + \",\\n                    #else\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName) + \",\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName) + \",\\n                    #endif\\n                #endif\\n            #endif\\n            #if defined(ENVIRONMENTBRDF) && !defined(\" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) + \")\\n                #ifdef RADIANCEOCCLUSION\\n                    ambientMonochrome,\\n                #endif\\n            #endif\\n                clearcoatOut\\n            );\\n        #else\\n            clearcoatOut.specularEnvironmentR0 = specularEnvironmentR0;\\n        #endif\\r\\n\";\n    return code;\n  };\n\n  ClearCoatBlock.prototype._buildBlock = function (state) {\n    this._scene = state.sharedData.scene;\n\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.bindableBlocks.push(this);\n      state.sharedData.blocksWithDefines.push(this);\n    }\n\n    return this;\n  };\n\n  ClearCoatBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = \"\";\n    codeString += this._codeVariableName + \".remapF0OnInterfaceChange = \" + this.remapF0OnInterfaceChange + \";\\r\\n\";\n    return codeString;\n  };\n\n  ClearCoatBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.remapF0OnInterfaceChange = this.remapF0OnInterfaceChange;\n    return serializationObject;\n  };\n\n  ClearCoatBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    var _a;\n\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.remapF0OnInterfaceChange = (_a = serializationObject.remapF0OnInterfaceChange) !== null && _a !== void 0 ? _a : true;\n  };\n\n  __decorate([editableInPropertyPage(\"Remap F0 on interface change\", PropertyTypeForEdition.Boolean, \"ADVANCED\")], ClearCoatBlock.prototype, \"remapF0OnInterfaceChange\", void 0);\n\n  return ClearCoatBlock;\n}(NodeMaterialBlock);\n\nexport { ClearCoatBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.ClearCoatBlock\"] = ClearCoatBlock;","map":null,"metadata":{},"sourceType":"module"}