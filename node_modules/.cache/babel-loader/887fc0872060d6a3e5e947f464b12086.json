{"ast":null,"code":"/**\r\n * Size containing widht and height\r\n */\nvar Size =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a Size object from the given width and height (floats).\r\n   * @param width width of the new size\r\n   * @param height height of the new size\r\n   */\n  function Size(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n  /**\r\n   * Returns a string with the Size width and height\r\n   * @returns a string with the Size width and height\r\n   */\n\n\n  Size.prototype.toString = function () {\n    return \"{W: \" + this.width + \", H: \" + this.height + \"}\";\n  };\n  /**\r\n   * \"Size\"\r\n   * @returns the string \"Size\"\r\n   */\n\n\n  Size.prototype.getClassName = function () {\n    return \"Size\";\n  };\n  /**\r\n   * Returns the Size hash code.\r\n   * @returns a hash code for a unique width and height\r\n   */\n\n\n  Size.prototype.getHashCode = function () {\n    var hash = this.width | 0;\n    hash = hash * 397 ^ (this.height | 0);\n    return hash;\n  };\n  /**\r\n   * Updates the current size from the given one.\r\n   * @param src the given size\r\n   */\n\n\n  Size.prototype.copyFrom = function (src) {\n    this.width = src.width;\n    this.height = src.height;\n  };\n  /**\r\n   * Updates in place the current Size from the given floats.\r\n   * @param width width of the new size\r\n   * @param height height of the new size\r\n   * @returns the updated Size.\r\n   */\n\n\n  Size.prototype.copyFromFloats = function (width, height) {\n    this.width = width;\n    this.height = height;\n    return this;\n  };\n  /**\r\n   * Updates in place the current Size from the given floats.\r\n   * @param width width to set\r\n   * @param height height to set\r\n   * @returns the updated Size.\r\n   */\n\n\n  Size.prototype.set = function (width, height) {\n    return this.copyFromFloats(width, height);\n  };\n  /**\r\n   * Multiplies the width and height by numbers\r\n   * @param w factor to multiple the width by\r\n   * @param h factor to multiple the height by\r\n   * @returns a new Size set with the multiplication result of the current Size and the given floats.\r\n   */\n\n\n  Size.prototype.multiplyByFloats = function (w, h) {\n    return new Size(this.width * w, this.height * h);\n  };\n  /**\r\n   * Clones the size\r\n   * @returns a new Size copied from the given one.\r\n   */\n\n\n  Size.prototype.clone = function () {\n    return new Size(this.width, this.height);\n  };\n  /**\r\n   * True if the current Size and the given one width and height are strictly equal.\r\n   * @param other the other size to compare against\r\n   * @returns True if the current Size and the given one width and height are strictly equal.\r\n   */\n\n\n  Size.prototype.equals = function (other) {\n    if (!other) {\n      return false;\n    }\n\n    return this.width === other.width && this.height === other.height;\n  };\n\n  Object.defineProperty(Size.prototype, \"surface\", {\n    /**\r\n     * The surface of the Size : width * height (float).\r\n     */\n    get: function get() {\n      return this.width * this.height;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Create a new size of zero\r\n   * @returns a new Size set to (0.0, 0.0)\r\n   */\n\n  Size.Zero = function () {\n    return new Size(0.0, 0.0);\n  };\n  /**\r\n   * Sums the width and height of two sizes\r\n   * @param otherSize size to add to this size\r\n   * @returns a new Size set as the addition result of the current Size and the given one.\r\n   */\n\n\n  Size.prototype.add = function (otherSize) {\n    var r = new Size(this.width + otherSize.width, this.height + otherSize.height);\n    return r;\n  };\n  /**\r\n   * Subtracts the width and height of two\r\n   * @param otherSize size to subtract to this size\r\n   * @returns a new Size set as the subtraction result of  the given one from the current Size.\r\n   */\n\n\n  Size.prototype.subtract = function (otherSize) {\n    var r = new Size(this.width - otherSize.width, this.height - otherSize.height);\n    return r;\n  };\n  /**\r\n   * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n   * @param start starting size to lerp between\r\n   * @param end end size to lerp between\r\n   * @param amount amount to lerp between the start and end values\r\n   * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\r\n   */\n\n\n  Size.Lerp = function (start, end, amount) {\n    var w = start.width + (end.width - start.width) * amount;\n    var h = start.height + (end.height - start.height) * amount;\n    return new Size(w, h);\n  };\n\n  return Size;\n}();\n\nexport { Size };","map":null,"metadata":{},"sourceType":"module"}