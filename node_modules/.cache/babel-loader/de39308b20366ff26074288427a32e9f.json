{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\nimport { Tools } from '../../Misc/tools';\n/**\r\n * Manage the mouse wheel inputs to control a follow camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar FollowCameraMouseWheelInput =\n/** @class */\nfunction () {\n  function FollowCameraMouseWheelInput() {\n    /**\r\n     * Moue wheel controls zoom. (Mouse wheel modifies camera.radius value.)\r\n     */\n    this.axisControlRadius = true;\n    /**\r\n     * Moue wheel controls height. (Mouse wheel modifies camera.heightOffset value.)\r\n     */\n\n    this.axisControlHeight = false;\n    /**\r\n     * Moue wheel controls angle. (Mouse wheel modifies camera.rotationOffset value.)\r\n     */\n\n    this.axisControlRotation = false;\n    /**\r\n     * Gets or Set the mouse wheel precision or how fast is the camera moves in\r\n     * relation to mouseWheel events.\r\n     */\n\n    this.wheelPrecision = 3.0;\n    /**\r\n     * wheelDeltaPercentage will be used instead of wheelPrecision if different from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when wheel is used.\r\n     */\n\n    this.wheelDeltaPercentage = 0;\n  }\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  FollowCameraMouseWheelInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this;\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    this._wheel = function (p, s) {\n      // sanity check - this should be a PointerWheel event.\n      if (p.type !== PointerEventTypes.POINTERWHEEL) {\n        return;\n      }\n\n      var event = p.event;\n      var delta = 0; // Chrome, Safari: event.deltaY\n      // IE: event.wheelDelta\n      // Firefox: event.detail (inverted)\n\n      var wheelDelta = Math.max(-1, Math.min(1, event.deltaY || event.wheelDelta || -event.detail));\n\n      if (_this.wheelDeltaPercentage) {\n        console.assert(_this.axisControlRadius + _this.axisControlHeight + _this.axisControlRotation <= 1, \"wheelDeltaPercentage only usable when mouse wheel \" + \"controlls ONE axis. \" + \"Currently enabled: \" + \"axisControlRadius: \" + _this.axisControlRadius + \", axisControlHeightOffset: \" + _this.axisControlHeight + \", axisControlRotationOffset: \" + _this.axisControlRotation);\n\n        if (_this.axisControlRadius) {\n          delta = wheelDelta * 0.01 * _this.wheelDeltaPercentage * _this.camera.radius;\n        } else if (_this.axisControlHeight) {\n          delta = wheelDelta * 0.01 * _this.wheelDeltaPercentage * _this.camera.heightOffset;\n        } else if (_this.axisControlRotation) {\n          delta = wheelDelta * 0.01 * _this.wheelDeltaPercentage * _this.camera.rotationOffset;\n        }\n      } else {\n        delta = wheelDelta * _this.wheelPrecision;\n      }\n\n      if (delta) {\n        if (_this.axisControlRadius) {\n          _this.camera.radius += delta;\n        } else if (_this.axisControlHeight) {\n          _this.camera.heightOffset -= delta;\n        } else if (_this.axisControlRotation) {\n          _this.camera.rotationOffset -= delta;\n        }\n      }\n\n      if (event.preventDefault) {\n        if (!noPreventDefault) {\n          event.preventDefault();\n        }\n      }\n    };\n\n    this._observer = this.camera.getScene().onPointerObservable.add(this._wheel, PointerEventTypes.POINTERWHEEL);\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  FollowCameraMouseWheelInput.prototype.detachControl = function (ignored) {\n    if (this._observer) {\n      this.camera.getScene().onPointerObservable.remove(this._observer);\n      this._observer = null;\n      this._wheel = null;\n    }\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  FollowCameraMouseWheelInput.prototype.getClassName = function () {\n    return \"ArcRotateCameraMouseWheelInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  FollowCameraMouseWheelInput.prototype.getSimpleName = function () {\n    return \"mousewheel\";\n  };\n\n  __decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"axisControlRadius\", void 0);\n\n  __decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"axisControlHeight\", void 0);\n\n  __decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"axisControlRotation\", void 0);\n\n  __decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"wheelPrecision\", void 0);\n\n  __decorate([serialize()], FollowCameraMouseWheelInput.prototype, \"wheelDeltaPercentage\", void 0);\n\n  return FollowCameraMouseWheelInput;\n}();\n\nexport { FollowCameraMouseWheelInput };\nCameraInputTypes[\"FollowCameraMouseWheelInput\"] = FollowCameraMouseWheelInput;","map":null,"metadata":{},"sourceType":"module"}