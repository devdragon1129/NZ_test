{"ast":null,"code":"import { Vector3 } from \"../Maths/math.vector\";\nimport { Mesh } from \"../Meshes/mesh\";\nimport \"../Meshes/Builders/linesBuilder\";\n/**\r\n * As raycast might be hard to debug, the RayHelper can help rendering the different rays\r\n * in order to better appreciate the issue one might have.\r\n * @see https://doc.babylonjs.com/babylon101/raycasts#debugging\r\n */\n\nvar RayHelper =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiate a new ray helper.\r\n   * As raycast might be hard to debug, the RayHelper can help rendering the different rays\r\n   * in order to better appreciate the issue one might have.\r\n   * @see https://doc.babylonjs.com/babylon101/raycasts#debugging\r\n   * @param ray Defines the ray we are currently tryin to visualize\r\n   */\n  function RayHelper(ray) {\n    this.ray = ray;\n  }\n  /**\r\n   * Helper function to create a colored helper in a scene in one line.\r\n   * @param ray Defines the ray we are currently tryin to visualize\r\n   * @param scene Defines the scene the ray is used in\r\n   * @param color Defines the color we want to see the ray in\r\n   * @returns The newly created ray helper.\r\n   */\n\n\n  RayHelper.CreateAndShow = function (ray, scene, color) {\n    var helper = new RayHelper(ray);\n    helper.show(scene, color);\n    return helper;\n  };\n  /**\r\n   * Shows the ray we are willing to debug.\r\n   * @param scene Defines the scene the ray needs to be rendered in\r\n   * @param color Defines the color the ray needs to be rendered in\r\n   */\n\n\n  RayHelper.prototype.show = function (scene, color) {\n    if (!this._renderFunction && this.ray) {\n      var ray = this.ray;\n      this._renderFunction = this._render.bind(this);\n      this._scene = scene;\n      this._renderPoints = [ray.origin, ray.origin.add(ray.direction.scale(ray.length))];\n      this._renderLine = Mesh.CreateLines(\"ray\", this._renderPoints, scene, true);\n      this._renderLine.isPickable = false;\n\n      if (this._renderFunction) {\n        this._scene.registerBeforeRender(this._renderFunction);\n      }\n    }\n\n    if (color && this._renderLine) {\n      this._renderLine.color.copyFrom(color);\n    }\n  };\n  /**\r\n   * Hides the ray we are debugging.\r\n   */\n\n\n  RayHelper.prototype.hide = function () {\n    if (this._renderFunction && this._scene) {\n      this._scene.unregisterBeforeRender(this._renderFunction);\n\n      this._scene = null;\n      this._renderFunction = null;\n\n      if (this._renderLine) {\n        this._renderLine.dispose();\n\n        this._renderLine = null;\n      }\n\n      this._renderPoints = [];\n    }\n  };\n\n  RayHelper.prototype._render = function () {\n    var ray = this.ray;\n\n    if (!ray) {\n      return;\n    }\n\n    var point = this._renderPoints[1];\n    var len = Math.min(ray.length, 1000000);\n    point.copyFrom(ray.direction);\n    point.scaleInPlace(len);\n    point.addInPlace(ray.origin);\n\n    this._renderPoints[0].copyFrom(ray.origin);\n\n    Mesh.CreateLines(\"ray\", this._renderPoints, this._scene, true, this._renderLine);\n  };\n  /**\r\n   * Attach a ray helper to a mesh so that we can easily see its orientation for instance or information like its normals.\r\n   * @param mesh Defines the mesh we want the helper attached to\r\n   * @param meshSpaceDirection Defines the direction of the Ray in mesh space (local space of the mesh node)\r\n   * @param meshSpaceOrigin Defines the origin of the Ray in mesh space (local space of the mesh node)\r\n   * @param length Defines the length of the ray\r\n   */\n\n\n  RayHelper.prototype.attachToMesh = function (mesh, meshSpaceDirection, meshSpaceOrigin, length) {\n    var _this = this;\n\n    this._attachedToMesh = mesh;\n    var ray = this.ray;\n\n    if (!ray) {\n      return;\n    }\n\n    if (!ray.direction) {\n      ray.direction = Vector3.Zero();\n    }\n\n    if (!ray.origin) {\n      ray.origin = Vector3.Zero();\n    }\n\n    if (length) {\n      ray.length = length;\n    }\n\n    if (!meshSpaceOrigin) {\n      meshSpaceOrigin = Vector3.Zero();\n    }\n\n    if (!meshSpaceDirection) {\n      // -1 so that this will work with Mesh.lookAt\n      meshSpaceDirection = new Vector3(0, 0, -1);\n    }\n\n    if (!this._scene) {\n      this._scene = mesh.getScene();\n    }\n\n    if (!this._meshSpaceDirection) {\n      this._meshSpaceDirection = meshSpaceDirection.clone();\n      this._meshSpaceOrigin = meshSpaceOrigin.clone();\n    } else {\n      this._meshSpaceDirection.copyFrom(meshSpaceDirection);\n\n      this._meshSpaceOrigin.copyFrom(meshSpaceOrigin);\n    }\n\n    if (!this._onAfterRenderObserver) {\n      this._onAfterRenderObserver = this._scene.onBeforeRenderObservable.add(function () {\n        return _this._updateToMesh();\n      });\n      this._onAfterStepObserver = this._scene.onAfterStepObservable.add(function () {\n        return _this._updateToMesh();\n      });\n    } // force world matrix computation before the first ray helper computation\n\n\n    this._attachedToMesh.computeWorldMatrix(true);\n\n    this._updateToMesh();\n  };\n  /**\r\n   * Detach the ray helper from the mesh it has previously been attached to.\r\n   */\n\n\n  RayHelper.prototype.detachFromMesh = function () {\n    if (this._attachedToMesh && this._scene) {\n      if (this._onAfterRenderObserver) {\n        this._scene.onBeforeRenderObservable.remove(this._onAfterRenderObserver);\n\n        this._scene.onAfterStepObservable.remove(this._onAfterStepObserver);\n      }\n\n      this._attachedToMesh = null;\n      this._onAfterRenderObserver = null;\n      this._onAfterStepObserver = null;\n      this._scene = null;\n    }\n  };\n\n  RayHelper.prototype._updateToMesh = function () {\n    var ray = this.ray;\n\n    if (!this._attachedToMesh || !ray) {\n      return;\n    }\n\n    if (this._attachedToMesh._isDisposed) {\n      this.detachFromMesh();\n      return;\n    }\n\n    this._attachedToMesh.getDirectionToRef(this._meshSpaceDirection, ray.direction);\n\n    Vector3.TransformCoordinatesToRef(this._meshSpaceOrigin, this._attachedToMesh.getWorldMatrix(), ray.origin);\n  };\n  /**\r\n   * Dispose the helper and release its associated resources.\r\n   */\n\n\n  RayHelper.prototype.dispose = function () {\n    this.hide();\n    this.detachFromMesh();\n    this.ray = null;\n  };\n\n  return RayHelper;\n}();\n\nexport { RayHelper };","map":null,"metadata":{},"sourceType":"module"}