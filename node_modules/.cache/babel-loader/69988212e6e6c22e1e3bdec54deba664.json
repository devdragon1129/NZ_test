{"ast":null,"code":"import { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { locations } from 'routing/locations';\nimport { likePoolRequest } from 'modules/pool/actions';\nimport { loadPublicProjectRequest } from 'modules/project/actions';\nimport { isFetching, getCurrentPublicProject, getCurrentPool } from 'modules/pool/selectors';\nimport { isPreviewing, isReady, isLoading } from 'modules/editor/selectors';\nimport { isLoggedIn } from 'modules/identity/selectors';\nimport { getCurrentScene } from 'modules/scene/selectors';\nimport { getCurrentAuthor } from 'modules/profile/selectors';\nimport { togglePreview, closeEditor } from 'modules/editor/actions';\nimport { openModal } from 'modules/modal/actions';\nimport { PreviewType } from 'modules/editor/types';\nimport SceneViewPage from './SceneViewPage';\n\nvar mapState = function mapState(state) {\n  return {\n    isPreviewing: isPreviewing(state),\n    isReady: !isLoading(state) && isReady(state),\n    isFetching: isFetching(state) && !isReady(state),\n    isLoggedIn: isLoggedIn(state),\n    currentProject: getCurrentPublicProject(state),\n    currentPool: getCurrentPool(state),\n    currentScene: getCurrentScene(state),\n    currentAuthor: getCurrentAuthor(state)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onLikePool: function onLikePool(id) {\n      var like = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return dispatch(likePoolRequest(id, like));\n    },\n    onPreview: function onPreview() {\n      return dispatch(togglePreview(true));\n    },\n    onCloseEditor: function onCloseEditor() {\n      return dispatch(closeEditor());\n    },\n    onLoadProject: function onLoadProject(id) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PreviewType.PUBLIC;\n      return dispatch(loadPublicProjectRequest(id, type));\n    },\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    },\n    onBack: function onBack() {\n      return dispatch(push(locations.poolSearch()));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(SceneViewPage);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/SceneViewPage/SceneViewPage.container.ts"],"names":["connect","push","locations","likePoolRequest","loadPublicProjectRequest","isFetching","getCurrentPublicProject","getCurrentPool","isPreviewing","isReady","isLoading","isLoggedIn","getCurrentScene","getCurrentAuthor","togglePreview","closeEditor","openModal","PreviewType","SceneViewPage","mapState","state","currentProject","currentPool","currentScene","currentAuthor","mapDispatch","dispatch","onLikePool","id","like","onPreview","onCloseEditor","onLoadProject","type","PUBLIC","onOpenModal","name","metadata","onBack","poolSearch"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,wBAArB;AAEA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,wBAAT,QAAyC,yBAAzC;AACA,SAASC,UAAT,EAAqBC,uBAArB,EAA8CC,cAA9C,QAAoE,wBAApE;AACA,SAASC,YAAT,EAAuBC,OAAvB,EAAgCC,SAAhC,QAAiD,0BAAjD;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,wBAA3C;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAsC;AACrDZ,IAAAA,YAAY,EAAEA,YAAY,CAACY,KAAD,CAD2B;AAErDX,IAAAA,OAAO,EAAE,CAACC,SAAS,CAACU,KAAD,CAAV,IAAqBX,OAAO,CAACW,KAAD,CAFgB;AAGrDf,IAAAA,UAAU,EAAEA,UAAU,CAACe,KAAD,CAAV,IAAqB,CAACX,OAAO,CAACW,KAAD,CAHY;AAIrDT,IAAAA,UAAU,EAAEA,UAAU,CAACS,KAAD,CAJ+B;AAKrDC,IAAAA,cAAc,EAAEf,uBAAuB,CAACc,KAAD,CALc;AAMrDE,IAAAA,WAAW,EAAEf,cAAc,CAACa,KAAD,CAN0B;AAOrDG,IAAAA,YAAY,EAAEX,eAAe,CAACQ,KAAD,CAPwB;AAQrDI,IAAAA,aAAa,EAAEX,gBAAgB,CAACO,KAAD;AARsB,GAAtC;AAAA,CAAjB;;AAWA,IAAMK,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,UAAU,EAAE,oBAACC,EAAD;AAAA,UAAaC,IAAb,uEAA6B,IAA7B;AAAA,aAAsCH,QAAQ,CAACvB,eAAe,CAACyB,EAAD,EAAKC,IAAL,CAAhB,CAA9C;AAAA,KADoD;AAEhEC,IAAAA,SAAS,EAAE;AAAA,aAAMJ,QAAQ,CAACZ,aAAa,CAAC,IAAD,CAAd,CAAd;AAAA,KAFqD;AAGhEiB,IAAAA,aAAa,EAAE;AAAA,aAAML,QAAQ,CAACX,WAAW,EAAZ,CAAd;AAAA,KAHiD;AAIhEiB,IAAAA,aAAa,EAAE,uBAACJ,EAAD;AAAA,UAAaK,IAAb,uEAA2DhB,WAAW,CAACiB,MAAvE;AAAA,aACbR,QAAQ,CAACtB,wBAAwB,CAACwB,EAAD,EAAKK,IAAL,CAAzB,CADK;AAAA,KAJiD;AAMhEE,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,QAAP;AAAA,aAAoBX,QAAQ,CAACV,SAAS,CAACoB,IAAD,EAAOC,QAAP,CAAV,CAA5B;AAAA,KANmD;AAOhEC,IAAAA,MAAM,EAAE;AAAA,aAAMZ,QAAQ,CAACzB,IAAI,CAACC,SAAS,CAACqC,UAAV,EAAD,CAAL,CAAd;AAAA;AAPwD,GAA9C;AAAA,CAApB;;AAUA,eAAevC,OAAO,CAACmB,QAAD,EAAWM,WAAX,CAAP,CAA+BP,aAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { push } from 'connected-react-router'\n\nimport { locations } from 'routing/locations'\nimport { RootState } from 'modules/common/types'\nimport { likePoolRequest } from 'modules/pool/actions'\nimport { loadPublicProjectRequest } from 'modules/project/actions'\nimport { isFetching, getCurrentPublicProject, getCurrentPool } from 'modules/pool/selectors'\nimport { isPreviewing, isReady, isLoading } from 'modules/editor/selectors'\nimport { isLoggedIn } from 'modules/identity/selectors'\nimport { getCurrentScene } from 'modules/scene/selectors'\nimport { getCurrentAuthor } from 'modules/profile/selectors'\nimport { togglePreview, closeEditor } from 'modules/editor/actions'\nimport { openModal } from 'modules/modal/actions'\nimport { PreviewType } from 'modules/editor/types'\nimport { MapStateProps, MapDispatch, MapDispatchProps } from './SceneViewPage.types'\nimport SceneViewPage from './SceneViewPage'\n\nconst mapState = (state: RootState): MapStateProps => ({\n  isPreviewing: isPreviewing(state),\n  isReady: !isLoading(state) && isReady(state),\n  isFetching: isFetching(state) && !isReady(state),\n  isLoggedIn: isLoggedIn(state),\n  currentProject: getCurrentPublicProject(state),\n  currentPool: getCurrentPool(state),\n  currentScene: getCurrentScene(state),\n  currentAuthor: getCurrentAuthor(state)\n})\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onLikePool: (id: string, like: boolean = true) => dispatch(likePoolRequest(id, like)),\n  onPreview: () => dispatch(togglePreview(true)),\n  onCloseEditor: () => dispatch(closeEditor()),\n  onLoadProject: (id: string, type: PreviewType.PUBLIC | PreviewType.POOL = PreviewType.PUBLIC) =>\n    dispatch(loadPublicProjectRequest(id, type)),\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata)),\n  onBack: () => dispatch(push(locations.poolSearch()))\n})\n\nexport default connect(mapState, mapDispatch)(SceneViewPage)\n"]},"metadata":{},"sourceType":"module"}