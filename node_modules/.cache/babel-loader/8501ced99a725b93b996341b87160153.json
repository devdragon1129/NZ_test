{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(modalSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleLocationChange),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleCloseAllModals);\n\nimport { LOCATION_CHANGE } from 'connected-react-router';\nimport { delay, put, select, takeEvery } from 'redux-saga/effects';\nimport { getOpenModals } from 'decentraland-dapps/dist/modules/modal/selectors';\nimport { RESET_ITEM_SUCCESS, SAVE_ITEM_SUCCESS, SET_PRICE_AND_BENEFICIARY_SUCCESS } from 'modules/item/actions';\nimport { closeAllModals } from './actions';\nimport { PUSH_COLLECTION_CURATION_SUCCESS } from 'modules/curations/collectionCuration/actions';\nimport { EXPORT_PROJECT_SUCCESS } from 'modules/project/actions';\nexport function modalSaga() {\n  return _regeneratorRuntime.wrap(function modalSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeEvery(LOCATION_CHANGE, handleLocationChange);\n\n        case 2:\n          _context.next = 4;\n          return takeEvery([SAVE_ITEM_SUCCESS, PUSH_COLLECTION_CURATION_SUCCESS, RESET_ITEM_SUCCESS, SET_PRICE_AND_BENEFICIARY_SUCCESS, EXPORT_PROJECT_SUCCESS], handleCloseAllModals);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction handleLocationChange() {\n  var openModals;\n  return _regeneratorRuntime.wrap(function handleLocationChange$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return select(getOpenModals);\n\n        case 2:\n          openModals = _context2.sent;\n\n          if (!(Object.keys(openModals).length > 0)) {\n            _context2.next = 8;\n            break;\n          }\n\n          _context2.next = 6;\n          return delay(100);\n\n        case 6:\n          _context2.next = 8;\n          return handleCloseAllModals();\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction handleCloseAllModals() {\n  return _regeneratorRuntime.wrap(function handleCloseAllModals$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return put(closeAllModals());\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/modal/sagas.ts"],"names":["modalSaga","handleLocationChange","handleCloseAllModals","LOCATION_CHANGE","delay","put","select","takeEvery","getOpenModals","RESET_ITEM_SUCCESS","SAVE_ITEM_SUCCESS","SET_PRICE_AND_BENEFICIARY_SUCCESS","closeAllModals","PUSH_COLLECTION_CURATION_SUCCESS","EXPORT_PROJECT_SUCCESS","openModals","Object","keys","length"],"mappings":";;oDASiBA,S;qDAQPC,oB;qDAQAC,oB;;AAzBV,SAASC,eAAT,QAAgC,wBAAhC;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,MAArB,EAA6BC,SAA7B,QAA8C,oBAA9C;AAEA,SAASC,aAAT,QAA8B,iDAA9B;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,EAAgDC,iCAAhD,QAAyF,sBAAzF;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,gCAAT,QAAiD,8CAAjD;AACA,SAASC,sBAAT,QAAuC,yBAAvC;AAEA,OAAO,SAAUd,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMO,SAAS,CAACJ,eAAD,EAAkBF,oBAAlB,CAAf;;AADK;AAAA;AAEL,iBAAMM,SAAS,CACb,CAACG,iBAAD,EAAoBG,gCAApB,EAAsDJ,kBAAtD,EAA0EE,iCAA1E,EAA6GG,sBAA7G,CADa,EAEbZ,oBAFa,CAAf;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQP,SAAUD,oBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACiC,iBAAMK,MAAM,CAACE,aAAD,CAAZ;;AADjC;AACQO,UAAAA,UADR;;AAAA,gBAEMC,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,MAAxB,GAAiC,CAFvC;AAAA;AAAA;AAAA;;AAAA;AAGI,iBAAMd,KAAK,CAAC,GAAD,CAAX;;AAHJ;AAAA;AAII,iBAAMF,oBAAoB,EAA1B;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAUA,oBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMG,GAAG,CAACO,cAAc,EAAf,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { LOCATION_CHANGE } from 'connected-react-router'\nimport { delay, put, select, takeEvery } from 'redux-saga/effects'\nimport { ModalState } from 'decentraland-dapps/dist/modules/modal/reducer'\nimport { getOpenModals } from 'decentraland-dapps/dist/modules/modal/selectors'\nimport { RESET_ITEM_SUCCESS, SAVE_ITEM_SUCCESS, SET_PRICE_AND_BENEFICIARY_SUCCESS } from 'modules/item/actions'\nimport { closeAllModals } from './actions'\nimport { PUSH_COLLECTION_CURATION_SUCCESS } from 'modules/curations/collectionCuration/actions'\nimport { EXPORT_PROJECT_SUCCESS } from 'modules/project/actions'\n\nexport function* modalSaga() {\n  yield takeEvery(LOCATION_CHANGE, handleLocationChange)\n  yield takeEvery(\n    [SAVE_ITEM_SUCCESS, PUSH_COLLECTION_CURATION_SUCCESS, RESET_ITEM_SUCCESS, SET_PRICE_AND_BENEFICIARY_SUCCESS, EXPORT_PROJECT_SUCCESS],\n    handleCloseAllModals\n  )\n}\n\nfunction* handleLocationChange() {\n  const openModals: ModalState = yield select(getOpenModals)\n  if (Object.keys(openModals).length > 0) {\n    yield delay(100)\n    yield handleCloseAllModals()\n  }\n}\n\nfunction* handleCloseAllModals() {\n  yield put(closeAllModals())\n}\n"]},"metadata":{},"sourceType":"module"}