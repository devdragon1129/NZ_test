{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProviderChainId = exports.getAddEthereumChainParameters = exports.sendTransaction = exports.transactionEvents = exports.TransactionEventType = exports.getTargetNetworkProvider = exports.buildWallet = exports.fetchManaBalance = exports.setTransactionsApiUrl = exports.getTransactionsApiUrl = void 0;\n\nvar events_1 = require(\"events\");\n\nvar ethers_1 = require(\"ethers\");\n\nvar eth_1 = require(\"web3x/eth\");\n\nvar decentraland_transactions_1 = require(\"decentraland-transactions\");\n\nvar chain_id_1 = require(\"@dcl/schemas/dist/dapps/chain-id\");\n\nvar eth_2 = require(\"../../lib/eth\");\n\nvar chainConfiguration_1 = require(\"../../lib/chainConfiguration\");\n\nvar TRANSACTIONS_API_URL = 'https://transactions-api.decentraland.co/v1';\n\nvar getTransactionsApiUrl = function getTransactionsApiUrl() {\n  return TRANSACTIONS_API_URL;\n};\n\nexports.getTransactionsApiUrl = getTransactionsApiUrl;\n\nvar setTransactionsApiUrl = function setTransactionsApiUrl(url) {\n  return TRANSACTIONS_API_URL = url;\n};\n\nexports.setTransactionsApiUrl = setTransactionsApiUrl;\n\nfunction fetchManaBalance(chainId, address) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var provider, contract, mana, balance;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return eth_2.getNetworkProvider(chainId);\n\n          case 3:\n            provider = _context.sent;\n            contract = decentraland_transactions_1.getContract(decentraland_transactions_1.ContractName.MANAToken, chainId);\n            mana = new ethers_1.Contract(contract.address, contract.abi, new ethers_1.providers.Web3Provider(provider));\n            _context.next = 8;\n            return mana.balanceOf(address);\n\n          case 8:\n            balance = _context.sent;\n            return _context.abrupt(\"return\", parseFloat(ethers_1.utils.formatEther(balance)));\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", 0);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 12]]);\n  }));\n}\n\nexports.fetchManaBalance = fetchManaBalance;\n\nfunction buildWallet() {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var provider, eth, accounts, address, chainId, chainConfig, expectedChainId, expectedChainConfig, networks, _i, _Object$keys, network, networkChainId;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return eth_2.getConnectedProvider();\n\n          case 2:\n            provider = _context2.sent;\n\n            if (provider) {\n              _context2.next = 5;\n              break;\n            }\n\n            throw new Error('Could not connect to Ethereum');\n\n          case 5:\n            eth = new eth_1.Eth(provider);\n            _context2.next = 8;\n            return eth.getAccounts();\n\n          case 8:\n            accounts = _context2.sent;\n\n            if (!(accounts.length === 0)) {\n              _context2.next = 11;\n              break;\n            }\n\n            throw new Error('Could not get address');\n\n          case 11:\n            address = accounts[0].toString();\n            _context2.next = 14;\n            return eth.getId();\n\n          case 14:\n            chainId = _context2.sent;\n            chainConfig = chainConfiguration_1.getChainConfiguration(chainId);\n            expectedChainId = eth_2.getConnectedProviderChainId();\n            expectedChainConfig = chainConfiguration_1.getChainConfiguration(expectedChainId);\n            networks = {};\n            _i = 0, _Object$keys = Object.keys(expectedChainConfig.networkMapping);\n\n          case 20:\n            if (!(_i < _Object$keys.length)) {\n              _context2.next = 31;\n              break;\n            }\n\n            network = _Object$keys[_i];\n            networkChainId = expectedChainConfig.networkMapping[network];\n            _context2.t0 = networkChainId;\n            _context2.next = 26;\n            return fetchManaBalance(networkChainId, address);\n\n          case 26:\n            _context2.t1 = _context2.sent;\n            networks[network] = {\n              chainId: _context2.t0,\n              mana: _context2.t1\n            };\n\n          case 28:\n            _i++;\n            _context2.next = 20;\n            break;\n\n          case 31:\n            return _context2.abrupt(\"return\", {\n              address: address.toLowerCase(),\n              providerType: eth_2.getConnectedProviderType(),\n              networks: networks,\n              network: chainConfig.network,\n              chainId: chainId\n            });\n\n          case 32:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nexports.buildWallet = buildWallet;\n\nfunction getTargetNetworkProvider(chainId) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var networkProvider;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return eth_2.getNetworkProvider(chainId);\n\n          case 2:\n            networkProvider = _context3.sent;\n            return _context3.abrupt(\"return\", new ethers_1.providers.Web3Provider(networkProvider));\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\n\nexports.getTargetNetworkProvider = getTargetNetworkProvider;\nvar TransactionEventType;\n\n(function (TransactionEventType) {\n  TransactionEventType[\"ERROR\"] = \"error\";\n  TransactionEventType[\"SUCCESS\"] = \"success\";\n})(TransactionEventType = exports.TransactionEventType || (exports.TransactionEventType = {}));\n\nexports.transactionEvents = new events_1.EventEmitter();\n\nfunction sendTransaction() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var contract, contractMethodNameOrGetPopulatedTransaction, contractArguments, _contractInstance$pop, connectedProvider, chainId, targetNetworkProvider, contractInstance, unsignedTx, signer, tx, txHash, data;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            contract = args[0], contractMethodNameOrGetPopulatedTransaction = args[1], contractArguments = args.slice(2);\n            _context4.prev = 1;\n            _context4.next = 4;\n            return eth_2.getConnectedProvider();\n\n          case 4:\n            connectedProvider = _context4.sent;\n\n            if (connectedProvider) {\n              _context4.next = 7;\n              break;\n            }\n\n            throw new Error('Provider not connected');\n\n          case 7:\n            _context4.next = 9;\n            return getProviderChainId(connectedProvider);\n\n          case 9:\n            chainId = _context4.sent;\n            _context4.next = 12;\n            return getTargetNetworkProvider(contract.chainId);\n\n          case 12:\n            targetNetworkProvider = _context4.sent;\n            // intantiate the contract\n            contractInstance = new ethers_1.Contract(contract.address, contract.abi, targetNetworkProvider); // populate the transaction data\n\n            _context4.next = 16;\n            return typeof contractMethodNameOrGetPopulatedTransaction === 'function' ? contractMethodNameOrGetPopulatedTransaction(contractInstance.populateTransaction) : (_contractInstance$pop = contractInstance.populateTransaction)[contractMethodNameOrGetPopulatedTransaction].apply(_contractInstance$pop, _toConsumableArray(contractArguments));\n\n          case 16:\n            unsignedTx = _context4.sent;\n\n            if (!(chainId === contract.chainId)) {\n              _context4.next = 26;\n              break;\n            }\n\n            signer = targetNetworkProvider.getSigner();\n            _context4.next = 21;\n            return signer.sendTransaction(unsignedTx);\n\n          case 21:\n            tx = _context4.sent;\n            exports.transactionEvents.emit(TransactionEventType.SUCCESS, {\n              txHash: tx.hash\n            });\n            return _context4.abrupt(\"return\", tx.hash);\n\n          case 26:\n            _context4.next = 28;\n            return decentraland_transactions_1.sendMetaTransaction(connectedProvider, targetNetworkProvider, unsignedTx.data, contract, {\n              serverURL: exports.getTransactionsApiUrl()\n            });\n\n          case 28:\n            txHash = _context4.sent;\n            exports.transactionEvents.emit(TransactionEventType.SUCCESS, {\n              txHash: txHash\n            });\n            return _context4.abrupt(\"return\", txHash);\n\n          case 31:\n            _context4.next = 38;\n            break;\n\n          case 33:\n            _context4.prev = 33;\n            _context4.t0 = _context4[\"catch\"](1);\n            data = {\n              type: TransactionEventType.ERROR,\n              error: _context4.t0\n            };\n            exports.transactionEvents.emit(TransactionEventType.ERROR, data);\n            throw _context4.t0;\n\n          case 38:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[1, 33]]);\n  }));\n}\n\nexports.sendTransaction = sendTransaction;\n\nfunction getAddEthereumChainParameters(chainId) {\n  var hexChainId = '0x' + chainId.toString(16);\n  var chainName = chain_id_1.getChainName(chainId);\n  var config = chainConfiguration_1.getChainConfiguration(chainId);\n\n  switch (chainId) {\n    case chain_id_1.ChainId.MATIC_MAINNET:\n      return {\n        chainId: hexChainId,\n        chainName: chainName,\n        nativeCurrency: {\n          name: 'MATIC',\n          symbol: 'MATIC',\n          decimals: 18\n        },\n        rpcUrls: ['https://rpc-mainnet.maticvigil.com/'],\n        blockExplorerUrls: ['https://polygonscan.com/']\n      };\n\n    case chain_id_1.ChainId.MATIC_MUMBAI:\n      return {\n        chainId: hexChainId,\n        chainName: chainName,\n        nativeCurrency: {\n          name: 'MATIC',\n          symbol: 'MATIC',\n          decimals: 18\n        },\n        rpcUrls: ['https://rpc-mumbai.maticvigil.com/'],\n        blockExplorerUrls: ['https://mumbai.polygonscan.com/']\n      };\n\n    case chain_id_1.ChainId.ETHEREUM_MAINNET:\n    case chain_id_1.ChainId.ETHEREUM_ROPSTEN:\n    case chain_id_1.ChainId.ETHEREUM_RINKEBY:\n    case chain_id_1.ChainId.ETHEREUM_KOVAN:\n    case chain_id_1.ChainId.ETHEREUM_GOERLI:\n      return {\n        chainId: hexChainId,\n        chainName: chainName,\n        nativeCurrency: {\n          name: 'Ether',\n          symbol: 'ETH',\n          decimals: 18\n        },\n        rpcUrls: [config.rpcURL],\n        blockExplorerUrls: ['https://etherscan.io']\n      };\n  }\n}\n\nexports.getAddEthereumChainParameters = getAddEthereumChainParameters;\n/**\n * Obtains the chain id through a provider.\n * Different providers might return the chain id as a hex or a number.\n * This function abtracts the logic in order to always obtain the chain id as a number from any given provider.\n * @param provider - The provider used to obtain the chain id\n * @returns A number representing the chain id, Eg: 80001 for Mumbai, 137 for Matic Mainnet\n */\n\nfunction getProviderChainId(provider) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var providerChainId, chainId;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return provider.request({\n              method: 'eth_chainId',\n              params: []\n            });\n\n          case 2:\n            providerChainId = _context5.sent;\n\n            if (typeof providerChainId === 'string') {\n              chainId = parseInt(providerChainId, 16);\n            } else {\n              chainId = providerChainId;\n            }\n\n            return _context5.abrupt(\"return\", chainId);\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n}\n\nexports.getProviderChainId = getProviderChainId;","map":null,"metadata":{},"sourceType":"script"}