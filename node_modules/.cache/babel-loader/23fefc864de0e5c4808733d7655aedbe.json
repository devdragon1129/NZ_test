{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar SentTransaction = /*#__PURE__*/function () {\n  function SentTransaction(eth, txHashPromise) {\n    _classCallCheck(this, SentTransaction);\n\n    this.eth = eth;\n    this.txHashPromise = txHashPromise;\n    this.blocksSinceSent = 0;\n  }\n\n  _createClass(SentTransaction, [{\n    key: \"getTxHash\",\n    value: function () {\n      var _getTxHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.txHashPromise);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getTxHash() {\n        return _getTxHash.apply(this, arguments);\n      }\n\n      return getTxHash;\n    }()\n  }, {\n    key: \"getReceipt\",\n    value: function () {\n      var _getReceipt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this = this;\n\n        var numConfirmations,\n            confirmationCallback,\n            _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                numConfirmations = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 1;\n                confirmationCallback = _args4.length > 1 ? _args4[1] : undefined;\n\n                if (!this.receipt) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", this.receipt);\n\n              case 4:\n                return _context4.abrupt(\"return\", new Promise( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(resolve, reject) {\n                    var txHash;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.prev = 0;\n                            _context3.next = 3;\n                            return _this.getTxHash();\n\n                          case 3:\n                            txHash = _context3.sent;\n                            _context3.next = 6;\n                            return _this.eth.getTransactionReceipt(txHash);\n\n                          case 6:\n                            _this.receipt = _context3.sent;\n\n                            if (!_this.receipt) {\n                              _context3.next = 15;\n                              break;\n                            }\n\n                            _context3.next = 10;\n                            return _this.handleReceipt(_this.receipt);\n\n                          case 10:\n                            _this.receipt = _context3.sent;\n\n                            if (!(numConfirmations === 1)) {\n                              _context3.next = 15;\n                              break;\n                            }\n\n                            if (confirmationCallback) {\n                              confirmationCallback(1, _this.receipt);\n                            }\n\n                            resolve(_this.receipt);\n                            return _context3.abrupt(\"return\");\n\n                          case 15:\n                            _this.eth.subscribe('newBlockHeaders').on('data', /*#__PURE__*/function () {\n                              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(blockHeader, sub) {\n                                var confirmations;\n                                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                                  while (1) {\n                                    switch (_context2.prev = _context2.next) {\n                                      case 0:\n                                        _context2.prev = 0;\n                                        _this.blocksSinceSent++;\n\n                                        if (_this.receipt) {\n                                          _context2.next = 10;\n                                          break;\n                                        }\n\n                                        _context2.next = 5;\n                                        return _this.eth.getTransactionReceipt(txHash);\n\n                                      case 5:\n                                        _this.receipt = _context2.sent;\n\n                                        if (!_this.receipt) {\n                                          _context2.next = 10;\n                                          break;\n                                        }\n\n                                        _context2.next = 9;\n                                        return _this.handleReceipt(_this.receipt);\n\n                                      case 9:\n                                        _this.receipt = _context2.sent;\n\n                                      case 10:\n                                        if (_this.receipt) {\n                                          _context2.next = 13;\n                                          break;\n                                        }\n\n                                        if (_this.blocksSinceSent > 50) {\n                                          sub.unsubscribe();\n                                          reject(new Error('No receipt after 50 blocks.'));\n                                        }\n\n                                        return _context2.abrupt(\"return\");\n\n                                      case 13:\n                                        confirmations = 1 + blockHeader.number - _this.receipt.blockNumber;\n\n                                        if (confirmationCallback) {\n                                          confirmationCallback(confirmations, _this.receipt);\n                                        }\n\n                                        if (confirmations >= numConfirmations) {\n                                          sub.unsubscribe();\n                                          resolve(_this.receipt);\n                                        }\n\n                                        _context2.next = 22;\n                                        break;\n\n                                      case 18:\n                                        _context2.prev = 18;\n                                        _context2.t0 = _context2[\"catch\"](0);\n                                        sub.unsubscribe();\n                                        reject(_context2.t0);\n\n                                      case 22:\n                                      case \"end\":\n                                        return _context2.stop();\n                                    }\n                                  }\n                                }, _callee2, null, [[0, 18]]);\n                              }));\n\n                              return function (_x3, _x4) {\n                                return _ref2.apply(this, arguments);\n                              };\n                            }()).on('error', reject);\n\n                            _context3.next = 21;\n                            break;\n\n                          case 18:\n                            _context3.prev = 18;\n                            _context3.t0 = _context3[\"catch\"](0);\n                            reject(_context3.t0);\n\n                          case 21:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3, null, [[0, 18]]);\n                  }));\n\n                  return function (_x, _x2) {\n                    return _ref.apply(this, arguments);\n                  };\n                }()));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getReceipt() {\n        return _getReceipt.apply(this, arguments);\n      }\n\n      return getReceipt;\n    }()\n  }, {\n    key: \"handleReceipt\",\n    value: function () {\n      var _handleReceipt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(receipt) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(receipt.status === false)) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                throw new Error('Transaction has been reverted by the EVM.');\n\n              case 2:\n                return _context5.abrupt(\"return\", receipt);\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function handleReceipt(_x5) {\n        return _handleReceipt.apply(this, arguments);\n      }\n\n      return handleReceipt;\n    }()\n  }]);\n\n  return SentTransaction;\n}();\n\nexports.SentTransaction = SentTransaction;","map":null,"metadata":{},"sourceType":"script"}