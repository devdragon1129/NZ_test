{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\nvar DirSharded = require('./dir-sharded');\n\nvar DirFlat = require('./dir-flat');\n/**\n * @typedef {import('./dir')} Dir\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n */\n\n/**\n * @param {Dir | null} child\n * @param {Dir} dir\n * @param {number} threshold\n * @param {ImporterOptions} options\n * @returns {Promise<DirSharded>}\n */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  var _flatToShard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(child, dir, threshold, options) {\n    var newDir, parent;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            newDir = dir;\n\n            if (!(dir instanceof DirFlat && dir.directChildrenCount() >= threshold)) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 4;\n            return convertToShard(dir, options);\n\n          case 4:\n            newDir = _context.sent;\n\n          case 5:\n            parent = newDir.parent;\n\n            if (!parent) {\n              _context.next = 14;\n              break;\n            }\n\n            if (!(newDir !== dir)) {\n              _context.next = 13;\n              break;\n            }\n\n            if (child) {\n              child.parent = newDir;\n            }\n\n            if (newDir.parentKey) {\n              _context.next = 11;\n              break;\n            }\n\n            throw new Error('No parent key found');\n\n          case 11:\n            _context.next = 13;\n            return parent.put(newDir.parentKey, newDir);\n\n          case 13:\n            return _context.abrupt(\"return\", flatToShard(newDir, parent, threshold, options));\n\n          case 14:\n            return _context.abrupt(\"return\", newDir);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function flatToShard(_x, _x2, _x3, _x4) {\n    return _flatToShard.apply(this, arguments);\n  }\n\n  return flatToShard;\n}();\n/**\n * @param {DirFlat} oldDir\n * @param {ImporterOptions} options\n */\n\n\nfunction convertToShard(_x5, _x6) {\n  return _convertToShard.apply(this, arguments);\n}\n\nfunction _convertToShard() {\n  _convertToShard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(oldDir, options) {\n    var newDir, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, key, child;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            newDir = new DirSharded({\n              root: oldDir.root,\n              dir: true,\n              parent: oldDir.parent,\n              parentKey: oldDir.parentKey,\n              path: oldDir.path,\n              dirty: oldDir.dirty,\n              flat: false,\n              mtime: oldDir.mtime,\n              mode: oldDir.mode\n            }, options);\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context2.prev = 3;\n            _iterator = _asyncIterator(oldDir.eachChildSeries());\n\n          case 5:\n            _context2.next = 7;\n            return _iterator.next();\n\n          case 7:\n            if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n              _context2.next = 14;\n              break;\n            }\n\n            _step$value = _step.value, key = _step$value.key, child = _step$value.child;\n            _context2.next = 11;\n            return newDir.put(key, child);\n\n          case 11:\n            _iteratorAbruptCompletion = false;\n            _context2.next = 5;\n            break;\n\n          case 14:\n            _context2.next = 20;\n            break;\n\n          case 16:\n            _context2.prev = 16;\n            _context2.t0 = _context2[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n\n          case 20:\n            _context2.prev = 20;\n            _context2.prev = 21;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context2.next = 25;\n              break;\n            }\n\n            _context2.next = 25;\n            return _iterator.return();\n\n          case 25:\n            _context2.prev = 25;\n\n            if (!_didIteratorError) {\n              _context2.next = 28;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 28:\n            return _context2.finish(25);\n\n          case 29:\n            return _context2.finish(20);\n\n          case 30:\n            return _context2.abrupt(\"return\", newDir);\n\n          case 31:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 16, 20, 30], [21,, 25, 29]]);\n  }));\n  return _convertToShard.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}