{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transactionReducer = void 0;\n\nvar types_1 = require(\"./types\");\n\nvar utils_1 = require(\"./utils\");\n\nvar reducer_1 = require(\"../loading/reducer\");\n\nvar actions_1 = require(\"./actions\");\n\nvar INITIAL_STATE = {\n  data: [],\n  loading: [],\n  error: null\n};\n\nfunction transactionReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actions_1.FETCH_TRANSACTION_REQUEST:\n      {\n        var actionRef = action.payload.action;\n        var transaction = utils_1.getTransactionFromAction(actionRef);\n        var otherTransactions = state.data.filter(function (otherTransaction) {\n          return otherTransaction.hash !== transaction.hash;\n        });\n        return {\n          loading: reducer_1.loadingReducer(state.loading, action),\n          error: null,\n          data: [].concat(_toConsumableArray(otherTransactions), [Object.assign(Object.assign({}, transaction), {\n            timestamp: Date.now(),\n            from: action.payload.address.toLowerCase(),\n            actionType: actionRef.type,\n            // these always start as null, and they get updated by the saga\n            status: null,\n            nonce: null,\n            replacedBy: null\n          })])\n        };\n      }\n\n    case actions_1.FETCH_TRANSACTION_SUCCESS:\n      {\n        var actionTransaction = action.payload.transaction;\n        return {\n          loading: reducer_1.loadingReducer(state.loading, action),\n          error: null,\n          data: state.data.map(function (transaction) {\n            return (// prettier-ignore\n              actionTransaction.hash === transaction.hash ? Object.assign(Object.assign({}, transaction), actionTransaction) : transaction\n            );\n          })\n        };\n      }\n\n    case actions_1.FETCH_TRANSACTION_FAILURE:\n      {\n        var _action$payload = action.payload,\n            hash = _action$payload.hash,\n            status = _action$payload.status,\n            message = _action$payload.message;\n        return {\n          loading: reducer_1.loadingReducer(state.loading, action),\n          error: message,\n          data: state.data.map(function (transaction) {\n            return (// prettier-ignore\n              hash === transaction.hash ? Object.assign(Object.assign({}, transaction), {\n                status: status\n              }) : transaction\n            );\n          })\n        };\n      }\n\n    case actions_1.UPDATE_TRANSACTION_STATUS:\n      {\n        return {\n          loading: reducer_1.loadingReducer(state.loading, action),\n          error: null,\n          data: state.data.map(function (transaction) {\n            return (// prettier-ignore\n              action.payload.hash === transaction.hash ? Object.assign(Object.assign({}, transaction), {\n                status: action.payload.status\n              }) : transaction\n            );\n          })\n        };\n      }\n\n    case actions_1.FIX_REVERTED_TRANSACTION:\n      {\n        return {\n          loading: reducer_1.loadingReducer(state.loading, action),\n          error: null,\n          data: state.data.map(function (transaction) {\n            return (// prettier-ignore\n              action.payload.hash === transaction.hash ? Object.assign(Object.assign({}, transaction), {\n                status: types_1.TransactionStatus.CONFIRMED\n              }) : transaction\n            );\n          })\n        };\n      }\n\n    case actions_1.UPDATE_TRANSACTION_NONCE:\n      {\n        return {\n          loading: reducer_1.loadingReducer(state.loading, action),\n          error: null,\n          data: state.data.map(function (transaction) {\n            return action.payload.hash === transaction.hash ? Object.assign(Object.assign({}, transaction), {\n              nonce: action.payload.nonce\n            }) : transaction;\n          })\n        };\n      }\n\n    case actions_1.REPLACE_TRANSACTION_SUCCESS:\n      {\n        return {\n          loading: reducer_1.loadingReducer(state.loading, action),\n          error: null,\n          data: state.data.map(function (transaction) {\n            return action.payload.hash === transaction.hash ? Object.assign(Object.assign({}, transaction), {\n              status: types_1.TransactionStatus.REPLACED,\n              replacedBy: action.payload.replaceBy\n            }) : transaction;\n          })\n        };\n      }\n\n    case actions_1.CLEAR_TRANSACTIONS:\n      {\n        return Object.assign(Object.assign({}, state), {\n          data: state.data.filter(function (transaction) {\n            return transaction.from.toLowerCase() !== action.payload.address.toLowerCase() && (action.payload.clearPendings || !utils_1.isPending(transaction.status));\n          })\n        });\n      }\n\n    case actions_1.CLEAR_TRANSACTION:\n      {\n        return Object.assign(Object.assign({}, state), {\n          data: state.data.filter(function (transaction) {\n            return transaction.hash !== action.payload.hash;\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n}\n\nexports.transactionReducer = transactionReducer;","map":null,"metadata":{},"sourceType":"script"}