{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar address_1 = require(\"../address\");\n\nvar sha3_1 = require(\"./sha3\");\n\nvar topic_1 = require(\"./topic\");\n/**\n * Ethereum bloom filter support.\n *\n * TODO UNDOCUMENTED\n *\n * @module bloom\n * @class [bloom] bloom\n */\n\n\nfunction codePointToInt(codePoint) {\n  if (codePoint >= 48 && codePoint <= 57) {\n    /*['0'..'9'] -> [0..9]*/\n    return codePoint - 48;\n  }\n\n  if (codePoint >= 65 && codePoint <= 70) {\n    /*['A'..'F'] -> [10..15]*/\n    return codePoint - 55;\n  }\n\n  if (codePoint >= 97 && codePoint <= 102) {\n    /*['a'..'f'] -> [10..15]*/\n    return codePoint - 87;\n  }\n\n  throw new Error('invalid bloom');\n}\n\nfunction testBytes(bloom, bytes) {\n  var hash = sha3_1.sha3(bytes).replace('0x', '');\n\n  for (var i = 0; i < 12; i += 4) {\n    // calculate bit position in bloom filter that must be active\n    var bitpos = (parseInt(hash.substr(i, 2), 16) << 8) + parseInt(hash.substr(i + 2, 2), 16) & 2047; // test if bitpos in bloom is active\n\n    var code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));\n    var offset = 1 << bitpos % 4;\n\n    if ((code & offset) !== offset) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Returns true if address is part of the given bloom.\n * note: false positives are possible.\n *\n * @method testAddress\n * @param {String} hex encoded bloom\n * @param {String} address in hex notation\n * @returns {Boolean} topic is (probably) part of the block\n */\n\n\nexports.testAddress = function (bloom, address) {\n  if (!exports.isBloom(bloom)) {\n    throw new Error('Invalid bloom given');\n  }\n\n  if (!address_1.Address.isAddress(address)) {\n    throw new Error('Invalid address given: \"' + address + '\"');\n  }\n\n  return testBytes(bloom, address);\n};\n/**\n * Returns true if the topic is part of the given bloom.\n * note: false positives are possible.\n *\n * @method hasTopic\n * @param {String} hex encoded bloom\n * @param {String} address in hex notation\n * @returns {Boolean} topic is (probably) part of the block\n */\n\n\nexports.testTopic = function (bloom, topic) {\n  if (!exports.isBloom(bloom)) {\n    throw new Error('invalid bloom');\n  }\n\n  if (!topic_1.isTopic(topic)) {\n    throw new Error('invalid topic');\n  }\n\n  return testBytes(bloom, topic);\n};\n/**\n * Returns true if given string is a valid Ethereum block header bloom.\n *\n * TODO UNDOCUMENTED\n *\n * @method isBloom\n * @param {String} hex encoded bloom filter\n * @return {Boolean}\n */\n\n\nexports.isBloom = function (bloom) {\n  if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {\n    return false;\n  } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {\n    return true;\n  }\n\n  return false;\n};","map":null,"metadata":{},"sourceType":"script"}