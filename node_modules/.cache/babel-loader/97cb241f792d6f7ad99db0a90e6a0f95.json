{"ast":null,"code":"import { ThinEngine } from \"../../Engines/thinEngine\";\n\nThinEngine.prototype.updateDynamicIndexBuffer = function (indexBuffer, indices, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  } // Force cache update\n\n\n  this._currentBoundBuffer[this._gl.ELEMENT_ARRAY_BUFFER] = null;\n  this.bindIndexBuffer(indexBuffer);\n  var arrayBuffer;\n\n  if (indices instanceof Uint16Array || indices instanceof Uint32Array) {\n    arrayBuffer = indices;\n  } else {\n    arrayBuffer = indexBuffer.is32Bits ? new Uint32Array(indices) : new Uint16Array(indices);\n  }\n\n  this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, arrayBuffer, this._gl.DYNAMIC_DRAW);\n\n  this._resetIndexBufferBinding();\n};\n\nThinEngine.prototype.updateDynamicVertexBuffer = function (vertexBuffer, data, byteOffset, byteLength) {\n  this.bindArrayBuffer(vertexBuffer);\n\n  if (byteOffset === undefined) {\n    byteOffset = 0;\n  }\n\n  var dataLength = data.length || data.byteLength;\n\n  if (byteLength === undefined || byteLength >= dataLength && byteOffset === 0) {\n    if (data instanceof Array) {\n      this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, new Float32Array(data));\n    } else {\n      this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, data);\n    }\n  } else {\n    if (data instanceof Array) {\n      this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, new Float32Array(data).subarray(byteOffset, byteOffset + byteLength));\n    } else {\n      if (data instanceof ArrayBuffer) {\n        data = new Uint8Array(data, byteOffset, byteLength);\n      } else {\n        data = new Uint8Array(data.buffer, data.byteOffset + byteOffset, byteLength);\n      }\n\n      this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, data);\n    }\n  }\n\n  this._resetVertexBufferBinding();\n};","map":null,"metadata":{},"sourceType":"module"}