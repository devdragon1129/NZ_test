{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(walletSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(customWalletSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleWalletChange);\n\nimport { all, takeEvery, put } from 'redux-saga/effects';\nimport { ChainId } from '@dcl/schemas';\nimport { ContractName } from 'decentraland-transactions';\nimport { createWalletSaga } from 'decentraland-dapps/dist/modules/wallet/sagas';\nimport { CHANGE_ACCOUNT, CHANGE_NETWORK, CONNECT_WALLET_SUCCESS } from 'decentraland-dapps/dist/modules/wallet/actions';\nimport { fetchAuthorizationsRequest } from 'decentraland-dapps/dist/modules/authorization/actions';\nimport { config } from 'config';\nimport { buildManaAuthorization } from 'lib/mana';\nimport { TRANSACTIONS_API_URL } from './utils';\nvar baseWalletSaga = createWalletSaga({\n  CHAIN_ID: config.get('CHAIN_ID') || ChainId.ETHEREUM_MAINNET,\n  POLL_INTERVAL: 0,\n  TRANSACTIONS_API_URL: TRANSACTIONS_API_URL\n});\nexport function walletSaga() {\n  return _regeneratorRuntime.wrap(function walletSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([baseWalletSaga(), customWalletSaga()]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction customWalletSaga() {\n  return _regeneratorRuntime.wrap(function customWalletSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(CONNECT_WALLET_SUCCESS, handleWalletChange);\n\n        case 2:\n          _context2.next = 4;\n          return takeEvery(CHANGE_ACCOUNT, handleWalletChange);\n\n        case 4:\n          _context2.next = 6;\n          return takeEvery(CHANGE_NETWORK, handleWalletChange);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction handleWalletChange(action) {\n  var wallet, chainId, authorizations;\n  return _regeneratorRuntime.wrap(function handleWalletChange$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          wallet = action.payload.wallet;\n          chainId = wallet.networks.MATIC.chainId; // All authorizations to be fetched must be added to the following list\n\n          authorizations = [];\n          _context3.prev = 3;\n          authorizations.push(buildManaAuthorization(wallet.address, chainId, ContractName.CollectionManager));\n          _context3.next = 7;\n          return put(fetchAuthorizationsRequest(authorizations));\n\n        case 7:\n          _context3.next = 11;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](3);\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[3, 9]]);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/wallet/sagas.ts"],"names":["walletSaga","customWalletSaga","handleWalletChange","all","takeEvery","put","ChainId","ContractName","createWalletSaga","CHANGE_ACCOUNT","CHANGE_NETWORK","CONNECT_WALLET_SUCCESS","fetchAuthorizationsRequest","config","buildManaAuthorization","TRANSACTIONS_API_URL","baseWalletSaga","CHAIN_ID","get","ETHEREUM_MAINNET","POLL_INTERVAL","action","wallet","payload","chainId","networks","MATIC","authorizations","push","address","CollectionManager"],"mappings":";;oDAwBiBA,U;qDAIPC,gB;qDAMAC,kB;;AAlCV,SAASC,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,QAAoC,oBAApC;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,gBAAT,QAAiC,8CAAjC;AACA,SACEC,cADF,EAEEC,cAFF,EAGEC,sBAHF,QAOO,gDAPP;AAQA,SAASC,0BAAT,QAA2C,uDAA3C;AAEA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,sBAAT,QAAuC,UAAvC;AACA,SAASC,oBAAT,QAAqC,SAArC;AAEA,IAAMC,cAAc,GAAGR,gBAAgB,CAAC;AACtCS,EAAAA,QAAQ,EAAEJ,MAAM,CAACK,GAAP,CAAW,UAAX,KAA0BZ,OAAO,CAACa,gBADN;AAEtCC,EAAAA,aAAa,EAAE,CAFuB;AAGtCL,EAAAA,oBAAoB,EAApBA;AAHsC,CAAD,CAAvC;AAMA,OAAO,SAAUf,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,iBAAMG,GAAG,CAAC,CAACa,cAAc,EAAf,EAAmBf,gBAAgB,EAAnC,CAAD,CAAT;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIP,SAAUA,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMG,SAAS,CAACO,sBAAD,EAAyBT,kBAAzB,CAAf;;AADF;AAAA;AAEE,iBAAME,SAAS,CAACK,cAAD,EAAiBP,kBAAjB,CAAf;;AAFF;AAAA;AAGE,iBAAME,SAAS,CAACM,cAAD,EAAiBR,kBAAjB,CAAf;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAUA,kBAAV,CAA6BmB,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,UAAAA,MADV,GACqBD,MAAM,CAACE,OAD5B,CACUD,MADV;AAEQE,UAAAA,OAFR,GAEkBF,MAAM,CAACG,QAAP,CAAgBC,KAAhB,CAAsBF,OAFxC,EAGE;;AACMG,UAAAA,cAJR,GAI0C,EAJ1C;AAAA;AAOIA,UAAAA,cAAc,CAACC,IAAf,CAAoBd,sBAAsB,CAACQ,MAAM,CAACO,OAAR,EAAiBL,OAAjB,EAA0BjB,YAAY,CAACuB,iBAAvC,CAA1C;AAPJ;AASI,iBAAMzB,GAAG,CAACO,0BAA0B,CAACe,cAAD,CAA3B,CAAT;;AATJ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, takeEvery, put } from 'redux-saga/effects'\nimport { ChainId } from '@dcl/schemas'\nimport { ContractName } from 'decentraland-transactions'\nimport { createWalletSaga } from 'decentraland-dapps/dist/modules/wallet/sagas'\nimport {\n  CHANGE_ACCOUNT,\n  CHANGE_NETWORK,\n  CONNECT_WALLET_SUCCESS,\n  ChangeAccountAction,\n  ChangeNetworkAction,\n  ConnectWalletSuccessAction\n} from 'decentraland-dapps/dist/modules/wallet/actions'\nimport { fetchAuthorizationsRequest } from 'decentraland-dapps/dist/modules/authorization/actions'\nimport { Authorization } from 'decentraland-dapps/dist/modules/authorization/types'\nimport { config } from 'config'\nimport { buildManaAuthorization } from 'lib/mana'\nimport { TRANSACTIONS_API_URL } from './utils'\n\nconst baseWalletSaga = createWalletSaga({\n  CHAIN_ID: config.get('CHAIN_ID') || ChainId.ETHEREUM_MAINNET,\n  POLL_INTERVAL: 0,\n  TRANSACTIONS_API_URL\n})\n\nexport function* walletSaga() {\n  yield all([baseWalletSaga(), customWalletSaga()])\n}\n\nfunction* customWalletSaga() {\n  yield takeEvery(CONNECT_WALLET_SUCCESS, handleWalletChange)\n  yield takeEvery(CHANGE_ACCOUNT, handleWalletChange)\n  yield takeEvery(CHANGE_NETWORK, handleWalletChange)\n}\n\nfunction* handleWalletChange(action: ConnectWalletSuccessAction | ChangeAccountAction | ChangeNetworkAction) {\n  const { wallet } = action.payload\n  const chainId = wallet.networks.MATIC.chainId\n  // All authorizations to be fetched must be added to the following list\n  const authorizations: Authorization[] = []\n\n  try {\n    authorizations.push(buildManaAuthorization(wallet.address, chainId, ContractName.CollectionManager))\n\n    yield put(fetchAuthorizationsRequest(authorizations))\n  } catch (error) {}\n}\n"]},"metadata":{},"sourceType":"module"}