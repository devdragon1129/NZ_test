{"ast":null,"code":"export var includes = function includes(addresses, address) {\n  return addresses.some(function (_address) {\n    return isEqual(_address, address);\n  });\n};\nexport var isEqual = function isEqual(addr1, addr2) {\n  return addr1.toLowerCase() === addr2.toLowerCase();\n};\nexport var isZero = function isZero(addr) {\n  return /^0x(0)+$/.test(addr);\n};\nexport var isValid = function isValid(addr) {\n  return /^0x[a-fA-F0-9]{40}$/g.test(addr);\n};\nexport function shorten(address) {\n  return address ? address.slice(0, 6) + '...' + address.slice(42 - 5) : '';\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/lib/address.ts"],"names":["includes","addresses","address","some","_address","isEqual","addr1","addr2","toLowerCase","isZero","addr","test","isValid","shorten","slice"],"mappings":"AAAA,OAAO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAsBC,OAAtB,EAA0C;AAChE,SAAOD,SAAS,CAACE,IAAV,CAAe,UAAAC,QAAQ;AAAA,WAAIC,OAAO,CAACD,QAAD,EAAWF,OAAX,CAAX;AAAA,GAAvB,CAAP;AACD,CAFM;AAIP,OAAO,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAgBC,KAAhB,EAAkC;AACvD,SAAOD,KAAK,CAACE,WAAN,OAAwBD,KAAK,CAACC,WAAN,EAA/B;AACD,CAFM;AAIP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAkB;AACtC,SAAO,WAAWC,IAAX,CAAgBD,IAAhB,CAAP;AACD,CAFM;AAIP,OAAO,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACF,IAAD,EAAkB;AACvC,SAAO,uBAAuBC,IAAvB,CAA4BD,IAA5B,CAAP;AACD,CAFM;AAIP,OAAO,SAASG,OAAT,CAAiBX,OAAjB,EAAkC;AACvC,SAAOA,OAAO,GAAGA,OAAO,CAACY,KAAR,CAAc,CAAd,EAAiB,CAAjB,IAAsB,KAAtB,GAA8BZ,OAAO,CAACY,KAAR,CAAc,KAAK,CAAnB,CAAjC,GAAyD,EAAvE;AACD","sourcesContent":["export const includes = (addresses: string[], address: string) => {\n  return addresses.some(_address => isEqual(_address, address))\n}\n\nexport const isEqual = (addr1: string, addr2: string) => {\n  return addr1.toLowerCase() === addr2.toLowerCase()\n}\n\nexport const isZero = (addr: string) => {\n  return /^0x(0)+$/.test(addr)\n}\n\nexport const isValid = (addr: string) => {\n  return /^0x[a-fA-F0-9]{40}$/g.test(addr)\n}\n\nexport function shorten(address: string) {\n  return address ? address.slice(0, 6) + '...' + address.slice(42 - 5) : ''\n}\n"]},"metadata":{},"sourceType":"module"}