{"ast":null,"code":"import { connect } from 'react-redux';\nimport { push, goBack } from 'connected-react-router';\nimport { getData as getWallet, getMana } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { openModal } from 'modules/modal/actions';\nimport { allowClaimManaRequest, claimNameRequest, ALLOW_CLAIM_MANA_REQUEST } from 'modules/ens/actions';\nimport { getLoading, isWaitingTxAllowMana, getAuthorizationByWallet } from 'modules/ens/selectors';\nimport ClaimENSPage from './ClaimENSPage';\n\nvar mapState = function mapState(state) {\n  var authorization = getAuthorizationByWallet(state);\n  return {\n    wallet: getWallet(state),\n    mana: getMana(state),\n    allowance: authorization ? authorization.allowance : '0',\n    isLoading: !authorization || isLoadingType(getLoading(state), ALLOW_CLAIM_MANA_REQUEST) || isWaitingTxAllowMana(state)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    },\n    onAllowMana: function onAllowMana(allowance) {\n      return dispatch(allowClaimManaRequest(allowance));\n    },\n    onClaim: function onClaim(name) {\n      return dispatch(claimNameRequest(name));\n    },\n    onNavigate: function onNavigate(path) {\n      return dispatch(push(path));\n    },\n    onBack: function onBack() {\n      return dispatch(goBack());\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(ClaimENSPage);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/ClaimENSPage/ClaimENSPage.container.ts"],"names":["connect","push","goBack","getData","getWallet","getMana","isLoadingType","openModal","allowClaimManaRequest","claimNameRequest","ALLOW_CLAIM_MANA_REQUEST","getLoading","isWaitingTxAllowMana","getAuthorizationByWallet","ClaimENSPage","mapState","state","authorization","wallet","mana","allowance","isLoading","mapDispatch","dispatch","onOpenModal","name","metadata","onAllowMana","onClaim","onNavigate","path","onBack"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,wBAA7B;AACA,SAASC,OAAO,IAAIC,SAApB,EAA+BC,OAA/B,QAA8C,kDAA9C;AACA,SAASC,aAAT,QAA8B,mDAA9B;AAEA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,qBAAT,EAAgCC,gBAAhC,EAAkDC,wBAAlD,QAAkF,qBAAlF;AACA,SAASC,UAAT,EAAqBC,oBAArB,EAA2CC,wBAA3C,QAA2E,uBAA3E;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAqC;AACpD,MAAMC,aAAa,GAAGJ,wBAAwB,CAACG,KAAD,CAA9C;AAEA,SAAO;AACLE,IAAAA,MAAM,EAAEd,SAAS,CAACY,KAAD,CADZ;AAELG,IAAAA,IAAI,EAAEd,OAAO,CAACW,KAAD,CAFR;AAGLI,IAAAA,SAAS,EAAEH,aAAa,GAAGA,aAAa,CAACG,SAAjB,GAA6B,GAHhD;AAILC,IAAAA,SAAS,EAAE,CAACJ,aAAD,IAAkBX,aAAa,CAACK,UAAU,CAACK,KAAD,CAAX,EAAoBN,wBAApB,CAA/B,IAAgFE,oBAAoB,CAACI,KAAD;AAJ1G,GAAP;AAMD,CATD;;AAWA,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,QAAP;AAAA,aAAoBH,QAAQ,CAAChB,SAAS,CAACkB,IAAD,EAAOC,QAAP,CAAV,CAA5B;AAAA,KADmD;AAEhEC,IAAAA,WAAW,EAAE,qBAAAP,SAAS;AAAA,aAAIG,QAAQ,CAACf,qBAAqB,CAACY,SAAD,CAAtB,CAAZ;AAAA,KAF0C;AAGhEQ,IAAAA,OAAO,EAAE,iBAAAH,IAAI;AAAA,aAAIF,QAAQ,CAACd,gBAAgB,CAACgB,IAAD,CAAjB,CAAZ;AAAA,KAHmD;AAIhEI,IAAAA,UAAU,EAAE,oBAAAC,IAAI;AAAA,aAAIP,QAAQ,CAACtB,IAAI,CAAC6B,IAAD,CAAL,CAAZ;AAAA,KAJgD;AAKhEC,IAAAA,MAAM,EAAE;AAAA,aAAMR,QAAQ,CAACrB,MAAM,EAAP,CAAd;AAAA;AALwD,GAA9C;AAAA,CAApB;;AAQA,eAAeF,OAAO,CAACe,QAAD,EAAWO,WAAX,CAAP,CAA+BR,YAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { push, goBack } from 'connected-react-router'\nimport { getData as getWallet, getMana } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { RootState } from 'modules/common/types'\nimport { openModal } from 'modules/modal/actions'\nimport { allowClaimManaRequest, claimNameRequest, ALLOW_CLAIM_MANA_REQUEST } from 'modules/ens/actions'\nimport { getLoading, isWaitingTxAllowMana, getAuthorizationByWallet } from 'modules/ens/selectors'\nimport { MapStateProps, MapDispatchProps, MapDispatch } from './ClaimENSPage.types'\nimport ClaimENSPage from './ClaimENSPage'\n\nconst mapState = (state: RootState): MapStateProps => {\n  const authorization = getAuthorizationByWallet(state)\n\n  return {\n    wallet: getWallet(state),\n    mana: getMana(state)!,\n    allowance: authorization ? authorization.allowance : '0',\n    isLoading: !authorization || isLoadingType(getLoading(state), ALLOW_CLAIM_MANA_REQUEST) || isWaitingTxAllowMana(state)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata)),\n  onAllowMana: allowance => dispatch(allowClaimManaRequest(allowance)),\n  onClaim: name => dispatch(claimNameRequest(name)),\n  onNavigate: path => dispatch(push(path)),\n  onBack: () => dispatch(goBack())\n})\n\nexport default connect(mapState, mapDispatch)(ClaimENSPage)\n"]},"metadata":{},"sourceType":"module"}