{"ast":null,"code":"import { Color3 } from \"@babylonjs/core/Maths/math.color\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport { GLTFLoader } from \"../glTFLoader\";\nvar NAME = \"KHR_materials_unlit\";\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit)\r\n */\n\nvar KHR_materials_unlit =\n/** @class */\nfunction () {\n  /** @hidden */\n  function KHR_materials_unlit(loader) {\n    /**\r\n     * The name of this extension.\r\n     */\n    this.name = NAME;\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\n\n    this.order = 210;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_materials_unlit.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /** @hidden */\n\n\n  KHR_materials_unlit.prototype.loadMaterialPropertiesAsync = function (context, material, babylonMaterial) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, function () {\n      return _this._loadUnlitPropertiesAsync(context, material, babylonMaterial);\n    });\n  };\n\n  KHR_materials_unlit.prototype._loadUnlitPropertiesAsync = function (context, material, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(context + \": Material type not supported\");\n    }\n\n    var promises = new Array();\n    babylonMaterial.unlit = true;\n    var properties = material.pbrMetallicRoughness;\n\n    if (properties) {\n      if (properties.baseColorFactor) {\n        babylonMaterial.albedoColor = Color3.FromArray(properties.baseColorFactor);\n        babylonMaterial.alpha = properties.baseColorFactor[3];\n      } else {\n        babylonMaterial.albedoColor = Color3.White();\n      }\n\n      if (properties.baseColorTexture) {\n        promises.push(this._loader.loadTextureInfoAsync(context + \"/baseColorTexture\", properties.baseColorTexture, function (texture) {\n          texture.name = babylonMaterial.name + \" (Base Color)\";\n          babylonMaterial.albedoTexture = texture;\n        }));\n      }\n    }\n\n    if (material.doubleSided) {\n      babylonMaterial.backFaceCulling = false;\n      babylonMaterial.twoSidedLighting = true;\n    }\n\n    this._loader.loadMaterialAlphaProperties(context, material, babylonMaterial);\n\n    return Promise.all(promises).then(function () {});\n  };\n\n  return KHR_materials_unlit;\n}();\n\nexport { KHR_materials_unlit };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_materials_unlit(loader);\n});","map":null,"metadata":{},"sourceType":"module"}