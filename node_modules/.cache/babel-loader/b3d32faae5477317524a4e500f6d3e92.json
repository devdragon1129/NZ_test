{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialConnectionPointDirection } from '../../nodeMaterialBlockConnectionPoint';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport { InputBlock } from '../Input/inputBlock';\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\nimport { RefractionBlock } from './refractionBlock';\n/**\r\n * Block used to implement the sub surface module of the PBR material\r\n */\n\nvar SubSurfaceBlock =\n/** @class */\nfunction (_super) {\n  __extends(SubSurfaceBlock, _super);\n  /**\r\n   * Create a new SubSurfaceBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function SubSurfaceBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this._isUnique = true;\n\n    _this.registerInput(\"thickness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"tintColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"translucencyIntensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"translucencyDiffusionDist\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"refraction\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"refraction\", _this, NodeMaterialConnectionPointDirection.Input, RefractionBlock, \"RefractionBlock\"));\n\n    _this.registerOutput(\"subsurface\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"subsurface\", _this, NodeMaterialConnectionPointDirection.Output, SubSurfaceBlock, \"SubSurfaceBlock\"));\n\n    return _this;\n  }\n  /**\r\n   * Initialize the block and prepare the context for build\r\n   * @param state defines the state that will be used for the build\r\n   */\n\n\n  SubSurfaceBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"subSurfaceOut\");\n\n    state._excludeVariableName(\"vThicknessParam\");\n\n    state._excludeVariableName(\"vTintColor\");\n\n    state._excludeVariableName(\"vSubSurfaceIntensity\");\n  };\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  SubSurfaceBlock.prototype.getClassName = function () {\n    return \"SubSurfaceBlock\";\n  };\n\n  Object.defineProperty(SubSurfaceBlock.prototype, \"thickness\", {\n    /**\r\n     * Gets the thickness component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceBlock.prototype, \"tintColor\", {\n    /**\r\n     * Gets the tint color input component\r\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceBlock.prototype, \"translucencyIntensity\", {\n    /**\r\n     * Gets the translucency intensity input component\r\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceBlock.prototype, \"translucencyDiffusionDist\", {\n    /**\r\n     * Gets the translucency diffusion distance input component\r\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceBlock.prototype, \"refraction\", {\n    /**\r\n     * Gets the refraction object parameters\r\n     */\n    get: function get() {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceBlock.prototype, \"subsurface\", {\n    /**\r\n     * Gets the sub surface object output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SubSurfaceBlock.prototype.autoConfigure = function (material) {\n    if (!this.thickness.isConnected) {\n      var thicknessInput = new InputBlock(\"SubSurface thickness\", NodeMaterialBlockTargets.Fragment, NodeMaterialBlockConnectionPointTypes.Float);\n      thicknessInput.value = 0;\n      thicknessInput.output.connectTo(this.thickness);\n    }\n  };\n\n  SubSurfaceBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    _super.prototype.prepareDefines.call(this, mesh, nodeMaterial, defines);\n\n    var translucencyEnabled = this.translucencyDiffusionDist.isConnected || this.translucencyIntensity.isConnected;\n    defines.setValue(\"SUBSURFACE\", translucencyEnabled || this.refraction.isConnected, true);\n    defines.setValue(\"SS_TRANSLUCENCY\", translucencyEnabled, true);\n    defines.setValue(\"SS_THICKNESSANDMASK_TEXTURE\", false, true);\n    defines.setValue(\"SS_MASK_FROM_THICKNESS_TEXTURE\", false, true);\n    defines.setValue(\"SS_MASK_FROM_THICKNESS_TEXTURE_GLTF\", false, true);\n  };\n  /**\r\n   * Gets the main code of the block (fragment side)\r\n   * @param state current state of the node material building\r\n   * @param ssBlock instance of a SubSurfaceBlock or null if the code must be generated without an active sub surface module\r\n   * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\r\n   * @param worldPosVarName name of the variable holding the world position\r\n   * @returns the shader code\r\n   */\n\n\n  SubSurfaceBlock.GetCode = function (state, ssBlock, reflectionBlock, worldPosVarName) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n\n    var code = \"\";\n    var thickness = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.thickness.isConnected) ? ssBlock.thickness.associatedVariableName : \"0.\";\n    var tintColor = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.tintColor.isConnected) ? ssBlock.tintColor.associatedVariableName : \"vec3(1.)\";\n    var translucencyIntensity = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyIntensity.isConnected) ? ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyIntensity.associatedVariableName : \"1.\";\n    var translucencyDiffusionDistance = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyDiffusionDist.isConnected) ? ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.translucencyDiffusionDist.associatedVariableName : \"vec3(1.)\";\n    var refractionBlock = (ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.refraction.isConnected) ? (_a = ssBlock === null || ssBlock === void 0 ? void 0 : ssBlock.refraction.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock : null;\n    var refractionTintAtDistance = (refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.tintAtDistance.isConnected) ? refractionBlock.tintAtDistance.associatedVariableName : \"1.\";\n    var refractionIntensity = (refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.intensity.isConnected) ? refractionBlock.intensity.associatedVariableName : \"1.\";\n    var refractionView = (refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.view.isConnected) ? refractionBlock.view.associatedVariableName : \"\";\n    code += (_b = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock.getCode(state)) !== null && _b !== void 0 ? _b : \"\";\n    code += \"subSurfaceOutParams subSurfaceOut;\\n\\n        #ifdef SUBSURFACE\\n            vec2 vThicknessParam = vec2(0., \" + thickness + \");\\n            vec4 vTintColor = vec4(\" + tintColor + \", \" + refractionTintAtDistance + \");\\n            vec3 vSubSurfaceIntensity = vec3(\" + refractionIntensity + \", \" + translucencyIntensity + \", 0.);\\n\\n            subSurfaceBlock(\\n                vSubSurfaceIntensity,\\n                vThicknessParam,\\n                vTintColor,\\n                normalW,\\n                specularEnvironmentReflectance,\\n            #ifdef SS_THICKNESSANDMASK_TEXTURE\\n                vec4(0.),\\n            #endif\\n            #ifdef REFLECTION\\n                #ifdef SS_TRANSLUCENCY\\n                    \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._reflectionMatrixName) + \",\\n                    #ifdef USESPHERICALFROMREFLECTIONMAP\\n                        #if !defined(NORMAL) || !defined(USESPHERICALINVERTEX)\\n                            reflectionOut.irradianceVector,\\n                        #endif\\n                        #if defined(REALTIME_FILTERING)\\n                            \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName) + \",\\n                            \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionFilteringInfoName) + \",\\n                        #endif\\n                        #endif\\n                    #ifdef USEIRRADIANCEMAP\\n                        irradianceSampler,\\n                    #endif\\n                #endif\\n            #endif\\n            #ifdef SS_REFRACTION\\n                \" + worldPosVarName + \".xyz,\\n                viewDirectionW,\\n                \" + refractionView + \",\\n                surfaceAlbedo,\\n                \" + ((_c = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._vRefractionInfosName) !== null && _c !== void 0 ? _c : \"\") + \",\\n                \" + ((_d = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._refractionMatrixName) !== null && _d !== void 0 ? _d : \"\") + \",\\n                \" + ((_e = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._vRefractionMicrosurfaceInfosName) !== null && _e !== void 0 ? _e : \"\") + \",\\n                vLightingIntensity,\\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\\n                    alpha,\\n                #endif\\n                #ifdef \" + ((_f = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLODRefractionAlpha) !== null && _f !== void 0 ? _f : \"IGNORE\") + \"\\n                    NdotVUnclamped,\\n                #endif\\n                #ifdef \" + ((_g = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLinearSpecularRefraction) !== null && _g !== void 0 ? _g : \"IGNORE\") + \"\\n                    roughness,\\n                #else\\n                    alphaG,\\n                #endif\\n                #ifdef \" + ((_h = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._define3DName) !== null && _h !== void 0 ? _h : \"IGNORE\") + \"\\n                    \" + ((_j = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._cubeSamplerName) !== null && _j !== void 0 ? _j : \"\") + \",\\n                #else\\n                    \" + ((_k = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._2DSamplerName) !== null && _k !== void 0 ? _k : \"\") + \",\\n                #endif\\n                #ifndef LODBASEDMICROSFURACE\\n                    #ifdef \" + ((_l = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._define3DName) !== null && _l !== void 0 ? _l : \"IGNORE\") + \"\\n                        \" + ((_m = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._cubeSamplerName) !== null && _m !== void 0 ? _m : \"\") + \",\\n                        \" + ((_o = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._cubeSamplerName) !== null && _o !== void 0 ? _o : \"\") + \",\\n                    #else\\n                        \" + ((_p = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._2DSamplerName) !== null && _p !== void 0 ? _p : \"\") + \",\\n                        \" + ((_q = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._2DSamplerName) !== null && _q !== void 0 ? _q : \"\") + \",\\n                    #endif\\n                #endif\\n                #ifdef ANISOTROPIC\\n                    anisotropicOut,\\n                #endif\\n                #ifdef REALTIME_FILTERING\\n                    \" + ((_r = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._vRefractionFilteringInfoName) !== null && _r !== void 0 ? _r : \"\") + \",\\n                #endif\\n            #endif\\n            #ifdef SS_TRANSLUCENCY\\n                \" + translucencyDiffusionDistance + \",\\n            #endif\\n                subSurfaceOut\\n            );\\n\\n            #ifdef SS_REFRACTION\\n                surfaceAlbedo = subSurfaceOut.surfaceAlbedo;\\n                #ifdef SS_LINKREFRACTIONTOTRANSPARENCY\\n                    alpha = subSurfaceOut.alpha;\\n                #endif\\n            #endif\\n        #else\\n            subSurfaceOut.specularEnvironmentReflectance = specularEnvironmentReflectance;\\n        #endif\\r\\n\";\n    return code;\n  };\n\n  SubSurfaceBlock.prototype._buildBlock = function (state) {\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.blocksWithDefines.push(this);\n    }\n\n    return this;\n  };\n\n  return SubSurfaceBlock;\n}(NodeMaterialBlock);\n\nexport { SubSurfaceBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.SubSurfaceBlock\"] = SubSurfaceBlock;","map":null,"metadata":{},"sourceType":"module"}