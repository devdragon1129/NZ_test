{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar equal_1 = __importDefault(require(\"ajv/dist/compile/equal\"));\n\nvar SCALAR_TYPES = [\"number\", \"integer\", \"string\", \"boolean\", \"null\"];\n\nfunction getDef() {\n  return {\n    keyword: \"uniqueItemProperties\",\n    type: \"array\",\n    schemaType: \"array\",\n    compile: function compile(keys, parentSchema) {\n      var scalar = getScalarKeys(keys, parentSchema);\n      return function (data) {\n        if (data.length <= 1) return true;\n\n        for (var k = 0; k < keys.length; k++) {\n          var key = keys[k];\n\n          if (scalar[k]) {\n            var hash = {};\n\n            var _iterator = _createForOfIteratorHelper(data),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var x = _step.value;\n                if (!x || typeof x != \"object\") continue;\n                var p = x[key];\n                if (p && typeof p == \"object\") continue;\n                if (typeof p == \"string\") p = '\"' + p;\n                if (hash[p]) return false;\n                hash[p] = true;\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          } else {\n            for (var i = data.length; i--;) {\n              var _x = data[i];\n              if (!_x || typeof _x != \"object\") continue;\n\n              for (var j = i; j--;) {\n                var y = data[j];\n                if (y && typeof y == \"object\" && equal_1.default(_x[key], y[key])) return false;\n              }\n            }\n          }\n        }\n\n        return true;\n      };\n    },\n    metaSchema: {\n      type: \"array\",\n      items: {\n        type: \"string\"\n      }\n    }\n  };\n}\n\nexports.default = getDef;\n\nfunction getScalarKeys(keys, schema) {\n  return keys.map(function (key) {\n    var _a, _b, _c;\n\n    var t = (_c = (_b = (_a = schema.items) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b[key]) === null || _c === void 0 ? void 0 : _c.type;\n    return Array.isArray(t) ? !t.includes(\"object\") && !t.includes(\"array\") : SCALAR_TYPES.includes(t);\n  });\n}\n\nmodule.exports = getDef;","map":null,"metadata":{},"sourceType":"script"}