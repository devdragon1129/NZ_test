{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateKeywordUsage = exports.validSchemaType = exports.funcKeywordCode = exports.macroKeywordCode = void 0;\n\nvar codegen_1 = require(\"../codegen\");\n\nvar names_1 = require(\"../names\");\n\nvar code_1 = require(\"../../vocabularies/code\");\n\nvar errors_1 = require(\"../errors\");\n\nfunction macroKeywordCode(cxt, def) {\n  var gen = cxt.gen,\n      keyword = cxt.keyword,\n      schema = cxt.schema,\n      parentSchema = cxt.parentSchema,\n      it = cxt.it;\n  var macroSchema = def.macro.call(it.self, schema, parentSchema, it);\n  var schemaRef = useKeyword(gen, keyword, macroSchema);\n  if (it.opts.validateSchema !== false) it.self.validateSchema(macroSchema, true);\n  var valid = gen.name(\"valid\");\n  cxt.subschema({\n    schema: macroSchema,\n    schemaPath: codegen_1.nil,\n    errSchemaPath: \"\".concat(it.errSchemaPath, \"/\").concat(keyword),\n    topSchemaRef: schemaRef,\n    compositeRule: true\n  }, valid);\n  cxt.pass(valid, function () {\n    return cxt.error(true);\n  });\n}\n\nexports.macroKeywordCode = macroKeywordCode;\n\nfunction funcKeywordCode(cxt, def) {\n  var _a;\n\n  var gen = cxt.gen,\n      keyword = cxt.keyword,\n      schema = cxt.schema,\n      parentSchema = cxt.parentSchema,\n      $data = cxt.$data,\n      it = cxt.it;\n  checkAsyncKeyword(it, def);\n  var validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;\n  var validateRef = useKeyword(gen, keyword, validate);\n  var valid = gen.let(\"valid\");\n  cxt.block$data(valid, validateKeyword);\n  cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);\n\n  function validateKeyword() {\n    if (def.errors === false) {\n      assignValid();\n      if (def.modifying) modifyData(cxt);\n      reportErrs(function () {\n        return cxt.error();\n      });\n    } else {\n      var ruleErrs = def.async ? validateAsync() : validateSync();\n      if (def.modifying) modifyData(cxt);\n      reportErrs(function () {\n        return addErrs(cxt, ruleErrs);\n      });\n    }\n  }\n\n  function validateAsync() {\n    var ruleErrs = gen.let(\"ruleErrs\", null);\n    gen.try(function () {\n      return assignValid((0, codegen_1._)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"await \"]))));\n    }, function (e) {\n      return gen.assign(valid, false).if((0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\", \" instanceof \", \"\"])), e, it.ValidationError), function () {\n        return gen.assign(ruleErrs, (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \".errors\"])), e));\n      }, function () {\n        return gen.throw(e);\n      });\n    });\n    return ruleErrs;\n  }\n\n  function validateSync() {\n    var validateErrs = (0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \".errors\"])), validateRef);\n    gen.assign(validateErrs, null);\n    assignValid(codegen_1.nil);\n    return validateErrs;\n  }\n\n  function assignValid() {\n    var _await = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : def.async ? (0, codegen_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"await \"]))) : codegen_1.nil;\n\n    var passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;\n    var passSchema = !(\"compile\" in def && !$data || def.schema === false);\n    gen.assign(valid, (0, codegen_1._)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\", \"\", \"\"])), _await, (0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)), def.modifying);\n  }\n\n  function reportErrs(errors) {\n    var _a;\n\n    gen.if((0, codegen_1.not)((_a = def.valid) !== null && _a !== void 0 ? _a : valid), errors);\n  }\n}\n\nexports.funcKeywordCode = funcKeywordCode;\n\nfunction modifyData(cxt) {\n  var gen = cxt.gen,\n      data = cxt.data,\n      it = cxt.it;\n  gen.if(it.parentData, function () {\n    return gen.assign(data, (0, codegen_1._)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\", \"[\", \"]\"])), it.parentData, it.parentDataProperty));\n  });\n}\n\nfunction addErrs(cxt, errs) {\n  var gen = cxt.gen;\n  gen.if((0, codegen_1._)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"Array.isArray(\", \")\"])), errs), function () {\n    gen.assign(names_1.default.vErrors, (0, codegen_1._)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"\", \" === null ? \", \" : \", \".concat(\", \")\"])), names_1.default.vErrors, errs, names_1.default.vErrors, errs)).assign(names_1.default.errors, (0, codegen_1._)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"\", \".length\"])), names_1.default.vErrors));\n    (0, errors_1.extendErrors)(cxt);\n  }, function () {\n    return cxt.error();\n  });\n}\n\nfunction checkAsyncKeyword(_ref, def) {\n  var schemaEnv = _ref.schemaEnv;\n  if (def.async && !schemaEnv.$async) throw new Error(\"async keyword in sync schema\");\n}\n\nfunction useKeyword(gen, keyword, result) {\n  if (result === undefined) throw new Error(\"keyword \\\"\".concat(keyword, \"\\\" failed to compile\"));\n  return gen.scopeValue(\"keyword\", typeof result == \"function\" ? {\n    ref: result\n  } : {\n    ref: result,\n    code: (0, codegen_1.stringify)(result)\n  });\n}\n\nfunction validSchemaType(schema, schemaType) {\n  var allowUndefined = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // TODO add tests\n  return !schemaType.length || schemaType.some(function (st) {\n    return st === \"array\" ? Array.isArray(schema) : st === \"object\" ? schema && typeof schema == \"object\" && !Array.isArray(schema) : typeof schema == st || allowUndefined && typeof schema == \"undefined\";\n  });\n}\n\nexports.validSchemaType = validSchemaType;\n\nfunction validateKeywordUsage(_ref2, def, keyword) {\n  var schema = _ref2.schema,\n      opts = _ref2.opts,\n      self = _ref2.self,\n      errSchemaPath = _ref2.errSchemaPath;\n\n  /* istanbul ignore if */\n  if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {\n    throw new Error(\"ajv implementation error\");\n  }\n\n  var deps = def.dependencies;\n\n  if (deps === null || deps === void 0 ? void 0 : deps.some(function (kwd) {\n    return !Object.prototype.hasOwnProperty.call(schema, kwd);\n  })) {\n    throw new Error(\"parent schema must have dependencies of \".concat(keyword, \": \").concat(deps.join(\",\")));\n  }\n\n  if (def.validateSchema) {\n    var valid = def.validateSchema(schema[keyword]);\n\n    if (!valid) {\n      var msg = \"keyword \\\"\".concat(keyword, \"\\\" value is invalid at path \\\"\").concat(errSchemaPath, \"\\\": \") + self.errorsText(def.validateSchema.errors);\n      if (opts.validateSchema === \"log\") self.logger.error(msg);else throw new Error(msg);\n    }\n  }\n}\n\nexports.validateKeywordUsage = validateKeywordUsage;","map":null,"metadata":{},"sourceType":"script"}