{"ast":null,"code":"/** @hidden */\nvar WebGLPipelineContext =\n/** @class */\nfunction () {\n  function WebGLPipelineContext() {\n    this.vertexCompilationError = null;\n    this.fragmentCompilationError = null;\n    this.programLinkError = null;\n    this.programValidationError = null;\n  }\n\n  Object.defineProperty(WebGLPipelineContext.prototype, \"isAsync\", {\n    get: function get() {\n      return this.isParallelCompiled;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebGLPipelineContext.prototype, \"isReady\", {\n    get: function get() {\n      if (this.program) {\n        if (this.isParallelCompiled) {\n          return this.engine._isRenderingStateCompiled(this);\n        }\n\n        return true;\n      }\n\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WebGLPipelineContext.prototype._handlesSpectorRebuildCallback = function (onCompiled) {\n    if (onCompiled && this.program) {\n      onCompiled(this.program);\n    }\n  };\n\n  WebGLPipelineContext.prototype._getVertexShaderCode = function () {\n    return this.vertexShader ? this.engine._getShaderSource(this.vertexShader) : null;\n  };\n\n  WebGLPipelineContext.prototype._getFragmentShaderCode = function () {\n    return this.fragmentShader ? this.engine._getShaderSource(this.fragmentShader) : null;\n  };\n\n  return WebGLPipelineContext;\n}();\n\nexport { WebGLPipelineContext };","map":null,"metadata":{},"sourceType":"module"}