{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\nimport { Observable } from \"../../Misc/observable\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\n/**\r\n * A module that will automatically disable background meshes when entering AR and will enable them when leaving AR.\r\n */\n\nvar WebXRBackgroundRemover =\n/** @class */\nfunction (_super) {\n  __extends(WebXRBackgroundRemover, _super);\n  /**\r\n   * constructs a new background remover module\r\n   * @param _xrSessionManager the session manager for this module\r\n   * @param options read-only options to be used in this module\r\n   */\n\n\n  function WebXRBackgroundRemover(_xrSessionManager,\n  /**\r\n   * read-only options to be used in this module\r\n   */\n  options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, _xrSessionManager) || this;\n\n    _this.options = options;\n    /**\r\n     * registered observers will be triggered when the background state changes\r\n     */\n\n    _this.onBackgroundStateChangedObservable = new Observable();\n    return _this;\n  }\n  /**\r\n   * attach this feature\r\n   * Will usually be called by the features manager\r\n   *\r\n   * @returns true if successful.\r\n   */\n\n\n  WebXRBackgroundRemover.prototype.attach = function () {\n    this._setBackgroundState(false);\n\n    return _super.prototype.attach.call(this);\n  };\n  /**\r\n   * detach this feature.\r\n   * Will usually be called by the features manager\r\n   *\r\n   * @returns true if successful.\r\n   */\n\n\n  WebXRBackgroundRemover.prototype.detach = function () {\n    this._setBackgroundState(true);\n\n    return _super.prototype.detach.call(this);\n  };\n  /**\r\n   * Dispose this feature and all of the resources attached\r\n   */\n\n\n  WebXRBackgroundRemover.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.onBackgroundStateChangedObservable.clear();\n  };\n\n  WebXRBackgroundRemover.prototype._onXRFrame = function (_xrFrame) {// no-op\n  };\n\n  WebXRBackgroundRemover.prototype._setBackgroundState = function (newState) {\n    var scene = this._xrSessionManager.scene;\n\n    if (!this.options.ignoreEnvironmentHelper) {\n      if (this.options.environmentHelperRemovalFlags) {\n        if (this.options.environmentHelperRemovalFlags.skyBox) {\n          var backgroundSkybox = scene.getMeshByName(\"BackgroundSkybox\");\n\n          if (backgroundSkybox) {\n            backgroundSkybox.setEnabled(newState);\n          }\n        }\n\n        if (this.options.environmentHelperRemovalFlags.ground) {\n          var backgroundPlane = scene.getMeshByName(\"BackgroundPlane\");\n\n          if (backgroundPlane) {\n            backgroundPlane.setEnabled(newState);\n          }\n        }\n      } else {\n        var backgroundHelper = scene.getMeshByName(\"BackgroundHelper\");\n\n        if (backgroundHelper) {\n          backgroundHelper.setEnabled(newState);\n        }\n      }\n    }\n\n    if (this.options.backgroundMeshes) {\n      this.options.backgroundMeshes.forEach(function (mesh) {\n        return mesh.setEnabled(newState);\n      });\n    }\n\n    this.onBackgroundStateChangedObservable.notifyObservers(newState);\n  };\n  /**\r\n   * The module's name\r\n   */\n\n\n  WebXRBackgroundRemover.Name = WebXRFeatureName.BACKGROUND_REMOVER;\n  /**\r\n   * The (Babylon) version of this module.\r\n   * This is an integer representing the implementation version.\r\n   * This number does not correspond to the WebXR specs version\r\n   */\n\n  WebXRBackgroundRemover.Version = 1;\n  return WebXRBackgroundRemover;\n}(WebXRAbstractFeature);\n\nexport { WebXRBackgroundRemover }; //register the plugin\n\nWebXRFeaturesManager.AddWebXRFeature(WebXRBackgroundRemover.Name, function (xrSessionManager, options) {\n  return function () {\n    return new WebXRBackgroundRemover(xrSessionManager, options);\n  };\n}, WebXRBackgroundRemover.Version, true);","map":null,"metadata":{},"sourceType":"module"}