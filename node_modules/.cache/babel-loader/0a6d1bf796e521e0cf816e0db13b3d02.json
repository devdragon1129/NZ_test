{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContentHashTree = void 0;\n\nvar merkle_tree_1 = __importDefault(require(\"./merkle-tree\"));\n\nvar ethers_1 = require(\"ethers\");\n\nvar ContentHashTree = /*#__PURE__*/function () {\n  function ContentHashTree(contentHashes) {\n    _classCallCheck(this, ContentHashTree);\n\n    this.tree = new merkle_tree_1.default(contentHashes.map(function (contentHash, index) {\n      return ContentHashTree.toNode(index, contentHash);\n    }));\n  }\n\n  _createClass(ContentHashTree, [{\n    key: \"getHexRoot\",\n    value: function getHexRoot() {\n      return this.tree.getHexRoot();\n    } // returns the hex bytes32 values of the proof\n\n  }, {\n    key: \"getProof\",\n    value: function getProof(index, contentHash) {\n      return this.tree.getHexProof(ContentHashTree.toNode(index, contentHash));\n    }\n  }], [{\n    key: \"verifyProof\",\n    value: function verifyProof(index, contentHash, proof, root) {\n      var pair = ContentHashTree.toNode(index, contentHash);\n\n      var _iterator = _createForOfIteratorHelper(proof),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          pair = merkle_tree_1.default.combinedHash(pair, item);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return pair.equals(root);\n    } // keccak256(abi.encode(index, contentHash))\n\n  }, {\n    key: \"toNode\",\n    value: function toNode(index, contentHash) {\n      return Buffer.from(ethers_1.utils.solidityKeccak256(['uint256', 'string'], [index, contentHash]).substr(2), 'hex');\n    }\n  }]);\n\n  return ContentHashTree;\n}();\n\nexports.ContentHashTree = ContentHashTree;","map":null,"metadata":{},"sourceType":"script"}