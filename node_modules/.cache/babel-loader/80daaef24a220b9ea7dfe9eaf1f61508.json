{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\n/**\r\n * Block used to test if the fragment shader is front facing\r\n */\n\nvar FrontFacingBlock =\n/** @class */\nfunction (_super) {\n  __extends(FrontFacingBlock, _super);\n  /**\r\n   * Creates a new FrontFacingBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function FrontFacingBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  FrontFacingBlock.prototype.getClassName = function () {\n    return \"FrontFacingBlock\";\n  };\n\n  Object.defineProperty(FrontFacingBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FrontFacingBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      throw \"FrontFacingBlock must only be used in a fragment shader\";\n    }\n\n    var output = this._outputs[0];\n    state.compilationString += this._declareOutput(output, state) + \" = gl_FrontFacing ? 1.0 : 0.0;\\r\\n\";\n    return this;\n  };\n\n  return FrontFacingBlock;\n}(NodeMaterialBlock);\n\nexport { FrontFacingBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.FrontFacingBlock\"] = FrontFacingBlock;","map":null,"metadata":{},"sourceType":"module"}