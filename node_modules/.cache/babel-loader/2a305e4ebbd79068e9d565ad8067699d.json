{"ast":null,"code":"import _taggedTemplateLiteral from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _templateObject, _templateObject2;\n\nimport { gql } from 'apollo-boost';\nexport var LandType;\n\n(function (LandType) {\n  LandType[\"PARCEL\"] = \"parcel\";\n  LandType[\"ESTATE\"] = \"estate\";\n})(LandType || (LandType = {}));\n\nexport var RoleType;\n\n(function (RoleType) {\n  RoleType[\"OWNER\"] = \"owner\";\n  RoleType[\"OPERATOR\"] = \"operator\";\n})(RoleType || (RoleType = {}));\n\nexport var parcelFields = function parcelFields() {\n  return gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  fragment parcelFields on Parcel {\\n    x\\n    y\\n    tokenId\\n    owner {\\n      address\\n    }\\n    updateOperator\\n    data {\\n      name\\n      description\\n    }\\n  }\\n\"])));\n};\nexport var estateFields = function estateFields() {\n  return gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n  fragment estateFields on Estate {\\n    id\\n    owner {\\n      address\\n    }\\n    updateOperator\\n    size\\n    parcels(first: 1000) {\\n      x\\n      y\\n      tokenId\\n    }\\n    data {\\n      name\\n      description\\n    }\\n  }\\n\"])));\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/land/types.ts"],"names":["gql","LandType","RoleType","parcelFields","estateFields"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,cAApB;AAGA,WAAYC,QAAZ;;WAAYA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;GAAAA,Q,KAAAA,Q;;AAKZ,WAAYC,QAAZ;;WAAYA,Q;AAAAA,EAAAA,Q;AAAAA,EAAAA,Q;GAAAA,Q,KAAAA,Q;;AAwBZ,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA,SAAMH,GAAN;AAAA,CAArB;AA8BP,OAAO,IAAMI,YAAY,GAAG,SAAfA,YAAe;AAAA,SAAMJ,GAAN;AAAA,CAArB","sourcesContent":["import { gql } from 'apollo-boost'\nimport { Tile } from 'react-tile-map/lib/src/lib/common'\n\nexport enum LandType {\n  PARCEL = 'parcel',\n  ESTATE = 'estate'\n}\n\nexport enum RoleType {\n  OWNER = 'owner',\n  OPERATOR = 'operator'\n}\n\nexport type Land = {\n  id: string\n  type: LandType\n  role: RoleType\n  x?: number\n  y?: number\n  parcels?: { x: number; y: number; id: string }[]\n  size?: number\n  name: string\n  description: string | null\n  owner: string\n  operators: string[]\n}\n\nexport type Authorization = {\n  address: string\n  type: LandType\n}\n\nexport const parcelFields = () => gql`\n  fragment parcelFields on Parcel {\n    x\n    y\n    tokenId\n    owner {\n      address\n    }\n    updateOperator\n    data {\n      name\n      description\n    }\n  }\n`\n\nexport type ParcelFields = {\n  x: string\n  y: string\n  tokenId: string\n  owner: {\n    address: string\n  }\n  updateOperator: string | null\n  data: {\n    name: string | null\n    description: string | null\n  } | null\n}\n\nexport const estateFields = () => gql`\n  fragment estateFields on Estate {\n    id\n    owner {\n      address\n    }\n    updateOperator\n    size\n    parcels(first: 1000) {\n      x\n      y\n      tokenId\n    }\n    data {\n      name\n      description\n    }\n  }\n`\n\nexport type EstateFields = {\n  id: string\n  owner: {\n    address: string\n  }\n  updateOperator: string | null\n  size: number\n  parcels: Pick<ParcelFields, 'x' | 'y' | 'tokenId'>[]\n  data: {\n    name: string | null\n    description: string | null\n  } | null\n}\n\nexport type LandTile = Tile & { land: Land }\n"]},"metadata":{},"sourceType":"module"}