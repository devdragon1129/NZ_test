{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\n/**\r\n  * Block used for the particle blend multiply section\r\n  */\n\nvar ParticleBlendMultiplyBlock =\n/** @class */\nfunction (_super) {\n  __extends(ParticleBlendMultiplyBlock, _super);\n  /**\r\n   * Create a new ParticleBlendMultiplyBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function ParticleBlendMultiplyBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this._isUnique = true;\n\n    _this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"alphaTexture\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"alphaColor\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"blendColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  ParticleBlendMultiplyBlock.prototype.getClassName = function () {\n    return \"ParticleBlendMultiplyBlock\";\n  };\n\n  Object.defineProperty(ParticleBlendMultiplyBlock.prototype, \"color\", {\n    /**\r\n     * Gets the color input component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParticleBlendMultiplyBlock.prototype, \"alphaTexture\", {\n    /**\r\n     * Gets the alphaTexture input component\r\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParticleBlendMultiplyBlock.prototype, \"alphaColor\", {\n    /**\r\n     * Gets the alphaColor input component\r\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParticleBlendMultiplyBlock.prototype, \"blendColor\", {\n    /**\r\n     * Gets the blendColor output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Initialize the block and prepare the context for build\r\n   * @param state defines the state that will be used for the build\r\n   */\n\n  ParticleBlendMultiplyBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"sourceAlpha\");\n  };\n\n  ParticleBlendMultiplyBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      return;\n    }\n\n    state.compilationString += \"\\n            #ifdef BLENDMULTIPLYMODE\\n                \" + this._declareOutput(this.blendColor, state) + \";\\n                float sourceAlpha = \" + this.alphaColor.associatedVariableName + \" * \" + this.alphaTexture.associatedVariableName + \";\\n                \" + this.blendColor.associatedVariableName + \".rgb = \" + this.color.associatedVariableName + \".rgb * sourceAlpha + vec3(1.0) * (1.0 - sourceAlpha);\\n                \" + this.blendColor.associatedVariableName + \".a = \" + this.color.associatedVariableName + \".a;\\n            #else\\n                \" + this._declareOutput(this.blendColor, state) + \" = \" + this.color.associatedVariableName + \";\\n            #endif\\n        \";\n    return this;\n  };\n\n  return ParticleBlendMultiplyBlock;\n}(NodeMaterialBlock);\n\nexport { ParticleBlendMultiplyBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.ParticleBlendMultiplyBlock\"] = ParticleBlendMultiplyBlock;","map":null,"metadata":{},"sourceType":"module"}