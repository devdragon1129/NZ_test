{"ast":null,"code":"import _slicedToArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked25 = /*#__PURE__*/_regeneratorRuntime.mark(collectionSaga);\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport PQueue from 'p-queue';\nimport { Contract, providers, constants, ethers } from 'ethers';\nimport { push, replace } from 'connected-react-router';\nimport { select, take, takeEvery, call, put, takeLatest, race, retry, delay } from 'redux-saga/effects';\nimport { generateTree } from '@dcl/content-hash-tree';\nimport { ContractName, getContract } from 'decentraland-transactions';\nimport { getOpenModals } from 'decentraland-dapps/dist/modules/modal/selectors';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { FETCH_TRANSACTION_SUCCESS } from 'decentraland-dapps/dist/modules/transaction/actions';\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { sendTransaction } from 'decentraland-dapps/dist/modules/wallet/utils';\nimport { getChainIdByNetwork, getNetworkProvider } from 'decentraland-dapps/dist/lib/eth';\nimport { Network } from '@dcl/schemas';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure, FETCH_COLLECTIONS_REQUEST, FETCH_COLLECTIONS_SUCCESS, fetchCollectionSuccess, fetchCollectionFailure, FETCH_COLLECTION_REQUEST, saveCollectionSuccess, saveCollectionFailure, SAVE_COLLECTION_REQUEST, deleteCollectionSuccess, deleteCollectionFailure, DELETE_COLLECTION_REQUEST, publishCollectionSuccess, publishCollectionFailure, PUBLISH_COLLECTION_REQUEST, setCollectionMintersSuccess, setCollectionMintersFailure, SET_COLLECTION_MINTERS_REQUEST, setCollectionManagersSuccess, setCollectionManagersFailure, SET_COLLECTION_MANAGERS_REQUEST, mintCollectionItemsSuccess, mintCollectionItemsFailure, MINT_COLLECTION_ITEMS_REQUEST, approveCollectionSuccess, approveCollectionFailure, APPROVE_COLLECTION_REQUEST, rejectCollectionSuccess, rejectCollectionFailure, REJECT_COLLECTION_REQUEST, PUBLISH_COLLECTION_SUCCESS, saveCollectionRequest, SAVE_COLLECTION_SUCCESS, SAVE_COLLECTION_FAILURE, INITIATE_APPROVAL_FLOW, APPROVE_COLLECTION_SUCCESS, APPROVE_COLLECTION_FAILURE, INITIATE_TP_APPROVAL_FLOW } from './actions';\nimport { getMethodData, getWallet } from 'modules/wallet/utils';\nimport { buildCollectionForumPost } from 'modules/forum/utils';\nimport { createCollectionForumPostRequest } from 'modules/forum/actions';\nimport { setItemsTokenIdRequest, FETCH_ITEMS_SUCCESS, SAVE_ITEM_SUCCESS, RESCUE_ITEMS_SUCCESS, RESCUE_ITEMS_FAILURE, fetchCollectionItemsRequest, FETCH_COLLECTION_ITEMS_SUCCESS, FETCH_COLLECTION_ITEMS_FAILURE, SAVE_MULTIPLE_ITEMS_SUCCESS, saveItemRequest, SAVE_ITEM_FAILURE, SET_ITEMS_TOKEN_ID_SUCCESS } from 'modules/item/actions';\nimport { areSynced, isValidText, toInitializeItems } from 'modules/item/utils';\nimport { locations } from 'routing/locations';\nimport { getCollectionId } from 'modules/location/selectors';\nimport { getArrayOfPagesFromTotal } from 'lib/api/pagination';\nimport { extractThirdPartyId } from 'lib/urn';\nimport { closeModal, CLOSE_MODAL, openModal } from 'modules/modal/actions';\nimport { EntityHashingType } from 'modules/item/types';\nimport { getEntityByItemId, getItems, getCollectionItems, getWalletItems, getData as getItemsById, getPaginationData } from 'modules/item/selectors';\nimport { getName } from 'modules/profile/selectors';\nimport { buildItemEntity, buildStandardWearableContentHash, hasOldHashedContents } from 'modules/item/export';\nimport { getCurationsByCollectionId } from 'modules/curations/collectionCuration/selectors';\nimport { approveCollectionCurationRequest, APPROVE_COLLECTION_CURATION_FAILURE, APPROVE_COLLECTION_CURATION_SUCCESS } from 'modules/curations/collectionCuration/actions';\nimport { CurationStatus } from 'modules/curations/types';\nimport { DEPLOY_BATCHED_THIRD_PARTY_ITEMS_FAILURE, DEPLOY_BATCHED_THIRD_PARTY_ITEMS_SUCCESS, REVIEW_THIRD_PARTY_FAILURE, REVIEW_THIRD_PARTY_SUCCESS } from 'modules/thirdParty/actions';\nimport { DEPLOY_ENTITIES_FAILURE, DEPLOY_ENTITIES_SUCCESS } from 'modules/entity/actions';\nimport { ApprovalFlowModalView } from 'components/Modals/ApprovalFlowModal/ApprovalFlowModal.types';\nimport { getCollection, getRaritiesContract, getWalletCollections } from './selectors';\nimport { CollectionType } from './types';\nimport { isOwner, getCollectionBaseURI, getCollectionSymbol, isLocked, getCollectionType, UNSYNCED_COLLECTION_ERROR_PREFIX, isTPCollection, getCollectionFactoryContract } from './utils';\nvar THIRD_PARTY_MERKLE_ROOT_CHECK_MAX_RETRIES = 160;\nexport function collectionSaga(legacyBuilderClient, client, catalyst) {\n  var _marked, _marked2, _marked3, _marked4, _marked5, _marked6, _marked7, _marked8, _marked9, _marked10, _marked11, _marked12, _marked13, _marked14, _marked15, _marked16, _marked17, _marked18, _marked19, _marked20, _marked21, _marked22, _marked23, _marked24, isPaginated, handleFetchCollectionsRequest, handleFetchCollectionRequest, handleSaveCollectionSuccess, handleSaveItemSuccess, handleSaveMultipleItemsSuccess, handleSaveCollectionRequest, handleDeleteCollectionRequest, handlePublishCollectionRequest, handleSetCollectionMintersRequest, handleSetCollectionManagersRequest, handleMintCollectionItemsRequest, handleApproveCollectionRequest, handleRejectCollectionRequest, handleRequestCollectionSuccess, handleTransactionSuccess, finishCollectionPublishing, publishCollection, changeCollectionStatus, getItemsFromCollection, getStandardItemsAndEntitiesToDeploy, handleInitiateTPItemsApprovalFlow, handleInitiateApprovalFlow, waitForMerkleRootToBeSet, waitForIndexer;\n\n  return _regeneratorRuntime.wrap(function collectionSaga$(_context26) {\n    while (1) {\n      switch (_context26.prev = _context26.next) {\n        case 0:\n          waitForIndexer = function _waitForIndexer(items, contentHashes, collectionId) {\n            var contentHashByItemId, i, isIndexed, itemIds, _loop;\n\n            return _regeneratorRuntime.wrap(function waitForIndexer$(_context25) {\n              while (1) {\n                switch (_context25.prev = _context25.next) {\n                  case 0:\n                    contentHashByItemId = new Map();\n\n                    for (i = 0; i < items.length; i++) {\n                      contentHashByItemId.set(items[i].id, contentHashes[i]);\n                    }\n\n                    isIndexed = false;\n                    itemIds = items.map(function (item) {\n                      return item.id;\n                    });\n                    _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                      var itemsById;\n                      return _regeneratorRuntime.wrap(function _loop$(_context24) {\n                        while (1) {\n                          switch (_context24.prev = _context24.next) {\n                            case 0:\n                              _context24.next = 2;\n                              return delay(1000);\n\n                            case 2:\n                              _context24.next = 4;\n                              return put(fetchCollectionItemsRequest(collectionId));\n\n                            case 4:\n                              _context24.next = 6;\n                              return race({\n                                success: take(FETCH_COLLECTION_ITEMS_SUCCESS),\n                                failure: take(FETCH_COLLECTION_ITEMS_FAILURE)\n                              });\n\n                            case 6:\n                              _context24.next = 8;\n                              return select(getItemsById);\n\n                            case 8:\n                              itemsById = _context24.sent;\n                              isIndexed = itemIds.every(function (id) {\n                                var indexedContentHash = itemsById[id].blockchainContentHash;\n                                var expectedContentHash = contentHashByItemId.get(id);\n                                return indexedContentHash === expectedContentHash;\n                              });\n\n                            case 10:\n                            case \"end\":\n                              return _context24.stop();\n                          }\n                        }\n                      }, _loop);\n                    });\n\n                  case 5:\n                    if (isIndexed) {\n                      _context25.next = 9;\n                      break;\n                    }\n\n                    return _context25.delegateYield(_loop(), \"t0\", 7);\n\n                  case 7:\n                    _context25.next = 5;\n                    break;\n\n                  case 9:\n                  case \"end\":\n                    return _context25.stop();\n                }\n              }\n            }, _marked24);\n          };\n\n          waitForMerkleRootToBeSet = function _waitForMerkleRootToB(thirdPartyId, merkleRoot) {\n            var i, thirdParty;\n            return _regeneratorRuntime.wrap(function waitForMerkleRootToBeSet$(_context23) {\n              while (1) {\n                switch (_context23.prev = _context23.next) {\n                  case 0:\n                    i = 0;\n\n                  case 1:\n                    if (!(i < THIRD_PARTY_MERKLE_ROOT_CHECK_MAX_RETRIES)) {\n                      _context23.next = 12;\n                      break;\n                    }\n\n                    _context23.next = 4;\n                    return call([client, 'getThirdParty'], thirdPartyId);\n\n                  case 4:\n                    thirdParty = _context23.sent;\n\n                    if (!(thirdParty.root === merkleRoot)) {\n                      _context23.next = 7;\n                      break;\n                    }\n\n                    return _context23.abrupt(\"return\");\n\n                  case 7:\n                    _context23.next = 9;\n                    return delay(1000);\n\n                  case 9:\n                    i++;\n                    _context23.next = 1;\n                    break;\n\n                  case 12:\n                    throw new Error('The Merkle Root was not set in time');\n\n                  case 13:\n                  case \"end\":\n                    return _context23.stop();\n                }\n              }\n            }, _marked23);\n          };\n\n          handleInitiateApprovalFlow = function _handleInitiateApprov(action) {\n            var collection, modalMetadata, itemsToRescue, contentHashes, items, _iterator7, _step7, item, v0ContentHash, v1ContentHash, _modalMetadata3, _yield$race3, success, failure, cancel, _yield$call2, itemsToDeploy, entitiesToDeploy, _modalMetadata4, _yield$race4, _failure2, _cancel2, _modalMetadata5, _yield$race5, _failure3, _cancel3, curationsByCollectionId, curation, _yield$race6, _failure4, _modalMetadata6, _modalMetadata7;\n\n            return _regeneratorRuntime.wrap(function handleInitiateApprovalFlow$(_context22) {\n              while (1) {\n                switch (_context22.prev = _context22.next) {\n                  case 0:\n                    collection = action.payload.collection;\n                    _context22.prev = 1;\n\n                    if (collection.isPublished) {\n                      _context22.next = 4;\n                      break;\n                    }\n\n                    throw new Error(\"The collection can't be approved because it's not published\");\n\n                  case 4:\n                    // 1. Open modal\n                    modalMetadata = {\n                      view: ApprovalFlowModalView.LOADING,\n                      collection: collection\n                    };\n                    _context22.next = 7;\n                    return put(openModal('ApprovalFlowModal', modalMetadata));\n\n                  case 7:\n                    // 2. Find items that need to be rescued (their content hash needs to be updated)\n                    itemsToRescue = [];\n                    contentHashes = [];\n                    _context22.next = 11;\n                    return getItemsFromCollection(collection);\n\n                  case 11:\n                    items = _context22.sent;\n\n                    if (!items.some(function (item) {\n                      return !item.tokenId;\n                    })) {\n                      _context22.next = 20;\n                      break;\n                    }\n\n                    _context22.next = 15;\n                    return put(setItemsTokenIdRequest(collection, items));\n\n                  case 15:\n                    _context22.next = 17;\n                    return take(SET_ITEMS_TOKEN_ID_SUCCESS);\n\n                  case 17:\n                    _context22.next = 19;\n                    return getItemsFromCollection(collection);\n\n                  case 19:\n                    items = _context22.sent;\n\n                  case 20:\n                    _iterator7 = _createForOfIteratorHelper(items);\n                    _context22.prev = 21;\n\n                    _iterator7.s();\n\n                  case 23:\n                    if ((_step7 = _iterator7.n()).done) {\n                      _context22.next = 38;\n                      break;\n                    }\n\n                    item = _step7.value;\n\n                    if (item.currentContentHash) {\n                      _context22.next = 35;\n                      break;\n                    }\n\n                    _context22.next = 28;\n                    return call(buildStandardWearableContentHash, collection, item, EntityHashingType.V0);\n\n                  case 28:\n                    v0ContentHash = _context22.sent;\n                    _context22.next = 31;\n                    return call(buildStandardWearableContentHash, collection, item, EntityHashingType.V1);\n\n                  case 31:\n                    v1ContentHash = _context22.sent;\n\n                    // As there could be older hashes in the blockchain, check if both of them are different to see if they need an update\n                    if (v0ContentHash !== item.blockchainContentHash && v1ContentHash !== item.blockchainContentHash) {\n                      itemsToRescue.push(item);\n                      contentHashes.push(v1ContentHash);\n                    }\n\n                    _context22.next = 36;\n                    break;\n\n                  case 35:\n                    if (item.currentContentHash !== item.blockchainContentHash) {\n                      itemsToRescue.push(item);\n                      contentHashes.push(item.currentContentHash);\n                    }\n\n                  case 36:\n                    _context22.next = 23;\n                    break;\n\n                  case 38:\n                    _context22.next = 43;\n                    break;\n\n                  case 40:\n                    _context22.prev = 40;\n                    _context22.t0 = _context22[\"catch\"](21);\n\n                    _iterator7.e(_context22.t0);\n\n                  case 43:\n                    _context22.prev = 43;\n\n                    _iterator7.f();\n\n                    return _context22.finish(43);\n\n                  case 46:\n                    if (!(itemsToRescue.length > 0)) {\n                      _context22.next = 67;\n                      break;\n                    }\n\n                    _modalMetadata3 = {\n                      view: ApprovalFlowModalView.RESCUE,\n                      collection: collection,\n                      items: itemsToRescue,\n                      contentHashes: contentHashes\n                    };\n                    _context22.next = 50;\n                    return put(openModal('ApprovalFlowModal', _modalMetadata3));\n\n                  case 50:\n                    _context22.next = 52;\n                    return race({\n                      success: take(RESCUE_ITEMS_SUCCESS),\n                      failure: take(RESCUE_ITEMS_FAILURE),\n                      cancel: take(CLOSE_MODAL)\n                    });\n\n                  case 52:\n                    _yield$race3 = _context22.sent;\n                    success = _yield$race3.success;\n                    failure = _yield$race3.failure;\n                    cancel = _yield$race3.cancel;\n\n                    if (!success) {\n                      _context22.next = 61;\n                      break;\n                    }\n\n                    _context22.next = 59;\n                    return waitForIndexer(itemsToRescue, contentHashes, collection.id);\n\n                  case 59:\n                    _context22.next = 67;\n                    break;\n\n                  case 61:\n                    if (!failure) {\n                      _context22.next = 65;\n                      break;\n                    }\n\n                    throw new Error(failure.payload.error);\n\n                  case 65:\n                    if (!cancel) {\n                      _context22.next = 67;\n                      break;\n                    }\n\n                    return _context22.abrupt(\"return\");\n\n                  case 67:\n                    _context22.next = 69;\n                    return call(getStandardItemsAndEntitiesToDeploy, collection);\n\n                  case 69:\n                    _yield$call2 = _context22.sent;\n                    itemsToDeploy = _yield$call2.itemsToDeploy;\n                    entitiesToDeploy = _yield$call2.entitiesToDeploy;\n\n                    if (!(itemsToDeploy.length > 0)) {\n                      _context22.next = 87;\n                      break;\n                    }\n\n                    _modalMetadata4 = {\n                      view: ApprovalFlowModalView.DEPLOY,\n                      collection: collection,\n                      items: itemsToDeploy,\n                      entities: entitiesToDeploy\n                    };\n                    _context22.next = 76;\n                    return put(openModal('ApprovalFlowModal', _modalMetadata4));\n\n                  case 76:\n                    _context22.next = 78;\n                    return race({\n                      success: take(DEPLOY_ENTITIES_SUCCESS),\n                      failure: take(DEPLOY_ENTITIES_FAILURE),\n                      cancel: take(CLOSE_MODAL)\n                    });\n\n                  case 78:\n                    _yield$race4 = _context22.sent;\n                    _failure2 = _yield$race4.failure;\n                    _cancel2 = _yield$race4.cancel;\n\n                    if (!_failure2) {\n                      _context22.next = 85;\n                      break;\n                    }\n\n                    throw new Error(_failure2.payload.error);\n\n                  case 85:\n                    if (!_cancel2) {\n                      _context22.next = 87;\n                      break;\n                    }\n\n                    return _context22.abrupt(\"return\");\n\n                  case 87:\n                    if (collection.isApproved) {\n                      _context22.next = 104;\n                      break;\n                    }\n\n                    _modalMetadata5 = {\n                      view: ApprovalFlowModalView.APPROVE,\n                      collection: collection\n                    };\n                    _context22.next = 91;\n                    return put(openModal('ApprovalFlowModal', _modalMetadata5));\n\n                  case 91:\n                    _context22.next = 93;\n                    return race({\n                      success: take(APPROVE_COLLECTION_SUCCESS),\n                      failure: take(APPROVE_COLLECTION_FAILURE),\n                      cancel: take(CLOSE_MODAL)\n                    });\n\n                  case 93:\n                    _yield$race5 = _context22.sent;\n                    _failure3 = _yield$race5.failure;\n                    _cancel3 = _yield$race5.cancel;\n\n                    if (!_failure3) {\n                      _context22.next = 100;\n                      break;\n                    }\n\n                    throw new Error(_failure3.payload.error);\n\n                  case 100:\n                    if (!_cancel3) {\n                      _context22.next = 102;\n                      break;\n                    }\n\n                    return _context22.abrupt(\"return\");\n\n                  case 102:\n                    _context22.next = 120;\n                    break;\n\n                  case 104:\n                    _context22.next = 106;\n                    return select(getCurationsByCollectionId);\n\n                  case 106:\n                    curationsByCollectionId = _context22.sent;\n                    curation = curationsByCollectionId[collection.id];\n\n                    if (!(curation && curation.status === CurationStatus.PENDING)) {\n                      _context22.next = 120;\n                      break;\n                    }\n\n                    _context22.next = 111;\n                    return put(approveCollectionCurationRequest(curation.collectionId));\n\n                  case 111:\n                    _context22.next = 113;\n                    return race({\n                      success: take(APPROVE_COLLECTION_CURATION_SUCCESS),\n                      failure: take(APPROVE_COLLECTION_CURATION_FAILURE)\n                    });\n\n                  case 113:\n                    _yield$race6 = _context22.sent;\n                    _failure4 = _yield$race6.failure;\n\n                    if (!_failure4) {\n                      _context22.next = 120;\n                      break;\n                    }\n\n                    _modalMetadata6 = {\n                      view: ApprovalFlowModalView.ERROR,\n                      collection: collection,\n                      error: _failure4.payload.error\n                    };\n                    _context22.next = 119;\n                    return put(openModal('ApprovalFlowModal', _modalMetadata6));\n\n                  case 119:\n                    return _context22.abrupt(\"return\");\n\n                  case 120:\n                    _context22.next = 122;\n                    return put(openModal('ApprovalFlowModal', {\n                      view: ApprovalFlowModalView.SUCCESS,\n                      collection: collection\n                    }));\n\n                  case 122:\n                    _context22.next = 129;\n                    break;\n\n                  case 124:\n                    _context22.prev = 124;\n                    _context22.t1 = _context22[\"catch\"](1);\n                    // Handle error at any point in the flow and show them\n                    _modalMetadata7 = {\n                      view: ApprovalFlowModalView.ERROR,\n                      collection: collection,\n                      error: _context22.t1.message\n                    };\n                    _context22.next = 129;\n                    return put(openModal('ApprovalFlowModal', _modalMetadata7));\n\n                  case 129:\n                  case \"end\":\n                    return _context22.stop();\n                }\n              }\n            }, _marked22, null, [[1, 124], [21, 40, 43, 46]]);\n          };\n\n          handleInitiateTPItemsApprovalFlow = function _handleInitiateTPItem(action) {\n            var collection, paginatedData, BATCH_SIZE, REQUESTS_BATCH_SIZE, pages, queue, promisesOfPagesToFetch, allItemPages, itemsWithPendingCurations, _yield$call, cheque, contentHashes, chequeWasConsumed, root, tree, amountOfItemsToPublish, _ethers$utils$splitSi, r, s, v, slot, modalMetadata, _yield$race, failure, cancel, _modalMetadata, _yield$race2, _failure, _cancel, _modalMetadata2;\n\n            return _regeneratorRuntime.wrap(function handleInitiateTPItemsApprovalFlow$(_context21) {\n              while (1) {\n                switch (_context21.prev = _context21.next) {\n                  case 0:\n                    collection = action.payload.collection;\n                    _context21.prev = 1;\n\n                    if (collection.isPublished) {\n                      _context21.next = 4;\n                      break;\n                    }\n\n                    throw new Error(\"The collection can't be approved because it's not published\");\n\n                  case 4:\n                    _context21.next = 6;\n                    return put(openModal('ApprovalFlowModal', {\n                      view: ApprovalFlowModalView.LOADING,\n                      collection: collection\n                    }));\n\n                  case 6:\n                    _context21.next = 8;\n                    return select(getPaginationData, collection.id);\n\n                  case 8:\n                    paginatedData = _context21.sent;\n                    BATCH_SIZE = 50;\n                    REQUESTS_BATCH_SIZE = 10;\n                    pages = getArrayOfPagesFromTotal(Math.ceil(paginatedData.total / BATCH_SIZE));\n                    queue = new PQueue({\n                      concurrency: REQUESTS_BATCH_SIZE\n                    });\n                    promisesOfPagesToFetch = pages.map(function (page) {\n                      return function () {\n                        return legacyBuilderClient.fetchCollectionItems(collection.id, {\n                          page: page,\n                          limit: BATCH_SIZE,\n                          status: CurationStatus.PENDING\n                        });\n                      };\n                    }); // TODO: try to convert this to a generator so we can test it's called with the right parameters\n\n                    _context21.next = 16;\n                    return queue.addAll(promisesOfPagesToFetch);\n\n                  case 16:\n                    allItemPages = _context21.sent;\n                    itemsWithPendingCurations = allItemPages.flatMap(function (result) {\n                      return result.results;\n                    });\n\n                    if (itemsWithPendingCurations.length) {\n                      _context21.next = 20;\n                      break;\n                    }\n\n                    throw Error('Error fetching items to approve');\n\n                  case 20:\n                    _context21.next = 22;\n                    return call([legacyBuilderClient, 'fetchApprovalData'], collection.id);\n\n                  case 22:\n                    _yield$call = _context21.sent;\n                    cheque = _yield$call.cheque;\n                    contentHashes = _yield$call.content_hashes;\n                    chequeWasConsumed = _yield$call.chequeWasConsumed;\n                    root = _yield$call.root;\n                    // 3. Compute the merkle tree root & create slot to consume\n                    tree = generateTree(Object.values(contentHashes));\n                    amountOfItemsToPublish = itemsWithPendingCurations.filter(function (item) {\n                      return !item.isApproved;\n                    }).length;\n\n                    if (!(cheque.qty < amountOfItemsToPublish)) {\n                      _context21.next = 31;\n                      break;\n                    }\n\n                    throw Error('Invalid qty of items to approve in the cheque');\n\n                  case 31:\n                    if (!(root !== tree.merkleRoot)) {\n                      _context21.next = 50;\n                      break;\n                    }\n\n                    _ethers$utils$splitSi = ethers.utils.splitSignature(cheque.signature), r = _ethers$utils$splitSi.r, s = _ethers$utils$splitSi.s, v = _ethers$utils$splitSi.v;\n                    slot = {\n                      qty: cheque.qty,\n                      salt: cheque.salt,\n                      sigR: r,\n                      sigS: s,\n                      sigV: v\n                    };\n                    modalMetadata = {\n                      view: ApprovalFlowModalView.CONSUME_TP_SLOTS,\n                      items: itemsWithPendingCurations,\n                      collection: collection,\n                      merkleTreeRoot: tree.merkleRoot,\n                      slots: chequeWasConsumed ? [] : [slot]\n                    };\n                    _context21.next = 37;\n                    return put(openModal('ApprovalFlowModal', modalMetadata));\n\n                  case 37:\n                    _context21.next = 39;\n                    return race({\n                      success: take(REVIEW_THIRD_PARTY_SUCCESS),\n                      failure: take(REVIEW_THIRD_PARTY_FAILURE),\n                      cancel: take(CLOSE_MODAL)\n                    });\n\n                  case 39:\n                    _yield$race = _context21.sent;\n                    failure = _yield$race.failure;\n                    cancel = _yield$race.cancel;\n\n                    if (!failure) {\n                      _context21.next = 46;\n                      break;\n                    }\n\n                    throw new Error(failure.payload.error);\n\n                  case 46:\n                    if (!cancel) {\n                      _context21.next = 48;\n                      break;\n                    }\n\n                    return _context21.abrupt(\"return\");\n\n                  case 48:\n                    _context21.next = 50;\n                    return waitForMerkleRootToBeSet(extractThirdPartyId(collection.urn), tree.merkleRoot);\n\n                  case 50:\n                    if (!(itemsWithPendingCurations.length > 0)) {\n                      _context21.next = 65;\n                      break;\n                    }\n\n                    _modalMetadata = {\n                      view: ApprovalFlowModalView.DEPLOY_TP,\n                      collection: collection,\n                      tree: tree,\n                      items: itemsWithPendingCurations,\n                      hashes: contentHashes\n                    };\n                    _context21.next = 54;\n                    return put(openModal('ApprovalFlowModal', _modalMetadata));\n\n                  case 54:\n                    _context21.next = 56;\n                    return race({\n                      success: take(DEPLOY_BATCHED_THIRD_PARTY_ITEMS_SUCCESS),\n                      failure: take(DEPLOY_BATCHED_THIRD_PARTY_ITEMS_FAILURE),\n                      cancel: take(CLOSE_MODAL)\n                    });\n\n                  case 56:\n                    _yield$race2 = _context21.sent;\n                    _failure = _yield$race2.failure;\n                    _cancel = _yield$race2.cancel;\n\n                    if (!_failure) {\n                      _context21.next = 63;\n                      break;\n                    }\n\n                    throw new Error(_failure.payload.error);\n\n                  case 63:\n                    if (!_cancel) {\n                      _context21.next = 65;\n                      break;\n                    }\n\n                    return _context21.abrupt(\"return\");\n\n                  case 65:\n                    _context21.next = 67;\n                    return put(openModal('ApprovalFlowModal', {\n                      view: ApprovalFlowModalView.SUCCESS,\n                      collection: collection\n                    }));\n\n                  case 67:\n                    _context21.next = 74;\n                    break;\n\n                  case 69:\n                    _context21.prev = 69;\n                    _context21.t0 = _context21[\"catch\"](1);\n                    // Handle error at any point in the flow and show them\n                    _modalMetadata2 = {\n                      view: ApprovalFlowModalView.ERROR,\n                      collection: collection,\n                      error: _context21.t0.message\n                    };\n                    _context21.next = 74;\n                    return put(openModal('ApprovalFlowModal', _modalMetadata2));\n\n                  case 74:\n                  case \"end\":\n                    return _context21.stop();\n                }\n              }\n            }, _marked21, null, [[1, 69]]);\n          };\n\n          getStandardItemsAndEntitiesToDeploy = function _getStandardItemsAndE(collection) {\n            var itemsToDeploy, entitiesToDeploy, entitiesByItemId, itemsOfCollection, _iterator6, _step6, item, deployedEntity, entity;\n\n            return _regeneratorRuntime.wrap(function getStandardItemsAndEntitiesToDeploy$(_context20) {\n              while (1) {\n                switch (_context20.prev = _context20.next) {\n                  case 0:\n                    itemsToDeploy = [];\n                    entitiesToDeploy = [];\n                    _context20.next = 4;\n                    return select(getEntityByItemId);\n\n                  case 4:\n                    entitiesByItemId = _context20.sent;\n                    _context20.next = 7;\n                    return getItemsFromCollection(collection);\n\n                  case 7:\n                    itemsOfCollection = _context20.sent;\n                    _iterator6 = _createForOfIteratorHelper(itemsOfCollection);\n                    _context20.prev = 9;\n\n                    _iterator6.s();\n\n                  case 11:\n                    if ((_step6 = _iterator6.n()).done) {\n                      _context20.next = 22;\n                      break;\n                    }\n\n                    item = _step6.value;\n                    deployedEntity = entitiesByItemId[item.id];\n\n                    if (!(!deployedEntity || !areSynced(item, deployedEntity))) {\n                      _context20.next = 20;\n                      break;\n                    }\n\n                    _context20.next = 17;\n                    return call(buildItemEntity, catalyst, legacyBuilderClient, collection, item);\n\n                  case 17:\n                    entity = _context20.sent;\n                    itemsToDeploy.push(item);\n                    entitiesToDeploy.push(entity);\n\n                  case 20:\n                    _context20.next = 11;\n                    break;\n\n                  case 22:\n                    _context20.next = 27;\n                    break;\n\n                  case 24:\n                    _context20.prev = 24;\n                    _context20.t0 = _context20[\"catch\"](9);\n\n                    _iterator6.e(_context20.t0);\n\n                  case 27:\n                    _context20.prev = 27;\n\n                    _iterator6.f();\n\n                    return _context20.finish(27);\n\n                  case 30:\n                    return _context20.abrupt(\"return\", {\n                      itemsToDeploy: itemsToDeploy,\n                      entitiesToDeploy: entitiesToDeploy\n                    });\n\n                  case 31:\n                  case \"end\":\n                    return _context20.stop();\n                }\n              }\n            }, _marked20, null, [[9, 24, 27, 30]]);\n          };\n\n          getItemsFromCollection = function _getItemsFromCollecti(collection) {\n            var allItems;\n            return _regeneratorRuntime.wrap(function getItemsFromCollection$(_context19) {\n              while (1) {\n                switch (_context19.prev = _context19.next) {\n                  case 0:\n                    _context19.next = 2;\n                    return select(getItems);\n\n                  case 2:\n                    allItems = _context19.sent;\n                    return _context19.abrupt(\"return\", allItems.filter(function (item) {\n                      return item.collectionId === collection.id;\n                    }));\n\n                  case 4:\n                  case \"end\":\n                    return _context19.stop();\n                }\n              }\n            }, _marked19);\n          };\n\n          changeCollectionStatus = function _changeCollectionStat(collection, isApproved) {\n            var maticChainId, contract, _getContract2, abi, implementation, manager, forwarder, data, txHash;\n\n            return _regeneratorRuntime.wrap(function changeCollectionStatus$(_context18) {\n              while (1) {\n                switch (_context18.prev = _context18.next) {\n                  case 0:\n                    maticChainId = getChainIdByNetwork(Network.MATIC);\n                    contract = getContract(ContractName.Committee, maticChainId);\n                    _getContract2 = getContract(ContractName.ERC721CollectionV2, maticChainId), abi = _getContract2.abi;\n                    implementation = new Contract(collection.contractAddress, abi);\n                    manager = getContract(ContractName.CollectionManager, maticChainId);\n                    forwarder = getContract(ContractName.Forwarder, maticChainId);\n                    _context18.next = 8;\n                    return call(getMethodData, implementation.populateTransaction.setApproved(isApproved));\n\n                  case 8:\n                    data = _context18.sent;\n                    _context18.next = 11;\n                    return call(sendTransaction, contract, function (committee) {\n                      return committee.manageCollection(manager.address, forwarder.address, collection.contractAddress, [data]);\n                    });\n\n                  case 11:\n                    txHash = _context18.sent;\n                    return _context18.abrupt(\"return\", txHash);\n\n                  case 13:\n                  case \"end\":\n                    return _context18.stop();\n                }\n              }\n            }, _marked18);\n          };\n\n          publishCollection = function _publishCollection(collection, items) {\n            var address;\n            return _regeneratorRuntime.wrap(function publishCollection$(_context17) {\n              while (1) {\n                switch (_context17.prev = _context17.next) {\n                  case 0:\n                    _context17.next = 2;\n                    return select(getAddress);\n\n                  case 2:\n                    address = _context17.sent;\n\n                    if (isOwner(collection, address)) {\n                      _context17.next = 5;\n                      break;\n                    }\n\n                    return _context17.abrupt(\"return\");\n\n                  case 5:\n                    if (!items.some(function (item) {\n                      return !item.tokenId;\n                    })) {\n                      _context17.next = 8;\n                      break;\n                    }\n\n                    _context17.next = 8;\n                    return put(setItemsTokenIdRequest(collection, items));\n\n                  case 8:\n                  case \"end\":\n                    return _context17.stop();\n                }\n              }\n            }, _marked17);\n          };\n\n          finishCollectionPublishing = function _finishCollectionPubl(collection) {\n            var avatarName, items;\n            return _regeneratorRuntime.wrap(function finishCollectionPublishing$(_context16) {\n              while (1) {\n                switch (_context16.prev = _context16.next) {\n                  case 0:\n                    _context16.next = 2;\n                    return select(getName);\n\n                  case 2:\n                    avatarName = _context16.sent;\n                    _context16.next = 5;\n                    return select(function (state) {\n                      return getCollectionItems(state, collection.id);\n                    });\n\n                  case 5:\n                    items = _context16.sent;\n                    _context16.next = 8;\n                    return publishCollection(collection, items);\n\n                  case 8:\n                    if (collection.forumLink) {\n                      _context16.next = 11;\n                      break;\n                    }\n\n                    _context16.next = 11;\n                    return put(createCollectionForumPostRequest(collection, buildCollectionForumPost(collection, items, avatarName || '')));\n\n                  case 11:\n                  case \"end\":\n                    return _context16.stop();\n                }\n              }\n            }, _marked16);\n          };\n\n          handleTransactionSuccess = function _handleTransactionSuc(action) {\n            var transaction, collectionId, collection;\n            return _regeneratorRuntime.wrap(function handleTransactionSuccess$(_context15) {\n              while (1) {\n                switch (_context15.prev = _context15.next) {\n                  case 0:\n                    transaction = action.payload.transaction;\n                    _context15.prev = 1;\n                    _context15.t0 = transaction.actionType;\n                    _context15.next = _context15.t0 === PUBLISH_COLLECTION_SUCCESS ? 5 : 12;\n                    break;\n\n                  case 5:\n                    // We re-fetch the collection from the store to get the updated version\n                    collectionId = transaction.payload.collection.id;\n                    _context15.next = 8;\n                    return select(function (state) {\n                      return getCollection(state, collectionId);\n                    });\n\n                  case 8:\n                    collection = _context15.sent;\n                    _context15.next = 11;\n                    return finishCollectionPublishing(collection);\n\n                  case 11:\n                    return _context15.abrupt(\"break\", 13);\n\n                  case 12:\n                    return _context15.abrupt(\"break\", 13);\n\n                  case 13:\n                    _context15.next = 18;\n                    break;\n\n                  case 15:\n                    _context15.prev = 15;\n                    _context15.t1 = _context15[\"catch\"](1);\n                    console.error(_context15.t1);\n\n                  case 18:\n                  case \"end\":\n                    return _context15.stop();\n                }\n              }\n            }, _marked15, null, [[1, 15]]);\n          };\n\n          handleRequestCollectionSuccess = function _handleRequestCollect() {\n            var allItems, collections, _iterator5, _step5, collection;\n\n            return _regeneratorRuntime.wrap(function handleRequestCollectionSuccess$(_context14) {\n              while (1) {\n                switch (_context14.prev = _context14.next) {\n                  case 0:\n                    _context14.next = 2;\n                    return select(getWalletItems);\n\n                  case 2:\n                    allItems = _context14.sent;\n\n                    if (!(allItems.length === 0)) {\n                      _context14.next = 9;\n                      break;\n                    }\n\n                    _context14.next = 6;\n                    return take(FETCH_ITEMS_SUCCESS);\n\n                  case 6:\n                    _context14.next = 8;\n                    return select(getWalletItems);\n\n                  case 8:\n                    allItems = _context14.sent;\n\n                  case 9:\n                    _context14.prev = 9;\n                    _context14.next = 12;\n                    return select(getWalletCollections);\n\n                  case 12:\n                    collections = _context14.sent;\n                    _iterator5 = _createForOfIteratorHelper(collections);\n                    _context14.prev = 14;\n\n                    _iterator5.s();\n\n                  case 16:\n                    if ((_step5 = _iterator5.n()).done) {\n                      _context14.next = 24;\n                      break;\n                    }\n\n                    collection = _step5.value;\n\n                    if (collection.isPublished) {\n                      _context14.next = 20;\n                      break;\n                    }\n\n                    return _context14.abrupt(\"continue\", 22);\n\n                  case 20:\n                    _context14.next = 22;\n                    return finishCollectionPublishing(collection);\n\n                  case 22:\n                    _context14.next = 16;\n                    break;\n\n                  case 24:\n                    _context14.next = 29;\n                    break;\n\n                  case 26:\n                    _context14.prev = 26;\n                    _context14.t0 = _context14[\"catch\"](14);\n\n                    _iterator5.e(_context14.t0);\n\n                  case 29:\n                    _context14.prev = 29;\n\n                    _iterator5.f();\n\n                    return _context14.finish(29);\n\n                  case 32:\n                    _context14.next = 37;\n                    break;\n\n                  case 34:\n                    _context14.prev = 34;\n                    _context14.t1 = _context14[\"catch\"](9);\n                    console.error(_context14.t1);\n\n                  case 37:\n                  case \"end\":\n                    return _context14.stop();\n                }\n              }\n            }, _marked14, null, [[9, 34], [14, 26, 29, 32]]);\n          };\n\n          handleRejectCollectionRequest = function _handleRejectCollecti(action) {\n            var collection, _yield$getWallet, _yield$getWallet2, wallet, maticChainId, txHash;\n\n            return _regeneratorRuntime.wrap(function handleRejectCollectionRequest$(_context13) {\n              while (1) {\n                switch (_context13.prev = _context13.next) {\n                  case 0:\n                    collection = action.payload.collection;\n                    _context13.prev = 1;\n                    _context13.next = 4;\n                    return getWallet();\n\n                  case 4:\n                    _yield$getWallet = _context13.sent;\n                    _yield$getWallet2 = _slicedToArray(_yield$getWallet, 1);\n                    wallet = _yield$getWallet2[0];\n                    maticChainId = wallet.networks.MATIC.chainId;\n                    _context13.next = 10;\n                    return changeCollectionStatus(collection, false);\n\n                  case 10:\n                    txHash = _context13.sent;\n                    _context13.next = 13;\n                    return put(rejectCollectionSuccess(collection, maticChainId, txHash));\n\n                  case 13:\n                    _context13.next = 19;\n                    break;\n\n                  case 15:\n                    _context13.prev = 15;\n                    _context13.t0 = _context13[\"catch\"](1);\n                    _context13.next = 19;\n                    return put(rejectCollectionFailure(collection, _context13.t0.message));\n\n                  case 19:\n                  case \"end\":\n                    return _context13.stop();\n                }\n              }\n            }, _marked13, null, [[1, 15]]);\n          };\n\n          handleApproveCollectionRequest = function _handleApproveCollect(action) {\n            var collection, txHash;\n            return _regeneratorRuntime.wrap(function handleApproveCollectionRequest$(_context12) {\n              while (1) {\n                switch (_context12.prev = _context12.next) {\n                  case 0:\n                    collection = action.payload.collection;\n                    _context12.prev = 1;\n                    _context12.next = 4;\n                    return changeCollectionStatus(collection, true);\n\n                  case 4:\n                    txHash = _context12.sent;\n                    _context12.next = 7;\n                    return put(approveCollectionSuccess(collection, getChainIdByNetwork(Network.MATIC), txHash));\n\n                  case 7:\n                    _context12.next = 13;\n                    break;\n\n                  case 9:\n                    _context12.prev = 9;\n                    _context12.t0 = _context12[\"catch\"](1);\n                    _context12.next = 13;\n                    return put(approveCollectionFailure(collection, _context12.t0.message));\n\n                  case 13:\n                  case \"end\":\n                    return _context12.stop();\n                }\n              }\n            }, _marked12, null, [[1, 9]]);\n          };\n\n          handleMintCollectionItemsRequest = function _handleMintCollection(action) {\n            var _action$payload5, collection, mints, maticChainId, beneficiaries, tokenIds, _iterator4, _step4, mint, beneficiary, i, contract, txHash;\n\n            return _regeneratorRuntime.wrap(function handleMintCollectionItemsRequest$(_context11) {\n              while (1) {\n                switch (_context11.prev = _context11.next) {\n                  case 0:\n                    _action$payload5 = action.payload, collection = _action$payload5.collection, mints = _action$payload5.mints;\n                    _context11.prev = 1;\n                    maticChainId = getChainIdByNetwork(Network.MATIC);\n                    beneficiaries = [];\n                    tokenIds = [];\n                    _iterator4 = _createForOfIteratorHelper(mints);\n\n                    try {\n                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                        mint = _step4.value;\n                        beneficiary = mint.address;\n\n                        for (i = 0; i < mint.amount; i++) {\n                          beneficiaries.push(beneficiary);\n                          tokenIds.push(mint.item.tokenId);\n                        }\n                      }\n                    } catch (err) {\n                      _iterator4.e(err);\n                    } finally {\n                      _iterator4.f();\n                    }\n\n                    contract = _objectSpread({}, getContract(ContractName.ERC721CollectionV2, maticChainId), {\n                      address: collection.contractAddress\n                    });\n                    _context11.next = 10;\n                    return call(sendTransaction, contract, function (collection) {\n                      return collection.issueTokens(beneficiaries, tokenIds);\n                    });\n\n                  case 10:\n                    txHash = _context11.sent;\n                    _context11.next = 13;\n                    return put(mintCollectionItemsSuccess(collection, mints, maticChainId, txHash));\n\n                  case 13:\n                    _context11.next = 15;\n                    return put(closeModal('MintItemsModal'));\n\n                  case 15:\n                    _context11.next = 17;\n                    return put(replace(locations.activity()));\n\n                  case 17:\n                    _context11.next = 23;\n                    break;\n\n                  case 19:\n                    _context11.prev = 19;\n                    _context11.t0 = _context11[\"catch\"](1);\n                    _context11.next = 23;\n                    return put(mintCollectionItemsFailure(collection, mints, _context11.t0.message));\n\n                  case 23:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }\n            }, _marked11, null, [[1, 19]]);\n          };\n\n          handleSetCollectionManagersRequest = function _handleSetCollectionM2(action) {\n            var _action$payload4, collection, accessList, maticChainId, addresses, values, newManagers, _iterator3, _step3, _ref4, address, hasAccess, contract, txHash;\n\n            return _regeneratorRuntime.wrap(function handleSetCollectionManagersRequest$(_context10) {\n              while (1) {\n                switch (_context10.prev = _context10.next) {\n                  case 0:\n                    _action$payload4 = action.payload, collection = _action$payload4.collection, accessList = _action$payload4.accessList;\n                    _context10.prev = 1;\n                    maticChainId = getChainIdByNetwork(Network.MATIC);\n                    addresses = [];\n                    values = [];\n                    newManagers = new Set(collection.managers);\n                    _iterator3 = _createForOfIteratorHelper(accessList);\n\n                    try {\n                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                        _ref4 = _step3.value;\n                        address = _ref4.address;\n                        hasAccess = _ref4.hasAccess;\n                        addresses.push(address);\n                        values.push(hasAccess);\n\n                        if (hasAccess) {\n                          newManagers.add(address);\n                        } else {\n                          newManagers.delete(address);\n                        }\n                      }\n                    } catch (err) {\n                      _iterator3.e(err);\n                    } finally {\n                      _iterator3.f();\n                    }\n\n                    contract = _objectSpread({}, getContract(ContractName.ERC721CollectionV2, maticChainId), {\n                      address: collection.contractAddress\n                    });\n                    _context10.next = 11;\n                    return call(sendTransaction, contract, function (collection) {\n                      return collection.setManagers(addresses, values);\n                    });\n\n                  case 11:\n                    txHash = _context10.sent;\n                    _context10.next = 14;\n                    return put(setCollectionManagersSuccess(collection, Array.from(newManagers), maticChainId, txHash));\n\n                  case 14:\n                    _context10.next = 16;\n                    return put(replace(locations.activity()));\n\n                  case 16:\n                    _context10.next = 22;\n                    break;\n\n                  case 18:\n                    _context10.prev = 18;\n                    _context10.t0 = _context10[\"catch\"](1);\n                    _context10.next = 22;\n                    return put(setCollectionManagersFailure(collection, accessList, _context10.t0.message));\n\n                  case 22:\n                  case \"end\":\n                    return _context10.stop();\n                }\n              }\n            }, _marked10, null, [[1, 18]]);\n          };\n\n          handleSetCollectionMintersRequest = function _handleSetCollectionM(action) {\n            var _action$payload3, collection, accessList, maticChainId, addresses, values, newMinters, _iterator2, _step2, _ref2, address, hasAccess, contract, txHash;\n\n            return _regeneratorRuntime.wrap(function handleSetCollectionMintersRequest$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    _action$payload3 = action.payload, collection = _action$payload3.collection, accessList = _action$payload3.accessList;\n                    _context9.prev = 1;\n                    maticChainId = getChainIdByNetwork(Network.MATIC);\n                    addresses = [];\n                    values = [];\n                    newMinters = new Set(collection.minters);\n                    _iterator2 = _createForOfIteratorHelper(accessList);\n\n                    try {\n                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                        _ref2 = _step2.value;\n                        address = _ref2.address;\n                        hasAccess = _ref2.hasAccess;\n                        addresses.push(address);\n                        values.push(hasAccess);\n\n                        if (hasAccess) {\n                          newMinters.add(address);\n                        } else {\n                          newMinters.delete(address);\n                        }\n                      }\n                    } catch (err) {\n                      _iterator2.e(err);\n                    } finally {\n                      _iterator2.f();\n                    }\n\n                    contract = _objectSpread({}, getContract(ContractName.ERC721CollectionV2, maticChainId), {\n                      address: collection.contractAddress\n                    });\n                    _context9.next = 11;\n                    return call(sendTransaction, contract, function (collection) {\n                      return collection.setMinters(addresses, values);\n                    });\n\n                  case 11:\n                    txHash = _context9.sent;\n                    _context9.next = 14;\n                    return put(setCollectionMintersSuccess(collection, Array.from(newMinters), maticChainId, txHash));\n\n                  case 14:\n                    _context9.next = 16;\n                    return put(replace(locations.activity()));\n\n                  case 16:\n                    _context9.next = 22;\n                    break;\n\n                  case 18:\n                    _context9.prev = 18;\n                    _context9.t0 = _context9[\"catch\"](1);\n                    _context9.next = 22;\n                    return put(setCollectionMintersFailure(collection, accessList, _context9.t0.message));\n\n                  case 22:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, _marked9, null, [[1, 18]]);\n          };\n\n          handlePublishCollectionRequest = function _handlePublishCollect(action) {\n            var _action$payload2, collection, items, email, saveCollection, serverItems, _iterator, _step, item, saveItem, from, maticChainId, forwarder, factory, manager, txHash, lock;\n\n            return _regeneratorRuntime.wrap(function handlePublishCollectionRequest$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    _action$payload2 = action.payload, collection = _action$payload2.collection, items = _action$payload2.items, email = _action$payload2.email;\n                    _context8.prev = 1;\n\n                    if (isLocked(collection)) {\n                      _context8.next = 13;\n                      break;\n                    }\n\n                    _context8.next = 5;\n                    return put(saveCollectionRequest(collection));\n\n                  case 5:\n                    _context8.next = 7;\n                    return race({\n                      success: take(SAVE_COLLECTION_SUCCESS),\n                      failure: take(SAVE_COLLECTION_FAILURE)\n                    });\n\n                  case 7:\n                    saveCollection = _context8.sent;\n\n                    if (!saveCollection.success) {\n                      _context8.next = 12;\n                      break;\n                    }\n\n                    collection = saveCollection.success.payload.collection;\n                    _context8.next = 13;\n                    break;\n\n                  case 12:\n                    throw new Error(saveCollection.failure.payload.error);\n\n                  case 13:\n                    if (collection.salt) {\n                      _context8.next = 19;\n                      break;\n                    }\n\n                    _context8.t0 = Error;\n                    _context8.next = 17;\n                    return call(t, 'sagas.item.missing_salt');\n\n                  case 17:\n                    _context8.t1 = _context8.sent;\n                    throw new _context8.t0(_context8.t1);\n\n                  case 19:\n                    _context8.next = 21;\n                    return call([legacyBuilderClient, 'fetchCollectionItems'], collection.id);\n\n                  case 21:\n                    serverItems = _context8.sent;\n\n                    if (!(serverItems.length !== items.length)) {\n                      _context8.next = 24;\n                      break;\n                    }\n\n                    throw new Error(\"\".concat(UNSYNCED_COLLECTION_ERROR_PREFIX, \" Different items length\"));\n\n                  case 24:\n                    // TODO: Deeper comparison of browser and server items. Compare metadata for example.\n                    serverItems.forEach(function (serverItem) {\n                      var browserItem = items.find(function (item) {\n                        return item.id === serverItem.id;\n                      });\n\n                      if (!browserItem) {\n                        throw new Error(\"\".concat(UNSYNCED_COLLECTION_ERROR_PREFIX, \" Item found in the server but not in the browser\"));\n                      }\n                    }); // Re-save items that are not updated with the latest hash\n\n                    _iterator = _createForOfIteratorHelper(items);\n                    _context8.prev = 26;\n\n                    _iterator.s();\n\n                  case 28:\n                    if ((_step = _iterator.n()).done) {\n                      _context8.next = 40;\n                      break;\n                    }\n\n                    item = _step.value;\n\n                    if (!hasOldHashedContents(item)) {\n                      _context8.next = 38;\n                      break;\n                    }\n\n                    _context8.next = 33;\n                    return put(saveItemRequest(item, {}));\n\n                  case 33:\n                    _context8.next = 35;\n                    return race({\n                      success: take(SAVE_ITEM_SUCCESS),\n                      failure: take(SAVE_ITEM_FAILURE)\n                    });\n\n                  case 35:\n                    saveItem = _context8.sent;\n\n                    if (!saveItem.failure) {\n                      _context8.next = 38;\n                      break;\n                    }\n\n                    throw new Error(saveItem.failure.payload.error);\n\n                  case 38:\n                    _context8.next = 28;\n                    break;\n\n                  case 40:\n                    _context8.next = 45;\n                    break;\n\n                  case 42:\n                    _context8.prev = 42;\n                    _context8.t2 = _context8[\"catch\"](26);\n\n                    _iterator.e(_context8.t2);\n\n                  case 45:\n                    _context8.prev = 45;\n\n                    _iterator.f();\n\n                    return _context8.finish(45);\n\n                  case 48:\n                    _context8.next = 50;\n                    return select(getAddress);\n\n                  case 50:\n                    from = _context8.sent;\n                    _context8.next = 53;\n                    return call(getChainIdByNetwork, Network.MATIC);\n\n                  case 53:\n                    maticChainId = _context8.sent;\n                    forwarder = getContract(ContractName.Forwarder, maticChainId);\n                    factory = getCollectionFactoryContract(maticChainId);\n                    manager = getContract(ContractName.CollectionManager, maticChainId); // We wait for TOS to end first to avoid locking the collection preemptively if this endpoint fails\n\n                    _context8.next = 59;\n                    return retry(10, 500, legacyBuilderClient.saveTOS, collection, email);\n\n                  case 59:\n                    _context8.next = 61;\n                    return call(sendTransaction, manager, function (collectionManager) {\n                      return collectionManager.createCollection(forwarder.address, factory.address, collection.salt, collection.name, getCollectionSymbol(collection), getCollectionBaseURI(), from, toInitializeItems(items));\n                    });\n\n                  case 61:\n                    txHash = _context8.sent;\n                    _context8.next = 64;\n                    return retry(10, 500, legacyBuilderClient.lockCollection, collection);\n\n                  case 64:\n                    lock = _context8.sent;\n                    collection = _objectSpread({}, collection, {\n                      lock: +new Date(lock)\n                    });\n                    _context8.next = 68;\n                    return put(publishCollectionSuccess(collection, items, maticChainId, txHash));\n\n                  case 68:\n                    _context8.next = 70;\n                    return put(replace(locations.activity()));\n\n                  case 70:\n                    _context8.next = 76;\n                    break;\n\n                  case 72:\n                    _context8.prev = 72;\n                    _context8.t3 = _context8[\"catch\"](1);\n                    _context8.next = 76;\n                    return put(publishCollectionFailure(collection, items, _context8.t3.message));\n\n                  case 76:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, _marked8, null, [[1, 72], [26, 42, 45, 48]]);\n          };\n\n          handleDeleteCollectionRequest = function _handleDeleteCollecti(action) {\n            var collection, collectionIdInUriParam;\n            return _regeneratorRuntime.wrap(function handleDeleteCollectionRequest$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    collection = action.payload.collection;\n                    _context7.prev = 1;\n                    _context7.next = 4;\n                    return call(function () {\n                      return legacyBuilderClient.deleteCollection(collection.id);\n                    });\n\n                  case 4:\n                    _context7.next = 6;\n                    return put(deleteCollectionSuccess(collection));\n\n                  case 6:\n                    _context7.next = 8;\n                    return select(getCollectionId);\n\n                  case 8:\n                    collectionIdInUriParam = _context7.sent;\n\n                    if (!(collectionIdInUriParam === collection.id)) {\n                      _context7.next = 12;\n                      break;\n                    }\n\n                    _context7.next = 12;\n                    return put(replace(locations.collections()));\n\n                  case 12:\n                    _context7.next = 18;\n                    break;\n\n                  case 14:\n                    _context7.prev = 14;\n                    _context7.t0 = _context7[\"catch\"](1);\n                    _context7.next = 18;\n                    return put(deleteCollectionFailure(collection, _context7.t0.message));\n\n                  case 18:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _marked7, null, [[1, 14]]);\n          };\n\n          handleSaveCollectionRequest = function _handleSaveCollection2(action) {\n            var collection, data, items, from, maticChainId, rarities, _getContract, abi, provider, collectionV2, remoteCollection, newCollection;\n\n            return _regeneratorRuntime.wrap(function handleSaveCollectionRequest$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    collection = action.payload.collection;\n                    _context6.prev = 1;\n\n                    if (isValidText(collection.name)) {\n                      _context6.next = 8;\n                      break;\n                    }\n\n                    _context6.t0 = Error;\n                    _context6.next = 6;\n                    return call(t, 'sagas.collection.invalid_character');\n\n                  case 6:\n                    _context6.t1 = _context6.sent;\n                    throw new _context6.t0(_context6.t1);\n\n                  case 8:\n                    if (!isLocked(collection)) {\n                      _context6.next = 14;\n                      break;\n                    }\n\n                    _context6.t2 = Error;\n                    _context6.next = 12;\n                    return call(t, 'sagas.collection.collection_locked');\n\n                  case 12:\n                    _context6.t3 = _context6.sent;\n                    throw new _context6.t2(_context6.t3);\n\n                  case 14:\n                    data = '';\n\n                    if (!(getCollectionType(collection) === CollectionType.DECENTRALAND)) {\n                      _context6.next = 34;\n                      break;\n                    }\n\n                    _context6.next = 18;\n                    return select(function (state) {\n                      return getCollectionItems(state, collection.id);\n                    });\n\n                  case 18:\n                    items = _context6.sent;\n                    _context6.next = 21;\n                    return select(getAddress);\n\n                  case 21:\n                    from = _context6.sent;\n                    maticChainId = getChainIdByNetwork(Network.MATIC);\n                    _context6.next = 25;\n                    return select(function (state) {\n                      return getRaritiesContract(state, maticChainId);\n                    });\n\n                  case 25:\n                    rarities = _context6.sent;\n                    _getContract = getContract(ContractName.ERC721CollectionV2, maticChainId), abi = _getContract.abi;\n                    _context6.next = 29;\n                    return call(getNetworkProvider, maticChainId);\n\n                  case 29:\n                    provider = _context6.sent;\n                    collectionV2 = new Contract(constants.AddressZero, // using zero address here since we just want the implementation of the ERC721CollectionV2 to generate the `data` of the initialize method\n                    abi, new providers.Web3Provider(provider));\n                    _context6.next = 33;\n                    return call(getMethodData, collectionV2.populateTransaction.initialize(collection.name, getCollectionSymbol(collection), getCollectionBaseURI(), from, true, // should complete\n                    false, // is approved\n                    rarities.address, toInitializeItems(items)));\n\n                  case 33:\n                    data = _context6.sent;\n\n                  case 34:\n                    _context6.next = 36;\n                    return call([legacyBuilderClient, 'saveCollection'], collection, data);\n\n                  case 36:\n                    remoteCollection = _context6.sent;\n                    newCollection = _objectSpread({}, collection, remoteCollection);\n                    _context6.next = 40;\n                    return put(saveCollectionSuccess(newCollection));\n\n                  case 40:\n                    _context6.next = 46;\n                    break;\n\n                  case 42:\n                    _context6.prev = 42;\n                    _context6.t4 = _context6[\"catch\"](1);\n                    _context6.next = 46;\n                    return put(saveCollectionFailure(collection, _context6.t4.message));\n\n                  case 46:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _marked6, null, [[1, 42]]);\n          };\n\n          handleSaveMultipleItemsSuccess = function _handleSaveMultipleIt(action) {\n            var items, collection;\n            return _regeneratorRuntime.wrap(function handleSaveMultipleItemsSuccess$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    items = action.payload.items;\n\n                    if (!(items.length > 0 && items[0].collectionId)) {\n                      _context5.next = 7;\n                      break;\n                    }\n\n                    _context5.next = 4;\n                    return select(getCollection, items[0].collectionId);\n\n                  case 4:\n                    collection = _context5.sent;\n                    _context5.next = 7;\n                    return put(saveCollectionRequest(collection));\n\n                  case 7:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _marked5);\n          };\n\n          handleSaveItemSuccess = function _handleSaveItemSucces(action) {\n            var item, collection;\n            return _regeneratorRuntime.wrap(function handleSaveItemSuccess$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    item = action.payload.item;\n\n                    if (!(item.collectionId && !item.isPublished)) {\n                      _context4.next = 7;\n                      break;\n                    }\n\n                    _context4.next = 4;\n                    return select(getCollection, item.collectionId);\n\n                  case 4:\n                    collection = _context4.sent;\n                    _context4.next = 7;\n                    return put(saveCollectionRequest(collection));\n\n                  case 7:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _marked4);\n          };\n\n          handleSaveCollectionSuccess = function _handleSaveCollection(action) {\n            var openModals, collection, detailPageLocation;\n            return _regeneratorRuntime.wrap(function handleSaveCollectionSuccess$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return select(getOpenModals);\n\n                  case 2:\n                    openModals = _context3.sent;\n\n                    if (!(openModals['CreateCollectionModal'] || openModals['CreateThirdPartyCollectionModal'])) {\n                      _context3.next = 8;\n                      break;\n                    }\n\n                    // Redirect to the newly created collection detail\n                    collection = action.payload.collection;\n                    detailPageLocation = isTPCollection(collection) ? locations.thirdPartyCollectionDetail : locations.collectionDetail;\n                    _context3.next = 8;\n                    return put(push(detailPageLocation(collection.id)));\n\n                  case 8:\n                    _context3.next = 10;\n                    return put(closeModal('CreateCollectionModal'));\n\n                  case 10:\n                    _context3.next = 12;\n                    return put(closeModal('CreateThirdPartyCollectionModal'));\n\n                  case 12:\n                    _context3.next = 14;\n                    return put(closeModal('EditCollectionURNModal'));\n\n                  case 14:\n                    _context3.next = 16;\n                    return put(closeModal('EditCollectionNameModal'));\n\n                  case 16:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _marked3);\n          };\n\n          handleFetchCollectionRequest = function _handleFetchCollectio2(action) {\n            var id, collection;\n            return _regeneratorRuntime.wrap(function handleFetchCollectionRequest$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    id = action.payload.id;\n                    _context2.prev = 1;\n                    _context2.next = 4;\n                    return call([legacyBuilderClient, 'fetchCollection'], id);\n\n                  case 4:\n                    collection = _context2.sent;\n                    _context2.next = 7;\n                    return put(fetchCollectionSuccess(id, collection));\n\n                  case 7:\n                    _context2.next = 13;\n                    break;\n\n                  case 9:\n                    _context2.prev = 9;\n                    _context2.t0 = _context2[\"catch\"](1);\n                    _context2.next = 13;\n                    return put(fetchCollectionFailure(id, _context2.t0.message));\n\n                  case 13:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _marked2, null, [[1, 9]]);\n          };\n\n          handleFetchCollectionsRequest = function _handleFetchCollectio(action) {\n            var _action$payload, address, params, response, results, limit, page, pages, total;\n\n            return _regeneratorRuntime.wrap(function handleFetchCollectionsRequest$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _action$payload = action.payload, address = _action$payload.address, params = _action$payload.params;\n                    _context.prev = 1;\n                    _context.next = 4;\n                    return call([legacyBuilderClient, 'fetchCollections'], address, params);\n\n                  case 4:\n                    response = _context.sent;\n\n                    if (!isPaginated(response)) {\n                      _context.next = 11;\n                      break;\n                    }\n\n                    results = response.results, limit = response.limit, page = response.page, pages = response.pages, total = response.total;\n                    _context.next = 9;\n                    return put(fetchCollectionsSuccess(results, {\n                      limit: limit,\n                      page: page,\n                      pages: pages,\n                      total: total\n                    }));\n\n                  case 9:\n                    _context.next = 13;\n                    break;\n\n                  case 11:\n                    _context.next = 13;\n                    return put(fetchCollectionsSuccess(response));\n\n                  case 13:\n                    _context.next = 19;\n                    break;\n\n                  case 15:\n                    _context.prev = 15;\n                    _context.t0 = _context[\"catch\"](1);\n                    _context.next = 19;\n                    return put(fetchCollectionsFailure(_context.t0.message));\n\n                  case 19:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _marked, null, [[1, 15]]);\n          };\n\n          isPaginated = function _isPaginated(response) {\n            return response.results !== undefined;\n          };\n\n          _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchCollectionsRequest), _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchCollectionRequest), _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleSaveCollectionSuccess), _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(handleSaveItemSuccess), _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(handleSaveMultipleItemsSuccess), _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(handleSaveCollectionRequest), _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(handleDeleteCollectionRequest), _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(handlePublishCollectionRequest), _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(handleSetCollectionMintersRequest), _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(handleSetCollectionManagersRequest), _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(handleMintCollectionItemsRequest), _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(handleApproveCollectionRequest), _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(handleRejectCollectionRequest), _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(handleRequestCollectionSuccess), _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(handleTransactionSuccess), _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(finishCollectionPublishing), _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(publishCollection), _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(changeCollectionStatus), _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(getItemsFromCollection), _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(getStandardItemsAndEntitiesToDeploy), _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(handleInitiateTPItemsApprovalFlow), _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(handleInitiateApprovalFlow), _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(waitForMerkleRootToBeSet), _marked24 = /*#__PURE__*/_regeneratorRuntime.mark(waitForIndexer);\n          _context26.next = 28;\n          return takeEvery(FETCH_COLLECTIONS_REQUEST, handleFetchCollectionsRequest);\n\n        case 28:\n          _context26.next = 30;\n          return takeEvery(FETCH_COLLECTION_REQUEST, handleFetchCollectionRequest);\n\n        case 30:\n          _context26.next = 32;\n          return takeLatest(FETCH_COLLECTIONS_SUCCESS, handleRequestCollectionSuccess);\n\n        case 32:\n          _context26.next = 34;\n          return takeEvery(SAVE_COLLECTION_REQUEST, handleSaveCollectionRequest);\n\n        case 34:\n          _context26.next = 36;\n          return takeLatest(SAVE_COLLECTION_SUCCESS, handleSaveCollectionSuccess);\n\n        case 36:\n          _context26.next = 38;\n          return takeLatest(SAVE_ITEM_SUCCESS, handleSaveItemSuccess);\n\n        case 38:\n          _context26.next = 40;\n          return takeLatest(SAVE_MULTIPLE_ITEMS_SUCCESS, handleSaveMultipleItemsSuccess);\n\n        case 40:\n          _context26.next = 42;\n          return takeEvery(DELETE_COLLECTION_REQUEST, handleDeleteCollectionRequest);\n\n        case 42:\n          _context26.next = 44;\n          return takeEvery(PUBLISH_COLLECTION_REQUEST, handlePublishCollectionRequest);\n\n        case 44:\n          _context26.next = 46;\n          return takeEvery(SET_COLLECTION_MINTERS_REQUEST, handleSetCollectionMintersRequest);\n\n        case 46:\n          _context26.next = 48;\n          return takeEvery(SET_COLLECTION_MANAGERS_REQUEST, handleSetCollectionManagersRequest);\n\n        case 48:\n          _context26.next = 50;\n          return takeEvery(MINT_COLLECTION_ITEMS_REQUEST, handleMintCollectionItemsRequest);\n\n        case 50:\n          _context26.next = 52;\n          return takeEvery(APPROVE_COLLECTION_REQUEST, handleApproveCollectionRequest);\n\n        case 52:\n          _context26.next = 54;\n          return takeEvery(REJECT_COLLECTION_REQUEST, handleRejectCollectionRequest);\n\n        case 54:\n          _context26.next = 56;\n          return takeLatest(FETCH_TRANSACTION_SUCCESS, handleTransactionSuccess);\n\n        case 56:\n          _context26.next = 58;\n          return takeLatest(INITIATE_APPROVAL_FLOW, handleInitiateApprovalFlow);\n\n        case 58:\n          _context26.next = 60;\n          return takeLatest(INITIATE_TP_APPROVAL_FLOW, handleInitiateTPItemsApprovalFlow);\n\n        case 60:\n        case \"end\":\n          return _context26.stop();\n      }\n    }\n  }, _marked25);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/collection/sagas.ts"],"names":["collectionSaga","PQueue","Contract","providers","constants","ethers","push","replace","select","take","takeEvery","call","put","takeLatest","race","retry","delay","generateTree","ContractName","getContract","getOpenModals","t","FETCH_TRANSACTION_SUCCESS","getAddress","sendTransaction","getChainIdByNetwork","getNetworkProvider","Network","fetchCollectionsSuccess","fetchCollectionsFailure","FETCH_COLLECTIONS_REQUEST","FETCH_COLLECTIONS_SUCCESS","fetchCollectionSuccess","fetchCollectionFailure","FETCH_COLLECTION_REQUEST","saveCollectionSuccess","saveCollectionFailure","SAVE_COLLECTION_REQUEST","deleteCollectionSuccess","deleteCollectionFailure","DELETE_COLLECTION_REQUEST","publishCollectionSuccess","publishCollectionFailure","PUBLISH_COLLECTION_REQUEST","setCollectionMintersSuccess","setCollectionMintersFailure","SET_COLLECTION_MINTERS_REQUEST","setCollectionManagersSuccess","setCollectionManagersFailure","SET_COLLECTION_MANAGERS_REQUEST","mintCollectionItemsSuccess","mintCollectionItemsFailure","MINT_COLLECTION_ITEMS_REQUEST","approveCollectionSuccess","approveCollectionFailure","APPROVE_COLLECTION_REQUEST","rejectCollectionSuccess","rejectCollectionFailure","REJECT_COLLECTION_REQUEST","PUBLISH_COLLECTION_SUCCESS","saveCollectionRequest","SAVE_COLLECTION_SUCCESS","SAVE_COLLECTION_FAILURE","INITIATE_APPROVAL_FLOW","APPROVE_COLLECTION_SUCCESS","APPROVE_COLLECTION_FAILURE","INITIATE_TP_APPROVAL_FLOW","getMethodData","getWallet","buildCollectionForumPost","createCollectionForumPostRequest","setItemsTokenIdRequest","FETCH_ITEMS_SUCCESS","SAVE_ITEM_SUCCESS","RESCUE_ITEMS_SUCCESS","RESCUE_ITEMS_FAILURE","fetchCollectionItemsRequest","FETCH_COLLECTION_ITEMS_SUCCESS","FETCH_COLLECTION_ITEMS_FAILURE","SAVE_MULTIPLE_ITEMS_SUCCESS","saveItemRequest","SAVE_ITEM_FAILURE","SET_ITEMS_TOKEN_ID_SUCCESS","areSynced","isValidText","toInitializeItems","locations","getCollectionId","getArrayOfPagesFromTotal","extractThirdPartyId","closeModal","CLOSE_MODAL","openModal","EntityHashingType","getEntityByItemId","getItems","getCollectionItems","getWalletItems","getData","getItemsById","getPaginationData","getName","buildItemEntity","buildStandardWearableContentHash","hasOldHashedContents","getCurationsByCollectionId","approveCollectionCurationRequest","APPROVE_COLLECTION_CURATION_FAILURE","APPROVE_COLLECTION_CURATION_SUCCESS","CurationStatus","DEPLOY_BATCHED_THIRD_PARTY_ITEMS_FAILURE","DEPLOY_BATCHED_THIRD_PARTY_ITEMS_SUCCESS","REVIEW_THIRD_PARTY_FAILURE","REVIEW_THIRD_PARTY_SUCCESS","DEPLOY_ENTITIES_FAILURE","DEPLOY_ENTITIES_SUCCESS","ApprovalFlowModalView","getCollection","getRaritiesContract","getWalletCollections","CollectionType","isOwner","getCollectionBaseURI","getCollectionSymbol","isLocked","getCollectionType","UNSYNCED_COLLECTION_ERROR_PREFIX","isTPCollection","getCollectionFactoryContract","THIRD_PARTY_MERKLE_ROOT_CHECK_MAX_RETRIES","legacyBuilderClient","client","catalyst","isPaginated","handleFetchCollectionsRequest","handleFetchCollectionRequest","handleSaveCollectionSuccess","handleSaveItemSuccess","handleSaveMultipleItemsSuccess","handleSaveCollectionRequest","handleDeleteCollectionRequest","handlePublishCollectionRequest","handleSetCollectionMintersRequest","handleSetCollectionManagersRequest","handleMintCollectionItemsRequest","handleApproveCollectionRequest","handleRejectCollectionRequest","handleRequestCollectionSuccess","handleTransactionSuccess","finishCollectionPublishing","publishCollection","changeCollectionStatus","getItemsFromCollection","getStandardItemsAndEntitiesToDeploy","handleInitiateTPItemsApprovalFlow","handleInitiateApprovalFlow","waitForMerkleRootToBeSet","waitForIndexer","items","contentHashes","collectionId","contentHashByItemId","Map","i","length","set","id","isIndexed","itemIds","map","item","success","failure","itemsById","every","indexedContentHash","blockchainContentHash","expectedContentHash","get","thirdPartyId","merkleRoot","thirdParty","root","Error","action","collection","payload","isPublished","modalMetadata","view","LOADING","itemsToRescue","some","tokenId","currentContentHash","V0","v0ContentHash","V1","v1ContentHash","RESCUE","cancel","error","itemsToDeploy","entitiesToDeploy","DEPLOY","entities","isApproved","APPROVE","curationsByCollectionId","curation","status","PENDING","ERROR","SUCCESS","message","paginatedData","BATCH_SIZE","REQUESTS_BATCH_SIZE","pages","Math","ceil","total","queue","concurrency","promisesOfPagesToFetch","page","fetchCollectionItems","limit","addAll","allItemPages","itemsWithPendingCurations","flatMap","result","results","cheque","content_hashes","chequeWasConsumed","tree","Object","values","amountOfItemsToPublish","filter","qty","utils","splitSignature","signature","r","s","v","slot","salt","sigR","sigS","sigV","CONSUME_TP_SLOTS","merkleTreeRoot","slots","urn","DEPLOY_TP","hashes","entitiesByItemId","itemsOfCollection","deployedEntity","entity","allItems","maticChainId","MATIC","contract","Committee","ERC721CollectionV2","abi","implementation","contractAddress","manager","CollectionManager","forwarder","Forwarder","populateTransaction","setApproved","data","committee","manageCollection","address","txHash","avatarName","state","forumLink","transaction","actionType","console","collections","wallet","networks","chainId","mints","beneficiaries","tokenIds","mint","beneficiary","amount","issueTokens","activity","accessList","addresses","newManagers","Set","managers","hasAccess","add","delete","setManagers","Array","from","newMinters","minters","setMinters","email","saveCollection","serverItems","forEach","serverItem","browserItem","find","saveItem","factory","saveTOS","collectionManager","createCollection","name","lockCollection","lock","Date","deleteCollection","collectionIdInUriParam","DECENTRALAND","rarities","provider","collectionV2","AddressZero","Web3Provider","initialize","remoteCollection","newCollection","openModals","detailPageLocation","thirdPartyCollectionDetail","collectionDetail","params","response","undefined"],"mappings":"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","sourcesContent":["import PQueue from 'p-queue'\nimport { Contract, providers, constants, ethers } from 'ethers'\nimport { push, replace } from 'connected-react-router'\nimport { select, take, takeEvery, call, put, takeLatest, race, retry, delay } from 'redux-saga/effects'\nimport { CatalystClient, DeploymentPreparationData } from 'dcl-catalyst-client'\nimport { ChainId } from '@dcl/schemas'\nimport { generateTree } from '@dcl/content-hash-tree'\nimport { BuilderClient, ThirdParty } from '@dcl/builder-client'\nimport { ContractData, ContractName, getContract } from 'decentraland-transactions'\nimport { getOpenModals } from 'decentraland-dapps/dist/modules/modal/selectors'\nimport { ModalState } from 'decentraland-dapps/dist/modules/modal/reducer'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { FetchTransactionSuccessAction, FETCH_TRANSACTION_SUCCESS } from 'decentraland-dapps/dist/modules/transaction/actions'\nimport { Provider, Wallet } from 'decentraland-dapps/dist/modules/wallet/types'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { sendTransaction } from 'decentraland-dapps/dist/modules/wallet/utils'\nimport { getChainIdByNetwork, getNetworkProvider } from 'decentraland-dapps/dist/lib/eth'\nimport { Network } from '@dcl/schemas'\nimport {\n  FetchCollectionsRequestAction,\n  fetchCollectionsSuccess,\n  fetchCollectionsFailure,\n  FETCH_COLLECTIONS_REQUEST,\n  FETCH_COLLECTIONS_SUCCESS,\n  FetchCollectionRequestAction,\n  fetchCollectionSuccess,\n  fetchCollectionFailure,\n  FETCH_COLLECTION_REQUEST,\n  SaveCollectionRequestAction,\n  saveCollectionSuccess,\n  saveCollectionFailure,\n  SAVE_COLLECTION_REQUEST,\n  DeleteCollectionRequestAction,\n  deleteCollectionSuccess,\n  deleteCollectionFailure,\n  DELETE_COLLECTION_REQUEST,\n  PublishCollectionRequestAction,\n  publishCollectionSuccess,\n  publishCollectionFailure,\n  PUBLISH_COLLECTION_REQUEST,\n  SetCollectionMintersRequestAction,\n  setCollectionMintersSuccess,\n  setCollectionMintersFailure,\n  SET_COLLECTION_MINTERS_REQUEST,\n  SetCollectionManagersRequestAction,\n  setCollectionManagersSuccess,\n  setCollectionManagersFailure,\n  SET_COLLECTION_MANAGERS_REQUEST,\n  MintCollectionItemsRequestAction,\n  mintCollectionItemsSuccess,\n  mintCollectionItemsFailure,\n  MINT_COLLECTION_ITEMS_REQUEST,\n  ApproveCollectionRequestAction,\n  approveCollectionSuccess,\n  approveCollectionFailure,\n  APPROVE_COLLECTION_REQUEST,\n  RejectCollectionRequestAction,\n  rejectCollectionSuccess,\n  rejectCollectionFailure,\n  REJECT_COLLECTION_REQUEST,\n  PUBLISH_COLLECTION_SUCCESS,\n  saveCollectionRequest,\n  SAVE_COLLECTION_SUCCESS,\n  SAVE_COLLECTION_FAILURE,\n  SaveCollectionFailureAction,\n  SaveCollectionSuccessAction,\n  INITIATE_APPROVAL_FLOW,\n  InitiateApprovalFlowAction,\n  APPROVE_COLLECTION_SUCCESS,\n  APPROVE_COLLECTION_FAILURE,\n  ApproveCollectionSuccessAction,\n  ApproveCollectionFailureAction,\n  InitiateTPApprovalFlowAction,\n  INITIATE_TP_APPROVAL_FLOW\n} from './actions'\nimport { getMethodData, getWallet } from 'modules/wallet/utils'\nimport { buildCollectionForumPost } from 'modules/forum/utils'\nimport { createCollectionForumPostRequest } from 'modules/forum/actions'\nimport {\n  setItemsTokenIdRequest,\n  FETCH_ITEMS_SUCCESS,\n  SAVE_ITEM_SUCCESS,\n  SaveItemSuccessAction,\n  RESCUE_ITEMS_SUCCESS,\n  RESCUE_ITEMS_FAILURE,\n  RescueItemsSuccessAction,\n  RescueItemsFailureAction,\n  fetchCollectionItemsRequest,\n  FETCH_COLLECTION_ITEMS_SUCCESS,\n  FETCH_COLLECTION_ITEMS_FAILURE,\n  SAVE_MULTIPLE_ITEMS_SUCCESS,\n  SaveMultipleItemsSuccessAction,\n  saveItemRequest,\n  SAVE_ITEM_FAILURE,\n  SET_ITEMS_TOKEN_ID_SUCCESS\n} from 'modules/item/actions'\nimport { areSynced, isValidText, toInitializeItems } from 'modules/item/utils'\nimport { locations } from 'routing/locations'\nimport { getCollectionId } from 'modules/location/selectors'\nimport { BuilderAPI } from 'lib/api/builder'\nimport { getArrayOfPagesFromTotal, PaginatedResource } from 'lib/api/pagination'\nimport { extractThirdPartyId } from 'lib/urn'\nimport { closeModal, CloseModalAction, CLOSE_MODAL, openModal } from 'modules/modal/actions'\nimport { EntityHashingType, Item, ItemApprovalData } from 'modules/item/types'\nimport { Slot } from 'modules/thirdParty/types'\nimport {\n  getEntityByItemId,\n  getItems,\n  getCollectionItems,\n  getWalletItems,\n  getData as getItemsById,\n  getPaginationData\n} from 'modules/item/selectors'\nimport { getName } from 'modules/profile/selectors'\nimport { buildItemEntity, buildStandardWearableContentHash, hasOldHashedContents } from 'modules/item/export'\nimport { getCurationsByCollectionId } from 'modules/curations/collectionCuration/selectors'\nimport {\n  ApproveCollectionCurationFailureAction,\n  approveCollectionCurationRequest,\n  ApproveCollectionCurationSuccessAction,\n  APPROVE_COLLECTION_CURATION_FAILURE,\n  APPROVE_COLLECTION_CURATION_SUCCESS\n} from 'modules/curations/collectionCuration/actions'\nimport { CollectionCuration } from 'modules/curations/collectionCuration/types'\nimport { CurationStatus } from 'modules/curations/types'\nimport {\n  DEPLOY_BATCHED_THIRD_PARTY_ITEMS_FAILURE,\n  DEPLOY_BATCHED_THIRD_PARTY_ITEMS_SUCCESS,\n  ReviewThirdPartyFailureAction,\n  REVIEW_THIRD_PARTY_FAILURE,\n  REVIEW_THIRD_PARTY_SUCCESS\n} from 'modules/thirdParty/actions'\nimport {\n  DeployEntitiesFailureAction,\n  DeployEntitiesSuccessAction,\n  DEPLOY_ENTITIES_FAILURE,\n  DEPLOY_ENTITIES_SUCCESS\n} from 'modules/entity/actions'\nimport { ApprovalFlowModalMetadata, ApprovalFlowModalView } from 'components/Modals/ApprovalFlowModal/ApprovalFlowModal.types'\nimport { getCollection, getRaritiesContract, getWalletCollections } from './selectors'\nimport { Collection, CollectionType } from './types'\nimport {\n  isOwner,\n  getCollectionBaseURI,\n  getCollectionSymbol,\n  isLocked,\n  getCollectionType,\n  UNSYNCED_COLLECTION_ERROR_PREFIX,\n  isTPCollection,\n  getCollectionFactoryContract\n} from './utils'\n\nconst THIRD_PARTY_MERKLE_ROOT_CHECK_MAX_RETRIES = 160\n\nexport function* collectionSaga(legacyBuilderClient: BuilderAPI, client: BuilderClient, catalyst: CatalystClient) {\n  yield takeEvery(FETCH_COLLECTIONS_REQUEST, handleFetchCollectionsRequest)\n  yield takeEvery(FETCH_COLLECTION_REQUEST, handleFetchCollectionRequest)\n  yield takeLatest(FETCH_COLLECTIONS_SUCCESS, handleRequestCollectionSuccess)\n  yield takeEvery(SAVE_COLLECTION_REQUEST, handleSaveCollectionRequest)\n  yield takeLatest(SAVE_COLLECTION_SUCCESS, handleSaveCollectionSuccess)\n  yield takeLatest(SAVE_ITEM_SUCCESS, handleSaveItemSuccess)\n  yield takeLatest(SAVE_MULTIPLE_ITEMS_SUCCESS, handleSaveMultipleItemsSuccess)\n  yield takeEvery(DELETE_COLLECTION_REQUEST, handleDeleteCollectionRequest)\n  yield takeEvery(PUBLISH_COLLECTION_REQUEST, handlePublishCollectionRequest)\n  yield takeEvery(SET_COLLECTION_MINTERS_REQUEST, handleSetCollectionMintersRequest)\n  yield takeEvery(SET_COLLECTION_MANAGERS_REQUEST, handleSetCollectionManagersRequest)\n  yield takeEvery(MINT_COLLECTION_ITEMS_REQUEST, handleMintCollectionItemsRequest)\n  yield takeEvery(APPROVE_COLLECTION_REQUEST, handleApproveCollectionRequest)\n  yield takeEvery(REJECT_COLLECTION_REQUEST, handleRejectCollectionRequest)\n  yield takeLatest(FETCH_TRANSACTION_SUCCESS, handleTransactionSuccess)\n  yield takeLatest(INITIATE_APPROVAL_FLOW, handleInitiateApprovalFlow)\n  yield takeLatest(INITIATE_TP_APPROVAL_FLOW, handleInitiateTPItemsApprovalFlow)\n\n  function isPaginated(response: PaginatedResource<Collection> | Collection[]): response is PaginatedResource<Collection> {\n    return (<PaginatedResource<Collection>>response).results !== undefined\n  }\n\n  function* handleFetchCollectionsRequest(action: FetchCollectionsRequestAction) {\n    const { address, params } = action.payload\n    try {\n      const response: PaginatedResource<Collection> | Collection[] = yield call([legacyBuilderClient, 'fetchCollections'], address, params)\n      if (isPaginated(response)) {\n        const { results, limit, page, pages, total } = response\n        yield put(\n          fetchCollectionsSuccess(results, {\n            limit,\n            page,\n            pages,\n            total\n          })\n        )\n      } else {\n        yield put(fetchCollectionsSuccess(response))\n      }\n    } catch (error) {\n      yield put(fetchCollectionsFailure(error.message))\n    }\n  }\n\n  function* handleFetchCollectionRequest(action: FetchCollectionRequestAction) {\n    const { id } = action.payload\n    try {\n      const collection: Collection = yield call([legacyBuilderClient, 'fetchCollection'], id)\n      yield put(fetchCollectionSuccess(id, collection))\n    } catch (error) {\n      yield put(fetchCollectionFailure(id, error.message))\n    }\n  }\n\n  function* handleSaveCollectionSuccess(action: SaveCollectionSuccessAction) {\n    const openModals: ModalState = yield select(getOpenModals)\n\n    if (openModals['CreateCollectionModal'] || openModals['CreateThirdPartyCollectionModal']) {\n      // Redirect to the newly created collection detail\n      const { collection } = action.payload\n      const detailPageLocation = isTPCollection(collection) ? locations.thirdPartyCollectionDetail : locations.collectionDetail\n      yield put(push(detailPageLocation(collection.id)))\n    }\n\n    // Close corresponding modals\n    yield put(closeModal('CreateCollectionModal'))\n    yield put(closeModal('CreateThirdPartyCollectionModal'))\n    yield put(closeModal('EditCollectionURNModal'))\n    yield put(closeModal('EditCollectionNameModal'))\n  }\n\n  function* handleSaveItemSuccess(action: SaveItemSuccessAction) {\n    const { item } = action.payload\n    if (item.collectionId && !item.isPublished) {\n      const collection: Collection = yield select(getCollection, item.collectionId!)\n      yield put(saveCollectionRequest(collection))\n    }\n  }\n\n  function* handleSaveMultipleItemsSuccess(action: SaveMultipleItemsSuccessAction) {\n    const { items } = action.payload\n    if (items.length > 0 && items[0].collectionId) {\n      const collection: Collection = yield select(getCollection, items[0].collectionId!)\n      yield put(saveCollectionRequest(collection))\n    }\n  }\n\n  function* handleSaveCollectionRequest(action: SaveCollectionRequestAction) {\n    const { collection } = action.payload\n    try {\n      if (!isValidText(collection.name)) {\n        throw new Error(yield call(t, 'sagas.collection.invalid_character'))\n      }\n      if (isLocked(collection)) {\n        throw new Error(yield call(t, 'sagas.collection.collection_locked'))\n      }\n\n      let data: string = ''\n\n      if (getCollectionType(collection) === CollectionType.DECENTRALAND) {\n        const items: Item[] = yield select(state => getCollectionItems(state, collection.id))\n        const from: string = yield select(getAddress)\n        const maticChainId = getChainIdByNetwork(Network.MATIC)\n        const rarities: ContractData = yield select(state => getRaritiesContract(state, maticChainId))\n        const { abi } = getContract(ContractName.ERC721CollectionV2, maticChainId)\n\n        const provider: Provider = yield call(getNetworkProvider, maticChainId)\n        const collectionV2 = new Contract(\n          constants.AddressZero, // using zero address here since we just want the implementation of the ERC721CollectionV2 to generate the `data` of the initialize method\n          abi,\n          new providers.Web3Provider(provider)\n        )\n        data = yield call(\n          getMethodData,\n          collectionV2.populateTransaction.initialize(\n            collection.name,\n            getCollectionSymbol(collection),\n            getCollectionBaseURI(),\n            from,\n            true, // should complete\n            false, // is approved\n            rarities.address,\n            toInitializeItems(items)\n          )\n        )\n      }\n\n      const remoteCollection: Collection = yield call([legacyBuilderClient, 'saveCollection'], collection, data)\n      const newCollection = { ...collection, ...remoteCollection }\n\n      yield put(saveCollectionSuccess(newCollection))\n    } catch (error) {\n      yield put(saveCollectionFailure(collection, error.message))\n    }\n  }\n\n  function* handleDeleteCollectionRequest(action: DeleteCollectionRequestAction) {\n    const { collection } = action.payload\n    try {\n      yield call(() => legacyBuilderClient.deleteCollection(collection.id))\n      yield put(deleteCollectionSuccess(collection))\n\n      const collectionIdInUriParam: string = yield select(getCollectionId)\n      if (collectionIdInUriParam === collection.id) {\n        yield put(replace(locations.collections()))\n      }\n    } catch (error) {\n      yield put(deleteCollectionFailure(collection, error.message))\n    }\n  }\n\n  function* handlePublishCollectionRequest(action: PublishCollectionRequestAction) {\n    let { collection, items, email } = action.payload\n    try {\n      if (!isLocked(collection)) {\n        // To ensure the contract address of the collection is correct, we pre-emptively save it to the server and store the response.\n        // This will re-generate the address and any other data generated on the server (like the salt) before actually publishing it.\n        // We skip this step if the collection is locked to avoid an error from the server while trying to save the collection\n        yield put(saveCollectionRequest(collection))\n\n        const saveCollection: {\n          success: SaveCollectionSuccessAction\n          failure: SaveCollectionFailureAction\n        } = yield race({\n          success: take(SAVE_COLLECTION_SUCCESS),\n          failure: take(SAVE_COLLECTION_FAILURE)\n        })\n\n        if (saveCollection.success) {\n          collection = saveCollection.success.payload.collection\n        } else {\n          throw new Error(saveCollection.failure.payload.error)\n        }\n      }\n\n      if (!collection.salt) {\n        throw new Error(yield call(t, 'sagas.item.missing_salt'))\n      }\n\n      // Check that items currently in the builder match the items the user wants to publish\n      // This will solve the issue were users could add items in different tabs and not see them in the tab\n      // were the publish is being made, leaving the collection in a corrupted state.\n      const serverItems: Item[] = yield call([legacyBuilderClient, 'fetchCollectionItems'], collection.id)\n\n      if (serverItems.length !== items.length) {\n        throw new Error(`${UNSYNCED_COLLECTION_ERROR_PREFIX} Different items length`)\n      }\n\n      // TODO: Deeper comparison of browser and server items. Compare metadata for example.\n      serverItems.forEach(serverItem => {\n        const browserItem = items.find(item => item.id === serverItem.id)\n\n        if (!browserItem) {\n          throw new Error(`${UNSYNCED_COLLECTION_ERROR_PREFIX} Item found in the server but not in the browser`)\n        }\n      })\n\n      // Re-save items that are not updated with the latest hash\n      for (const item of items) {\n        if (hasOldHashedContents(item)) {\n          yield put(saveItemRequest(item, {}))\n\n          const saveItem: {\n            success: SaveCollectionSuccessAction\n            failure: SaveCollectionFailureAction\n          } = yield race({\n            success: take(SAVE_ITEM_SUCCESS),\n            failure: take(SAVE_ITEM_FAILURE)\n          })\n\n          if (saveItem.failure) {\n            throw new Error(saveItem.failure.payload.error)\n          }\n        }\n      }\n\n      const from: string = yield select(getAddress)\n      const maticChainId: ChainId = yield call(getChainIdByNetwork, Network.MATIC)\n\n      const forwarder = getContract(ContractName.Forwarder, maticChainId)\n      const factory = getCollectionFactoryContract(maticChainId)\n      const manager = getContract(ContractName.CollectionManager, maticChainId)\n\n      // We wait for TOS to end first to avoid locking the collection preemptively if this endpoint fails\n      yield retry(10, 500, legacyBuilderClient.saveTOS, collection, email)\n\n      const txHash: string = yield call(sendTransaction, manager, collectionManager =>\n        collectionManager.createCollection(\n          forwarder.address,\n          factory.address,\n          collection.salt!,\n          collection.name,\n          getCollectionSymbol(collection),\n          getCollectionBaseURI(),\n          from,\n          toInitializeItems(items)\n        )\n      )\n\n      const lock: string = yield retry(10, 500, legacyBuilderClient.lockCollection, collection)\n      collection = { ...collection, lock: +new Date(lock) }\n\n      yield put(publishCollectionSuccess(collection, items, maticChainId, txHash))\n      yield put(replace(locations.activity()))\n    } catch (error) {\n      yield put(publishCollectionFailure(collection, items, error.message))\n    }\n  }\n\n  function* handleSetCollectionMintersRequest(action: SetCollectionMintersRequestAction) {\n    const { collection, accessList } = action.payload\n    try {\n      const maticChainId = getChainIdByNetwork(Network.MATIC)\n\n      const addresses: string[] = []\n      const values: boolean[] = []\n\n      const newMinters = new Set(collection.minters)\n\n      for (const { address, hasAccess } of accessList) {\n        addresses.push(address)\n        values.push(hasAccess)\n\n        if (hasAccess) {\n          newMinters.add(address)\n        } else {\n          newMinters.delete(address)\n        }\n      }\n\n      const contract = { ...getContract(ContractName.ERC721CollectionV2, maticChainId), address: collection.contractAddress! }\n      const txHash: string = yield call(sendTransaction, contract, collection => collection.setMinters(addresses, values))\n\n      yield put(setCollectionMintersSuccess(collection, Array.from(newMinters), maticChainId, txHash))\n      yield put(replace(locations.activity()))\n    } catch (error) {\n      yield put(setCollectionMintersFailure(collection, accessList, error.message))\n    }\n  }\n\n  function* handleSetCollectionManagersRequest(action: SetCollectionManagersRequestAction) {\n    const { collection, accessList } = action.payload\n    try {\n      const maticChainId = getChainIdByNetwork(Network.MATIC)\n\n      const addresses: string[] = []\n      const values: boolean[] = []\n\n      const newManagers = new Set(collection.managers)\n\n      for (const { address, hasAccess } of accessList) {\n        addresses.push(address)\n        values.push(hasAccess)\n\n        if (hasAccess) {\n          newManagers.add(address)\n        } else {\n          newManagers.delete(address)\n        }\n      }\n\n      const contract = { ...getContract(ContractName.ERC721CollectionV2, maticChainId), address: collection.contractAddress! }\n      const txHash: string = yield call(sendTransaction, contract, collection => collection.setManagers(addresses, values))\n\n      yield put(setCollectionManagersSuccess(collection, Array.from(newManagers), maticChainId, txHash))\n      yield put(replace(locations.activity()))\n    } catch (error) {\n      yield put(setCollectionManagersFailure(collection, accessList, error.message))\n    }\n  }\n\n  function* handleMintCollectionItemsRequest(action: MintCollectionItemsRequestAction) {\n    const { collection, mints } = action.payload\n    try {\n      const maticChainId = getChainIdByNetwork(Network.MATIC)\n\n      const beneficiaries: string[] = []\n      const tokenIds: string[] = []\n\n      for (const mint of mints) {\n        const beneficiary = mint.address\n        for (let i = 0; i < mint.amount; i++) {\n          beneficiaries.push(beneficiary)\n          tokenIds.push(mint.item.tokenId!)\n        }\n      }\n\n      const contract = { ...getContract(ContractName.ERC721CollectionV2, maticChainId), address: collection.contractAddress! }\n      const txHash: string = yield call(sendTransaction, contract, collection => collection.issueTokens(beneficiaries, tokenIds))\n\n      yield put(mintCollectionItemsSuccess(collection, mints, maticChainId, txHash))\n      yield put(closeModal('MintItemsModal'))\n      yield put(replace(locations.activity()))\n    } catch (error) {\n      yield put(mintCollectionItemsFailure(collection, mints, error.message))\n    }\n  }\n\n  function* handleApproveCollectionRequest(action: ApproveCollectionRequestAction) {\n    const { collection } = action.payload\n    try {\n      const txHash: string = yield changeCollectionStatus(collection, true)\n      yield put(approveCollectionSuccess(collection, getChainIdByNetwork(Network.MATIC), txHash))\n    } catch (error) {\n      yield put(approveCollectionFailure(collection, error.message))\n    }\n  }\n\n  function* handleRejectCollectionRequest(action: RejectCollectionRequestAction) {\n    const { collection } = action.payload\n    try {\n      const [wallet]: [Wallet] = yield getWallet()\n      const maticChainId = wallet.networks.MATIC.chainId\n\n      const txHash: string = yield changeCollectionStatus(collection, false)\n      yield put(rejectCollectionSuccess(collection, maticChainId, txHash))\n    } catch (error) {\n      yield put(rejectCollectionFailure(collection, error.message))\n    }\n  }\n\n  function* handleRequestCollectionSuccess() {\n    let allItems: Item[] = yield select(getWalletItems)\n    if (allItems.length === 0) {\n      yield take(FETCH_ITEMS_SUCCESS)\n      allItems = yield select(getWalletItems)\n    }\n\n    try {\n      const collections: Collection[] = yield select(getWalletCollections)\n\n      for (const collection of collections) {\n        if (!collection.isPublished) continue\n        yield finishCollectionPublishing(collection)\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  function* handleTransactionSuccess(action: FetchTransactionSuccessAction) {\n    const transaction = action.payload.transaction\n\n    try {\n      switch (transaction.actionType) {\n        case PUBLISH_COLLECTION_SUCCESS: {\n          // We re-fetch the collection from the store to get the updated version\n          const collectionId = transaction.payload.collection.id\n          const collection: Collection = yield select(state => getCollection(state, collectionId))\n          yield finishCollectionPublishing(collection)\n          break\n        }\n        default: {\n          break\n        }\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  /**\n   * Processes a collection that was published to the blockchain by signaling the\n   * builder server that the collection has been published, setting the item ids,\n   * deploys the item entities to the Catalyst server and creates the forum post.\n   *\n   * @param collection - The collection to post process.\n   */\n  function* finishCollectionPublishing(collection: Collection) {\n    const avatarName: string | null = yield select(getName)\n    const items: Item[] = yield select(state => getCollectionItems(state, collection.id))\n\n    yield publishCollection(collection, items)\n\n    if (!collection.forumLink) {\n      yield put(createCollectionForumPostRequest(collection, buildCollectionForumPost(collection, items, avatarName || '')))\n    }\n  }\n\n  /**\n   * Publishes a collection, establishing ids for the items and their blockchain ids.\n   *\n   * @param collection - The collection that owns the items to be set as published.\n   * @param items - The items to be set as published.\n   */\n  function* publishCollection(collection: Collection, items: Item[]) {\n    const address: string | undefined = yield select(getAddress)\n    if (!isOwner(collection, address)) {\n      return\n    }\n\n    if (items.some(item => !item.tokenId)) {\n      yield put(setItemsTokenIdRequest(collection, items))\n    }\n  }\n\n  function* changeCollectionStatus(collection: Collection, isApproved: boolean) {\n    const maticChainId = getChainIdByNetwork(Network.MATIC)\n    const contract = getContract(ContractName.Committee, maticChainId)\n\n    const { abi } = getContract(ContractName.ERC721CollectionV2, maticChainId)\n    const implementation = new Contract(collection.contractAddress!, abi)\n\n    const manager = getContract(ContractName.CollectionManager, maticChainId)\n    const forwarder = getContract(ContractName.Forwarder, maticChainId)\n    const data: string = yield call(getMethodData, implementation.populateTransaction.setApproved(isApproved))\n\n    const txHash: string = yield call(sendTransaction, contract, committee =>\n      committee.manageCollection(manager.address, forwarder.address, collection.contractAddress!, [data])\n    )\n    return txHash\n  }\n\n  function* getItemsFromCollection(collection: Collection) {\n    const allItems: Item[] = yield select(getItems)\n    return allItems.filter(item => item.collectionId === collection.id)\n  }\n\n  function* getStandardItemsAndEntitiesToDeploy(collection: Collection) {\n    const itemsToDeploy: Item[] = []\n    const entitiesToDeploy: DeploymentPreparationData[] = []\n    const entitiesByItemId: ReturnType<typeof getEntityByItemId> = yield select(getEntityByItemId)\n    const itemsOfCollection: Item[] = yield getItemsFromCollection(collection)\n    for (const item of itemsOfCollection) {\n      const deployedEntity = entitiesByItemId[item.id]\n      if (!deployedEntity || !areSynced(item, deployedEntity)) {\n        const entity: DeploymentPreparationData = yield call(buildItemEntity, catalyst, legacyBuilderClient, collection, item)\n        itemsToDeploy.push(item)\n        entitiesToDeploy.push(entity)\n      }\n    }\n    return { itemsToDeploy, entitiesToDeploy }\n  }\n\n  function* handleInitiateTPItemsApprovalFlow(action: InitiateTPApprovalFlowAction) {\n    const { collection } = action.payload\n\n    try {\n      // Check if this makes sense or add a check to see if the items to be published are correct.\n      if (!collection.isPublished) {\n        throw new Error(\"The collection can't be approved because it's not published\")\n      }\n\n      // 1. Open modal\n      yield put(\n        openModal('ApprovalFlowModal', {\n          view: ApprovalFlowModalView.LOADING,\n          collection\n        })\n      )\n\n      // 2. Get items to approve & the approval data from the server\n      // TODO: Use the builder client. Tracked here: https://github.com/decentraland/builder/issues/1855\n      // Get all items to get approved in batches\n      const paginatedData: PaginatedResource<Item> = yield select(getPaginationData, collection.id)\n      const BATCH_SIZE = 50\n      const REQUESTS_BATCH_SIZE = 10\n      const pages = getArrayOfPagesFromTotal(Math.ceil(paginatedData.total / BATCH_SIZE))\n      const queue = new PQueue({ concurrency: REQUESTS_BATCH_SIZE })\n      const promisesOfPagesToFetch: (() => Promise<PaginatedResource<Item>>)[] = pages.map((page: number) => () =>\n        legacyBuilderClient.fetchCollectionItems(collection.id, {\n          page,\n          limit: BATCH_SIZE,\n          status: CurationStatus.PENDING\n        })\n      ) // TODO: try to convert this to a generator so we can test it's called with the right parameters\n      const allItemPages: PaginatedResource<Item>[] = yield queue.addAll(promisesOfPagesToFetch)\n      const itemsWithPendingCurations = allItemPages.flatMap(result => result.results)\n\n      if (!itemsWithPendingCurations.length) {\n        throw Error('Error fetching items to approve')\n      }\n      const { cheque, content_hashes: contentHashes, chequeWasConsumed, root }: ItemApprovalData = yield call(\n        [legacyBuilderClient, 'fetchApprovalData'],\n        collection.id\n      )\n\n      // 3. Compute the merkle tree root & create slot to consume\n      const tree = generateTree(Object.values(contentHashes))\n      const amountOfItemsToPublish = itemsWithPendingCurations.filter(item => !item.isApproved).length\n\n      if (cheque.qty < amountOfItemsToPublish) {\n        throw Error('Invalid qty of items to approve in the cheque')\n      }\n\n      // Open the ApprovalFlowModal with the items to be approved\n      // 4. Make the transaction to the contract (update of the merkle tree root with the signature and its parameters)\n      if (root !== tree.merkleRoot) {\n        const { r, s, v } = ethers.utils.splitSignature(cheque.signature)\n        const slot: Slot = {\n          qty: cheque.qty,\n          salt: cheque.salt,\n          sigR: r,\n          sigS: s,\n          sigV: v\n        }\n\n        const modalMetadata: ApprovalFlowModalMetadata<ApprovalFlowModalView.CONSUME_TP_SLOTS> = {\n          view: ApprovalFlowModalView.CONSUME_TP_SLOTS,\n          items: itemsWithPendingCurations,\n          collection,\n          merkleTreeRoot: tree.merkleRoot,\n          slots: chequeWasConsumed ? [] : [slot]\n        }\n\n        yield put(openModal('ApprovalFlowModal', modalMetadata))\n\n        // Wait for actions...\n        const { failure, cancel }: { failure: ReviewThirdPartyFailureAction; cancel: CloseModalAction } = yield race({\n          success: take(REVIEW_THIRD_PARTY_SUCCESS),\n          failure: take(REVIEW_THIRD_PARTY_FAILURE),\n          cancel: take(CLOSE_MODAL)\n        })\n\n        if (failure) {\n          throw new Error(failure.payload.error)\n        } else if (cancel) {\n          // If cancel exit flow\n          return\n        }\n\n        // If success wait for tx to be mined\n        yield waitForMerkleRootToBeSet(extractThirdPartyId(collection.urn), tree.merkleRoot)\n      }\n\n      // 5. If any, open the modal in the DEPLOY step and wait for actions\n      if (itemsWithPendingCurations.length > 0) {\n        const modalMetadata: ApprovalFlowModalMetadata<ApprovalFlowModalView.DEPLOY_TP> = {\n          view: ApprovalFlowModalView.DEPLOY_TP,\n          collection,\n          tree,\n          items: itemsWithPendingCurations,\n          hashes: contentHashes\n        }\n\n        yield put(openModal('ApprovalFlowModal', modalMetadata))\n\n        // Wait for actions...\n        const {\n          failure,\n          cancel\n        }: { success: DeployEntitiesSuccessAction; failure: DeployEntitiesFailureAction; cancel: CloseModalAction } = yield race({\n          success: take(DEPLOY_BATCHED_THIRD_PARTY_ITEMS_SUCCESS),\n          failure: take(DEPLOY_BATCHED_THIRD_PARTY_ITEMS_FAILURE),\n          cancel: take(CLOSE_MODAL)\n        })\n\n        // If failure show error and exit flow\n        if (failure) {\n          throw new Error(failure.payload.error)\n\n          // If cancel exit flow\n        } else if (cancel) {\n          return\n        }\n      }\n\n      // 7. Success 🎉\n      yield put(\n        openModal('ApprovalFlowModal', {\n          view: ApprovalFlowModalView.SUCCESS,\n          collection\n        })\n      )\n    } catch (error) {\n      // Handle error at any point in the flow and show them\n      const modalMetadata: ApprovalFlowModalMetadata<ApprovalFlowModalView.ERROR> = {\n        view: ApprovalFlowModalView.ERROR,\n        collection,\n        error: error.message\n      }\n      yield put(openModal('ApprovalFlowModal', modalMetadata))\n    }\n  }\n\n  function* handleInitiateApprovalFlow(action: InitiateApprovalFlowAction) {\n    const { collection } = action.payload\n\n    try {\n      if (!collection.isPublished) {\n        throw new Error(`The collection can't be approved because it's not published`)\n      }\n\n      // 1. Open modal\n      const modalMetadata: ApprovalFlowModalMetadata<ApprovalFlowModalView.LOADING> = {\n        view: ApprovalFlowModalView.LOADING,\n        collection\n      }\n      yield put(openModal('ApprovalFlowModal', modalMetadata))\n\n      // 2. Find items that need to be rescued (their content hash needs to be updated)\n      const itemsToRescue: Item[] = []\n      const contentHashes: string[] = []\n\n      let items: Item[] = yield getItemsFromCollection(collection)\n\n      // Check if any item does not have a tokenId.\n      // This might happen because the creator left the browser and never came back after publishing.\n      // Meaning that the tokenId could never be set.\n      // If the tokenId is never set, curators can't approve the collection.\n      // The following code attempts to set the tokenId for items that don't have it in a collection.\n      if (items.some(item => !item.tokenId)) {\n        // If any item does not have the token id, trigger the action that sets it.\n        yield put(setItemsTokenIdRequest(collection, items))\n\n        // Wait until the triggered action emits a success.\n        yield take(SET_ITEMS_TOKEN_ID_SUCCESS)\n\n        // Update the items to the new ones with the token id.\n        items = yield getItemsFromCollection(collection)\n      }\n\n      for (const item of items) {\n        if (!item.currentContentHash) {\n          const v0ContentHash: string = yield call(buildStandardWearableContentHash, collection, item, EntityHashingType.V0)\n          const v1ContentHash: string = yield call(buildStandardWearableContentHash, collection, item, EntityHashingType.V1)\n\n          // As there could be older hashes in the blockchain, check if both of them are different to see if they need an update\n          if (v0ContentHash !== item.blockchainContentHash && v1ContentHash !== item.blockchainContentHash) {\n            itemsToRescue.push(item)\n            contentHashes.push(v1ContentHash)\n          }\n        } else if (item.currentContentHash !== item.blockchainContentHash) {\n          itemsToRescue.push(item)\n          contentHashes.push(item.currentContentHash)\n        }\n      }\n\n      // 3. If any, open the modal in the rescue step and wait for actions\n      if (itemsToRescue.length > 0) {\n        const modalMetadata: ApprovalFlowModalMetadata<ApprovalFlowModalView.RESCUE> = {\n          view: ApprovalFlowModalView.RESCUE,\n          collection,\n          items: itemsToRescue,\n          contentHashes\n        }\n\n        yield put(openModal('ApprovalFlowModal', modalMetadata))\n\n        // Wait for actions...\n        const {\n          success,\n          failure,\n          cancel\n        }: { success: RescueItemsSuccessAction; failure: RescueItemsFailureAction; cancel: CloseModalAction } = yield race({\n          success: take(RESCUE_ITEMS_SUCCESS),\n          failure: take(RESCUE_ITEMS_FAILURE),\n          cancel: take(CLOSE_MODAL)\n        })\n\n        // If success wait for tx to be mined\n        if (success) {\n          // Wait for contentHashes to be indexed\n          yield waitForIndexer(itemsToRescue, contentHashes, collection.id)\n\n          // If failure show error and exit flow\n        } else if (failure) {\n          throw new Error(failure.payload.error)\n\n          // If cancel exit flow\n        } else if (cancel) {\n          return\n        }\n      }\n\n      // 4. Find items that need to be deployed (the content in the catalyst doesn't match their content hash in the blockchain)\n      const { itemsToDeploy, entitiesToDeploy }: { itemsToDeploy: Item[]; entitiesToDeploy: DeploymentPreparationData[] } = yield call(\n        getStandardItemsAndEntitiesToDeploy,\n        collection\n      )\n\n      // 5. If any, open the modal in the DEPLOY step and wait for actions\n      if (itemsToDeploy.length > 0) {\n        const modalMetadata: ApprovalFlowModalMetadata<ApprovalFlowModalView.DEPLOY> = {\n          view: ApprovalFlowModalView.DEPLOY,\n          collection,\n          items: itemsToDeploy,\n          entities: entitiesToDeploy\n        }\n        yield put(openModal('ApprovalFlowModal', modalMetadata))\n\n        // Wait for actions...\n        const {\n          failure,\n          cancel\n        }: { success: DeployEntitiesSuccessAction; failure: DeployEntitiesFailureAction; cancel: CloseModalAction } = yield race({\n          success: take(DEPLOY_ENTITIES_SUCCESS),\n          failure: take(DEPLOY_ENTITIES_FAILURE),\n          cancel: take(CLOSE_MODAL)\n        })\n\n        // If failure show error and exit flow\n        if (failure) {\n          throw new Error(failure.payload.error)\n\n          // If cancel exit flow\n        } else if (cancel) {\n          return\n        }\n      }\n\n      // 6. If the collection needs to be approved, show the approve modal\n      if (!collection.isApproved) {\n        const modalMetadata: ApprovalFlowModalMetadata<ApprovalFlowModalView.APPROVE> = { view: ApprovalFlowModalView.APPROVE, collection }\n        yield put(openModal('ApprovalFlowModal', modalMetadata))\n\n        // Wait for actions...\n        const {\n          failure,\n          cancel\n        }: { success: ApproveCollectionSuccessAction; failure: ApproveCollectionFailureAction; cancel: CloseModalAction } = yield race({\n          success: take(APPROVE_COLLECTION_SUCCESS),\n          failure: take(APPROVE_COLLECTION_FAILURE),\n          cancel: take(CLOSE_MODAL)\n        })\n\n        // iI failure show error and exit flow\n        if (failure) {\n          throw new Error(failure.payload.error)\n\n          // if cancel exit flow\n        } else if (cancel) {\n          return\n        }\n      } else {\n        // 7. If the collection was approved but it had a pending curation, approve the curation\n        const curationsByCollectionId: Record<string, CollectionCuration> = yield select(getCurationsByCollectionId)\n        const curation = curationsByCollectionId[collection.id]\n        if (curation && curation.status === CurationStatus.PENDING) {\n          yield put(approveCollectionCurationRequest(curation.collectionId))\n\n          // wait for actions\n          const {\n            failure\n          }: { success: ApproveCollectionCurationSuccessAction; failure: ApproveCollectionCurationFailureAction } = yield race({\n            success: take(APPROVE_COLLECTION_CURATION_SUCCESS),\n            failure: take(APPROVE_COLLECTION_CURATION_FAILURE)\n          })\n\n          // if failure show error\n          if (failure) {\n            const modalMetadata: ApprovalFlowModalMetadata<ApprovalFlowModalView.ERROR> = {\n              view: ApprovalFlowModalView.ERROR,\n              collection,\n              error: failure.payload.error\n            }\n            yield put(openModal('ApprovalFlowModal', modalMetadata))\n            return\n          }\n        }\n      }\n\n      // 8. Success 🎉\n      yield put(\n        openModal('ApprovalFlowModal', {\n          view: ApprovalFlowModalView.SUCCESS,\n          collection\n        })\n      )\n    } catch (error) {\n      // Handle error at any point in the flow and show them\n      const modalMetadata: ApprovalFlowModalMetadata<ApprovalFlowModalView.ERROR> = {\n        view: ApprovalFlowModalView.ERROR,\n        collection,\n        error: error.message\n      }\n      yield put(openModal('ApprovalFlowModal', modalMetadata))\n    }\n  }\n\n  function* waitForMerkleRootToBeSet(thirdPartyId: string, merkleRoot: string) {\n    for (let i = 0; i < THIRD_PARTY_MERKLE_ROOT_CHECK_MAX_RETRIES; i++) {\n      const thirdParty: ThirdParty = yield call([client, 'getThirdParty'], thirdPartyId)\n      if (thirdParty.root === merkleRoot) {\n        return\n      }\n      yield delay(1000)\n    }\n    throw new Error('The Merkle Root was not set in time')\n  }\n\n  function* waitForIndexer(items: Item[], contentHashes: string[], collectionId: string) {\n    const contentHashByItemId = new Map<string, string>()\n    for (let i = 0; i < items.length; i++) {\n      contentHashByItemId.set(items[i].id, contentHashes[i])\n    }\n    let isIndexed = false\n    const itemIds = items.map(item => item.id)\n    while (!isIndexed) {\n      yield delay(1000)\n      yield put(fetchCollectionItemsRequest(collectionId))\n      yield race({\n        success: take(FETCH_COLLECTION_ITEMS_SUCCESS),\n        failure: take(FETCH_COLLECTION_ITEMS_FAILURE)\n      })\n      // use items from state (updated after the fetchItemsSuccess)\n      const itemsById: ReturnType<typeof getItemsById> = yield select(getItemsById)\n      isIndexed = itemIds.every(id => {\n        const indexedContentHash = itemsById[id].blockchainContentHash\n        const expectedContentHash = contentHashByItemId.get(id)\n        return indexedContentHash === expectedContentHash\n      })\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}