{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { KeyboardEventTypes } from \"../../Events/keyboardEvents\";\nimport { Tools } from '../../Misc/tools';\n/**\r\n * Manage the keyboard inputs to control the movement of a follow camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar FollowCameraKeyboardMoveInput =\n/** @class */\nfunction () {\n  function FollowCameraKeyboardMoveInput() {\n    /**\r\n     * Defines the list of key codes associated with the up action (increase heightOffset)\r\n     */\n    this.keysHeightOffsetIncr = [38];\n    /**\r\n     * Defines the list of key codes associated with the down action (decrease heightOffset)\r\n     */\n\n    this.keysHeightOffsetDecr = [40];\n    /**\r\n     * Defines whether the Alt modifier key is required to move up/down (alter heightOffset)\r\n     */\n\n    this.keysHeightOffsetModifierAlt = false;\n    /**\r\n     * Defines whether the Ctrl modifier key is required to move up/down (alter heightOffset)\r\n     */\n\n    this.keysHeightOffsetModifierCtrl = false;\n    /**\r\n     * Defines whether the Shift modifier key is required to move up/down (alter heightOffset)\r\n     */\n\n    this.keysHeightOffsetModifierShift = false;\n    /**\r\n     * Defines the list of key codes associated with the left action (increase rotationOffset)\r\n     */\n\n    this.keysRotationOffsetIncr = [37];\n    /**\r\n     * Defines the list of key codes associated with the right action (decrease rotationOffset)\r\n     */\n\n    this.keysRotationOffsetDecr = [39];\n    /**\r\n     * Defines whether the Alt modifier key is required to move left/right (alter rotationOffset)\r\n     */\n\n    this.keysRotationOffsetModifierAlt = false;\n    /**\r\n     * Defines whether the Ctrl modifier key is required to move left/right (alter rotationOffset)\r\n     */\n\n    this.keysRotationOffsetModifierCtrl = false;\n    /**\r\n     * Defines whether the Shift modifier key is required to move left/right (alter rotationOffset)\r\n     */\n\n    this.keysRotationOffsetModifierShift = false;\n    /**\r\n     * Defines the list of key codes associated with the zoom-in action (decrease radius)\r\n     */\n\n    this.keysRadiusIncr = [40];\n    /**\r\n     * Defines the list of key codes associated with the zoom-out action (increase radius)\r\n     */\n\n    this.keysRadiusDecr = [38];\n    /**\r\n     * Defines whether the Alt modifier key is required to zoom in/out (alter radius value)\r\n     */\n\n    this.keysRadiusModifierAlt = true;\n    /**\r\n     * Defines whether the Ctrl modifier key is required to zoom in/out (alter radius value)\r\n     */\n\n    this.keysRadiusModifierCtrl = false;\n    /**\r\n     * Defines whether the Shift modifier key is required to zoom in/out (alter radius value)\r\n     */\n\n    this.keysRadiusModifierShift = false;\n    /**\r\n     * Defines the rate of change of heightOffset.\r\n     */\n\n    this.heightSensibility = 1;\n    /**\r\n     * Defines the rate of change of rotationOffset.\r\n     */\n\n    this.rotationSensibility = 1;\n    /**\r\n     * Defines the rate of change of radius.\r\n     */\n\n    this.radiusSensibility = 1;\n    this._keys = new Array();\n  }\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this;\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    if (this._onCanvasBlurObserver) {\n      return;\n    }\n\n    this._scene = this.camera.getScene();\n    this._engine = this._scene.getEngine();\n    this._onCanvasBlurObserver = this._engine.onCanvasBlurObservable.add(function () {\n      _this._keys = [];\n    });\n    this._onKeyboardObserver = this._scene.onKeyboardObservable.add(function (info) {\n      var evt = info.event;\n\n      if (!evt.metaKey) {\n        if (info.type === KeyboardEventTypes.KEYDOWN) {\n          _this._ctrlPressed = evt.ctrlKey;\n          _this._altPressed = evt.altKey;\n          _this._shiftPressed = evt.shiftKey;\n\n          if (_this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 || _this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 || _this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 || _this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 || _this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 || _this.keysRadiusDecr.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index === -1) {\n              _this._keys.push(evt.keyCode);\n            }\n\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        } else {\n          if (_this.keysHeightOffsetIncr.indexOf(evt.keyCode) !== -1 || _this.keysHeightOffsetDecr.indexOf(evt.keyCode) !== -1 || _this.keysRotationOffsetIncr.indexOf(evt.keyCode) !== -1 || _this.keysRotationOffsetDecr.indexOf(evt.keyCode) !== -1 || _this.keysRadiusIncr.indexOf(evt.keyCode) !== -1 || _this.keysRadiusDecr.indexOf(evt.keyCode) !== -1) {\n            var index = _this._keys.indexOf(evt.keyCode);\n\n            if (index >= 0) {\n              _this._keys.splice(index, 1);\n            }\n\n            if (evt.preventDefault) {\n              if (!noPreventDefault) {\n                evt.preventDefault();\n              }\n            }\n          }\n        }\n      }\n    });\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype.detachControl = function (ignored) {\n    if (this._scene) {\n      if (this._onKeyboardObserver) {\n        this._scene.onKeyboardObservable.remove(this._onKeyboardObserver);\n      }\n\n      if (this._onCanvasBlurObserver) {\n        this._engine.onCanvasBlurObservable.remove(this._onCanvasBlurObserver);\n      }\n\n      this._onKeyboardObserver = null;\n      this._onCanvasBlurObserver = null;\n    }\n\n    this._keys = [];\n  };\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype.checkInputs = function () {\n    var _this = this;\n\n    if (this._onKeyboardObserver) {\n      this._keys.forEach(function (keyCode) {\n        if (_this.keysHeightOffsetIncr.indexOf(keyCode) !== -1 && _this._modifierHeightOffset()) {\n          _this.camera.heightOffset += _this.heightSensibility;\n        } else if (_this.keysHeightOffsetDecr.indexOf(keyCode) !== -1 && _this._modifierHeightOffset()) {\n          _this.camera.heightOffset -= _this.heightSensibility;\n        } else if (_this.keysRotationOffsetIncr.indexOf(keyCode) !== -1 && _this._modifierRotationOffset()) {\n          _this.camera.rotationOffset += _this.rotationSensibility;\n          _this.camera.rotationOffset %= 360;\n        } else if (_this.keysRotationOffsetDecr.indexOf(keyCode) !== -1 && _this._modifierRotationOffset()) {\n          _this.camera.rotationOffset -= _this.rotationSensibility;\n          _this.camera.rotationOffset %= 360;\n        } else if (_this.keysRadiusIncr.indexOf(keyCode) !== -1 && _this._modifierRadius()) {\n          _this.camera.radius += _this.radiusSensibility;\n        } else if (_this.keysRadiusDecr.indexOf(keyCode) !== -1 && _this._modifierRadius()) {\n          _this.camera.radius -= _this.radiusSensibility;\n        }\n      });\n    }\n  };\n  /**\r\n   * Gets the class name of the current input.\r\n   * @returns the class name\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype.getClassName = function () {\n    return \"FollowCameraKeyboardMoveInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype.getSimpleName = function () {\n    return \"keyboard\";\n  };\n  /**\r\n   * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\r\n   * allow modification of the heightOffset value.\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype._modifierHeightOffset = function () {\n    return this.keysHeightOffsetModifierAlt === this._altPressed && this.keysHeightOffsetModifierCtrl === this._ctrlPressed && this.keysHeightOffsetModifierShift === this._shiftPressed;\n  };\n  /**\r\n   * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\r\n   * allow modification of the rotationOffset value.\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype._modifierRotationOffset = function () {\n    return this.keysRotationOffsetModifierAlt === this._altPressed && this.keysRotationOffsetModifierCtrl === this._ctrlPressed && this.keysRotationOffsetModifierShift === this._shiftPressed;\n  };\n  /**\r\n   * Check if the pressed modifier keys (Alt/Ctrl/Shift) match those configured to\r\n   * allow modification of the radius value.\r\n   */\n\n\n  FollowCameraKeyboardMoveInput.prototype._modifierRadius = function () {\n    return this.keysRadiusModifierAlt === this._altPressed && this.keysRadiusModifierCtrl === this._ctrlPressed && this.keysRadiusModifierShift === this._shiftPressed;\n  };\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetIncr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetDecr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetModifierAlt\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetModifierCtrl\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysHeightOffsetModifierShift\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetIncr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetDecr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetModifierAlt\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetModifierCtrl\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRotationOffsetModifierShift\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusIncr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusDecr\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusModifierAlt\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusModifierCtrl\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"keysRadiusModifierShift\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"heightSensibility\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"rotationSensibility\", void 0);\n\n  __decorate([serialize()], FollowCameraKeyboardMoveInput.prototype, \"radiusSensibility\", void 0);\n\n  return FollowCameraKeyboardMoveInput;\n}();\n\nexport { FollowCameraKeyboardMoveInput };\nCameraInputTypes[\"FollowCameraKeyboardMoveInput\"] = FollowCameraKeyboardMoveInput;","map":null,"metadata":{},"sourceType":"module"}