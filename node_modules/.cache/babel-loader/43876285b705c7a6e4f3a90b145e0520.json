{"ast":null,"code":"import { ThinEngine } from \"../../Engines/thinEngine\";\nimport { CanvasGenerator } from '../../Misc/canvasGenerator';\n\nThinEngine.prototype.updateVideoTexture = function (texture, video, invertY) {\n  if (!texture || texture._isDisabled) {\n    return;\n  }\n\n  var wasPreviouslyBound = this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\n\n  this._unpackFlipY(!invertY); // Video are upside down by default\n\n\n  try {\n    // Testing video texture support\n    if (this._videoTextureSupported === undefined) {\n      // clear old errors just in case.\n      this._gl.getError();\n\n      this._gl.texImage2D(this._gl.TEXTURE_2D, 0, this._gl.RGBA, this._gl.RGBA, this._gl.UNSIGNED_BYTE, video);\n\n      if (this._gl.getError() !== 0) {\n        this._videoTextureSupported = false;\n      } else {\n        this._videoTextureSupported = true;\n      }\n    } // Copy video through the current working canvas if video texture is not supported\n\n\n    if (!this._videoTextureSupported) {\n      if (!texture._workingCanvas) {\n        texture._workingCanvas = CanvasGenerator.CreateCanvas(texture.width, texture.height);\n\n        var context = texture._workingCanvas.getContext(\"2d\");\n\n        if (!context) {\n          throw new Error(\"Unable to get 2d context\");\n        }\n\n        texture._workingContext = context;\n        texture._workingCanvas.width = texture.width;\n        texture._workingCanvas.height = texture.height;\n      }\n\n      texture._workingContext.clearRect(0, 0, texture.width, texture.height);\n\n      texture._workingContext.drawImage(video, 0, 0, video.videoWidth, video.videoHeight, 0, 0, texture.width, texture.height);\n\n      this._gl.texImage2D(this._gl.TEXTURE_2D, 0, this._gl.RGBA, this._gl.RGBA, this._gl.UNSIGNED_BYTE, texture._workingCanvas);\n    } else {\n      this._gl.texImage2D(this._gl.TEXTURE_2D, 0, this._gl.RGBA, this._gl.RGBA, this._gl.UNSIGNED_BYTE, video);\n    }\n\n    if (texture.generateMipMaps) {\n      this._gl.generateMipmap(this._gl.TEXTURE_2D);\n    }\n\n    if (!wasPreviouslyBound) {\n      this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\n    } //    this.resetTextureCache();\n\n\n    texture.isReady = true;\n  } catch (ex) {\n    // Something unexpected\n    // Let's disable the texture\n    texture._isDisabled = true;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}