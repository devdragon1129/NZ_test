{"ast":null,"code":"import _defineProperty from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { createSelector } from 'reselect';\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { isEqual } from 'lib/address';\nimport { getPendingTransactions } from 'modules/transaction/selectors';\nimport { getName } from 'modules/profile/selectors';\nimport { SET_ENS_RESOLVER_SUCCESS, SET_ENS_CONTENT_REQUEST, SET_ENS_CONTENT_SUCCESS, CLAIM_NAME_SUCCESS, ALLOW_CLAIM_MANA_SUCCESS } from './actions';\nimport { getDomainFromName } from './utils';\nexport var getState = function getState(state) {\n  return state.ens;\n};\nexport var getData = function getData(state) {\n  return getState(state).data;\n};\nexport var getAuthorizations = function getAuthorizations(state) {\n  return getState(state).authorizations;\n};\nexport var getError = function getError(state) {\n  return getState(state).error;\n};\nexport var getLoading = function getLoading(state) {\n  return getState(state).loading;\n};\nexport var getENSList = createSelector(getData, function (ensData) {\n  return Object.values(ensData);\n});\nexport var getENSByWallet = createSelector(getENSList, getAddress, function (ensList) {\n  var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return ensList.filter(function (ens) {\n    return isEqual(ens.address, address);\n  });\n});\nexport var getAuthorizationByWallet = createSelector(getAuthorizations, getAddress, function (authorizations) {\n  var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  for (var authAddress in authorizations) {\n    if (isEqual(authAddress, address)) {\n      return authorizations[authAddress];\n    }\n  }\n\n  return undefined;\n});\nexport var getAliases = createSelector(getENSList, getAddress, getName, function (ensList) {\n  var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return ensList.filter(function (ens) {\n    return isEqual(ens.address, address) && name && ens.subdomain === getDomainFromName(name);\n  });\n});\nexport var getENSForLand = function getENSForLand(state, landId) {\n  var ensList = getENSList(state);\n  return ensList.filter(function (ens) {\n    return ens.landId === landId;\n  });\n};\nexport var isWaitingTxClaimName = createSelector(getPendingTransactions, function (transactions) {\n  return transactions.some(function (transaction) {\n    return CLAIM_NAME_SUCCESS === transaction.actionType;\n  });\n});\nexport var isWaitingTxAllowMana = createSelector(getPendingTransactions, function (transactions) {\n  return transactions.some(function (transaction) {\n    return ALLOW_CLAIM_MANA_SUCCESS === transaction.actionType;\n  });\n});\nexport var isWaitingTxSetResolver = createSelector(getPendingTransactions, function (transactions) {\n  return transactions.some(function (transaction) {\n    return SET_ENS_RESOLVER_SUCCESS === transaction.actionType;\n  });\n});\nexport var isWaitingTxSetLandContent = function isWaitingTxSetLandContent(state, landId) {\n  return getPendingTransactions(state).some(function (transaction) {\n    return SET_ENS_CONTENT_SUCCESS === transaction.actionType && transaction.payload.land.id === landId;\n  });\n};\nexport var isLoadingContentBySubdomain = createSelector(getENSList, getLoading, function (ensList, loading) {\n  return ensList.reduce(function (obj, ens) {\n    return _objectSpread({}, obj, _defineProperty({}, ens.subdomain, loading.some(function (action) {\n      return action.type === SET_ENS_CONTENT_REQUEST && action.payload.ens.subdomain === ens.subdomain;\n    })));\n  }, {});\n});\nexport var isPendingContentBySubdomain = createSelector(getENSList, getPendingTransactions, function (ensList, transactions) {\n  return ensList.reduce(function (obj, ens) {\n    return _objectSpread({}, obj, _defineProperty({}, ens.subdomain, transactions.some(function (transaction) {\n      return SET_ENS_CONTENT_SUCCESS === transaction.actionType && transaction.payload.ens.subdomain === ens.subdomain;\n    })));\n  }, {});\n});","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/ens/selectors.ts"],"names":["createSelector","getAddress","isEqual","getPendingTransactions","getName","SET_ENS_RESOLVER_SUCCESS","SET_ENS_CONTENT_REQUEST","SET_ENS_CONTENT_SUCCESS","CLAIM_NAME_SUCCESS","ALLOW_CLAIM_MANA_SUCCESS","getDomainFromName","getState","state","ens","getData","data","getAuthorizations","authorizations","getError","error","getLoading","loading","getENSList","ensData","Object","values","getENSByWallet","ensList","address","filter","getAuthorizationByWallet","authAddress","undefined","getAliases","name","subdomain","getENSForLand","landId","isWaitingTxClaimName","transactions","some","transaction","actionType","isWaitingTxAllowMana","isWaitingTxSetResolver","isWaitingTxSetLandContent","payload","land","id","isLoadingContentBySubdomain","reduce","obj","action","type","isPendingContentBySubdomain"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect'\nimport { LoadingState } from 'decentraland-dapps/dist/modules/loading/reducer'\nimport { Transaction } from 'decentraland-dapps/dist/modules/transaction/types'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { isEqual } from 'lib/address'\nimport { RootState } from 'modules/common/types'\nimport { getPendingTransactions } from 'modules/transaction/selectors'\nimport { getName } from 'modules/profile/selectors'\nimport {\n  SET_ENS_RESOLVER_SUCCESS,\n  SET_ENS_CONTENT_REQUEST,\n  SET_ENS_CONTENT_SUCCESS,\n  CLAIM_NAME_SUCCESS,\n  ALLOW_CLAIM_MANA_SUCCESS\n} from './actions'\nimport { Authorization, ENS } from './types'\nimport { ENSState } from './reducer'\nimport { getDomainFromName } from './utils'\n\nexport const getState = (state: RootState) => state.ens\nexport const getData = (state: RootState) => getState(state).data\nexport const getAuthorizations = (state: RootState) => getState(state).authorizations\nexport const getError = (state: RootState) => getState(state).error\nexport const getLoading = (state: RootState) => getState(state).loading\n\nexport const getENSList = createSelector<RootState, ENSState['data'], ENS[]>(getData, ensData => Object.values(ensData))\n\nexport const getENSByWallet = createSelector<RootState, ENS[], string | undefined, ENS[]>(getENSList, getAddress, (ensList, address = '') =>\n  ensList.filter(ens => isEqual(ens.address, address))\n)\n\nexport const getAuthorizationByWallet = createSelector<\n  RootState,\n  ENSState['authorizations'],\n  string | undefined,\n  Authorization | undefined\n>(getAuthorizations, getAddress, (authorizations, address = '') => {\n  for (const authAddress in authorizations) {\n    if (isEqual(authAddress, address)) {\n      return authorizations[authAddress]\n    }\n  }\n  return undefined\n})\n\nexport const getAliases = createSelector<RootState, ENS[], string | undefined, string | null, ENS[]>(\n  getENSList,\n  getAddress,\n  getName,\n  (ensList, address = '', name = '') =>\n    ensList.filter(ens => isEqual(ens.address, address) && name && ens.subdomain === getDomainFromName(name))\n)\n\nexport const getENSForLand = (state: RootState, landId: string) => {\n  const ensList = getENSList(state)\n  return ensList.filter(ens => ens.landId === landId)\n}\n\nexport const isWaitingTxClaimName = createSelector<RootState, Transaction[], boolean>(getPendingTransactions, transactions =>\n  transactions.some(transaction => CLAIM_NAME_SUCCESS === transaction.actionType)\n)\n\nexport const isWaitingTxAllowMana = createSelector<RootState, Transaction[], boolean>(getPendingTransactions, transactions =>\n  transactions.some(transaction => ALLOW_CLAIM_MANA_SUCCESS === transaction.actionType)\n)\n\nexport const isWaitingTxSetResolver = createSelector<RootState, Transaction[], boolean>(getPendingTransactions, transactions =>\n  transactions.some(transaction => SET_ENS_RESOLVER_SUCCESS === transaction.actionType)\n)\n\nexport const isWaitingTxSetLandContent = (state: RootState, landId: string) =>\n  getPendingTransactions(state).some(\n    transaction => SET_ENS_CONTENT_SUCCESS === transaction.actionType && transaction.payload.land.id === landId\n  )\n\nexport const isLoadingContentBySubdomain = createSelector<RootState, ENS[], LoadingState, Record<string, boolean>>(\n  getENSList,\n  getLoading,\n  (ensList, loading) =>\n    ensList.reduce(\n      (obj, ens) => ({\n        ...obj,\n        [ens.subdomain]: loading.some(action => action.type === SET_ENS_CONTENT_REQUEST && action.payload.ens.subdomain === ens.subdomain)\n      }),\n      {} as Record<string, boolean>\n    )\n)\n\nexport const isPendingContentBySubdomain = createSelector<RootState, ENS[], Transaction[], Record<string, boolean>>(\n  getENSList,\n  getPendingTransactions,\n  (ensList, transactions) =>\n    ensList.reduce(\n      (obj, ens) => ({\n        ...obj,\n        [ens.subdomain]: transactions.some(\n          transaction => SET_ENS_CONTENT_SUCCESS === transaction.actionType && transaction.payload.ens.subdomain === ens.subdomain\n        )\n      }),\n      {} as Record<string, boolean>\n    )\n)\n"]},"metadata":{},"sourceType":"module"}