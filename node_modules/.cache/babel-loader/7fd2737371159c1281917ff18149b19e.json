{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _isPlainObject2 = _interopRequireDefault(require(\"lodash/isPlainObject\"));\n\nvar _pick2 = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar _includes2 = _interopRequireDefault(require(\"lodash/includes\"));\n\nvar _reduce2 = _interopRequireDefault(require(\"lodash/reduce\"));\n\nvar _isEmpty2 = _interopRequireDefault(require(\"lodash/isEmpty\"));\n\nvar _invoke2 = _interopRequireDefault(require(\"lodash/invoke\"));\n\nvar _reactComponentRef = require(\"@fluentui/react-component-ref\");\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _shallowequal = _interopRequireDefault(require(\"shallowequal\"));\n\nvar _lib = require(\"../../lib\");\n\nvar _Icon = _interopRequireDefault(require(\"../../elements/Icon\"));\n\nvar _Portal = _interopRequireDefault(require(\"../../addons/Portal\"));\n\nvar _ModalActions = _interopRequireDefault(require(\"./ModalActions\"));\n\nvar _ModalContent = _interopRequireDefault(require(\"./ModalContent\"));\n\nvar _ModalDescription = _interopRequireDefault(require(\"./ModalDescription\"));\n\nvar _ModalDimmer = _interopRequireDefault(require(\"./ModalDimmer\"));\n\nvar _ModalHeader = _interopRequireDefault(require(\"./ModalHeader\"));\n\nvar _utils = require(\"./utils\");\n/**\n * A modal displays content that temporarily blocks interactions with the main view of a site.\n * @see Confirm\n * @see Portal\n */\n\n\nvar Modal = /*#__PURE__*/function (_Component) {\n  (0, _inheritsLoose2.default)(Modal, _Component);\n\n  function Modal() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.legacy = (0, _lib.isBrowser)() && (0, _utils.isLegacy)();\n    _this.ref = /*#__PURE__*/(0, _react.createRef)();\n    _this.dimmerRef = /*#__PURE__*/(0, _react.createRef)();\n    _this.latestDocumentMouseDownEvent = null;\n\n    _this.getMountNode = function () {\n      return (0, _lib.isBrowser)() ? _this.props.mountNode || document.body : null;\n    };\n\n    _this.handleActionsOverrides = function (predefinedProps) {\n      return {\n        onActionClick: function onActionClick(e, actionProps) {\n          (0, _invoke2.default)(predefinedProps, 'onActionClick', e, actionProps);\n          (0, _invoke2.default)(_this.props, 'onActionClick', e, _this.props);\n\n          _this.handleClose(e);\n        }\n      };\n    };\n\n    _this.handleClose = function (e) {\n      _this.setState({\n        open: false\n      });\n\n      (0, _invoke2.default)(_this.props, 'onClose', e, (0, _extends2.default)({}, _this.props, {\n        open: false\n      }));\n    };\n\n    _this.handleDocumentMouseDown = function (e) {\n      _this.latestDocumentMouseDownEvent = e;\n    };\n\n    _this.handleDocumentClick = function (e) {\n      var closeOnDimmerClick = _this.props.closeOnDimmerClick;\n      var currentDocumentMouseDownEvent = _this.latestDocumentMouseDownEvent;\n      _this.latestDocumentMouseDownEvent = null;\n      if (!closeOnDimmerClick || (0, _lib.doesNodeContainClick)(_this.ref.current, currentDocumentMouseDownEvent) || (0, _lib.doesNodeContainClick)(_this.ref.current, e)) return;\n\n      _this.setState({\n        open: false\n      });\n\n      (0, _invoke2.default)(_this.props, 'onClose', e, (0, _extends2.default)({}, _this.props, {\n        open: false\n      }));\n    };\n\n    _this.handleIconOverrides = function (predefinedProps) {\n      return {\n        onClick: function onClick(e) {\n          (0, _invoke2.default)(predefinedProps, 'onClick', e);\n\n          _this.handleClose(e);\n        }\n      };\n    };\n\n    _this.handleOpen = function (e) {\n      (0, _invoke2.default)(_this.props, 'onOpen', e, (0, _extends2.default)({}, _this.props, {\n        open: true\n      }));\n\n      _this.setState({\n        open: true\n      });\n    };\n\n    _this.handlePortalMount = function (e) {\n      var eventPool = _this.props.eventPool;\n\n      _this.setState({\n        scrolling: false\n      });\n\n      _this.setPositionAndClassNames();\n\n      _lib.eventStack.sub('mousedown', _this.handleDocumentMouseDown, {\n        pool: eventPool,\n        target: _this.dimmerRef.current\n      });\n\n      _lib.eventStack.sub('click', _this.handleDocumentClick, {\n        pool: eventPool,\n        target: _this.dimmerRef.current\n      });\n\n      (0, _invoke2.default)(_this.props, 'onMount', e, _this.props);\n    };\n\n    _this.handlePortalUnmount = function (e) {\n      var eventPool = _this.props.eventPool;\n      cancelAnimationFrame(_this.animationRequestId);\n\n      _lib.eventStack.unsub('mousedown', _this.handleDocumentMouseDown, {\n        pool: eventPool,\n        target: _this.dimmerRef.current\n      });\n\n      _lib.eventStack.unsub('click', _this.handleDocumentClick, {\n        pool: eventPool,\n        target: _this.dimmerRef.current\n      });\n\n      (0, _invoke2.default)(_this.props, 'onUnmount', e, _this.props);\n    };\n\n    _this.setPositionAndClassNames = function () {\n      var centered = _this.props.centered;\n      var scrolling;\n      var newState = {};\n\n      if (_this.ref.current) {\n        var rect = _this.ref.current.getBoundingClientRect();\n\n        var isFitted = (0, _utils.canFit)(rect);\n        scrolling = !isFitted; // Styles should be computed for IE11\n\n        var legacyStyles = _this.legacy ? (0, _utils.getLegacyStyles)(isFitted, centered, rect) : {};\n\n        if (!(0, _shallowequal.default)(_this.state.legacyStyles, legacyStyles)) {\n          newState.legacyStyles = legacyStyles;\n        }\n\n        if (_this.state.scrolling !== scrolling) {\n          newState.scrolling = scrolling;\n        }\n      }\n\n      if (!(0, _isEmpty2.default)(newState)) _this.setState(newState);\n      _this.animationRequestId = requestAnimationFrame(_this.setPositionAndClassNames);\n    };\n\n    _this.renderContent = function (rest) {\n      var _this$props = _this.props,\n          actions = _this$props.actions,\n          basic = _this$props.basic,\n          children = _this$props.children,\n          className = _this$props.className,\n          closeIcon = _this$props.closeIcon,\n          content = _this$props.content,\n          header = _this$props.header,\n          size = _this$props.size,\n          style = _this$props.style;\n      var _this$state = _this.state,\n          legacyStyles = _this$state.legacyStyles,\n          scrolling = _this$state.scrolling;\n      var classes = (0, _clsx.default)('ui', size, (0, _lib.useKeyOnly)(basic, 'basic'), (0, _lib.useKeyOnly)(_this.legacy, 'legacy'), (0, _lib.useKeyOnly)(scrolling, 'scrolling'), 'modal transition visible active', className);\n      var ElementType = (0, _lib.getElementType)(Modal, _this.props);\n      var closeIconName = closeIcon === true ? 'close' : closeIcon;\n\n      var closeIconJSX = _Icon.default.create(closeIconName, {\n        overrideProps: _this.handleIconOverrides\n      });\n\n      return /*#__PURE__*/_react.default.createElement(_reactComponentRef.Ref, {\n        innerRef: _this.ref\n      }, /*#__PURE__*/_react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {\n        className: classes,\n        style: (0, _extends2.default)({}, legacyStyles, style)\n      }), closeIconJSX, _lib.childrenUtils.isNil(children) ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, _ModalHeader.default.create(header, {\n        autoGenerateKey: false\n      }), _ModalContent.default.create(content, {\n        autoGenerateKey: false\n      }), _ModalActions.default.create(actions, {\n        overrideProps: _this.handleActionsOverrides\n      })) : children));\n    };\n\n    return _this;\n  }\n\n  var _proto = Modal.prototype;\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.handlePortalUnmount();\n  } // Do not access document when server side rendering\n  ;\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        centered = _this$props2.centered,\n        closeOnDocumentClick = _this$props2.closeOnDocumentClick,\n        dimmer = _this$props2.dimmer,\n        eventPool = _this$props2.eventPool,\n        trigger = _this$props2.trigger;\n    var _this$state2 = this.state,\n        open = _this$state2.open,\n        scrolling = _this$state2.scrolling;\n    var mountNode = this.getMountNode(); // Short circuit when server side rendering\n\n    if (!(0, _lib.isBrowser)()) {\n      return /*#__PURE__*/(0, _react.isValidElement)(trigger) ? trigger : null;\n    }\n\n    var unhandled = (0, _lib.getUnhandledProps)(Modal, this.props);\n    var portalPropNames = _Portal.default.handledProps;\n    var rest = (0, _reduce2.default)(unhandled, function (acc, val, key) {\n      if (!(0, _includes2.default)(portalPropNames, key)) acc[key] = val;\n      return acc;\n    }, {});\n    var portalProps = (0, _pick2.default)(unhandled, portalPropNames); // Heads up!\n    //\n    // The SUI CSS selector to prevent the modal itself from blurring requires an immediate .dimmer child:\n    // .blurring.dimmed.dimmable>:not(.dimmer) { ... }\n    //\n    // The .blurring.dimmed.dimmable is the body, so that all body content inside is blurred.\n    // We need the immediate child to be the dimmer to :not() blur the modal itself!\n    // Otherwise, the portal div is also blurred, blurring the modal.\n    //\n    // We cannot them wrap the modalJSX in an actual <Dimmer /> instead, we apply the dimmer classes to the <Portal />.\n\n    return /*#__PURE__*/_react.default.createElement(_Portal.default, (0, _extends2.default)({\n      closeOnDocumentClick: closeOnDocumentClick\n    }, portalProps, {\n      trigger: trigger,\n      eventPool: eventPool,\n      mountNode: mountNode,\n      open: open,\n      onClose: this.handleClose,\n      onMount: this.handlePortalMount,\n      onOpen: this.handleOpen,\n      onUnmount: this.handlePortalUnmount\n    }), /*#__PURE__*/_react.default.createElement(_reactComponentRef.Ref, {\n      innerRef: this.dimmerRef\n    }, _ModalDimmer.default.create((0, _isPlainObject2.default)(dimmer) ? dimmer : {}, {\n      autoGenerateKey: false,\n      defaultProps: {\n        blurring: dimmer === 'blurring',\n        inverted: dimmer === 'inverted'\n      },\n      overrideProps: {\n        children: this.renderContent(rest),\n        centered: centered,\n        mountNode: mountNode,\n        scrolling: scrolling\n      }\n    })));\n  };\n\n  return Modal;\n}(_lib.ModernAutoControlledComponent);\n\nModal.handledProps = [\"actions\", \"as\", \"basic\", \"centered\", \"children\", \"className\", \"closeIcon\", \"closeOnDimmerClick\", \"closeOnDocumentClick\", \"content\", \"defaultOpen\", \"dimmer\", \"eventPool\", \"header\", \"mountNode\", \"onActionClick\", \"onClose\", \"onMount\", \"onOpen\", \"onUnmount\", \"open\", \"size\", \"style\", \"trigger\"];\nModal.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _propTypes.default.elementType,\n\n  /** Shorthand for Modal.Actions. Typically an array of button shorthand. */\n  actions: _lib.customPropTypes.itemShorthand,\n\n  /** A modal can reduce its complexity */\n  basic: _propTypes.default.bool,\n\n  /** A modal can be vertically centered in the viewport */\n  centered: _propTypes.default.bool,\n\n  /** Primary content. */\n  children: _propTypes.default.node,\n\n  /** Additional classes. */\n  className: _propTypes.default.string,\n\n  /** Shorthand for the close icon. Closes the modal on click. */\n  closeIcon: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.object, _propTypes.default.bool]),\n\n  /** Whether or not the Modal should close when the dimmer is clicked. */\n  closeOnDimmerClick: _propTypes.default.bool,\n\n  /** Whether or not the Modal should close when the document is clicked. */\n  closeOnDocumentClick: _propTypes.default.bool,\n\n  /** Simple text content for the Modal. */\n  content: _lib.customPropTypes.itemShorthand,\n\n  /** Initial value of open. */\n  defaultOpen: _propTypes.default.bool,\n\n  /** A Modal can appear in a dimmer. */\n  dimmer: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.func, _propTypes.default.object, _propTypes.default.oneOf(['inverted', 'blurring'])]),\n\n  /** Event pool namespace that is used to handle component events */\n  eventPool: _propTypes.default.string,\n\n  /** Modal displayed above the content in bold. */\n  header: _lib.customPropTypes.itemShorthand,\n\n  /** The node where the modal should mount. Defaults to document.body. */\n  mountNode: _propTypes.default.any,\n\n  /**\n   * Action onClick handler when using shorthand `actions`.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onActionClick: _propTypes.default.func,\n\n  /**\n   * Called when a close event happens.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClose: _propTypes.default.func,\n\n  /**\n   * Called when the modal is mounted on the DOM.\n   *\n   * @param {null}\n   * @param {object} data - All props.\n   */\n  onMount: _propTypes.default.func,\n\n  /**\n   * Called when an open event happens.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onOpen: _propTypes.default.func,\n\n  /**\n   * Called when the modal is unmounted from the DOM.\n   *\n   * @param {null}\n   * @param {object} data - All props.\n   */\n  onUnmount: _propTypes.default.func,\n\n  /** Controls whether or not the Modal is displayed. */\n  open: _propTypes.default.bool,\n\n  /** A modal can vary in size */\n  size: _propTypes.default.oneOf(['mini', 'tiny', 'small', 'large', 'fullscreen']),\n\n  /** Custom styles. */\n  style: _propTypes.default.object,\n\n  /** Element to be rendered in-place where the modal is defined. */\n  trigger: _propTypes.default.node\n  /**\n   * NOTE: Any unhandled props that are defined in Modal are passed-through\n   * to the inner Portal.\n   */\n\n} : {};\nModal.defaultProps = {\n  centered: true,\n  dimmer: true,\n  closeOnDimmerClick: true,\n  closeOnDocumentClick: false,\n  eventPool: 'Modal'\n};\nModal.autoControlledProps = ['open'];\nModal.Actions = _ModalActions.default;\nModal.Content = _ModalContent.default;\nModal.Description = _ModalDescription.default;\nModal.Dimmer = _ModalDimmer.default;\nModal.Header = _ModalHeader.default;\nvar _default = Modal;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}