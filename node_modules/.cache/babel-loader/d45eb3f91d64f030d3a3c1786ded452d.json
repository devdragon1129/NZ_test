{"ast":null,"code":"import { KhronosTextureContainer } from \"../../../Misc/khronosTextureContainer\";\nimport { KhronosTextureContainer2 } from \"../../../Misc/khronosTextureContainer2\";\nimport { Engine } from \"../../../Engines/engine\";\nimport { StringTools } from '../../../Misc/stringTools';\nimport { Logger } from '../../../Misc/logger';\n/**\r\n * Implementation of the KTX Texture Loader.\r\n * @hidden\r\n */\n\nvar _KTXTextureLoader =\n/** @class */\nfunction () {\n  function _KTXTextureLoader() {\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\n    this.supportCascades = false;\n  }\n  /**\r\n   * This returns if the loader support the current file information.\r\n   * @param extension defines the file extension of the file being loaded\r\n   * @param mimeType defines the optional mime type of the file being loaded\r\n   * @returns true if the loader can load the specified file\r\n   */\n\n\n  _KTXTextureLoader.prototype.canLoad = function (extension, mimeType) {\n    // The \".ktx2\" file extension is still up for debate: https://github.com/KhronosGroup/KTX-Specification/issues/18\n    return StringTools.EndsWith(extension, \".ktx\") || StringTools.EndsWith(extension, \".ktx2\") || mimeType === \"image/ktx\" || mimeType === \"image/ktx2\";\n  };\n  /**\r\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param createPolynomials will be true if polynomials have been requested\r\n   * @param onLoad defines the callback to trigger once the texture is ready\r\n   * @param onError defines the callback to trigger in case of error\r\n   */\n\n\n  _KTXTextureLoader.prototype.loadCubeData = function (data, texture, createPolynomials, onLoad, onError) {\n    if (Array.isArray(data)) {\n      return;\n    } // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n\n\n    texture._invertVScale = !texture.invertY;\n    var engine = texture.getEngine();\n    var ktx = new KhronosTextureContainer(data, 6);\n    var loadMipmap = ktx.numberOfMipmapLevels > 1 && texture.generateMipMaps;\n\n    engine._unpackFlipY(true);\n\n    ktx.uploadLevels(texture, texture.generateMipMaps);\n    texture.width = ktx.pixelWidth;\n    texture.height = ktx.pixelHeight;\n\n    engine._setCubeMapTextureParams(texture, loadMipmap);\n\n    texture.isReady = true;\n    texture.onLoadedObservable.notifyObservers(texture);\n    texture.onLoadedObservable.clear();\n\n    if (onLoad) {\n      onLoad();\n    }\n  };\n  /**\r\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param callback defines the method to call once ready to upload\r\n   */\n\n\n  _KTXTextureLoader.prototype.loadData = function (data, texture, callback, options) {\n    if (KhronosTextureContainer.IsValid(data)) {\n      // Need to invert vScale as invertY via UNPACK_FLIP_Y_WEBGL is not supported by compressed texture\n      texture._invertVScale = !texture.invertY;\n      var ktx_1 = new KhronosTextureContainer(data, 1);\n      callback(ktx_1.pixelWidth, ktx_1.pixelHeight, texture.generateMipMaps, true, function () {\n        ktx_1.uploadLevels(texture, texture.generateMipMaps);\n      }, ktx_1.isInvalid);\n    } else if (KhronosTextureContainer2.IsValid(data)) {\n      var ktx2 = new KhronosTextureContainer2(texture.getEngine());\n      ktx2.uploadAsync(data, texture, options).then(function () {\n        callback(texture.width, texture.height, texture.generateMipMaps, true, function () {}, false);\n      }, function (error) {\n        Logger.Warn(\"Failed to load KTX2 texture data: \" + error.message);\n        callback(0, 0, false, false, function () {}, true);\n      });\n    } else {\n      Logger.Error(\"texture missing KTX identifier\");\n      callback(0, 0, false, false, function () {}, true);\n    }\n  };\n\n  return _KTXTextureLoader;\n}();\n\nexport { _KTXTextureLoader }; // Register the loader.\n\nEngine._TextureLoaders.unshift(new _KTXTextureLoader());","map":null,"metadata":{},"sourceType":"module"}