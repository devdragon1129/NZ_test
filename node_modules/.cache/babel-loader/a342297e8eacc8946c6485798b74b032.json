{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { createSelector } from 'reselect';\nimport { GROUND_CATEGORY } from 'modules/asset/types';\nimport { COLLECTIBLE_ASSET_PACK_ID } from 'modules/ui/sidebar/utils';\nimport { ComponentType } from 'modules/scene/types';\nimport { getComponentsByType, getEntities, getComponentsByEntityId } from 'modules/scene/selectors';\nimport { isNFT, isGround } from './utils';\nexport var getState = function getState(state) {\n  return state.asset;\n};\nexport var getData = function getData(state) {\n  return getState(state).data;\n};\nexport var isLoading = function isLoading(state) {\n  return getState(state).loading.length > 0;\n};\nexport var getError = function getError(state) {\n  return getState(state).error;\n};\nexport var getGroundAssets = createSelector(getData, function (assets) {\n  var out = {};\n\n  for (var _i = 0, _Object$values = Object.values(assets); _i < _Object$values.length; _i++) {\n    var asset = _Object$values[_i];\n\n    if (asset.category === GROUND_CATEGORY) {\n      out[asset.id] = asset;\n    }\n  }\n\n  return out;\n});\nexport var getGroundAsset = function getGroundAsset(state, assetId) {\n  return getGroundAssets(state)[assetId];\n};\nexport var getCollectibleAssets = createSelector(getData, function (assets) {\n  var out = {};\n\n  for (var _i2 = 0, _Object$values2 = Object.values(assets); _i2 < _Object$values2.length; _i2++) {\n    var asset = _Object$values2[_i2];\n\n    if (asset.assetPackId === COLLECTIBLE_ASSET_PACK_ID) {\n      out[asset.id] = asset;\n    }\n  }\n\n  return out;\n});\nexport var getDisabledAssets = createSelector(function (state) {\n  return getComponentsByType(state);\n}, getData, function (components, assets) {\n  var result = [];\n  var nfts = components[ComponentType.NFTShape];\n  var gltfs = components[ComponentType.GLTFShape];\n\n  var _loop = function _loop(assetId) {\n    var asset = assets[assetId];\n\n    if (isNFT(asset)) {\n      var component = nfts.find(function (nft) {\n        return nft.data.url === asset.id;\n      });\n\n      if (component) {\n        result.push(asset.id);\n      }\n    } else if (isGround(asset)) {\n      var _component = gltfs.find(function (gltf) {\n        var assetId = gltf.data.assetId;\n        return asset.id === assetId;\n      });\n\n      if (_component) {\n        result.push(asset.id);\n      }\n    }\n  };\n\n  for (var assetId in assets) {\n    _loop(assetId);\n  }\n\n  return result;\n});\nexport var getAssetsByModel = createSelector(getData, function (assets) {\n  var out = {};\n\n  for (var id in assets) {\n    var asset = assets[id];\n    out[asset.model] = asset;\n  }\n\n  return out;\n});\nexport var getAssetsByEntityName = createSelector(getEntities, getComponentsByEntityId, getData, function (entities, componentsByEntity, assets) {\n  var out = {};\n\n  for (var entityId in componentsByEntity) {\n    var entity = entities[entityId];\n    var components = componentsByEntity[entityId];\n\n    var _iterator = _createForOfIteratorHelper(components),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var component = _step.value;\n\n        if (component.type === ComponentType.Script || component.type === ComponentType.GLTFShape) {\n          var asset = assets[component.data.assetId];\n          out[entity.name] = asset;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  return out;\n});\nexport var getAssetsWithScriptByEntityName = createSelector(getEntities, getComponentsByEntityId, getData, function (entities, componentsByEntity, assets) {\n  var out = {};\n\n  for (var entityId in componentsByEntity) {\n    var components = componentsByEntity[entityId];\n\n    var _iterator2 = _createForOfIteratorHelper(components),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var component = _step2.value;\n\n        if (component.type === ComponentType.Script) {\n          var asset = assets[component.data.assetId];\n\n          if (asset && asset.actions.length > 0) {\n            out[entities[entityId].name] = asset;\n          }\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n\n  return out;\n});","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/asset/selectors.ts"],"names":["createSelector","GROUND_CATEGORY","COLLECTIBLE_ASSET_PACK_ID","ComponentType","getComponentsByType","getEntities","getComponentsByEntityId","isNFT","isGround","getState","state","asset","getData","data","isLoading","loading","length","getError","error","getGroundAssets","assets","out","Object","values","category","id","getGroundAsset","assetId","getCollectibleAssets","assetPackId","getDisabledAssets","components","result","nfts","NFTShape","gltfs","GLTFShape","component","find","nft","url","push","gltf","getAssetsByModel","model","getAssetsByEntityName","entities","componentsByEntity","entityId","entity","type","Script","name","getAssetsWithScriptByEntityName","actions"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect'\nimport { RootState } from 'modules/common/types'\nimport { AssetState } from 'modules/asset/reducer'\nimport { Asset, GROUND_CATEGORY } from 'modules/asset/types'\nimport { ModelById } from 'decentraland-dapps/dist/lib/types'\nimport { COLLECTIBLE_ASSET_PACK_ID } from 'modules/ui/sidebar/utils'\nimport { ComponentDefinition, ComponentType, AnyComponent, EntityDefinition } from 'modules/scene/types'\nimport { getComponentsByType, getEntities, getComponentsByEntityId } from 'modules/scene/selectors'\nimport { isNFT, isGround } from './utils'\n\nexport const getState: (state: RootState) => AssetState = state => state.asset\n\nexport const getData: (state: RootState) => AssetState['data'] = state => getState(state).data\n\nexport const isLoading: (state: RootState) => boolean = state => getState(state).loading.length > 0\n\nexport const getError: (state: RootState) => AssetState['error'] = state => getState(state).error\n\nexport const getGroundAssets = createSelector<RootState, AssetState['data'], ModelById<Asset>>(getData, assets => {\n  let out: ModelById<Asset> = {}\n\n  for (let asset of Object.values(assets)) {\n    if (asset.category === GROUND_CATEGORY) {\n      out[asset.id] = asset\n    }\n  }\n\n  return out\n})\n\nexport const getGroundAsset = (state: RootState, assetId: string) => getGroundAssets(state)[assetId]\n\nexport const getCollectibleAssets = createSelector<RootState, AssetState['data'], ModelById<Asset>>(getData, assets => {\n  let out: ModelById<Asset> = {}\n\n  for (let asset of Object.values(assets)) {\n    if (asset.assetPackId === COLLECTIBLE_ASSET_PACK_ID) {\n      out[asset.id] = asset\n    }\n  }\n\n  return out\n})\n\nexport const getDisabledAssets = createSelector<RootState, Record<ComponentType, AnyComponent[]>, ModelById<Asset>, string[]>(\n  (state: RootState) => getComponentsByType(state),\n  getData,\n  (components, assets) => {\n    let result: string[] = []\n    const nfts = components[ComponentType.NFTShape] as ComponentDefinition<ComponentType.NFTShape>[]\n    const gltfs = components[ComponentType.GLTFShape] as ComponentDefinition<ComponentType.GLTFShape>[]\n\n    for (let assetId in assets) {\n      const asset = assets[assetId]\n\n      if (isNFT(asset)) {\n        const component = nfts.find(nft => nft.data.url === asset.id)\n        if (component) {\n          result.push(asset.id)\n        }\n      } else if (isGround(asset)) {\n        const component = gltfs.find(gltf => {\n          const { assetId } = gltf.data\n          return asset.id === assetId\n        })\n\n        if (component) {\n          result.push(asset.id)\n        }\n      }\n    }\n    return result\n  }\n)\n\nexport const getAssetsByModel = createSelector<RootState, AssetState['data'], Record<string, Asset>>(getData, assets => {\n  const out: Record<string, Asset> = {}\n  for (let id in assets) {\n    const asset = assets[id]\n    out[asset.model] = asset\n  }\n  return out\n})\n\nexport const getAssetsByEntityName = createSelector<\n  RootState,\n  Record<string, EntityDefinition>,\n  Record<string, AnyComponent[]>,\n  AssetState['data'],\n  Record<string, Asset>\n>(getEntities, getComponentsByEntityId, getData, (entities, componentsByEntity, assets) => {\n  const out: Record<string, Asset> = {}\n  for (let entityId in componentsByEntity) {\n    const entity = entities[entityId]\n    const components = componentsByEntity[entityId]\n    for (let component of components) {\n      if (component.type === ComponentType.Script || component.type === ComponentType.GLTFShape) {\n        const asset = assets[(component as ComponentDefinition<ComponentType.Script>).data.assetId]\n        out[entity.name] = asset\n      }\n    }\n  }\n  return out\n})\n\nexport const getAssetsWithScriptByEntityName = createSelector<\n  RootState,\n  Record<string, EntityDefinition>,\n  Record<string, AnyComponent[]>,\n  AssetState['data'],\n  Record<string, Asset>\n>(getEntities, getComponentsByEntityId, getData, (entities, componentsByEntity, assets) => {\n  const out: Record<string, Asset> = {}\n  for (let entityId in componentsByEntity) {\n    const components = componentsByEntity[entityId]\n    for (let component of components) {\n      if (component.type === ComponentType.Script) {\n        const asset = assets[(component as ComponentDefinition<ComponentType.Script>).data.assetId]\n        if (asset && asset.actions.length > 0) {\n          out[entities[entityId].name] = asset\n        }\n      }\n    }\n  }\n  return out\n})\n"]},"metadata":{},"sourceType":"module"}