{"ast":null,"code":"import { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { ArcRotateCameraInputsManager } from \"../../Cameras/arcRotateCameraInputsManager\";\nimport { Tools } from '../../Misc/tools';\n/**\r\n * Add orientation input support to the input manager.\r\n * @returns the current input manager\r\n */\n\nArcRotateCameraInputsManager.prototype.addVRDeviceOrientation = function () {\n  this.add(new ArcRotateCameraVRDeviceOrientationInput());\n  return this;\n};\n/**\r\n * Manage the device orientation inputs (gyroscope) to control an arc rotate camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\n\nvar ArcRotateCameraVRDeviceOrientationInput =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiate a new ArcRotateCameraVRDeviceOrientationInput.\r\n   */\n  function ArcRotateCameraVRDeviceOrientationInput() {\n    /**\r\n     * Defines a correction factor applied on the alpha value retrieved from the orientation events.\r\n     */\n    this.alphaCorrection = 1;\n    /**\r\n     * Defines a correction factor applied on the gamma value retrieved from the orientation events.\r\n     */\n\n    this.gammaCorrection = 1;\n    this._alpha = 0;\n    this._gamma = 0;\n    this._dirty = false;\n    this._deviceOrientationHandler = this._onOrientationEvent.bind(this);\n  }\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this;\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n    this.camera.attachControl(noPreventDefault);\n    var hostWindow = this.camera.getScene().getEngine().getHostWindow();\n\n    if (hostWindow) {\n      // check iOS 13+ support\n      if (typeof DeviceOrientationEvent !== \"undefined\" && typeof DeviceOrientationEvent.requestPermission === 'function') {\n        DeviceOrientationEvent.requestPermission().then(function (response) {\n          if (response === 'granted') {\n            hostWindow.addEventListener(\"deviceorientation\", _this._deviceOrientationHandler);\n          } else {\n            Tools.Warn(\"Permission not granted.\");\n          }\n        }).catch(function (error) {\n          Tools.Error(error);\n        });\n      } else {\n        hostWindow.addEventListener(\"deviceorientation\", this._deviceOrientationHandler);\n      }\n    }\n  };\n  /** @hidden */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype._onOrientationEvent = function (evt) {\n    if (evt.alpha !== null) {\n      this._alpha = (+evt.alpha | 0) * this.alphaCorrection;\n    }\n\n    if (evt.gamma !== null) {\n      this._gamma = (+evt.gamma | 0) * this.gammaCorrection;\n    }\n\n    this._dirty = true;\n  };\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype.checkInputs = function () {\n    if (this._dirty) {\n      this._dirty = false;\n\n      if (this._gamma < 0) {\n        this._gamma = 180 + this._gamma;\n      }\n\n      this.camera.alpha = -this._alpha / 180.0 * Math.PI % Math.PI * 2;\n      this.camera.beta = this._gamma / 180.0 * Math.PI;\n    }\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype.detachControl = function (ignored) {\n    window.removeEventListener(\"deviceorientation\", this._deviceOrientationHandler);\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype.getClassName = function () {\n    return \"ArcRotateCameraVRDeviceOrientationInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  ArcRotateCameraVRDeviceOrientationInput.prototype.getSimpleName = function () {\n    return \"VRDeviceOrientation\";\n  };\n\n  return ArcRotateCameraVRDeviceOrientationInput;\n}();\n\nexport { ArcRotateCameraVRDeviceOrientationInput };\nCameraInputTypes[\"ArcRotateCameraVRDeviceOrientationInput\"] = ArcRotateCameraVRDeviceOrientationInput;","map":null,"metadata":{},"sourceType":"module"}