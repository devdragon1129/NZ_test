{"ast":null,"code":"import { Tools } from \"../Misc/tools\";\n/**\r\n * A list of the currently available features without referencing them\r\n */\n\nvar WebXRFeatureName =\n/** @class */\nfunction () {\n  function WebXRFeatureName() {}\n  /**\r\n   * The name of the anchor system feature\r\n   */\n\n\n  WebXRFeatureName.ANCHOR_SYSTEM = \"xr-anchor-system\";\n  /**\r\n   * The name of the background remover feature\r\n   */\n\n  WebXRFeatureName.BACKGROUND_REMOVER = \"xr-background-remover\";\n  /**\r\n   * The name of the hit test feature\r\n   */\n\n  WebXRFeatureName.HIT_TEST = \"xr-hit-test\";\n  /**\r\n   * physics impostors for xr controllers feature\r\n   */\n\n  WebXRFeatureName.PHYSICS_CONTROLLERS = \"xr-physics-controller\";\n  /**\r\n   * The name of the plane detection feature\r\n   */\n\n  WebXRFeatureName.PLANE_DETECTION = \"xr-plane-detection\";\n  /**\r\n   * The name of the pointer selection feature\r\n   */\n\n  WebXRFeatureName.POINTER_SELECTION = \"xr-controller-pointer-selection\";\n  /**\r\n   * The name of the teleportation feature\r\n   */\n\n  WebXRFeatureName.TELEPORTATION = \"xr-controller-teleportation\";\n  /**\r\n   * The name of the feature points feature.\r\n   */\n\n  WebXRFeatureName.FEATURE_POINTS = \"xr-feature-points\";\n  /**\r\n   * The name of the hand tracking feature.\r\n   */\n\n  WebXRFeatureName.HAND_TRACKING = \"xr-hand-tracking\";\n  return WebXRFeatureName;\n}();\n\nexport { WebXRFeatureName };\n/**\r\n * The WebXR features manager is responsible of enabling or disabling features required for the current XR session.\r\n * It is mainly used in AR sessions.\r\n *\r\n * A feature can have a version that is defined by Babylon (and does not correspond with the webxr version).\r\n */\n\nvar WebXRFeaturesManager =\n/** @class */\nfunction () {\n  /**\r\n   * constructs a new features manages.\r\n   *\r\n   * @param _xrSessionManager an instance of WebXRSessionManager\r\n   */\n  function WebXRFeaturesManager(_xrSessionManager) {\n    var _this = this;\n\n    this._xrSessionManager = _xrSessionManager;\n    this._features = {}; // when session starts / initialized - attach\n\n    this._xrSessionManager.onXRSessionInit.add(function () {\n      _this.getEnabledFeatures().forEach(function (featureName) {\n        var feature = _this._features[featureName];\n\n        if (feature.enabled && !feature.featureImplementation.attached && !feature.featureImplementation.disableAutoAttach) {\n          _this.attachFeature(featureName);\n        }\n      });\n    }); // when session ends - detach\n\n\n    this._xrSessionManager.onXRSessionEnded.add(function () {\n      _this.getEnabledFeatures().forEach(function (featureName) {\n        var feature = _this._features[featureName];\n\n        if (feature.enabled && feature.featureImplementation.attached) {\n          // detach, but don't disable!\n          _this.detachFeature(featureName);\n        }\n      });\n    });\n  }\n  /**\r\n   * Used to register a module. After calling this function a developer can use this feature in the scene.\r\n   * Mainly used internally.\r\n   *\r\n   * @param featureName the name of the feature to register\r\n   * @param constructorFunction the function used to construct the module\r\n   * @param version the (babylon) version of the module\r\n   * @param stable is that a stable version of this module\r\n   */\n\n\n  WebXRFeaturesManager.AddWebXRFeature = function (featureName, constructorFunction, version, stable) {\n    if (version === void 0) {\n      version = 1;\n    }\n\n    if (stable === void 0) {\n      stable = false;\n    }\n\n    this._AvailableFeatures[featureName] = this._AvailableFeatures[featureName] || {\n      latest: version\n    };\n\n    if (version > this._AvailableFeatures[featureName].latest) {\n      this._AvailableFeatures[featureName].latest = version;\n    }\n\n    if (stable) {\n      this._AvailableFeatures[featureName].stable = version;\n    }\n\n    this._AvailableFeatures[featureName][version] = constructorFunction;\n  };\n  /**\r\n   * Returns a constructor of a specific feature.\r\n   *\r\n   * @param featureName the name of the feature to construct\r\n   * @param version the version of the feature to load\r\n   * @param xrSessionManager the xrSessionManager. Used to construct the module\r\n   * @param options optional options provided to the module.\r\n   * @returns a function that, when called, will return a new instance of this feature\r\n   */\n\n\n  WebXRFeaturesManager.ConstructFeature = function (featureName, version, xrSessionManager, options) {\n    if (version === void 0) {\n      version = 1;\n    }\n\n    var constructorFunction = this._AvailableFeatures[featureName][version];\n\n    if (!constructorFunction) {\n      // throw an error? return nothing?\n      throw new Error(\"feature not found\");\n    }\n\n    return constructorFunction(xrSessionManager, options);\n  };\n  /**\r\n   * Can be used to return the list of features currently registered\r\n   *\r\n   * @returns an Array of available features\r\n   */\n\n\n  WebXRFeaturesManager.GetAvailableFeatures = function () {\n    return Object.keys(this._AvailableFeatures);\n  };\n  /**\r\n   * Gets the versions available for a specific feature\r\n   * @param featureName the name of the feature\r\n   * @returns an array with the available versions\r\n   */\n\n\n  WebXRFeaturesManager.GetAvailableVersions = function (featureName) {\n    return Object.keys(this._AvailableFeatures[featureName]);\n  };\n  /**\r\n   * Return the latest unstable version of this feature\r\n   * @param featureName the name of the feature to search\r\n   * @returns the version number. if not found will return -1\r\n   */\n\n\n  WebXRFeaturesManager.GetLatestVersionOfFeature = function (featureName) {\n    return this._AvailableFeatures[featureName] && this._AvailableFeatures[featureName].latest || -1;\n  };\n  /**\r\n   * Return the latest stable version of this feature\r\n   * @param featureName the name of the feature to search\r\n   * @returns the version number. if not found will return -1\r\n   */\n\n\n  WebXRFeaturesManager.GetStableVersionOfFeature = function (featureName) {\n    return this._AvailableFeatures[featureName] && this._AvailableFeatures[featureName].stable || -1;\n  };\n  /**\r\n   * Attach a feature to the current session. Mainly used when session started to start the feature effect.\r\n   * Can be used during a session to start a feature\r\n   * @param featureName the name of feature to attach\r\n   */\n\n\n  WebXRFeaturesManager.prototype.attachFeature = function (featureName) {\n    var feature = this._features[featureName];\n\n    if (feature && feature.enabled && !feature.featureImplementation.attached) {\n      feature.featureImplementation.attach();\n    }\n  };\n  /**\r\n   * Can be used inside a session or when the session ends to detach a specific feature\r\n   * @param featureName the name of the feature to detach\r\n   */\n\n\n  WebXRFeaturesManager.prototype.detachFeature = function (featureName) {\n    var feature = this._features[featureName];\n\n    if (feature && feature.featureImplementation.attached) {\n      feature.featureImplementation.detach();\n    }\n  };\n  /**\r\n   * Used to disable an already-enabled feature\r\n   * The feature will be disposed and will be recreated once enabled.\r\n   * @param featureName the feature to disable\r\n   * @returns true if disable was successful\r\n   */\n\n\n  WebXRFeaturesManager.prototype.disableFeature = function (featureName) {\n    var name = typeof featureName === \"string\" ? featureName : featureName.Name;\n    var feature = this._features[name];\n\n    if (feature && feature.enabled) {\n      feature.enabled = false;\n      this.detachFeature(name);\n      feature.featureImplementation.dispose();\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * dispose this features manager\r\n   */\n\n\n  WebXRFeaturesManager.prototype.dispose = function () {\n    var _this = this;\n\n    this.getEnabledFeatures().forEach(function (feature) {\n      _this.disableFeature(feature);\n\n      _this._features[feature].featureImplementation.dispose();\n    });\n  };\n  /**\r\n   * Enable a feature using its name and a version. This will enable it in the scene, and will be responsible to attach it when the session starts.\r\n   * If used twice, the old version will be disposed and a new one will be constructed. This way you can re-enable with different configuration.\r\n   *\r\n   * @param featureName the name of the feature to load or the class of the feature\r\n   * @param version optional version to load. if not provided the latest version will be enabled\r\n   * @param moduleOptions options provided to the module. Ses the module documentation / constructor\r\n   * @param attachIfPossible if set to true (default) the feature will be automatically attached, if it is currently possible\r\n   * @param required is this feature required to the app. If set to true the session init will fail if the feature is not available.\r\n   * @returns a new constructed feature or throws an error if feature not found.\r\n   */\n\n\n  WebXRFeaturesManager.prototype.enableFeature = function (featureName, version, moduleOptions, attachIfPossible, required) {\n    var _this = this;\n\n    if (version === void 0) {\n      version = \"latest\";\n    }\n\n    if (moduleOptions === void 0) {\n      moduleOptions = {};\n    }\n\n    if (attachIfPossible === void 0) {\n      attachIfPossible = true;\n    }\n\n    if (required === void 0) {\n      required = true;\n    }\n\n    var name = typeof featureName === \"string\" ? featureName : featureName.Name;\n    var versionToLoad = 0;\n\n    if (typeof version === \"string\") {\n      if (!version) {\n        throw new Error(\"Error in provided version - \" + name + \" (\" + version + \")\");\n      }\n\n      if (version === \"stable\") {\n        versionToLoad = WebXRFeaturesManager.GetStableVersionOfFeature(name);\n      } else if (version === \"latest\") {\n        versionToLoad = WebXRFeaturesManager.GetLatestVersionOfFeature(name);\n      } else {\n        // try loading the number the string represents\n        versionToLoad = +version;\n      }\n\n      if (versionToLoad === -1 || isNaN(versionToLoad)) {\n        throw new Error(\"feature not found - \" + name + \" (\" + version + \")\");\n      }\n    } else {\n      versionToLoad = version;\n    } // check if already initialized\n\n\n    var feature = this._features[name];\n    var constructFunction = WebXRFeaturesManager.ConstructFeature(name, versionToLoad, this._xrSessionManager, moduleOptions);\n\n    if (!constructFunction) {\n      // report error?\n      throw new Error(\"feature not found - \" + name);\n    }\n    /* If the feature is already enabled, detach and dispose it, and create a new one */\n\n\n    if (feature) {\n      this.disableFeature(name);\n    }\n\n    var constructed = constructFunction();\n\n    if (constructed.dependsOn) {\n      var dependentsFound = constructed.dependsOn.every(function (featureName) {\n        return !!_this._features[featureName];\n      });\n\n      if (!dependentsFound) {\n        throw new Error(\"Dependant features missing. Make sure the following features are enabled - \" + constructed.dependsOn.join(\", \"));\n      }\n    }\n\n    if (constructed.isCompatible()) {\n      this._features[name] = {\n        featureImplementation: constructed,\n        enabled: true,\n        version: versionToLoad,\n        required: required\n      };\n\n      if (attachIfPossible) {\n        // if session started already, request and enable\n        if (this._xrSessionManager.session && !this._features[name].featureImplementation.attached) {\n          // enable feature\n          this.attachFeature(name);\n        }\n      } else {\n        // disable auto-attach when session starts\n        this._features[name].featureImplementation.disableAutoAttach = true;\n      }\n\n      return this._features[name].featureImplementation;\n    } else {\n      if (required) {\n        throw new Error(\"required feature not compatible\");\n      } else {\n        Tools.Warn(\"Feature \" + name + \" not compatible with the current environment/browser and was not enabled.\");\n        return constructed;\n      }\n    }\n  };\n  /**\r\n   * get the implementation of an enabled feature.\r\n   * @param featureName the name of the feature to load\r\n   * @returns the feature class, if found\r\n   */\n\n\n  WebXRFeaturesManager.prototype.getEnabledFeature = function (featureName) {\n    return this._features[featureName] && this._features[featureName].featureImplementation;\n  };\n  /**\r\n   * Get the list of enabled features\r\n   * @returns an array of enabled features\r\n   */\n\n\n  WebXRFeaturesManager.prototype.getEnabledFeatures = function () {\n    return Object.keys(this._features);\n  };\n  /**\r\n   * This function will exten the session creation configuration object with enabled features.\r\n   * If, for example, the anchors feature is enabled, it will be automatically added to the optional or required features list,\r\n   * according to the defined \"required\" variable, provided during enableFeature call\r\n   * @param xrSessionInit the xr Session init object to extend\r\n   *\r\n   * @returns an extended XRSessionInit object\r\n   */\n\n\n  WebXRFeaturesManager.prototype.extendXRSessionInitObject = function (xrSessionInit) {\n    var _this = this;\n\n    var enabledFeatures = this.getEnabledFeatures();\n    enabledFeatures.forEach(function (featureName) {\n      var feature = _this._features[featureName];\n      var nativeName = feature.featureImplementation.xrNativeFeatureName;\n\n      if (nativeName) {\n        if (feature.required) {\n          xrSessionInit.requiredFeatures = xrSessionInit.requiredFeatures || [];\n\n          if (xrSessionInit.requiredFeatures.indexOf(nativeName) === -1) {\n            xrSessionInit.requiredFeatures.push(nativeName);\n          }\n        } else {\n          xrSessionInit.optionalFeatures = xrSessionInit.optionalFeatures || [];\n\n          if (xrSessionInit.optionalFeatures.indexOf(nativeName) === -1) {\n            xrSessionInit.optionalFeatures.push(nativeName);\n          }\n        }\n      }\n    });\n    return xrSessionInit;\n  };\n\n  WebXRFeaturesManager._AvailableFeatures = {};\n  return WebXRFeaturesManager;\n}();\n\nexport { WebXRFeaturesManager };","map":null,"metadata":{},"sourceType":"module"}