{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\nvar errCode = require('err-code');\n\nvar uint8ArrayFromString = require('uint8arrays/from-string');\n/**\n * @typedef {import('../types').ChunkValidator} ChunkValidator\n */\n\n/**\n * @type {ChunkValidator}\n */\n\n\nfunction validateChunks(_x) {\n  return _validateChunks.apply(this, arguments);\n}\n\nfunction _validateChunks() {\n  _validateChunks = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(source) {\n    var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, content;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 2;\n            _iterator = _asyncIterator(source);\n\n          case 4:\n            _context.next = 6;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 6:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 29;\n              break;\n            }\n\n            content = _step.value;\n\n            if (!(content.length === undefined)) {\n              _context.next = 10;\n              break;\n            }\n\n            throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n\n          case 10:\n            if (!(typeof content === 'string' || content instanceof String)) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 13;\n            return uint8ArrayFromString(content.toString());\n\n          case 13:\n            _context.next = 26;\n            break;\n\n          case 15:\n            if (!Array.isArray(content)) {\n              _context.next = 20;\n              break;\n            }\n\n            _context.next = 18;\n            return Uint8Array.from(content);\n\n          case 18:\n            _context.next = 26;\n            break;\n\n          case 20:\n            if (!(content instanceof Uint8Array)) {\n              _context.next = 25;\n              break;\n            }\n\n            _context.next = 23;\n            return content;\n\n          case 23:\n            _context.next = 26;\n            break;\n\n          case 25:\n            throw errCode(new Error('Content was invalid'), 'ERR_INVALID_CONTENT');\n\n          case 26:\n            _iteratorAbruptCompletion = false;\n            _context.next = 4;\n            break;\n\n          case 29:\n            _context.next = 35;\n            break;\n\n          case 31:\n            _context.prev = 31;\n            _context.t0 = _context[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 35:\n            _context.prev = 35;\n            _context.prev = 36;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 40;\n              break;\n            }\n\n            _context.next = 40;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 40:\n            _context.prev = 40;\n\n            if (!_didIteratorError) {\n              _context.next = 43;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 43:\n            return _context.finish(40);\n\n          case 44:\n            return _context.finish(35);\n\n          case 45:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 31, 35, 45], [36,, 40, 44]]);\n  }));\n  return _validateChunks.apply(this, arguments);\n}\n\nmodule.exports = validateChunks;","map":null,"metadata":{},"sourceType":"script"}