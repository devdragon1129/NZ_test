{"ast":null,"code":"import { connect } from 'react-redux';\nimport { getLocation, push } from 'connected-react-router';\nimport { locations } from 'routing/locations';\nimport { getPoolList, getTotal, getSortBy, getPage, getSortOrder, getSearchGroup, getSearchEthAddress, getTotalPages } from 'modules/pool/selectors';\nimport { openModal } from 'modules/modal/actions';\nimport { loadPoolsRequest } from 'modules/pool/actions';\nimport { getAllPoolGroups } from 'modules/poolGroup/selectors';\nimport { isLoggedIn } from 'modules/identity/selectors';\nimport SceneListPage from './SceneListPage';\n\nvar mapState = function mapState(state) {\n  return {\n    location: getLocation(state),\n    pools: getPoolList(state),\n    poolGroups: getAllPoolGroups(state),\n    total: getTotal(state),\n    totalPages: getTotalPages(state),\n    page: getPage(state),\n    sortBy: getSortBy(state),\n    sortOrder: getSortOrder(state),\n    group: getSearchGroup(state),\n    ethAddress: getSearchEthAddress(state),\n    isLoggedIn: isLoggedIn(state)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    },\n    onLoadPools: function onLoadPools(filters) {\n      return dispatch(loadPoolsRequest(filters));\n    },\n    onPageChange: function onPageChange(filters) {\n      return dispatch(push(locations.poolSearch(filters)));\n    },\n    onNavegateToHome: function onNavegateToHome() {\n      return dispatch(push(locations.root()));\n    },\n    onNavegateToViewPool: function onNavegateToViewPool(poolId) {\n      return dispatch(push(locations.poolView(poolId)));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(SceneListPage);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/SceneListPage/SceneListPage.container.ts"],"names":["connect","getLocation","push","locations","getPoolList","getTotal","getSortBy","getPage","getSortOrder","getSearchGroup","getSearchEthAddress","getTotalPages","openModal","loadPoolsRequest","getAllPoolGroups","isLoggedIn","SceneListPage","mapState","state","location","pools","poolGroups","total","totalPages","page","sortBy","sortOrder","group","ethAddress","mapDispatch","dispatch","onOpenModal","name","metadata","onLoadPools","filters","onPageChange","poolSearch","onNavegateToHome","root","onNavegateToViewPool","poolId","poolView"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,IAAtB,QAAkC,wBAAlC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,SACEC,WADF,EAEEC,QAFF,EAGEC,SAHF,EAIEC,OAJF,EAKEC,YALF,EAMEC,cANF,EAOEC,mBAPF,EAQEC,aARF,QASO,wBATP;AAWA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,UAAT,QAA2B,4BAA3B;AAGA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAsC;AACrDC,IAAAA,QAAQ,EAAElB,WAAW,CAACiB,KAAD,CADgC;AAErDE,IAAAA,KAAK,EAAEhB,WAAW,CAACc,KAAD,CAFmC;AAGrDG,IAAAA,UAAU,EAAEP,gBAAgB,CAACI,KAAD,CAHyB;AAIrDI,IAAAA,KAAK,EAAEjB,QAAQ,CAACa,KAAD,CAJsC;AAKrDK,IAAAA,UAAU,EAAEZ,aAAa,CAACO,KAAD,CAL4B;AAMrDM,IAAAA,IAAI,EAAEjB,OAAO,CAACW,KAAD,CANwC;AAOrDO,IAAAA,MAAM,EAAEnB,SAAS,CAACY,KAAD,CAPoC;AAQrDQ,IAAAA,SAAS,EAAElB,YAAY,CAACU,KAAD,CAR8B;AASrDS,IAAAA,KAAK,EAAElB,cAAc,CAACS,KAAD,CATgC;AAUrDU,IAAAA,UAAU,EAAElB,mBAAmB,CAACQ,KAAD,CAVsB;AAWrDH,IAAAA,UAAU,EAAEA,UAAU,CAACG,KAAD;AAX+B,GAAtC;AAAA,CAAjB;;AAcA,IAAMW,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,QAAP;AAAA,aAAoBH,QAAQ,CAAClB,SAAS,CAACoB,IAAD,EAAOC,QAAP,CAAV,CAA5B;AAAA,KADmD;AAEhEC,IAAAA,WAAW,EAAE,qBAACC,OAAD;AAAA,aAAkCL,QAAQ,CAACjB,gBAAgB,CAACsB,OAAD,CAAjB,CAA1C;AAAA,KAFmD;AAGhEC,IAAAA,YAAY,EAAE,sBAACD,OAAD;AAAA,aAAkCL,QAAQ,CAAC5B,IAAI,CAACC,SAAS,CAACkC,UAAV,CAAqBF,OAArB,CAAD,CAAL,CAA1C;AAAA,KAHkD;AAIhEG,IAAAA,gBAAgB,EAAE;AAAA,aAAMR,QAAQ,CAAC5B,IAAI,CAACC,SAAS,CAACoC,IAAV,EAAD,CAAL,CAAd;AAAA,KAJ8C;AAKhEC,IAAAA,oBAAoB,EAAE,8BAACC,MAAD;AAAA,aAAoBX,QAAQ,CAAC5B,IAAI,CAACC,SAAS,CAACuC,QAAV,CAAmBD,MAAnB,CAAD,CAAL,CAA5B;AAAA;AAL0C,GAA9C;AAAA,CAApB;;AAQA,eAAezC,OAAO,CAACiB,QAAD,EAAWY,WAAX,CAAP,CAA+Bb,aAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { getLocation, push } from 'connected-react-router'\nimport { locations } from 'routing/locations'\n\nimport {\n  getPoolList,\n  getTotal,\n  getSortBy,\n  getPage,\n  getSortOrder,\n  getSearchGroup,\n  getSearchEthAddress,\n  getTotalPages\n} from 'modules/pool/selectors'\nimport { RootState } from 'modules/common/types'\nimport { openModal } from 'modules/modal/actions'\nimport { PoolsRequestFilters } from 'modules/pool/types'\nimport { loadPoolsRequest } from 'modules/pool/actions'\nimport { getAllPoolGroups } from 'modules/poolGroup/selectors'\nimport { isLoggedIn } from 'modules/identity/selectors'\n\nimport { MapStateProps, MapDispatch, MapDispatchProps } from './SceneListPage.types'\nimport SceneListPage from './SceneListPage'\n\nconst mapState = (state: RootState): MapStateProps => ({\n  location: getLocation(state),\n  pools: getPoolList(state),\n  poolGroups: getAllPoolGroups(state),\n  total: getTotal(state),\n  totalPages: getTotalPages(state),\n  page: getPage(state),\n  sortBy: getSortBy(state),\n  sortOrder: getSortOrder(state),\n  group: getSearchGroup(state),\n  ethAddress: getSearchEthAddress(state),\n  isLoggedIn: isLoggedIn(state)\n})\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata)),\n  onLoadPools: (filters: PoolsRequestFilters) => dispatch(loadPoolsRequest(filters)),\n  onPageChange: (filters: PoolsRequestFilters) => dispatch(push(locations.poolSearch(filters))),\n  onNavegateToHome: () => dispatch(push(locations.root())),\n  onNavegateToViewPool: (poolId: string) => dispatch(push(locations.poolView(poolId)))\n})\n\nexport default connect(mapState, mapDispatch)(SceneListPage)\n"]},"metadata":{},"sourceType":"module"}