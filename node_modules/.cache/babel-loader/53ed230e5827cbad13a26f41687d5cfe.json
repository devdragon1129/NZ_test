{"ast":null,"code":"import { Scene } from \"../scene\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { GeometryBufferRenderer } from \"./geometryBufferRenderer\";\nObject.defineProperty(Scene.prototype, \"geometryBufferRenderer\", {\n  get: function get() {\n    this._geometryBufferRenderer;\n  },\n  set: function set(value) {\n    if (value && value.isSupported) {\n      this._geometryBufferRenderer = value;\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\n\nScene.prototype.enableGeometryBufferRenderer = function (ratio) {\n  if (ratio === void 0) {\n    ratio = 1;\n  }\n\n  if (this._geometryBufferRenderer) {\n    return this._geometryBufferRenderer;\n  }\n\n  this._geometryBufferRenderer = new GeometryBufferRenderer(this, ratio);\n\n  if (!this._geometryBufferRenderer.isSupported) {\n    this._geometryBufferRenderer = null;\n  }\n\n  return this._geometryBufferRenderer;\n};\n\nScene.prototype.disableGeometryBufferRenderer = function () {\n  if (!this._geometryBufferRenderer) {\n    return;\n  }\n\n  this._geometryBufferRenderer.dispose();\n\n  this._geometryBufferRenderer = null;\n};\n/**\r\n * Defines the Geometry Buffer scene component responsible to manage a G-Buffer useful\r\n * in several rendering techniques.\r\n */\n\n\nvar GeometryBufferRendererSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function GeometryBufferRendererSceneComponent(scene) {\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_GEOMETRYBUFFERRENDERER;\n    this.scene = scene;\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  GeometryBufferRendererSceneComponent.prototype.register = function () {\n    this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_GEOMETRYBUFFERRENDERER, this, this._gatherRenderTargets);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  GeometryBufferRendererSceneComponent.prototype.rebuild = function () {// Nothing to do for this component\n  };\n  /**\r\n   * Disposes the component and the associated ressources\r\n   */\n\n\n  GeometryBufferRendererSceneComponent.prototype.dispose = function () {// Nothing to do for this component\n  };\n\n  GeometryBufferRendererSceneComponent.prototype._gatherRenderTargets = function (renderTargets) {\n    if (this.scene._geometryBufferRenderer) {\n      renderTargets.push(this.scene._geometryBufferRenderer.getGBuffer());\n    }\n  };\n\n  return GeometryBufferRendererSceneComponent;\n}();\n\nexport { GeometryBufferRendererSceneComponent };\n\nGeometryBufferRenderer._SceneComponentInitialization = function (scene) {\n  // Register the G Buffer component to the scene.\n  var component = scene._getComponent(SceneComponentConstants.NAME_GEOMETRYBUFFERRENDERER);\n\n  if (!component) {\n    component = new GeometryBufferRendererSceneComponent(scene);\n\n    scene._addComponent(component);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}