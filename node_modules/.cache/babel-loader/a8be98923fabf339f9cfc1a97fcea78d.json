{"ast":null,"code":"import { Tools } from '@babylonjs/core/Misc/tools';\n\nfunction validateAsync(data, rootUrl, fileName, getExternalResource) {\n  var options = {\n    externalResourceFunction: function externalResourceFunction(uri) {\n      return getExternalResource(uri).then(function (value) {\n        return new Uint8Array(value);\n      });\n    }\n  };\n\n  if (fileName) {\n    options.uri = rootUrl === \"file:\" ? fileName : rootUrl + fileName;\n  }\n\n  return data instanceof ArrayBuffer ? GLTFValidator.validateBytes(new Uint8Array(data), options) : GLTFValidator.validateString(data, options);\n}\n/**\r\n * The worker function that gets converted to a blob url to pass into a worker.\r\n */\n\n\nfunction workerFunc() {\n  var pendingExternalResources = [];\n\n  onmessage = function onmessage(message) {\n    var data = message.data;\n\n    switch (data.id) {\n      case \"init\":\n        {\n          importScripts(data.url);\n          break;\n        }\n\n      case \"validate\":\n        {\n          validateAsync(data.data, data.rootUrl, data.fileName, function (uri) {\n            return new Promise(function (resolve, reject) {\n              var index = pendingExternalResources.length;\n              pendingExternalResources.push({\n                resolve: resolve,\n                reject: reject\n              });\n              postMessage({\n                id: \"getExternalResource\",\n                index: index,\n                uri: uri\n              });\n            });\n          }).then(function (value) {\n            postMessage({\n              id: \"validate.resolve\",\n              value: value\n            });\n          }, function (reason) {\n            postMessage({\n              id: \"validate.reject\",\n              reason: reason\n            });\n          });\n          break;\n        }\n\n      case \"getExternalResource.resolve\":\n        {\n          pendingExternalResources[data.index].resolve(data.value);\n          break;\n        }\n\n      case \"getExternalResource.reject\":\n        {\n          pendingExternalResources[data.index].reject(data.reason);\n          break;\n        }\n    }\n  };\n}\n/**\r\n * glTF validation\r\n */\n\n\nvar GLTFValidation =\n/** @class */\nfunction () {\n  function GLTFValidation() {}\n  /**\r\n   * Validate a glTF asset using the glTF-Validator.\r\n   * @param data The JSON of a glTF or the array buffer of a binary glTF\r\n   * @param rootUrl The root url for the glTF\r\n   * @param fileName The file name for the glTF\r\n   * @param getExternalResource The callback to get external resources for the glTF validator\r\n   * @returns A promise that resolves with the glTF validation results once complete\r\n   */\n\n\n  GLTFValidation.ValidateAsync = function (data, rootUrl, fileName, getExternalResource) {\n    var _this = this;\n\n    if (typeof Worker === \"function\") {\n      return new Promise(function (resolve, reject) {\n        var workerContent = validateAsync + \"(\" + workerFunc + \")()\";\n        var workerBlobUrl = URL.createObjectURL(new Blob([workerContent], {\n          type: \"application/javascript\"\n        }));\n        var worker = new Worker(workerBlobUrl);\n\n        var onError = function onError(error) {\n          worker.removeEventListener(\"error\", onError);\n          worker.removeEventListener(\"message\", onMessage);\n          reject(error);\n        };\n\n        var onMessage = function onMessage(message) {\n          var data = message.data;\n\n          switch (data.id) {\n            case \"getExternalResource\":\n              {\n                getExternalResource(data.uri).then(function (value) {\n                  worker.postMessage({\n                    id: \"getExternalResource.resolve\",\n                    index: data.index,\n                    value: value\n                  }, [value]);\n                }, function (reason) {\n                  worker.postMessage({\n                    id: \"getExternalResource.reject\",\n                    index: data.index,\n                    reason: reason\n                  });\n                });\n                break;\n              }\n\n            case \"validate.resolve\":\n              {\n                worker.removeEventListener(\"error\", onError);\n                worker.removeEventListener(\"message\", onMessage);\n                resolve(data.value);\n                break;\n              }\n\n            case \"validate.reject\":\n              {\n                worker.removeEventListener(\"error\", onError);\n                worker.removeEventListener(\"message\", onMessage);\n                reject(data.reason);\n              }\n          }\n        };\n\n        worker.addEventListener(\"error\", onError);\n        worker.addEventListener(\"message\", onMessage);\n        worker.postMessage({\n          id: \"init\",\n          url: Tools.GetAbsoluteUrl(_this.Configuration.url)\n        });\n        worker.postMessage({\n          id: \"validate\",\n          data: data,\n          rootUrl: rootUrl,\n          fileName: fileName\n        });\n      });\n    } else {\n      if (!this._LoadScriptPromise) {\n        this._LoadScriptPromise = Tools.LoadScriptAsync(this.Configuration.url);\n      }\n\n      return this._LoadScriptPromise.then(function () {\n        return validateAsync(data, rootUrl, fileName, getExternalResource);\n      });\n    }\n  };\n  /**\r\n   * The configuration. Defaults to `{ url: \"https://preview.babylonjs.com/gltf_validator.js\" }`.\r\n   */\n\n\n  GLTFValidation.Configuration = {\n    url: \"https://preview.babylonjs.com/gltf_validator.js\"\n  };\n  return GLTFValidation;\n}();\n\nexport { GLTFValidation };","map":null,"metadata":{},"sourceType":"module"}