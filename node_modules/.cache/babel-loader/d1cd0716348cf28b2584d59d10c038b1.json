{"ast":null,"code":"import _defineProperty from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toArray\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(sceneSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleAddItem),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleUpdateTransfrom),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(handleResetItem),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(handleDuplicateItem),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(handleDeleteItem),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(handleSetGround),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(handleFixLegacyNamespacesRequest),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(handleSyncSceneAssetsAction),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(handleApplyLayout),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(applyGround),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(handleSetScriptParameters);\n\nimport uuidv4 from 'uuid/v4';\nimport { takeLatest, put, select, call, delay, take } from 'redux-saga/effects';\nimport { ADD_ITEM, provisionScene, RESET_ITEM, UPDATE_TRANSFORM, DUPLICATE_ITEM, DELETE_ITEM, SET_GROUND, APPLY_LAYOUT, SET_SCRIPT_VALUES, SYNC_SCENE_ASSETS_REQUEST, FIX_LEGACY_NAMESPACES_REQUEST, fixLegacyNamespacesSuccess, syncSceneAssetsSuccess } from 'modules/scene/actions';\nimport { getGLTFsByAssetId, getCurrentScene, getEntityComponentsByType, getComponentsByEntityId, getData as getScenes, getCollectiblesByURL, getShapesByEntityId } from 'modules/scene/selectors';\nimport { ComponentType } from 'modules/scene/types';\nimport { getSelectedEntityIds, isReady } from 'modules/editor/selectors';\nimport { setSelectedEntities, SET_EDITOR_READY } from 'modules/editor/actions';\nimport { getCurrentBounds, getData as getProjects } from 'modules/project/selectors';\nimport { PARCEL_SIZE } from 'modules/project/constants';\nimport { COLLECTIBLE_ASSET_PACK_ID } from 'modules/ui/sidebar/utils';\nimport { snapToGrid, snapToBounds, cloneEntities, filterEntitiesWithComponent, getEntityName, getDefaultValues, renameEntity, removeEntityReferences } from './utils';\nimport { getData as getAssets, getGroundAssets, getAssetsByEntityName } from 'modules/asset/selectors';\nimport { loadAssets } from 'modules/asset/actions';\nimport { getData as getAssetPacks } from 'modules/assetPack/selectors';\nimport { getMetrics } from 'components/AssetImporter/utils';\nvar editorWindow = window;\nexport function sceneSaga() {\n  return _regeneratorRuntime.wrap(function sceneSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLatest(ADD_ITEM, handleAddItem);\n\n        case 2:\n          _context.next = 4;\n          return takeLatest(UPDATE_TRANSFORM, handleUpdateTransfrom);\n\n        case 4:\n          _context.next = 6;\n          return takeLatest(RESET_ITEM, handleResetItem);\n\n        case 6:\n          _context.next = 8;\n          return takeLatest(DUPLICATE_ITEM, handleDuplicateItem);\n\n        case 8:\n          _context.next = 10;\n          return takeLatest(DELETE_ITEM, handleDeleteItem);\n\n        case 10:\n          _context.next = 12;\n          return takeLatest(SET_GROUND, handleSetGround);\n\n        case 12:\n          _context.next = 14;\n          return takeLatest(FIX_LEGACY_NAMESPACES_REQUEST, handleFixLegacyNamespacesRequest);\n\n        case 14:\n          _context.next = 16;\n          return takeLatest(SYNC_SCENE_ASSETS_REQUEST, handleSyncSceneAssetsAction);\n\n        case 16:\n          _context.next = 18;\n          return takeLatest(APPLY_LAYOUT, handleApplyLayout);\n\n        case 18:\n          _context.next = 20;\n          return takeLatest(SET_SCRIPT_VALUES, handleSetScriptParameters);\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction handleAddItem(action) {\n  var isEditorReady, scene, shapeId, scriptId, position, asset, transformId, newComponents, collectibles, collectible, gltfs, gltf, bounds, scriptPath, newEntities, entityId, entityComponents, newScene, assets, entityName, _assets, comp;\n\n  return _regeneratorRuntime.wrap(function handleAddItem$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return select(isReady);\n\n        case 2:\n          isEditorReady = _context2.sent;\n\n          if (isEditorReady) {\n            _context2.next = 6;\n            break;\n          }\n\n          _context2.next = 6;\n          return take(SET_EDITOR_READY);\n\n        case 6:\n          _context2.next = 8;\n          return select(getCurrentScene);\n\n        case 8:\n          scene = _context2.sent;\n\n          if (scene) {\n            _context2.next = 11;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 11:\n          scriptId = null;\n          position = action.payload.position;\n          asset = action.payload.asset;\n          transformId = uuidv4();\n          newComponents = _objectSpread({}, scene.components);\n\n          if (position) {\n            _context2.next = 21;\n            break;\n          }\n\n          _context2.next = 19;\n          return call(editorWindow.editor.getCameraTarget);\n\n        case 19:\n          position = _context2.sent;\n          position.y = 0;\n\n        case 21:\n          if (!(asset.assetPackId === COLLECTIBLE_ASSET_PACK_ID)) {\n            _context2.next = 31;\n            break;\n          }\n\n          _context2.next = 24;\n          return select(getCollectiblesByURL);\n\n        case 24:\n          collectibles = _context2.sent;\n          collectible = collectibles[asset.model];\n          shapeId = collectible ? collectibles[asset.model].id : null;\n\n          if (!shapeId) {\n            shapeId = uuidv4();\n            newComponents[shapeId] = {\n              id: shapeId,\n              type: ComponentType.NFTShape,\n              data: {\n                url: asset.model\n              }\n            };\n          }\n\n          position = _objectSpread({}, position, {\n            y: 1.72\n          });\n          _context2.next = 37;\n          break;\n\n        case 31:\n          _context2.next = 33;\n          return select(getGLTFsByAssetId);\n\n        case 33:\n          gltfs = _context2.sent;\n          gltf = gltfs[asset.id];\n          shapeId = gltf ? gltf.id : null;\n\n          if (!shapeId) {\n            shapeId = uuidv4();\n            newComponents[shapeId] = {\n              id: shapeId,\n              type: ComponentType.GLTFShape,\n              data: {\n                assetId: asset.id\n              }\n            };\n          }\n\n        case 37:\n          _context2.next = 39;\n          return select(getCurrentBounds);\n\n        case 39:\n          bounds = _context2.sent;\n\n          if (bounds) {\n            position = snapToBounds(position, bounds);\n          }\n\n          position = snapToGrid(position);\n          newComponents[transformId] = {\n            id: transformId,\n            type: ComponentType.Transform,\n            data: {\n              position: position,\n              rotation: {\n                x: 0,\n                y: 0,\n                z: 0,\n                w: 1\n              },\n              scale: {\n                x: 1,\n                y: 1,\n                z: 1\n              }\n            }\n          };\n          scriptPath = Object.keys(asset.contents).find(function (path) {\n            return path.endsWith('.js');\n          });\n\n          if (scriptPath) {\n            scriptId = uuidv4();\n            newComponents[scriptId] = {\n              id: scriptId,\n              type: ComponentType.Script,\n              data: {\n                assetId: asset.id,\n                src: asset.contents[scriptPath],\n                values: {}\n              }\n            };\n          }\n\n          newEntities = _objectSpread({}, scene.entities);\n          entityId = uuidv4();\n          entityComponents = [transformId, shapeId];\n\n          if (scriptId) {\n            // Scripts components must go first\n            entityComponents.unshift(scriptId);\n          }\n\n          newScene = _objectSpread({}, scene, {\n            components: newComponents,\n            entities: newEntities\n          });\n          _context2.next = 52;\n          return select(getAssets);\n\n        case 52:\n          assets = _context2.sent;\n          entityName = getEntityName(newScene, entityComponents, assets);\n          newEntities[entityId] = {\n            id: entityId,\n            components: entityComponents,\n            name: entityName\n          };\n          newScene.assets[asset.id] = asset;\n\n          if (!scriptId) {\n            _context2.next = 62;\n            break;\n          }\n\n          _context2.next = 59;\n          return select(getAssetsByEntityName);\n\n        case 59:\n          _assets = _context2.sent;\n          comp = newScene.components[scriptId];\n          comp.data.values = getDefaultValues(entityName, asset.parameters, _assets);\n\n        case 62:\n          _context2.next = 64;\n          return put(setSelectedEntities([]));\n\n        case 64:\n          _context2.next = 66;\n          return put(provisionScene(newScene));\n\n        case 66:\n          _context2.next = 68;\n          return delay(500);\n\n        case 68:\n          if (!(editorWindow.editor.getLoadingEntities() !== null && editorWindow.editor.getLoadingEntities().includes(entityId))) {\n            _context2.next = 73;\n            break;\n          }\n\n          _context2.next = 71;\n          return delay(200);\n\n        case 71:\n          _context2.next = 68;\n          break;\n\n        case 73:\n          _context2.next = 75;\n          return put(setSelectedEntities([entityId]));\n\n        case 75:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction handleUpdateTransfrom(action) {\n  var scene, components, newComponents, _iterator, _step, componentData;\n\n  return _regeneratorRuntime.wrap(function handleUpdateTransfrom$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return select(getCurrentScene);\n\n        case 2:\n          scene = _context3.sent;\n\n          if (scene) {\n            _context3.next = 5;\n            break;\n          }\n\n          return _context3.abrupt(\"return\");\n\n        case 5:\n          components = action.payload.components;\n          newComponents = _objectSpread({}, scene.components);\n          _iterator = _createForOfIteratorHelper(components);\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              componentData = _step.value;\n\n              if (componentData.componentId in scene.components) {\n                newComponents[componentData.componentId] = _objectSpread({}, newComponents[componentData.componentId], {\n                  data: {\n                    position: _objectSpread({}, componentData.data.position),\n                    rotation: _objectSpread({}, componentData.data.rotation),\n                    scale: _objectSpread({}, componentData.data.scale)\n                  }\n                });\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          _context3.next = 11;\n          return put(provisionScene(_objectSpread({}, scene, {\n            components: newComponents\n          })));\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction handleResetItem(_) {\n  var scene, selectedEntityIds, components, newComponents, _iterator2, _step2, entityId, transform;\n\n  return _regeneratorRuntime.wrap(function handleResetItem$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return select(getCurrentScene);\n\n        case 2:\n          scene = _context4.sent;\n\n          if (scene) {\n            _context4.next = 5;\n            break;\n          }\n\n          return _context4.abrupt(\"return\");\n\n        case 5:\n          _context4.next = 7;\n          return select(getSelectedEntityIds);\n\n        case 7:\n          selectedEntityIds = _context4.sent;\n\n          if (!(selectedEntityIds.length === 0)) {\n            _context4.next = 10;\n            break;\n          }\n\n          return _context4.abrupt(\"return\");\n\n        case 10:\n          _context4.next = 12;\n          return select(getEntityComponentsByType);\n\n        case 12:\n          components = _context4.sent;\n          newComponents = _objectSpread({}, scene.components);\n          _iterator2 = _createForOfIteratorHelper(selectedEntityIds);\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              entityId = _step2.value;\n              transform = components[entityId][ComponentType.Transform];\n\n              if (transform) {\n                newComponents[transform.id] = _objectSpread({}, transform, {\n                  data: _objectSpread({}, transform.data, {\n                    position: snapToGrid(transform.data.position),\n                    rotation: {\n                      x: 0,\n                      y: 0,\n                      z: 0,\n                      w: 1\n                    },\n                    scale: {\n                      x: 1,\n                      y: 1,\n                      z: 1\n                    }\n                  })\n                });\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          _context4.next = 18;\n          return put(provisionScene(_objectSpread({}, scene, {\n            components: newComponents\n          })));\n\n        case 18:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction handleDuplicateItem(_) {\n  var assets, scene, selectedEntityIds, newComponents, newEntities, newEntityIds, _iterator3, _step3, entityId, entityComponents, shapes, shape, components, transform, script, _transform$data, position, rotation, scale, transformId, newEntityId, entityName, _script$data, parameters, assetId, scriptId, values;\n\n  return _regeneratorRuntime.wrap(function handleDuplicateItem$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return select(getAssets);\n\n        case 2:\n          assets = _context5.sent;\n          _context5.next = 5;\n          return select(getCurrentScene);\n\n        case 5:\n          scene = _context5.sent;\n\n          if (scene) {\n            _context5.next = 8;\n            break;\n          }\n\n          return _context5.abrupt(\"return\");\n\n        case 8:\n          _context5.next = 10;\n          return select(getSelectedEntityIds);\n\n        case 10:\n          selectedEntityIds = _context5.sent;\n\n          if (!(selectedEntityIds.length === 0)) {\n            _context5.next = 13;\n            break;\n          }\n\n          return _context5.abrupt(\"return\");\n\n        case 13:\n          newComponents = _objectSpread({}, scene.components);\n          newEntities = _objectSpread({}, scene.entities);\n          newEntityIds = [];\n          _iterator3 = _createForOfIteratorHelper(selectedEntityIds);\n          _context5.prev = 17;\n\n          _iterator3.s();\n\n        case 19:\n          if ((_step3 = _iterator3.n()).done) {\n            _context5.next = 47;\n            break;\n          }\n\n          entityId = _step3.value;\n          entityComponents = [];\n          _context5.next = 24;\n          return select(getShapesByEntityId);\n\n        case 24:\n          shapes = _context5.sent;\n          shape = shapes[entityId];\n          entityComponents.push(shape.id);\n\n          if (!(shape && shape.type === ComponentType.NFTShape)) {\n            _context5.next = 29;\n            break;\n          }\n\n          return _context5.abrupt(\"continue\", 45);\n\n        case 29:\n          _context5.next = 31;\n          return select(getEntityComponentsByType);\n\n        case 31:\n          components = _context5.sent;\n          transform = components[entityId][ComponentType.Transform];\n          script = components[entityId][ComponentType.Script];\n\n          if (!(!shape || !transform)) {\n            _context5.next = 36;\n            break;\n          }\n\n          return _context5.abrupt(\"continue\", 45);\n\n        case 36:\n          // copy transform\n          _transform$data = transform.data, position = _transform$data.position, rotation = _transform$data.rotation, scale = _transform$data.scale;\n          transformId = uuidv4();\n          newComponents[transformId] = {\n            id: transformId,\n            type: ComponentType.Transform,\n            data: {\n              position: _objectSpread({}, position),\n              rotation: _objectSpread({}, rotation),\n              scale: _objectSpread({}, scale)\n            }\n          };\n          entityComponents.push(transformId);\n          newEntityId = uuidv4(); // WARNING: we use entityComponents here because we can already generate the name which will be used for the Script component.\n          // This means that we use components before we are done creating all of them.\n\n          entityName = getEntityName(_objectSpread({}, scene, {\n            components: newComponents,\n            entities: newEntities\n          }), entityComponents, assets);\n          newEntities[newEntityId] = {\n            id: newEntityId,\n            components: entityComponents,\n            name: entityName\n          };\n          newEntityIds.push(newEntityId); // copy script\n\n          if (script) {\n            _script$data = script.data, parameters = _script$data.values, assetId = _script$data.assetId;\n            scriptId = uuidv4();\n            values = JSON.parse(JSON.stringify(parameters));\n            renameEntity(assets[assetId].parameters, values, scene.entities[entityId].name, entityName);\n            newComponents[scriptId] = {\n              id: scriptId,\n              type: ComponentType.Script,\n              data: {\n                values: values,\n                assetId: assetId\n              }\n            }; // Scripts components must go first\n\n            entityComponents.unshift(scriptId);\n          }\n\n        case 45:\n          _context5.next = 19;\n          break;\n\n        case 47:\n          _context5.next = 52;\n          break;\n\n        case 49:\n          _context5.prev = 49;\n          _context5.t0 = _context5[\"catch\"](17);\n\n          _iterator3.e(_context5.t0);\n\n        case 52:\n          _context5.prev = 52;\n\n          _iterator3.f();\n\n          return _context5.finish(52);\n\n        case 55:\n          _context5.next = 57;\n          return put(setSelectedEntities([]));\n\n        case 57:\n          _context5.next = 59;\n          return put(provisionScene(_objectSpread({}, scene, {\n            components: newComponents,\n            entities: newEntities\n          })));\n\n        case 59:\n          _context5.next = 61;\n          return delay(300);\n\n        case 61:\n          if (!(editorWindow.editor.getLoadingEntities() !== null && editorWindow.editor.getLoadingEntities().some(function (id) {\n            return newEntityIds.includes(id);\n          }))) {\n            _context5.next = 66;\n            break;\n          }\n\n          _context5.next = 64;\n          return delay(200);\n\n        case 64:\n          _context5.next = 61;\n          break;\n\n        case 66:\n          _context5.next = 68;\n          return put(setSelectedEntities(newEntityIds));\n\n        case 68:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[17, 49, 52, 55]]);\n}\n\nfunction handleDeleteItem(_) {\n  var scene, selectedEntityIds, newComponents, newEntities, newAssets, _iterator4, _step4, entityId, componentsByEntityId, entityComponents, idsToDelete, _iterator5, _step5, _loop, _ret, componentId, component, ids, _i, _Object$values, asset;\n\n  return _regeneratorRuntime.wrap(function handleDeleteItem$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return select(getCurrentScene);\n\n        case 2:\n          scene = _context6.sent;\n\n          if (scene) {\n            _context6.next = 5;\n            break;\n          }\n\n          return _context6.abrupt(\"return\");\n\n        case 5:\n          _context6.next = 7;\n          return select(getSelectedEntityIds);\n\n        case 7:\n          selectedEntityIds = _context6.sent;\n\n          if (!(selectedEntityIds.length === 0)) {\n            _context6.next = 10;\n            break;\n          }\n\n          return _context6.abrupt(\"return\");\n\n        case 10:\n          newComponents = _objectSpread({}, scene.components);\n          newEntities = _objectSpread({}, scene.entities);\n          newAssets = _objectSpread({}, scene.assets);\n          _iterator4 = _createForOfIteratorHelper(selectedEntityIds);\n          _context6.prev = 14;\n\n          _iterator4.s();\n\n        case 16:\n          if ((_step4 = _iterator4.n()).done) {\n            _context6.next = 45;\n            break;\n          }\n\n          entityId = _step4.value;\n          _context6.next = 20;\n          return select(getComponentsByEntityId);\n\n        case 20:\n          componentsByEntityId = _context6.sent;\n          entityComponents = componentsByEntityId[entityId];\n          idsToDelete = entityComponents ? entityComponents.filter(function (component) {\n            return !!component;\n          }).map(function (component) {\n            return component.id;\n          }) : [];\n          delete newEntities[entityId];\n          _iterator5 = _createForOfIteratorHelper(idsToDelete);\n          _context6.prev = 25;\n\n          _loop = function _loop() {\n            var componentId = _step5.value;\n\n            // check if commponentId is not used by other entities\n            if (Object.values(newEntities).some(function (entity) {\n              return entity.components.some(function (id) {\n                return componentId === id;\n              });\n            })) {\n              return \"continue\";\n            }\n\n            delete newComponents[componentId];\n          };\n\n          _iterator5.s();\n\n        case 28:\n          if ((_step5 = _iterator5.n()).done) {\n            _context6.next = 34;\n            break;\n          }\n\n          _ret = _loop();\n\n          if (!(_ret === \"continue\")) {\n            _context6.next = 32;\n            break;\n          }\n\n          return _context6.abrupt(\"continue\", 32);\n\n        case 32:\n          _context6.next = 28;\n          break;\n\n        case 34:\n          _context6.next = 39;\n          break;\n\n        case 36:\n          _context6.prev = 36;\n          _context6.t0 = _context6[\"catch\"](25);\n\n          _iterator5.e(_context6.t0);\n\n        case 39:\n          _context6.prev = 39;\n\n          _iterator5.f();\n\n          return _context6.finish(39);\n\n        case 42:\n          for (componentId in newComponents) {\n            component = newComponents[componentId];\n\n            if (component.type === ComponentType.Script) {\n              removeEntityReferences(newAssets[component.data.assetId].parameters, component.data.values, scene.entities[entityId].name);\n            }\n          }\n\n        case 43:\n          _context6.next = 16;\n          break;\n\n        case 45:\n          _context6.next = 50;\n          break;\n\n        case 47:\n          _context6.prev = 47;\n          _context6.t1 = _context6[\"catch\"](14);\n\n          _iterator4.e(_context6.t1);\n\n        case 50:\n          _context6.prev = 50;\n\n          _iterator4.f();\n\n          return _context6.finish(50);\n\n        case 53:\n          // TODO: refactor\n          // gather all the models used by gltf shapes\n          ids = Object.values(newComponents).reduce(function (set, component) {\n            if (component.type === ComponentType.GLTFShape || component.type === ComponentType.Script) {\n              var gltfShape = component;\n              set.add(gltfShape.data.assetId);\n            }\n\n            return set;\n          }, new Set()); // remove assets that are not in the set\n\n          _i = 0, _Object$values = Object.values(newAssets);\n\n        case 55:\n          if (!(_i < _Object$values.length)) {\n            _context6.next = 63;\n            break;\n          }\n\n          asset = _Object$values[_i];\n\n          if (!ids.has(asset.id)) {\n            _context6.next = 59;\n            break;\n          }\n\n          return _context6.abrupt(\"continue\", 60);\n\n        case 59:\n          delete newAssets[asset.id];\n\n        case 60:\n          _i++;\n          _context6.next = 55;\n          break;\n\n        case 63:\n          _context6.next = 65;\n          return put(setSelectedEntities([]));\n\n        case 65:\n          _context6.next = 67;\n          return put(provisionScene(_objectSpread({}, scene, {\n            components: newComponents,\n            entities: newEntities,\n            assets: newAssets\n          })));\n\n        case 67:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[14, 47, 50, 53], [25, 36, 39, 42]]);\n}\n\nfunction handleSetGround(action) {\n  var _action$payload, asset, projectId, projects, currentProject, scenes, scene, _currentProject$layou, rows, cols;\n\n  return _regeneratorRuntime.wrap(function handleSetGround$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _action$payload = action.payload, asset = _action$payload.asset, projectId = _action$payload.projectId;\n          _context7.next = 3;\n          return select(getProjects);\n\n        case 3:\n          projects = _context7.sent;\n          currentProject = projects[projectId];\n\n          if (currentProject) {\n            _context7.next = 7;\n            break;\n          }\n\n          return _context7.abrupt(\"return\");\n\n        case 7:\n          _context7.next = 9;\n          return select(getScenes);\n\n        case 9:\n          scenes = _context7.sent;\n          scene = scenes[currentProject.sceneId];\n\n          if (scene) {\n            _context7.next = 13;\n            break;\n          }\n\n          return _context7.abrupt(\"return\");\n\n        case 13:\n          _currentProject$layou = currentProject.layout, rows = _currentProject$layou.rows, cols = _currentProject$layou.cols;\n\n          if (!asset) {\n            _context7.next = 17;\n            break;\n          }\n\n          _context7.next = 17;\n          return applyGround(scene, rows, cols, asset);\n\n        case 17:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction handleFixLegacyNamespacesRequest(action) {\n  var scene, newComponents, newAssets, assetPacks, assets, gltfShapes, _iterator6, _step6, gltfShape, src, legacyRegex, isLegacy, _ret2, fixedScene, hasUpdates;\n\n  return _regeneratorRuntime.wrap(function handleFixLegacyNamespacesRequest$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          /*  The purspose of this saga is to fix old namespaces in gltshapes that used to be asset pack ids,\n              and change them for the asset id instead.\n               For gltf shapes that don't have a corresponding asset, a dummy one will be created\n          */\n          scene = action.payload.scene;\n          newComponents = {};\n          newAssets = {}; // get asset packs\n\n          _context8.next = 5;\n          return select(getAssetPacks);\n\n        case 5:\n          assetPacks = _context8.sent;\n          _context8.next = 8;\n          return select(getAssets);\n\n        case 8:\n          assets = _context8.sent;\n          // gather all gltf shapes\n          gltfShapes = Object.values(scene.components).filter(function (component) {\n            return component.type === ComponentType.GLTFShape;\n          });\n          _iterator6 = _createForOfIteratorHelper(gltfShapes);\n          _context8.prev = 11;\n\n          _iterator6.s();\n\n        case 13:\n          if ((_step6 = _iterator6.n()).done) {\n            _context8.next = 26;\n            break;\n          }\n\n          gltfShape = _step6.value;\n          src = gltfShape.data['src']; // if it doesn't have src, we continue\n\n          if (src) {\n            _context8.next = 18;\n            break;\n          }\n\n          return _context8.abrupt(\"continue\", 24);\n\n        case 18:\n          // if the src looks like <uuid>/<model-url> then it's legacy\n          legacyRegex = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/; // check if the path starts with a UUID\n\n          isLegacy = legacyRegex.test(src.split('/')[0]);\n\n          if (!isLegacy) {\n            _context8.next = 24;\n            break;\n          }\n\n          _ret2 = function () {\n            var _src$split = src.split('/'),\n                _src$split2 = _toArray(_src$split),\n                assetPackId = _src$split2[0],\n                rest = _src$split2.slice(1);\n\n            var model = rest.join('/');\n            var assetPack = assetPacks[assetPackId]; // if there's an asset pack, we look for the asset and fix the legacy componment\n\n            if (assetPack) {\n              var asset = assetPack.assets.map(function (assetId) {\n                return assets[assetId];\n              }).find(function (asset) {\n                return asset.model === model;\n              });\n\n              if (asset) {\n                var newGltfShape = _objectSpread({}, gltfShape, {\n                  data: {\n                    assetId: asset.id\n                  }\n                });\n\n                newComponents[newGltfShape.id] = newGltfShape;\n                return \"continue\";\n              }\n            } // if there's no asset pack but there are mappings, we generate a dummy asset from the mappings\n\n\n            if ('mappings' in gltfShape.data) {\n              var contents = {}; // TODO: Type this correctly, mappings does not appear anywhere in ComponentDefinition\n\n              var mappings = gltfShape.data['mappings'];\n\n              for (var _i2 = 0, _Object$keys = Object.keys(mappings); _i2 < _Object$keys.length; _i2++) {\n                var namespacedPath = _Object$keys[_i2];\n                var path = namespacedPath // remove the namespace\n                .split('/') // ['<uuid>', 'folder', 'Model.gltf']\n                .slice(1) // ['folder', 'Model.gltf']\n                .join('/'); // 'folder/Model.gltf'\n\n                contents[path] = mappings[namespacedPath];\n              }\n\n              var id = uuidv4();\n              var newAsset = {\n                id: id,\n                model: model,\n                assetPackId: assetPackId,\n                contents: contents,\n                name: 'Dummy',\n                script: null,\n                thumbnail: '',\n                tags: [],\n                category: 'decorations',\n                metrics: getMetrics(),\n                parameters: [],\n                actions: []\n              };\n              newAssets[id] = newAsset;\n\n              var _newGltfShape = _objectSpread({}, gltfShape, {\n                data: _objectSpread({}, gltfShape.data, {\n                  assetId: newAsset.id\n                })\n              });\n\n              newComponents[_newGltfShape.id] = _newGltfShape;\n            } else {// noop\n            }\n          }();\n\n          if (!(_ret2 === \"continue\")) {\n            _context8.next = 24;\n            break;\n          }\n\n          return _context8.abrupt(\"continue\", 24);\n\n        case 24:\n          _context8.next = 13;\n          break;\n\n        case 26:\n          _context8.next = 31;\n          break;\n\n        case 28:\n          _context8.prev = 28;\n          _context8.t0 = _context8[\"catch\"](11);\n\n          _iterator6.e(_context8.t0);\n\n        case 31:\n          _context8.prev = 31;\n\n          _iterator6.f();\n\n          return _context8.finish(31);\n\n        case 34:\n          fixedScene = scene;\n          hasUpdates = Object.keys(newComponents).length > 0;\n\n          if (hasUpdates) {\n            fixedScene = _objectSpread({}, scene, {\n              assets: _objectSpread({}, scene.assets, newAssets),\n              components: _objectSpread({}, scene.components, newComponents)\n            });\n          }\n\n          _context8.next = 39;\n          return put(fixLegacyNamespacesSuccess(fixedScene));\n\n        case 39:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[11, 28, 31, 34]]);\n}\n\nfunction handleSyncSceneAssetsAction(action) {\n  var scene, updatedSceneAssets, missingSceneAssets, assets, _i3, _Object$values2, component, gltfShape, assetId, storeAsset, sceneAsset, newScene;\n\n  return _regeneratorRuntime.wrap(function handleSyncSceneAssetsAction$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          scene = action.payload.scene; // assets that need to be updated in the scene\n\n          updatedSceneAssets = {}; // assets that are present in the scene but not in the store\n\n          missingSceneAssets = {}; // all assets in the store\n\n          _context9.next = 5;\n          return select(getAssets);\n\n        case 5:\n          assets = _context9.sent;\n\n          for (_i3 = 0, _Object$values2 = Object.values(scene.components); _i3 < _Object$values2.length; _i3++) {\n            component = _Object$values2[_i3];\n\n            if (component.type === ComponentType.GLTFShape) {\n              gltfShape = component;\n              assetId = gltfShape.data.assetId;\n              storeAsset = assets[assetId];\n\n              if (storeAsset) {\n                updatedSceneAssets[storeAsset.id] = storeAsset;\n              } else {\n                sceneAsset = scene.assets[assetId];\n\n                if (sceneAsset) {\n                  missingSceneAssets[sceneAsset.id] = _objectSpread({}, sceneAsset, {\n                    assetPackId: 'dummy-asset-pack-id' // we change this so it won't show up in the sidebar\n\n                  });\n                }\n              }\n            }\n          } // generate new scene\n\n\n          newScene = _objectSpread({}, scene, {\n            assets: _objectSpread({}, scene.assets, updatedSceneAssets)\n          }); // load scene assets into redux store\n\n          _context9.next = 10;\n          return put(loadAssets(missingSceneAssets));\n\n        case 10:\n          _context9.next = 12;\n          return put(syncSceneAssetsSuccess(newScene));\n\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction handleApplyLayout(action) {\n  var project, _project$layout, rows, cols, scenes, scene, groundId, assets, ground;\n\n  return _regeneratorRuntime.wrap(function handleApplyLayout$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          project = action.payload.project;\n          _project$layout = project.layout, rows = _project$layout.rows, cols = _project$layout.cols;\n          _context10.next = 4;\n          return select(getScenes);\n\n        case 4:\n          scenes = _context10.sent;\n          scene = scenes[project.sceneId];\n\n          if (!(scene && scene.ground)) {\n            _context10.next = 14;\n            break;\n          }\n\n          groundId = scene.ground.assetId;\n          _context10.next = 10;\n          return select(getGroundAssets);\n\n        case 10:\n          assets = _context10.sent;\n          ground = assets[groundId];\n          _context10.next = 14;\n          return applyGround(scene, rows, cols, ground);\n\n        case 14:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction applyGround(scene, rows, cols, asset) {\n  var assets, sceneComponents, sceneAssets, entities, gltfId, gltfs, gltf, foundId, j, i, entityId, transformId, _newComponents, ground, _loop2, _i4, _Object$values3;\n\n  return _regeneratorRuntime.wrap(function applyGround$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return select(getAssets);\n\n        case 2:\n          assets = _context11.sent;\n          sceneComponents = _objectSpread({}, scene.components);\n          sceneAssets = _objectSpread({}, scene.assets);\n          entities = cloneEntities(scene);\n          gltfId = uuidv4();\n\n          if (!asset) {\n            _context11.next = 18;\n            break;\n          }\n\n          _context11.next = 10;\n          return select(getGLTFsByAssetId);\n\n        case 10:\n          gltfs = _context11.sent;\n          gltf = gltfs[asset.id];\n          foundId = gltf ? gltf.id : null; // Create the Shape component if necessary\n\n          if (!foundId) {\n            sceneComponents[gltfId] = {\n              id: gltfId,\n              type: ComponentType.GLTFShape,\n              data: {\n                assetId: asset.id\n              }\n            };\n          } else {\n            gltfId = foundId;\n          }\n\n          if (scene.ground) {\n            entities = filterEntitiesWithComponent(scene.ground.componentId, entities);\n          }\n\n          for (j = 0; j < cols; j++) {\n            for (i = 0; i < rows; i++) {\n              entityId = uuidv4();\n              transformId = uuidv4();\n              sceneComponents[transformId] = {\n                id: transformId,\n                type: ComponentType.Transform,\n                data: {\n                  position: {\n                    x: i * PARCEL_SIZE + PARCEL_SIZE / 2,\n                    y: 0,\n                    z: j * PARCEL_SIZE + PARCEL_SIZE / 2\n                  },\n                  rotation: {\n                    x: 0,\n                    y: 0,\n                    z: 0,\n                    w: 1\n                  },\n                  scale: {\n                    x: 1,\n                    y: 1,\n                    z: 1\n                  }\n                }\n              };\n              _newComponents = [gltfId, transformId];\n              entities[entityId] = {\n                id: entityId,\n                components: _newComponents,\n                disableGizmos: true,\n                name: getEntityName(_objectSpread({}, scene, {\n                  entities: entities\n                }), _newComponents, assets)\n              };\n            }\n          }\n\n          _context11.next = 19;\n          break;\n\n        case 18:\n          if (scene.ground) {\n            entities = filterEntitiesWithComponent(scene.ground.componentId, entities);\n          }\n\n        case 19:\n          ground = asset ? {\n            assetId: asset.id,\n            componentId: gltfId\n          } : null; // remove unused components\n\n          _loop2 = function _loop2() {\n            var component = _Object$values3[_i4];\n\n            if (!Object.values(entities).some(function (entity) {\n              return entity.components.some(function (componentId) {\n                return componentId === component.id;\n              });\n            })) {\n              delete sceneComponents[component.id];\n            }\n          };\n\n          for (_i4 = 0, _Object$values3 = Object.values(sceneComponents); _i4 < _Object$values3.length; _i4++) {\n            _loop2();\n          } // update assets removing the old ground and adding the new one\n\n\n          if (scene.ground) {\n            delete sceneAssets[scene.ground.assetId];\n          }\n\n          if (ground) {\n            sceneAssets[ground.assetId] = asset;\n          }\n\n          _context11.next = 26;\n          return put(provisionScene(_objectSpread({}, scene, {\n            components: sceneComponents,\n            entities: entities,\n            ground: ground,\n            assets: sceneAssets\n          })));\n\n        case 26:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction handleSetScriptParameters(action) {\n  var _action$payload2, entityId, values, scene, components, componentId, newScene;\n\n  return _regeneratorRuntime.wrap(function handleSetScriptParameters$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _action$payload2 = action.payload, entityId = _action$payload2.entityId, values = _action$payload2.values;\n          _context12.next = 3;\n          return select(getCurrentScene);\n\n        case 3:\n          scene = _context12.sent;\n\n          if (!scene) {\n            _context12.next = 11;\n            break;\n          }\n\n          components = scene.entities[entityId].components;\n          componentId = components.find(function (id) {\n            return scene.components[id].type === ComponentType.Script;\n          });\n\n          if (!componentId) {\n            _context12.next = 11;\n            break;\n          }\n\n          newScene = _objectSpread({}, scene, {\n            components: _objectSpread({}, scene.components, _defineProperty({}, componentId, _objectSpread({}, scene.components[componentId], {\n              data: _objectSpread({}, scene.components[componentId].data, {\n                values: _objectSpread({}, scene.components[componentId].data.values, values)\n              })\n            })))\n          });\n          _context12.next = 11;\n          return put(provisionScene(newScene));\n\n        case 11:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/scene/sagas.ts"],"names":["sceneSaga","handleAddItem","handleUpdateTransfrom","handleResetItem","handleDuplicateItem","handleDeleteItem","handleSetGround","handleFixLegacyNamespacesRequest","handleSyncSceneAssetsAction","handleApplyLayout","applyGround","handleSetScriptParameters","uuidv4","takeLatest","put","select","call","delay","take","ADD_ITEM","provisionScene","RESET_ITEM","UPDATE_TRANSFORM","DUPLICATE_ITEM","DELETE_ITEM","SET_GROUND","APPLY_LAYOUT","SET_SCRIPT_VALUES","SYNC_SCENE_ASSETS_REQUEST","FIX_LEGACY_NAMESPACES_REQUEST","fixLegacyNamespacesSuccess","syncSceneAssetsSuccess","getGLTFsByAssetId","getCurrentScene","getEntityComponentsByType","getComponentsByEntityId","getData","getScenes","getCollectiblesByURL","getShapesByEntityId","ComponentType","getSelectedEntityIds","isReady","setSelectedEntities","SET_EDITOR_READY","getCurrentBounds","getProjects","PARCEL_SIZE","COLLECTIBLE_ASSET_PACK_ID","snapToGrid","snapToBounds","cloneEntities","filterEntitiesWithComponent","getEntityName","getDefaultValues","renameEntity","removeEntityReferences","getAssets","getGroundAssets","getAssetsByEntityName","loadAssets","getAssetPacks","getMetrics","editorWindow","window","action","isEditorReady","scene","scriptId","position","payload","asset","transformId","newComponents","components","editor","getCameraTarget","y","assetPackId","collectibles","collectible","model","shapeId","id","type","NFTShape","data","url","gltfs","gltf","GLTFShape","assetId","bounds","Transform","rotation","x","z","w","scale","scriptPath","Object","keys","contents","find","path","endsWith","Script","src","values","newEntities","entities","entityId","entityComponents","unshift","newScene","assets","entityName","name","comp","parameters","getLoadingEntities","includes","componentData","componentId","_","selectedEntityIds","length","transform","newEntityIds","shapes","shape","push","script","newEntityId","JSON","parse","stringify","some","newAssets","componentsByEntityId","idsToDelete","filter","component","map","entity","ids","reduce","set","gltfShape","add","Set","has","projectId","projects","currentProject","scenes","sceneId","layout","rows","cols","assetPacks","gltfShapes","legacyRegex","isLegacy","test","split","rest","join","assetPack","newGltfShape","mappings","namespacedPath","slice","newAsset","thumbnail","tags","category","metrics","actions","fixedScene","hasUpdates","updatedSceneAssets","missingSceneAssets","storeAsset","sceneAsset","project","ground","groundId","sceneComponents","sceneAssets","gltfId","foundId","j","i","disableGizmos"],"mappings":"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","sourcesContent":["import uuidv4 from 'uuid/v4'\nimport { takeLatest, put, select, call, delay, take } from 'redux-saga/effects'\nimport {\n  ADD_ITEM,\n  AddItemAction,\n  provisionScene,\n  RESET_ITEM,\n  ResetItemAction,\n  UPDATE_TRANSFORM,\n  UpdateTransfromAction,\n  DUPLICATE_ITEM,\n  DELETE_ITEM,\n  DuplicateItemAction,\n  DeleteItemAction,\n  SET_GROUND,\n  SetGroundAction,\n  ApplyLayoutAction,\n  APPLY_LAYOUT,\n  SET_SCRIPT_VALUES,\n  SetScriptValuesAction,\n  SYNC_SCENE_ASSETS_REQUEST,\n  SyncSceneAssetsRequestAction,\n  FIX_LEGACY_NAMESPACES_REQUEST,\n  FixLegacyNamespacesRequestAction,\n  fixLegacyNamespacesSuccess,\n  syncSceneAssetsSuccess\n} from 'modules/scene/actions'\nimport {\n  getGLTFsByAssetId,\n  getCurrentScene,\n  getEntityComponentsByType,\n  getComponentsByEntityId,\n  getData as getScenes,\n  getCollectiblesByURL,\n  getShapesByEntityId\n} from 'modules/scene/selectors'\nimport { ComponentType, Scene, ComponentDefinition, ShapeComponent, AnyComponent } from 'modules/scene/types'\nimport { getSelectedEntityIds, isReady } from 'modules/editor/selectors'\nimport { setSelectedEntities, SET_EDITOR_READY } from 'modules/editor/actions'\nimport { getCurrentBounds, getData as getProjects } from 'modules/project/selectors'\nimport { PARCEL_SIZE } from 'modules/project/constants'\nimport { EditorWindow } from 'components/Preview/Preview.types'\nimport { COLLECTIBLE_ASSET_PACK_ID } from 'modules/ui/sidebar/utils'\nimport {\n  snapToGrid,\n  snapToBounds,\n  cloneEntities,\n  filterEntitiesWithComponent,\n  getEntityName,\n  getDefaultValues,\n  renameEntity,\n  removeEntityReferences\n} from './utils'\nimport { getData as getAssets, getGroundAssets, getAssetsByEntityName } from 'modules/asset/selectors'\nimport { Asset } from 'modules/asset/types'\nimport { loadAssets } from 'modules/asset/actions'\nimport { getData as getAssetPacks } from 'modules/assetPack/selectors'\nimport { getMetrics } from 'components/AssetImporter/utils'\nimport { DataByKey } from 'decentraland-dapps/dist/lib/types'\n\nconst editorWindow = window as EditorWindow\n\nexport function* sceneSaga() {\n  yield takeLatest(ADD_ITEM, handleAddItem)\n  yield takeLatest(UPDATE_TRANSFORM, handleUpdateTransfrom)\n  yield takeLatest(RESET_ITEM, handleResetItem)\n  yield takeLatest(DUPLICATE_ITEM, handleDuplicateItem)\n  yield takeLatest(DELETE_ITEM, handleDeleteItem)\n  yield takeLatest(SET_GROUND, handleSetGround)\n  yield takeLatest(FIX_LEGACY_NAMESPACES_REQUEST, handleFixLegacyNamespacesRequest)\n  yield takeLatest(SYNC_SCENE_ASSETS_REQUEST, handleSyncSceneAssetsAction)\n  yield takeLatest(APPLY_LAYOUT, handleApplyLayout)\n  yield takeLatest(SET_SCRIPT_VALUES, handleSetScriptParameters)\n}\n\nfunction* handleAddItem(action: AddItemAction) {\n  const isEditorReady: boolean = yield select(isReady)\n\n  if (!isEditorReady) {\n    yield take(SET_EDITOR_READY)\n  }\n\n  const scene: Scene = yield select(getCurrentScene)\n  if (!scene) return\n\n  let shapeId: string | null\n  let scriptId: string | null = null\n  let { position } = action.payload\n  const { asset } = action.payload\n  const transformId = uuidv4()\n  const newComponents = { ...scene.components }\n\n  if (!position) {\n    position = yield call(editorWindow.editor.getCameraTarget)\n    position!.y = 0\n  }\n\n  if (asset.assetPackId === COLLECTIBLE_ASSET_PACK_ID) {\n    const collectibles: ReturnType<typeof getCollectiblesByURL> = yield select(getCollectiblesByURL)\n    const collectible = collectibles[asset.model]\n    shapeId = collectible ? collectibles[asset.model].id : null\n\n    if (!shapeId) {\n      shapeId = uuidv4()\n      newComponents[shapeId] = {\n        id: shapeId,\n        type: ComponentType.NFTShape,\n        data: {\n          url: asset.model\n        }\n      }\n    }\n\n    position = { ...position!, y: 1.72 }\n  } else {\n    const gltfs: ReturnType<typeof getGLTFsByAssetId> = yield select(getGLTFsByAssetId)\n    const gltf = gltfs[asset.id]\n    shapeId = gltf ? gltf.id : null\n\n    if (!shapeId) {\n      shapeId = uuidv4()\n      newComponents[shapeId] = {\n        id: shapeId,\n        type: ComponentType.GLTFShape,\n        data: {\n          assetId: asset.id\n        }\n      } as ComponentDefinition<ComponentType.GLTFShape>\n    }\n  }\n\n  const bounds: ReturnType<typeof getCurrentBounds> = yield select(getCurrentBounds)\n  if (bounds) {\n    position = snapToBounds(position!, bounds)\n  }\n\n  position = snapToGrid(position!)\n\n  newComponents[transformId] = {\n    id: transformId,\n    type: ComponentType.Transform,\n    data: {\n      position,\n      rotation: { x: 0, y: 0, z: 0, w: 1 },\n      scale: { x: 1, y: 1, z: 1 }\n    }\n  } as ComponentDefinition<ComponentType.Transform>\n\n  const scriptPath = Object.keys(asset.contents).find(path => path.endsWith('.js'))\n  if (scriptPath) {\n    scriptId = uuidv4()\n\n    newComponents[scriptId] = {\n      id: scriptId,\n      type: ComponentType.Script,\n      data: {\n        assetId: asset.id,\n        src: asset.contents[scriptPath],\n        values: {}\n      }\n    } as ComponentDefinition<ComponentType.Script>\n  }\n\n  const newEntities = { ...scene.entities }\n  const entityId = uuidv4()\n  const entityComponents = [transformId, shapeId]\n  if (scriptId) {\n    // Scripts components must go first\n    entityComponents.unshift(scriptId)\n  }\n  const newScene = { ...scene, components: newComponents, entities: newEntities }\n  const assets: DataByKey<Asset> = yield select(getAssets)\n  const entityName = getEntityName(newScene, entityComponents, assets)\n  newEntities[entityId] = { id: entityId, components: entityComponents, name: entityName }\n  newScene.assets[asset.id] = asset\n\n  if (scriptId) {\n    const assets: Record<string, Asset> = yield select(getAssetsByEntityName)\n    const comp = newScene.components[scriptId] as ComponentDefinition<ComponentType.Script>\n    comp.data.values = getDefaultValues(entityName, asset.parameters, assets)\n  }\n\n  yield put(setSelectedEntities([])) // deselect all currently selected entities\n  yield put(provisionScene(newScene))\n  yield delay(500) // gotta wait for the webworker to process the updateEditor action\n\n  // wait for entity to finish loading\n  while (editorWindow.editor.getLoadingEntities() !== null && (editorWindow.editor.getLoadingEntities() as string[]).includes(entityId)) {\n    yield delay(200)\n  }\n  yield put(setSelectedEntities([entityId]))\n}\n\nfunction* handleUpdateTransfrom(action: UpdateTransfromAction) {\n  const scene: Scene = yield select(getCurrentScene)\n  if (!scene) return\n\n  const { components } = action.payload\n  const newComponents: Scene['components'] = { ...scene.components }\n\n  for (let componentData of components) {\n    if (componentData.componentId in scene.components) {\n      newComponents[componentData.componentId] = {\n        ...newComponents[componentData.componentId],\n        data: {\n          position: {\n            ...componentData.data.position\n          },\n          rotation: {\n            ...componentData.data.rotation\n          },\n          scale: {\n            ...componentData.data.scale\n          }\n        }\n      }\n    }\n  }\n  yield put(provisionScene({ ...scene, components: newComponents }))\n}\n\nfunction* handleResetItem(_: ResetItemAction) {\n  const scene: Scene = yield select(getCurrentScene)\n  if (!scene) return\n\n  const selectedEntityIds: ReturnType<typeof getSelectedEntityIds> = yield select(getSelectedEntityIds)\n  if (selectedEntityIds.length === 0) return\n\n  const components: ReturnType<typeof getEntityComponentsByType> = yield select(getEntityComponentsByType)\n\n  const newComponents = {\n    ...scene.components\n  }\n\n  for (let entityId of selectedEntityIds) {\n    const transform = components[entityId][ComponentType.Transform] as ComponentDefinition<ComponentType.Transform>\n    if (transform) {\n      newComponents[transform.id] = {\n        ...transform,\n        data: {\n          ...transform.data,\n          position: snapToGrid(transform.data.position),\n          rotation: { x: 0, y: 0, z: 0, w: 1 },\n          scale: { x: 1, y: 1, z: 1 }\n        }\n      }\n    }\n  }\n\n  yield put(provisionScene({ ...scene, components: newComponents }))\n}\n\nfunction* handleDuplicateItem(_: DuplicateItemAction) {\n  const assets: DataByKey<Asset> = yield select(getAssets)\n  const scene: Scene = yield select(getCurrentScene)\n  if (!scene) return\n\n  const selectedEntityIds: ReturnType<typeof getSelectedEntityIds> = yield select(getSelectedEntityIds)\n  if (selectedEntityIds.length === 0) return\n\n  const newComponents = { ...scene.components }\n  const newEntities = { ...scene.entities }\n  const newEntityIds: string[] = []\n\n  for (let entityId of selectedEntityIds) {\n    const entityComponents = []\n    const shapes: Record<string, ShapeComponent> = yield select(getShapesByEntityId)\n    const shape = shapes[entityId]\n\n    entityComponents.push(shape.id)\n\n    if (shape && shape.type === ComponentType.NFTShape) continue\n\n    const components: ReturnType<typeof getEntityComponentsByType> = yield select(getEntityComponentsByType)\n    const transform = components[entityId][ComponentType.Transform] as ComponentDefinition<ComponentType.Transform>\n    const script = components[entityId][ComponentType.Script] as ComponentDefinition<ComponentType.Script>\n\n    if (!shape || !transform) continue\n\n    // copy transform\n    const {\n      data: { position, rotation, scale }\n    } = transform\n    const transformId = uuidv4()\n    newComponents[transformId] = {\n      id: transformId,\n      type: ComponentType.Transform,\n      data: {\n        position: { ...position },\n        rotation: { ...rotation },\n        scale: { ...scale }\n      }\n    }\n    entityComponents.push(transformId)\n\n    const newEntityId = uuidv4()\n    // WARNING: we use entityComponents here because we can already generate the name which will be used for the Script component.\n    // This means that we use components before we are done creating all of them.\n    const entityName = getEntityName({ ...scene, components: newComponents, entities: newEntities }, entityComponents, assets)\n\n    newEntities[newEntityId] = { id: newEntityId, components: entityComponents, name: entityName }\n    newEntityIds.push(newEntityId)\n\n    // copy script\n    if (script) {\n      const {\n        data: { values: parameters, assetId }\n      } = script\n      const scriptId = uuidv4()\n      const values = JSON.parse(JSON.stringify(parameters))\n\n      renameEntity(assets[assetId].parameters, values, scene.entities[entityId].name, entityName)\n\n      newComponents[scriptId] = {\n        id: scriptId,\n        type: ComponentType.Script,\n        data: {\n          values,\n          assetId\n        }\n      } as ComponentDefinition<ComponentType.Script>\n\n      // Scripts components must go first\n      entityComponents.unshift(scriptId)\n    }\n  }\n\n  yield put(setSelectedEntities([]))\n  yield put(provisionScene({ ...scene, components: newComponents, entities: newEntities }))\n  yield delay(300) // gotta wait for the webworker to process the updateEditor action\n\n  // wait for entities to finish loading\n  while (\n    editorWindow.editor.getLoadingEntities() !== null &&\n    (editorWindow.editor.getLoadingEntities() as string[]).some(id => newEntityIds.includes(id))\n  ) {\n    yield delay(200)\n  }\n\n  yield put(setSelectedEntities(newEntityIds))\n}\n\nfunction* handleDeleteItem(_: DeleteItemAction) {\n  const scene: Scene = yield select(getCurrentScene)\n  if (!scene) return\n\n  const selectedEntityIds: ReturnType<typeof getSelectedEntityIds> = yield select(getSelectedEntityIds)\n  if (selectedEntityIds.length === 0) return\n\n  const newComponents = { ...scene.components }\n  const newEntities = { ...scene.entities }\n  const newAssets = { ...scene.assets }\n\n  for (let entityId of selectedEntityIds) {\n    const componentsByEntityId: Record<string, AnyComponent[]> = yield select(getComponentsByEntityId)\n    const entityComponents = componentsByEntityId[entityId]\n    const idsToDelete = entityComponents ? entityComponents.filter(component => !!component).map(component => component.id) : []\n\n    delete newEntities[entityId]\n\n    for (const componentId of idsToDelete) {\n      // check if commponentId is not used by other entities\n      if (Object.values(newEntities).some(entity => entity.components.some(id => componentId === id))) {\n        continue\n      }\n      delete newComponents[componentId]\n    }\n\n    for (let componentId in newComponents) {\n      const component = newComponents[componentId] as ComponentDefinition<ComponentType.Script>\n      if (component.type === ComponentType.Script) {\n        removeEntityReferences(newAssets[component.data.assetId].parameters, component.data.values, scene.entities[entityId].name)\n      }\n    }\n  }\n\n  // TODO: refactor\n  // gather all the models used by gltf shapes\n  const ids = Object.values(newComponents).reduce((set, component) => {\n    if (component.type === ComponentType.GLTFShape || component.type === ComponentType.Script) {\n      const gltfShape = component as ComponentDefinition<ComponentType.GLTFShape>\n      set.add(gltfShape.data.assetId)\n    }\n    return set\n  }, new Set<string>())\n\n  // remove assets that are not in the set\n  for (const asset of Object.values(newAssets)) {\n    if (ids.has(asset.id)) {\n      continue\n    }\n    delete newAssets[asset.id]\n  }\n\n  yield put(setSelectedEntities([]))\n\n  yield put(provisionScene({ ...scene, components: newComponents, entities: newEntities, assets: newAssets }))\n}\n\nfunction* handleSetGround(action: SetGroundAction) {\n  const { asset, projectId } = action.payload\n  const projects: ReturnType<typeof getProjects> = yield select(getProjects)\n  const currentProject = projects[projectId]\n  if (!currentProject) return\n\n  const scenes: ReturnType<typeof getScenes> = yield select(getScenes)\n  const scene = scenes[currentProject.sceneId]\n  if (!scene) return\n\n  const { rows, cols } = currentProject.layout\n\n  if (asset) {\n    yield applyGround(scene, rows, cols, asset)\n  }\n}\n\nfunction* handleFixLegacyNamespacesRequest(action: FixLegacyNamespacesRequestAction) {\n  /*  The purspose of this saga is to fix old namespaces in gltshapes that used to be asset pack ids,\n      and change them for the asset id instead.\n\n      For gltf shapes that don't have a corresponding asset, a dummy one will be created\n  */\n  const { scene } = action.payload\n  const newComponents: Record<string, ComponentDefinition<ComponentType.GLTFShape>> = {}\n  const newAssets: Record<string, Asset> = {}\n\n  // get asset packs\n  const assetPacks: ReturnType<typeof getAssetPacks> = yield select(getAssetPacks)\n\n  // get assets\n  const assets: ReturnType<typeof getAssets> = yield select(getAssets)\n\n  // gather all gltf shapes\n  const gltfShapes = Object.values(scene.components).filter(component => component.type === ComponentType.GLTFShape) as ComponentDefinition<\n    ComponentType.GLTFShape\n  >[]\n  for (const gltfShape of gltfShapes) {\n    const src = (gltfShape.data as any)['src']\n    // if it doesn't have src, we continue\n    if (!src) continue\n\n    // if the src looks like <uuid>/<model-url> then it's legacy\n    const legacyRegex = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}/ // check if the path starts with a UUID\n    const isLegacy = legacyRegex.test(src.split('/')[0])\n    if (isLegacy) {\n      const [assetPackId, ...rest] = src.split('/')\n      const model = rest.join('/')\n      const assetPack = assetPacks[assetPackId]\n      // if there's an asset pack, we look for the asset and fix the legacy componment\n      if (assetPack) {\n        const asset = assetPack.assets.map(assetId => assets[assetId]).find(asset => asset.model === model)\n        if (asset) {\n          const newGltfShape: ComponentDefinition<ComponentType.GLTFShape> = {\n            ...gltfShape,\n            data: { assetId: asset.id }\n          }\n          newComponents[newGltfShape.id] = newGltfShape\n          continue\n        }\n      }\n      // if there's no asset pack but there are mappings, we generate a dummy asset from the mappings\n      if ('mappings' in gltfShape.data) {\n        const contents: Record<string, string> = {}\n        // TODO: Type this correctly, mappings does not appear anywhere in ComponentDefinition\n        const mappings: Record<string, string> = (gltfShape.data as Record<string, any>)['mappings']\n        for (const namespacedPath of Object.keys(mappings)) {\n          const path = namespacedPath // remove the namespace\n            .split('/') // ['<uuid>', 'folder', 'Model.gltf']\n            .slice(1) // ['folder', 'Model.gltf']\n            .join('/') // 'folder/Model.gltf'\n          contents[path] = mappings[namespacedPath]\n        }\n        const id = uuidv4()\n        const newAsset: Asset = {\n          id,\n          model,\n          assetPackId,\n          contents,\n          name: 'Dummy',\n          script: null,\n          thumbnail: '',\n          tags: [],\n          category: 'decorations',\n          metrics: getMetrics(),\n          parameters: [],\n          actions: []\n        }\n        newAssets[id] = newAsset\n\n        const newGltfShape: ComponentDefinition<ComponentType.GLTFShape> = {\n          ...gltfShape,\n          data: {\n            ...gltfShape.data!,\n            assetId: newAsset.id\n          }\n        }\n        newComponents[newGltfShape.id] = newGltfShape\n      } else {\n        // noop\n      }\n    }\n  }\n\n  let fixedScene = scene\n  const hasUpdates = Object.keys(newComponents).length > 0\n  if (hasUpdates) {\n    fixedScene = {\n      ...scene,\n      assets: { ...scene.assets, ...newAssets },\n      components: { ...scene.components, ...newComponents }\n    }\n  }\n  yield put(fixLegacyNamespacesSuccess(fixedScene))\n}\n\nfunction* handleSyncSceneAssetsAction(action: SyncSceneAssetsRequestAction) {\n  const { scene } = action.payload\n\n  // assets that need to be updated in the scene\n  const updatedSceneAssets: Record<string, Asset> = {}\n  // assets that are present in the scene but not in the store\n  const missingSceneAssets: Record<string, Asset> = {}\n  // all assets in the store\n  const assets: ReturnType<typeof getAssets> = yield select(getAssets)\n\n  for (const component of Object.values(scene.components)) {\n    if (component.type === ComponentType.GLTFShape) {\n      const gltfShape = component as ComponentDefinition<ComponentType.GLTFShape>\n      const { assetId } = gltfShape.data\n      const storeAsset = assets[assetId]\n      if (storeAsset) {\n        updatedSceneAssets[storeAsset.id] = storeAsset\n      } else {\n        const sceneAsset = scene.assets[assetId]\n        if (sceneAsset) {\n          missingSceneAssets[sceneAsset.id] = {\n            ...sceneAsset,\n            assetPackId: 'dummy-asset-pack-id' // we change this so it won't show up in the sidebar\n          }\n        }\n      }\n    }\n  }\n\n  // generate new scene\n  const newScene = { ...scene, assets: { ...scene.assets, ...updatedSceneAssets } }\n\n  // load scene assets into redux store\n  yield put(loadAssets(missingSceneAssets))\n\n  // update the scene assets\n  yield put(syncSceneAssetsSuccess(newScene))\n}\n\nfunction* handleApplyLayout(action: ApplyLayoutAction) {\n  const { project } = action.payload\n  const { rows, cols } = project.layout\n  const scenes: ReturnType<typeof getScenes> = yield select(getScenes)\n  const scene = scenes[project.sceneId]\n\n  if (scene && scene.ground) {\n    const groundId = scene.ground.assetId\n    const assets: ReturnType<typeof getGroundAssets> = yield select(getGroundAssets)\n    const ground = assets[groundId]\n    yield applyGround(scene, rows, cols, ground)\n  }\n}\n\nfunction* applyGround(scene: Scene, rows: number, cols: number, asset: Asset) {\n  const assets: DataByKey<Asset> = yield select(getAssets)\n  let sceneComponents = { ...scene.components }\n  let sceneAssets = { ...scene.assets }\n  let entities = cloneEntities(scene)\n  let gltfId: string = uuidv4()\n  if (asset) {\n    const gltfs: ReturnType<typeof getGLTFsByAssetId> = yield select(getGLTFsByAssetId)\n    const gltf = gltfs[asset.id]\n    const foundId = gltf ? gltf.id : null\n\n    // Create the Shape component if necessary\n    if (!foundId) {\n      sceneComponents[gltfId] = {\n        id: gltfId,\n        type: ComponentType.GLTFShape,\n        data: {\n          assetId: asset.id\n        }\n      }\n    } else {\n      gltfId = foundId\n    }\n\n    if (scene.ground) {\n      entities = filterEntitiesWithComponent(scene.ground.componentId, entities)\n    }\n\n    for (let j = 0; j < cols; j++) {\n      for (let i = 0; i < rows; i++) {\n        const entityId = uuidv4()\n        const transformId = uuidv4()\n\n        sceneComponents[transformId] = {\n          id: transformId,\n          type: ComponentType.Transform,\n          data: {\n            position: { x: i * PARCEL_SIZE + PARCEL_SIZE / 2, y: 0, z: j * PARCEL_SIZE + PARCEL_SIZE / 2 },\n            rotation: { x: 0, y: 0, z: 0, w: 1 },\n            scale: { x: 1, y: 1, z: 1 }\n          }\n        }\n\n        const newComponents = [gltfId, transformId]\n\n        entities[entityId] = {\n          id: entityId,\n          components: newComponents,\n          disableGizmos: true,\n          name: getEntityName({ ...scene, entities }, newComponents, assets)\n        }\n      }\n    }\n  } else if (scene.ground) {\n    entities = filterEntitiesWithComponent(scene.ground.componentId, entities)\n  }\n\n  const ground = asset ? { assetId: asset.id, componentId: gltfId } : null\n\n  // remove unused components\n  for (const component of Object.values(sceneComponents)) {\n    if (!Object.values(entities).some(entity => entity.components.some(componentId => componentId === component.id))) {\n      delete sceneComponents[component.id]\n    }\n  }\n\n  // update assets removing the old ground and adding the new one\n  if (scene.ground) {\n    delete sceneAssets[scene.ground.assetId]\n  }\n  if (ground) {\n    sceneAssets[ground.assetId] = asset\n  }\n\n  yield put(provisionScene({ ...scene, components: sceneComponents, entities, ground, assets: sceneAssets }))\n}\n\nfunction* handleSetScriptParameters(action: SetScriptValuesAction) {\n  const { entityId, values } = action.payload\n  const scene: Scene | null = yield select(getCurrentScene)\n\n  if (scene) {\n    const components = scene.entities[entityId].components\n    const componentId = components.find(id => scene.components[id].type === ComponentType.Script)\n\n    if (componentId) {\n      const newScene: Scene = {\n        ...scene,\n        components: {\n          ...scene.components,\n          [componentId]: {\n            ...scene.components[componentId],\n            data: {\n              ...scene.components[componentId].data,\n              values: {\n                ...(scene.components[componentId] as ComponentDefinition<ComponentType.Script>).data.values,\n                ...values\n              }\n            }\n          }\n        }\n      }\n      yield put(provisionScene(newScene))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}