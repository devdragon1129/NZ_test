{"ast":null,"code":"/**\r\n * Class for storing data to local storage if available or in-memory storage otherwise\r\n */\nvar DataStorage =\n/** @class */\nfunction () {\n  function DataStorage() {}\n\n  DataStorage._GetStorage = function () {\n    try {\n      localStorage.setItem(\"test\", \"\");\n      localStorage.removeItem(\"test\");\n      return localStorage;\n    } catch (_a) {\n      var inMemoryStorage_1 = {};\n      return {\n        getItem: function getItem(key) {\n          var value = inMemoryStorage_1[key];\n          return value === undefined ? null : value;\n        },\n        setItem: function setItem(key, value) {\n          inMemoryStorage_1[key] = value;\n        }\n      };\n    }\n  };\n  /**\r\n   * Reads a string from the data storage\r\n   * @param key The key to read\r\n   * @param defaultValue The value if the key doesn't exist\r\n   * @returns The string value\r\n   */\n\n\n  DataStorage.ReadString = function (key, defaultValue) {\n    var value = this._Storage.getItem(key);\n\n    return value !== null ? value : defaultValue;\n  };\n  /**\r\n   * Writes a string to the data storage\r\n   * @param key The key to write\r\n   * @param value The value to write\r\n   */\n\n\n  DataStorage.WriteString = function (key, value) {\n    this._Storage.setItem(key, value);\n  };\n  /**\r\n   * Reads a boolean from the data storage\r\n   * @param key The key to read\r\n   * @param defaultValue The value if the key doesn't exist\r\n   * @returns The boolean value\r\n   */\n\n\n  DataStorage.ReadBoolean = function (key, defaultValue) {\n    var value = this._Storage.getItem(key);\n\n    return value !== null ? value === \"true\" : defaultValue;\n  };\n  /**\r\n   * Writes a boolean to the data storage\r\n   * @param key The key to write\r\n   * @param value The value to write\r\n   */\n\n\n  DataStorage.WriteBoolean = function (key, value) {\n    this._Storage.setItem(key, value ? \"true\" : \"false\");\n  };\n  /**\r\n   * Reads a number from the data storage\r\n   * @param key The key to read\r\n   * @param defaultValue The value if the key doesn't exist\r\n   * @returns The number value\r\n   */\n\n\n  DataStorage.ReadNumber = function (key, defaultValue) {\n    var value = this._Storage.getItem(key);\n\n    return value !== null ? parseFloat(value) : defaultValue;\n  };\n  /**\r\n   * Writes a number to the data storage\r\n   * @param key The key to write\r\n   * @param value The value to write\r\n   */\n\n\n  DataStorage.WriteNumber = function (key, value) {\n    this._Storage.setItem(key, value.toString());\n  };\n\n  DataStorage._Storage = DataStorage._GetStorage();\n  return DataStorage;\n}();\n\nexport { DataStorage };","map":null,"metadata":{},"sourceType":"module"}