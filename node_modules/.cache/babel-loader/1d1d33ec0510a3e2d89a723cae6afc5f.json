{"ast":null,"code":"import _toConsumableArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectWithoutProperties from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(deploymentSaga);\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Authenticator } from 'dcl-crypto';\nimport { EntityType } from 'dcl-catalyst-commons';\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { takeLatest, put, select, call, take, all } from 'redux-saga/effects';\nimport { getData as getDeployments } from 'modules/deployment/selectors';\nimport { getCurrentProject, getData as getProjects } from 'modules/project/selectors';\nimport { store } from 'modules/common/store';\nimport { getMedia } from 'modules/media/selectors';\nimport { createFiles, EXPORT_PATH } from 'modules/project/export';\nimport { recordMediaRequest, RECORD_MEDIA_SUCCESS } from 'modules/media/actions';\nimport { takeScreenshot } from 'modules/editor/actions';\nimport { objectURLToBlob } from 'modules/media/utils';\nimport { getSceneByProjectId } from 'modules/scene/utils';\nimport { getPreviewUrl } from 'lib/api/builder';\nimport { getIdentity } from 'modules/identity/utils';\nimport { isLoggedIn } from 'modules/identity/selectors';\nimport { getName } from 'modules/profile/selectors';\nimport { FETCH_LANDS_SUCCESS } from 'modules/land/actions';\nimport { LandType } from 'modules/land/types';\nimport { coordsToId, idToCoords } from 'modules/land/utils';\nimport { getCoordsByEstateId } from 'modules/land/selectors';\nimport { DEPLOY_TO_POOL_REQUEST, deployToPoolFailure, deployToPoolSuccess, setProgress, DEPLOY_TO_LAND_REQUEST, deployToLandFailure, deployToLandSuccess, CLEAR_DEPLOYMENT_REQUEST, clearDeploymentFailure, clearDeploymentSuccess, FETCH_DEPLOYMENTS_REQUEST, fetchDeploymentsRequest, fetchDeploymentsSuccess, fetchDeploymentsFailure } from './actions';\nimport { ProgressStage } from './types';\nimport { makeContentFiles } from './contentUtils';\nimport { getEmptyDeployment, getThumbnail, UNPUBLISHED_PROJECT_ID } from './utils';\n\nvar handleProgress = function handleProgress(type) {\n  return function (args) {\n    var loaded = args.loaded,\n        total = args.total;\n    var progress = loaded / total * 100 | 0;\n    store.dispatch(setProgress(type, progress));\n  };\n};\n\nexport function deploymentSaga(builder, catalystClient) {\n  var _marked, _marked2, _marked3, _marked4, _marked5, handleDeployToPoolRequest, handleDeployToLandRequest, handleClearDeploymentRequest, handleFetchLandsSuccess, handleFetchDeploymentsRequest;\n\n  return _regeneratorRuntime.wrap(function deploymentSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          handleFetchDeploymentsRequest = function _handleFetchDeploymen(action) {\n            var coords, entities, deployments, _iterator3, _step3, entity, id, _idToCoords, _idToCoords2, x, y, content, definition, name, thumbnail, placement, projectId, layout, _definition$scene, base, parcels, isEmpty;\n\n            return _regeneratorRuntime.wrap(function handleFetchDeploymentsRequest$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    coords = action.payload.coords;\n                    _context5.prev = 1;\n                    entities = [];\n\n                    if (!(coords.length > 0)) {\n                      _context5.next = 7;\n                      break;\n                    }\n\n                    _context5.next = 6;\n                    return call([catalystClient, 'fetchEntitiesByPointers'], EntityType.SCENE, coords);\n\n                  case 6:\n                    entities = _context5.sent;\n\n                  case 7:\n                    deployments = new Map();\n                    _iterator3 = _createForOfIteratorHelper(entities.sort(function (a, b) {\n                      return a.timestamp > b.timestamp ? 1 : -1;\n                    }));\n\n                    try {\n                      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                        entity = _step3.value;\n                        id = entity.pointers[0];\n\n                        if (id) {\n                          _idToCoords = idToCoords(id), _idToCoords2 = _slicedToArray(_idToCoords, 2), x = _idToCoords2[0], y = _idToCoords2[1];\n                          content = entity.content;\n                          definition = entity.metadata;\n                          name = 'Untitled Scene';\n\n                          if (definition && definition.display && definition.display.title && definition.display.title !== 'interactive-text') {\n                            name = definition.display.title;\n                          }\n\n                          thumbnail = getThumbnail(definition, content);\n                          placement = {\n                            point: {\n                              x: x,\n                              y: y\n                            },\n                            rotation: definition && definition.source && definition.source.rotation || 'north'\n                          };\n                          projectId = definition && definition.source && definition.source.projectId || null;\n                          layout = definition && definition.source && definition.source.layout || null;\n                          _definition$scene = definition.scene, base = _definition$scene.base, parcels = _definition$scene.parcels;\n                          isEmpty = !!(definition && definition.source && definition.source.isEmpty);\n\n                          if (!isEmpty) {\n                            deployments.set(id, {\n                              id: entity.id,\n                              timestamp: entity.timestamp,\n                              projectId: projectId,\n                              name: name,\n                              thumbnail: thumbnail,\n                              placement: placement,\n                              owner: definition.owner,\n                              layout: layout,\n                              base: base,\n                              parcels: parcels\n                            });\n                          } else {\n                            deployments.delete(id);\n                          }\n                        }\n                      }\n                    } catch (err) {\n                      _iterator3.e(err);\n                    } finally {\n                      _iterator3.f();\n                    }\n\n                    _context5.next = 12;\n                    return put(fetchDeploymentsSuccess(coords, Array.from(deployments.values())));\n\n                  case 12:\n                    _context5.next = 18;\n                    break;\n\n                  case 14:\n                    _context5.prev = 14;\n                    _context5.t0 = _context5[\"catch\"](1);\n                    _context5.next = 18;\n                    return put(fetchDeploymentsFailure(coords, _context5.t0.message));\n\n                  case 18:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _marked5, null, [[1, 14]]);\n          };\n\n          handleFetchLandsSuccess = function _handleFetchLandsSucc(action) {\n            var coords, _iterator, _step, land, coordsByEstateId, _iterator2, _step2, coord;\n\n            return _regeneratorRuntime.wrap(function handleFetchLandsSuccess$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    coords = [];\n                    _iterator = _createForOfIteratorHelper(action.payload.lands);\n                    _context4.prev = 2;\n\n                    _iterator.s();\n\n                  case 4:\n                    if ((_step = _iterator.n()).done) {\n                      _context4.next = 17;\n                      break;\n                    }\n\n                    land = _step.value;\n                    _context4.t0 = land.type;\n                    _context4.next = _context4.t0 === LandType.PARCEL ? 9 : _context4.t0 === LandType.ESTATE ? 11 : 15;\n                    break;\n\n                  case 9:\n                    coords.push(coordsToId(land.x, land.y));\n                    return _context4.abrupt(\"break\", 15);\n\n                  case 11:\n                    _context4.next = 13;\n                    return select(getCoordsByEstateId);\n\n                  case 13:\n                    coordsByEstateId = _context4.sent;\n\n                    if (land.id in coordsByEstateId) {\n                      _iterator2 = _createForOfIteratorHelper(coordsByEstateId[land.id]);\n\n                      try {\n                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                          coord = _step2.value;\n                          coords.push(coord);\n                        }\n                      } catch (err) {\n                        _iterator2.e(err);\n                      } finally {\n                        _iterator2.f();\n                      }\n                    }\n\n                  case 15:\n                    _context4.next = 4;\n                    break;\n\n                  case 17:\n                    _context4.next = 22;\n                    break;\n\n                  case 19:\n                    _context4.prev = 19;\n                    _context4.t1 = _context4[\"catch\"](2);\n\n                    _iterator.e(_context4.t1);\n\n                  case 22:\n                    _context4.prev = 22;\n\n                    _iterator.f();\n\n                    return _context4.finish(22);\n\n                  case 25:\n                    _context4.next = 27;\n                    return put(fetchDeploymentsRequest(coords));\n\n                  case 27:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _marked4, null, [[2, 19, 22, 25]]);\n          };\n\n          handleClearDeploymentRequest = function _handleClearDeploymen(action) {\n            var deploymentId, deployments, deployment, identity, placement, _getEmptyDeployment, _getEmptyDeployment2, emptyProject, emptyScene, files, contentFiles, sceneDefinition, _yield$call2, entityId, hashedFiles, authChain;\n\n            return _regeneratorRuntime.wrap(function handleClearDeploymentRequest$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    deploymentId = action.payload.deploymentId;\n                    _context3.next = 3;\n                    return select(getDeployments);\n\n                  case 3:\n                    deployments = _context3.sent;\n                    deployment = deployments[deploymentId];\n\n                    if (deployment) {\n                      _context3.next = 9;\n                      break;\n                    }\n\n                    _context3.next = 8;\n                    return put(deployToLandFailure('Unable to Publish: Invalid deployment'));\n\n                  case 8:\n                    return _context3.abrupt(\"return\");\n\n                  case 9:\n                    _context3.next = 11;\n                    return getIdentity();\n\n                  case 11:\n                    identity = _context3.sent;\n\n                    if (identity) {\n                      _context3.next = 16;\n                      break;\n                    }\n\n                    _context3.next = 15;\n                    return put(deployToLandFailure('Unable to Publish: Invalid identity'));\n\n                  case 15:\n                    return _context3.abrupt(\"return\");\n\n                  case 16:\n                    _context3.prev = 16;\n                    placement = deployment.placement;\n                    _getEmptyDeployment = getEmptyDeployment(deployment.projectId || UNPUBLISHED_PROJECT_ID), _getEmptyDeployment2 = _slicedToArray(_getEmptyDeployment, 2), emptyProject = _getEmptyDeployment2[0], emptyScene = _getEmptyDeployment2[1];\n                    _context3.next = 21;\n                    return call(createFiles, {\n                      project: emptyProject,\n                      scene: emptyScene,\n                      point: placement.point,\n                      rotation: placement.rotation,\n                      thumbnail: null,\n                      author: null,\n                      isDeploy: true,\n                      isEmpty: true,\n                      onProgress: handleProgress(ProgressStage.CREATE_FILES)\n                    });\n\n                  case 21:\n                    files = _context3.sent;\n                    _context3.next = 24;\n                    return call(makeContentFiles, files);\n\n                  case 24:\n                    contentFiles = _context3.sent;\n                    sceneDefinition = JSON.parse(files[EXPORT_PATH.SCENE_FILE]);\n                    _context3.next = 28;\n                    return call([catalystClient, 'buildEntity'], {\n                      type: EntityType.SCENE,\n                      pointers: _toConsumableArray(sceneDefinition.scene.parcels),\n                      metadata: sceneDefinition,\n                      files: contentFiles\n                    });\n\n                  case 28:\n                    _yield$call2 = _context3.sent;\n                    entityId = _yield$call2.entityId;\n                    hashedFiles = _yield$call2.files;\n                    authChain = Authenticator.signPayload(identity, entityId);\n                    _context3.next = 34;\n                    return call([catalystClient, 'deployEntity'], {\n                      entityId: entityId,\n                      files: hashedFiles,\n                      authChain: authChain\n                    });\n\n                  case 34:\n                    _context3.next = 36;\n                    return put(clearDeploymentSuccess(deploymentId));\n\n                  case 36:\n                    _context3.next = 42;\n                    break;\n\n                  case 38:\n                    _context3.prev = 38;\n                    _context3.t0 = _context3[\"catch\"](16);\n                    _context3.next = 42;\n                    return put(clearDeploymentFailure(deploymentId, _context3.t0.message));\n\n                  case 42:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _marked3, null, [[16, 38]]);\n          };\n\n          handleDeployToLandRequest = function _handleDeployToLandRe(action) {\n            var _action$payload2, placement, projectId, overrideDeploymentId, projects, project, scene, identity, author, previewUrl, isLoggedInResult, media, _yield$all, _yield$all2, north, east, south, west, thumbnail, files, contentFiles, sceneDefinition, _yield$call, entityId, hashedFiles, authChain, deployment;\n\n            return _regeneratorRuntime.wrap(function handleDeployToLandRequest$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _action$payload2 = action.payload, placement = _action$payload2.placement, projectId = _action$payload2.projectId, overrideDeploymentId = _action$payload2.overrideDeploymentId;\n                    _context2.next = 3;\n                    return select(getProjects);\n\n                  case 3:\n                    projects = _context2.sent;\n                    project = projects[projectId];\n\n                    if (project) {\n                      _context2.next = 9;\n                      break;\n                    }\n\n                    _context2.next = 8;\n                    return put(deployToLandFailure('Unable to Publish: Invalid project'));\n\n                  case 8:\n                    return _context2.abrupt(\"return\");\n\n                  case 9:\n                    _context2.next = 11;\n                    return getSceneByProjectId(project.id);\n\n                  case 11:\n                    scene = _context2.sent;\n\n                    if (scene) {\n                      _context2.next = 16;\n                      break;\n                    }\n\n                    _context2.next = 15;\n                    return put(deployToLandFailure('Unable to Publish: Invalid scene'));\n\n                  case 15:\n                    return _context2.abrupt(\"return\");\n\n                  case 16:\n                    _context2.next = 18;\n                    return getIdentity();\n\n                  case 18:\n                    identity = _context2.sent;\n\n                    if (identity) {\n                      _context2.next = 23;\n                      break;\n                    }\n\n                    _context2.next = 22;\n                    return put(deployToLandFailure('Unable to Publish: Invalid identity'));\n\n                  case 22:\n                    return _context2.abrupt(\"return\");\n\n                  case 23:\n                    _context2.next = 25;\n                    return select(getName);\n\n                  case 25:\n                    author = _context2.sent;\n                    // upload media if logged in\n                    previewUrl = null;\n                    _context2.next = 29;\n                    return select(isLoggedIn);\n\n                  case 29:\n                    isLoggedInResult = _context2.sent;\n\n                    if (!isLoggedInResult) {\n                      _context2.next = 50;\n                      break;\n                    }\n\n                    _context2.next = 33;\n                    return select(getMedia);\n\n                  case 33:\n                    media = _context2.sent;\n\n                    if (!media) {\n                      _context2.next = 49;\n                      break;\n                    }\n\n                    _context2.next = 37;\n                    return all([call(objectURLToBlob, media.north), call(objectURLToBlob, media.east), call(objectURLToBlob, media.south), call(objectURLToBlob, media.west), call(objectURLToBlob, media.preview)]);\n\n                  case 37:\n                    _yield$all = _context2.sent;\n                    _yield$all2 = _slicedToArray(_yield$all, 5);\n                    north = _yield$all2[0];\n                    east = _yield$all2[1];\n                    south = _yield$all2[2];\n                    west = _yield$all2[3];\n                    thumbnail = _yield$all2[4];\n                    _context2.next = 46;\n                    return call([builder, 'uploadMedia'], project.id, thumbnail, {\n                      north: north,\n                      east: east,\n                      south: south,\n                      west: west\n                    }, handleProgress(ProgressStage.UPLOAD_RECORDING));\n\n                  case 46:\n                    previewUrl = getPreviewUrl(project.id);\n                    _context2.next = 50;\n                    break;\n\n                  case 49:\n                    console.warn('Failed to upload scene preview');\n\n                  case 50:\n                    _context2.prev = 50;\n                    _context2.next = 53;\n                    return call(createFiles, {\n                      project: project,\n                      scene: scene,\n                      point: placement.point,\n                      rotation: placement.rotation,\n                      author: author,\n                      thumbnail: previewUrl,\n                      isDeploy: true,\n                      onProgress: handleProgress(ProgressStage.CREATE_FILES)\n                    });\n\n                  case 53:\n                    files = _context2.sent;\n                    _context2.next = 56;\n                    return call(makeContentFiles, files);\n\n                  case 56:\n                    contentFiles = _context2.sent;\n                    // Remove the old communications property if it exists\n                    sceneDefinition = JSON.parse(files[EXPORT_PATH.SCENE_FILE]);\n                    _context2.next = 60;\n                    return call([catalystClient, 'buildEntity'], {\n                      type: EntityType.SCENE,\n                      pointers: _toConsumableArray(sceneDefinition.scene.parcels),\n                      metadata: sceneDefinition,\n                      files: contentFiles\n                    });\n\n                  case 60:\n                    _yield$call = _context2.sent;\n                    entityId = _yield$call.entityId;\n                    hashedFiles = _yield$call.files;\n                    authChain = Authenticator.signPayload(identity, entityId);\n                    _context2.next = 66;\n                    return call([catalystClient, 'deployEntity'], {\n                      entityId: entityId,\n                      files: hashedFiles,\n                      authChain: authChain\n                    });\n\n                  case 66:\n                    _context2.t0 = entityId;\n                    _context2.t1 = placement;\n                    _context2.next = 70;\n                    return select(getAddress) || '';\n\n                  case 70:\n                    _context2.t2 = _context2.sent;\n                    _context2.t3 = +new Date();\n                    _context2.t4 = project.layout;\n                    _context2.t5 = project.title;\n                    _context2.t6 = previewUrl;\n                    _context2.t7 = project.id;\n                    _context2.t8 = sceneDefinition.scene.base;\n                    _context2.t9 = sceneDefinition.scene.parcels;\n                    deployment = {\n                      id: _context2.t0,\n                      placement: _context2.t1,\n                      owner: _context2.t2,\n                      timestamp: _context2.t3,\n                      layout: _context2.t4,\n                      name: _context2.t5,\n                      thumbnail: _context2.t6,\n                      projectId: _context2.t7,\n                      base: _context2.t8,\n                      parcels: _context2.t9\n                    };\n                    _context2.next = 81;\n                    return put(deployToLandSuccess(deployment, overrideDeploymentId));\n\n                  case 81:\n                    _context2.next = 87;\n                    break;\n\n                  case 83:\n                    _context2.prev = 83;\n                    _context2.t10 = _context2[\"catch\"](50);\n                    _context2.next = 87;\n                    return put(deployToLandFailure(_context2.t10.message.split('\\n')[0]));\n\n                  case 87:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _marked2, null, [[50, 83]]);\n          };\n\n          handleDeployToPoolRequest = function _handleDeployToPoolRe(action) {\n            var _action$payload, projectId, additionalInfo, rawProject, _thumbnail, project, successAction, _successAction$payloa, north, east, south, west, preview;\n\n            return _regeneratorRuntime.wrap(function handleDeployToPoolRequest$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _action$payload = action.payload, projectId = _action$payload.projectId, additionalInfo = _action$payload.additionalInfo;\n                    _context.next = 3;\n                    return select(getCurrentProject);\n\n                  case 3:\n                    rawProject = _context.sent;\n\n                    if (!(rawProject && rawProject.id === projectId)) {\n                      _context.next = 41;\n                      break;\n                    }\n\n                    _thumbnail = rawProject.thumbnail, project = _objectWithoutProperties(rawProject, [\"thumbnail\"]);\n                    _context.prev = 6;\n                    _context.next = 9;\n                    return put(setProgress(ProgressStage.NONE, 1));\n\n                  case 9:\n                    _context.next = 11;\n                    return put(recordMediaRequest());\n\n                  case 11:\n                    _context.next = 13;\n                    return take(RECORD_MEDIA_SUCCESS);\n\n                  case 13:\n                    successAction = _context.sent;\n                    _successAction$payloa = successAction.payload.media, north = _successAction$payloa.north, east = _successAction$payloa.east, south = _successAction$payloa.south, west = _successAction$payloa.west, preview = _successAction$payloa.preview;\n\n                    if (!(!north || !east || !south || !west || !preview)) {\n                      _context.next = 17;\n                      break;\n                    }\n\n                    throw new Error('Failed to capture scene preview');\n\n                  case 17:\n                    _context.next = 19;\n                    return put(setProgress(ProgressStage.NONE, 30));\n\n                  case 19:\n                    _context.next = 21;\n                    return call(function () {\n                      return builder.uploadMedia(rawProject.id, preview, {\n                        north: north,\n                        east: east,\n                        south: south,\n                        west: west\n                      });\n                    });\n\n                  case 21:\n                    _context.next = 23;\n                    return put(setProgress(ProgressStage.NONE, 60));\n\n                  case 23:\n                    _context.next = 25;\n                    return put(takeScreenshot());\n\n                  case 25:\n                    _context.next = 27;\n                    return put(setProgress(ProgressStage.NONE, 90));\n\n                  case 27:\n                    _context.next = 29;\n                    return call(function () {\n                      return builder.deployToPool(project.id, additionalInfo);\n                    });\n\n                  case 29:\n                    _context.next = 31;\n                    return put(setProgress(ProgressStage.NONE, 100));\n\n                  case 31:\n                    _context.next = 33;\n                    return put(deployToPoolSuccess(window.URL.createObjectURL(preview)));\n\n                  case 33:\n                    _context.next = 39;\n                    break;\n\n                  case 35:\n                    _context.prev = 35;\n                    _context.t0 = _context[\"catch\"](6);\n                    _context.next = 39;\n                    return put(deployToPoolFailure(_context.t0.message));\n\n                  case 39:\n                    _context.next = 48;\n                    break;\n\n                  case 41:\n                    if (!rawProject) {\n                      _context.next = 46;\n                      break;\n                    }\n\n                    _context.next = 44;\n                    return put(deployToPoolFailure('Unable to Publish: Not current project'));\n\n                  case 44:\n                    _context.next = 48;\n                    break;\n\n                  case 46:\n                    _context.next = 48;\n                    return put(deployToPoolFailure('Unable to Publish: Invalid project'));\n\n                  case 48:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _marked, null, [[6, 35]]);\n          };\n\n          _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleDeployToPoolRequest), _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleDeployToLandRequest), _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleClearDeploymentRequest), _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchLandsSuccess), _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchDeploymentsRequest);\n          _context6.next = 8;\n          return takeLatest(DEPLOY_TO_POOL_REQUEST, handleDeployToPoolRequest);\n\n        case 8:\n          _context6.next = 10;\n          return takeLatest(DEPLOY_TO_LAND_REQUEST, handleDeployToLandRequest);\n\n        case 10:\n          _context6.next = 12;\n          return takeLatest(CLEAR_DEPLOYMENT_REQUEST, handleClearDeploymentRequest);\n\n        case 12:\n          _context6.next = 14;\n          return takeLatest(FETCH_DEPLOYMENTS_REQUEST, handleFetchDeploymentsRequest);\n\n        case 14:\n          _context6.next = 16;\n          return takeLatest(FETCH_LANDS_SUCCESS, handleFetchLandsSuccess);\n\n        case 16:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/deployment/sagas.ts"],"names":["deploymentSaga","Authenticator","EntityType","getAddress","takeLatest","put","select","call","take","all","getData","getDeployments","getCurrentProject","getProjects","store","getMedia","createFiles","EXPORT_PATH","recordMediaRequest","RECORD_MEDIA_SUCCESS","takeScreenshot","objectURLToBlob","getSceneByProjectId","getPreviewUrl","getIdentity","isLoggedIn","getName","FETCH_LANDS_SUCCESS","LandType","coordsToId","idToCoords","getCoordsByEstateId","DEPLOY_TO_POOL_REQUEST","deployToPoolFailure","deployToPoolSuccess","setProgress","DEPLOY_TO_LAND_REQUEST","deployToLandFailure","deployToLandSuccess","CLEAR_DEPLOYMENT_REQUEST","clearDeploymentFailure","clearDeploymentSuccess","FETCH_DEPLOYMENTS_REQUEST","fetchDeploymentsRequest","fetchDeploymentsSuccess","fetchDeploymentsFailure","ProgressStage","makeContentFiles","getEmptyDeployment","getThumbnail","UNPUBLISHED_PROJECT_ID","handleProgress","type","args","loaded","total","progress","dispatch","builder","catalystClient","handleDeployToPoolRequest","handleDeployToLandRequest","handleClearDeploymentRequest","handleFetchLandsSuccess","handleFetchDeploymentsRequest","action","coords","payload","entities","length","SCENE","deployments","Map","sort","a","b","timestamp","entity","id","pointers","x","y","content","definition","metadata","name","display","title","thumbnail","placement","point","rotation","source","projectId","layout","scene","base","parcels","isEmpty","set","owner","delete","Array","from","values","message","lands","land","PARCEL","ESTATE","push","coordsByEstateId","coord","deploymentId","deployment","identity","emptyProject","emptyScene","project","author","isDeploy","onProgress","CREATE_FILES","files","contentFiles","sceneDefinition","JSON","parse","SCENE_FILE","entityId","hashedFiles","authChain","signPayload","overrideDeploymentId","projects","previewUrl","isLoggedInResult","media","north","east","south","west","preview","UPLOAD_RECORDING","console","warn","Date","split","additionalInfo","rawProject","_thumbnail","NONE","successAction","Error","uploadMedia","deployToPool","window","URL","createObjectURL"],"mappings":"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","sourcesContent":["import { CatalystClient } from 'dcl-catalyst-client'\nimport { Authenticator, AuthIdentity } from 'dcl-crypto'\nimport { Entity, EntityType } from 'dcl-catalyst-commons'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { takeLatest, put, select, call, take, all } from 'redux-saga/effects'\nimport { getData as getDeployments } from 'modules/deployment/selectors'\nimport { getCurrentProject, getData as getProjects } from 'modules/project/selectors'\nimport { Deployment, SceneDefinition, Placement } from 'modules/deployment/types'\nimport { Scene } from 'modules/scene/types'\nimport { Project } from 'modules/project/types'\nimport { store } from 'modules/common/store'\nimport { Media } from 'modules/media/types'\nimport { getMedia } from 'modules/media/selectors'\nimport { createFiles, EXPORT_PATH } from 'modules/project/export'\nimport { recordMediaRequest, RECORD_MEDIA_SUCCESS, RecordMediaSuccessAction } from 'modules/media/actions'\nimport { takeScreenshot } from 'modules/editor/actions'\nimport { objectURLToBlob } from 'modules/media/utils'\nimport { getSceneByProjectId } from 'modules/scene/utils'\nimport { BuilderAPI, getPreviewUrl } from 'lib/api/builder'\nimport { getIdentity } from 'modules/identity/utils'\nimport { isLoggedIn } from 'modules/identity/selectors'\nimport { getName } from 'modules/profile/selectors'\nimport { FETCH_LANDS_SUCCESS, FetchLandsSuccessAction } from 'modules/land/actions'\nimport { LandType } from 'modules/land/types'\nimport { coordsToId, idToCoords } from 'modules/land/utils'\nimport { getCoordsByEstateId } from 'modules/land/selectors'\nimport {\n  DEPLOY_TO_POOL_REQUEST,\n  deployToPoolFailure,\n  deployToPoolSuccess,\n  setProgress,\n  DEPLOY_TO_LAND_REQUEST,\n  deployToLandFailure,\n  DeployToLandRequestAction,\n  DeployToPoolRequestAction,\n  deployToLandSuccess,\n  CLEAR_DEPLOYMENT_REQUEST,\n  ClearDeploymentRequestAction,\n  clearDeploymentFailure,\n  clearDeploymentSuccess,\n  FETCH_DEPLOYMENTS_REQUEST,\n  FetchDeploymentsRequestAction,\n  fetchDeploymentsRequest,\n  fetchDeploymentsSuccess,\n  fetchDeploymentsFailure\n} from './actions'\nimport { ProgressStage } from './types'\nimport { makeContentFiles } from './contentUtils'\nimport { getEmptyDeployment, getThumbnail, UNPUBLISHED_PROJECT_ID } from './utils'\n\ntype UnwrapPromise<T> = T extends PromiseLike<infer U> ? U : T\n\nconst handleProgress = (type: ProgressStage) => (args: { loaded: number; total: number }) => {\n  const { loaded, total } = args\n  const progress = ((loaded / total) * 100) | 0\n  store.dispatch(setProgress(type, progress))\n}\n\nexport function* deploymentSaga(builder: BuilderAPI, catalystClient: CatalystClient) {\n  yield takeLatest(DEPLOY_TO_POOL_REQUEST, handleDeployToPoolRequest)\n  yield takeLatest(DEPLOY_TO_LAND_REQUEST, handleDeployToLandRequest)\n  yield takeLatest(CLEAR_DEPLOYMENT_REQUEST, handleClearDeploymentRequest)\n  yield takeLatest(FETCH_DEPLOYMENTS_REQUEST, handleFetchDeploymentsRequest)\n  yield takeLatest(FETCH_LANDS_SUCCESS, handleFetchLandsSuccess)\n\n  function* handleDeployToPoolRequest(action: DeployToPoolRequestAction) {\n    const { projectId, additionalInfo } = action.payload\n    const rawProject: Project | null = yield select(getCurrentProject)\n\n    if (rawProject && rawProject.id === projectId) {\n      const { thumbnail: _thumbnail, ...project } = rawProject\n\n      try {\n        yield put(setProgress(ProgressStage.NONE, 1))\n        yield put(recordMediaRequest())\n        const successAction: RecordMediaSuccessAction = yield take(RECORD_MEDIA_SUCCESS)\n        const { north, east, south, west, preview } = successAction.payload.media\n\n        if (!north || !east || !south || !west || !preview) {\n          throw new Error('Failed to capture scene preview')\n        }\n\n        yield put(setProgress(ProgressStage.NONE, 30))\n        yield call(() => builder.uploadMedia(rawProject.id, preview, { north, east, south, west }))\n\n        yield put(setProgress(ProgressStage.NONE, 60))\n        yield put(takeScreenshot())\n\n        yield put(setProgress(ProgressStage.NONE, 90))\n        yield call(() => builder.deployToPool(project.id, additionalInfo))\n\n        yield put(setProgress(ProgressStage.NONE, 100))\n        yield put(deployToPoolSuccess(window.URL.createObjectURL(preview)))\n      } catch (e) {\n        yield put(deployToPoolFailure(e.message))\n      }\n    } else if (rawProject) {\n      yield put(deployToPoolFailure('Unable to Publish: Not current project'))\n    } else {\n      yield put(deployToPoolFailure('Unable to Publish: Invalid project'))\n    }\n  }\n\n  function* handleDeployToLandRequest(action: DeployToLandRequestAction) {\n    const { placement, projectId, overrideDeploymentId } = action.payload\n\n    const projects: ReturnType<typeof getProjects> = yield select(getProjects)\n    const project = projects[projectId]\n    if (!project) {\n      yield put(deployToLandFailure('Unable to Publish: Invalid project'))\n      return\n    }\n\n    const scene: Scene = yield getSceneByProjectId(project.id)\n    if (!scene) {\n      yield put(deployToLandFailure('Unable to Publish: Invalid scene'))\n      return\n    }\n\n    const identity: AuthIdentity = yield getIdentity()\n    if (!identity) {\n      yield put(deployToLandFailure('Unable to Publish: Invalid identity'))\n      return\n    }\n\n    const author: ReturnType<typeof getName> = yield select(getName)\n\n    // upload media if logged in\n    let previewUrl: string | null = null\n    const isLoggedInResult: boolean = yield select(isLoggedIn)\n    if (isLoggedInResult) {\n      const media: Media | null = yield select(getMedia)\n      if (media) {\n        const [north, east, south, west, thumbnail]: Array<Blob> = yield all([\n          call(objectURLToBlob, media.north),\n          call(objectURLToBlob, media.east),\n          call(objectURLToBlob, media.south),\n          call(objectURLToBlob, media.west),\n          call(objectURLToBlob, media.preview)\n        ])\n\n        yield call(\n          [builder, 'uploadMedia'],\n          project.id,\n          thumbnail,\n          { north, east, south, west },\n          handleProgress(ProgressStage.UPLOAD_RECORDING)\n        )\n\n        previewUrl = getPreviewUrl(project.id)\n      } else {\n        console.warn('Failed to upload scene preview')\n      }\n    }\n\n    try {\n      const files: Record<string, string> = yield call(createFiles, {\n        project,\n        scene,\n        point: placement.point,\n        rotation: placement.rotation,\n        author,\n        thumbnail: previewUrl,\n        isDeploy: true,\n        onProgress: handleProgress(ProgressStage.CREATE_FILES)\n      })\n\n      const contentFiles: Map<string, Buffer> = yield call(makeContentFiles, files)\n      // Remove the old communications property if it exists\n      const sceneDefinition: SceneDefinition = JSON.parse(files[EXPORT_PATH.SCENE_FILE])\n      const { entityId, files: hashedFiles } = yield call([catalystClient, 'buildEntity'], {\n        type: EntityType.SCENE,\n        pointers: [...sceneDefinition.scene.parcels],\n        metadata: sceneDefinition,\n        files: contentFiles\n      })\n      const authChain = Authenticator.signPayload(identity, entityId)\n      yield call([catalystClient, 'deployEntity'], { entityId, files: hashedFiles, authChain })\n      // generate new deployment\n      const deployment: Deployment = {\n        id: entityId,\n        placement,\n        owner: yield select(getAddress) || '',\n        timestamp: +new Date(),\n        layout: project.layout,\n        name: project.title,\n        thumbnail: previewUrl,\n        projectId: project.id,\n        base: sceneDefinition.scene.base,\n        parcels: sceneDefinition.scene.parcels\n      }\n\n      // notify success\n      yield put(deployToLandSuccess(deployment, overrideDeploymentId))\n    } catch (e) {\n      yield put(deployToLandFailure(e.message.split('\\n')[0]))\n    }\n  }\n\n  function* handleClearDeploymentRequest(action: ClearDeploymentRequestAction) {\n    const { deploymentId } = action.payload\n\n    const deployments: ReturnType<typeof getDeployments> = yield select(getDeployments)\n    const deployment = deployments[deploymentId]\n    if (!deployment) {\n      yield put(deployToLandFailure('Unable to Publish: Invalid deployment'))\n      return\n    }\n\n    const identity: AuthIdentity = yield getIdentity()\n    if (!identity) {\n      yield put(deployToLandFailure('Unable to Publish: Invalid identity'))\n      return\n    }\n\n    try {\n      const { placement } = deployment\n      const [emptyProject, emptyScene] = getEmptyDeployment(deployment.projectId || UNPUBLISHED_PROJECT_ID)\n      const files: UnwrapPromise<ReturnType<typeof createFiles>> = yield call(createFiles, {\n        project: emptyProject,\n        scene: emptyScene,\n        point: placement.point,\n        rotation: placement.rotation,\n        thumbnail: null,\n        author: null,\n        isDeploy: true,\n        isEmpty: true,\n        onProgress: handleProgress(ProgressStage.CREATE_FILES)\n      })\n      const contentFiles: Map<string, Buffer> = yield call(makeContentFiles, files)\n      const sceneDefinition: SceneDefinition = JSON.parse(files[EXPORT_PATH.SCENE_FILE])\n      const { entityId, files: hashedFiles } = yield call([catalystClient, 'buildEntity'], {\n        type: EntityType.SCENE,\n        pointers: [...sceneDefinition.scene.parcels],\n        metadata: sceneDefinition,\n        files: contentFiles\n      })\n      const authChain = Authenticator.signPayload(identity, entityId)\n      yield call([catalystClient, 'deployEntity'], { entityId, files: hashedFiles, authChain })\n      yield put(clearDeploymentSuccess(deploymentId))\n    } catch (error) {\n      yield put(clearDeploymentFailure(deploymentId, error.message))\n    }\n  }\n\n  function* handleFetchLandsSuccess(action: FetchLandsSuccessAction) {\n    const coords: string[] = []\n    for (const land of action.payload.lands) {\n      switch (land.type) {\n        case LandType.PARCEL: {\n          coords.push(coordsToId(land.x!, land.y!))\n          break\n        }\n        case LandType.ESTATE: {\n          const coordsByEstateId: ReturnType<typeof getCoordsByEstateId> = yield select(getCoordsByEstateId)\n          if (land.id in coordsByEstateId) {\n            for (const coord of coordsByEstateId[land.id]) {\n              coords.push(coord)\n            }\n          }\n        }\n      }\n    }\n    yield put(fetchDeploymentsRequest(coords))\n  }\n\n  function* handleFetchDeploymentsRequest(action: FetchDeploymentsRequestAction) {\n    const { coords } = action.payload\n\n    try {\n      let entities: Entity[] = []\n\n      if (coords.length > 0) {\n        entities = yield call([catalystClient, 'fetchEntitiesByPointers'], EntityType.SCENE, coords)\n      }\n\n      const deployments = new Map<string, Deployment>()\n      for (const entity of entities.sort((a, b) => (a.timestamp > b.timestamp ? 1 : -1))) {\n        const id = entity.pointers[0]\n        if (id) {\n          const [x, y] = idToCoords(id)\n          const content = entity.content\n          const definition = entity.metadata as SceneDefinition\n          let name = 'Untitled Scene'\n          if (definition && definition.display && definition.display.title && definition.display.title !== 'interactive-text') {\n            name = definition.display.title\n          }\n          const thumbnail: string | null = getThumbnail(definition, content)\n          const placement: Placement = {\n            point: { x, y },\n            rotation: (definition && definition.source && definition.source.rotation) || 'north'\n          }\n          const projectId = (definition && definition.source && definition.source.projectId) || null\n          const layout = (definition && definition.source && definition.source.layout) || null\n          const { base, parcels } = definition.scene\n          const isEmpty = !!(definition && definition.source && definition.source.isEmpty)\n          if (!isEmpty) {\n            deployments.set(id, {\n              id: entity.id,\n              timestamp: entity.timestamp,\n              projectId,\n              name,\n              thumbnail,\n              placement,\n              owner: definition.owner,\n              layout,\n              base,\n              parcels\n            })\n          } else {\n            deployments.delete(id)\n          }\n        }\n      }\n      yield put(fetchDeploymentsSuccess(coords, Array.from(deployments.values())))\n    } catch (error) {\n      yield put(fetchDeploymentsFailure(coords, error.message))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}