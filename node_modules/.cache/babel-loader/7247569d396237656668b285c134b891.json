{"ast":null,"code":"import { Texture } from \"../Materials/Textures/texture\";\nimport { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\nimport { PassPostProcess } from \"../PostProcesses/passPostProcess\";\n/**\r\n * Class used to host texture specific utilities\r\n */\n\nvar TextureTools =\n/** @class */\nfunction () {\n  function TextureTools() {}\n  /**\r\n   * Uses the GPU to create a copy texture rescaled at a given size\r\n   * @param texture Texture to copy from\r\n   * @param width defines the desired width\r\n   * @param height defines the desired height\r\n   * @param useBilinearMode defines if bilinear mode has to be used\r\n   * @return the generated texture\r\n   */\n\n\n  TextureTools.CreateResizedCopy = function (texture, width, height, useBilinearMode) {\n    if (useBilinearMode === void 0) {\n      useBilinearMode = true;\n    }\n\n    var scene = texture.getScene();\n    var engine = scene.getEngine();\n    var rtt = new RenderTargetTexture('resized' + texture.name, {\n      width: width,\n      height: height\n    }, scene, !texture.noMipmap, true, texture._texture.type, false, texture.samplingMode, false);\n    rtt.wrapU = texture.wrapU;\n    rtt.wrapV = texture.wrapV;\n    rtt.uOffset = texture.uOffset;\n    rtt.vOffset = texture.vOffset;\n    rtt.uScale = texture.uScale;\n    rtt.vScale = texture.vScale;\n    rtt.uAng = texture.uAng;\n    rtt.vAng = texture.vAng;\n    rtt.wAng = texture.wAng;\n    rtt.coordinatesIndex = texture.coordinatesIndex;\n    rtt.level = texture.level;\n    rtt.anisotropicFilteringLevel = texture.anisotropicFilteringLevel;\n    rtt._texture.isReady = false;\n    texture.wrapU = Texture.CLAMP_ADDRESSMODE;\n    texture.wrapV = Texture.CLAMP_ADDRESSMODE;\n    var passPostProcess = new PassPostProcess(\"pass\", 1, null, useBilinearMode ? Texture.BILINEAR_SAMPLINGMODE : Texture.NEAREST_SAMPLINGMODE, engine, false, 0);\n    passPostProcess.getEffect().executeWhenCompiled(function () {\n      passPostProcess.onApply = function (effect) {\n        effect.setTexture(\"textureSampler\", texture);\n      };\n\n      var internalTexture = rtt.getInternalTexture();\n\n      if (internalTexture) {\n        scene.postProcessManager.directRender([passPostProcess], internalTexture);\n        engine.unBindFramebuffer(internalTexture);\n        rtt.disposeFramebufferObjects();\n        passPostProcess.dispose();\n        internalTexture.isReady = true;\n      }\n    });\n    return rtt;\n  };\n\n  return TextureTools;\n}();\n\nexport { TextureTools };","map":null,"metadata":{},"sourceType":"module"}