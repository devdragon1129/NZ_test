{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Vector3 } from \"../../Maths/math.vector\";\nimport { Mesh } from \"../../Meshes/mesh\";\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\nimport { WebVRController } from \"./webVRController\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\n/**\r\n     * Gear VR Controller\r\n     */\n\nvar GearVRController =\n/** @class */\nfunction (_super) {\n  __extends(GearVRController, _super);\n  /**\r\n   * Creates a new GearVRController from a gamepad\r\n   * @param vrGamepad the gamepad that the controller should be created from\r\n   */\n\n\n  function GearVRController(vrGamepad) {\n    var _this = _super.call(this, vrGamepad) || this;\n\n    _this._buttonIndexToObservableNameMap = ['onPadStateChangedObservable', 'onTriggerStateChangedObservable' // Trigger\n    ];\n    _this.controllerType = PoseEnabledControllerType.GEAR_VR; // Initial starting position defaults to where hand would be (incase of only 3dof controller)\n\n    _this._calculatedPosition = new Vector3(_this.hand == \"left\" ? -0.15 : 0.15, -0.5, 0.25);\n\n    _this._disableTrackPosition(_this._calculatedPosition);\n\n    return _this;\n  }\n  /**\r\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n   * @param scene scene in which to add meshes\r\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n   */\n\n\n  GearVRController.prototype.initControllerMesh = function (scene, meshLoaded) {\n    var _this = this;\n\n    SceneLoader.ImportMesh(\"\", GearVRController.MODEL_BASE_URL, GearVRController.MODEL_FILENAME, scene, function (newMeshes) {\n      // Offset the controller so it will rotate around the users wrist\n      var mesh = new Mesh(\"\", scene);\n      newMeshes[1].parent = mesh;\n      newMeshes[1].position.z = -0.15;\n      _this._defaultModel = mesh;\n\n      _this.attachToMesh(_this._defaultModel);\n\n      if (meshLoaded) {\n        meshLoaded(_this._defaultModel);\n      }\n    });\n  };\n  /**\r\n   * Called once for each button that changed state since the last frame\r\n   * @param buttonIdx Which button index changed\r\n   * @param state New state of the button\r\n   * @param changes Which properties on the state changed since last frame\r\n   */\n\n\n  GearVRController.prototype._handleButtonChange = function (buttonIdx, state, changes) {\n    if (buttonIdx < this._buttonIndexToObservableNameMap.length) {\n      var observableName = this._buttonIndexToObservableNameMap[buttonIdx]; // Only emit events for buttons that we know how to map from index to observable\n\n      var observable = this[observableName];\n\n      if (observable) {\n        observable.notifyObservers(state);\n      }\n    }\n  };\n  /**\r\n   * Base Url for the controller model.\r\n   */\n\n\n  GearVRController.MODEL_BASE_URL = 'https://controllers.babylonjs.com/generic/';\n  /**\r\n   * File name for the controller model.\r\n   */\n\n  GearVRController.MODEL_FILENAME = 'generic.babylon';\n  /**\r\n   * Gamepad Id prefix used to identify this controller.\r\n   */\n\n  GearVRController.GAMEPAD_ID_PREFIX = 'Gear VR'; // id is 'Gear VR Controller'\n\n  return GearVRController;\n}(WebVRController);\n\nexport { GearVRController };\n\nPoseEnabledControllerHelper._ControllerFactories.push({\n  canCreate: function canCreate(gamepadInfo) {\n    return gamepadInfo.id.indexOf(GearVRController.GAMEPAD_ID_PREFIX) === 0 || gamepadInfo.id.indexOf('Oculus Go') !== -1 || gamepadInfo.id.indexOf('Vive Focus') !== -1;\n  },\n  create: function create(gamepadInfo) {\n    return new GearVRController(gamepadInfo);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}