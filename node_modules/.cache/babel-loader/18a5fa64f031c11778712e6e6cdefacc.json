{"ast":null,"code":"import { Vector2, Vector3, TmpVectors, Vector4 } from \"../Maths/math.vector\";\nimport { Color4 } from '../Maths/math.color';\nimport { Scalar } from \"../Maths/math.scalar\";\n/**\r\n * A particle represents one of the element emitted by a particle system.\r\n * This is mainly define by its coordinates, direction, velocity and age.\r\n */\n\nvar Particle =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance Particle\r\n   * @param particleSystem the particle system the particle belongs to\r\n   */\n  function Particle(\n  /**\r\n   * The particle system the particle belongs to.\r\n   */\n  particleSystem) {\n    this.particleSystem = particleSystem;\n    /**\r\n     * The world position of the particle in the scene.\r\n     */\n\n    this.position = Vector3.Zero();\n    /**\r\n     * The world direction of the particle in the scene.\r\n     */\n\n    this.direction = Vector3.Zero();\n    /**\r\n     * The color of the particle.\r\n     */\n\n    this.color = new Color4(0, 0, 0, 0);\n    /**\r\n     * The color change of the particle per step.\r\n     */\n\n    this.colorStep = new Color4(0, 0, 0, 0);\n    /**\r\n     * Defines how long will the life of the particle be.\r\n     */\n\n    this.lifeTime = 1.0;\n    /**\r\n     * The current age of the particle.\r\n     */\n\n    this.age = 0;\n    /**\r\n     * The current size of the particle.\r\n     */\n\n    this.size = 0;\n    /**\r\n     * The current scale of the particle.\r\n     */\n\n    this.scale = new Vector2(1, 1);\n    /**\r\n     * The current angle of the particle.\r\n     */\n\n    this.angle = 0;\n    /**\r\n     * Defines how fast is the angle changing.\r\n     */\n\n    this.angularSpeed = 0;\n    /**\r\n     * Defines the cell index used by the particle to be rendered from a sprite.\r\n     */\n\n    this.cellIndex = 0;\n    /** @hidden */\n\n    this._attachedSubEmitters = null;\n    /** @hidden */\n\n    this._currentColor1 = new Color4(0, 0, 0, 0);\n    /** @hidden */\n\n    this._currentColor2 = new Color4(0, 0, 0, 0);\n    /** @hidden */\n\n    this._currentSize1 = 0;\n    /** @hidden */\n\n    this._currentSize2 = 0;\n    /** @hidden */\n\n    this._currentAngularSpeed1 = 0;\n    /** @hidden */\n\n    this._currentAngularSpeed2 = 0;\n    /** @hidden */\n\n    this._currentVelocity1 = 0;\n    /** @hidden */\n\n    this._currentVelocity2 = 0;\n    /** @hidden */\n\n    this._currentLimitVelocity1 = 0;\n    /** @hidden */\n\n    this._currentLimitVelocity2 = 0;\n    /** @hidden */\n\n    this._currentDrag1 = 0;\n    /** @hidden */\n\n    this._currentDrag2 = 0;\n    this.id = Particle._Count++;\n\n    if (!this.particleSystem.isAnimationSheetEnabled) {\n      return;\n    }\n\n    this.updateCellInfoFromSystem();\n  }\n\n  Particle.prototype.updateCellInfoFromSystem = function () {\n    this.cellIndex = this.particleSystem.startSpriteCellID;\n  };\n  /**\r\n   * Defines how the sprite cell index is updated for the particle\r\n   */\n\n\n  Particle.prototype.updateCellIndex = function () {\n    var offsetAge = this.age;\n    var changeSpeed = this.particleSystem.spriteCellChangeSpeed;\n\n    if (this.particleSystem.spriteRandomStartCell) {\n      if (this._randomCellOffset === undefined) {\n        this._randomCellOffset = Math.random() * this.lifeTime;\n      }\n\n      if (changeSpeed === 0) {\n        // Special case when speed = 0 meaning we want to stay on initial cell\n        changeSpeed = 1;\n        offsetAge = this._randomCellOffset;\n      } else {\n        offsetAge += this._randomCellOffset;\n      }\n    }\n\n    var dist = this._initialEndSpriteCellID - this._initialStartSpriteCellID;\n    var ratio = Scalar.Clamp(offsetAge * changeSpeed % this.lifeTime / this.lifeTime);\n    this.cellIndex = this._initialStartSpriteCellID + ratio * dist | 0;\n  };\n  /** @hidden */\n\n\n  Particle.prototype._inheritParticleInfoToSubEmitter = function (subEmitter) {\n    if (subEmitter.particleSystem.emitter.position) {\n      var emitterMesh = subEmitter.particleSystem.emitter;\n      emitterMesh.position.copyFrom(this.position);\n\n      if (subEmitter.inheritDirection) {\n        var temp = TmpVectors.Vector3[0];\n        this.direction.normalizeToRef(temp);\n        emitterMesh.setDirection(temp, 0, Math.PI / 2);\n      }\n    } else {\n      var emitterPosition = subEmitter.particleSystem.emitter;\n      emitterPosition.copyFrom(this.position);\n    } // Set inheritedVelocityOffset to be used when new particles are created\n\n\n    this.direction.scaleToRef(subEmitter.inheritedVelocityAmount / 2, TmpVectors.Vector3[0]);\n\n    subEmitter.particleSystem._inheritedVelocityOffset.copyFrom(TmpVectors.Vector3[0]);\n  };\n  /** @hidden */\n\n\n  Particle.prototype._inheritParticleInfoToSubEmitters = function () {\n    var _this = this;\n\n    if (this._attachedSubEmitters && this._attachedSubEmitters.length > 0) {\n      this._attachedSubEmitters.forEach(function (subEmitter) {\n        _this._inheritParticleInfoToSubEmitter(subEmitter);\n      });\n    }\n  };\n  /** @hidden */\n\n\n  Particle.prototype._reset = function () {\n    this.age = 0;\n    this.id = Particle._Count++;\n    this._currentColorGradient = null;\n    this._currentSizeGradient = null;\n    this._currentAngularSpeedGradient = null;\n    this._currentVelocityGradient = null;\n    this._currentLimitVelocityGradient = null;\n    this._currentDragGradient = null;\n    this.cellIndex = this.particleSystem.startSpriteCellID;\n    this._randomCellOffset = undefined;\n  };\n  /**\r\n   * Copy the properties of particle to another one.\r\n   * @param other the particle to copy the information to.\r\n   */\n\n\n  Particle.prototype.copyTo = function (other) {\n    other.position.copyFrom(this.position);\n\n    if (this._initialDirection) {\n      if (other._initialDirection) {\n        other._initialDirection.copyFrom(this._initialDirection);\n      } else {\n        other._initialDirection = this._initialDirection.clone();\n      }\n    } else {\n      other._initialDirection = null;\n    }\n\n    other.direction.copyFrom(this.direction);\n\n    if (this._localPosition) {\n      if (other._localPosition) {\n        other._localPosition.copyFrom(this._localPosition);\n      } else {\n        other._localPosition = this._localPosition.clone();\n      }\n    }\n\n    other.color.copyFrom(this.color);\n    other.colorStep.copyFrom(this.colorStep);\n    other.lifeTime = this.lifeTime;\n    other.age = this.age;\n    other._randomCellOffset = this._randomCellOffset;\n    other.size = this.size;\n    other.scale.copyFrom(this.scale);\n    other.angle = this.angle;\n    other.angularSpeed = this.angularSpeed;\n    other.particleSystem = this.particleSystem;\n    other.cellIndex = this.cellIndex;\n    other.id = this.id;\n    other._attachedSubEmitters = this._attachedSubEmitters;\n\n    if (this._currentColorGradient) {\n      other._currentColorGradient = this._currentColorGradient;\n\n      other._currentColor1.copyFrom(this._currentColor1);\n\n      other._currentColor2.copyFrom(this._currentColor2);\n    }\n\n    if (this._currentSizeGradient) {\n      other._currentSizeGradient = this._currentSizeGradient;\n      other._currentSize1 = this._currentSize1;\n      other._currentSize2 = this._currentSize2;\n    }\n\n    if (this._currentAngularSpeedGradient) {\n      other._currentAngularSpeedGradient = this._currentAngularSpeedGradient;\n      other._currentAngularSpeed1 = this._currentAngularSpeed1;\n      other._currentAngularSpeed2 = this._currentAngularSpeed2;\n    }\n\n    if (this._currentVelocityGradient) {\n      other._currentVelocityGradient = this._currentVelocityGradient;\n      other._currentVelocity1 = this._currentVelocity1;\n      other._currentVelocity2 = this._currentVelocity2;\n    }\n\n    if (this._currentLimitVelocityGradient) {\n      other._currentLimitVelocityGradient = this._currentLimitVelocityGradient;\n      other._currentLimitVelocity1 = this._currentLimitVelocity1;\n      other._currentLimitVelocity2 = this._currentLimitVelocity2;\n    }\n\n    if (this._currentDragGradient) {\n      other._currentDragGradient = this._currentDragGradient;\n      other._currentDrag1 = this._currentDrag1;\n      other._currentDrag2 = this._currentDrag2;\n    }\n\n    if (this.particleSystem.isAnimationSheetEnabled) {\n      other._initialStartSpriteCellID = this._initialStartSpriteCellID;\n      other._initialEndSpriteCellID = this._initialEndSpriteCellID;\n    }\n\n    if (this.particleSystem.useRampGradients) {\n      if (other.remapData && this.remapData) {\n        other.remapData.copyFrom(this.remapData);\n      } else {\n        other.remapData = new Vector4(0, 0, 0, 0);\n      }\n    }\n\n    if (this._randomNoiseCoordinates1) {\n      if (other._randomNoiseCoordinates1) {\n        other._randomNoiseCoordinates1.copyFrom(this._randomNoiseCoordinates1);\n\n        other._randomNoiseCoordinates2.copyFrom(this._randomNoiseCoordinates2);\n      } else {\n        other._randomNoiseCoordinates1 = this._randomNoiseCoordinates1.clone();\n        other._randomNoiseCoordinates2 = this._randomNoiseCoordinates2.clone();\n      }\n    }\n  };\n\n  Particle._Count = 0;\n  return Particle;\n}();\n\nexport { Particle };","map":null,"metadata":{},"sourceType":"module"}