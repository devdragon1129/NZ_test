{"ast":null,"code":"import { connect } from 'react-redux';\nimport { openEditor } from 'modules/editor/actions';\nimport { isReady } from 'modules/editor/selectors';\nimport { getCurrentProject } from 'modules/project/selectors';\nimport { dropItem } from 'modules/scene/actions';\nimport Preview from './Preview';\n\nvar mapState = function mapState(state) {\n  return {\n    isLoadingEditor: !isReady(state),\n    project: getCurrentProject(state)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onOpenEditor: function onOpenEditor() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return dispatch(openEditor(options));\n    },\n    onDropItem: function onDropItem(asset, x, y) {\n      return dispatch(dropItem(asset, x, y));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(Preview);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Preview/Preview.container.ts"],"names":["connect","openEditor","isReady","getCurrentProject","dropItem","Preview","mapState","state","isLoadingEditor","project","mapDispatch","dispatch","onOpenEditor","options","onDropItem","asset","x","y"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AAEA,SAASC,UAAT,QAA2B,wBAA3B;AAEA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,SAASC,QAAT,QAAyB,uBAAzB;AAGA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAqC;AACpD,SAAO;AACLC,IAAAA,eAAe,EAAE,CAACN,OAAO,CAACK,KAAD,CADpB;AAELE,IAAAA,OAAO,EAAEN,iBAAiB,CAACI,KAAD;AAFrB,GAAP;AAID,CALD;;AAOA,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,YAAY,EAAE;AAAA,UAACC,OAAD,uEAAuC,EAAvC;AAAA,aAA8CF,QAAQ,CAACV,UAAU,CAACY,OAAD,CAAX,CAAtD;AAAA,KADkD;AAEhEC,IAAAA,UAAU,EAAE,oBAACC,KAAD,EAAQC,CAAR,EAAWC,CAAX;AAAA,aAAiBN,QAAQ,CAACP,QAAQ,CAACW,KAAD,EAAQC,CAAR,EAAWC,CAAX,CAAT,CAAzB;AAAA;AAFoD,GAA9C;AAAA,CAApB;;AAKA,eAAejB,OAAO,CAACM,QAAD,EAAWI,WAAX,CAAP,CAA+BL,OAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\n\nimport { openEditor } from 'modules/editor/actions'\nimport { RootState } from 'modules/common/types'\nimport { isReady } from 'modules/editor/selectors'\nimport { getCurrentProject } from 'modules/project/selectors'\nimport { dropItem } from 'modules/scene/actions'\nimport { OpenEditorOptions } from 'modules/editor/types'\nimport { MapStateProps, MapDispatch, MapDispatchProps } from './Preview.types'\nimport Preview from './Preview'\n\nconst mapState = (state: RootState): MapStateProps => {\n  return {\n    isLoadingEditor: !isReady(state),\n    project: getCurrentProject(state)!\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onOpenEditor: (options: Partial<OpenEditorOptions> = {}) => dispatch(openEditor(options)),\n  onDropItem: (asset, x, y) => dispatch(dropItem(asset, x, y))\n})\n\nexport default connect(mapState, mapDispatch)(Preview)\n"]},"metadata":{},"sourceType":"module"}