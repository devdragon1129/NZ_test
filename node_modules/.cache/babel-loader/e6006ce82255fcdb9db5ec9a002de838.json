{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar code_1 = require(\"../code\");\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar error = {\n  message: function message(_ref) {\n    var schemaCode = _ref.schemaCode;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must match pattern \\\"\", \"\\\"\"])), schemaCode);\n  },\n  params: function params(_ref2) {\n    var schemaCode = _ref2.schemaCode;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{pattern: \", \"}\"])), schemaCode);\n  }\n};\nvar def = {\n  keyword: \"pattern\",\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var data = cxt.data,\n        $data = cxt.$data,\n        schema = cxt.schema,\n        schemaCode = cxt.schemaCode,\n        it = cxt.it; // TODO regexp should be wrapped in try/catchs\n\n    var u = it.opts.unicodeRegExp ? \"u\" : \"\";\n    var regExp = $data ? (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"(new RegExp(\", \", \", \"))\"])), schemaCode, u) : (0, code_1.usePattern)(cxt, schema);\n    cxt.fail$data((0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"!\", \".test(\", \")\"])), regExp, data));\n  }\n};\nexports.default = def;","map":null,"metadata":{},"sourceType":"script"}