{"ast":null,"code":"import { AbstractMesh } from \"../../Meshes/abstractMesh\";\nimport { Scene } from \"../../scene\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\nimport { Vector3, Quaternion, Matrix } from \"../../Maths/math.vector\";\nimport { Observable } from \"../../Misc/observable\";\nimport { Camera } from \"../../Cameras/camera\";\nimport { PivotTools } from \"../../Misc/pivotTools\";\n/**\r\n * A behavior that when attached to a mesh will allow the mesh to be dragged around based on directions and origin of the pointer's ray\r\n */\n\nvar SixDofDragBehavior =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a behavior that when attached to a mesh will allow the mesh to be dragged around based on directions and origin of the pointer's ray\r\n   */\n  function SixDofDragBehavior() {\n    this._sceneRenderObserver = null;\n    this._targetPosition = new Vector3(0, 0, 0);\n    this._moving = false;\n    this._startingOrientation = new Quaternion();\n    this._attachedToElement = false;\n    /**\r\n     * How much faster the object should move when the controller is moving towards it. This is useful to bring objects that are far away from the user to them faster. Set this to 0 to avoid any speed increase. (Default: 3)\r\n     */\n\n    this.zDragFactor = 3;\n    /**\r\n     * If the object should rotate to face the drag origin\r\n     */\n\n    this.rotateDraggedObject = true;\n    /**\r\n     * If the behavior is currently in a dragging state\r\n     */\n\n    this.dragging = false;\n    /**\r\n     * The distance towards the target drag position to move each frame. This can be useful to avoid jitter. Set this to 1 for no delay. (Default: 0.2)\r\n     */\n\n    this.dragDeltaRatio = 0.2;\n    /**\r\n     * The id of the pointer that is currently interacting with the behavior (-1 when no pointer is active)\r\n     */\n\n    this.currentDraggingPointerID = -1;\n    /**\r\n     * If camera controls should be detached during the drag\r\n     */\n\n    this.detachCameraControls = true;\n    /**\r\n     * Fires each time a drag starts\r\n     */\n\n    this.onDragStartObservable = new Observable();\n    /**\r\n     * Fires each time a drag happens\r\n     */\n\n    this.onDragObservable = new Observable();\n    /**\r\n     *  Fires each time a drag ends (eg. mouse release after drag)\r\n     */\n\n    this.onDragEndObservable = new Observable();\n  }\n\n  Object.defineProperty(SixDofDragBehavior.prototype, \"name\", {\n    /**\r\n     *  The name of the behavior\r\n     */\n    get: function get() {\n      return \"SixDofDrag\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   *  Initializes the behavior\r\n   */\n\n  SixDofDragBehavior.prototype.init = function () {};\n\n  Object.defineProperty(SixDofDragBehavior.prototype, \"_pointerCamera\", {\n    /**\r\n     * In the case of multiplea active cameras, the cameraToUseForPointers should be used if set instead of active camera\r\n     */\n    get: function get() {\n      if (this._scene.cameraToUseForPointers) {\n        return this._scene.cameraToUseForPointers;\n      } else {\n        return this._scene.activeCamera;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Attaches the scale behavior the passed in mesh\r\n   * @param ownerNode The mesh that will be scaled around once attached\r\n   */\n\n  SixDofDragBehavior.prototype.attach = function (ownerNode) {\n    var _this = this;\n\n    this._ownerNode = ownerNode;\n    this._scene = this._ownerNode.getScene();\n\n    if (!SixDofDragBehavior._virtualScene) {\n      SixDofDragBehavior._virtualScene = new Scene(this._scene.getEngine(), {\n        virtual: true\n      });\n\n      SixDofDragBehavior._virtualScene.detachControl();\n\n      this._scene.getEngine().scenes.pop();\n    }\n\n    var pickedMesh = null;\n    var lastSixDofOriginPosition = new Vector3(0, 0, 0); // Setup virtual meshes to be used for dragging without dirtying the existing scene\n\n    this._virtualOriginMesh = new AbstractMesh(\"\", SixDofDragBehavior._virtualScene);\n    this._virtualOriginMesh.rotationQuaternion = new Quaternion();\n    this._virtualDragMesh = new AbstractMesh(\"\", SixDofDragBehavior._virtualScene);\n    this._virtualDragMesh.rotationQuaternion = new Quaternion();\n\n    var pickPredicate = function pickPredicate(m) {\n      return _this._ownerNode == m || m.isDescendantOf(_this._ownerNode);\n    };\n\n    this._pointerObserver = this._scene.onPointerObservable.add(function (pointerInfo, eventState) {\n      if (pointerInfo.type == PointerEventTypes.POINTERDOWN) {\n        if (!_this.dragging && pointerInfo.pickInfo && pointerInfo.pickInfo.hit && pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.ray && pickPredicate(pointerInfo.pickInfo.pickedMesh)) {\n          if (_this._pointerCamera && _this._pointerCamera.cameraRigMode == Camera.RIG_MODE_NONE) {\n            pointerInfo.pickInfo.ray.origin.copyFrom(_this._pointerCamera.globalPosition);\n          }\n\n          pickedMesh = _this._ownerNode;\n\n          PivotTools._RemoveAndStorePivotPoint(pickedMesh);\n\n          lastSixDofOriginPosition.copyFrom(pointerInfo.pickInfo.ray.origin); // Set position and orientation of the controller\n\n          _this._virtualOriginMesh.position.copyFrom(pointerInfo.pickInfo.ray.origin);\n\n          _this._virtualOriginMesh.lookAt(pointerInfo.pickInfo.ray.origin.add(pointerInfo.pickInfo.ray.direction)); // Attach the virtual drag mesh to the virtual origin mesh so it can be dragged\n\n\n          _this._virtualOriginMesh.removeChild(_this._virtualDragMesh);\n\n          pickedMesh.computeWorldMatrix();\n\n          _this._virtualDragMesh.position.copyFrom(pickedMesh.absolutePosition);\n\n          if (!pickedMesh.rotationQuaternion) {\n            pickedMesh.rotationQuaternion = Quaternion.RotationYawPitchRoll(pickedMesh.rotation.y, pickedMesh.rotation.x, pickedMesh.rotation.z);\n          }\n\n          var oldParent = pickedMesh.parent;\n          pickedMesh.setParent(null);\n\n          _this._virtualDragMesh.rotationQuaternion.copyFrom(pickedMesh.rotationQuaternion);\n\n          pickedMesh.setParent(oldParent);\n\n          _this._virtualOriginMesh.addChild(_this._virtualDragMesh); // Update state\n\n\n          _this._targetPosition.copyFrom(_this._virtualDragMesh.absolutePosition);\n\n          _this.dragging = true;\n          _this.currentDraggingPointerID = pointerInfo.event.pointerId; // Detach camera controls\n\n          if (_this.detachCameraControls && _this._pointerCamera && !_this._pointerCamera.leftCamera) {\n            if (_this._pointerCamera.inputs.attachedToElement) {\n              _this._pointerCamera.detachControl();\n\n              _this._attachedToElement = true;\n            } else {\n              _this._attachedToElement = false;\n            }\n          }\n\n          PivotTools._RestorePivotPoint(pickedMesh);\n\n          _this.onDragStartObservable.notifyObservers({});\n        }\n      } else if (pointerInfo.type == PointerEventTypes.POINTERUP || pointerInfo.type == PointerEventTypes.POINTERDOUBLETAP) {\n        if (_this.currentDraggingPointerID == pointerInfo.event.pointerId) {\n          _this.dragging = false;\n          _this._moving = false;\n          _this.currentDraggingPointerID = -1;\n          pickedMesh = null;\n\n          _this._virtualOriginMesh.removeChild(_this._virtualDragMesh); // Reattach camera controls\n\n\n          if (_this.detachCameraControls && _this._attachedToElement && _this._pointerCamera && !_this._pointerCamera.leftCamera) {\n            _this._pointerCamera.attachControl(true);\n\n            _this._attachedToElement = false;\n          }\n\n          _this.onDragEndObservable.notifyObservers({});\n        }\n      } else if (pointerInfo.type == PointerEventTypes.POINTERMOVE) {\n        if (_this.currentDraggingPointerID == pointerInfo.event.pointerId && _this.dragging && pointerInfo.pickInfo && pointerInfo.pickInfo.ray && pickedMesh) {\n          var zDragFactor = _this.zDragFactor;\n\n          if (_this._pointerCamera && _this._pointerCamera.cameraRigMode == Camera.RIG_MODE_NONE) {\n            pointerInfo.pickInfo.ray.origin.copyFrom(_this._pointerCamera.globalPosition);\n            zDragFactor = 0;\n          } // Calculate controller drag distance in controller space\n\n\n          var originDragDifference = pointerInfo.pickInfo.ray.origin.subtract(lastSixDofOriginPosition);\n          lastSixDofOriginPosition.copyFrom(pointerInfo.pickInfo.ray.origin);\n          var localOriginDragDifference = -Vector3.Dot(originDragDifference, pointerInfo.pickInfo.ray.direction);\n\n          _this._virtualOriginMesh.addChild(_this._virtualDragMesh); // Determine how much the controller moved to/away towards the dragged object and use this to move the object further when its further away\n\n\n          _this._virtualDragMesh.position.z -= _this._virtualDragMesh.position.z < 1 ? localOriginDragDifference * _this.zDragFactor : localOriginDragDifference * zDragFactor * _this._virtualDragMesh.position.z;\n\n          if (_this._virtualDragMesh.position.z < 0) {\n            _this._virtualDragMesh.position.z = 0;\n          } // Update the controller position\n\n\n          _this._virtualOriginMesh.position.copyFrom(pointerInfo.pickInfo.ray.origin);\n\n          _this._virtualOriginMesh.lookAt(pointerInfo.pickInfo.ray.origin.add(pointerInfo.pickInfo.ray.direction));\n\n          _this._virtualOriginMesh.removeChild(_this._virtualDragMesh); // Move the virtualObjectsPosition into the picked mesh's space if needed\n\n\n          _this._targetPosition.copyFrom(_this._virtualDragMesh.absolutePosition);\n\n          if (pickedMesh.parent) {\n            Vector3.TransformCoordinatesToRef(_this._targetPosition, Matrix.Invert(pickedMesh.parent.getWorldMatrix()), _this._targetPosition);\n          }\n\n          if (!_this._moving) {\n            _this._startingOrientation.copyFrom(_this._virtualDragMesh.rotationQuaternion);\n          }\n\n          _this._moving = true;\n        }\n      }\n    });\n    var tmpQuaternion = new Quaternion(); // On every frame move towards target scaling to avoid jitter caused by vr controllers\n\n    this._sceneRenderObserver = ownerNode.getScene().onBeforeRenderObservable.add(function () {\n      if (_this.dragging && _this._moving && pickedMesh) {\n        PivotTools._RemoveAndStorePivotPoint(pickedMesh); // Slowly move mesh to avoid jitter\n\n\n        pickedMesh.position.addInPlace(_this._targetPosition.subtract(pickedMesh.position).scale(_this.dragDeltaRatio));\n\n        if (_this.rotateDraggedObject) {\n          // Get change in rotation\n          tmpQuaternion.copyFrom(_this._startingOrientation);\n          tmpQuaternion.x = -tmpQuaternion.x;\n          tmpQuaternion.y = -tmpQuaternion.y;\n          tmpQuaternion.z = -tmpQuaternion.z;\n\n          _this._virtualDragMesh.rotationQuaternion.multiplyToRef(tmpQuaternion, tmpQuaternion); // Convert change in rotation to only y axis rotation\n\n\n          Quaternion.RotationYawPitchRollToRef(tmpQuaternion.toEulerAngles(\"xyz\").y, 0, 0, tmpQuaternion);\n          tmpQuaternion.multiplyToRef(_this._startingOrientation, tmpQuaternion); // Slowly move mesh to avoid jitter\n\n          var oldParent = pickedMesh.parent; // Only rotate the mesh if it's parent has uniform scaling\n\n          if (!oldParent || oldParent.scaling && !oldParent.scaling.isNonUniformWithinEpsilon(0.001)) {\n            pickedMesh.setParent(null);\n            Quaternion.SlerpToRef(pickedMesh.rotationQuaternion, tmpQuaternion, _this.dragDeltaRatio, pickedMesh.rotationQuaternion);\n            pickedMesh.setParent(oldParent);\n          }\n        }\n\n        PivotTools._RestorePivotPoint(pickedMesh);\n\n        _this.onDragObservable.notifyObservers();\n      }\n    });\n  };\n  /**\r\n   *  Detaches the behavior from the mesh\r\n   */\n\n\n  SixDofDragBehavior.prototype.detach = function () {\n    if (this._scene) {\n      if (this.detachCameraControls && this._attachedToElement && this._pointerCamera && !this._pointerCamera.leftCamera) {\n        this._pointerCamera.attachControl(true);\n\n        this._attachedToElement = false;\n      }\n\n      this._scene.onPointerObservable.remove(this._pointerObserver);\n    }\n\n    if (this._ownerNode) {\n      this._ownerNode.getScene().onBeforeRenderObservable.remove(this._sceneRenderObserver);\n    }\n\n    if (this._virtualOriginMesh) {\n      this._virtualOriginMesh.dispose();\n    }\n\n    if (this._virtualDragMesh) {\n      this._virtualDragMesh.dispose();\n    }\n\n    this.onDragEndObservable.clear();\n    this.onDragObservable.clear();\n    this.onDragStartObservable.clear();\n  };\n\n  return SixDofDragBehavior;\n}();\n\nexport { SixDofDragBehavior };","map":null,"metadata":{},"sourceType":"module"}