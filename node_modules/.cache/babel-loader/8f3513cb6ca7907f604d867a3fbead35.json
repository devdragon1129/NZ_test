{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar bn_js_1 = tslib_1.__importDefault(require(\"bn.js\"));\n\nvar util_1 = require(\"util\");\n\nvar bn_1 = require(\"./bn\");\n\nvar number_to_bn_1 = require(\"./number-to-bn\");\n\nvar zero = new bn_js_1.default(0);\nvar negative1 = new bn_js_1.default(-1);\nexports.unitMap = {\n  noether: '0',\n  wei: '1',\n  kwei: '1000',\n  Kwei: '1000',\n  babbage: '1000',\n  femtoether: '1000',\n  mwei: '1000000',\n  Mwei: '1000000',\n  lovelace: '1000000',\n  picoether: '1000000',\n  gwei: '1000000000',\n  Gwei: '1000000000',\n  shannon: '1000000000',\n  nanoether: '1000000000',\n  nano: '1000000000',\n  szabo: '1000000000000',\n  microether: '1000000000000',\n  micro: '1000000000000',\n  finney: '1000000000000000',\n  milliether: '1000000000000000',\n  milli: '1000000000000000',\n  ether: '1000000000000000000',\n  kether: '1000000000000000000000',\n  grand: '1000000000000000000000',\n  mether: '1000000000000000000000000',\n  gether: '1000000000000000000000000000',\n  tether: '1000000000000000000000000000000'\n};\n/**\n * Returns value of unit in Wei\n *\n * @method getUnitValue\n * @param {String} unit the unit to convert to, default ether\n * @returns {BN} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\n\nfunction getUnitValue(unit) {\n  unit = unit ? unit.toLowerCase() : 'ether';\n\n  if (!exports.unitMap[unit]) {\n    throw new Error('This unit \"' + unit + '\" doesn\\'t exist, please use the one of the following units' + JSON.stringify(exports.unitMap, null, 2));\n  }\n\n  return unit;\n}\n\nfunction fromWei(num, unit) {\n  unit = getUnitValue(unit);\n\n  if (!bn_1.isBN(num) && !util_1.isString(num)) {\n    throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n  }\n\n  return bn_1.isBN(num) ? new bn_js_1.default(ethjsFromWei(num, unit)) : ethjsFromWei(num, unit);\n}\n\nexports.fromWei = fromWei;\n\nfunction toWei(num, unit) {\n  unit = getUnitValue(unit);\n\n  if (!bn_1.isBN(num) && !util_1.isString(num)) {\n    throw new Error('Please pass numbers as strings or BigNumber objects to avoid precision errors.');\n  }\n\n  return bn_1.isBN(num) ? ethjsToWei(num, unit) : ethjsToWei(num, unit).toString(10);\n}\n\nexports.toWei = toWei;\n/**\n * Returns value of unit in Wei\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default ether\n * @returns {BigNumber} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\n\nfunction getValueOfUnit(unitInput) {\n  var unit = unitInput ? unitInput.toLowerCase() : 'ether';\n  var unitValue = exports.unitMap[unit]; // eslint-disable-line\n\n  if (typeof unitValue !== 'string') {\n    throw new Error(\"[ethjs-unit] the unit provided \".concat(unitInput, \" doesn't exists, please use the one of the following units \").concat(JSON.stringify(exports.unitMap, null, 2)));\n  }\n\n  return new bn_js_1.default(unitValue, 10);\n}\n\nfunction numberToString(arg) {\n  if (typeof arg === 'string') {\n    if (!arg.match(/^-?[0-9.]+$/)) {\n      throw new Error(\"while converting number to string, invalid number value '\".concat(arg, \"', should be a number matching (^-?[0-9.]+).\"));\n    }\n\n    return arg;\n  } else if (typeof arg === 'number') {\n    return String(arg);\n  } else if (typeof arg === 'object' && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {\n    if (arg.toPrecision) {\n      return String(arg.toPrecision());\n    } else {\n      // eslint-disable-line\n      return arg.toString(10);\n    }\n  }\n\n  throw new Error(\"while converting number to string, invalid number value '\".concat(arg, \"' type \").concat(typeof arg, \".\"));\n}\n\nfunction ethjsFromWei(weiInput, unit, optionsInput) {\n  var wei = number_to_bn_1.numberToBN(weiInput); // eslint-disable-line\n\n  var negative = wei.lt(zero); // eslint-disable-line\n\n  var base = getValueOfUnit(unit);\n  var baseLength = exports.unitMap[unit].length - 1 || 1;\n  var options = optionsInput || {};\n\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n\n  var fraction = wei.mod(base).toString(10); // eslint-disable-line\n\n  while (fraction.length < baseLength) {\n    fraction = \"0\".concat(fraction);\n  }\n\n  if (!options.pad) {\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n  }\n\n  var whole = wei.div(base).toString(10); // eslint-disable-line\n\n  if (options.commify) {\n    whole = whole.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  }\n\n  var value = \"\".concat(whole).concat(fraction === '0' ? '' : \".\".concat(fraction)); // eslint-disable-line\n\n  if (negative) {\n    value = \"-\".concat(value);\n  }\n\n  return value;\n}\n\nfunction ethjsToWei(etherInput, unit) {\n  var ether = numberToString(etherInput); // eslint-disable-line\n\n  var base = getValueOfUnit(unit);\n  var baseLength = exports.unitMap[unit].length - 1 || 1; // Is it negative?\n\n  var negative = ether.substring(0, 1) === '-'; // eslint-disable-line\n\n  if (negative) {\n    ether = ether.substring(1);\n  }\n\n  if (ether === '.') {\n    throw new Error(\"[ethjs-unit] while converting number \".concat(etherInput, \" to wei, invalid value\"));\n  } // Split it into a whole and fractional part\n\n\n  var comps = ether.split('.'); // eslint-disable-line\n\n  if (comps.length > 2) {\n    throw new Error(\"[ethjs-unit] while converting number \".concat(etherInput, \" to wei,  too many decimal points\"));\n  }\n\n  var whole = comps[0];\n  var fraction = comps[1];\n\n  if (!whole) {\n    whole = '0';\n  }\n\n  if (!fraction) {\n    fraction = '0';\n  }\n\n  if (fraction.length > baseLength) {\n    throw new Error(\"[ethjs-unit] while converting number \".concat(etherInput, \" to wei, too many decimal places\"));\n  }\n\n  while (fraction.length < baseLength) {\n    fraction += '0';\n  }\n\n  whole = new bn_js_1.default(whole);\n  fraction = new bn_js_1.default(fraction);\n  var wei = whole.mul(base).add(fraction); // eslint-disable-line\n\n  if (negative) {\n    wei = wei.mul(negative1);\n  }\n\n  return new bn_js_1.default(wei.toString(10), 10);\n}","map":null,"metadata":{},"sourceType":"script"}