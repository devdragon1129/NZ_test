{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/ProjectCard/ProjectCard.tsx\";\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Confirm, Button } from 'decentraland-ui';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { locations } from 'routing/locations';\nimport { isRemoteURL } from 'modules/media/utils';\nimport { getProjectDimensions } from 'modules/project/utils';\nimport DeploymentStatus from 'components/DeploymentStatus';\nimport Icon from 'components/Icon';\nimport { OptionsDropdown } from 'components/OptionsDropdown';\nimport './ProjectCard.css';\n\nvar ProjectCard = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ProjectCard, _React$PureComponent);\n\n  function ProjectCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ProjectCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ProjectCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isDeleting: false\n    };\n\n    _this.handleOnClick = function () {\n      var _this$props = _this.props,\n          onClick = _this$props.onClick,\n          project = _this$props.project;\n\n      if (onClick) {\n        onClick(project);\n      }\n    };\n\n    _this.handleConfirmDeleteProject = function () {\n      _this.setState({\n        isDeleting: true\n      });\n    };\n\n    _this.handleCancelDeleteProject = function () {\n      _this.setState({\n        isDeleting: false\n      });\n    };\n\n    _this.handleDeleteProject = function () {\n      var _this$props2 = _this.props,\n          project = _this$props2.project,\n          onDeleteProject = _this$props2.onDeleteProject;\n      onDeleteProject(project);\n\n      _this.setState({\n        isDeleting: false\n      });\n    };\n\n    _this.handleDuplicateProject = function () {\n      var _this$props3 = _this.props,\n          project = _this$props3.project,\n          onDuplicateProject = _this$props3.onDuplicateProject;\n      onDuplicateProject(project);\n    };\n\n    _this.handleExportScene = function () {\n      _this.props.onOpenModal('ExportModal', {\n        project: _this.props.project\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ProjectCard, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          project = _this$props4.project,\n          items = _this$props4.items,\n          onClick = _this$props4.onClick,\n          isUploading = _this$props4.isUploading,\n          hasError = _this$props4.hasError;\n      var isDeleting = this.state.isDeleting;\n      var isFromScenePool = ('likes' in project);\n      var style = {};\n      var classes = 'ProjectCard';\n      var Overlay = null;\n\n      if (project.thumbnail) {\n        // prevent caching remote images when they are updated\n        var url = project.thumbnail;\n\n        if (url && isRemoteURL(url)) {\n          url += \"?updated_at=\".concat(+new Date(project.updatedAt));\n        }\n\n        style = {\n          backgroundImage: \"url(\".concat(url, \")\")\n        };\n        classes += ' has-thumbnail';\n        Overlay = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"overlay\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }\n        });\n      }\n\n      var children = /*#__PURE__*/React.createElement(React.Fragment, null, Overlay, /*#__PURE__*/React.createElement(DeploymentStatus, {\n        projectId: project.id,\n        className: \"deployment-status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }\n      }), isFromScenePool ? null : /*#__PURE__*/React.createElement(OptionsDropdown, {\n        className: \"options-dropdown\",\n        options: [{\n          text: t('home_page.project_actions.duplicate_project'),\n          handler: this.handleDuplicateProject\n        }, {\n          text: t('home_page.project_actions.export_project'),\n          handler: this.handleExportScene\n        }, {\n          text: t('home_page.project_actions.delete_project'),\n          handler: this.handleConfirmDeleteProject\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"project-data\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"title-wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }\n      }, project.title), isUploading ? /*#__PURE__*/React.createElement(Icon, {\n        name: \"cloud-upload\",\n        className: \"is-uploading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 28\n        }\n      }) : null, !isUploading && hasError ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"error-indicator\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 41\n        }\n      }) : null), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"description\",\n        title: project.description,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }\n      }, getProjectDimensions(project), \" \", items > 0 && \"- \".concat(items, \" \").concat(t('project_card.items')))));\n      return /*#__PURE__*/React.createElement(React.Fragment, null, onClick ? /*#__PURE__*/React.createElement(\"div\", {\n        className: classes,\n        onClick: this.handleOnClick,\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }\n      }, children) : /*#__PURE__*/React.createElement(Link, {\n        to: isFromScenePool ? locations.poolView(project.id, 'pool') : locations.sceneDetail(project.id),\n        className: classes,\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }\n      }, children), /*#__PURE__*/React.createElement(Confirm, {\n        size: \"tiny\",\n        open: isDeleting,\n        header: t('project_card.confirm_delete_header', {\n          title: project.title\n        }),\n        content: t('project_card.confirm_delete_content', {\n          title: project.title\n        }),\n        confirmButton: /*#__PURE__*/React.createElement(Button, {\n          primary: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 26\n          }\n        }, t('global.confirm')),\n        cancelButton: /*#__PURE__*/React.createElement(Button, {\n          secondary: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }\n        }, t('global.cancel')),\n        onCancel: this.handleCancelDeleteProject,\n        onConfirm: this.handleDeleteProject,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return ProjectCard;\n}(React.PureComponent);\n\nProjectCard.defaultProps = {\n  items: 0\n};\nexport { ProjectCard as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/ProjectCard/ProjectCard.tsx"],"names":["React","Link","Confirm","Button","t","locations","isRemoteURL","getProjectDimensions","DeploymentStatus","Icon","OptionsDropdown","ProjectCard","state","isDeleting","handleOnClick","props","onClick","project","handleConfirmDeleteProject","setState","handleCancelDeleteProject","handleDeleteProject","onDeleteProject","handleDuplicateProject","onDuplicateProject","handleExportScene","onOpenModal","items","isUploading","hasError","isFromScenePool","style","classes","Overlay","thumbnail","url","Date","updatedAt","backgroundImage","children","id","text","handler","title","description","poolView","sceneDetail","PureComponent","defaultProps"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Confirm, Button } from 'decentraland-ui'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\n\nimport { locations } from 'routing/locations'\nimport { Pool } from 'modules/pool/types'\nimport { isRemoteURL } from 'modules/media/utils'\nimport { getProjectDimensions } from 'modules/project/utils'\nimport DeploymentStatus from 'components/DeploymentStatus'\nimport Icon from 'components/Icon'\nimport { OptionsDropdown } from 'components/OptionsDropdown'\nimport { Props, DefaultProps, State } from './ProjectCard.types'\nimport './ProjectCard.css'\n\nexport default class ProjectCard extends React.PureComponent<Props, State> {\n  static defaultProps: DefaultProps = {\n    items: 0\n  }\n\n  state = {\n    isDeleting: false\n  }\n\n  handleOnClick = () => {\n    const { onClick, project } = this.props\n    if (onClick) {\n      onClick(project)\n    }\n  }\n\n  handleConfirmDeleteProject = () => {\n    this.setState({ isDeleting: true })\n  }\n\n  handleCancelDeleteProject = () => {\n    this.setState({ isDeleting: false })\n  }\n\n  handleDeleteProject = () => {\n    const { project, onDeleteProject } = this.props\n    onDeleteProject(project)\n    this.setState({ isDeleting: false })\n  }\n\n  handleDuplicateProject = () => {\n    const { project, onDuplicateProject } = this.props\n    onDuplicateProject(project)\n  }\n\n  handleExportScene = () => {\n    this.props.onOpenModal('ExportModal', { project: this.props.project })\n  }\n\n  render() {\n    const { project, items, onClick, isUploading, hasError } = this.props\n    const { isDeleting } = this.state\n    const isFromScenePool = 'likes' in (project as Pool)\n\n    let style = {}\n    let classes = 'ProjectCard'\n    let Overlay = null\n\n    if (project.thumbnail) {\n      // prevent caching remote images when they are updated\n      let url = project.thumbnail\n      if (url && isRemoteURL(url)) {\n        url += `?updated_at=${+new Date(project.updatedAt)}`\n      }\n      style = { backgroundImage: `url(${url})` }\n      classes += ' has-thumbnail'\n      Overlay = <div className=\"overlay\" />\n    }\n\n    const children = (\n      <>\n        {Overlay}\n        <DeploymentStatus projectId={project.id} className=\"deployment-status\" />\n        {isFromScenePool ? null : (\n          <OptionsDropdown\n            className=\"options-dropdown\"\n            options={[\n              { text: t('home_page.project_actions.duplicate_project'), handler: this.handleDuplicateProject },\n              { text: t('home_page.project_actions.export_project'), handler: this.handleExportScene },\n              { text: t('home_page.project_actions.delete_project'), handler: this.handleConfirmDeleteProject }\n            ]}\n          />\n        )}\n        <div className=\"project-data\">\n          <div className=\"title-wrapper\">\n            <div className=\"title\">{project.title}</div>\n            {isUploading ? <Icon name=\"cloud-upload\" className=\"is-uploading\" /> : null}\n            {!isUploading && hasError ? <div className=\"error-indicator\" /> : null}\n          </div>\n          <div className=\"description\" title={project.description}>\n            {getProjectDimensions(project)} {items > 0 && `- ${items} ${t('project_card.items')}`}\n          </div>\n        </div>\n      </>\n    )\n\n    return (\n      <>\n        {onClick ? (\n          <div className={classes} onClick={this.handleOnClick} style={style}>\n            {children}\n          </div>\n        ) : (\n          <Link\n            to={isFromScenePool ? locations.poolView(project.id, 'pool') : locations.sceneDetail(project.id)}\n            className={classes}\n            style={style}\n          >\n            {children}\n          </Link>\n        )}\n\n        <Confirm\n          size=\"tiny\"\n          open={isDeleting}\n          header={t('project_card.confirm_delete_header', { title: project.title })}\n          content={t('project_card.confirm_delete_content', { title: project.title })}\n          confirmButton={<Button primary>{t('global.confirm')}</Button>}\n          cancelButton={<Button secondary>{t('global.cancel')}</Button>}\n          onCancel={this.handleCancelDeleteProject}\n          onConfirm={this.handleDeleteProject}\n        />\n      </>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}