{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/LandPage/TableRow/TableRow.tsx\";\nimport * as React from 'react';\nimport { Table, Column, Row } from 'decentraland-ui';\nimport { Atlas } from 'components/Atlas';\nimport Profile from 'components/Profile';\nimport InlineList from '../InlineList';\nimport { coordsToId, getCoords, LAND_POOL_ADDRESS } from 'modules/land/utils';\nimport { isEqual } from 'lib/address';\nimport { locations } from 'routing/locations';\nimport './TableRow.css';\n\nvar sortLandPoolLast = function sortLandPoolLast(a, b) {\n  if (isEqual(a, LAND_POOL_ADDRESS)) {\n    return 1;\n  } else if (isEqual(b, LAND_POOL_ADDRESS)) {\n    return -1;\n  }\n\n  return a > b ? 1 : -1;\n};\n\nvar TableRow = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(TableRow, _React$PureComponent);\n\n  function TableRow() {\n    _classCallCheck(this, TableRow);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TableRow).apply(this, arguments));\n  }\n\n  _createClass(TableRow, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var _this$props = this.props,\n          land = _this$props.land,\n          deployments = _this$props.deployments,\n          onNavigate = _this$props.onNavigate;\n      var coords = getCoords(land);\n      return /*#__PURE__*/React.createElement(Table.Row, {\n        className: \"TableRow\",\n        onClick: function onClick() {\n          return onNavigate(locations.landDetail(land.id));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Table.Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        width: 67,\n        grow: false,\n        shrink: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Atlas, {\n        landId: land.id,\n        width: 45,\n        height: 45,\n        isDraggable: false,\n        size: 9,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(Column, {\n        className: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }\n      }, land.name))), /*#__PURE__*/React.createElement(Table.Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }, coordsToId(coords.x, coords.y)), /*#__PURE__*/React.createElement(Table.Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Profile, {\n        address: land.owner,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Table.Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(InlineList, {\n        list: land.operators.sort(sortLandPoolLast).map(function (operator) {\n          return /*#__PURE__*/React.createElement(Profile, {\n            address: operator,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 15\n            }\n          });\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Table.Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(InlineList, {\n        list: deployments.map(function (deployment) {\n          return deployment.name;\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n\n  return TableRow;\n}(React.PureComponent);\n\nexport { TableRow as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/LandPage/TableRow/TableRow.tsx"],"names":["React","Table","Column","Row","Atlas","Profile","InlineList","coordsToId","getCoords","LAND_POOL_ADDRESS","isEqual","locations","sortLandPoolLast","a","b","TableRow","props","land","deployments","onNavigate","coords","landDetail","id","name","x","y","owner","operators","sort","map","operator","deployment","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Table, Column, Row } from 'decentraland-ui'\n\nimport { Atlas } from 'components/Atlas'\nimport Profile from 'components/Profile'\nimport InlineList from '../InlineList'\nimport { coordsToId, getCoords, LAND_POOL_ADDRESS } from 'modules/land/utils'\nimport { isEqual } from 'lib/address'\nimport { locations } from 'routing/locations'\nimport { Props } from './TableRow.types'\nimport './TableRow.css'\n\nconst sortLandPoolLast = (a: string, b: string) => {\n  if (isEqual(a, LAND_POOL_ADDRESS)) {\n    return 1\n  } else if (isEqual(b, LAND_POOL_ADDRESS)) {\n    return -1\n  }\n  return a > b ? 1 : -1\n}\n\nexport default class TableRow extends React.PureComponent<Props> {\n  render() {\n    const { land, deployments, onNavigate } = this.props\n    const coords = getCoords(land)\n    return (\n      <Table.Row className=\"TableRow\" onClick={() => onNavigate(locations.landDetail(land.id))}>\n        <Table.Cell>\n          <Row>\n            <Column width={67} grow={false} shrink={false}>\n              <Atlas landId={land.id} width={45} height={45} isDraggable={false} size={9} />\n            </Column>\n            <Column className=\"name\">{land.name}</Column>\n          </Row>\n        </Table.Cell>\n        <Table.Cell>{coordsToId(coords.x, coords.y)}</Table.Cell>\n        <Table.Cell>\n          <Profile address={land.owner} />\n        </Table.Cell>\n        <Table.Cell>\n          <InlineList\n            list={land.operators.sort(sortLandPoolLast).map(operator => (\n              <Profile address={operator} />\n            ))}\n          />\n        </Table.Cell>\n        <Table.Cell>\n          <InlineList list={deployments.map(deployment => deployment.name)} />\n        </Table.Cell>\n      </Table.Row>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}