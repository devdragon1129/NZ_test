{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\nimport { Scalar } from '../../Maths/math.scalar';\nimport { Tools } from '../../Misc/tools';\n/**\r\n * Manage the mouse wheel inputs to control an arc rotate camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar ArcRotateCameraMouseWheelInput =\n/** @class */\nfunction () {\n  function ArcRotateCameraMouseWheelInput() {\n    /**\r\n     * Gets or Set the mouse wheel precision or how fast is the camera zooming.\r\n     */\n    this.wheelPrecision = 3.0;\n    /**\r\n     * wheelDeltaPercentage will be used instead of wheelPrecision if different from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when wheel is used.\r\n     */\n\n    this.wheelDeltaPercentage = 0;\n  }\n\n  ArcRotateCameraMouseWheelInput.prototype.computeDeltaFromMouseWheelLegacyEvent = function (mouseWheelDelta, radius) {\n    var delta = 0;\n    var wheelDelta = mouseWheelDelta * 0.01 * this.wheelDeltaPercentage * radius;\n\n    if (mouseWheelDelta > 0) {\n      delta = wheelDelta / (1.0 + this.wheelDeltaPercentage);\n    } else {\n      delta = wheelDelta * (1.0 + this.wheelDeltaPercentage);\n    }\n\n    return delta;\n  };\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  ArcRotateCameraMouseWheelInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this; // was there a second variable defined?\n\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    this._wheel = function (p, s) {\n      //sanity check - this should be a PointerWheel event.\n      if (p.type !== PointerEventTypes.POINTERWHEEL) {\n        return;\n      }\n\n      var event = p.event;\n      var delta = 0;\n      var mouseWheelLegacyEvent = event;\n      var wheelDelta = 0;\n\n      if (mouseWheelLegacyEvent.wheelDelta) {\n        wheelDelta = mouseWheelLegacyEvent.wheelDelta;\n      } else {\n        wheelDelta = -(event.deltaY || event.detail) * 60;\n      }\n\n      if (_this.wheelDeltaPercentage) {\n        delta = _this.computeDeltaFromMouseWheelLegacyEvent(wheelDelta, _this.camera.radius); // If zooming in, estimate the target radius and use that to compute the delta for inertia\n        // this will stop multiple scroll events zooming in from adding too much inertia\n\n        if (delta > 0) {\n          var estimatedTargetRadius = _this.camera.radius;\n          var targetInertia = _this.camera.inertialRadiusOffset + delta;\n\n          for (var i = 0; i < 20 && Math.abs(targetInertia) > 0.001; i++) {\n            estimatedTargetRadius -= targetInertia;\n            targetInertia *= _this.camera.inertia;\n          }\n\n          estimatedTargetRadius = Scalar.Clamp(estimatedTargetRadius, 0, Number.MAX_VALUE);\n          delta = _this.computeDeltaFromMouseWheelLegacyEvent(wheelDelta, estimatedTargetRadius);\n        }\n      } else {\n        delta = wheelDelta / (_this.wheelPrecision * 40);\n      }\n\n      if (delta) {\n        _this.camera.inertialRadiusOffset += delta;\n      }\n\n      if (event.preventDefault) {\n        if (!noPreventDefault) {\n          event.preventDefault();\n        }\n      }\n    };\n\n    this._observer = this.camera.getScene().onPointerObservable.add(this._wheel, PointerEventTypes.POINTERWHEEL);\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  ArcRotateCameraMouseWheelInput.prototype.detachControl = function (ignored) {\n    if (this._observer) {\n      this.camera.getScene().onPointerObservable.remove(this._observer);\n      this._observer = null;\n      this._wheel = null;\n    }\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  ArcRotateCameraMouseWheelInput.prototype.getClassName = function () {\n    return \"ArcRotateCameraMouseWheelInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  ArcRotateCameraMouseWheelInput.prototype.getSimpleName = function () {\n    return \"mousewheel\";\n  };\n\n  __decorate([serialize()], ArcRotateCameraMouseWheelInput.prototype, \"wheelPrecision\", void 0);\n\n  __decorate([serialize()], ArcRotateCameraMouseWheelInput.prototype, \"wheelDeltaPercentage\", void 0);\n\n  return ArcRotateCameraMouseWheelInput;\n}();\n\nexport { ArcRotateCameraMouseWheelInput };\nCameraInputTypes[\"ArcRotateCameraMouseWheelInput\"] = ArcRotateCameraMouseWheelInput;","map":null,"metadata":{},"sourceType":"module"}