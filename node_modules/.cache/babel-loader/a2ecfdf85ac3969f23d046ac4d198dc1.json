{"ast":null,"code":"import { Tools } from \"../Misc/tools\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { AbstractScene } from \"../abstractScene\";\nimport { LensFlareSystem } from \"./lensFlareSystem\"; // Adds the parser to the scene parsers.\n\nAbstractScene.AddParser(SceneComponentConstants.NAME_LENSFLARESYSTEM, function (parsedData, scene, container, rootUrl) {\n  // Lens flares\n  if (parsedData.lensFlareSystems !== undefined && parsedData.lensFlareSystems !== null) {\n    if (!container.lensFlareSystems) {\n      container.lensFlareSystems = new Array();\n    }\n\n    for (var index = 0, cache = parsedData.lensFlareSystems.length; index < cache; index++) {\n      var parsedLensFlareSystem = parsedData.lensFlareSystems[index];\n      var lf = LensFlareSystem.Parse(parsedLensFlareSystem, scene, rootUrl);\n      container.lensFlareSystems.push(lf);\n    }\n  }\n});\n\nAbstractScene.prototype.getLensFlareSystemByName = function (name) {\n  for (var index = 0; index < this.lensFlareSystems.length; index++) {\n    if (this.lensFlareSystems[index].name === name) {\n      return this.lensFlareSystems[index];\n    }\n  }\n\n  return null;\n};\n\nAbstractScene.prototype.getLensFlareSystemByID = function (id) {\n  for (var index = 0; index < this.lensFlareSystems.length; index++) {\n    if (this.lensFlareSystems[index].id === id) {\n      return this.lensFlareSystems[index];\n    }\n  }\n\n  return null;\n};\n\nAbstractScene.prototype.removeLensFlareSystem = function (toRemove) {\n  var index = this.lensFlareSystems.indexOf(toRemove);\n\n  if (index !== -1) {\n    this.lensFlareSystems.splice(index, 1);\n  }\n\n  return index;\n};\n\nAbstractScene.prototype.addLensFlareSystem = function (newLensFlareSystem) {\n  this.lensFlareSystems.push(newLensFlareSystem);\n};\n/**\r\n * Defines the lens flare scene component responsible to manage any lens flares\r\n * in a given scene.\r\n */\n\n\nvar LensFlareSystemSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function LensFlareSystemSceneComponent(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_LENSFLARESYSTEM;\n    this.scene = scene;\n    scene.lensFlareSystems = new Array();\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.register = function () {\n    this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_LENSFLARESYSTEM, this, this._draw);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.rebuild = function () {// Nothing to do for lens flare\n  };\n  /**\r\n   * Adds all the elements from the container to the scene\r\n   * @param container the container holding the elements\r\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.addFromContainer = function (container) {\n    var _this = this;\n\n    if (!container.lensFlareSystems) {\n      return;\n    }\n\n    container.lensFlareSystems.forEach(function (o) {\n      _this.scene.addLensFlareSystem(o);\n    });\n  };\n  /**\r\n   * Removes all the elements in the container from the scene\r\n   * @param container contains the elements to remove\r\n   * @param dispose if the removed element should be disposed (default: false)\r\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.removeFromContainer = function (container, dispose) {\n    var _this = this;\n\n    if (!container.lensFlareSystems) {\n      return;\n    }\n\n    container.lensFlareSystems.forEach(function (o) {\n      _this.scene.removeLensFlareSystem(o);\n\n      if (dispose) {\n        o.dispose();\n      }\n    });\n  };\n  /**\r\n   * Serializes the component data to the specified json object\r\n   * @param serializationObject The object to serialize to\r\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.serialize = function (serializationObject) {\n    // Lens flares\n    serializationObject.lensFlareSystems = [];\n    var lensFlareSystems = this.scene.lensFlareSystems;\n\n    for (var _i = 0, lensFlareSystems_1 = lensFlareSystems; _i < lensFlareSystems_1.length; _i++) {\n      var lensFlareSystem = lensFlareSystems_1[_i];\n      serializationObject.lensFlareSystems.push(lensFlareSystem.serialize());\n    }\n  };\n  /**\r\n   * Disposes the component and the associated ressources.\r\n   */\n\n\n  LensFlareSystemSceneComponent.prototype.dispose = function () {\n    var lensFlareSystems = this.scene.lensFlareSystems;\n\n    while (lensFlareSystems.length) {\n      lensFlareSystems[0].dispose();\n    }\n  };\n\n  LensFlareSystemSceneComponent.prototype._draw = function (camera) {\n    // Lens flares\n    if (this.scene.lensFlaresEnabled) {\n      var lensFlareSystems = this.scene.lensFlareSystems;\n      Tools.StartPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\n\n      for (var _i = 0, lensFlareSystems_2 = lensFlareSystems; _i < lensFlareSystems_2.length; _i++) {\n        var lensFlareSystem = lensFlareSystems_2[_i];\n\n        if ((camera.layerMask & lensFlareSystem.layerMask) !== 0) {\n          lensFlareSystem.render();\n        }\n      }\n\n      Tools.EndPerformanceCounter(\"Lens flares\", lensFlareSystems.length > 0);\n    }\n  };\n\n  return LensFlareSystemSceneComponent;\n}();\n\nexport { LensFlareSystemSceneComponent };\n\nLensFlareSystem._SceneComponentInitialization = function (scene) {\n  var component = scene._getComponent(SceneComponentConstants.NAME_LENSFLARESYSTEM);\n\n  if (!component) {\n    component = new LensFlareSystemSceneComponent(scene);\n\n    scene._addComponent(component);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}