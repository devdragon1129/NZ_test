{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\nimport { Mesh } from \"../Meshes/mesh\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { VertexBuffer } from \"../Meshes/buffer\";\nimport { VertexData } from \"../Meshes/mesh.vertexData\";\n/**\r\n * Class used to create a trail following a mesh\r\n */\n\nvar TrailMesh =\n/** @class */\nfunction (_super) {\n  __extends(TrailMesh, _super);\n  /**\r\n   * @constructor\r\n   * @param name The value used by scene.getMeshByName() to do a lookup.\r\n   * @param generator The mesh or transform node to generate a trail.\r\n   * @param scene The scene to add this mesh to.\r\n   * @param diameter Diameter of trailing mesh. Default is 1.\r\n   * @param length Length of trailing mesh. Default is 60.\r\n   * @param autoStart Automatically start trailing mesh. Default true.\r\n   */\n\n\n  function TrailMesh(name, generator, scene, diameter, length, autoStart) {\n    if (diameter === void 0) {\n      diameter = 1;\n    }\n\n    if (length === void 0) {\n      length = 60;\n    }\n\n    if (autoStart === void 0) {\n      autoStart = true;\n    }\n\n    var _this = _super.call(this, name, scene) || this;\n\n    _this._sectionPolygonPointsCount = 4;\n    _this._running = false;\n    _this._autoStart = autoStart;\n    _this._generator = generator;\n    _this._diameter = diameter;\n    _this._length = length;\n    _this._sectionVectors = [];\n    _this._sectionNormalVectors = [];\n\n    for (var i = 0; i < _this._sectionPolygonPointsCount; i++) {\n      _this._sectionVectors[i] = Vector3.Zero();\n      _this._sectionNormalVectors[i] = Vector3.Zero();\n    }\n\n    _this._createMesh();\n\n    return _this;\n  }\n  /**\r\n   * \"TrailMesh\"\r\n   * @returns \"TrailMesh\"\r\n   */\n\n\n  TrailMesh.prototype.getClassName = function () {\n    return \"TrailMesh\";\n  };\n\n  TrailMesh.prototype._createMesh = function () {\n    var data = new VertexData();\n    var positions = [];\n    var normals = [];\n    var indices = [];\n    var meshCenter = Vector3.Zero();\n\n    if (this._generator instanceof AbstractMesh && this._generator._boundingInfo) {\n      meshCenter = this._generator._boundingInfo.boundingBox.centerWorld;\n    } else {\n      meshCenter = this._generator.position;\n    }\n\n    var alpha = 2 * Math.PI / this._sectionPolygonPointsCount;\n\n    for (var i = 0; i < this._sectionPolygonPointsCount; i++) {\n      positions.push(meshCenter.x + Math.cos(i * alpha) * this._diameter, meshCenter.y + Math.sin(i * alpha) * this._diameter, meshCenter.z);\n    }\n\n    for (var i = 1; i <= this._length; i++) {\n      for (var j = 0; j < this._sectionPolygonPointsCount; j++) {\n        positions.push(meshCenter.x + Math.cos(j * alpha) * this._diameter, meshCenter.y + Math.sin(j * alpha) * this._diameter, meshCenter.z);\n      }\n\n      var l = positions.length / 3 - 2 * this._sectionPolygonPointsCount;\n\n      for (var j = 0; j < this._sectionPolygonPointsCount - 1; j++) {\n        indices.push(l + j, l + j + this._sectionPolygonPointsCount, l + j + this._sectionPolygonPointsCount + 1);\n        indices.push(l + j, l + j + this._sectionPolygonPointsCount + 1, l + j + 1);\n      }\n\n      indices.push(l + this._sectionPolygonPointsCount - 1, l + this._sectionPolygonPointsCount - 1 + this._sectionPolygonPointsCount, l + this._sectionPolygonPointsCount);\n      indices.push(l + this._sectionPolygonPointsCount - 1, l + this._sectionPolygonPointsCount, l);\n    }\n\n    VertexData.ComputeNormals(positions, indices, normals);\n    data.positions = positions;\n    data.normals = normals;\n    data.indices = indices;\n    data.applyToMesh(this, true);\n\n    if (this._autoStart) {\n      this.start();\n    }\n  };\n  /**\r\n   * Start trailing mesh.\r\n   */\n\n\n  TrailMesh.prototype.start = function () {\n    var _this = this;\n\n    if (!this._running) {\n      this._running = true;\n      this._beforeRenderObserver = this.getScene().onBeforeRenderObservable.add(function () {\n        _this.update();\n      });\n    }\n  };\n  /**\r\n   * Stop trailing mesh.\r\n   */\n\n\n  TrailMesh.prototype.stop = function () {\n    if (this._beforeRenderObserver && this._running) {\n      this._running = false;\n      this.getScene().onBeforeRenderObservable.remove(this._beforeRenderObserver);\n    }\n  };\n  /**\r\n   * Update trailing mesh geometry.\r\n   */\n\n\n  TrailMesh.prototype.update = function () {\n    var positions = this.getVerticesData(VertexBuffer.PositionKind);\n    var normals = this.getVerticesData(VertexBuffer.NormalKind);\n\n    var wm = this._generator.getWorldMatrix();\n\n    if (positions && normals) {\n      for (var i = 3 * this._sectionPolygonPointsCount; i < positions.length; i++) {\n        positions[i - 3 * this._sectionPolygonPointsCount] = positions[i] - normals[i] / this._length * this._diameter;\n      }\n\n      for (var i = 3 * this._sectionPolygonPointsCount; i < normals.length; i++) {\n        normals[i - 3 * this._sectionPolygonPointsCount] = normals[i];\n      }\n\n      var l = positions.length - 3 * this._sectionPolygonPointsCount;\n      var alpha = 2 * Math.PI / this._sectionPolygonPointsCount;\n\n      for (var i = 0; i < this._sectionPolygonPointsCount; i++) {\n        this._sectionVectors[i].copyFromFloats(Math.cos(i * alpha) * this._diameter, Math.sin(i * alpha) * this._diameter, 0);\n\n        this._sectionNormalVectors[i].copyFromFloats(Math.cos(i * alpha), Math.sin(i * alpha), 0);\n\n        Vector3.TransformCoordinatesToRef(this._sectionVectors[i], wm, this._sectionVectors[i]);\n        Vector3.TransformNormalToRef(this._sectionNormalVectors[i], wm, this._sectionNormalVectors[i]);\n      }\n\n      for (var i = 0; i < this._sectionPolygonPointsCount; i++) {\n        positions[l + 3 * i] = this._sectionVectors[i].x;\n        positions[l + 3 * i + 1] = this._sectionVectors[i].y;\n        positions[l + 3 * i + 2] = this._sectionVectors[i].z;\n        normals[l + 3 * i] = this._sectionNormalVectors[i].x;\n        normals[l + 3 * i + 1] = this._sectionNormalVectors[i].y;\n        normals[l + 3 * i + 2] = this._sectionNormalVectors[i].z;\n      }\n\n      this.updateVerticesData(VertexBuffer.PositionKind, positions, true, false);\n      this.updateVerticesData(VertexBuffer.NormalKind, normals, true, false);\n    }\n  };\n  /**\r\n   * Returns a new TrailMesh object.\r\n   * @param name is a string, the name given to the new mesh\r\n   * @param newGenerator use new generator object for cloned trail mesh\r\n   * @returns a new mesh\r\n   */\n\n\n  TrailMesh.prototype.clone = function (name, newGenerator) {\n    if (name === void 0) {\n      name = \"\";\n    }\n\n    return new TrailMesh(name, newGenerator === undefined ? this._generator : newGenerator, this.getScene(), this._diameter, this._length, this._autoStart);\n  };\n  /**\r\n   * Serializes this trail mesh\r\n   * @param serializationObject object to write serialization to\r\n   */\n\n\n  TrailMesh.prototype.serialize = function (serializationObject) {\n    _super.prototype.serialize.call(this, serializationObject);\n  };\n  /**\r\n   * Parses a serialized trail mesh\r\n   * @param parsedMesh the serialized mesh\r\n   * @param scene the scene to create the trail mesh in\r\n   * @returns the created trail mesh\r\n   */\n\n\n  TrailMesh.Parse = function (parsedMesh, scene) {\n    return new TrailMesh(parsedMesh.name, parsedMesh._generator, scene, parsedMesh._diameter, parsedMesh._length, parsedMesh._autoStart);\n  };\n\n  return TrailMesh;\n}(Mesh);\n\nexport { TrailMesh };","map":null,"metadata":{},"sourceType":"module"}