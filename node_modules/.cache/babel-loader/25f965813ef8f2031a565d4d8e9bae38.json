{"ast":null,"code":"import { action } from 'typesafe-actions';\nimport { PreviewType } from 'modules/editor/types'; // Create project from template\n\nexport var CREATE_PROJECT_FROM_TEMPLATE = 'Create project from template';\nexport var createProjectFromTemplate = function createProjectFromTemplate(template) {\n  var meta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return action(CREATE_PROJECT_FROM_TEMPLATE, {\n    template: template\n  }, meta);\n};\n// Create project (like SET_PROJECT but only called on creation)\nexport var CREATE_PROJECT = 'Create project';\nexport var createProject = function createProject(project) {\n  return action(CREATE_PROJECT, {\n    project: project\n  });\n};\n// Set project\nexport var SET_PROJECT = 'Set project';\nexport var setProject = function setProject(project) {\n  return action(SET_PROJECT, {\n    project: project\n  });\n};\n// Edit project\nexport var EDIT_PROJECT = 'Edit project';\nexport var editProject = function editProject(id, project) {\n  return action(EDIT_PROJECT, {\n    id: id,\n    project: project\n  });\n};\n// Share project\nexport var SHARE_PROJECT = 'Share project';\nexport var shareProject = function shareProject(id) {\n  return action(SHARE_PROJECT, {\n    id: id\n  });\n};\n// Edit project thumbnail\nexport var EDIT_PROJECT_THUMBNAIL = 'Edit project thumbnail';\nexport var editProjectThumbnail = function editProjectThumbnail(id, thumbnail) {\n  return action(EDIT_PROJECT_THUMBNAIL, {\n    id: id,\n    thumbnail: thumbnail\n  });\n};\n// Delete project\nexport var DELETE_PROJECT = 'Delete project';\nexport var deleteProject = function deleteProject(project) {\n  return action(DELETE_PROJECT, {\n    project: project\n  });\n};\n// Duplicate project\nexport var DUPLICATE_PROJECT = 'Duplicate project';\nexport var duplicateProject = function duplicateProject(project) {\n  return action(DUPLICATE_PROJECT, {\n    project: project\n  });\n};\n// Export project\nexport var EXPORT_PROJECT_REQUEST = '[Request] Export project';\nexport var EXPORT_PROJECT_SUCCESS = '[Success] Export project';\nexport var exportProjectRequest = function exportProjectRequest(project) {\n  return action(EXPORT_PROJECT_REQUEST, {\n    project: project\n  });\n};\nexport var exportProjectSuccess = function exportProjectSuccess() {\n  return action(EXPORT_PROJECT_SUCCESS, {});\n};\n// Import project\nexport var IMPORT_PROJECT = 'Import project';\nexport var importProject = function importProject(projects) {\n  return action(IMPORT_PROJECT, {\n    projects: projects\n  });\n};\n// Loud cloud projects\nexport var LOAD_PROJECTS_REQUEST = '[Request] Load projects';\nexport var LOAD_PROJECTS_SUCCESS = '[Success] Load projects';\nexport var LOAD_PROJECTS_FAILURE = '[Failure] Load projects';\nexport var loadProjectsRequest = function loadProjectsRequest() {\n  return action(LOAD_PROJECTS_REQUEST, {});\n};\nexport var loadProjectsSuccess = function loadProjectsSuccess(projects) {\n  return action(LOAD_PROJECTS_SUCCESS, {\n    projects: projects\n  });\n};\nexport var loadProjectsFailure = function loadProjectsFailure(error) {\n  return action(LOAD_PROJECTS_FAILURE, {\n    error: error\n  });\n};\n// Load public cloud project\nexport var LOAD_PUBLIC_PROJECT_REQUEST = '[Request] Load public project';\nexport var LOAD_PUBLIC_PROJECT_SUCCESS = '[Success] Load public project';\nexport var LOAD_PUBLIC_PROJECT_FAILURE = '[Failure] Load public project';\nexport var loadPublicProjectRequest = function loadPublicProjectRequest(id, type) {\n  return action(LOAD_PUBLIC_PROJECT_REQUEST, {\n    id: id,\n    type: type\n  });\n};\nexport var loadPublicProjectSuccess = function loadPublicProjectSuccess(project, type) {\n  return action(LOAD_PUBLIC_PROJECT_SUCCESS, {\n    project: project,\n    type: type\n  });\n};\nexport var loadPublicProjectFailure = function loadPublicProjectFailure(error) {\n  return action(LOAD_PUBLIC_PROJECT_FAILURE, {\n    error: error\n  });\n};\n// Load project manifest\nexport var LOAD_MANIFEST_REQUEST = '[Request] Load manifest';\nexport var LOAD_MANIFEST_SUCCESS = '[Success] Load manifest';\nexport var LOAD_MANIFEST_FAILURE = '[Failure] Load manifest';\nexport var loadManifestRequest = function loadManifestRequest(id) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PreviewType.PROJECT;\n  return action(LOAD_MANIFEST_REQUEST, {\n    id: id,\n    type: type\n  });\n};\nexport var loadManifestSuccess = function loadManifestSuccess(manifest) {\n  return action(LOAD_MANIFEST_SUCCESS, {\n    manifest: manifest\n  });\n};\nexport var loadManifestFailure = function loadManifestFailure(error) {\n  return action(LOAD_MANIFEST_FAILURE, {\n    error: error\n  });\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/project/actions.ts"],"names":["action","PreviewType","CREATE_PROJECT_FROM_TEMPLATE","createProjectFromTemplate","template","meta","CREATE_PROJECT","createProject","project","SET_PROJECT","setProject","EDIT_PROJECT","editProject","id","SHARE_PROJECT","shareProject","EDIT_PROJECT_THUMBNAIL","editProjectThumbnail","thumbnail","DELETE_PROJECT","deleteProject","DUPLICATE_PROJECT","duplicateProject","EXPORT_PROJECT_REQUEST","EXPORT_PROJECT_SUCCESS","exportProjectRequest","exportProjectSuccess","IMPORT_PROJECT","importProject","projects","LOAD_PROJECTS_REQUEST","LOAD_PROJECTS_SUCCESS","LOAD_PROJECTS_FAILURE","loadProjectsRequest","loadProjectsSuccess","loadProjectsFailure","error","LOAD_PUBLIC_PROJECT_REQUEST","LOAD_PUBLIC_PROJECT_SUCCESS","LOAD_PUBLIC_PROJECT_FAILURE","loadPublicProjectRequest","type","loadPublicProjectSuccess","loadPublicProjectFailure","LOAD_MANIFEST_REQUEST","LOAD_MANIFEST_SUCCESS","LOAD_MANIFEST_FAILURE","loadManifestRequest","PROJECT","loadManifestSuccess","manifest","loadManifestFailure"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AAOA,SAASC,WAAT,QAA4B,sBAA5B,C,CAEA;;AAEA,OAAO,IAAMC,4BAA4B,GAAG,8BAArC;AAEP,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,QAAD;AAAA,MAAqBC,IAArB,uEAA2D,EAA3D;AAAA,SACvCL,MAAM,CAACE,4BAAD,EAA+B;AAAEE,IAAAA,QAAQ,EAARA;AAAF,GAA/B,EAA6CC,IAA7C,CADiC;AAAA,CAAlC;AAOP;AAEA,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD;AAAA,SAAsBR,MAAM,CAACM,cAAD,EAAiB;AAAEE,IAAAA,OAAO,EAAPA;AAAF,GAAjB,CAA5B;AAAA,CAAtB;AAIP;AAEA,OAAO,IAAMC,WAAW,GAAG,aAApB;AAEP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACF,OAAD;AAAA,SAAsBR,MAAM,CAACS,WAAD,EAAc;AAAED,IAAAA,OAAO,EAAPA;AAAF,GAAd,CAA5B;AAAA,CAAnB;AAIP;AAEA,OAAO,IAAMG,YAAY,GAAG,cAArB;AAEP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD,EAAaL,OAAb;AAAA,SAA2CR,MAAM,CAACW,YAAD,EAAe;AAAEE,IAAAA,EAAE,EAAFA,EAAF;AAAML,IAAAA,OAAO,EAAPA;AAAN,GAAf,CAAjD;AAAA,CAApB;AAIP;AAEA,OAAO,IAAMM,aAAa,GAAG,eAAtB;AAEP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACF,EAAD;AAAA,SAAgBb,MAAM,CAACc,aAAD,EAAgB;AAAED,IAAAA,EAAE,EAAFA;AAAF,GAAhB,CAAtB;AAAA,CAArB;AAIP;AAEA,OAAO,IAAMG,sBAAsB,GAAG,wBAA/B;AAEP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACJ,EAAD,EAAaK,SAAb;AAAA,SAAmClB,MAAM,CAACgB,sBAAD,EAAyB;AAAEH,IAAAA,EAAE,EAAFA,EAAF;AAAMK,IAAAA,SAAS,EAATA;AAAN,GAAzB,CAAzC;AAAA,CAA7B;AAIP;AAEA,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACZ,OAAD;AAAA,SAAsBR,MAAM,CAACmB,cAAD,EAAiB;AAAEX,IAAAA,OAAO,EAAPA;AAAF,GAAjB,CAA5B;AAAA,CAAtB;AAIP;AAEA,OAAO,IAAMa,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACd,OAAD;AAAA,SAAsBR,MAAM,CAACqB,iBAAD,EAAoB;AAAEb,IAAAA,OAAO,EAAPA;AAAF,GAApB,CAA5B;AAAA,CAAzB;AAIP;AAEA,OAAO,IAAMe,sBAAsB,GAAG,0BAA/B;AACP,OAAO,IAAMC,sBAAsB,GAAG,0BAA/B;AAEP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACjB,OAAD;AAAA,SAAsBR,MAAM,CAACuB,sBAAD,EAAyB;AAAEf,IAAAA,OAAO,EAAPA;AAAF,GAAzB,CAA5B;AAAA,CAA7B;AACP,OAAO,IAAMkB,oBAAoB,GAAG,SAAvBA,oBAAuB;AAAA,SAAM1B,MAAM,CAACwB,sBAAD,EAAyB,EAAzB,CAAZ;AAAA,CAA7B;AAKP;AAEA,OAAO,IAAMG,cAAc,GAAG,gBAAvB;AAEP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD;AAAA,SAA0B7B,MAAM,CAAC2B,cAAD,EAAiB;AAAEE,IAAAA,QAAQ,EAARA;AAAF,GAAjB,CAAhC;AAAA,CAAtB;AAIP;AAEA,OAAO,IAAMC,qBAAqB,GAAG,yBAA9B;AACP,OAAO,IAAMC,qBAAqB,GAAG,yBAA9B;AACP,OAAO,IAAMC,qBAAqB,GAAG,yBAA9B;AAEP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,SAAMjC,MAAM,CAAC8B,qBAAD,EAAwB,EAAxB,CAAZ;AAAA,CAA5B;AACP,OAAO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACL,QAAD;AAAA,SAAkC7B,MAAM,CAAC+B,qBAAD,EAAwB;AAAEF,IAAAA,QAAQ,EAARA;AAAF,GAAxB,CAAxC;AAAA,CAA5B;AACP,OAAO,IAAMM,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,KAAD;AAAA,SAAmBpC,MAAM,CAACgC,qBAAD,EAAwB;AAAEI,IAAAA,KAAK,EAALA;AAAF,GAAxB,CAAzB;AAAA,CAA5B;AAMP;AAEA,OAAO,IAAMC,2BAA2B,GAAG,+BAApC;AACP,OAAO,IAAMC,2BAA2B,GAAG,+BAApC;AACP,OAAO,IAAMC,2BAA2B,GAAG,+BAApC;AAEP,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAC3B,EAAD,EAAa4B,IAAb;AAAA,SACtCzC,MAAM,CAACqC,2BAAD,EAA8B;AAAExB,IAAAA,EAAE,EAAFA,EAAF;AAAM4B,IAAAA,IAAI,EAAJA;AAAN,GAA9B,CADgC;AAAA,CAAjC;AAEP,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAClC,OAAD,EAA0BiC,IAA1B;AAAA,SACtCzC,MAAM,CAACsC,2BAAD,EAA8B;AAAE9B,IAAAA,OAAO,EAAPA,OAAF;AAAWiC,IAAAA,IAAI,EAAJA;AAAX,GAA9B,CADgC;AAAA,CAAjC;AAEP,OAAO,IAAME,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACP,KAAD;AAAA,SAAmBpC,MAAM,CAACuC,2BAAD,EAA8B;AAAEH,IAAAA,KAAK,EAALA;AAAF,GAA9B,CAAzB;AAAA,CAAjC;AAMP;AAEA,OAAO,IAAMQ,qBAAqB,GAAG,yBAA9B;AACP,OAAO,IAAMC,qBAAqB,GAAG,yBAA9B;AACP,OAAO,IAAMC,qBAAqB,GAAG,yBAA9B;AAEP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAClC,EAAD;AAAA,MAAa4B,IAAb,uEAAiFxC,WAAW,CAAC+C,OAA7F;AAAA,SACjChD,MAAM,CAAC4C,qBAAD,EAAwB;AAAE/B,IAAAA,EAAE,EAAFA,EAAF;AAAM4B,IAAAA,IAAI,EAAJA;AAAN,GAAxB,CAD2B;AAAA,CAA5B;AAEP,OAAO,IAAMQ,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,QAAD;AAAA,SAAwBlD,MAAM,CAAC6C,qBAAD,EAAwB;AAAEK,IAAAA,QAAQ,EAARA;AAAF,GAAxB,CAA9B;AAAA,CAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACf,KAAD;AAAA,SAAmBpC,MAAM,CAAC8C,qBAAD,EAAwB;AAAEV,IAAAA,KAAK,EAALA;AAAF,GAAxB,CAAzB;AAAA,CAA5B","sourcesContent":["import { action } from 'typesafe-actions'\n\nimport { ModelById } from 'decentraland-dapps/dist/lib/types'\nimport { Project, Manifest } from 'modules/project/types'\nimport { Template } from 'modules/template/types'\nimport { Scene } from 'modules/scene/types'\nimport { Pool } from 'modules/pool/types'\nimport { PreviewType } from 'modules/editor/types'\n\n// Create project from template\n\nexport const CREATE_PROJECT_FROM_TEMPLATE = 'Create project from template'\n\nexport const createProjectFromTemplate = (template: Template, meta: CreateProjectFromTemplateMeta = {}) =>\n  action(CREATE_PROJECT_FROM_TEMPLATE, { template }, meta)\n\ntype CreateProjectFromTemplateMeta = { title?: string; description?: string; onSuccess?: (project: Project, scene: Scene) => any }\n\nexport type CreateProjectFromTemplateAction = ReturnType<typeof createProjectFromTemplate>\n\n// Create project (like SET_PROJECT but only called on creation)\n\nexport const CREATE_PROJECT = 'Create project'\n\nexport const createProject = (project: Project) => action(CREATE_PROJECT, { project })\n\nexport type CreateProjectAction = ReturnType<typeof createProject>\n\n// Set project\n\nexport const SET_PROJECT = 'Set project'\n\nexport const setProject = (project: Project) => action(SET_PROJECT, { project })\n\nexport type SetProjectAction = ReturnType<typeof setProject>\n\n// Edit project\n\nexport const EDIT_PROJECT = 'Edit project'\n\nexport const editProject = (id: string, project: Partial<Project>) => action(EDIT_PROJECT, { id, project })\n\nexport type EditProjectAction = ReturnType<typeof editProject>\n\n// Share project\n\nexport const SHARE_PROJECT = 'Share project'\n\nexport const shareProject = (id: string) => action(SHARE_PROJECT, { id })\n\nexport type ShareProjectAction = ReturnType<typeof shareProject>\n\n// Edit project thumbnail\n\nexport const EDIT_PROJECT_THUMBNAIL = 'Edit project thumbnail'\n\nexport const editProjectThumbnail = (id: string, thumbnail: string) => action(EDIT_PROJECT_THUMBNAIL, { id, thumbnail })\n\nexport type EditProjectThumbnailAction = ReturnType<typeof editProjectThumbnail>\n\n// Delete project\n\nexport const DELETE_PROJECT = 'Delete project'\n\nexport const deleteProject = (project: Project) => action(DELETE_PROJECT, { project })\n\nexport type DeleteProjectAction = ReturnType<typeof deleteProject>\n\n// Duplicate project\n\nexport const DUPLICATE_PROJECT = 'Duplicate project'\n\nexport const duplicateProject = (project: Project) => action(DUPLICATE_PROJECT, { project })\n\nexport type DuplicateProjectAction = ReturnType<typeof duplicateProject>\n\n// Export project\n\nexport const EXPORT_PROJECT_REQUEST = '[Request] Export project'\nexport const EXPORT_PROJECT_SUCCESS = '[Success] Export project'\n\nexport const exportProjectRequest = (project: Project) => action(EXPORT_PROJECT_REQUEST, { project })\nexport const exportProjectSuccess = () => action(EXPORT_PROJECT_SUCCESS, {})\n\nexport type ExportProjectRequestAction = ReturnType<typeof exportProjectRequest>\nexport type ExportProjectSuccessAction = ReturnType<typeof exportProjectSuccess>\n\n// Import project\n\nexport const IMPORT_PROJECT = 'Import project'\n\nexport const importProject = (projects: Manifest[]) => action(IMPORT_PROJECT, { projects })\n\nexport type ImportProjectAction = ReturnType<typeof importProject>\n\n// Loud cloud projects\n\nexport const LOAD_PROJECTS_REQUEST = '[Request] Load projects'\nexport const LOAD_PROJECTS_SUCCESS = '[Success] Load projects'\nexport const LOAD_PROJECTS_FAILURE = '[Failure] Load projects'\n\nexport const loadProjectsRequest = () => action(LOAD_PROJECTS_REQUEST, {})\nexport const loadProjectsSuccess = (projects: ModelById<Project>) => action(LOAD_PROJECTS_SUCCESS, { projects })\nexport const loadProjectsFailure = (error: string) => action(LOAD_PROJECTS_FAILURE, { error })\n\nexport type LoadProjectsRequestAction = ReturnType<typeof loadProjectsRequest>\nexport type LoadProjectsSuccessAction = ReturnType<typeof loadProjectsSuccess>\nexport type LoadProjectsFailureAction = ReturnType<typeof loadProjectsFailure>\n\n// Load public cloud project\n\nexport const LOAD_PUBLIC_PROJECT_REQUEST = '[Request] Load public project'\nexport const LOAD_PUBLIC_PROJECT_SUCCESS = '[Success] Load public project'\nexport const LOAD_PUBLIC_PROJECT_FAILURE = '[Failure] Load public project'\n\nexport const loadPublicProjectRequest = (id: string, type: PreviewType.PUBLIC | PreviewType.POOL) =>\n  action(LOAD_PUBLIC_PROJECT_REQUEST, { id, type })\nexport const loadPublicProjectSuccess = (project: Project | Pool, type: PreviewType.PUBLIC | PreviewType.POOL) =>\n  action(LOAD_PUBLIC_PROJECT_SUCCESS, { project, type })\nexport const loadPublicProjectFailure = (error: string) => action(LOAD_PUBLIC_PROJECT_FAILURE, { error })\n\nexport type LoadPublicProjectRequestAction = ReturnType<typeof loadPublicProjectRequest>\nexport type LoadPublicProjectSuccessAction = ReturnType<typeof loadPublicProjectSuccess>\nexport type LoadPublicProjectFailureAction = ReturnType<typeof loadPublicProjectFailure>\n\n// Load project manifest\n\nexport const LOAD_MANIFEST_REQUEST = '[Request] Load manifest'\nexport const LOAD_MANIFEST_SUCCESS = '[Success] Load manifest'\nexport const LOAD_MANIFEST_FAILURE = '[Failure] Load manifest'\n\nexport const loadManifestRequest = (id: string, type: PreviewType.PROJECT | PreviewType.PUBLIC | PreviewType.POOL = PreviewType.PROJECT) =>\n  action(LOAD_MANIFEST_REQUEST, { id, type })\nexport const loadManifestSuccess = (manifest: Manifest) => action(LOAD_MANIFEST_SUCCESS, { manifest })\nexport const loadManifestFailure = (error: string) => action(LOAD_MANIFEST_FAILURE, { error })\n\nexport type LoadManifestRequestAction = ReturnType<typeof loadManifestRequest>\nexport type LoadManifestSuccessAction = ReturnType<typeof loadManifestSuccess>\nexport type LoadManifestFailureAction = ReturnType<typeof loadManifestFailure>\n"]},"metadata":{},"sourceType":"module"}