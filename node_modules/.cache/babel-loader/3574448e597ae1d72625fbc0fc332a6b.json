{"ast":null,"code":"import { push, goBack } from 'connected-react-router';\nimport { connect } from 'react-redux';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { isConnecting } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { findBySubdomain } from 'modules/ens/utils';\nimport { getENSList, getLoading as getENSLoading } from 'modules/ens/selectors';\nimport { getLandTiles, isLoading as isLandLoading } from 'modules/land/selectors';\nimport { FETCH_ENS_LIST_REQUEST } from 'modules/ens/actions';\nimport ENSSelectLandPage from './ENSSelectLandPage';\n\nvar mapState = function mapState(state, ownProps) {\n  var subdomain = ownProps.match.params.subdomain;\n  var ensList = getENSList(state);\n  var ens = findBySubdomain(ensList, subdomain);\n  return {\n    ens: ens,\n    isLoading: isConnecting(state) || isLoadingType(getENSLoading(state), FETCH_ENS_LIST_REQUEST) || isLandLoading(state),\n    landTiles: getLandTiles(state)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onNavigate: function onNavigate(path) {\n      return dispatch(push(path));\n    },\n    onBack: function onBack() {\n      return dispatch(goBack());\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(ENSSelectLandPage);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/ENSSelectLandPage/ENSSelectLandPage.container.ts"],"names":["push","goBack","connect","isLoadingType","isConnecting","findBySubdomain","getENSList","getLoading","getENSLoading","getLandTiles","isLoading","isLandLoading","FETCH_ENS_LIST_REQUEST","ENSSelectLandPage","mapState","state","ownProps","subdomain","match","params","ensList","ens","landTiles","mapDispatch","dispatch","onNavigate","path","onBack"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,QAA6B,wBAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,YAAT,QAA6B,kDAA7B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,UAAT,EAAqBC,UAAU,IAAIC,aAAnC,QAAwD,uBAAxD;AACA,SAASC,YAAT,EAAuBC,SAAS,IAAIC,aAApC,QAAyD,wBAAzD;AACA,SAASC,sBAAT,QAAuC,qBAAvC;AAEA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAmBC,QAAnB,EAAyD;AAAA,MAChEC,SADgE,GAClDD,QAAQ,CAACE,KAAT,CAAeC,MADmC,CAChEF,SADgE;AAExE,MAAMG,OAAO,GAAGd,UAAU,CAACS,KAAD,CAA1B;AAEA,MAAMM,GAAG,GAAGhB,eAAe,CAACe,OAAD,EAAUH,SAAV,CAA3B;AAEA,SAAO;AACLI,IAAAA,GAAG,EAAHA,GADK;AAELX,IAAAA,SAAS,EAAEN,YAAY,CAACW,KAAD,CAAZ,IAAuBZ,aAAa,CAACK,aAAa,CAACO,KAAD,CAAd,EAAuBH,sBAAvB,CAApC,IAAsFD,aAAa,CAACI,KAAD,CAFzG;AAGLO,IAAAA,SAAS,EAAEb,YAAY,CAACM,KAAD;AAHlB,GAAP;AAKD,CAXD;;AAaA,IAAMQ,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,UAAU,EAAE,oBAAAC,IAAI;AAAA,aAAIF,QAAQ,CAACxB,IAAI,CAAC0B,IAAD,CAAL,CAAZ;AAAA,KADgD;AAEhEC,IAAAA,MAAM,EAAE;AAAA,aAAMH,QAAQ,CAACvB,MAAM,EAAP,CAAd;AAAA;AAFwD,GAA9C;AAAA,CAApB;;AAKA,eAAeC,OAAO,CAACY,QAAD,EAAWS,WAAX,CAAP,CAA+BV,iBAA/B,CAAf","sourcesContent":["import { push, goBack } from 'connected-react-router'\nimport { connect } from 'react-redux'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { isConnecting } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { RootState } from 'modules/common/types'\nimport { findBySubdomain } from 'modules/ens/utils'\nimport { getENSList, getLoading as getENSLoading } from 'modules/ens/selectors'\nimport { getLandTiles, isLoading as isLandLoading } from 'modules/land/selectors'\nimport { FETCH_ENS_LIST_REQUEST } from 'modules/ens/actions'\nimport { MapStateProps, MapDispatchProps, MapDispatch, OwnProps } from './ENSSelectLandPage.types'\nimport ENSSelectLandPage from './ENSSelectLandPage'\n\nconst mapState = (state: RootState, ownProps: OwnProps): MapStateProps => {\n  const { subdomain } = ownProps.match.params\n  const ensList = getENSList(state)\n\n  const ens = findBySubdomain(ensList, subdomain)!\n\n  return {\n    ens,\n    isLoading: isConnecting(state) || isLoadingType(getENSLoading(state), FETCH_ENS_LIST_REQUEST) || isLandLoading(state),\n    landTiles: getLandTiles(state)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onNavigate: path => dispatch(push(path)),\n  onBack: () => dispatch(goBack())\n})\n\nexport default connect(mapState, mapDispatch)(ENSSelectLandPage)\n"]},"metadata":{},"sourceType":"module"}