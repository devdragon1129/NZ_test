{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport { Engine } from \"../Engines/engine\";\nimport \"../Shaders/pass.fragment\";\nimport \"../Shaders/passCube.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { SerializationHelper } from '../Misc/decorators';\n/**\r\n * PassPostProcess which produces an output the same as it's input\r\n */\n\nvar PassPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(PassPostProcess, _super);\n  /**\r\n   * Creates the PassPostProcess\r\n   * @param name The name of the effect.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType The type of texture to be used when performing the post processing.\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function PassPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (camera === void 0) {\n      camera = null;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    return _super.call(this, name, \"pass\", null, null, options, camera, samplingMode, engine, reusable, undefined, textureType, undefined, null, blockCompilation) || this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"PassPostProcess\" string\r\n   */\n\n\n  PassPostProcess.prototype.getClassName = function () {\n    return \"PassPostProcess\";\n  };\n  /** @hidden */\n\n\n  PassPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new PassPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  return PassPostProcess;\n}(PostProcess);\n\nexport { PassPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.PassPostProcess\"] = PassPostProcess;\n/**\r\n * PassCubePostProcess which produces an output the same as it's input (which must be a cube texture)\r\n */\n\nvar PassCubePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(PassCubePostProcess, _super);\n  /**\r\n   * Creates the PassCubePostProcess\r\n   * @param name The name of the effect.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType The type of texture to be used when performing the post processing.\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function PassCubePostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (camera === void 0) {\n      camera = null;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"passCube\", null, null, options, camera, samplingMode, engine, reusable, \"#define POSITIVEX\", textureType, undefined, null, blockCompilation) || this;\n\n    _this._face = 0;\n    return _this;\n  }\n\n  Object.defineProperty(PassCubePostProcess.prototype, \"face\", {\n    /**\r\n     * Gets or sets the cube face to display.\r\n     *  * 0 is +X\r\n     *  * 1 is -X\r\n     *  * 2 is +Y\r\n     *  * 3 is -Y\r\n     *  * 4 is +Z\r\n     *  * 5 is -Z\r\n     */\n    get: function get() {\n      return this._face;\n    },\n    set: function set(value) {\n      if (value < 0 || value > 5) {\n        return;\n      }\n\n      this._face = value;\n\n      switch (this._face) {\n        case 0:\n          this.updateEffect(\"#define POSITIVEX\");\n          break;\n\n        case 1:\n          this.updateEffect(\"#define NEGATIVEX\");\n          break;\n\n        case 2:\n          this.updateEffect(\"#define POSITIVEY\");\n          break;\n\n        case 3:\n          this.updateEffect(\"#define NEGATIVEY\");\n          break;\n\n        case 4:\n          this.updateEffect(\"#define POSITIVEZ\");\n          break;\n\n        case 5:\n          this.updateEffect(\"#define NEGATIVEZ\");\n          break;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"PassCubePostProcess\" string\r\n   */\n\n  PassCubePostProcess.prototype.getClassName = function () {\n    return \"PassCubePostProcess\";\n  };\n  /** @hidden */\n\n\n  PassCubePostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new PassCubePostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  return PassCubePostProcess;\n}(PostProcess);\n\nexport { PassCubePostProcess };\n\nEngine._RescalePostProcessFactory = function (engine) {\n  return new PassPostProcess(\"rescale\", 1, null, 2, engine, false, 0);\n};","map":null,"metadata":{},"sourceType":"module"}