{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport { InputBlock } from '../Input/inputBlock';\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\nimport \"../../../../Shaders/ShadersInclude/bumpFragmentMainFunctions\";\nimport \"../../../../Shaders/ShadersInclude/bumpFragmentFunctions\";\nimport \"../../../../Shaders/ShadersInclude/bumpFragment\";\n/**\r\n * Block used to pertub normals based on a normal map\r\n */\n\nvar PerturbNormalBlock =\n/** @class */\nfunction (_super) {\n  __extends(PerturbNormalBlock, _super);\n  /**\r\n   * Create a new PerturbNormalBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function PerturbNormalBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this._tangentSpaceParameterName = \"\";\n    /** Gets or sets a boolean indicating that normal should be inverted on X axis */\n\n    _this.invertX = false;\n    /** Gets or sets a boolean indicating that normal should be inverted on Y axis */\n\n    _this.invertY = false; // Vertex\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\n\n    _this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false);\n\n    _this.registerInput(\"worldTangent\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n\n    _this.registerInput(\"uv\", NodeMaterialBlockConnectionPointTypes.Vector2, false);\n\n    _this.registerInput(\"normalMapColor\", NodeMaterialBlockConnectionPointTypes.Color3, false);\n\n    _this.registerInput(\"strength\", NodeMaterialBlockConnectionPointTypes.Float, false); // Fragment\n\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  PerturbNormalBlock.prototype.getClassName = function () {\n    return \"PerturbNormalBlock\";\n  };\n\n  Object.defineProperty(PerturbNormalBlock.prototype, \"worldPosition\", {\n    /**\r\n     * Gets the world position input component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"worldNormal\", {\n    /**\r\n     * Gets the world normal input component\r\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"worldTangent\", {\n    /**\r\n     * Gets the world tangent input component\r\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"uv\", {\n    /**\r\n     * Gets the uv input component\r\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"normalMapColor\", {\n    /**\r\n    * Gets the normal map color input component\r\n    */\n    get: function get() {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"strength\", {\n    /**\r\n    * Gets the strength input component\r\n    */\n    get: function get() {\n      return this._inputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerturbNormalBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  PerturbNormalBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    defines.setValue(\"BUMP\", true);\n  };\n\n  PerturbNormalBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    if (nodeMaterial.getScene()._mirroredCameraPosition) {\n      effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? 1.0 : -1.0, this.invertY ? 1.0 : -1.0);\n    } else {\n      effect.setFloat2(this._tangentSpaceParameterName, this.invertX ? -1.0 : 1.0, this.invertY ? -1.0 : 1.0);\n    }\n  };\n\n  PerturbNormalBlock.prototype.autoConfigure = function (material) {\n    if (!this.uv.isConnected) {\n      var uvInput = material.getInputBlockByPredicate(function (b) {\n        return b.isAttribute && b.name === \"uv\";\n      });\n\n      if (!uvInput) {\n        uvInput = new InputBlock(\"uv\");\n        uvInput.setAsAttribute();\n      }\n\n      uvInput.output.connectTo(this.uv);\n    }\n\n    if (!this.strength.isConnected) {\n      var strengthInput = new InputBlock(\"strength\");\n      strengthInput.value = 1.0;\n      strengthInput.output.connectTo(this.strength);\n    }\n  };\n\n  PerturbNormalBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var comments = \"//\" + this.name;\n    var uv = this.uv;\n    var worldPosition = this.worldPosition;\n    var worldNormal = this.worldNormal;\n    var worldTangent = this.worldTangent;\n    state.sharedData.blocksWithDefines.push(this);\n    state.sharedData.bindableBlocks.push(this);\n    this._tangentSpaceParameterName = state._getFreeDefineName(\"tangentSpaceParameter\");\n\n    state._emitUniformFromString(this._tangentSpaceParameterName, \"vec2\");\n\n    var replaceForBumpInfos = this.strength.isConnectedToInputBlock && this.strength.connectInputBlock.isConstant ? \"\" + state._emitFloat(1.0 / this.strength.connectInputBlock.value) : \"1.0 / \" + this.strength.associatedVariableName;\n\n    state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\");\n\n    var tangentReplaceString = {\n      search: /defined\\(TANGENT\\)/g,\n      replace: worldTangent.isConnected ? \"defined(TANGENT)\" : \"defined(IGNORE)\"\n    };\n\n    if (worldTangent.isConnected) {\n      state.compilationString += \"vec3 tbnNormal = normalize(\" + worldNormal.associatedVariableName + \".xyz);\\r\\n\";\n      state.compilationString += \"vec3 tbnTangent = normalize(\" + worldTangent.associatedVariableName + \".xyz);\\r\\n\";\n      state.compilationString += \"vec3 tbnBitangent = cross(tbnNormal, tbnTangent);\\r\\n\";\n      state.compilationString += \"mat3 vTBN = mat3(tbnTangent, tbnBitangent, tbnNormal);\\r\\n\";\n    }\n\n    state._emitFunctionFromInclude(\"bumpFragmentMainFunctions\", comments, {\n      replaceStrings: [tangentReplaceString]\n    });\n\n    state._emitFunctionFromInclude(\"bumpFragmentFunctions\", comments, {\n      replaceStrings: [{\n        search: /vBumpInfos.y/g,\n        replace: replaceForBumpInfos\n      }, {\n        search: /vTangentSpaceParams/g,\n        replace: this._tangentSpaceParameterName\n      }, {\n        search: /vPositionW/g,\n        replace: worldPosition.associatedVariableName + \".xyz\"\n      }]\n    });\n\n    state.compilationString += this._declareOutput(this.output, state) + \" = vec4(0.);\\r\\n\";\n    state.compilationString += state._emitCodeFromInclude(\"bumpFragment\", comments, {\n      replaceStrings: [{\n        search: /perturbNormal\\(TBN,vBumpUV\\+uvOffset\\)/g,\n        replace: \"perturbNormal(TBN, \" + this.normalMapColor.associatedVariableName + \")\"\n      }, {\n        search: /vBumpInfos.y/g,\n        replace: replaceForBumpInfos\n      }, {\n        search: /vBumpUV/g,\n        replace: uv.associatedVariableName\n      }, {\n        search: /vPositionW/g,\n        replace: worldPosition.associatedVariableName + \".xyz\"\n      }, {\n        search: /normalW=/g,\n        replace: this.output.associatedVariableName + \".xyz = \"\n      }, {\n        search: /mat3\\(normalMatrix\\)\\*normalW/g,\n        replace: \"mat3(normalMatrix) * \" + this.output.associatedVariableName + \".xyz\"\n      }, {\n        search: /normalW/g,\n        replace: worldNormal.associatedVariableName + \".xyz\"\n      }, tangentReplaceString]\n    });\n    return this;\n  };\n\n  PerturbNormalBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = this._codeVariableName + \".invertX = \" + this.invertX + \";\\r\\n\";\n    codeString += this._codeVariableName + \".invertY = \" + this.invertY + \";\\r\\n\";\n    return codeString;\n  };\n\n  PerturbNormalBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.invertX = this.invertX;\n    serializationObject.invertY = this.invertY;\n    return serializationObject;\n  };\n\n  PerturbNormalBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.invertX = serializationObject.invertX;\n    this.invertY = serializationObject.invertY;\n  };\n\n  __decorate([editableInPropertyPage(\"Invert X axis\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n    \"notifiers\": {\n      \"update\": false\n    }\n  })], PerturbNormalBlock.prototype, \"invertX\", void 0);\n\n  __decorate([editableInPropertyPage(\"Invert Y axis\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n    \"notifiers\": {\n      \"update\": false\n    }\n  })], PerturbNormalBlock.prototype, \"invertY\", void 0);\n\n  return PerturbNormalBlock;\n}(NodeMaterialBlock);\n\nexport { PerturbNormalBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.PerturbNormalBlock\"] = PerturbNormalBlock;","map":null,"metadata":{},"sourceType":"module"}