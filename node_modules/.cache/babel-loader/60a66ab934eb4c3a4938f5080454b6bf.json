{"ast":null,"code":"export var ComponentType;\n\n(function (ComponentType) {\n  ComponentType[\"GLTFShape\"] = \"GLTFShape\";\n  ComponentType[\"Transform\"] = \"Transform\";\n  ComponentType[\"NFTShape\"] = \"NFTShape\";\n  ComponentType[\"Script\"] = \"Script\";\n})(ComponentType || (ComponentType = {}));","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/scene/types.ts"],"names":["ComponentType"],"mappings":"AAUA,WAAYA,aAAZ;;WAAYA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,KAAAA,a","sourcesContent":["import { Asset, AssetParameterValues } from 'modules/asset/types'\nimport { ModelMetrics, Vector3, Quaternion } from 'modules/models/types'\n\nexport type EntityDefinition = {\n  id: string\n  components: string[] // array of IDs pointing to components\n  disableGizmos?: boolean\n  name: string\n}\n\nexport enum ComponentType {\n  GLTFShape = 'GLTFShape',\n  Transform = 'Transform',\n  NFTShape = 'NFTShape',\n  Script = 'Script'\n}\n\nexport type ComponentData = {\n  [ComponentType.GLTFShape]: {\n    assetId: string\n  }\n\n  [ComponentType.Transform]: {\n    position: Vector3\n    rotation: Quaternion\n    scale: Vector3\n  }\n  [ComponentType.NFTShape]: {\n    url: string\n  }\n  [ComponentType.Script]: {\n    assetId: string\n    values: AssetParameterValues\n  }\n}\n\nexport type AnyComponent = ComponentDefinition<ComponentType>\n\nexport type ShapeComponent = ComponentDefinition<ComponentType.GLTFShape | ComponentType.NFTShape>\n\nexport type ComponentDefinition<T extends ComponentType> = {\n  id: string\n  type: T\n  data: ComponentData[T]\n}\n\nexport type Scene = {\n  id: string\n  metrics: ModelMetrics\n  limits: ModelMetrics\n  entities: Record<string, EntityDefinition>\n  components: Record<string, AnyComponent>\n  assets: Record<string, Asset>\n  ground: {\n    // id references\n    assetId: string\n    componentId: string\n  } | null\n}\n"]},"metadata":{},"sourceType":"module"}