{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController\";\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\nimport { Mesh } from \"../../Meshes/mesh\";\nimport { Axis, Space } from \"../../Maths/math.axis\";\nimport { Color3 } from \"../../Maths/math.color\";\nimport { WebXRControllerComponent } from \"./webXRControllerComponent\";\nimport { SphereBuilder } from \"../../Meshes/Builders/sphereBuilder\";\nimport { StandardMaterial } from \"../../Materials/standardMaterial\";\nimport { Logger } from \"../../Misc/logger\";\n/**\r\n * A profiled motion controller has its profile loaded from an online repository.\r\n * The class is responsible of loading the model, mapping the keys and enabling model-animations\r\n */\n\nvar WebXRProfiledMotionController =\n/** @class */\nfunction (_super) {\n  __extends(WebXRProfiledMotionController, _super);\n\n  function WebXRProfiledMotionController(scene, xrInput, _profile, _repositoryUrl) {\n    var _this = _super.call(this, scene, _profile.layouts[xrInput.handedness || \"none\"], xrInput.gamepad, xrInput.handedness) || this;\n\n    _this._repositoryUrl = _repositoryUrl;\n    _this._buttonMeshMapping = {};\n    _this._touchDots = {};\n    _this.profileId = _profile.profileId;\n    return _this;\n  }\n\n  WebXRProfiledMotionController.prototype.dispose = function () {\n    var _this = this;\n\n    _super.prototype.dispose.call(this);\n\n    Object.keys(this._touchDots).forEach(function (visResKey) {\n      _this._touchDots[visResKey].dispose();\n    });\n  };\n\n  WebXRProfiledMotionController.prototype._getFilenameAndPath = function () {\n    return {\n      filename: this.layout.assetPath,\n      path: this._repositoryUrl + \"/profiles/\" + this.profileId + \"/\"\n    };\n  };\n\n  WebXRProfiledMotionController.prototype._getModelLoadingConstraints = function () {\n    var glbLoaded = SceneLoader.IsPluginForExtensionAvailable(\".glb\");\n\n    if (!glbLoaded) {\n      Logger.Warn(\"glTF / glb loaded was not registered, using generic controller instead\");\n    }\n\n    return glbLoaded;\n  };\n\n  WebXRProfiledMotionController.prototype._processLoadedModel = function (_meshes) {\n    var _this = this;\n\n    this.getComponentIds().forEach(function (type) {\n      var componentInLayout = _this.layout.components[type];\n      _this._buttonMeshMapping[type] = {\n        mainMesh: _this._getChildByName(_this.rootMesh, componentInLayout.rootNodeName),\n        states: {}\n      };\n      Object.keys(componentInLayout.visualResponses).forEach(function (visualResponseKey) {\n        var visResponse = componentInLayout.visualResponses[visualResponseKey];\n\n        if (visResponse.valueNodeProperty === \"transform\") {\n          _this._buttonMeshMapping[type].states[visualResponseKey] = {\n            valueMesh: _this._getChildByName(_this.rootMesh, visResponse.valueNodeName),\n            minMesh: _this._getChildByName(_this.rootMesh, visResponse.minNodeName),\n            maxMesh: _this._getChildByName(_this.rootMesh, visResponse.maxNodeName)\n          };\n        } else {\n          // visibility, usually for touchpads\n          var nameOfMesh = componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && componentInLayout.touchPointNodeName ? componentInLayout.touchPointNodeName : visResponse.valueNodeName;\n          _this._buttonMeshMapping[type].states[visualResponseKey] = {\n            valueMesh: _this._getChildByName(_this.rootMesh, nameOfMesh)\n          };\n\n          if (componentInLayout.type === WebXRControllerComponent.TOUCHPAD_TYPE && !_this._touchDots[visualResponseKey]) {\n            var dot = SphereBuilder.CreateSphere(visualResponseKey + \"dot\", {\n              diameter: 0.0015,\n              segments: 8\n            }, _this.scene);\n            dot.material = new StandardMaterial(visualResponseKey + \"mat\", _this.scene);\n            dot.material.diffuseColor = Color3.Red();\n            dot.parent = _this._buttonMeshMapping[type].states[visualResponseKey].valueMesh || null;\n            dot.isVisible = false;\n            _this._touchDots[visualResponseKey] = dot;\n          }\n        }\n      });\n    });\n  };\n\n  WebXRProfiledMotionController.prototype._setRootMesh = function (meshes) {\n    this.rootMesh = new Mesh(this.profileId + \"-\" + this.handedness, this.scene);\n    this.rootMesh.isPickable = false;\n    var rootMesh; // Find the root node in the loaded glTF scene, and attach it as a child of 'parentMesh'\n\n    for (var i = 0; i < meshes.length; i++) {\n      var mesh = meshes[i];\n      mesh.isPickable = false;\n\n      if (!mesh.parent) {\n        // Handle root node, attach to the new parentMesh\n        rootMesh = mesh;\n      }\n    }\n\n    if (rootMesh) {\n      rootMesh.setParent(this.rootMesh);\n    }\n\n    if (!this.scene.useRightHandedSystem) {\n      this.rootMesh.rotate(Axis.Y, Math.PI, Space.WORLD);\n    }\n  };\n\n  WebXRProfiledMotionController.prototype._updateModel = function (_xrFrame) {\n    var _this = this;\n\n    if (this.disableAnimation) {\n      return;\n    }\n\n    this.getComponentIds().forEach(function (id) {\n      var component = _this.getComponent(id);\n\n      if (!component.hasChanges) {\n        return;\n      }\n\n      var meshes = _this._buttonMeshMapping[id];\n      var componentInLayout = _this.layout.components[id];\n      Object.keys(componentInLayout.visualResponses).forEach(function (visualResponseKey) {\n        var visResponse = componentInLayout.visualResponses[visualResponseKey];\n        var value = component.value;\n\n        if (visResponse.componentProperty === \"xAxis\") {\n          value = component.axes.x;\n        } else if (visResponse.componentProperty === \"yAxis\") {\n          value = component.axes.y;\n        }\n\n        if (visResponse.valueNodeProperty === \"transform\") {\n          _this._lerpTransform(meshes.states[visualResponseKey], value, visResponse.componentProperty !== \"button\");\n        } else {\n          // visibility\n          var valueMesh = meshes.states[visualResponseKey].valueMesh;\n\n          if (valueMesh) {\n            valueMesh.isVisible = component.touched || component.pressed;\n          }\n\n          if (_this._touchDots[visualResponseKey]) {\n            _this._touchDots[visualResponseKey].isVisible = component.touched || component.pressed;\n          }\n        }\n      });\n    });\n  };\n\n  return WebXRProfiledMotionController;\n}(WebXRAbstractMotionController);\n\nexport { WebXRProfiledMotionController };","map":null,"metadata":{},"sourceType":"module"}