{"ast":null,"code":"/**\r\n * This class implement a typical dictionary using a string as key and the generic type T as value.\r\n * The underlying implementation relies on an associative array to ensure the best performances.\r\n * The value can be anything including 'null' but except 'undefined'\r\n */\nvar StringDictionary =\n/** @class */\nfunction () {\n  function StringDictionary() {\n    this._count = 0;\n    this._data = {};\n  }\n  /**\r\n   * This will clear this dictionary and copy the content from the 'source' one.\r\n   * If the T value is a custom object, it won't be copied/cloned, the same object will be used\r\n   * @param source the dictionary to take the content from and copy to this dictionary\r\n   */\n\n\n  StringDictionary.prototype.copyFrom = function (source) {\n    var _this = this;\n\n    this.clear();\n    source.forEach(function (t, v) {\n      return _this.add(t, v);\n    });\n  };\n  /**\r\n   * Get a value based from its key\r\n   * @param key the given key to get the matching value from\r\n   * @return the value if found, otherwise undefined is returned\r\n   */\n\n\n  StringDictionary.prototype.get = function (key) {\n    var val = this._data[key];\n\n    if (val !== undefined) {\n      return val;\n    }\n\n    return undefined;\n  };\n  /**\r\n   * Get a value from its key or add it if it doesn't exist.\r\n   * This method will ensure you that a given key/data will be present in the dictionary.\r\n   * @param key the given key to get the matching value from\r\n   * @param factory the factory that will create the value if the key is not present in the dictionary.\r\n   * The factory will only be invoked if there's no data for the given key.\r\n   * @return the value corresponding to the key.\r\n   */\n\n\n  StringDictionary.prototype.getOrAddWithFactory = function (key, factory) {\n    var val = this.get(key);\n\n    if (val !== undefined) {\n      return val;\n    }\n\n    val = factory(key);\n\n    if (val) {\n      this.add(key, val);\n    }\n\n    return val;\n  };\n  /**\r\n   * Get a value from its key if present in the dictionary otherwise add it\r\n   * @param key the key to get the value from\r\n   * @param val if there's no such key/value pair in the dictionary add it with this value\r\n   * @return the value corresponding to the key\r\n   */\n\n\n  StringDictionary.prototype.getOrAdd = function (key, val) {\n    var curVal = this.get(key);\n\n    if (curVal !== undefined) {\n      return curVal;\n    }\n\n    this.add(key, val);\n    return val;\n  };\n  /**\r\n   * Check if there's a given key in the dictionary\r\n   * @param key the key to check for\r\n   * @return true if the key is present, false otherwise\r\n   */\n\n\n  StringDictionary.prototype.contains = function (key) {\n    return this._data[key] !== undefined;\n  };\n  /**\r\n   * Add a new key and its corresponding value\r\n   * @param key the key to add\r\n   * @param value the value corresponding to the key\r\n   * @return true if the operation completed successfully, false if we couldn't insert the key/value because there was already this key in the dictionary\r\n   */\n\n\n  StringDictionary.prototype.add = function (key, value) {\n    if (this._data[key] !== undefined) {\n      return false;\n    }\n\n    this._data[key] = value;\n    ++this._count;\n    return true;\n  };\n  /**\r\n   * Update a specific value associated to a key\r\n   * @param key defines the key to use\r\n   * @param value defines the value to store\r\n   * @returns true if the value was updated (or false if the key was not found)\r\n   */\n\n\n  StringDictionary.prototype.set = function (key, value) {\n    if (this._data[key] === undefined) {\n      return false;\n    }\n\n    this._data[key] = value;\n    return true;\n  };\n  /**\r\n   * Get the element of the given key and remove it from the dictionary\r\n   * @param key defines the key to search\r\n   * @returns the value associated with the key or null if not found\r\n   */\n\n\n  StringDictionary.prototype.getAndRemove = function (key) {\n    var val = this.get(key);\n\n    if (val !== undefined) {\n      delete this._data[key];\n      --this._count;\n      return val;\n    }\n\n    return null;\n  };\n  /**\r\n   * Remove a key/value from the dictionary.\r\n   * @param key the key to remove\r\n   * @return true if the item was successfully deleted, false if no item with such key exist in the dictionary\r\n   */\n\n\n  StringDictionary.prototype.remove = function (key) {\n    if (this.contains(key)) {\n      delete this._data[key];\n      --this._count;\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Clear the whole content of the dictionary\r\n   */\n\n\n  StringDictionary.prototype.clear = function () {\n    this._data = {};\n    this._count = 0;\n  };\n\n  Object.defineProperty(StringDictionary.prototype, \"count\", {\n    /**\r\n     * Gets the current count\r\n     */\n    get: function get() {\n      return this._count;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Execute a callback on each key/val of the dictionary.\r\n   * Note that you can remove any element in this dictionary in the callback implementation\r\n   * @param callback the callback to execute on a given key/value pair\r\n   */\n\n  StringDictionary.prototype.forEach = function (callback) {\n    for (var cur in this._data) {\n      var val = this._data[cur];\n      callback(cur, val);\n    }\n  };\n  /**\r\n   * Execute a callback on every occurrence of the dictionary until it returns a valid TRes object.\r\n   * If the callback returns null or undefined the method will iterate to the next key/value pair\r\n   * Note that you can remove any element in this dictionary in the callback implementation\r\n   * @param callback the callback to execute, if it return a valid T instanced object the enumeration will stop and the object will be returned\r\n   * @returns the first item\r\n   */\n\n\n  StringDictionary.prototype.first = function (callback) {\n    for (var cur in this._data) {\n      var val = this._data[cur];\n      var res = callback(cur, val);\n\n      if (res) {\n        return res;\n      }\n    }\n\n    return null;\n  };\n\n  return StringDictionary;\n}();\n\nexport { StringDictionary };","map":null,"metadata":{},"sourceType":"module"}