{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(walletSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(initializeAppChainId),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleConnectWalletRequest),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(handleEnableWalletRequest),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(handleEnableWalletSuccess),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(handleDisconnectWallet),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchWalletRequest),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(handleConnectWalletSuccess),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(handleSwitchNetworkRequest),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(handleSwitchNetworkSucces);\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createWalletSaga = exports.walletSaga = void 0;\n\nvar effects_1 = require(\"redux-saga/effects\");\n\nvar chain_id_1 = require(\"@dcl/schemas/dist/dapps/chain-id\");\n\nvar decentraland_connect_1 = require(\"decentraland-connect\");\n\nvar eth_1 = require(\"../../lib/eth\");\n\nvar actions_1 = require(\"./actions\");\n\nvar utils_1 = require(\"./utils\");\n\nvar selectors_1 = require(\"./selectors\"); // Patch Samsung's Cucumber provider send to support promises\n\n\nvar provider = window.ethereum;\nvar cucumberProviderSend;\n\nif (eth_1.isCucumberProvider()) {\n  var _send = provider.send;\n\n  cucumberProviderSend = function cucumberProviderSend() {\n    try {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return Promise.resolve(_send.apply(provider, args)).then(function (accounts) {\n        return (accounts === null || accounts === void 0 ? void 0 : accounts.result) || [];\n      });\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  };\n} // Can be set on createWalletSaga\n\n\nvar CHAIN_ID;\nvar POLL_INTERVAL = 5 * 60 * 1000; // 60 seconds\n\nvar polling = false;\n\nfunction walletSaga() {\n  return _regeneratorRuntime.wrap(function walletSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return effects_1.fork(initializeAppChainId);\n\n        case 2:\n          _context.next = 4;\n          return effects_1.all([effects_1.takeEvery(actions_1.CONNECT_WALLET_REQUEST, handleConnectWalletRequest), effects_1.takeEvery(actions_1.ENABLE_WALLET_REQUEST, handleEnableWalletRequest), effects_1.takeEvery(actions_1.ENABLE_WALLET_SUCCESS, handleEnableWalletSuccess), effects_1.takeEvery(actions_1.FETCH_WALLET_REQUEST, handleFetchWalletRequest), effects_1.takeEvery(actions_1.DISCONNECT_WALLET, handleDisconnectWallet), effects_1.takeEvery(actions_1.CONNECT_WALLET_SUCCESS, handleConnectWalletSuccess), effects_1.takeEvery(actions_1.SWITCH_NETWORK_REQUEST, handleSwitchNetworkRequest), effects_1.takeEvery(actions_1.SWITCH_NETWORK_SUCCESS, handleSwitchNetworkSucces)]);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nexports.walletSaga = walletSaga;\n\nfunction initializeAppChainId() {\n  return _regeneratorRuntime.wrap(function initializeAppChainId$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return effects_1.put(actions_1.setAppChainId(CHAIN_ID));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction handleConnectWalletRequest() {\n  var _yield$effects_1$race, success, failure;\n\n  return _regeneratorRuntime.wrap(function handleConnectWalletRequest$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return effects_1.put(actions_1.fetchWalletRequest());\n\n        case 3:\n          _context3.next = 5;\n          return effects_1.race({\n            success: effects_1.take(actions_1.FETCH_WALLET_SUCCESS),\n            failure: effects_1.take(actions_1.FETCH_WALLET_FAILURE)\n          });\n\n        case 5:\n          _yield$effects_1$race = _context3.sent;\n          success = _yield$effects_1$race.success;\n          failure = _yield$effects_1$race.failure;\n\n          if (!success) {\n            _context3.next = 13;\n            break;\n          }\n\n          _context3.next = 11;\n          return effects_1.put(actions_1.connectWalletSuccess(success.payload.wallet));\n\n        case 11:\n          _context3.next = 14;\n          break;\n\n        case 13:\n          throw new Error(failure.payload.error);\n\n        case 14:\n          _context3.next = 22;\n          break;\n\n        case 16:\n          _context3.prev = 16;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 20;\n          return effects_1.put(actions_1.disconnectWallet());\n\n        case 20:\n          _context3.next = 22;\n          return effects_1.put(actions_1.connectWalletFailure(_context3.t0.message));\n\n        case 22:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 16]]);\n}\n\nfunction handleEnableWalletRequest(action) {\n  var _this = this;\n\n  var providerType, account;\n  return _regeneratorRuntime.wrap(function handleEnableWalletRequest$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          providerType = action.payload.providerType;\n          _context5.prev = 1;\n          _context5.next = 4;\n          return effects_1.call(function () {\n            return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n              var _yield$decentraland_c, account;\n\n              return _regeneratorRuntime.wrap(function _callee$(_context4) {\n                while (1) {\n                  switch (_context4.prev = _context4.next) {\n                    case 0:\n                      if (!eth_1.isCucumberProvider()) {\n                        _context4.next = 3;\n                        break;\n                      }\n\n                      _context4.next = 3;\n                      return cucumberProviderSend('eth_requestAccounts');\n\n                    case 3:\n                      _context4.next = 5;\n                      return decentraland_connect_1.connection.connect(providerType, CHAIN_ID);\n\n                    case 5:\n                      _yield$decentraland_c = _context4.sent;\n                      account = _yield$decentraland_c.account;\n                      return _context4.abrupt(\"return\", account);\n\n                    case 8:\n                    case \"end\":\n                      return _context4.stop();\n                  }\n                }\n              }, _callee);\n            }));\n          });\n\n        case 4:\n          account = _context5.sent;\n\n          if (account) {\n            _context5.next = 7;\n            break;\n          }\n\n          throw new Error('Enable did not return any accounts');\n\n        case 7:\n          _context5.next = 9;\n          return effects_1.put(actions_1.enableWalletSuccess(providerType));\n\n        case 9:\n          _context5.next = 17;\n          break;\n\n        case 11:\n          _context5.prev = 11;\n          _context5.t0 = _context5[\"catch\"](1);\n          _context5.next = 15;\n          return effects_1.put(actions_1.disconnectWallet());\n\n        case 15:\n          _context5.next = 17;\n          return effects_1.put(actions_1.enableWalletFailure(_context5.t0.message));\n\n        case 17:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked4, null, [[1, 11]]);\n}\n\nfunction handleEnableWalletSuccess(_action) {\n  return _regeneratorRuntime.wrap(function handleEnableWalletSuccess$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return effects_1.put(actions_1.connectWalletRequest());\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction handleDisconnectWallet(_action) {\n  return _regeneratorRuntime.wrap(function handleDisconnectWallet$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return effects_1.call(function () {\n            return decentraland_connect_1.connection.disconnect();\n          });\n\n        case 3:\n          _context7.next = 8;\n          break;\n\n        case 5:\n          _context7.prev = 5;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n\n        case 8:\n          // stop polling wallet balances\n          polling = false;\n\n        case 9:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked6, null, [[0, 5]]);\n}\n\nfunction handleFetchWalletRequest(_action) {\n  var wallet;\n  return _regeneratorRuntime.wrap(function handleFetchWalletRequest$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return effects_1.call(utils_1.buildWallet);\n\n        case 3:\n          wallet = _context8.sent;\n          _context8.next = 6;\n          return effects_1.put(actions_1.fetchWalletSuccess(wallet));\n\n        case 6:\n          _context8.next = 12;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          _context8.next = 12;\n          return effects_1.put(actions_1.fetchWalletFailure(_context8.t0.message));\n\n        case 12:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction handleConnectWalletSuccess() {\n  var isWalletConnected;\n  return _regeneratorRuntime.wrap(function handleConnectWalletSuccess$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          if (!(!polling && POLL_INTERVAL > 0)) {\n            _context9.next = 13;\n            break;\n          }\n\n          polling = true;\n\n        case 2:\n          if (!polling) {\n            _context9.next = 13;\n            break;\n          }\n\n          _context9.next = 5;\n          return effects_1.delay(POLL_INTERVAL);\n\n        case 5:\n          _context9.next = 7;\n          return effects_1.select(selectors_1.isConnected);\n\n        case 7:\n          isWalletConnected = _context9.sent;\n\n          if (!isWalletConnected) {\n            _context9.next = 11;\n            break;\n          }\n\n          _context9.next = 11;\n          return effects_1.put(actions_1.fetchWalletRequest());\n\n        case 11:\n          _context9.next = 2;\n          break;\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction handleSwitchNetworkRequest(action) {\n  var chainId, provider, newChainId;\n  return _regeneratorRuntime.wrap(function handleSwitchNetworkRequest$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          chainId = action.payload.chainId;\n          _context10.next = 3;\n          return effects_1.call(eth_1.getConnectedProvider);\n\n        case 3:\n          provider = _context10.sent;\n          _context10.prev = 4;\n\n          if (provider) {\n            _context10.next = 7;\n            break;\n          }\n\n          throw new Error('Could not get provider');\n\n        case 7:\n          _context10.next = 9;\n          return effects_1.call([provider, 'request'], {\n            method: 'wallet_switchEthereumChain',\n            params: [{\n              chainId: '0x' + chainId.toString(16)\n            }]\n          });\n\n        case 9:\n          _context10.next = 11;\n          return effects_1.put(actions_1.switchNetworkSuccess(chainId));\n\n        case 11:\n          _context10.next = 36;\n          break;\n\n        case 13:\n          _context10.prev = 13;\n          _context10.t0 = _context10[\"catch\"](4);\n\n          if (!(provider && _context10.t0.code === 4902)) {\n            _context10.next = 34;\n            break;\n          }\n\n          _context10.prev = 16;\n          _context10.next = 19;\n          return effects_1.call([provider, 'request'], {\n            method: 'wallet_addEthereumChain',\n            params: [utils_1.getAddEthereumChainParameters(chainId)]\n          });\n\n        case 19:\n          _context10.next = 21;\n          return effects_1.call(utils_1.getProviderChainId, provider);\n\n        case 21:\n          newChainId = _context10.sent;\n\n          if (!(chainId !== parseInt(newChainId, 16))) {\n            _context10.next = 24;\n            break;\n          }\n\n          throw new Error('chainId did not change after adding network');\n\n        case 24:\n          _context10.next = 26;\n          return effects_1.put(actions_1.switchNetworkSuccess(chainId));\n\n        case 26:\n          return _context10.abrupt(\"return\");\n\n        case 29:\n          _context10.prev = 29;\n          _context10.t1 = _context10[\"catch\"](16);\n          _context10.next = 33;\n          return effects_1.put(actions_1.switchNetworkFailure(chainId, \"Error adding network: \".concat(_context10.t1.message)));\n\n        case 33:\n          return _context10.abrupt(\"return\");\n\n        case 34:\n          _context10.next = 36;\n          return effects_1.put(actions_1.switchNetworkFailure(chainId, \"Error switching network: \".concat(_context10.t0.message)));\n\n        case 36:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked9, null, [[4, 13], [16, 29]]);\n}\n\nfunction handleSwitchNetworkSucces(_action) {\n  return _regeneratorRuntime.wrap(function handleSwitchNetworkSucces$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return effects_1.put(actions_1.fetchWalletRequest());\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction createWalletSaga(options) {\n  if (eth_1.isValidChainId(options.CHAIN_ID)) {\n    CHAIN_ID = Number(options.CHAIN_ID);\n  } else {\n    throw new Error(\"Invalid Chain id \".concat(options.CHAIN_ID, \". Valid options are \").concat(Object.values(chain_id_1.ChainId)));\n  }\n\n  if (options.MANA_ADDRESS) {\n    console.warn('Deprecated notice: the MANA_ADDRESS option on `createWalletSaga` has been deprecated and will be removed in future version.');\n  }\n\n  if (options.POLL_INTERVAL) {\n    POLL_INTERVAL = options.POLL_INTERVAL;\n  }\n\n  if (options.TRANSACTIONS_API_URL) {\n    utils_1.setTransactionsApiUrl(options.TRANSACTIONS_API_URL);\n  } else {\n    console.warn(\"\\\"TRANSACTIONS_API_URL\\\" not provided on createWalletSaga, using default value \\\"\".concat(utils_1.getTransactionsApiUrl(), \"\\\".\"));\n  }\n\n  return walletSaga;\n}\n\nexports.createWalletSaga = createWalletSaga;","map":null,"metadata":{},"sourceType":"script"}