{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar address_1 = require(\"../address\");\n\nvar account_1 = require(\"../eth-lib/account\");\n\nvar hash_message_1 = require(\"./hash-message\");\n\nfunction sign(data, privateKey) {\n  var messageHash = hash_message_1.hashMessage(data);\n  var signature = account_1.sign(messageHash, privateKey);\n  var vrs = account_1.decodeSignature(signature);\n  return {\n    message: data,\n    messageHash: messageHash,\n    v: vrs[0],\n    r: vrs[1],\n    s: vrs[2],\n    signature: signature\n  };\n}\n\nexports.sign = sign;\n\nfunction recoverFromSignature(signature) {\n  var messageHash = signature.messageHash,\n      v = signature.v,\n      r = signature.r,\n      s = signature.s;\n  return recoverFromSigString(messageHash, account_1.encodeSignature([v, r, s]), true);\n}\n\nexports.recoverFromSignature = recoverFromSignature;\n\nfunction recoverFromVRS(message, v, r, s) {\n  var prefixed = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  if (!prefixed) {\n    message = hash_message_1.hashMessage(message);\n  }\n\n  return recoverFromSigString(message, account_1.encodeSignature([v, r, s]), true);\n}\n\nexports.recoverFromVRS = recoverFromVRS;\n\nfunction recoverFromSigString(message, signature) {\n  var preFixed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (!preFixed) {\n    message = hash_message_1.hashMessage(message);\n  }\n\n  return address_1.Address.fromString(account_1.recover(message, signature));\n}\n\nexports.recoverFromSigString = recoverFromSigString;\n\nfunction recover() {\n  switch (arguments.length) {\n    case 1:\n      return recoverFromSignature(arguments.length <= 0 ? undefined : arguments[0]);\n\n    case 2:\n    case 3:\n      return recoverFromSigString(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n\n    case 4:\n    case 5:\n      return recoverFromVRS(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2], arguments.length <= 3 ? undefined : arguments[3], arguments.length <= 4 ? undefined : arguments[4]);\n  }\n\n  throw new Error('Cannot determine recovery function');\n}\n\nexports.recover = recover;","map":null,"metadata":{},"sourceType":"script"}