{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar _objectSpread = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"util\");\n\nvar address_1 = require(\"../address\");\n\nvar formatters_1 = require(\"../formatters\");\n\nvar utils_1 = require(\"../utils\");\n\nvar identity = function identity() {\n  return function (result) {\n    return result;\n  };\n};\n\nvar EthRequestPayloads = /*#__PURE__*/function () {\n  function EthRequestPayloads(defaultFromAddress) {\n    var defaultBlock = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'latest';\n\n    _classCallCheck(this, EthRequestPayloads);\n\n    this.defaultFromAddress = defaultFromAddress;\n    this.defaultBlock = defaultBlock;\n  }\n\n  _createClass(EthRequestPayloads, [{\n    key: \"getDefaultBlock\",\n    value: function getDefaultBlock() {\n      return this.defaultBlock;\n    }\n  }, {\n    key: \"setDefaultBlock\",\n    value: function setDefaultBlock(block) {\n      this.defaultBlock = block;\n    }\n  }, {\n    key: \"getId\",\n    value: function getId() {\n      return {\n        method: 'net_version',\n        format: utils_1.hexToNumber\n      };\n    }\n  }, {\n    key: \"getNodeInfo\",\n    value: function getNodeInfo() {\n      return {\n        method: 'web3_clientVersion',\n        format: identity()\n      };\n    }\n  }, {\n    key: \"getProtocolVersion\",\n    value: function getProtocolVersion() {\n      return {\n        method: 'eth_protocolVersion',\n        format: identity()\n      };\n    }\n  }, {\n    key: \"getCoinbase\",\n    value: function getCoinbase() {\n      return {\n        method: 'eth_coinbase',\n        format: address_1.Address.fromString\n      };\n    }\n  }, {\n    key: \"isMining\",\n    value: function isMining() {\n      return {\n        method: 'eth_mining',\n        format: identity()\n      };\n    }\n  }, {\n    key: \"getHashrate\",\n    value: function getHashrate() {\n      return {\n        method: 'eth_hashrate',\n        format: utils_1.hexToNumber\n      };\n    }\n  }, {\n    key: \"isSyncing\",\n    value: function isSyncing() {\n      return {\n        method: 'eth_syncing',\n        format: formatters_1.outputSyncingFormatter\n      };\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      return {\n        method: 'eth_gasPrice',\n        format: formatters_1.outputBigNumberFormatter\n      };\n    }\n  }, {\n    key: \"getAccounts\",\n    value: function getAccounts() {\n      return {\n        method: 'eth_accounts',\n        format: function format(result) {\n          return result.map(address_1.Address.fromString);\n        }\n      };\n    }\n  }, {\n    key: \"getBlockNumber\",\n    value: function getBlockNumber() {\n      return {\n        method: 'eth_blockNumber',\n        format: utils_1.hexToNumber\n      };\n    }\n  }, {\n    key: \"getBalance\",\n    value: function getBalance(address, block) {\n      return {\n        method: 'eth_getBalance',\n        params: [address.toString().toLowerCase(), formatters_1.inputBlockNumberFormatter(this.resolveBlock(block))],\n        format: formatters_1.outputBigNumberFormatter\n      };\n    }\n  }, {\n    key: \"getStorageAt\",\n    value: function getStorageAt(address, position, block) {\n      return {\n        method: 'eth_getStorageAt',\n        params: [address.toString().toLowerCase(), utils_1.numberToHex(position), formatters_1.inputBlockNumberFormatter(this.resolveBlock(block))],\n        format: identity()\n      };\n    }\n  }, {\n    key: \"getCode\",\n    value: function getCode(address, block) {\n      return {\n        method: 'eth_getCode',\n        params: [address.toString().toLowerCase(), formatters_1.inputBlockNumberFormatter(this.resolveBlock(block))],\n        format: identity()\n      };\n    }\n  }, {\n    key: \"getBlock\",\n    value: function getBlock(block) {\n      var returnTransactionObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return {\n        method: util_1.isString(block) && utils_1.isHexStrict(block) ? 'eth_getBlockByHash' : 'eth_getBlockByNumber',\n        params: [formatters_1.inputBlockNumberFormatter(this.resolveBlock(block)), returnTransactionObjects],\n        format: formatters_1.fromRawBlockResponse\n      };\n    }\n  }, {\n    key: \"getUncle\",\n    value: function getUncle(block, uncleIndex) {\n      var returnTransactionObjects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return {\n        method: util_1.isString(block) && utils_1.isHexStrict(block) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex',\n        params: [formatters_1.inputBlockNumberFormatter(this.resolveBlock(block)), utils_1.numberToHex(uncleIndex), returnTransactionObjects],\n        format: formatters_1.fromRawBlockResponse\n      };\n    }\n  }, {\n    key: \"getBlockTransactionCount\",\n    value: function getBlockTransactionCount(block) {\n      return {\n        method: util_1.isString(block) && utils_1.isHexStrict(block) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber',\n        params: [formatters_1.inputBlockNumberFormatter(this.resolveBlock(block))],\n        format: utils_1.hexToNumber\n      };\n    }\n  }, {\n    key: \"getBlockUncleCount\",\n    value: function getBlockUncleCount(block) {\n      return {\n        method: util_1.isString(block) && utils_1.isHexStrict(block) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber',\n        params: [formatters_1.inputBlockNumberFormatter(this.resolveBlock(block))],\n        format: utils_1.hexToNumber\n      };\n    }\n  }, {\n    key: \"getTransaction\",\n    value: function getTransaction(hash) {\n      return {\n        method: 'eth_getTransactionByHash',\n        params: [hash],\n        format: formatters_1.fromRawTransactionResponse\n      };\n    }\n  }, {\n    key: \"getTransactionFromBlock\",\n    value: function getTransactionFromBlock(block, index) {\n      return {\n        method: util_1.isString(block) && utils_1.isHexStrict(block) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex',\n        params: [formatters_1.inputBlockNumberFormatter(block), utils_1.numberToHex(index)],\n        format: formatters_1.fromRawTransactionResponse\n      };\n    }\n  }, {\n    key: \"getTransactionReceipt\",\n    value: function getTransactionReceipt(hash) {\n      return {\n        method: 'eth_getTransactionReceipt',\n        params: [hash],\n        format: formatters_1.fromRawTransactionReceipt\n      };\n    }\n  }, {\n    key: \"getTransactionCount\",\n    value: function getTransactionCount(address, block) {\n      return {\n        method: 'eth_getTransactionCount',\n        params: [address.toString().toLowerCase(), formatters_1.inputBlockNumberFormatter(this.resolveBlock(block))],\n        format: utils_1.hexToNumber\n      };\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(tx) {\n      tx.from = tx.from || this.defaultFromAddress;\n      return {\n        method: 'eth_signTransaction',\n        params: [formatters_1.toRawTransactionRequest(tx)],\n        format: identity()\n      };\n    }\n  }, {\n    key: \"sendSignedTransaction\",\n    value: function sendSignedTransaction(data) {\n      return {\n        method: 'eth_sendRawTransaction',\n        params: [data],\n        format: identity()\n      };\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(tx) {\n      var from = tx.from || this.defaultFromAddress;\n\n      if (!from) {\n        throw new Error('No from addres specified.');\n      }\n\n      return {\n        method: 'eth_sendTransaction',\n        params: [formatters_1.toRawTransactionRequest(_objectSpread({}, tx, {\n          from: from\n        }))],\n        format: identity()\n      };\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(address, dataToSign) {\n      return {\n        method: 'eth_sign',\n        params: [address.toString().toLowerCase(), formatters_1.inputSignFormatter(dataToSign)],\n        format: identity()\n      };\n    }\n  }, {\n    key: \"signTypedData\",\n    value: function signTypedData(address, dataToSign) {\n      return {\n        method: 'eth_signTypedData',\n        params: [dataToSign, address.toString().toLowerCase()],\n        format: identity()\n      };\n    }\n  }, {\n    key: \"call\",\n    value: function call(tx, block) {\n      tx.from = tx.from || this.defaultFromAddress;\n      return {\n        method: 'eth_call',\n        params: [formatters_1.toRawCallRequest(tx), formatters_1.inputBlockNumberFormatter(this.resolveBlock(block))],\n        format: identity()\n      };\n    }\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(tx) {\n      tx.from = tx.from || this.defaultFromAddress;\n      return {\n        method: 'eth_estimateGas',\n        params: [formatters_1.toRawEstimateRequest(tx)],\n        format: utils_1.hexToNumber\n      };\n    }\n  }, {\n    key: \"submitWork\",\n    value: function submitWork(nonce, powHash, digest) {\n      return {\n        method: 'eth_submitWork',\n        params: [nonce, powHash, digest],\n        format: identity()\n      };\n    }\n  }, {\n    key: \"getWork\",\n    value: function getWork() {\n      return {\n        method: 'eth_getWork',\n        format: identity()\n      };\n    }\n  }, {\n    key: \"getPastLogs\",\n    value: function getPastLogs(options) {\n      return {\n        method: 'eth_getLogs',\n        params: [formatters_1.toRawLogRequest(options)],\n        format: function format(result) {\n          return result.map(formatters_1.fromRawLogResponse);\n        }\n      };\n    }\n  }, {\n    key: \"resolveBlock\",\n    value: function resolveBlock(block) {\n      return block === undefined ? this.defaultBlock : block;\n    }\n  }]);\n\n  return EthRequestPayloads;\n}();\n\nexports.EthRequestPayloads = EthRequestPayloads;","map":null,"metadata":{},"sourceType":"script"}