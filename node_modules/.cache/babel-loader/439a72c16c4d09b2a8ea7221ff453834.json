{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.boolOrEmptySchema = exports.topBoolOrEmptySchema = void 0;\n\nvar errors_1 = require(\"../errors\");\n\nvar codegen_1 = require(\"../codegen\");\n\nvar names_1 = require(\"../names\");\n\nvar boolError = {\n  message: \"boolean schema is false\"\n};\n\nfunction topBoolOrEmptySchema(it) {\n  var gen = it.gen,\n      schema = it.schema,\n      validateName = it.validateName;\n\n  if (schema === false) {\n    falseSchemaError(it, false);\n  } else if (typeof schema == \"object\" && schema.$async === true) {\n    gen.return(names_1.default.data);\n  } else {\n    gen.assign(codegen_1._(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\", \".errors\"])), validateName), null);\n    gen.return(true);\n  }\n}\n\nexports.topBoolOrEmptySchema = topBoolOrEmptySchema;\n\nfunction boolOrEmptySchema(it, valid) {\n  var gen = it.gen,\n      schema = it.schema;\n\n  if (schema === false) {\n    gen.var(valid, false); // TODO var\n\n    falseSchemaError(it);\n  } else {\n    gen.var(valid, true); // TODO var\n  }\n}\n\nexports.boolOrEmptySchema = boolOrEmptySchema;\n\nfunction falseSchemaError(it, overrideAllErrors) {\n  var gen = it.gen,\n      data = it.data; // TODO maybe some other interface should be used for non-keyword validation errors...\n\n  var cxt = {\n    gen: gen,\n    keyword: \"false schema\",\n    data: data,\n    schema: false,\n    schemaCode: false,\n    schemaValue: false,\n    params: {},\n    it: it\n  };\n  errors_1.reportError(cxt, boolError, overrideAllErrors);\n}","map":null,"metadata":{},"sourceType":"script"}