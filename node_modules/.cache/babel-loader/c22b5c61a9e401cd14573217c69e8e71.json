{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _objectSpread = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TPWearable = void 0;\n\nvar validation_1 = require(\"../../validation\");\n\nvar merkle_tree_1 = require(\"../merkle-tree\");\n\nvar base_wearable_1 = require(\"./base-wearable\");\n/** @alpha */\n\n\nvar TPWearable;\n\n(function (TPWearable) {\n  TPWearable.schema = _objectSpread({}, base_wearable_1.BaseWearable.schema, {\n    properties: _objectSpread({}, base_wearable_1.BaseWearable.schema.properties, {\n      content: {\n        type: 'object',\n        additionalProperties: {\n          type: 'string'\n        },\n        required: []\n      },\n      merkleProof: merkle_tree_1.MerkleProof.schema\n    }),\n    required: [].concat(_toConsumableArray(base_wearable_1.BaseWearable.schema.required), ['content'])\n  });\n  var schemaValidator = (0, validation_1.generateValidator)(TPWearable.schema);\n\n  TPWearable.validate = function (wearable) {\n    return schemaValidator(wearable) && base_wearable_1.BaseWearable.validateDuplicatedLocales(wearable.descriptions) && base_wearable_1.BaseWearable.validateDuplicatedLocales(wearable.names);\n  };\n})(TPWearable = exports.TPWearable || (exports.TPWearable = {}));","map":null,"metadata":{},"sourceType":"script"}