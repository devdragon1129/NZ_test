{"ast":null,"code":"import _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { action } from 'typesafe-actions';\nimport { buildTransactionPayload } from 'decentraland-dapps/dist/modules/transaction/utils';\n// Fetch ENS resolver for a land\nexport var FETCH_ENS_REQUEST = '[Request] Fetch ENS';\nexport var FETCH_ENS_SUCCESS = '[Success] Fetch ENS';\nexport var FETCH_ENS_FAILURE = '[Failure] Fetch ENS';\nexport var fetchENSRequest = function fetchENSRequest(name, land) {\n  return action(FETCH_ENS_REQUEST, {\n    name: name,\n    land: land\n  });\n};\nexport var fetchENSSuccess = function fetchENSSuccess(ens) {\n  return action(FETCH_ENS_SUCCESS, {\n    ens: ens\n  });\n};\nexport var fetchENSFailure = function fetchENSFailure(error) {\n  return action(FETCH_ENS_FAILURE, {\n    error: error\n  });\n};\n// Set the ENS Resolver\nexport var SET_ENS_RESOLVER_REQUEST = '[Request] Set ENS Resolver';\nexport var SET_ENS_RESOLVER_SUCCESS = '[Success] Set ENS Resolver';\nexport var SET_ENS_RESOLVER_FAILURE = '[Failure] Set ENS Resolver';\nexport var setENSResolverRequest = function setENSResolverRequest(ens) {\n  return action(SET_ENS_RESOLVER_REQUEST, {\n    ens: ens\n  });\n};\nexport var setENSResolverSuccess = function setENSResolverSuccess(ens, resolver, address, chainId, txHash) {\n  return action(SET_ENS_RESOLVER_SUCCESS, _objectSpread({}, buildTransactionPayload(chainId, txHash, {\n    ens: ens,\n    resolver: resolver,\n    address: address\n  }), {\n    ens: ens\n  }));\n};\nexport var setENSResolverFailure = function setENSResolverFailure(ens, error) {\n  return action(SET_ENS_RESOLVER_FAILURE, {\n    ens: ens,\n    error: error\n  });\n};\n// Set the Content on the ENS resolver contract.\n// The Content is a IPFS hash refering a file. This file is an HTML file with a Redirection to a LAND url.\nexport var SET_ENS_CONTENT_REQUEST = '[Request] Set ENS Content';\nexport var SET_ENS_CONTENT_SUCCESS = '[Success] Set ENS Content';\nexport var SET_ENS_CONTENT_FAILURE = '[Failure] Set ENS Content';\nexport var setENSContentRequest = function setENSContentRequest(ens, land) {\n  return action(SET_ENS_CONTENT_REQUEST, {\n    ens: ens,\n    land: land\n  });\n};\nexport var setENSContentSuccess = function setENSContentSuccess(ens, content, land, address, chainId, txHash) {\n  return action(SET_ENS_CONTENT_SUCCESS, _objectSpread({}, buildTransactionPayload(chainId, txHash, {\n    ens: ens,\n    content: content,\n    land: land,\n    address: address\n  }), {\n    ens: ens,\n    land: land\n  }));\n};\nexport var setENSContentFailure = function setENSContentFailure(ens, land, error) {\n  return action(SET_ENS_CONTENT_FAILURE, {\n    ens: ens,\n    land: land,\n    error: error\n  });\n};\n// Get a ENS List (list of names) owned by the current account\nexport var FETCH_ENS_LIST_REQUEST = '[Request] Fetch ENS List';\nexport var FETCH_ENS_LIST_SUCCESS = '[Success] Fetch ENS List';\nexport var FETCH_ENS_LIST_FAILURE = '[Failure] Fetch ENS List';\nexport var fetchENSListRequest = function fetchENSListRequest() {\n  return action(FETCH_ENS_LIST_REQUEST, {});\n};\nexport var fetchENSListSuccess = function fetchENSListSuccess(ensList) {\n  return action(FETCH_ENS_LIST_SUCCESS, {\n    ensList: ensList\n  });\n};\nexport var fetchENSListFailure = function fetchENSListFailure(error) {\n  return action(FETCH_ENS_LIST_FAILURE, {\n    error: error\n  });\n};\n// Claim a new name\nexport var CLAIM_NAME_REQUEST = '[Request] Claim Name';\nexport var CLAIM_NAME_SUCCESS = '[Success] Claim Name';\nexport var CLAIM_NAME_FAILURE = '[Failure] Claim Name';\nexport var claimNameRequest = function claimNameRequest(name) {\n  return action(CLAIM_NAME_REQUEST, {\n    name: name\n  });\n};\nexport var claimNameSuccess = function claimNameSuccess(ens, name, address, chainId, txHash) {\n  return action(CLAIM_NAME_SUCCESS, _objectSpread({}, buildTransactionPayload(chainId, txHash, {\n    ens: ens,\n    name: name,\n    address: address\n  }), {\n    ens: ens,\n    name: name\n  }));\n};\nexport var claimNameFailure = function claimNameFailure(error) {\n  return action(CLAIM_NAME_FAILURE, {\n    error: error\n  });\n};\n// Fetch ENS related authorizations\nexport var FETCH_ENS_AUTHORIZATION_REQUEST = '[Request] Fetch ENS Authorization';\nexport var FETCH_ENS_AUTHORIZATION_SUCCESS = '[Success] Fetch ENS Authorization';\nexport var FETCH_ENS_AUTHORIZATION_FAILURE = '[Failure] Fetch ENS Authorization';\nexport var fetchENSAuthorizationRequest = function fetchENSAuthorizationRequest() {\n  return action(FETCH_ENS_AUTHORIZATION_REQUEST, {});\n};\nexport var fetchENSAuthorizationSuccess = function fetchENSAuthorizationSuccess(authorization, address) {\n  return action(FETCH_ENS_AUTHORIZATION_SUCCESS, {\n    authorization: authorization,\n    address: address\n  });\n};\nexport var fetchENSAuthorizationFailure = function fetchENSAuthorizationFailure(error) {\n  return action(FETCH_ENS_AUTHORIZATION_FAILURE, {\n    error: error\n  });\n};\n// Allow MANA to claim names\nexport var ALLOW_CLAIM_MANA_REQUEST = '[Request] Allow Claim MANA';\nexport var ALLOW_CLAIM_MANA_SUCCESS = '[Success] Allow Claim MANA';\nexport var ALLOW_CLAIM_MANA_FAILURE = '[Failure] Allow Claim MANA';\nexport var allowClaimManaRequest = function allowClaimManaRequest(allowance) {\n  return action(ALLOW_CLAIM_MANA_REQUEST, {\n    allowance: allowance\n  });\n};\nexport var allowClaimManaSuccess = function allowClaimManaSuccess(allowance, address, chainId, txHash) {\n  return action(ALLOW_CLAIM_MANA_SUCCESS, _objectSpread({}, buildTransactionPayload(chainId, txHash, {\n    allowance: allowance,\n    address: address\n  }), {\n    allowance: allowance,\n    address: address\n  }));\n};\nexport var allowClaimManaFailure = function allowClaimManaFailure(error) {\n  return action(ALLOW_CLAIM_MANA_FAILURE, {\n    error: error\n  });\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/ens/actions.ts"],"names":["action","buildTransactionPayload","FETCH_ENS_REQUEST","FETCH_ENS_SUCCESS","FETCH_ENS_FAILURE","fetchENSRequest","name","land","fetchENSSuccess","ens","fetchENSFailure","error","SET_ENS_RESOLVER_REQUEST","SET_ENS_RESOLVER_SUCCESS","SET_ENS_RESOLVER_FAILURE","setENSResolverRequest","setENSResolverSuccess","resolver","address","chainId","txHash","setENSResolverFailure","SET_ENS_CONTENT_REQUEST","SET_ENS_CONTENT_SUCCESS","SET_ENS_CONTENT_FAILURE","setENSContentRequest","setENSContentSuccess","content","setENSContentFailure","FETCH_ENS_LIST_REQUEST","FETCH_ENS_LIST_SUCCESS","FETCH_ENS_LIST_FAILURE","fetchENSListRequest","fetchENSListSuccess","ensList","fetchENSListFailure","CLAIM_NAME_REQUEST","CLAIM_NAME_SUCCESS","CLAIM_NAME_FAILURE","claimNameRequest","claimNameSuccess","claimNameFailure","FETCH_ENS_AUTHORIZATION_REQUEST","FETCH_ENS_AUTHORIZATION_SUCCESS","FETCH_ENS_AUTHORIZATION_FAILURE","fetchENSAuthorizationRequest","fetchENSAuthorizationSuccess","authorization","fetchENSAuthorizationFailure","ALLOW_CLAIM_MANA_REQUEST","ALLOW_CLAIM_MANA_SUCCESS","ALLOW_CLAIM_MANA_FAILURE","allowClaimManaRequest","allowance","allowClaimManaSuccess","allowClaimManaFailure"],"mappings":"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","sourcesContent":["import { action } from 'typesafe-actions'\nimport { ChainId } from '@dcl/schemas'\nimport { buildTransactionPayload } from 'decentraland-dapps/dist/modules/transaction/utils'\nimport { Land } from 'modules/land/types'\nimport { Authorization, ENS, ENSError } from './types'\n\n// Fetch ENS resolver for a land\nexport const FETCH_ENS_REQUEST = '[Request] Fetch ENS'\nexport const FETCH_ENS_SUCCESS = '[Success] Fetch ENS'\nexport const FETCH_ENS_FAILURE = '[Failure] Fetch ENS'\n\nexport const fetchENSRequest = (name: string, land: Land) => action(FETCH_ENS_REQUEST, { name, land })\nexport const fetchENSSuccess = (ens: ENS) => action(FETCH_ENS_SUCCESS, { ens })\nexport const fetchENSFailure = (error: ENSError) => action(FETCH_ENS_FAILURE, { error })\n\nexport type FetchENSRequestAction = ReturnType<typeof fetchENSRequest>\nexport type FetchENSSuccessAction = ReturnType<typeof fetchENSSuccess>\nexport type FetchENSFailureAction = ReturnType<typeof fetchENSFailure>\n\n// Set the ENS Resolver\nexport const SET_ENS_RESOLVER_REQUEST = '[Request] Set ENS Resolver'\nexport const SET_ENS_RESOLVER_SUCCESS = '[Success] Set ENS Resolver'\nexport const SET_ENS_RESOLVER_FAILURE = '[Failure] Set ENS Resolver'\n\nexport const setENSResolverRequest = (ens: ENS) => action(SET_ENS_RESOLVER_REQUEST, { ens })\nexport const setENSResolverSuccess = (ens: ENS, resolver: string, address: string, chainId: ChainId, txHash: string) =>\n  action(SET_ENS_RESOLVER_SUCCESS, {\n    ...buildTransactionPayload(chainId, txHash, { ens, resolver, address }),\n    ens\n  })\nexport const setENSResolverFailure = (ens: ENS, error: ENSError) => action(SET_ENS_RESOLVER_FAILURE, { ens, error })\n\nexport type SetENSResolverRequestAction = ReturnType<typeof setENSResolverRequest>\nexport type SetENSResolverSuccessAction = ReturnType<typeof setENSResolverSuccess>\nexport type SetENSResolverFailureAction = ReturnType<typeof setENSResolverFailure>\n\n// Set the Content on the ENS resolver contract.\n// The Content is a IPFS hash refering a file. This file is an HTML file with a Redirection to a LAND url.\nexport const SET_ENS_CONTENT_REQUEST = '[Request] Set ENS Content'\nexport const SET_ENS_CONTENT_SUCCESS = '[Success] Set ENS Content'\nexport const SET_ENS_CONTENT_FAILURE = '[Failure] Set ENS Content'\n\nexport const setENSContentRequest = (ens: ENS, land?: Land) => action(SET_ENS_CONTENT_REQUEST, { ens, land })\nexport const setENSContentSuccess = (\n  ens: ENS,\n  content: string,\n  land: Land | undefined,\n  address: string,\n  chainId: ChainId,\n  txHash: string\n) =>\n  action(SET_ENS_CONTENT_SUCCESS, {\n    ...buildTransactionPayload(chainId, txHash, { ens, content, land, address }),\n    ens,\n    land\n  })\nexport const setENSContentFailure = (ens: ENS, land: Land | undefined, error: ENSError) =>\n  action(SET_ENS_CONTENT_FAILURE, { ens, land, error })\n\nexport type SetENSContentRequestAction = ReturnType<typeof setENSContentRequest>\nexport type SetENSContentSuccessAction = ReturnType<typeof setENSContentSuccess>\nexport type SetENSContentFailureAction = ReturnType<typeof setENSContentFailure>\n\n// Get a ENS List (list of names) owned by the current account\nexport const FETCH_ENS_LIST_REQUEST = '[Request] Fetch ENS List'\nexport const FETCH_ENS_LIST_SUCCESS = '[Success] Fetch ENS List'\nexport const FETCH_ENS_LIST_FAILURE = '[Failure] Fetch ENS List'\n\nexport const fetchENSListRequest = () => action(FETCH_ENS_LIST_REQUEST, {})\nexport const fetchENSListSuccess = (ensList: ENS[]) => action(FETCH_ENS_LIST_SUCCESS, { ensList })\nexport const fetchENSListFailure = (error: ENSError) => action(FETCH_ENS_LIST_FAILURE, { error })\n\nexport type FetchENSListRequestAction = ReturnType<typeof fetchENSListRequest>\nexport type FetchENSListSuccessAction = ReturnType<typeof fetchENSListSuccess>\nexport type FetchENSListFailureAction = ReturnType<typeof fetchENSListFailure>\n\n// Claim a new name\nexport const CLAIM_NAME_REQUEST = '[Request] Claim Name'\nexport const CLAIM_NAME_SUCCESS = '[Success] Claim Name'\nexport const CLAIM_NAME_FAILURE = '[Failure] Claim Name'\n\nexport const claimNameRequest = (name: string) => action(CLAIM_NAME_REQUEST, { name })\nexport const claimNameSuccess = (ens: ENS, name: string, address: string, chainId: ChainId, txHash: string) =>\n  action(CLAIM_NAME_SUCCESS, {\n    ...buildTransactionPayload(chainId, txHash, { ens, name, address }),\n    ens,\n    name\n  })\nexport const claimNameFailure = (error: ENSError) => action(CLAIM_NAME_FAILURE, { error })\n\nexport type ClaimNameRequestAction = ReturnType<typeof claimNameRequest>\nexport type ClaimNameSuccessAction = ReturnType<typeof claimNameSuccess>\nexport type ClaimNameFailureAction = ReturnType<typeof claimNameFailure>\n\n// Fetch ENS related authorizations\nexport const FETCH_ENS_AUTHORIZATION_REQUEST = '[Request] Fetch ENS Authorization'\nexport const FETCH_ENS_AUTHORIZATION_SUCCESS = '[Success] Fetch ENS Authorization'\nexport const FETCH_ENS_AUTHORIZATION_FAILURE = '[Failure] Fetch ENS Authorization'\n\nexport const fetchENSAuthorizationRequest = () => action(FETCH_ENS_AUTHORIZATION_REQUEST, {})\nexport const fetchENSAuthorizationSuccess = (authorization: Authorization, address: string) =>\n  action(FETCH_ENS_AUTHORIZATION_SUCCESS, { authorization, address })\nexport const fetchENSAuthorizationFailure = (error: ENSError) => action(FETCH_ENS_AUTHORIZATION_FAILURE, { error })\n\nexport type FetchENSAuthorizationRequestAction = ReturnType<typeof fetchENSAuthorizationRequest>\nexport type FetchENSAuthorizationSuccessAction = ReturnType<typeof fetchENSAuthorizationSuccess>\nexport type FetchENSAuthorizationFailureAction = ReturnType<typeof fetchENSAuthorizationFailure>\n\n// Allow MANA to claim names\nexport const ALLOW_CLAIM_MANA_REQUEST = '[Request] Allow Claim MANA'\nexport const ALLOW_CLAIM_MANA_SUCCESS = '[Success] Allow Claim MANA'\nexport const ALLOW_CLAIM_MANA_FAILURE = '[Failure] Allow Claim MANA'\n\nexport const allowClaimManaRequest = (allowance: string) => action(ALLOW_CLAIM_MANA_REQUEST, { allowance })\nexport const allowClaimManaSuccess = (allowance: string, address: string, chainId: ChainId, txHash: string) =>\n  action(ALLOW_CLAIM_MANA_SUCCESS, {\n    ...buildTransactionPayload(chainId, txHash, { allowance, address }),\n    allowance,\n    address\n  })\nexport const allowClaimManaFailure = (error: ENSError) => action(ALLOW_CLAIM_MANA_FAILURE, { error })\n\nexport type AllowClaimManaRequestAction = ReturnType<typeof allowClaimManaRequest>\nexport type AllowClaimManaSuccessAction = ReturnType<typeof allowClaimManaSuccess>\nexport type AllowClaimManaFailureAction = ReturnType<typeof allowClaimManaFailure>\n"]},"metadata":{},"sourceType":"module"}