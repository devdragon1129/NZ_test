{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { WebXRExperienceHelper } from \"./webXRExperienceHelper\";\nimport { WebXRInput } from \"./webXRInput\";\nimport { WebXRControllerPointerSelection } from \"./features/WebXRControllerPointerSelection\";\nimport { WebXREnterExitUI } from \"./webXREnterExitUI\";\nimport { WebXRMotionControllerTeleportation } from \"./features/WebXRControllerTeleportation\";\nimport { Logger } from \"../Misc/logger\";\n/**\r\n * Options for the default xr helper\r\n */\n\nvar WebXRDefaultExperienceOptions =\n/** @class */\nfunction () {\n  function WebXRDefaultExperienceOptions() {}\n\n  return WebXRDefaultExperienceOptions;\n}();\n\nexport { WebXRDefaultExperienceOptions };\n/**\r\n * Default experience which provides a similar setup to the previous webVRExperience\r\n */\n\nvar WebXRDefaultExperience =\n/** @class */\nfunction () {\n  function WebXRDefaultExperience() {}\n  /**\r\n   * Creates the default xr experience\r\n   * @param scene scene\r\n   * @param options options for basic configuration\r\n   * @returns resulting WebXRDefaultExperience\r\n   */\n\n\n  WebXRDefaultExperience.CreateAsync = function (scene, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var result = new WebXRDefaultExperience(); // Create base experience\n\n    return WebXRExperienceHelper.CreateAsync(scene).then(function (xrHelper) {\n      result.baseExperience = xrHelper;\n\n      if (options.ignoreNativeCameraTransformation) {\n        result.baseExperience.camera.compensateOnFirstFrame = false;\n      } // Add controller support\n\n\n      result.input = new WebXRInput(xrHelper.sessionManager, xrHelper.camera, __assign({\n        controllerOptions: {\n          renderingGroupId: options.renderingGroupId\n        }\n      }, options.inputOptions || {}));\n      result.pointerSelection = result.baseExperience.featuresManager.enableFeature(WebXRControllerPointerSelection.Name, options.useStablePlugins ? \"stable\" : \"latest\", {\n        xrInput: result.input,\n        renderingGroupId: options.renderingGroupId\n      }); // Add default teleportation, including rotation\n\n      if (!options.disableTeleportation) {\n        result.teleportation = result.baseExperience.featuresManager.enableFeature(WebXRMotionControllerTeleportation.Name, options.useStablePlugins ? \"stable\" : \"latest\", {\n          floorMeshes: options.floorMeshes,\n          xrInput: result.input,\n          renderingGroupId: options.renderingGroupId\n        });\n        result.teleportation.setSelectionFeature(result.pointerSelection);\n      } // Create the WebXR output target\n\n\n      result.renderTarget = result.baseExperience.sessionManager.getWebXRRenderTarget(options.outputCanvasOptions);\n\n      if (!options.disableDefaultUI) {\n        var uiOptions = __assign({\n          renderTarget: result.renderTarget\n        }, options.uiOptions || {});\n\n        if (options.optionalFeatures) {\n          if (typeof options.optionalFeatures === \"boolean\") {\n            uiOptions.optionalFeatures = [\"hit-test\", \"anchors\", \"plane-detection\", \"hand-tracking\"];\n          } else {\n            uiOptions.optionalFeatures = options.optionalFeatures;\n          }\n        } // Create ui for entering/exiting xr\n\n\n        return WebXREnterExitUI.CreateAsync(scene, result.baseExperience, uiOptions).then(function (ui) {\n          result.enterExitUI = ui;\n        });\n      } else {\n        return;\n      }\n    }).then(function () {\n      return result;\n    }).catch(function (error) {\n      Logger.Error(\"Error initializing XR\");\n      Logger.Error(error);\n      return result;\n    });\n  };\n  /**\r\n   * DIsposes of the experience helper\r\n   */\n\n\n  WebXRDefaultExperience.prototype.dispose = function () {\n    if (this.baseExperience) {\n      this.baseExperience.dispose();\n    }\n\n    if (this.input) {\n      this.input.dispose();\n    }\n\n    if (this.enterExitUI) {\n      this.enterExitUI.dispose();\n    }\n\n    if (this.renderTarget) {\n      this.renderTarget.dispose();\n    }\n  };\n\n  return WebXRDefaultExperience;\n}();\n\nexport { WebXRDefaultExperience };","map":null,"metadata":{},"sourceType":"module"}