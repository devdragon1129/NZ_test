{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport \"../../../../Shaders/ShadersInclude/helperFunctions\";\nimport \"../../../../Shaders/ShadersInclude/imageProcessingDeclaration\";\nimport \"../../../../Shaders/ShadersInclude/imageProcessingFunctions\";\n/**\r\n * Block used to add image processing support to fragment shader\r\n */\n\nvar ImageProcessingBlock =\n/** @class */\nfunction (_super) {\n  __extends(ImageProcessingBlock, _super);\n  /**\r\n   * Create a new ImageProcessingBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function ImageProcessingBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color4);\n\n    _this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Color3);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  ImageProcessingBlock.prototype.getClassName = function () {\n    return \"ImageProcessingBlock\";\n  };\n\n  Object.defineProperty(ImageProcessingBlock.prototype, \"color\", {\n    /**\r\n     * Gets the color input component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Initialize the block and prepare the context for build\r\n   * @param state defines the state that will be used for the build\r\n   */\n\n  ImageProcessingBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"exposureLinear\");\n\n    state._excludeVariableName(\"contrast\");\n\n    state._excludeVariableName(\"vInverseScreenSize\");\n\n    state._excludeVariableName(\"vignetteSettings1\");\n\n    state._excludeVariableName(\"vignetteSettings2\");\n\n    state._excludeVariableName(\"vCameraColorCurveNegative\");\n\n    state._excludeVariableName(\"vCameraColorCurveNeutral\");\n\n    state._excludeVariableName(\"vCameraColorCurvePositive\");\n\n    state._excludeVariableName(\"txColorTransform\");\n\n    state._excludeVariableName(\"colorTransformSettings\");\n  };\n\n  ImageProcessingBlock.prototype.isReady = function (mesh, nodeMaterial, defines) {\n    if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\n      if (!nodeMaterial.imageProcessingConfiguration.isReady()) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  ImageProcessingBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    if (defines._areImageProcessingDirty && nodeMaterial.imageProcessingConfiguration) {\n      nodeMaterial.imageProcessingConfiguration.prepareDefines(defines);\n    }\n  };\n\n  ImageProcessingBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    if (!mesh) {\n      return;\n    }\n\n    if (!nodeMaterial.imageProcessingConfiguration) {\n      return;\n    }\n\n    nodeMaterial.imageProcessingConfiguration.bind(effect);\n  };\n\n  ImageProcessingBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state); // Register for defines\n\n\n    state.sharedData.blocksWithDefines.push(this); // Register for blocking\n\n    state.sharedData.blockingBlocks.push(this); // Register for binding\n\n    state.sharedData.bindableBlocks.push(this); // Uniforms\n\n    state.uniforms.push(\"exposureLinear\");\n    state.uniforms.push(\"contrast\");\n    state.uniforms.push(\"vInverseScreenSize\");\n    state.uniforms.push(\"vignetteSettings1\");\n    state.uniforms.push(\"vignetteSettings2\");\n    state.uniforms.push(\"vCameraColorCurveNegative\");\n    state.uniforms.push(\"vCameraColorCurveNeutral\");\n    state.uniforms.push(\"vCameraColorCurvePositive\");\n    state.uniforms.push(\"txColorTransform\");\n    state.uniforms.push(\"colorTransformSettings\"); // Emit code\n\n    var color = this.color;\n    var output = this._outputs[0];\n    var comments = \"//\" + this.name;\n\n    state._emitFunctionFromInclude(\"helperFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"imageProcessingDeclaration\", comments);\n\n    state._emitFunctionFromInclude(\"imageProcessingFunctions\", comments);\n\n    if (color.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Color4 || color.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Vector4) {\n      state.compilationString += this._declareOutput(output, state) + \" = \" + color.associatedVariableName + \";\\r\\n\";\n    } else {\n      state.compilationString += this._declareOutput(output, state) + \" = vec4(\" + color.associatedVariableName + \", 1.0);\\r\\n\";\n    }\n\n    state.compilationString += \"#ifdef IMAGEPROCESSINGPOSTPROCESS\\r\\n\";\n    state.compilationString += output.associatedVariableName + \".rgb = toLinearSpace(\" + color.associatedVariableName + \".rgb);\\r\\n\";\n    state.compilationString += \"#else\\r\\n\";\n    state.compilationString += \"#ifdef IMAGEPROCESSING\\r\\n\";\n    state.compilationString += output.associatedVariableName + \".rgb = toLinearSpace(\" + color.associatedVariableName + \".rgb);\\r\\n\";\n    state.compilationString += output.associatedVariableName + \" = applyImageProcessing(\" + output.associatedVariableName + \");\\r\\n\";\n    state.compilationString += \"#endif\\r\\n\";\n    state.compilationString += \"#endif\\r\\n\";\n    return this;\n  };\n\n  return ImageProcessingBlock;\n}(NodeMaterialBlock);\n\nexport { ImageProcessingBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.ImageProcessingBlock\"] = ImageProcessingBlock;","map":null,"metadata":{},"sourceType":"module"}