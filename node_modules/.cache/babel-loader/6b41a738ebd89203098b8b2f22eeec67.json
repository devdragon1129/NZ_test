{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar eth_1 = require(\"web3x/eth\");\n\nvar Blocks = /*#__PURE__*/function () {\n  function Blocks(eth) {\n    var save = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    _classCallCheck(this, Blocks);\n\n    this.eth = new eth_1.Eth(eth);\n    this.checkedBlocks = {};\n    this.saveBlocks = save;\n\n    if (save) {\n      this.savedBlocks = {};\n    }\n\n    this.requests = 0;\n  }\n\n  _createClass(Blocks, [{\n    key: \"fillBlockTime\",\n    value: function () {\n      var _fillBlockTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var latest, first;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getBlockWrapper('latest');\n\n              case 2:\n                latest = _context.sent;\n                _context.next = 5;\n                return this.getBlockWrapper(1);\n\n              case 5:\n                first = _context.sent;\n                this.blockTime = (latest.timestamp - first.timestamp) / Number(latest.number) - 1;\n                this.firstTimestamp = first.timestamp;\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fillBlockTime() {\n        return _fillBlockTime.apply(this, arguments);\n      }\n\n      return fillBlockTime;\n    }()\n  }, {\n    key: \"getDate\",\n    value: function () {\n      var _getDate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(date) {\n        var after,\n            dateInSeconds,\n            now,\n            predictedBlock,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                after = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : true;\n                dateInSeconds = date / 1000;\n                now = Date.now() / 1000;\n\n                if (!(typeof this.firstTimestamp === 'undefined' || typeof this.blockTime === 'undefined')) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                _context2.next = 6;\n                return this.fillBlockTime();\n\n              case 6:\n                if (!(dateInSeconds < this.firstTimestamp)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {\n                  block: 1,\n                  timestamp: dateInSeconds\n                });\n\n              case 8:\n                if (!(dateInSeconds >= now || dateInSeconds > this.savedBlocks['latest'].timestamp)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                _context2.next = 11;\n                return this.eth.getBlockNumber();\n\n              case 11:\n                _context2.t0 = _context2.sent;\n                _context2.t1 = dateInSeconds;\n                return _context2.abrupt(\"return\", {\n                  block: _context2.t0,\n                  timestamp: _context2.t1\n                });\n\n              case 14:\n                this.checkedBlocks[dateInSeconds] = [];\n                _context2.next = 17;\n                return this.getBlockWrapper(Math.ceil((dateInSeconds - this.firstTimestamp / this.blockTime) / 1000));\n\n              case 17:\n                predictedBlock = _context2.sent;\n                _context2.next = 20;\n                return this.findBetter(dateInSeconds, predictedBlock, after);\n\n              case 20:\n                _context2.t2 = _context2.sent;\n                _context2.t3 = dateInSeconds;\n                return _context2.abrupt(\"return\", {\n                  block: _context2.t2,\n                  timestamp: _context2.t3\n                });\n\n              case 23:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getDate(_x) {\n        return _getDate.apply(this, arguments);\n      }\n\n      return getDate;\n    }()\n  }, {\n    key: \"findBetter\",\n    value: function () {\n      var _findBetter = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(date, predictedBlock, after) {\n        var blockTime,\n            difference,\n            skip,\n            nextPredictedBlock,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                blockTime = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : this.blockTime;\n                _context3.next = 3;\n                return this.isBetterBlock(date, predictedBlock, after);\n\n              case 3:\n                if (!_context3.sent) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", predictedBlock.number);\n\n              case 5:\n                difference = date - predictedBlock.timestamp;\n                skip = Math.ceil(difference / blockTime);\n\n                if (skip === 0) {\n                  skip = difference < 0 ? -1 : 1;\n                }\n\n                _context3.next = 10;\n                return this.getBlockWrapper(this.getNextBlock(date, predictedBlock.number, skip));\n\n              case 10:\n                nextPredictedBlock = _context3.sent;\n                blockTime = Math.abs((predictedBlock.timestamp - nextPredictedBlock.timestamp) / (predictedBlock.number - nextPredictedBlock.number));\n                return _context3.abrupt(\"return\", this.findBetter(date, nextPredictedBlock, after, blockTime));\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function findBetter(_x2, _x3, _x4) {\n        return _findBetter.apply(this, arguments);\n      }\n\n      return findBetter;\n    }()\n  }, {\n    key: \"isBetterBlock\",\n    value: function () {\n      var _isBetterBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(date, predictedBlock, after) {\n        var blockTime, previousBlock, nextBlock;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                blockTime = predictedBlock.timestamp;\n\n                if (!after) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                if (!(blockTime < date)) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", false);\n\n              case 4:\n                _context4.next = 6;\n                return this.getBlockWrapper(predictedBlock.number - 1);\n\n              case 6:\n                previousBlock = _context4.sent;\n\n                if (!(blockTime >= date && previousBlock.timestamp < date)) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", true);\n\n              case 9:\n                _context4.next = 18;\n                break;\n\n              case 11:\n                if (!(blockTime >= date)) {\n                  _context4.next = 13;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", false);\n\n              case 13:\n                _context4.next = 15;\n                return this.getBlockWrapper(predictedBlock.number + 1);\n\n              case 15:\n                nextBlock = _context4.sent;\n\n                if (!(blockTime < date && nextBlock.timestamp >= date)) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", true);\n\n              case 18:\n                return _context4.abrupt(\"return\", false);\n\n              case 19:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function isBetterBlock(_x5, _x6, _x7) {\n        return _isBetterBlock.apply(this, arguments);\n      }\n\n      return isBetterBlock;\n    }()\n  }, {\n    key: \"getNextBlock\",\n    value: function getNextBlock(date, currentBlock, skip) {\n      var nextBlock = currentBlock + skip;\n\n      if (this.checkedBlocks[date].includes(nextBlock)) {\n        return this.getNextBlock(date, currentBlock, skip < 0 ? ++skip : --skip);\n      }\n\n      this.checkedBlocks[date].push(nextBlock);\n      return nextBlock;\n    }\n  }, {\n    key: \"getBlockWrapper\",\n    value: function () {\n      var _getBlockWrapper = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(block) {\n        var fetchedBlock, _yield$this$eth$getBl, timestamp;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (this.saveBlocks) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                _context5.next = 3;\n                return this.eth.getBlock(block);\n\n              case 3:\n                fetchedBlock = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  number: fetchedBlock.number,\n                  timestamp: fetchedBlock.timestamp\n                });\n\n              case 5:\n                if (!this.savedBlocks[block.toString()]) {\n                  _context5.next = 7;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", this.savedBlocks[block]);\n\n              case 7:\n                if (!(typeof block === 'number' && this.savedBlocks['latest'] && this.savedBlocks['latest'].number <= block)) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", this.savedBlocks['latest']);\n\n              case 9:\n                _context5.next = 11;\n                return this.eth.getBlock(block);\n\n              case 11:\n                _yield$this$eth$getBl = _context5.sent;\n                timestamp = _yield$this$eth$getBl.timestamp;\n\n                if (!(block === 'latest')) {\n                  _context5.next = 19;\n                  break;\n                }\n\n                _context5.next = 16;\n                return this.eth.getBlockNumber();\n\n              case 16:\n                _context5.t0 = _context5.sent;\n                _context5.next = 20;\n                break;\n\n              case 19:\n                _context5.t0 = Number(block);\n\n              case 20:\n                _context5.t1 = _context5.t0;\n                _context5.t2 = timestamp;\n                this.savedBlocks[block.toString()] = {\n                  number: _context5.t1,\n                  timestamp: _context5.t2\n                };\n                this.requests++;\n                return _context5.abrupt(\"return\", this.savedBlocks[block.toString()]);\n\n              case 25:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getBlockWrapper(_x8) {\n        return _getBlockWrapper.apply(this, arguments);\n      }\n\n      return getBlockWrapper;\n    }()\n  }]);\n\n  return Blocks;\n}();\n\nexports.default = Blocks;","map":null,"metadata":{},"sourceType":"script"}