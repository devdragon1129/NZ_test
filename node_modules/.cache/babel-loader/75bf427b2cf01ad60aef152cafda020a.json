{"ast":null,"code":"import { Vector3 } from './math.vector';\n/**\r\n * Extracts minimum and maximum values from a list of indexed positions\r\n * @param positions defines the positions to use\r\n * @param indices defines the indices to the positions\r\n * @param indexStart defines the start index\r\n * @param indexCount defines the end index\r\n * @param bias defines bias value to add to the result\r\n * @return minimum and maximum values\r\n */\n\nexport function extractMinAndMaxIndexed(positions, indices, indexStart, indexCount, bias) {\n  if (bias === void 0) {\n    bias = null;\n  }\n\n  var minimum = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n  var maximum = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n  for (var index = indexStart; index < indexStart + indexCount; index++) {\n    var offset = indices[index] * 3;\n    var x = positions[offset];\n    var y = positions[offset + 1];\n    var z = positions[offset + 2];\n    minimum.minimizeInPlaceFromFloats(x, y, z);\n    maximum.maximizeInPlaceFromFloats(x, y, z);\n  }\n\n  if (bias) {\n    minimum.x -= minimum.x * bias.x + bias.y;\n    minimum.y -= minimum.y * bias.x + bias.y;\n    minimum.z -= minimum.z * bias.x + bias.y;\n    maximum.x += maximum.x * bias.x + bias.y;\n    maximum.y += maximum.y * bias.x + bias.y;\n    maximum.z += maximum.z * bias.x + bias.y;\n  }\n\n  return {\n    minimum: minimum,\n    maximum: maximum\n  };\n}\n/**\r\n * Extracts minimum and maximum values from a list of positions\r\n * @param positions defines the positions to use\r\n * @param start defines the start index in the positions array\r\n * @param count defines the number of positions to handle\r\n * @param bias defines bias value to add to the result\r\n * @param stride defines the stride size to use (distance between two positions in the positions array)\r\n * @return minimum and maximum values\r\n */\n\nexport function extractMinAndMax(positions, start, count, bias, stride) {\n  if (bias === void 0) {\n    bias = null;\n  }\n\n  var minimum = new Vector3(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n  var maximum = new Vector3(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n  if (!stride) {\n    stride = 3;\n  }\n\n  for (var index = start, offset = start * stride; index < start + count; index++, offset += stride) {\n    var x = positions[offset];\n    var y = positions[offset + 1];\n    var z = positions[offset + 2];\n    minimum.minimizeInPlaceFromFloats(x, y, z);\n    maximum.maximizeInPlaceFromFloats(x, y, z);\n  }\n\n  if (bias) {\n    minimum.x -= minimum.x * bias.x + bias.y;\n    minimum.y -= minimum.y * bias.x + bias.y;\n    minimum.z -= minimum.z * bias.x + bias.y;\n    maximum.x += maximum.x * bias.x + bias.y;\n    maximum.y += maximum.y * bias.x + bias.y;\n    maximum.z += maximum.z * bias.x + bias.y;\n  }\n\n  return {\n    minimum: minimum,\n    maximum: maximum\n  };\n}","map":null,"metadata":{},"sourceType":"module"}