{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialConnectionPointDirection } from '../../nodeMaterialBlockConnectionPoint';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\n/**\r\n * Block used to implement the sheen module of the PBR material\r\n */\n\nvar SheenBlock =\n/** @class */\nfunction (_super) {\n  __extends(SheenBlock, _super);\n  /**\r\n   * Create a new SheenBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function SheenBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n    /**\r\n     * If true, the sheen effect is layered above the base BRDF with the albedo-scaling technique.\r\n     * It allows the strength of the sheen effect to not depend on the base color of the material,\r\n     * making it easier to setup and tweak the effect\r\n     */\n\n\n    _this.albedoScaling = false;\n    /**\r\n     * Defines if the sheen is linked to the sheen color.\r\n     */\n\n    _this.linkSheenWithAlbedo = false;\n    _this._isUnique = true;\n\n    _this.registerInput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"sheen\", NodeMaterialBlockConnectionPointTypes.Object, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"sheen\", _this, NodeMaterialConnectionPointDirection.Output, SheenBlock, \"SheenBlock\"));\n\n    return _this;\n  }\n  /**\r\n   * Initialize the block and prepare the context for build\r\n   * @param state defines the state that will be used for the build\r\n   */\n\n\n  SheenBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"sheenOut\");\n\n    state._excludeVariableName(\"sheenMapData\");\n\n    state._excludeVariableName(\"vSheenColor\");\n\n    state._excludeVariableName(\"vSheenRoughness\");\n  };\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  SheenBlock.prototype.getClassName = function () {\n    return \"SheenBlock\";\n  };\n\n  Object.defineProperty(SheenBlock.prototype, \"intensity\", {\n    /**\r\n     * Gets the intensity input component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SheenBlock.prototype, \"color\", {\n    /**\r\n     * Gets the color input component\r\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SheenBlock.prototype, \"roughness\", {\n    /**\r\n     * Gets the roughness input component\r\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SheenBlock.prototype, \"sheen\", {\n    /**\r\n     * Gets the sheen object output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SheenBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    _super.prototype.prepareDefines.call(this, mesh, nodeMaterial, defines);\n\n    defines.setValue(\"SHEEN\", true);\n    defines.setValue(\"SHEEN_USE_ROUGHNESS_FROM_MAINTEXTURE\", true, true);\n    defines.setValue(\"SHEEN_LINKWITHALBEDO\", this.linkSheenWithAlbedo, true);\n    defines.setValue(\"SHEEN_ROUGHNESS\", this.roughness.isConnected, true);\n    defines.setValue(\"SHEEN_ALBEDOSCALING\", this.albedoScaling, true);\n  };\n  /**\r\n   * Gets the main code of the block (fragment side)\r\n   * @param reflectionBlock instance of a ReflectionBlock null if the code must be generated without an active reflection module\r\n   * @returns the shader code\r\n   */\n\n\n  SheenBlock.prototype.getCode = function (reflectionBlock) {\n    var code = \"\";\n    var color = this.color.isConnected ? this.color.associatedVariableName : \"vec3(1.)\";\n    var intensity = this.intensity.isConnected ? this.intensity.associatedVariableName : \"1.\";\n    var roughness = this.roughness.isConnected ? this.roughness.associatedVariableName : \"0.\";\n    var texture = \"vec4(0.)\";\n    code = \"#ifdef SHEEN\\n            sheenOutParams sheenOut;\\n\\n            vec4 vSheenColor = vec4(\" + color + \", \" + intensity + \");\\n\\n            sheenBlock(\\n                vSheenColor,\\n            #ifdef SHEEN_ROUGHNESS\\n                \" + roughness + \",\\n            #endif\\n                roughness,\\n            #ifdef SHEEN_TEXTURE\\n                \" + texture + \",\\n            #endif\\n                reflectance,\\n            #ifdef SHEEN_LINKWITHALBEDO\\n                baseColor,\\n                surfaceAlbedo,\\n            #endif\\n            #ifdef ENVIRONMENTBRDF\\n                NdotV,\\n                environmentBrdf,\\n            #endif\\n            #if defined(REFLECTION) && defined(ENVIRONMENTBRDF)\\n                AARoughnessFactors,\\n                \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionMicrosurfaceInfosName) + \",\\n                \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionInfosName) + \",\\n                \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock.reflectionColor) + \",\\n                vLightingIntensity,\\n                #ifdef \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) + \"\\n                    \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName) + \",\\n                #else\\n                    \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName) + \",\\n                #endif\\n                reflectionOut.reflectionCoords,\\n                NdotVUnclamped,\\n                #ifndef LODBASEDMICROSFURACE\\n                    #ifdef \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) + \"\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName) + \",\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._cubeSamplerName) + \",\\n                    #else\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName) + \",\\n                        \" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._2DSamplerName) + \",\\n                    #endif\\n                #endif\\n                #if !defined(\" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) + \") && defined(RADIANCEOCCLUSION)\\n                    seo,\\n                #endif\\n                #if !defined(\" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) + \") && defined(HORIZONOCCLUSION) && defined(BUMP) && defined(\" + (reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) + \")\\n                    eho,\\n                #endif\\n            #endif\\n                sheenOut\\n            );\\n\\n            #ifdef SHEEN_LINKWITHALBEDO\\n                surfaceAlbedo = sheenOut.surfaceAlbedo;\\n            #endif\\n        #endif\\r\\n\";\n    return code;\n  };\n\n  SheenBlock.prototype._buildBlock = function (state) {\n    if (state.target === NodeMaterialBlockTargets.Fragment) {\n      state.sharedData.blocksWithDefines.push(this);\n    }\n\n    return this;\n  };\n\n  SheenBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = _super.prototype._dumpPropertiesCode.call(this);\n\n    codeString += this._codeVariableName + \".albedoScaling = \" + this.albedoScaling + \";\\r\\n\";\n    codeString += this._codeVariableName + \".linkSheenWithAlbedo = \" + this.linkSheenWithAlbedo + \";\\r\\n\";\n    return codeString;\n  };\n\n  SheenBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.albedoScaling = this.albedoScaling;\n    serializationObject.linkSheenWithAlbedo = this.linkSheenWithAlbedo;\n    return serializationObject;\n  };\n\n  SheenBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.albedoScaling = serializationObject.albedoScaling;\n    this.linkSheenWithAlbedo = serializationObject.linkSheenWithAlbedo;\n  };\n\n  __decorate([editableInPropertyPage(\"Albedo scaling\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], SheenBlock.prototype, \"albedoScaling\", void 0);\n\n  __decorate([editableInPropertyPage(\"Link sheen with albedo\", PropertyTypeForEdition.Boolean, \"PROPERTIES\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], SheenBlock.prototype, \"linkSheenWithAlbedo\", void 0);\n\n  return SheenBlock;\n}(NodeMaterialBlock);\n\nexport { SheenBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.SheenBlock\"] = SheenBlock;","map":null,"metadata":{},"sourceType":"module"}