{"ast":null,"code":"import _defineProperty from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { loadingReducer } from 'decentraland-dapps/dist/modules/loading/reducer';\nimport { FETCH_LANDS_REQUEST, FETCH_LANDS_SUCCESS, FETCH_LANDS_FAILURE } from './actions';\nvar INITIAL_STATE = {\n  data: {},\n  authorizations: [],\n  loading: [],\n  error: null\n};\nexport function landReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_LANDS_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          authorizations: [],\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case FETCH_LANDS_SUCCESS:\n      {\n        var _action$payload = action.payload,\n            address = _action$payload.address,\n            lands = _action$payload.lands,\n            authorizations = _action$payload.authorizations;\n        return {\n          data: _objectSpread({}, state.data, _defineProperty({}, address, lands)),\n          authorizations: authorizations,\n          loading: loadingReducer(state.loading, action),\n          error: null\n        };\n      }\n\n    case FETCH_LANDS_FAILURE:\n      {\n        var error = action.payload.error;\n        return _objectSpread({}, state, {\n          error: error\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/land/reducer.ts"],"names":["loadingReducer","FETCH_LANDS_REQUEST","FETCH_LANDS_SUCCESS","FETCH_LANDS_FAILURE","INITIAL_STATE","data","authorizations","loading","error","landReducer","state","action","type","payload","address","lands"],"mappings":";;AAAA,SAAuBA,cAAvB,QAA6C,iDAA7C;AACA,SAIEC,mBAJF,EAKEC,mBALF,EAMEC,mBANF,QAOO,WAPP;AAiBA,IAAMC,aAAwB,GAAG;AAC/BC,EAAAA,IAAI,EAAE,EADyB;AAE/BC,EAAAA,cAAc,EAAE,EAFe;AAG/BC,EAAAA,OAAO,EAAE,EAHsB;AAI/BC,EAAAA,KAAK,EAAE;AAJwB,CAAjC;AASA,OAAO,SAASC,WAAT,GAAkF;AAAA,MAA7DC,KAA6D,uEAA1CN,aAA0C;AAAA,MAA3BO,MAA2B;;AACvF,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,mBAAL;AAA0B;AACxB,iCACKS,KADL;AAEEJ,UAAAA,cAAc,EAAE,EAFlB;AAGEC,UAAAA,OAAO,EAAEP,cAAc,CAACU,KAAK,CAACH,OAAP,EAAgBI,MAAhB;AAHzB;AAKD;;AACD,SAAKT,mBAAL;AAA0B;AAAA,8BACmBS,MAAM,CAACE,OAD1B;AAAA,YAChBC,OADgB,mBAChBA,OADgB;AAAA,YACPC,KADO,mBACPA,KADO;AAAA,YACAT,cADA,mBACAA,cADA;AAExB,eAAO;AACLD,UAAAA,IAAI,oBACCK,KAAK,CAACL,IADP,sBAEDS,OAFC,EAESC,KAFT,EADC;AAKLT,UAAAA,cAAc,EAAdA,cALK;AAMLC,UAAAA,OAAO,EAAEP,cAAc,CAACU,KAAK,CAACH,OAAP,EAAgBI,MAAhB,CANlB;AAOLH,UAAAA,KAAK,EAAE;AAPF,SAAP;AASD;;AACD,SAAKL,mBAAL;AAA0B;AAAA,YAChBK,KADgB,GACNG,MAAM,CAACE,OADD,CAChBL,KADgB;AAExB,iCACKE,KADL;AAEEF,UAAAA,KAAK,EAALA;AAFF;AAID;;AACD;AACE,aAAOE,KAAP;AA5BJ;AA8BD","sourcesContent":["import { LoadingState, loadingReducer } from 'decentraland-dapps/dist/modules/loading/reducer'\nimport {\n  FetchLandsRequestAction,\n  FetchLandsSuccessAction,\n  FetchLandsFailureAction,\n  FETCH_LANDS_REQUEST,\n  FETCH_LANDS_SUCCESS,\n  FETCH_LANDS_FAILURE\n} from './actions'\nimport { Land, Authorization } from './types'\n\nexport type LandState = {\n  data: Record<string, Land[]>\n  authorizations: Authorization[]\n  loading: LoadingState\n  error: string | null\n}\n\nconst INITIAL_STATE: LandState = {\n  data: {},\n  authorizations: [],\n  loading: [],\n  error: null\n}\n\nexport type LandReducerAction = FetchLandsRequestAction | FetchLandsSuccessAction | FetchLandsFailureAction\n\nexport function landReducer(state: LandState = INITIAL_STATE, action: LandReducerAction) {\n  switch (action.type) {\n    case FETCH_LANDS_REQUEST: {\n      return {\n        ...state,\n        authorizations: [],\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case FETCH_LANDS_SUCCESS: {\n      const { address, lands, authorizations } = action.payload\n      return {\n        data: {\n          ...state.data,\n          [address]: lands\n        },\n        authorizations,\n        loading: loadingReducer(state.loading, action),\n        error: null\n      }\n    }\n    case FETCH_LANDS_FAILURE: {\n      const { error } = action.payload\n      return {\n        ...state,\n        error\n      }\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}