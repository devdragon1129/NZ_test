{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../Misc/typeStore';\n/**\r\n * Block used to expand a Vector3/4 into 4 outputs (one for each component)\r\n */\n\nvar VectorSplitterBlock =\n/** @class */\nfunction (_super) {\n  __extends(VectorSplitterBlock, _super);\n  /**\r\n   * Create a new VectorSplitterBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function VectorSplitterBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n\n    _this.registerInput(\"xyzw\", NodeMaterialBlockConnectionPointTypes.Vector4, true);\n\n    _this.registerInput(\"xyz \", NodeMaterialBlockConnectionPointTypes.Vector3, true);\n\n    _this.registerInput(\"xy \", NodeMaterialBlockConnectionPointTypes.Vector2, true);\n\n    _this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\n\n    _this.registerOutput(\"xy\", NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    _this.registerOutput(\"x\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"y\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"z\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"w\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.inputsAreExclusive = true;\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  VectorSplitterBlock.prototype.getClassName = function () {\n    return \"VectorSplitterBlock\";\n  };\n\n  Object.defineProperty(VectorSplitterBlock.prototype, \"xyzw\", {\n    /**\r\n     * Gets the xyzw component (input)\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VectorSplitterBlock.prototype, \"xyzIn\", {\n    /**\r\n     * Gets the xyz component (input)\r\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VectorSplitterBlock.prototype, \"xyIn\", {\n    /**\r\n     * Gets the xy component (input)\r\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VectorSplitterBlock.prototype, \"xyzOut\", {\n    /**\r\n     * Gets the xyz component (output)\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VectorSplitterBlock.prototype, \"xyOut\", {\n    /**\r\n     * Gets the xy component (output)\r\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VectorSplitterBlock.prototype, \"x\", {\n    /**\r\n     * Gets the x component (output)\r\n     */\n    get: function get() {\n      return this._outputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VectorSplitterBlock.prototype, \"y\", {\n    /**\r\n     * Gets the y component (output)\r\n     */\n    get: function get() {\n      return this._outputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VectorSplitterBlock.prototype, \"z\", {\n    /**\r\n     * Gets the z component (output)\r\n     */\n    get: function get() {\n      return this._outputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VectorSplitterBlock.prototype, \"w\", {\n    /**\r\n     * Gets the w component (output)\r\n     */\n    get: function get() {\n      return this._outputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  VectorSplitterBlock.prototype._inputRename = function (name) {\n    switch (name) {\n      case \"xy \":\n        return \"xyIn\";\n\n      case \"xyz \":\n        return \"xyzIn\";\n\n      default:\n        return name;\n    }\n  };\n\n  VectorSplitterBlock.prototype._outputRename = function (name) {\n    switch (name) {\n      case \"xy\":\n        return \"xyOut\";\n\n      case \"xyz\":\n        return \"xyzOut\";\n\n      default:\n        return name;\n    }\n  };\n\n  VectorSplitterBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var input = this.xyzw.isConnected ? this.xyzw : this.xyzIn.isConnected ? this.xyzIn : this.xyIn;\n    var xyzOutput = this._outputs[0];\n    var xyOutput = this._outputs[1];\n    var xOutput = this._outputs[2];\n    var yOutput = this._outputs[3];\n    var zOutput = this._outputs[4];\n    var wOutput = this._outputs[5];\n\n    if (xyzOutput.hasEndpoints) {\n      if (input === this.xyIn) {\n        state.compilationString += this._declareOutput(xyzOutput, state) + (\" = vec3(\" + input.associatedVariableName + \", 0.0);\\r\\n\");\n      } else {\n        state.compilationString += this._declareOutput(xyzOutput, state) + (\" = \" + input.associatedVariableName + \".xyz;\\r\\n\");\n      }\n    }\n\n    if (xyOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(xyOutput, state) + (\" = \" + input.associatedVariableName + \".xy;\\r\\n\");\n    }\n\n    if (xOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(xOutput, state) + (\" = \" + input.associatedVariableName + \".x;\\r\\n\");\n    }\n\n    if (yOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(yOutput, state) + (\" = \" + input.associatedVariableName + \".y;\\r\\n\");\n    }\n\n    if (zOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(zOutput, state) + (\" = \" + input.associatedVariableName + \".z;\\r\\n\");\n    }\n\n    if (wOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(wOutput, state) + (\" = \" + input.associatedVariableName + \".w;\\r\\n\");\n    }\n\n    return this;\n  };\n\n  return VectorSplitterBlock;\n}(NodeMaterialBlock);\n\nexport { VectorSplitterBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.VectorSplitterBlock\"] = VectorSplitterBlock;","map":null,"metadata":{},"sourceType":"module"}