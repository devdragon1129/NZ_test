{"ast":null,"code":"import { connect } from 'react-redux';\nimport { getEntityComponentsByType, getEntities } from 'modules/scene/selectors';\nimport { ComponentType } from 'modules/scene/types';\nimport { getData as getAssets } from 'modules/asset/selectors';\nimport { setScriptValues } from 'modules/scene/actions';\nimport { getSelectedEntityIds } from 'modules/editor/selectors';\nimport EntityEditor from './EntityEditor';\nimport { setSelectedEntities } from 'modules/editor/actions';\n\nvar mapState = function mapState(state) {\n  var selectedEntityIds = getSelectedEntityIds(state);\n  var entityId = selectedEntityIds.length === 1 ? selectedEntityIds[0] : ''; // The presence of both the entity and the script component are guranteed by the ItemDrawer container\n\n  var components = getEntityComponentsByType(state)[entityId];\n  var script = components[ComponentType.Script];\n  var entity = getEntities(state)[entityId]; // TODO: There may not be an Asset if the scene is imported from another account\n\n  var asset = getAssets(state)[script.data.assetId];\n  return {\n    asset: asset,\n    script: script,\n    entity: entity,\n    entityId: entityId\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onSetScriptParameters: function onSetScriptParameters(entityId, parameters) {\n      return dispatch(setScriptValues(entityId, parameters));\n    },\n    onDeselect: function onDeselect() {\n      return dispatch(setSelectedEntities([]));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(EntityEditor);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/SideBar/EntityEditor/EntityEditor.container.ts"],"names":["connect","getEntityComponentsByType","getEntities","ComponentType","getData","getAssets","setScriptValues","getSelectedEntityIds","EntityEditor","setSelectedEntities","mapState","state","selectedEntityIds","entityId","length","components","script","Script","entity","asset","data","assetId","mapDispatch","dispatch","onSetScriptParameters","parameters","onDeselect"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AAGA,SAASC,yBAAT,EAAoCC,WAApC,QAAuD,yBAAvD;AACA,SAA8BC,aAA9B,QAAmD,qBAAnD;AACA,SAASC,OAAO,IAAIC,SAApB,QAAqC,yBAArC;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,oBAAT,QAAqC,0BAArC;AAGA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,mBAAT,QAAoC,wBAApC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAqC;AACpD,MAAMC,iBAAiB,GAAGL,oBAAoB,CAACI,KAAD,CAA9C;AACA,MAAME,QAAQ,GAAGD,iBAAiB,CAACE,MAAlB,KAA6B,CAA7B,GAAiCF,iBAAiB,CAAC,CAAD,CAAlD,GAAwD,EAAzE,CAFoD,CAIpD;;AACA,MAAMG,UAAU,GAAGd,yBAAyB,CAACU,KAAD,CAAzB,CAAiCE,QAAjC,CAAnB;AACA,MAAMG,MAAM,GAAGD,UAAU,CAAEZ,aAAa,CAACc,MAAhB,CAAzB;AACA,MAAMC,MAAM,GAAGhB,WAAW,CAACS,KAAD,CAAX,CAAmBE,QAAnB,CAAf,CAPoD,CASpD;;AACA,MAAMM,KAAK,GAAGd,SAAS,CAACM,KAAD,CAAT,CAAiBK,MAAM,CAACI,IAAP,CAAYC,OAA7B,CAAd;AACA,SAAO;AACLF,IAAAA,KAAK,EAALA,KADK;AAELH,IAAAA,MAAM,EAANA,MAFK;AAGLE,IAAAA,MAAM,EAANA,MAHK;AAILL,IAAAA,QAAQ,EAARA;AAJK,GAAP;AAMD,CAjBD;;AAmBA,IAAMS,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,qBAAqB,EAAE,+BAACX,QAAD,EAAWY,UAAX;AAAA,aAA0BF,QAAQ,CAACjB,eAAe,CAACO,QAAD,EAAWY,UAAX,CAAhB,CAAlC;AAAA,KADyC;AAEhEC,IAAAA,UAAU,EAAE;AAAA,aAAMH,QAAQ,CAACd,mBAAmB,CAAC,EAAD,CAApB,CAAd;AAAA;AAFoD,GAA9C;AAAA,CAApB;;AAKA,eAAeT,OAAO,CAACU,QAAD,EAAWY,WAAX,CAAP,CAA+Bd,YAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\n\nimport { RootState } from 'modules/common/types'\nimport { getEntityComponentsByType, getEntities } from 'modules/scene/selectors'\nimport { ComponentDefinition, ComponentType } from 'modules/scene/types'\nimport { getData as getAssets } from 'modules/asset/selectors'\nimport { setScriptValues } from 'modules/scene/actions'\nimport { getSelectedEntityIds } from 'modules/editor/selectors'\n\nimport { MapStateProps, MapDispatch, MapDispatchProps } from './EntityEditor.types'\nimport EntityEditor from './EntityEditor'\nimport { setSelectedEntities } from 'modules/editor/actions'\n\nconst mapState = (state: RootState): MapStateProps => {\n  const selectedEntityIds = getSelectedEntityIds(state)\n  const entityId = selectedEntityIds.length === 1 ? selectedEntityIds[0] : ''\n\n  // The presence of both the entity and the script component are guranteed by the ItemDrawer container\n  const components = getEntityComponentsByType(state)[entityId]\n  const script = components![ComponentType.Script] as ComponentDefinition<ComponentType.Script>\n  const entity = getEntities(state)[entityId]\n\n  // TODO: There may not be an Asset if the scene is imported from another account\n  const asset = getAssets(state)[script.data.assetId]\n  return {\n    asset,\n    script,\n    entity,\n    entityId\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onSetScriptParameters: (entityId, parameters) => dispatch(setScriptValues(entityId, parameters)),\n  onDeselect: () => dispatch(setSelectedEntities([]))\n})\n\nexport default connect(mapState, mapDispatch)(EntityEditor)\n"]},"metadata":{},"sourceType":"module"}