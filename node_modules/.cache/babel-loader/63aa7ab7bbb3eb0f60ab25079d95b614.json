{"ast":null,"code":"import { connect } from 'react-redux';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { isConnected, isConnecting } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { getItemId } from 'modules/location/selectors';\nimport { isLoggingIn } from 'modules/identity/selectors';\nimport { getLoading, getItems } from 'modules/item/selectors';\nimport { getCollections } from 'modules/collection/selectors';\nimport { FETCH_ITEM_REQUEST, fetchItemRequest, SAVE_ITEM_REQUEST, SET_PRICE_AND_BENEFICIARY_REQUEST } from 'modules/item/actions';\nimport ItemProvider from './ItemProvider';\n\nvar mapState = function mapState(state, ownProps) {\n  var id = ownProps.id || getItemId(state);\n  var items = getItems(state);\n  var collections = getCollections(state);\n  var item = items.find(function (item) {\n    return item.id === id;\n  }) || null;\n  var collection = null;\n\n  if (item && item.collectionId) {\n    collection = collections.find(function (collection) {\n      return collection.id === item.collectionId;\n    }) || null;\n  }\n\n  return {\n    id: id,\n    item: item,\n    collection: collection,\n    isConnected: isConnected(state),\n    isLoading: isLoadingType(getLoading(state), FETCH_ITEM_REQUEST) || isLoadingType(getLoading(state), SAVE_ITEM_REQUEST) || isLoadingType(getLoading(state), SET_PRICE_AND_BENEFICIARY_REQUEST) || isLoggingIn(state) || isConnecting(state)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onFetchItem: function onFetchItem(id) {\n      return dispatch(fetchItemRequest(id));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(ItemProvider);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/ItemProvider/ItemProvider.container.ts"],"names":["connect","isLoadingType","isConnected","isConnecting","getItemId","isLoggingIn","getLoading","getItems","getCollections","FETCH_ITEM_REQUEST","fetchItemRequest","SAVE_ITEM_REQUEST","SET_PRICE_AND_BENEFICIARY_REQUEST","ItemProvider","mapState","state","ownProps","id","items","collections","item","find","collection","collectionId","isLoading","mapDispatch","dispatch","onFetchItem"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,kDAA1C;AAEA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,wBAArC;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,kBAAT,EAA6BC,gBAA7B,EAA+CC,iBAA/C,EAAkEC,iCAAlE,QAA2G,sBAA3G;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAmBC,QAAnB,EAAyD;AACxE,MAAMC,EAAE,GAAGD,QAAQ,CAACC,EAAT,IAAeb,SAAS,CAACW,KAAD,CAAnC;AACA,MAAMG,KAAK,GAAGX,QAAQ,CAACQ,KAAD,CAAtB;AACA,MAAMI,WAAW,GAAGX,cAAc,CAACO,KAAD,CAAlC;AAEA,MAAMK,IAAI,GAAGF,KAAK,CAACG,IAAN,CAAW,UAAAD,IAAI;AAAA,WAAIA,IAAI,CAACH,EAAL,KAAYA,EAAhB;AAAA,GAAf,KAAsC,IAAnD;AAEA,MAAIK,UAAU,GAAG,IAAjB;;AACA,MAAIF,IAAI,IAAIA,IAAI,CAACG,YAAjB,EAA+B;AAC7BD,IAAAA,UAAU,GAAGH,WAAW,CAACE,IAAZ,CAAiB,UAAAC,UAAU;AAAA,aAAIA,UAAU,CAACL,EAAX,KAAkBG,IAAI,CAACG,YAA3B;AAAA,KAA3B,KAAuE,IAApF;AACD;;AAED,SAAO;AACLN,IAAAA,EAAE,EAAFA,EADK;AAELG,IAAAA,IAAI,EAAJA,IAFK;AAGLE,IAAAA,UAAU,EAAVA,UAHK;AAILpB,IAAAA,WAAW,EAAEA,WAAW,CAACa,KAAD,CAJnB;AAKLS,IAAAA,SAAS,EACPvB,aAAa,CAACK,UAAU,CAACS,KAAD,CAAX,EAAoBN,kBAApB,CAAb,IACAR,aAAa,CAACK,UAAU,CAACS,KAAD,CAAX,EAAoBJ,iBAApB,CADb,IAEAV,aAAa,CAACK,UAAU,CAACS,KAAD,CAAX,EAAoBH,iCAApB,CAFb,IAGAP,WAAW,CAACU,KAAD,CAHX,IAIAZ,YAAY,CAACY,KAAD;AAVT,GAAP;AAYD,CAxBD;;AA0BA,IAAMU,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,WAAW,EAAE,qBAAAV,EAAE;AAAA,aAAIS,QAAQ,CAAChB,gBAAgB,CAACO,EAAD,CAAjB,CAAZ;AAAA;AADiD,GAA9C;AAAA,CAApB;;AAIA,eAAejB,OAAO,CAACc,QAAD,EAAWW,WAAX,CAAP,CAA+BZ,YAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { isConnected, isConnecting } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { RootState } from 'modules/common/types'\nimport { getItemId } from 'modules/location/selectors'\nimport { isLoggingIn } from 'modules/identity/selectors'\nimport { getLoading, getItems } from 'modules/item/selectors'\nimport { getCollections } from 'modules/collection/selectors'\nimport { FETCH_ITEM_REQUEST, fetchItemRequest, SAVE_ITEM_REQUEST, SET_PRICE_AND_BENEFICIARY_REQUEST } from 'modules/item/actions'\nimport { MapStateProps, MapDispatchProps, MapDispatch, OwnProps } from './ItemProvider.types'\nimport ItemProvider from './ItemProvider'\n\nconst mapState = (state: RootState, ownProps: OwnProps): MapStateProps => {\n  const id = ownProps.id || getItemId(state)\n  const items = getItems(state)\n  const collections = getCollections(state)\n\n  const item = items.find(item => item.id === id) || null\n\n  let collection = null\n  if (item && item.collectionId) {\n    collection = collections.find(collection => collection.id === item.collectionId) || null\n  }\n\n  return {\n    id,\n    item,\n    collection,\n    isConnected: isConnected(state),\n    isLoading:\n      isLoadingType(getLoading(state), FETCH_ITEM_REQUEST) ||\n      isLoadingType(getLoading(state), SAVE_ITEM_REQUEST) ||\n      isLoadingType(getLoading(state), SET_PRICE_AND_BENEFICIARY_REQUEST) ||\n      isLoggingIn(state) ||\n      isConnecting(state)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onFetchItem: id => dispatch(fetchItemRequest(id))\n})\n\nexport default connect(mapState, mapDispatch)(ItemProvider)\n"]},"metadata":{},"sourceType":"module"}