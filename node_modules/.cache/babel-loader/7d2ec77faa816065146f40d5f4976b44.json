{"ast":null,"code":"import { Vector3 } from \"../Maths/math.vector\"; // https://dickyjim.wordpress.com/2013/09/04/spherical-harmonics-for-beginners/\n// http://silviojemma.com/public/papers/lighting/spherical-harmonic-lighting.pdf\n// https://www.ppsloan.org/publications/StupidSH36.pdf\n// http://cseweb.ucsd.edu/~ravir/papers/envmap/envmap.pdf\n// https://www.ppsloan.org/publications/SHJCGT.pdf\n// https://www.ppsloan.org/publications/shdering.pdf\n// https://google.github.io/filament/Filament.md.html#annex/sphericalharmonics\n// https://patapom.com/blog/SHPortal/\n// https://imdoingitwrong.wordpress.com/2011/04/14/spherical-harmonics-wtf/\n// Using real SH basis:\n//  m>0             m   m\n// y   = sqrt(2) * K * P * cos(m*phi) * cos(theta)\n//  l               l   l\n//\n//  m<0             m   |m|\n// y   = sqrt(2) * K * P * sin(m*phi) * cos(theta)\n//  l               l   l\n//\n//  m=0   0   0\n// y   = K * P * trigono terms\n//  l     l   l\n//\n//  m       (2l + 1)(l - |m|)!\n// K = sqrt(------------------)\n//  l           4pi(l + |m|)!\n//\n// and P by recursion:\n//\n// P00(x) = 1\n// P01(x) = x\n// Pll(x) = (-1^l)(2l - 1)!!(1-x*x)^(1/2)\n//          ((2l - 1)x[Pl-1/m]-(l + m - 1)[Pl-2/m])\n// Plm(x) = ---------------------------------------\n//                         l - m\n// Leaving the trigonometric terms aside we can precompute the constants to :\n\nvar SH3ylmBasisConstants = [Math.sqrt(1 / (4 * Math.PI)), -Math.sqrt(3 / (4 * Math.PI)), Math.sqrt(3 / (4 * Math.PI)), -Math.sqrt(3 / (4 * Math.PI)), Math.sqrt(15 / (4 * Math.PI)), -Math.sqrt(15 / (4 * Math.PI)), Math.sqrt(5 / (16 * Math.PI)), -Math.sqrt(15 / (4 * Math.PI)), Math.sqrt(15 / (16 * Math.PI))]; // cm = cos(m * phi)\n// sm = sin(m * phi)\n// {x,y,z} = {cos(phi)sin(theta), sin(phi)sin(theta), cos(theta)}\n// By recursion on using trigo identities:\n\nvar SH3ylmBasisTrigonometricTerms = [function (direction) {\n  return 1;\n}, function (direction) {\n  return direction.y;\n}, function (direction) {\n  return direction.z;\n}, function (direction) {\n  return direction.x;\n}, function (direction) {\n  return direction.x * direction.y;\n}, function (direction) {\n  return direction.y * direction.z;\n}, function (direction) {\n  return 3 * direction.z * direction.z - 1;\n}, function (direction) {\n  return direction.x * direction.z;\n}, function (direction) {\n  return direction.x * direction.x - direction.y * direction.y;\n}]; // Wrap the full compute\n\nvar applySH3 = function applySH3(lm, direction) {\n  return SH3ylmBasisConstants[lm] * SH3ylmBasisTrigonometricTerms[lm](direction);\n}; // Derived from the integration of the a kernel convolution to SH.\n// Great explanation here: https://patapom.com/blog/SHPortal/#about-distant-radiance-and-irradiance-environments\n\n\nvar SHCosKernelConvolution = [Math.PI, 2 * Math.PI / 3, 2 * Math.PI / 3, 2 * Math.PI / 3, Math.PI / 4, Math.PI / 4, Math.PI / 4, Math.PI / 4, Math.PI / 4];\n/**\r\n * Class representing spherical harmonics coefficients to the 3rd degree\r\n */\n\nvar SphericalHarmonics =\n/** @class */\nfunction () {\n  function SphericalHarmonics() {\n    /**\r\n     * Defines whether or not the harmonics have been prescaled for rendering.\r\n     */\n    this.preScaled = false;\n    /**\r\n     * The l0,0 coefficients of the spherical harmonics\r\n     */\n\n    this.l00 = Vector3.Zero();\n    /**\r\n     * The l1,-1 coefficients of the spherical harmonics\r\n     */\n\n    this.l1_1 = Vector3.Zero();\n    /**\r\n     * The l1,0 coefficients of the spherical harmonics\r\n     */\n\n    this.l10 = Vector3.Zero();\n    /**\r\n     * The l1,1 coefficients of the spherical harmonics\r\n     */\n\n    this.l11 = Vector3.Zero();\n    /**\r\n     * The l2,-2 coefficients of the spherical harmonics\r\n     */\n\n    this.l2_2 = Vector3.Zero();\n    /**\r\n     * The l2,-1 coefficients of the spherical harmonics\r\n     */\n\n    this.l2_1 = Vector3.Zero();\n    /**\r\n     * The l2,0 coefficients of the spherical harmonics\r\n     */\n\n    this.l20 = Vector3.Zero();\n    /**\r\n     * The l2,1 coefficients of the spherical harmonics\r\n     */\n\n    this.l21 = Vector3.Zero();\n    /**\r\n     * The l2,2 coefficients of the spherical harmonics\r\n     */\n\n    this.l22 = Vector3.Zero();\n  }\n  /**\r\n   * Adds a light to the spherical harmonics\r\n   * @param direction the direction of the light\r\n   * @param color the color of the light\r\n   * @param deltaSolidAngle the delta solid angle of the light\r\n   */\n\n\n  SphericalHarmonics.prototype.addLight = function (direction, color, deltaSolidAngle) {\n    var colorVector = new Vector3(color.r, color.g, color.b);\n    var c = colorVector.scale(deltaSolidAngle);\n    this.l00 = this.l00.add(c.scale(applySH3(0, direction)));\n    this.l1_1 = this.l1_1.add(c.scale(applySH3(1, direction)));\n    this.l10 = this.l10.add(c.scale(applySH3(2, direction)));\n    this.l11 = this.l11.add(c.scale(applySH3(3, direction)));\n    this.l2_2 = this.l2_2.add(c.scale(applySH3(4, direction)));\n    this.l2_1 = this.l2_1.add(c.scale(applySH3(5, direction)));\n    this.l20 = this.l20.add(c.scale(applySH3(6, direction)));\n    this.l21 = this.l21.add(c.scale(applySH3(7, direction)));\n    this.l22 = this.l22.add(c.scale(applySH3(8, direction)));\n  };\n  /**\r\n   * Scales the spherical harmonics by the given amount\r\n   * @param scale the amount to scale\r\n   */\n\n\n  SphericalHarmonics.prototype.scaleInPlace = function (scale) {\n    this.l00.scaleInPlace(scale);\n    this.l1_1.scaleInPlace(scale);\n    this.l10.scaleInPlace(scale);\n    this.l11.scaleInPlace(scale);\n    this.l2_2.scaleInPlace(scale);\n    this.l2_1.scaleInPlace(scale);\n    this.l20.scaleInPlace(scale);\n    this.l21.scaleInPlace(scale);\n    this.l22.scaleInPlace(scale);\n  };\n  /**\r\n   * Convert from incident radiance (Li) to irradiance (E) by applying convolution with the cosine-weighted hemisphere.\r\n   *\r\n   * ```\r\n   * E_lm = A_l * L_lm\r\n   * ```\r\n   *\r\n   * In spherical harmonics this convolution amounts to scaling factors for each frequency band.\r\n   * This corresponds to equation 5 in \"An Efficient Representation for Irradiance Environment Maps\", where\r\n   * the scaling factors are given in equation 9.\r\n   */\n\n\n  SphericalHarmonics.prototype.convertIncidentRadianceToIrradiance = function () {\n    // Constant (Band 0)\n    this.l00.scaleInPlace(SHCosKernelConvolution[0]); // Linear (Band 1)\n\n    this.l1_1.scaleInPlace(SHCosKernelConvolution[1]);\n    this.l10.scaleInPlace(SHCosKernelConvolution[2]);\n    this.l11.scaleInPlace(SHCosKernelConvolution[3]); // Quadratic (Band 2)\n\n    this.l2_2.scaleInPlace(SHCosKernelConvolution[4]);\n    this.l2_1.scaleInPlace(SHCosKernelConvolution[5]);\n    this.l20.scaleInPlace(SHCosKernelConvolution[6]);\n    this.l21.scaleInPlace(SHCosKernelConvolution[7]);\n    this.l22.scaleInPlace(SHCosKernelConvolution[8]);\n  };\n  /**\r\n   * Convert from irradiance to outgoing radiance for Lambertian BDRF, suitable for efficient shader evaluation.\r\n   *\r\n   * ```\r\n   * L = (1/pi) * E * rho\r\n   * ```\r\n   *\r\n   * This is done by an additional scale by 1/pi, so is a fairly trivial operation but important conceptually.\r\n   */\n\n\n  SphericalHarmonics.prototype.convertIrradianceToLambertianRadiance = function () {\n    this.scaleInPlace(1.0 / Math.PI); // The resultant SH now represents outgoing radiance, so includes the Lambert 1/pi normalisation factor but without albedo (rho) applied\n    // (The pixel shader must apply albedo after texture fetches, etc).\n  };\n  /**\r\n   * Integrates the reconstruction coefficients directly in to the SH preventing further\r\n   * required operations at run time.\r\n   *\r\n   * This is simply done by scaling back the SH with Ylm constants parameter.\r\n   * The trigonometric part being applied by the shader at run time.\r\n   */\n\n\n  SphericalHarmonics.prototype.preScaleForRendering = function () {\n    this.preScaled = true;\n    this.l00.scaleInPlace(SH3ylmBasisConstants[0]);\n    this.l1_1.scaleInPlace(SH3ylmBasisConstants[1]);\n    this.l10.scaleInPlace(SH3ylmBasisConstants[2]);\n    this.l11.scaleInPlace(SH3ylmBasisConstants[3]);\n    this.l2_2.scaleInPlace(SH3ylmBasisConstants[4]);\n    this.l2_1.scaleInPlace(SH3ylmBasisConstants[5]);\n    this.l20.scaleInPlace(SH3ylmBasisConstants[6]);\n    this.l21.scaleInPlace(SH3ylmBasisConstants[7]);\n    this.l22.scaleInPlace(SH3ylmBasisConstants[8]);\n  };\n  /**\r\n   * Constructs a spherical harmonics from an array.\r\n   * @param data defines the 9x3 coefficients (l00, l1-1, l10, l11, l2-2, l2-1, l20, l21, l22)\r\n   * @returns the spherical harmonics\r\n   */\n\n\n  SphericalHarmonics.FromArray = function (data) {\n    var sh = new SphericalHarmonics();\n    Vector3.FromArrayToRef(data[0], 0, sh.l00);\n    Vector3.FromArrayToRef(data[1], 0, sh.l1_1);\n    Vector3.FromArrayToRef(data[2], 0, sh.l10);\n    Vector3.FromArrayToRef(data[3], 0, sh.l11);\n    Vector3.FromArrayToRef(data[4], 0, sh.l2_2);\n    Vector3.FromArrayToRef(data[5], 0, sh.l2_1);\n    Vector3.FromArrayToRef(data[6], 0, sh.l20);\n    Vector3.FromArrayToRef(data[7], 0, sh.l21);\n    Vector3.FromArrayToRef(data[8], 0, sh.l22);\n    return sh;\n  }; // Keep for references.\n\n  /**\r\n   * Gets the spherical harmonics from polynomial\r\n   * @param polynomial the spherical polynomial\r\n   * @returns the spherical harmonics\r\n   */\n\n\n  SphericalHarmonics.FromPolynomial = function (polynomial) {\n    var result = new SphericalHarmonics();\n    result.l00 = polynomial.xx.scale(0.376127).add(polynomial.yy.scale(0.376127)).add(polynomial.zz.scale(0.376126));\n    result.l1_1 = polynomial.y.scale(0.977204);\n    result.l10 = polynomial.z.scale(0.977204);\n    result.l11 = polynomial.x.scale(0.977204);\n    result.l2_2 = polynomial.xy.scale(1.16538);\n    result.l2_1 = polynomial.yz.scale(1.16538);\n    result.l20 = polynomial.zz.scale(1.34567).subtract(polynomial.xx.scale(0.672834)).subtract(polynomial.yy.scale(0.672834));\n    result.l21 = polynomial.zx.scale(1.16538);\n    result.l22 = polynomial.xx.scale(1.16538).subtract(polynomial.yy.scale(1.16538));\n    result.l1_1.scaleInPlace(-1);\n    result.l11.scaleInPlace(-1);\n    result.l2_1.scaleInPlace(-1);\n    result.l21.scaleInPlace(-1);\n    result.scaleInPlace(Math.PI);\n    return result;\n  };\n\n  return SphericalHarmonics;\n}();\n\nexport { SphericalHarmonics };\n/**\r\n * Class representing spherical polynomial coefficients to the 3rd degree\r\n */\n\nvar SphericalPolynomial =\n/** @class */\nfunction () {\n  function SphericalPolynomial() {\n    /**\r\n     * The x coefficients of the spherical polynomial\r\n     */\n    this.x = Vector3.Zero();\n    /**\r\n     * The y coefficients of the spherical polynomial\r\n     */\n\n    this.y = Vector3.Zero();\n    /**\r\n     * The z coefficients of the spherical polynomial\r\n     */\n\n    this.z = Vector3.Zero();\n    /**\r\n     * The xx coefficients of the spherical polynomial\r\n     */\n\n    this.xx = Vector3.Zero();\n    /**\r\n     * The yy coefficients of the spherical polynomial\r\n     */\n\n    this.yy = Vector3.Zero();\n    /**\r\n     * The zz coefficients of the spherical polynomial\r\n     */\n\n    this.zz = Vector3.Zero();\n    /**\r\n     * The xy coefficients of the spherical polynomial\r\n     */\n\n    this.xy = Vector3.Zero();\n    /**\r\n     * The yz coefficients of the spherical polynomial\r\n     */\n\n    this.yz = Vector3.Zero();\n    /**\r\n     * The zx coefficients of the spherical polynomial\r\n     */\n\n    this.zx = Vector3.Zero();\n  }\n\n  Object.defineProperty(SphericalPolynomial.prototype, \"preScaledHarmonics\", {\n    /**\r\n     * The spherical harmonics used to create the polynomials.\r\n     */\n    get: function get() {\n      if (!this._harmonics) {\n        this._harmonics = SphericalHarmonics.FromPolynomial(this);\n      }\n\n      if (!this._harmonics.preScaled) {\n        this._harmonics.preScaleForRendering();\n      }\n\n      return this._harmonics;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Adds an ambient color to the spherical polynomial\r\n   * @param color the color to add\r\n   */\n\n  SphericalPolynomial.prototype.addAmbient = function (color) {\n    var colorVector = new Vector3(color.r, color.g, color.b);\n    this.xx = this.xx.add(colorVector);\n    this.yy = this.yy.add(colorVector);\n    this.zz = this.zz.add(colorVector);\n  };\n  /**\r\n   * Scales the spherical polynomial by the given amount\r\n   * @param scale the amount to scale\r\n   */\n\n\n  SphericalPolynomial.prototype.scaleInPlace = function (scale) {\n    this.x.scaleInPlace(scale);\n    this.y.scaleInPlace(scale);\n    this.z.scaleInPlace(scale);\n    this.xx.scaleInPlace(scale);\n    this.yy.scaleInPlace(scale);\n    this.zz.scaleInPlace(scale);\n    this.yz.scaleInPlace(scale);\n    this.zx.scaleInPlace(scale);\n    this.xy.scaleInPlace(scale);\n  };\n  /**\r\n   * Gets the spherical polynomial from harmonics\r\n   * @param harmonics the spherical harmonics\r\n   * @returns the spherical polynomial\r\n   */\n\n\n  SphericalPolynomial.FromHarmonics = function (harmonics) {\n    var result = new SphericalPolynomial();\n    result._harmonics = harmonics;\n    result.x = harmonics.l11.scale(1.02333).scale(-1);\n    result.y = harmonics.l1_1.scale(1.02333).scale(-1);\n    result.z = harmonics.l10.scale(1.02333);\n    result.xx = harmonics.l00.scale(0.886277).subtract(harmonics.l20.scale(0.247708)).add(harmonics.l22.scale(0.429043));\n    result.yy = harmonics.l00.scale(0.886277).subtract(harmonics.l20.scale(0.247708)).subtract(harmonics.l22.scale(0.429043));\n    result.zz = harmonics.l00.scale(0.886277).add(harmonics.l20.scale(0.495417));\n    result.yz = harmonics.l2_1.scale(0.858086).scale(-1);\n    result.zx = harmonics.l21.scale(0.858086).scale(-1);\n    result.xy = harmonics.l2_2.scale(0.858086);\n    result.scaleInPlace(1.0 / Math.PI);\n    return result;\n  };\n  /**\r\n   * Constructs a spherical polynomial from an array.\r\n   * @param data defines the 9x3 coefficients (x, y, z, xx, yy, zz, yz, zx, xy)\r\n   * @returns the spherical polynomial\r\n   */\n\n\n  SphericalPolynomial.FromArray = function (data) {\n    var sp = new SphericalPolynomial();\n    Vector3.FromArrayToRef(data[0], 0, sp.x);\n    Vector3.FromArrayToRef(data[1], 0, sp.y);\n    Vector3.FromArrayToRef(data[2], 0, sp.z);\n    Vector3.FromArrayToRef(data[3], 0, sp.xx);\n    Vector3.FromArrayToRef(data[4], 0, sp.yy);\n    Vector3.FromArrayToRef(data[5], 0, sp.zz);\n    Vector3.FromArrayToRef(data[6], 0, sp.yz);\n    Vector3.FromArrayToRef(data[7], 0, sp.zx);\n    Vector3.FromArrayToRef(data[8], 0, sp.xy);\n    return sp;\n  };\n\n  return SphericalPolynomial;\n}();\n\nexport { SphericalPolynomial };","map":null,"metadata":{},"sourceType":"module"}