{"ast":null,"code":"import { VirtualJoystick, JoystickAxis } from \"../../Misc/virtualJoystick\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { Matrix, Vector3 } from \"../../Maths/math.vector\";\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager\";\n/**\r\n* Add virtual joystick input support to the input manager.\r\n* @returns the current input manager\r\n*/\n\nFreeCameraInputsManager.prototype.addVirtualJoystick = function () {\n  this.add(new FreeCameraVirtualJoystickInput());\n  return this;\n};\n/**\r\n * Manage the Virtual Joystick inputs to control the movement of a free camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\n\nvar FreeCameraVirtualJoystickInput =\n/** @class */\nfunction () {\n  function FreeCameraVirtualJoystickInput() {}\n  /**\r\n   * Gets the left stick of the virtual joystick.\r\n   * @returns The virtual Joystick\r\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.getLeftJoystick = function () {\n    return this._leftjoystick;\n  };\n  /**\r\n   * Gets the right stick of the virtual joystick.\r\n   * @returns The virtual Joystick\r\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.getRightJoystick = function () {\n    return this._rightjoystick;\n  };\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.checkInputs = function () {\n    if (this._leftjoystick) {\n      var camera = this.camera;\n      var speed = camera._computeLocalCameraSpeed() * 50;\n      var cameraTransform = Matrix.RotationYawPitchRoll(camera.rotation.y, camera.rotation.x, 0);\n      var deltaTransform = Vector3.TransformCoordinates(new Vector3(this._leftjoystick.deltaPosition.x * speed, this._leftjoystick.deltaPosition.y * speed, this._leftjoystick.deltaPosition.z * speed), cameraTransform);\n      camera.cameraDirection = camera.cameraDirection.add(deltaTransform);\n      camera.cameraRotation = camera.cameraRotation.addVector3(this._rightjoystick.deltaPosition);\n\n      if (!this._leftjoystick.pressed) {\n        this._leftjoystick.deltaPosition = this._leftjoystick.deltaPosition.scale(0.9);\n      }\n\n      if (!this._rightjoystick.pressed) {\n        this._rightjoystick.deltaPosition = this._rightjoystick.deltaPosition.scale(0.9);\n      }\n    }\n  };\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.attachControl = function () {\n    this._leftjoystick = new VirtualJoystick(true);\n\n    this._leftjoystick.setAxisForUpDown(JoystickAxis.Z);\n\n    this._leftjoystick.setAxisForLeftRight(JoystickAxis.X);\n\n    this._leftjoystick.setJoystickSensibility(0.15);\n\n    this._rightjoystick = new VirtualJoystick(false);\n\n    this._rightjoystick.setAxisForUpDown(JoystickAxis.X);\n\n    this._rightjoystick.setAxisForLeftRight(JoystickAxis.Y);\n\n    this._rightjoystick.reverseUpDown = true;\n\n    this._rightjoystick.setJoystickSensibility(0.05);\n\n    this._rightjoystick.setJoystickColor(\"yellow\");\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.detachControl = function (ignored) {\n    this._leftjoystick.releaseCanvas();\n\n    this._rightjoystick.releaseCanvas();\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.getClassName = function () {\n    return \"FreeCameraVirtualJoystickInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  FreeCameraVirtualJoystickInput.prototype.getSimpleName = function () {\n    return \"virtualJoystick\";\n  };\n\n  return FreeCameraVirtualJoystickInput;\n}();\n\nexport { FreeCameraVirtualJoystickInput };\nCameraInputTypes[\"FreeCameraVirtualJoystickInput\"] = FreeCameraVirtualJoystickInput;","map":null,"metadata":{},"sourceType":"module"}