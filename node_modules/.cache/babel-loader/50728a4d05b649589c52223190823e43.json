{"ast":null,"code":"import { DeepCopier } from \"../../Misc/deepCopier\";\nimport { Vector3, TmpVectors } from \"../../Maths/math.vector\";\nimport { Scalar } from \"../../Maths/math.scalar\";\nimport { VertexBuffer } from '../../Meshes/buffer';\n/**\r\n * Particle emitter emitting particles from the inside of a box.\r\n * It emits the particles randomly between 2 given directions.\r\n */\n\nvar MeshParticleEmitter =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance MeshParticleEmitter\r\n   * @param mesh defines the mesh to use as source\r\n   */\n  function MeshParticleEmitter(mesh) {\n    if (mesh === void 0) {\n      mesh = null;\n    }\n\n    this._indices = null;\n    this._positions = null;\n    this._normals = null;\n    this._storedNormal = Vector3.Zero();\n    this._mesh = null;\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     */\n\n    this.direction1 = new Vector3(0, 1.0, 0);\n    /**\r\n     * Random direction of each particle after it has been emitted, between direction1 and direction2 vectors.\r\n     */\n\n    this.direction2 = new Vector3(0, 1.0, 0);\n    /**\r\n     * Gets or sets a boolean indicating that particle directions must be built from mesh face normals\r\n     */\n\n    this.useMeshNormalsForDirection = true;\n    this.mesh = mesh;\n  }\n\n  Object.defineProperty(MeshParticleEmitter.prototype, \"mesh\", {\n    /** Defines the mesh to use as source */\n    get: function get() {\n      return this._mesh;\n    },\n    set: function set(value) {\n      if (this._mesh === value) {\n        return;\n      }\n\n      this._mesh = value;\n\n      if (value) {\n        this._indices = value.getIndices();\n        this._positions = value.getVerticesData(VertexBuffer.PositionKind);\n        this._normals = value.getVerticesData(VertexBuffer.NormalKind);\n      } else {\n        this._indices = null;\n        this._positions = null;\n        this._normals = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Called by the particle System when the direction is computed for the created particle.\r\n   * @param worldMatrix is the world matrix of the particle system\r\n   * @param directionToUpdate is the direction vector to update with the result\r\n   * @param particle is the particle we are computed the direction for\r\n   * @param isLocal defines if the direction should be set in local space\r\n   */\n\n  MeshParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle, isLocal) {\n    if (this.useMeshNormalsForDirection && this._normals) {\n      Vector3.TransformNormalToRef(this._storedNormal, worldMatrix, directionToUpdate);\n      return;\n    }\n\n    var randX = Scalar.RandomRange(this.direction1.x, this.direction2.x);\n    var randY = Scalar.RandomRange(this.direction1.y, this.direction2.y);\n    var randZ = Scalar.RandomRange(this.direction1.z, this.direction2.z);\n\n    if (isLocal) {\n      directionToUpdate.copyFromFloats(randX, randY, randZ);\n      return;\n    }\n\n    Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\n  };\n  /**\r\n   * Called by the particle System when the position is computed for the created particle.\r\n   * @param worldMatrix is the world matrix of the particle system\r\n   * @param positionToUpdate is the position vector to update with the result\r\n   * @param particle is the particle we are computed the position for\r\n   * @param isLocal defines if the position should be set in local space\r\n   */\n\n\n  MeshParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle, isLocal) {\n    if (!this._indices || !this._positions) {\n      return;\n    }\n\n    var randomFaceIndex = 3 * Math.random() * (this._indices.length / 3) | 0;\n    var bu = Math.random();\n    var bv = Math.random() * (1.0 - bu);\n    var bw = 1.0 - bu - bv;\n    var faceIndexA = this._indices[randomFaceIndex];\n    var faceIndexB = this._indices[randomFaceIndex + 1];\n    var faceIndexC = this._indices[randomFaceIndex + 2];\n    var vertexA = TmpVectors.Vector3[0];\n    var vertexB = TmpVectors.Vector3[1];\n    var vertexC = TmpVectors.Vector3[2];\n    var randomVertex = TmpVectors.Vector3[3];\n    Vector3.FromArrayToRef(this._positions, faceIndexA * 3, vertexA);\n    Vector3.FromArrayToRef(this._positions, faceIndexB * 3, vertexB);\n    Vector3.FromArrayToRef(this._positions, faceIndexC * 3, vertexC);\n    randomVertex.x = bu * vertexA.x + bv * vertexB.x + bw * vertexC.x;\n    randomVertex.y = bu * vertexA.y + bv * vertexB.y + bw * vertexC.y;\n    randomVertex.z = bu * vertexA.z + bv * vertexB.z + bw * vertexC.z;\n\n    if (isLocal) {\n      positionToUpdate.copyFromFloats(randomVertex.x, randomVertex.y, randomVertex.z);\n    } else {\n      Vector3.TransformCoordinatesFromFloatsToRef(randomVertex.x, randomVertex.y, randomVertex.z, worldMatrix, positionToUpdate);\n    }\n\n    if (this.useMeshNormalsForDirection && this._normals) {\n      Vector3.FromArrayToRef(this._normals, faceIndexA * 3, vertexA);\n      Vector3.FromArrayToRef(this._normals, faceIndexB * 3, vertexB);\n      Vector3.FromArrayToRef(this._normals, faceIndexC * 3, vertexC);\n      this._storedNormal.x = bu * vertexA.x + bv * vertexB.x + bw * vertexC.x;\n      this._storedNormal.y = bu * vertexA.y + bv * vertexB.y + bw * vertexC.y;\n      this._storedNormal.z = bu * vertexA.z + bv * vertexB.z + bw * vertexC.z;\n    }\n  };\n  /**\r\n   * Clones the current emitter and returns a copy of it\r\n   * @returns the new emitter\r\n   */\n\n\n  MeshParticleEmitter.prototype.clone = function () {\n    var newOne = new MeshParticleEmitter(this.mesh);\n    DeepCopier.DeepCopy(this, newOne);\n    return newOne;\n  };\n  /**\r\n   * Called by the GPUParticleSystem to setup the update shader\r\n   * @param effect defines the update shader\r\n   */\n\n\n  MeshParticleEmitter.prototype.applyToShader = function (effect) {\n    effect.setVector3(\"direction1\", this.direction1);\n    effect.setVector3(\"direction2\", this.direction2);\n  };\n  /**\r\n   * Returns a string to use to update the GPU particles update shader\r\n   * @returns a string containng the defines string\r\n   */\n\n\n  MeshParticleEmitter.prototype.getEffectDefines = function () {\n    return \"\";\n  };\n  /**\r\n   * Returns the string \"BoxParticleEmitter\"\r\n   * @returns a string containing the class name\r\n   */\n\n\n  MeshParticleEmitter.prototype.getClassName = function () {\n    return \"MeshParticleEmitter\";\n  };\n  /**\r\n   * Serializes the particle system to a JSON object.\r\n   * @returns the JSON object\r\n   */\n\n\n  MeshParticleEmitter.prototype.serialize = function () {\n    var _a;\n\n    var serializationObject = {};\n    serializationObject.type = this.getClassName();\n    serializationObject.direction1 = this.direction1.asArray();\n    serializationObject.direction2 = this.direction2.asArray();\n    serializationObject.meshId = (_a = this.mesh) === null || _a === void 0 ? void 0 : _a.id;\n    serializationObject.useMeshNormalsForDirection = this.useMeshNormalsForDirection;\n    return serializationObject;\n  };\n  /**\r\n   * Parse properties from a JSON object\r\n   * @param serializationObject defines the JSON object\r\n   * @param scene defines the hosting scene\r\n   */\n\n\n  MeshParticleEmitter.prototype.parse = function (serializationObject, scene) {\n    Vector3.FromArrayToRef(serializationObject.direction1, 0, this.direction1);\n    Vector3.FromArrayToRef(serializationObject.direction2, 0, this.direction2);\n\n    if (serializationObject.meshId && scene) {\n      this.mesh = scene.getLastMeshByID(serializationObject.meshId);\n    }\n\n    this.useMeshNormalsForDirection = serializationObject.useMeshNormalsForDirection;\n  };\n\n  return MeshParticleEmitter;\n}();\n\nexport { MeshParticleEmitter };","map":null,"metadata":{},"sourceType":"module"}