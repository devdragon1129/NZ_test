{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/DeploymentStatus/DeploymentStatus.tsx\";\nimport * as React from 'react';\nimport { Popup } from 'decentraland-ui';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { DeploymentStatus as Status } from 'modules/deployment/types';\nimport { getDeployment, getStatus } from 'modules/deployment/utils';\nimport { coordsToId, getExplorerURL } from 'modules/land/utils';\nimport './DeploymentStatus.css';\n\nvar DeploymentStatus = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DeploymentStatus, _React$PureComponent);\n\n  function DeploymentStatus() {\n    _classCallCheck(this, DeploymentStatus);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DeploymentStatus).apply(this, arguments));\n  }\n\n  _createClass(DeploymentStatus, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          project = _this$props.project,\n          deployments = _this$props.deployments,\n          status = _this$props.status,\n          _this$props$className = _this$props.className,\n          className = _this$props$className === void 0 ? '' : _this$props$className,\n          type = _this$props.type;\n      var deployment = getDeployment(project, deployments);\n\n      var _ref = deployment ? deployment.placement.point : {\n        x: 0,\n        y: 0\n      },\n          x = _ref.x,\n          y = _ref.y;\n\n      var classes = \"DeploymentStatus \".concat(className);\n      var multiple = deployments.length > 1;\n      var tooltip = '';\n\n      if (status === Status.PUBLISHED || type === 'pool' && status === Status.NEEDS_SYNC) {\n        classes += ' published';\n\n        if (!multiple) {\n          tooltip = t('deployment_status.online', {\n            coords: coordsToId(x, y)\n          });\n        } else {\n          tooltip = t('deployment_status.online_multiple', {\n            count: deployments.length\n          });\n        }\n      } else if (status === Status.NEEDS_SYNC) {\n        classes += ' dirty';\n\n        if (!multiple) {\n          tooltip = t('deployment_status.needs_sync', {\n            coords: coordsToId(x, y)\n          });\n        } else {\n          tooltip = t('deployment_status.needs_sync_multiple', {\n            count: deployments.filter(function (deployment) {\n              return getStatus(project, deployment) === Status.NEEDS_SYNC;\n            }).length\n          });\n        }\n      } else {\n        classes += ' unpublished';\n      }\n\n      return /*#__PURE__*/React.createElement(Popup, {\n        position: \"bottom left\",\n        content: tooltip,\n        trigger: /*#__PURE__*/React.createElement(\"a\", {\n          className: classes,\n          href: getExplorerURL(x, y),\n          target: \"_blank\",\n          rel: \"no:opener no:referrer\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 18\n          }\n        }),\n        on: \"hover\",\n        inverted: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return DeploymentStatus;\n}(React.PureComponent);\n\nexport { DeploymentStatus as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/DeploymentStatus/DeploymentStatus.tsx"],"names":["React","Popup","t","DeploymentStatus","Status","getDeployment","getStatus","coordsToId","getExplorerURL","props","project","deployments","status","className","type","deployment","placement","point","x","y","classes","multiple","length","tooltip","PUBLISHED","NEEDS_SYNC","coords","count","filter","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Popup } from 'decentraland-ui'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { DeploymentStatus as Status } from 'modules/deployment/types'\nimport { getDeployment, getStatus } from 'modules/deployment/utils'\nimport { coordsToId, getExplorerURL } from 'modules/land/utils'\nimport { Props } from './DeploymentStatus.types'\nimport './DeploymentStatus.css'\n\nexport default class DeploymentStatus extends React.PureComponent<Props> {\n  render() {\n    const { project, deployments, status, className = '', type } = this.props\n    const deployment = getDeployment(project, deployments)\n    const { x, y } = deployment ? deployment.placement.point : { x: 0, y: 0 }\n    let classes = `DeploymentStatus ${className}`\n    const multiple = deployments.length > 1\n    let tooltip = ''\n    if (status === Status.PUBLISHED || (type === 'pool' && status === Status.NEEDS_SYNC)) {\n      classes += ' published'\n      if (!multiple) {\n        tooltip = t('deployment_status.online', { coords: coordsToId(x, y) })\n      } else {\n        tooltip = t('deployment_status.online_multiple', { count: deployments.length })\n      }\n    } else if (status === Status.NEEDS_SYNC) {\n      classes += ' dirty'\n      if (!multiple) {\n        tooltip = t('deployment_status.needs_sync', { coords: coordsToId(x, y) })\n      } else {\n        tooltip = t('deployment_status.needs_sync_multiple', {\n          count: deployments.filter(deployment => getStatus(project, deployment) === Status.NEEDS_SYNC).length\n        })\n      }\n    } else {\n      classes += ' unpublished'\n    }\n\n    return (\n      <Popup\n        position=\"bottom left\"\n        content={tooltip}\n        trigger={<a className={classes} href={getExplorerURL(x, y)} target=\"_blank\" rel=\"no:opener no:referrer\" />}\n        on=\"hover\"\n        inverted\n      />\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}