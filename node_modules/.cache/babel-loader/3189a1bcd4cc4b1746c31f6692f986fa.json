{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/Modals/ContestModal/ContestModal.tsx\";\nimport * as React from 'react';\nimport { Button, Loader, ModalNavigation, Input } from 'decentraland-ui';\nimport Modal from 'decentraland-dapps/dist/containers/Modal';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { getAnalytics } from 'decentraland-dapps/dist/modules/analytics/utils';\nimport WalletLoginModal from '../WalletLoginModal';\nimport { ShareModalType } from '../ShareModal/ShareModal.types';\nimport Countdown from './Countdown/Countdown';\nimport './ContestModal.css';\nvar ETH_ADDRESS = /^0x[a-fA-F0-9]{40}$/gi;\nvar ETH_ADDRESS_KEY = 'dcl-buillder-eth-address';\n\nvar ContestModal = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ContestModal, _React$PureComponent);\n\n  function ContestModal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ContestModal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ContestModal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isSuccess: false,\n      ethAddress: localStorage.getItem(ETH_ADDRESS_KEY) || '',\n      hasEthAddressError: false\n    };\n    _this.analytics = getAnalytics();\n\n    _this.handleShare = function () {\n      var _this$props = _this.props,\n          project = _this$props.project,\n          onOpenModal = _this$props.onOpenModal;\n      var projectId = project.id;\n      onOpenModal('ShareModal', {\n        type: ShareModalType.POOL,\n        id: projectId\n      });\n    };\n\n    _this.handleSubmit = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var ethAddress, _this$props2, project, onDeployToPool, poolGroup, projectId, poolGroupId;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              ethAddress = _this.state.ethAddress;\n              _this$props2 = _this.props, project = _this$props2.project, onDeployToPool = _this$props2.onDeployToPool, poolGroup = _this$props2.poolGroup;\n              projectId = project.id;\n              poolGroupId = poolGroup.id;\n\n              if (ethAddress && !ETH_ADDRESS.test(ethAddress)) {\n                _this.setState({\n                  hasEthAddressError: true\n                });\n              } else {\n                if (ethAddress) {\n                  _this.analytics.identify(ethAddress);\n\n                  localStorage.setItem(ETH_ADDRESS_KEY, ethAddress);\n                }\n\n                _this.setState({\n                  hasEthAddressError: false\n                });\n\n                onDeployToPool(projectId, {\n                  groups: [poolGroupId]\n                });\n              }\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.handleEthAddressChange = function (_, data) {\n      _this.setState({\n        ethAddress: data.value,\n        hasEthAddressError: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ContestModal, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var error = nextProps.error,\n          isSubmitting = nextProps.isSubmitting;\n\n      if (this.props.isSubmitting === true && isSubmitting === false && !error) {\n        this.setState({\n          isSuccess: true\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.setState({\n        isSuccess: false\n      });\n    }\n  }, {\n    key: \"renderLogin\",\n    value: function renderLogin() {\n      var _this$props3 = this.props,\n          name = _this$props3.name,\n          onClose = _this$props3.onClose;\n      return /*#__PURE__*/React.createElement(WalletLoginModal, {\n        name: name,\n        onClose: onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 12\n        }\n      });\n    }\n  }, {\n    key: \"renderLoading\",\n    value: function renderLoading() {\n      return /*#__PURE__*/React.createElement(Modal, {\n        name: this.props.name,\n        onClose: this.props.onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Loader, {\n        size: \"large\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }\n      }));\n    }\n  }, {\n    key: \"renderSuccess\",\n    value: function renderSuccess() {\n      var project = this.props.project;\n      return /*#__PURE__*/React.createElement(Modal, {\n        name: this.props.name,\n        onClose: this.props.onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ModalNavigation, {\n        title: t('deployment_contest_modal.success.title'),\n        subtitle: t('deployment_contest_modal.success.subtitle'),\n        onClose: this.props.onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"contest-modal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"thumbnail\",\n        style: {\n          backgroundImage: \"url(\\\"\".concat(project.thumbnail, \"\\\")\")\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"contest-modal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"button-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"submit\",\n        size: \"small\",\n        primary: true,\n        onClick: this.handleShare,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }\n      }, t('global.share')), /*#__PURE__*/React.createElement(Button, {\n        className: \"submit\",\n        size: \"small\",\n        secondary: true,\n        onClick: this.props.onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }\n      }, t('global.done')))));\n    }\n  }, {\n    key: \"renderProgress\",\n    value: function renderProgress() {\n      var progress = this.props.progress;\n      var title = progress < 50 ? t('deployment_contest_modal.recording.title') : t('deployment_contest_modal.uploading.title');\n      var subtitle = progress < 50 ? t('deployment_contest_modal.recording.subtitle') : t('deployment_contest_modal.uploading.subtitle');\n      return /*#__PURE__*/React.createElement(Modal, {\n        name: this.props.name,\n        onClose: this.props.onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ModalNavigation, {\n        title: title,\n        subtitle: subtitle,\n        onClose: this.props.onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"contest-modal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"progress-bar-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"progress-bar\",\n        style: {\n          width: \"\".concat(progress, \"%\")\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }, {\n    key: \"renderSubmit\",\n    value: function renderSubmit() {\n      var hasEthAddressError = this.state.hasEthAddressError;\n      var _this$props4 = this.props,\n          isReady = _this$props4.isReady,\n          poolGroup = _this$props4.poolGroup;\n      var until = poolGroup && poolGroup.activeUntil || new Date();\n      return /*#__PURE__*/React.createElement(Modal, {\n        name: this.props.name,\n        onClose: this.props.onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ModalNavigation, {\n        title: t('deployment_contest_modal.submit.title'),\n        subtitle: t('deployment_contest_modal.submit.subtitle'),\n        onClose: this.props.onClose,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"contest-modal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Countdown, {\n        until: until,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"contest-modal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        className: hasEthAddressError ? 'error' : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        className: \"label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }\n      }, t('deployment_contest_modal.submit.eth_address')), /*#__PURE__*/React.createElement(Input, {\n        defaultValue: this.state.ethAddress,\n        placeholder: \"0x0000000000000000000000000000000000000000\",\n        onChange: this.handleEthAddressChange,\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }\n      }), hasEthAddressError && /*#__PURE__*/React.createElement(\"p\", {\n        className: \"note\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 36\n        }\n      }, t('deployment_contest_modal.submit.invalid_eth_address')))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"contest-modal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        size: \"small\",\n        primary: true,\n        onClick: this.handleSubmit,\n        loading: !isReady,\n        disabled: !isReady,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }\n      }, t('global.submit'))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isSuccess = this.state.isSuccess;\n      var _this$props5 = this.props,\n          isLoggedIn = _this$props5.isLoggedIn,\n          isLoading = _this$props5.isLoading,\n          isSubmitting = _this$props5.isSubmitting;\n\n      if (isLoading) {\n        return this.renderLoading();\n      }\n\n      if (!isLoggedIn) {\n        return this.renderLogin();\n      }\n\n      if (isSubmitting) {\n        return this.renderProgress();\n      }\n\n      if (isSuccess) {\n        return this.renderSuccess();\n      }\n\n      return this.renderSubmit();\n    }\n  }]);\n\n  return ContestModal;\n}(React.PureComponent);\n\nexport { ContestModal as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/ContestModal/ContestModal.tsx"],"names":["React","Button","Loader","ModalNavigation","Input","Modal","t","getAnalytics","WalletLoginModal","ShareModalType","Countdown","ETH_ADDRESS","ETH_ADDRESS_KEY","ContestModal","state","isSuccess","ethAddress","localStorage","getItem","hasEthAddressError","analytics","handleShare","props","project","onOpenModal","projectId","id","type","POOL","handleSubmit","onDeployToPool","poolGroup","poolGroupId","test","setState","identify","setItem","groups","handleEthAddressChange","_","data","value","nextProps","error","isSubmitting","name","onClose","backgroundImage","thumbnail","progress","title","subtitle","width","isReady","until","activeUntil","Date","isLoggedIn","isLoading","renderLoading","renderLogin","renderProgress","renderSuccess","renderSubmit","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Button, Loader, ModalNavigation, Input, InputOnChangeData } from 'decentraland-ui'\n\nimport Modal from 'decentraland-dapps/dist/containers/Modal'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { getAnalytics } from 'decentraland-dapps/dist/modules/analytics/utils'\n\nimport WalletLoginModal from '../WalletLoginModal'\nimport { ShareModalType, ShareModalMetadata } from '../ShareModal/ShareModal.types'\nimport Countdown from './Countdown/Countdown'\nimport { Props, State } from './ContestModal.types'\n\nimport './ContestModal.css'\n\nconst ETH_ADDRESS = /^0x[a-fA-F0-9]{40}$/gi\nconst ETH_ADDRESS_KEY = 'dcl-buillder-eth-address'\n\nexport default class ContestModal extends React.PureComponent<Props, State> {\n  state: State = {\n    isSuccess: false,\n    ethAddress: localStorage.getItem(ETH_ADDRESS_KEY) || '',\n    hasEthAddressError: false\n  }\n\n  analytics = getAnalytics()\n\n  componentWillReceiveProps(nextProps: Props) {\n    const { error, isSubmitting } = nextProps\n    if (this.props.isSubmitting === true && isSubmitting === false && !error) {\n      this.setState({\n        isSuccess: true\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.setState({\n      isSuccess: false\n    })\n  }\n\n  handleShare = () => {\n    const { project, onOpenModal } = this.props\n    const projectId = project!.id\n\n    onOpenModal('ShareModal', {\n      type: ShareModalType.POOL,\n      id: projectId\n    } as ShareModalMetadata)\n  }\n\n  handleSubmit = async () => {\n    const { ethAddress } = this.state\n    const { project, onDeployToPool, poolGroup } = this.props\n    const projectId = project!.id\n    const poolGroupId = poolGroup!.id\n\n    if (ethAddress && !ETH_ADDRESS.test(ethAddress)) {\n      this.setState({ hasEthAddressError: true })\n    } else {\n      if (ethAddress) {\n        this.analytics.identify(ethAddress)\n        localStorage.setItem(ETH_ADDRESS_KEY, ethAddress)\n      }\n\n      this.setState({ hasEthAddressError: false })\n      onDeployToPool(projectId, { groups: [poolGroupId] })\n    }\n  }\n\n  handleEthAddressChange = (_: React.ChangeEvent<HTMLInputElement>, data: InputOnChangeData) => {\n    this.setState({ ethAddress: data.value, hasEthAddressError: false })\n  }\n\n  renderLogin() {\n    const { name, onClose } = this.props\n    return <WalletLoginModal name={name} onClose={onClose} />\n  }\n\n  renderLoading() {\n    return (\n      <Modal name={this.props.name} onClose={this.props.onClose}>\n        <Loader size=\"large\" />\n      </Modal>\n    )\n  }\n\n  renderSuccess() {\n    const { project } = this.props\n    return (\n      <Modal name={this.props.name} onClose={this.props.onClose}>\n        <ModalNavigation\n          title={t('deployment_contest_modal.success.title')}\n          subtitle={t('deployment_contest_modal.success.subtitle')}\n          onClose={this.props.onClose}\n        />\n        <div className=\"contest-modal\">\n          <div className=\"thumbnail\" style={{ backgroundImage: `url(\"${project.thumbnail}\")` }} />\n        </div>\n        <div className=\"contest-modal\">\n          <div className=\"button-group\">\n            <Button className=\"submit\" size=\"small\" primary onClick={this.handleShare}>\n              {t('global.share')}\n            </Button>\n            <Button className=\"submit\" size=\"small\" secondary onClick={this.props.onClose}>\n              {t('global.done')}\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    )\n  }\n\n  renderProgress() {\n    const { progress } = this.props\n\n    const title = progress < 50 ? t('deployment_contest_modal.recording.title') : t('deployment_contest_modal.uploading.title')\n    const subtitle = progress < 50 ? t('deployment_contest_modal.recording.subtitle') : t('deployment_contest_modal.uploading.subtitle')\n\n    return (\n      <Modal name={this.props.name} onClose={this.props.onClose}>\n        <ModalNavigation title={title} subtitle={subtitle} onClose={this.props.onClose} />\n        <div className=\"contest-modal\">\n          <div className=\"progress-bar-container\">\n            <div className=\"progress-bar\" style={{ width: `${progress}%` }} />\n          </div>\n        </div>\n      </Modal>\n    )\n  }\n\n  renderSubmit() {\n    const { hasEthAddressError } = this.state\n    const { isReady, poolGroup } = this.props\n    const until = (poolGroup && poolGroup.activeUntil) || new Date()\n    return (\n      <Modal name={this.props.name} onClose={this.props.onClose}>\n        <ModalNavigation\n          title={t('deployment_contest_modal.submit.title')}\n          subtitle={t('deployment_contest_modal.submit.subtitle')}\n          onClose={this.props.onClose}\n        />\n        <div className=\"contest-modal\">\n          <Countdown until={until} />\n        </div>\n        <div className=\"contest-modal\">\n          <label className={hasEthAddressError ? 'error' : ''}>\n            <p className=\"label\">{t('deployment_contest_modal.submit.eth_address')}</p>\n            <Input\n              defaultValue={this.state.ethAddress}\n              placeholder=\"0x0000000000000000000000000000000000000000\"\n              onChange={this.handleEthAddressChange}\n              size=\"small\"\n            />\n            {hasEthAddressError && <p className=\"note\">{t('deployment_contest_modal.submit.invalid_eth_address')}</p>}\n          </label>\n        </div>\n        <div className=\"contest-modal\">\n          <Button size=\"small\" primary onClick={this.handleSubmit} loading={!isReady} disabled={!isReady}>\n            {t('global.submit')}\n          </Button>\n        </div>\n      </Modal>\n    )\n  }\n\n  render() {\n    const { isSuccess } = this.state\n    const { isLoggedIn, isLoading, isSubmitting } = this.props\n\n    if (isLoading) {\n      return this.renderLoading()\n    }\n\n    if (!isLoggedIn) {\n      return this.renderLogin()\n    }\n\n    if (isSubmitting) {\n      return this.renderProgress()\n    }\n\n    if (isSuccess) {\n      return this.renderSuccess()\n    }\n\n    return this.renderSubmit()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}