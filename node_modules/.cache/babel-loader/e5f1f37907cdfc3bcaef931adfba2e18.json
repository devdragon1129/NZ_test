{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _startCase2 = _interopRequireDefault(require(\"lodash/startCase\"));\n\nvar _invoke2 = _interopRequireDefault(require(\"lodash/invoke\"));\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _lib = require(\"../../lib\");\n\nvar _Icon = _interopRequireDefault(require(\"../../elements/Icon\"));\n/**\n * A menu can contain an item.\n */\n\n\nvar MenuItem = /*#__PURE__*/function (_Component) {\n  (0, _inheritsLoose2.default)(MenuItem, _Component);\n\n  function MenuItem() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _this.handleClick = function (e) {\n      var disabled = _this.props.disabled;\n      if (!disabled) (0, _invoke2.default)(_this.props, 'onClick', e, _this.props);\n    };\n\n    return _this;\n  }\n\n  var _proto = MenuItem.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        active = _this$props.active,\n        children = _this$props.children,\n        className = _this$props.className,\n        color = _this$props.color,\n        content = _this$props.content,\n        disabled = _this$props.disabled,\n        fitted = _this$props.fitted,\n        header = _this$props.header,\n        icon = _this$props.icon,\n        link = _this$props.link,\n        name = _this$props.name,\n        onClick = _this$props.onClick,\n        position = _this$props.position;\n    var classes = (0, _clsx.default)(color, position, (0, _lib.useKeyOnly)(active, 'active'), (0, _lib.useKeyOnly)(disabled, 'disabled'), (0, _lib.useKeyOnly)(icon === true || icon && !(name || content), 'icon'), (0, _lib.useKeyOnly)(header, 'header'), (0, _lib.useKeyOnly)(link, 'link'), (0, _lib.useKeyOrValueAndKey)(fitted, 'fitted'), 'item', className);\n    var ElementType = (0, _lib.getElementType)(MenuItem, this.props, function () {\n      if (onClick) return 'a';\n    });\n    var rest = (0, _lib.getUnhandledProps)(MenuItem, this.props);\n\n    if (!_lib.childrenUtils.isNil(children)) {\n      return /*#__PURE__*/_react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {\n        className: classes,\n        onClick: this.handleClick\n      }), children);\n    }\n\n    return /*#__PURE__*/_react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {\n      className: classes,\n      onClick: this.handleClick\n    }), _Icon.default.create(icon, {\n      autoGenerateKey: false\n    }), _lib.childrenUtils.isNil(content) ? (0, _startCase2.default)(name) : content);\n  };\n\n  return MenuItem;\n}(_react.Component);\n\nexports.default = MenuItem;\nMenuItem.handledProps = [\"active\", \"as\", \"children\", \"className\", \"color\", \"content\", \"disabled\", \"fitted\", \"header\", \"icon\", \"index\", \"link\", \"name\", \"onClick\", \"position\"];\nMenuItem.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _propTypes.default.elementType,\n\n  /** A menu item can be active. */\n  active: _propTypes.default.bool,\n\n  /** Primary content. */\n  children: _propTypes.default.node,\n\n  /** Additional classes. */\n  className: _propTypes.default.string,\n\n  /** Additional colors can be specified. */\n  color: _propTypes.default.oneOf(_lib.SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: _lib.customPropTypes.contentShorthand,\n\n  /** A menu item can be disabled. */\n  disabled: _propTypes.default.bool,\n\n  /** A menu item or menu can remove element padding, vertically or horizontally. */\n  fitted: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['horizontally', 'vertically'])]),\n\n  /** A menu item may include a header or may itself be a header. */\n  header: _propTypes.default.bool,\n\n  /** MenuItem can be only icon. */\n  icon: _propTypes.default.oneOfType([_propTypes.default.bool, _lib.customPropTypes.itemShorthand]),\n\n  /** MenuItem index inside Menu. */\n  index: _propTypes.default.number,\n\n  /** A menu item can be link. */\n  link: _propTypes.default.bool,\n\n  /** Internal name of the MenuItem. */\n  name: _propTypes.default.string,\n\n  /**\n   * Called on click. When passed, the component will render as an `a`\n   * tag by default instead of a `div`.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: _propTypes.default.func,\n\n  /** A menu item can take left or right position. */\n  position: _propTypes.default.oneOf(['left', 'right'])\n} : {};\nMenuItem.create = (0, _lib.createShorthandFactory)(MenuItem, function (val) {\n  return {\n    content: val,\n    name: val\n  };\n});","map":null,"metadata":{},"sourceType":"script"}