{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { PostProcess } from \"./postProcess\";\nimport { Logger } from \"../Misc/logger\";\nimport \"../Shaders/imageProcessing.fragment\";\nimport \"../Shaders/subSurfaceScattering.fragment\";\nimport \"../Shaders/postprocess.vertex\";\n/**\r\n * Sub surface scattering post process\r\n */\n\nvar SubSurfaceScatteringPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(SubSurfaceScatteringPostProcess, _super);\n\n  function SubSurfaceScatteringPostProcess(name, scene, options, camera, samplingMode, engine, reusable, textureType) {\n    if (camera === void 0) {\n      camera = null;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    var _this = _super.call(this, name, \"subSurfaceScattering\", [\"texelSize\", \"viewportSize\", \"metersPerUnit\"], [\"diffusionS\", \"diffusionD\", \"filterRadii\", \"irradianceSampler\", \"depthSampler\", \"albedoSampler\"], options, camera, samplingMode || Texture.BILINEAR_SAMPLINGMODE, engine, reusable, null, textureType, \"postprocess\", undefined, true) || this;\n\n    _this._scene = scene;\n\n    _this.updateEffect();\n\n    _this.onApplyObservable.add(function (effect) {\n      if (!scene.prePassRenderer || !scene.subSurfaceConfiguration) {\n        Logger.Error(\"PrePass and subsurface configuration needs to be enabled for subsurface scattering.\");\n        return;\n      }\n\n      var texelSize = _this.texelSize;\n      effect.setFloat(\"metersPerUnit\", scene.subSurfaceConfiguration.metersPerUnit);\n      effect.setFloat2(\"texelSize\", texelSize.x, texelSize.y);\n      effect.setTexture(\"irradianceSampler\", scene.prePassRenderer.prePassRT.textures[scene.prePassRenderer.getIndex(0)]);\n      effect.setTexture(\"depthSampler\", scene.prePassRenderer.prePassRT.textures[scene.prePassRenderer.getIndex(5)]);\n      effect.setTexture(\"albedoSampler\", scene.prePassRenderer.prePassRT.textures[scene.prePassRenderer.getIndex(6)]);\n      effect.setFloat2(\"viewportSize\", Math.tan(scene.activeCamera.fov / 2) * scene.getEngine().getAspectRatio(scene.activeCamera, true), Math.tan(scene.activeCamera.fov / 2));\n      effect.setArray3(\"diffusionS\", scene.subSurfaceConfiguration.ssDiffusionS);\n      effect.setArray(\"diffusionD\", scene.subSurfaceConfiguration.ssDiffusionD);\n      effect.setArray(\"filterRadii\", scene.subSurfaceConfiguration.ssFilterRadii);\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"SubSurfaceScatteringPostProcess\" string\r\n   */\n\n\n  SubSurfaceScatteringPostProcess.prototype.getClassName = function () {\n    return \"SubSurfaceScatteringPostProcess\";\n  };\n\n  return SubSurfaceScatteringPostProcess;\n}(PostProcess);\n\nexport { SubSurfaceScatteringPostProcess };","map":null,"metadata":{},"sourceType":"module"}