{"ast":null,"code":"import { TmpVectors } from \"../../Maths/math.vector\";\nimport { Mesh, _CreationDataStorage } from \"../mesh\";\nimport { VertexBuffer } from \"../buffer\";\nimport { VertexData } from \"../mesh.vertexData\";\nimport { BoundingInfo } from \"../../Culling/boundingInfo\";\n\nVertexData.CreateRibbon = function (options) {\n  var pathArray = options.pathArray;\n  var closeArray = options.closeArray || false;\n  var closePath = options.closePath || false;\n  var invertUV = options.invertUV || false;\n  var defaultOffset = Math.floor(pathArray[0].length / 2);\n  var offset = options.offset || defaultOffset;\n  offset = offset > defaultOffset ? defaultOffset : Math.floor(offset); // offset max allowed : defaultOffset\n\n  var sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\n  var customUV = options.uvs;\n  var customColors = options.colors;\n  var positions = [];\n  var indices = [];\n  var normals = [];\n  var uvs = [];\n  var us = []; // us[path_id] = [uDist1, uDist2, uDist3 ... ] distances between points on path path_id\n\n  var vs = []; // vs[i] = [vDist1, vDist2, vDist3, ... ] distances between points i of consecutives paths from pathArray\n\n  var uTotalDistance = []; // uTotalDistance[p] : total distance of path p\n\n  var vTotalDistance = []; //  vTotalDistance[i] : total distance between points i of first and last path from pathArray\n\n  var minlg; // minimal length among all paths from pathArray\n\n  var lg = []; // array of path lengths : nb of vertex per path\n\n  var idx = []; // array of path indexes : index of each path (first vertex) in the total vertex number\n\n  var p; // path iterator\n\n  var i; // point iterator\n\n  var j; // point iterator\n  // if single path in pathArray\n\n  if (pathArray.length < 2) {\n    var ar1 = [];\n    var ar2 = [];\n\n    for (i = 0; i < pathArray[0].length - offset; i++) {\n      ar1.push(pathArray[0][i]);\n      ar2.push(pathArray[0][i + offset]);\n    }\n\n    pathArray = [ar1, ar2];\n  } // positions and horizontal distances (u)\n\n\n  var idc = 0;\n  var closePathCorr = closePath ? 1 : 0; // the final index will be +1 if closePath\n\n  var path;\n  var l;\n  minlg = pathArray[0].length;\n  var vectlg;\n  var dist;\n\n  for (p = 0; p < pathArray.length; p++) {\n    uTotalDistance[p] = 0;\n    us[p] = [0];\n    path = pathArray[p];\n    l = path.length;\n    minlg = minlg < l ? minlg : l;\n    j = 0;\n\n    while (j < l) {\n      positions.push(path[j].x, path[j].y, path[j].z);\n\n      if (j > 0) {\n        vectlg = path[j].subtract(path[j - 1]).length();\n        dist = vectlg + uTotalDistance[p];\n        us[p].push(dist);\n        uTotalDistance[p] = dist;\n      }\n\n      j++;\n    }\n\n    if (closePath) {\n      // an extra hidden vertex is added in the \"positions\" array\n      j--;\n      positions.push(path[0].x, path[0].y, path[0].z);\n      vectlg = path[j].subtract(path[0]).length();\n      dist = vectlg + uTotalDistance[p];\n      us[p].push(dist);\n      uTotalDistance[p] = dist;\n    }\n\n    lg[p] = l + closePathCorr;\n    idx[p] = idc;\n    idc += l + closePathCorr;\n  } // vertical distances (v)\n\n\n  var path1;\n  var path2;\n  var vertex1 = null;\n  var vertex2 = null;\n\n  for (i = 0; i < minlg + closePathCorr; i++) {\n    vTotalDistance[i] = 0;\n    vs[i] = [0];\n\n    for (p = 0; p < pathArray.length - 1; p++) {\n      path1 = pathArray[p];\n      path2 = pathArray[p + 1];\n\n      if (i === minlg) {\n        // closePath\n        vertex1 = path1[0];\n        vertex2 = path2[0];\n      } else {\n        vertex1 = path1[i];\n        vertex2 = path2[i];\n      }\n\n      vectlg = vertex2.subtract(vertex1).length();\n      dist = vectlg + vTotalDistance[i];\n      vs[i].push(dist);\n      vTotalDistance[i] = dist;\n    }\n\n    if (closeArray && vertex2 && vertex1) {\n      path1 = pathArray[p];\n      path2 = pathArray[0];\n\n      if (i === minlg) {\n        // closePath\n        vertex2 = path2[0];\n      }\n\n      vectlg = vertex2.subtract(vertex1).length();\n      dist = vectlg + vTotalDistance[i];\n      vTotalDistance[i] = dist;\n    }\n  } // uvs\n\n\n  var u;\n  var v;\n\n  if (customUV) {\n    for (p = 0; p < customUV.length; p++) {\n      uvs.push(customUV[p].x, customUV[p].y);\n    }\n  } else {\n    for (p = 0; p < pathArray.length; p++) {\n      for (i = 0; i < minlg + closePathCorr; i++) {\n        u = uTotalDistance[p] != 0.0 ? us[p][i] / uTotalDistance[p] : 0.0;\n        v = vTotalDistance[i] != 0.0 ? vs[i][p] / vTotalDistance[i] : 0.0;\n\n        if (invertUV) {\n          uvs.push(v, u);\n        } else {\n          uvs.push(u, v);\n        }\n      }\n    }\n  } // indices\n\n\n  p = 0; // path index\n\n  var pi = 0; // positions array index\n\n  var l1 = lg[p] - 1; // path1 length\n\n  var l2 = lg[p + 1] - 1; // path2 length\n\n  var min = l1 < l2 ? l1 : l2; // current path stop index\n\n  var shft = idx[1] - idx[0]; // shift\n\n  var path1nb = closeArray ? lg.length : lg.length - 1; // number of path1 to iterate\ton\n\n  while (pi <= min && p < path1nb) {\n    //  stay under min and don't go over next to last path\n    // draw two triangles between path1 (p1) and path2 (p2) : (p1.pi, p2.pi, p1.pi+1) and (p2.pi+1, p1.pi+1, p2.pi) clockwise\n    indices.push(pi, pi + shft, pi + 1);\n    indices.push(pi + shft + 1, pi + 1, pi + shft);\n    pi += 1;\n\n    if (pi === min) {\n      // if end of one of two consecutive paths reached, go to next existing path\n      p++;\n\n      if (p === lg.length - 1) {\n        // last path of pathArray reached <=> closeArray == true\n        shft = idx[0] - idx[p];\n        l1 = lg[p] - 1;\n        l2 = lg[0] - 1;\n      } else {\n        shft = idx[p + 1] - idx[p];\n        l1 = lg[p] - 1;\n        l2 = lg[p + 1] - 1;\n      }\n\n      pi = idx[p];\n      min = l1 < l2 ? l1 + pi : l2 + pi;\n    }\n  } // normals\n\n\n  VertexData.ComputeNormals(positions, indices, normals);\n\n  if (closePath) {\n    // update both the first and last vertex normals to their average value\n    var indexFirst = 0;\n    var indexLast = 0;\n\n    for (p = 0; p < pathArray.length; p++) {\n      indexFirst = idx[p] * 3;\n\n      if (p + 1 < pathArray.length) {\n        indexLast = (idx[p + 1] - 1) * 3;\n      } else {\n        indexLast = normals.length - 3;\n      }\n\n      normals[indexFirst] = (normals[indexFirst] + normals[indexLast]) * 0.5;\n      normals[indexFirst + 1] = (normals[indexFirst + 1] + normals[indexLast + 1]) * 0.5;\n      normals[indexFirst + 2] = (normals[indexFirst + 2] + normals[indexLast + 2]) * 0.5;\n      normals[indexLast] = normals[indexFirst];\n      normals[indexLast + 1] = normals[indexFirst + 1];\n      normals[indexLast + 2] = normals[indexFirst + 2];\n    }\n  } // sides\n\n\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs); // Colors\n\n\n  var colors = null;\n\n  if (customColors) {\n    colors = new Float32Array(customColors.length * 4);\n\n    for (var c = 0; c < customColors.length; c++) {\n      colors[c * 4] = customColors[c].r;\n      colors[c * 4 + 1] = customColors[c].g;\n      colors[c * 4 + 2] = customColors[c].b;\n      colors[c * 4 + 3] = customColors[c].a;\n    }\n  } // Result\n\n\n  var vertexData = new VertexData();\n  var positions32 = new Float32Array(positions);\n  var normals32 = new Float32Array(normals);\n  var uvs32 = new Float32Array(uvs);\n  vertexData.indices = indices;\n  vertexData.positions = positions32;\n  vertexData.normals = normals32;\n  vertexData.uvs = uvs32;\n\n  if (colors) {\n    vertexData.set(colors, VertexBuffer.ColorKind);\n  }\n\n  if (closePath) {\n    vertexData._idx = idx;\n  }\n\n  return vertexData;\n};\n\nMesh.CreateRibbon = function (name, pathArray, closeArray, closePath, offset, scene, updatable, sideOrientation, instance) {\n  if (closeArray === void 0) {\n    closeArray = false;\n  }\n\n  if (updatable === void 0) {\n    updatable = false;\n  }\n\n  return RibbonBuilder.CreateRibbon(name, {\n    pathArray: pathArray,\n    closeArray: closeArray,\n    closePath: closePath,\n    offset: offset,\n    updatable: updatable,\n    sideOrientation: sideOrientation,\n    instance: instance\n  }, scene);\n};\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\n\n\nvar RibbonBuilder =\n/** @class */\nfunction () {\n  function RibbonBuilder() {}\n  /**\r\n   * Creates a ribbon mesh. The ribbon is a parametric shape.  It has no predefined shape. Its final shape will depend on the input parameters\r\n   * * The parameter `pathArray` is a required array of paths, what are each an array of successive Vector3. The pathArray parameter depicts the ribbon geometry\r\n   * * The parameter `closeArray` (boolean, default false) creates a seam between the first and the last paths of the path array\r\n   * * The parameter `closePath` (boolean, default false) creates a seam between the first and the last points of each path of the path array\r\n   * * The parameter `offset` (positive integer, default : rounded half size of the pathArray length), is taken in account only if the `pathArray` is containing a single path\r\n   * * It's the offset to join the points from the same path. Ex : offset = 10 means the point 1 is joined to the point 11\r\n   * * The optional parameter `instance` is an instance of an existing Ribbon object to be updated with the passed `pathArray` parameter : https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh#ribbon\r\n   * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n   * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n   * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture\r\n   * * The parameter `uvs` is an optional flat array of `Vector2` to update/set each ribbon vertex with its own custom UV values instead of the computed ones\r\n   * * The parameters `colors` is an optional flat array of `Color4` to set/update each ribbon vertex with its own custom color values\r\n   * * Note that if you use the parameters `uvs` or `colors`, the passed arrays must be populated with the right number of elements, it is to say the number of ribbon vertices. Remember that if you set `closePath` to `true`, there's one extra vertex per path in the geometry\r\n   * * Moreover, you can use the parameter `color` with `instance` (to update the ribbon), only if you previously used it at creation time\r\n   * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n   * @param name defines the name of the mesh\r\n   * @param options defines the options used to create the mesh\r\n   * @param scene defines the hosting scene\r\n   * @returns the ribbon mesh\r\n   * @see https://doc.babylonjs.com/how_to/ribbon_tutorial\r\n   * @see https://doc.babylonjs.com/how_to/parametric_shapes\r\n   */\n\n\n  RibbonBuilder.CreateRibbon = function (name, options, scene) {\n    if (scene === void 0) {\n      scene = null;\n    }\n\n    var pathArray = options.pathArray;\n    var closeArray = options.closeArray;\n    var closePath = options.closePath;\n\n    var sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n\n    var instance = options.instance;\n    var updatable = options.updatable;\n\n    if (instance) {\n      // existing ribbon instance update\n      // positionFunction : ribbon case\n      // only pathArray and sideOrientation parameters are taken into account for positions update\n      var minimum_1 = TmpVectors.Vector3[0].setAll(Number.MAX_VALUE);\n      var maximum_1 = TmpVectors.Vector3[1].setAll(-Number.MAX_VALUE);\n\n      var positionFunction = function positionFunction(positions) {\n        var minlg = pathArray[0].length;\n        var mesh = instance;\n        var i = 0;\n        var ns = mesh._originalBuilderSideOrientation === Mesh.DOUBLESIDE ? 2 : 1;\n\n        for (var si = 1; si <= ns; ++si) {\n          for (var p = 0; p < pathArray.length; ++p) {\n            var path = pathArray[p];\n            var l = path.length;\n            minlg = minlg < l ? minlg : l;\n\n            for (var j = 0; j < minlg; ++j) {\n              var pathPoint = path[j];\n              positions[i] = pathPoint.x;\n              positions[i + 1] = pathPoint.y;\n              positions[i + 2] = pathPoint.z;\n              minimum_1.minimizeInPlaceFromFloats(pathPoint.x, pathPoint.y, pathPoint.z);\n              maximum_1.maximizeInPlaceFromFloats(pathPoint.x, pathPoint.y, pathPoint.z);\n              i += 3;\n            }\n\n            if (mesh._creationDataStorage && mesh._creationDataStorage.closePath) {\n              var pathPoint = path[0];\n              positions[i] = pathPoint.x;\n              positions[i + 1] = pathPoint.y;\n              positions[i + 2] = pathPoint.z;\n              i += 3;\n            }\n          }\n        }\n      };\n\n      var positions = instance.getVerticesData(VertexBuffer.PositionKind);\n      positionFunction(positions);\n\n      if (instance._boundingInfo) {\n        instance._boundingInfo.reConstruct(minimum_1, maximum_1, instance._worldMatrix);\n      } else {\n        instance._boundingInfo = new BoundingInfo(minimum_1, maximum_1, instance._worldMatrix);\n      }\n\n      instance.updateVerticesData(VertexBuffer.PositionKind, positions, false, false);\n\n      if (options.colors) {\n        var colors = instance.getVerticesData(VertexBuffer.ColorKind);\n\n        for (var c = 0, colorIndex = 0; c < options.colors.length; c++, colorIndex += 4) {\n          var color = options.colors[c];\n          colors[colorIndex] = color.r;\n          colors[colorIndex + 1] = color.g;\n          colors[colorIndex + 2] = color.b;\n          colors[colorIndex + 3] = color.a;\n        }\n\n        instance.updateVerticesData(VertexBuffer.ColorKind, colors, false, false);\n      }\n\n      if (options.uvs) {\n        var uvs = instance.getVerticesData(VertexBuffer.UVKind);\n\n        for (var i = 0; i < options.uvs.length; i++) {\n          uvs[i * 2] = options.uvs[i].x;\n          uvs[i * 2 + 1] = options.uvs[i].y;\n        }\n\n        instance.updateVerticesData(VertexBuffer.UVKind, uvs, false, false);\n      }\n\n      if (!instance.areNormalsFrozen || instance.isFacetDataEnabled) {\n        var indices = instance.getIndices();\n        var normals = instance.getVerticesData(VertexBuffer.NormalKind);\n        var params = instance.isFacetDataEnabled ? instance.getFacetDataParameters() : null;\n        VertexData.ComputeNormals(positions, indices, normals, params);\n\n        if (instance._creationDataStorage && instance._creationDataStorage.closePath) {\n          var indexFirst = 0;\n          var indexLast = 0;\n\n          for (var p = 0; p < pathArray.length; p++) {\n            indexFirst = instance._creationDataStorage.idx[p] * 3;\n\n            if (p + 1 < pathArray.length) {\n              indexLast = (instance._creationDataStorage.idx[p + 1] - 1) * 3;\n            } else {\n              indexLast = normals.length - 3;\n            }\n\n            normals[indexFirst] = (normals[indexFirst] + normals[indexLast]) * 0.5;\n            normals[indexFirst + 1] = (normals[indexFirst + 1] + normals[indexLast + 1]) * 0.5;\n            normals[indexFirst + 2] = (normals[indexFirst + 2] + normals[indexLast + 2]) * 0.5;\n            normals[indexLast] = normals[indexFirst];\n            normals[indexLast + 1] = normals[indexFirst + 1];\n            normals[indexLast + 2] = normals[indexFirst + 2];\n          }\n        }\n\n        if (!instance.areNormalsFrozen) {\n          instance.updateVerticesData(VertexBuffer.NormalKind, normals, false, false);\n        }\n      }\n\n      return instance;\n    } else {\n      // new ribbon creation\n      var ribbon = new Mesh(name, scene);\n      ribbon._originalBuilderSideOrientation = sideOrientation;\n      ribbon._creationDataStorage = new _CreationDataStorage();\n      var vertexData = VertexData.CreateRibbon(options);\n\n      if (closePath) {\n        ribbon._creationDataStorage.idx = vertexData._idx;\n      }\n\n      ribbon._creationDataStorage.closePath = closePath;\n      ribbon._creationDataStorage.closeArray = closeArray;\n      vertexData.applyToMesh(ribbon, updatable);\n      return ribbon;\n    }\n  };\n\n  return RibbonBuilder;\n}();\n\nexport { RibbonBuilder };","map":null,"metadata":{},"sourceType":"module"}