{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DAOContract = void 0;\n\nvar utils_1 = require(\"./utils\");\n\nvar DAOContract = /*#__PURE__*/function () {\n  function DAOContract(contract) {\n    _classCallCheck(this, DAOContract);\n\n    this.contract = contract;\n  }\n\n  _createClass(DAOContract, [{\n    key: \"getCount\",\n    value: function () {\n      var _getCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = parseInt;\n                _context.next = 3;\n                return this.contract.methods.catalystCount().call();\n\n              case 3:\n                _context.t1 = _context.sent;\n                return _context.abrupt(\"return\", (0, _context.t0)(_context.t1));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getCount() {\n        return _getCount.apply(this, arguments);\n      }\n\n      return getCount;\n    }()\n  }, {\n    key: \"getCatalystIdByIndex\",\n    value: function getCatalystIdByIndex(index) {\n      return this.contract.methods.catalystIds(index).call();\n    }\n  }, {\n    key: \"getServerData\",\n    value: function () {\n      var _getServerData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(catalystId) {\n        var _yield$this$contract$, id, owner, domain;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.contract.methods.catalystById(catalystId).call();\n\n              case 2:\n                _yield$this$contract$ = _context2.sent;\n                id = _yield$this$contract$.id;\n                owner = _yield$this$contract$.owner;\n                domain = _yield$this$contract$.domain;\n                return _context2.abrupt(\"return\", {\n                  id: id,\n                  domain: domain,\n                  owner: owner.toJSON()\n                });\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getServerData(_x) {\n        return _getServerData.apply(this, arguments);\n      }\n\n      return getServerData;\n    }()\n  }], [{\n    key: \"withNetwork\",\n    value: function withNetwork(networkName) {\n      var handler = (0, utils_1.handlerForNetwork)(networkName, 'catalyst');\n\n      if (handler) {\n        var contract = handler.contract;\n        return new DAOContract(contract);\n      } else {\n        throw new Error(\"Can not find a network handler for Network=\\\"\".concat(networkName));\n      }\n    }\n  }]);\n\n  return DAOContract;\n}();\n\nexports.DAOContract = DAOContract;","map":null,"metadata":{},"sourceType":"script"}