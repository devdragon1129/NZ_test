{"ast":null,"code":"/** @hidden */\nfunction createXMLHttpRequest() {\n  // If running in Babylon Native, then defer to the native XMLHttpRequest, which has the same public contract\n  if (typeof _native !== 'undefined' && _native.XMLHttpRequest) {\n    return new _native.XMLHttpRequest();\n  } else {\n    return new XMLHttpRequest();\n  }\n}\n/**\r\n * Extended version of XMLHttpRequest with support for customizations (headers, ...)\r\n */\n\n\nvar WebRequest =\n/** @class */\nfunction () {\n  function WebRequest() {\n    this._xhr = createXMLHttpRequest();\n  }\n\n  WebRequest.prototype._injectCustomRequestHeaders = function () {\n    for (var key in WebRequest.CustomRequestHeaders) {\n      var val = WebRequest.CustomRequestHeaders[key];\n\n      if (val) {\n        this._xhr.setRequestHeader(key, val);\n      }\n    }\n  };\n\n  Object.defineProperty(WebRequest.prototype, \"onprogress\", {\n    /**\r\n     * Gets or sets a function to be called when loading progress changes\r\n     */\n    get: function get() {\n      return this._xhr.onprogress;\n    },\n    set: function set(value) {\n      this._xhr.onprogress = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"readyState\", {\n    /**\r\n     * Returns client's state\r\n     */\n    get: function get() {\n      return this._xhr.readyState;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"status\", {\n    /**\r\n     * Returns client's status\r\n     */\n    get: function get() {\n      return this._xhr.status;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"statusText\", {\n    /**\r\n     * Returns client's status as a text\r\n     */\n    get: function get() {\n      return this._xhr.statusText;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"response\", {\n    /**\r\n     * Returns client's response\r\n     */\n    get: function get() {\n      return this._xhr.response;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"responseURL\", {\n    /**\r\n     * Returns client's response url\r\n     */\n    get: function get() {\n      return this._xhr.responseURL;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"responseText\", {\n    /**\r\n     * Returns client's response as text\r\n     */\n    get: function get() {\n      return this._xhr.responseText;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebRequest.prototype, \"responseType\", {\n    /**\r\n     * Gets or sets the expected response type\r\n     */\n    get: function get() {\n      return this._xhr.responseType;\n    },\n    set: function set(value) {\n      this._xhr.responseType = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  WebRequest.prototype.addEventListener = function (type, listener, options) {\n    this._xhr.addEventListener(type, listener, options);\n  };\n\n  WebRequest.prototype.removeEventListener = function (type, listener, options) {\n    this._xhr.removeEventListener(type, listener, options);\n  };\n  /**\r\n   * Cancels any network activity\r\n   */\n\n\n  WebRequest.prototype.abort = function () {\n    this._xhr.abort();\n  };\n  /**\r\n   * Initiates the request. The optional argument provides the request body. The argument is ignored if request method is GET or HEAD\r\n   * @param body defines an optional request body\r\n   */\n\n\n  WebRequest.prototype.send = function (body) {\n    if (WebRequest.CustomRequestHeaders) {\n      this._injectCustomRequestHeaders();\n    }\n\n    this._xhr.send(body);\n  };\n  /**\r\n   * Sets the request method, request URL\r\n   * @param method defines the method to use (GET, POST, etc..)\r\n   * @param url defines the url to connect with\r\n   */\n\n\n  WebRequest.prototype.open = function (method, url) {\n    for (var _i = 0, _a = WebRequest.CustomRequestModifiers; _i < _a.length; _i++) {\n      var update = _a[_i];\n      update(this._xhr, url);\n    } // Clean url\n\n\n    url = url.replace(\"file:http:\", \"http:\");\n    url = url.replace(\"file:https:\", \"https:\");\n    return this._xhr.open(method, url, true);\n  };\n  /**\r\n   * Sets the value of a request header.\r\n   * @param name The name of the header whose value is to be set\r\n   * @param value The value to set as the body of the header\r\n   */\n\n\n  WebRequest.prototype.setRequestHeader = function (name, value) {\n    this._xhr.setRequestHeader(name, value);\n  };\n  /**\r\n   * Get the string containing the text of a particular header's value.\r\n   * @param name The name of the header\r\n   * @returns The string containing the text of the given header name\r\n   */\n\n\n  WebRequest.prototype.getResponseHeader = function (name) {\n    return this._xhr.getResponseHeader(name);\n  };\n  /**\r\n   * Custom HTTP Request Headers to be sent with XMLHttpRequests\r\n   * i.e. when loading files, where the server/service expects an Authorization header\r\n   */\n\n\n  WebRequest.CustomRequestHeaders = {};\n  /**\r\n   * Add callback functions in this array to update all the requests before they get sent to the network\r\n   */\n\n  WebRequest.CustomRequestModifiers = new Array();\n  return WebRequest;\n}();\n\nexport { WebRequest };","map":null,"metadata":{},"sourceType":"module"}