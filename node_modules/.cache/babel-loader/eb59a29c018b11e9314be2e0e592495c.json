{"ast":null,"code":"export var GROUND_CATEGORY = 'ground';\nexport var AssetParameterType;\n\n(function (AssetParameterType) {\n  AssetParameterType[\"BOOLEAN\"] = \"boolean\";\n  AssetParameterType[\"TEXT\"] = \"text\";\n  AssetParameterType[\"TEXTAREA\"] = \"textarea\";\n  AssetParameterType[\"FLOAT\"] = \"float\";\n  AssetParameterType[\"INTEGER\"] = \"integer\";\n  AssetParameterType[\"ENTITY\"] = \"entity\";\n  AssetParameterType[\"ACTIONS\"] = \"actions\";\n  AssetParameterType[\"OPTIONS\"] = \"options\";\n  AssetParameterType[\"SLIDER\"] = \"slider\";\n})(AssetParameterType || (AssetParameterType = {}));","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/asset/types.ts"],"names":["GROUND_CATEGORY","AssetParameterType"],"mappings":"AAEA,OAAO,IAAMA,eAAe,GAAG,QAAxB;AAyCP,WAAYC,kBAAZ;;WAAYA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;AAAAA,EAAAA,kB;GAAAA,kB,KAAAA,kB","sourcesContent":["import { ModelMetrics } from 'modules/models/types'\n\nexport const GROUND_CATEGORY = 'ground'\n\nexport type Asset = BaseAsset & {\n  assetPackId: string\n  isDisabled?: boolean\n}\n\nexport type AssetAction = {\n  id: string\n  label: string\n  parameters: AssetParameter[]\n  description?: string\n}\n\nexport type AssetParameter = {\n  id: string\n  type: AssetParameterType\n  label: string\n  description?: string\n  default?: Exclude<AssetParameterValue, AssetActionValue>\n  options?: AssetParameterOption[]\n  min?: number\n  max?: number\n  step?: number\n}\n\nexport type AssetParameterOption = {\n  label: string\n  value: string\n}\n\nexport type AssetParameterValue = string | number | boolean | AssetActionValue[]\n\nexport type AssetParameterValues = Record<string, AssetParameterValue>\n\nexport type AssetActionValue = {\n  entityName: string\n  actionId: string\n  values: AssetParameterValues\n}\n\nexport enum AssetParameterType {\n  BOOLEAN = 'boolean',\n  TEXT = 'text',\n  TEXTAREA = 'textarea',\n  FLOAT = 'float',\n  INTEGER = 'integer',\n  ENTITY = 'entity',\n  ACTIONS = 'actions',\n  OPTIONS = 'options',\n  SLIDER = 'slider'\n}\n\nexport type BaseAsset = {\n  id: string\n  legacyId?: string | null\n  name: string\n  model: string\n  script: string | null\n  thumbnail: string\n  tags: string[]\n  category: string // name of the category\n  contents: Record<string, string>\n  metrics: ModelMetrics\n  parameters: AssetParameter[]\n  actions: AssetAction[]\n}\n\nexport type RawAsset = {\n  id: string\n  name: string\n  model: string\n  script: null | string\n  tags: string[]\n  category: string\n  assetPackId: string\n  thumbnail: string\n  contents: Record<string, Blob>\n  metrics: ModelMetrics\n  parameters: AssetParameter[]\n  actions: AssetAction[]\n}\n\n/**\n * A Record that maps `assetId` to a Record of `{ [cid: string]: Blob }`\n */\nexport type RawAssetContents = Record<string, Record<string, Blob>>\n"]},"metadata":{},"sourceType":"module"}