{"ast":null,"code":"import { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { isConnecting } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { locations } from 'routing/locations';\nimport { openModal } from 'modules/modal/actions';\nimport { isFetching } from 'modules/project/selectors';\nimport { isLoggedIn, isLoggingIn } from 'modules/identity/selectors';\nimport { getProjects, getPage, getSortBy, getTotalPages, didSync, didCreate } from 'modules/ui/dashboard/selectors';\nimport { loadPoolsRequest } from 'modules/pool/actions';\nimport { getPoolList } from 'modules/pool/selectors';\nimport HomePage from './HomePage';\n\nvar mapState = function mapState(state) {\n  return {\n    projects: getProjects(state),\n    isLoggingIn: isLoggingIn(state) || isConnecting(state),\n    isFetching: isFetching(state),\n    page: getPage(state),\n    sortBy: getSortBy(state),\n    totalPages: getTotalPages(state),\n    didCreate: didCreate(state),\n    didSync: didSync(state),\n    isLoggedIn: isLoggedIn(state),\n    poolList: getPoolList(state)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    },\n    onPageChange: function onPageChange(options) {\n      return dispatch(push(locations.root(options)));\n    },\n    onNavigate: function onNavigate(path) {\n      return dispatch(push(path));\n    },\n    onLoadFromScenePool: function onLoadFromScenePool(filters) {\n      return dispatch(loadPoolsRequest(filters));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(HomePage);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/HomePage/HomePage.container.ts"],"names":["connect","push","isConnecting","locations","openModal","isFetching","isLoggedIn","isLoggingIn","getProjects","getPage","getSortBy","getTotalPages","didSync","didCreate","loadPoolsRequest","getPoolList","HomePage","mapState","state","projects","page","sortBy","totalPages","poolList","mapDispatch","dispatch","onOpenModal","name","metadata","onPageChange","options","root","onNavigate","path","onLoadFromScenePool","filters"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,YAAT,QAA6B,kDAA7B;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,4BAAxC;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,SAA/B,EAA0CC,aAA1C,EAAyDC,OAAzD,EAAkEC,SAAlE,QAAmF,gCAAnF;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAsC;AACrDC,IAAAA,QAAQ,EAAEX,WAAW,CAACU,KAAD,CADgC;AAErDX,IAAAA,WAAW,EAAEA,WAAW,CAACW,KAAD,CAAX,IAAsBhB,YAAY,CAACgB,KAAD,CAFM;AAGrDb,IAAAA,UAAU,EAAEA,UAAU,CAACa,KAAD,CAH+B;AAIrDE,IAAAA,IAAI,EAAEX,OAAO,CAACS,KAAD,CAJwC;AAKrDG,IAAAA,MAAM,EAAEX,SAAS,CAACQ,KAAD,CALoC;AAMrDI,IAAAA,UAAU,EAAEX,aAAa,CAACO,KAAD,CAN4B;AAOrDL,IAAAA,SAAS,EAAEA,SAAS,CAACK,KAAD,CAPiC;AAQrDN,IAAAA,OAAO,EAAEA,OAAO,CAACM,KAAD,CARqC;AASrDZ,IAAAA,UAAU,EAAEA,UAAU,CAACY,KAAD,CAT+B;AAUrDK,IAAAA,QAAQ,EAAER,WAAW,CAACG,KAAD;AAVgC,GAAtC;AAAA,CAAjB;;AAaA,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,QAAP;AAAA,aAAoBH,QAAQ,CAACrB,SAAS,CAACuB,IAAD,EAAOC,QAAP,CAAV,CAA5B;AAAA,KADmD;AAEhEC,IAAAA,YAAY,EAAE,sBAAAC,OAAO;AAAA,aAAIL,QAAQ,CAACxB,IAAI,CAACE,SAAS,CAAC4B,IAAV,CAAeD,OAAf,CAAD,CAAL,CAAZ;AAAA,KAF2C;AAGhEE,IAAAA,UAAU,EAAE,oBAAAC,IAAI;AAAA,aAAIR,QAAQ,CAACxB,IAAI,CAACgC,IAAD,CAAL,CAAZ;AAAA,KAHgD;AAIhEC,IAAAA,mBAAmB,EAAE,6BAAAC,OAAO;AAAA,aAAIV,QAAQ,CAACX,gBAAgB,CAACqB,OAAD,CAAjB,CAAZ;AAAA;AAJoC,GAA9C;AAAA,CAApB;;AAOA,eAAenC,OAAO,CAACiB,QAAD,EAAWO,WAAX,CAAP,CAA+BR,QAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport { isConnecting } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { locations } from 'routing/locations'\nimport { RootState } from 'modules/common/types'\nimport { openModal } from 'modules/modal/actions'\nimport { isFetching } from 'modules/project/selectors'\nimport { isLoggedIn, isLoggingIn } from 'modules/identity/selectors'\nimport { getProjects, getPage, getSortBy, getTotalPages, didSync, didCreate } from 'modules/ui/dashboard/selectors'\nimport { loadPoolsRequest } from 'modules/pool/actions'\nimport { getPoolList } from 'modules/pool/selectors'\nimport { MapStateProps, MapDispatchProps, MapDispatch } from './HomePage.types'\nimport HomePage from './HomePage'\n\nconst mapState = (state: RootState): MapStateProps => ({\n  projects: getProjects(state),\n  isLoggingIn: isLoggingIn(state) || isConnecting(state),\n  isFetching: isFetching(state),\n  page: getPage(state),\n  sortBy: getSortBy(state),\n  totalPages: getTotalPages(state),\n  didCreate: didCreate(state),\n  didSync: didSync(state),\n  isLoggedIn: isLoggedIn(state),\n  poolList: getPoolList(state)\n})\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata)),\n  onPageChange: options => dispatch(push(locations.root(options))),\n  onNavigate: path => dispatch(push(path)),\n  onLoadFromScenePool: filters => dispatch(loadPoolsRequest(filters))\n})\n\nexport default connect(mapState, mapDispatch)(HomePage)\n"]},"metadata":{},"sourceType":"module"}