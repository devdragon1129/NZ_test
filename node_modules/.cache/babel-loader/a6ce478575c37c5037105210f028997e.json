{"ast":null,"code":"import { DeviceInputSystem } from '../deviceInputSystem';\nimport { DeviceType } from './deviceEnums';\nimport { Observable } from '../../Misc/observable';\n/**\r\n * Class that handles all input for a specific device\r\n */\n\nvar DeviceSource =\n/** @class */\nfunction () {\n  /**\r\n   * Default Constructor\r\n   * @param deviceInputSystem Reference to DeviceInputSystem\r\n   * @param deviceType Type of device\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   */\n  function DeviceSource(deviceInputSystem,\n  /** Type of device */\n  deviceType,\n  /** \"Slot\" or index that device is referenced in */\n  deviceSlot) {\n    if (deviceSlot === void 0) {\n      deviceSlot = 0;\n    }\n\n    this.deviceType = deviceType;\n    this.deviceSlot = deviceSlot; // Public Members\n\n    /**\r\n     * Observable to handle device input changes per device\r\n     */\n\n    this.onInputChangedObservable = new Observable();\n    this._deviceInputSystem = deviceInputSystem;\n  }\n  /**\r\n   * Get input for specific input\r\n   * @param inputIndex index of specific input on device\r\n   * @returns Input value from DeviceInputSystem\r\n   */\n\n\n  DeviceSource.prototype.getInput = function (inputIndex) {\n    return this._deviceInputSystem.pollInput(this.deviceType, this.deviceSlot, inputIndex);\n  };\n\n  return DeviceSource;\n}();\n\nexport { DeviceSource };\n/**\r\n * Class to keep track of devices\r\n */\n\nvar DeviceSourceManager =\n/** @class */\nfunction () {\n  /**\r\n   * Default Constructor\r\n   * @param engine engine to pull input element from\r\n   */\n  function DeviceSourceManager(engine) {\n    var _this = this; // Public Members\n\n    /**\r\n     * Observable to be triggered when after a device is connected, any new observers added will be triggered against already connected devices\r\n     */\n\n\n    this.onDeviceConnectedObservable = new Observable(function (observer) {\n      _this.getDevices().forEach(function (device) {\n        _this.onDeviceConnectedObservable.notifyObserver(observer, device);\n      });\n    });\n    /**\r\n     * Observable to be triggered when after a device is disconnected\r\n     */\n\n    this.onDeviceDisconnectedObservable = new Observable();\n    var numberOfDeviceTypes = Object.keys(DeviceType).length / 2;\n    this._devices = new Array(numberOfDeviceTypes);\n    this._firstDevice = new Array(numberOfDeviceTypes);\n    this._deviceInputSystem = DeviceInputSystem.Create(engine);\n\n    this._deviceInputSystem.onDeviceConnected = function (deviceType, deviceSlot) {\n      _this._addDevice(deviceType, deviceSlot);\n\n      _this.onDeviceConnectedObservable.notifyObservers(_this.getDeviceSource(deviceType, deviceSlot));\n    };\n\n    this._deviceInputSystem.onDeviceDisconnected = function (deviceType, deviceSlot) {\n      var device = _this.getDeviceSource(deviceType, deviceSlot); // Grab local reference to use before removing from devices\n\n\n      _this._removeDevice(deviceType, deviceSlot);\n\n      _this.onDeviceDisconnectedObservable.notifyObservers(device);\n    };\n\n    if (!this._deviceInputSystem.onInputChanged) {\n      this._deviceInputSystem.onInputChanged = function (deviceType, deviceSlot, inputIndex, previousState, currentState) {\n        var _a;\n\n        (_a = _this.getDeviceSource(deviceType, deviceSlot)) === null || _a === void 0 ? void 0 : _a.onInputChangedObservable.notifyObservers({\n          inputIndex: inputIndex,\n          previousState: previousState,\n          currentState: currentState\n        });\n      };\n    }\n  } // Public Functions\n\n  /**\r\n   * Gets a DeviceSource, given a type and slot\r\n   * @param deviceType Enum specifying device type\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   * @returns DeviceSource object\r\n   */\n\n\n  DeviceSourceManager.prototype.getDeviceSource = function (deviceType, deviceSlot) {\n    if (deviceSlot === undefined) {\n      if (this._firstDevice[deviceType] === undefined) {\n        return null;\n      }\n\n      deviceSlot = this._firstDevice[deviceType];\n    }\n\n    if (!this._devices[deviceType] || this._devices[deviceType][deviceSlot] === undefined) {\n      return null;\n    }\n\n    return this._devices[deviceType][deviceSlot];\n  };\n  /**\r\n   * Gets an array of DeviceSource objects for a given device type\r\n   * @param deviceType Enum specifying device type\r\n   * @returns Array of DeviceSource objects\r\n   */\n\n\n  DeviceSourceManager.prototype.getDeviceSources = function (deviceType) {\n    return this._devices[deviceType].filter(function (source) {\n      return !!source;\n    });\n  };\n  /**\r\n   * Returns a read-only list of all available devices\r\n   * @returns Read-only array with active devices\r\n   */\n\n\n  DeviceSourceManager.prototype.getDevices = function () {\n    var deviceArray = new Array();\n\n    this._devices.forEach(function (deviceSet) {\n      deviceArray.push.apply(deviceArray, deviceSet);\n    });\n\n    return deviceArray;\n  };\n  /**\r\n   * Dispose of DeviceInputSystem and other parts\r\n   */\n\n\n  DeviceSourceManager.prototype.dispose = function () {\n    this.onDeviceConnectedObservable.clear();\n    this.onDeviceDisconnectedObservable.clear();\n\n    this._deviceInputSystem.dispose();\n  }; // Private Functions\n\n  /**\r\n   * Function to add device name to device list\r\n   * @param deviceType Enum specifying device type\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   */\n\n\n  DeviceSourceManager.prototype._addDevice = function (deviceType, deviceSlot) {\n    if (!this._devices[deviceType]) {\n      this._devices[deviceType] = new Array();\n    }\n\n    if (!this._devices[deviceType][deviceSlot]) {\n      this._devices[deviceType][deviceSlot] = new DeviceSource(this._deviceInputSystem, deviceType, deviceSlot);\n\n      this._updateFirstDevices(deviceType);\n    }\n  };\n  /**\r\n   * Function to remove device name to device list\r\n   * @param deviceType Enum specifying device type\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   */\n\n\n  DeviceSourceManager.prototype._removeDevice = function (deviceType, deviceSlot) {\n    delete this._devices[deviceType][deviceSlot];\n\n    this._updateFirstDevices(deviceType);\n  };\n  /**\r\n   * Updates array storing first connected device of each type\r\n   * @param type Type of Device\r\n   */\n\n\n  DeviceSourceManager.prototype._updateFirstDevices = function (type) {\n    switch (type) {\n      case DeviceType.Keyboard:\n      case DeviceType.Mouse:\n        this._firstDevice[type] = 0;\n        break;\n\n      case DeviceType.Touch:\n      case DeviceType.DualShock:\n      case DeviceType.Xbox:\n      case DeviceType.Switch:\n      case DeviceType.Generic:\n        var devices = this._devices[type];\n        delete this._firstDevice[type];\n\n        for (var i = 0; i < devices.length; i++) {\n          if (devices[i]) {\n            this._firstDevice[type] = i;\n            break;\n          }\n        }\n\n        break;\n    }\n  };\n\n  return DeviceSourceManager;\n}();\n\nexport { DeviceSourceManager };","map":null,"metadata":{},"sourceType":"module"}