{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/fxaa.fragment\";\nimport \"../Shaders/fxaa.vertex\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { SerializationHelper } from '../Misc/decorators';\n/**\r\n * Fxaa post process\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#fxaa\r\n */\n\nvar FxaaPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(FxaaPostProcess, _super);\n\n  function FxaaPostProcess(name, options, camera, samplingMode, engine, reusable, textureType) {\n    if (camera === void 0) {\n      camera = null;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    var _this = _super.call(this, name, \"fxaa\", [\"texelSize\"], null, options, camera, samplingMode || Texture.BILINEAR_SAMPLINGMODE, engine, reusable, null, textureType, \"fxaa\", undefined, true) || this;\n\n    var defines = _this._getDefines();\n\n    _this.updateEffect(defines);\n\n    _this.onApplyObservable.add(function (effect) {\n      var texelSize = _this.texelSize;\n      effect.setFloat2(\"texelSize\", texelSize.x, texelSize.y);\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"FxaaPostProcess\" string\r\n   */\n\n\n  FxaaPostProcess.prototype.getClassName = function () {\n    return \"FxaaPostProcess\";\n  };\n\n  FxaaPostProcess.prototype._getDefines = function () {\n    var engine = this.getEngine();\n\n    if (!engine) {\n      return null;\n    }\n\n    var glInfo = engine.getGlInfo();\n\n    if (glInfo && glInfo.renderer && glInfo.renderer.toLowerCase().indexOf(\"mali\") > -1) {\n      return \"#define MALI 1\\n\";\n    }\n\n    return null;\n  };\n  /** @hidden */\n\n\n  FxaaPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new FxaaPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  return FxaaPostProcess;\n}(PostProcess);\n\nexport { FxaaPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.FxaaPostProcess\"] = FxaaPostProcess;","map":null,"metadata":{},"sourceType":"module"}