{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useInput = void 0;\n\nvar react_1 = require(\"react\");\n\nvar useInput = function useInput(value, onChange, ms) {\n  if (ms === void 0) {\n    ms = 500;\n  }\n\n  var _a = (0, react_1.useState)(value),\n      text = _a[0],\n      setText = _a[1];\n\n  var handleChange = (0, react_1.useCallback)(function (event) {\n    return setText(event.target.value);\n  }, [setText]);\n  var timeout = (0, react_1.useRef)(); // flag to skip debounce\n\n  var skip = (0, react_1.useRef)(false); // when value is changed from outside (controlled prop)\n  // should update internal value and skip debounce\n\n  (0, react_1.useEffect)(function () {\n    if (value !== text) {\n      skip.current = true;\n      setText(value);\n    } // eslint-disable-next-line\n\n  }, [value]); // When internal value changes it\n  // should start a debounced call to onChange\n\n  (0, react_1.useEffect)(function () {\n    if (timeout.current) {\n      clearTimeout(timeout.current);\n    }\n\n    if (skip.current) {\n      skip.current = false;\n      return;\n    }\n\n    timeout.current = setTimeout(function () {\n      timeout.current = undefined;\n      onChange(text);\n    }, ms);\n  }, [text, ms, onChange]);\n  return [text, handleChange];\n};\n\nexports.useInput = useInput;","map":null,"metadata":{},"sourceType":"script"}