{"ast":null,"code":"import { EnvironmentTextureTools } from \"../../../Misc/environmentTextureTools\";\nimport { Engine } from \"../../../Engines/engine\";\nimport { StringTools } from '../../../Misc/stringTools';\n/**\r\n * Implementation of the ENV Texture Loader.\r\n * @hidden\r\n */\n\nvar _ENVTextureLoader =\n/** @class */\nfunction () {\n  function _ENVTextureLoader() {\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\n    this.supportCascades = false;\n  }\n  /**\r\n   * This returns if the loader support the current file information.\r\n   * @param extension defines the file extension of the file being loaded\r\n   * @returns true if the loader can load the specified file\r\n   */\n\n\n  _ENVTextureLoader.prototype.canLoad = function (extension) {\n    return StringTools.EndsWith(extension, \".env\");\n  };\n  /**\r\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param createPolynomials will be true if polynomials have been requested\r\n   * @param onLoad defines the callback to trigger once the texture is ready\r\n   * @param onError defines the callback to trigger in case of error\r\n   */\n\n\n  _ENVTextureLoader.prototype.loadCubeData = function (data, texture, createPolynomials, onLoad, onError) {\n    if (Array.isArray(data)) {\n      return;\n    }\n\n    var info = EnvironmentTextureTools.GetEnvInfo(data);\n\n    if (info) {\n      texture.width = info.width;\n      texture.height = info.width;\n      EnvironmentTextureTools.UploadEnvSpherical(texture, info);\n      EnvironmentTextureTools.UploadEnvLevelsAsync(texture, data, info).then(function () {\n        texture.isReady = true;\n        texture.onLoadedObservable.notifyObservers(texture);\n        texture.onLoadedObservable.clear();\n\n        if (onLoad) {\n          onLoad();\n        }\n      });\n    } else if (onError) {\n      onError(\"Can not parse the environment file\", null);\n    }\n  };\n  /**\r\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param callback defines the method to call once ready to upload\r\n   */\n\n\n  _ENVTextureLoader.prototype.loadData = function (data, texture, callback) {\n    throw \".env not supported in 2d.\";\n  };\n\n  return _ENVTextureLoader;\n}();\n\nexport { _ENVTextureLoader }; // Register the loader.\n\nEngine._TextureLoaders.push(new _ENVTextureLoader());","map":null,"metadata":{},"sourceType":"module"}