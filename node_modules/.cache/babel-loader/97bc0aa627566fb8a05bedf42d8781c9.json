{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar _objectSpread = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar address_1 = require(\"../address\");\n\nvar formatters_1 = require(\"../formatters\");\n\nvar utils_1 = require(\"../utils\");\n\nvar identity = function identity() {\n  return function (result) {\n    return result;\n  };\n};\n\nvar PersonalRequestPayloads = /*#__PURE__*/function () {\n  function PersonalRequestPayloads() {\n    _classCallCheck(this, PersonalRequestPayloads);\n  }\n\n  _createClass(PersonalRequestPayloads, [{\n    key: \"getAccounts\",\n    value: function getAccounts() {\n      return {\n        method: 'personal_listAccounts',\n        format: function format(result) {\n          return result.map(address_1.Address.fromString);\n        }\n      };\n    }\n  }, {\n    key: \"newAccount\",\n    value: function newAccount(password) {\n      return {\n        method: 'personal_newAccount',\n        params: [password],\n        format: address_1.Address.fromString\n      };\n    }\n  }, {\n    key: \"unlockAccount\",\n    value: function unlockAccount(address, password, duration) {\n      return {\n        method: 'personal_unlockAccount',\n        params: [address.toString().toLowerCase(), password, duration],\n        format: identity()\n      };\n    }\n  }, {\n    key: \"lockAccount\",\n    value: function lockAccount(address) {\n      return {\n        method: 'personal_lockAccount',\n        params: [address.toString().toLowerCase()],\n        format: identity()\n      };\n    }\n  }, {\n    key: \"importRawKey\",\n    value: function importRawKey(privateKey, password) {\n      return {\n        method: 'personal_importRawKey',\n        params: [utils_1.bufferToHex(privateKey), password],\n        format: address_1.Address.fromString\n      };\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(tx, password) {\n      return {\n        method: 'personal_sendTransaction',\n        params: [_objectSpread({}, formatters_1.toRawTransactionRequest(tx), {\n          condition: tx.condition\n        }), password],\n        format: identity()\n      };\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(tx, password) {\n      return {\n        method: 'personal_signTransaction',\n        params: [_objectSpread({}, formatters_1.toRawTransactionRequest(tx), {\n          condition: tx.condition\n        }), password],\n        format: identity()\n      };\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(message, address, password) {\n      return {\n        method: 'personal_sign',\n        params: [formatters_1.inputSignFormatter(message), address.toString().toLowerCase(), password],\n        format: identity()\n      };\n    }\n  }, {\n    key: \"ecRecover\",\n    value: function ecRecover(message, signedData) {\n      return {\n        method: 'personal_ecRecover',\n        params: [formatters_1.inputSignFormatter(message), signedData],\n        format: address_1.Address.fromString\n      };\n    }\n  }]);\n\n  return PersonalRequestPayloads;\n}();\n\nexports.PersonalRequestPayloads = PersonalRequestPayloads;","map":null,"metadata":{},"sourceType":"script"}