{"ast":null,"code":"import { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getData as getWallet } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { getItemId } from 'modules/location/selectors';\nimport { getCollection } from 'modules/collection/selectors';\nimport { getItem, getLoading, hasViewAndEditRights } from 'modules/item/selectors';\nimport { openModal } from 'modules/modal/actions';\nimport { FETCH_ITEMS_REQUEST, DELETE_ITEM_REQUEST, deleteItemRequest } from 'modules/item/actions';\nimport ItemDetailPage from './ItemDetailPage';\n\nvar mapState = function mapState(state) {\n  var itemId = getItemId(state);\n  var item = itemId ? getItem(state, itemId) : null;\n  var wallet = getWallet(state);\n  var collection = item && item.collectionId ? getCollection(state, item.collectionId) : null;\n  return {\n    itemId: itemId,\n    wallet: wallet,\n    item: item,\n    collection: collection,\n    isLoading: isLoadingType(getLoading(state), FETCH_ITEMS_REQUEST) || isLoadingType(getLoading(state), DELETE_ITEM_REQUEST),\n    hasAccess: item !== null && hasViewAndEditRights(state, wallet.address, collection, item)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onNavigate: function onNavigate(path) {\n      return dispatch(push(path));\n    },\n    onDelete: function onDelete(item) {\n      return dispatch(deleteItemRequest(item));\n    },\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(ItemDetailPage);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/ItemDetailPage/ItemDetailPage.container.ts"],"names":["connect","push","isLoadingType","getData","getWallet","getItemId","getCollection","getItem","getLoading","hasViewAndEditRights","openModal","FETCH_ITEMS_REQUEST","DELETE_ITEM_REQUEST","deleteItemRequest","ItemDetailPage","mapState","state","itemId","item","wallet","collection","collectionId","isLoading","hasAccess","address","mapDispatch","dispatch","onNavigate","path","onDelete","onOpenModal","name","metadata"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,OAAO,IAAIC,SAApB,QAAqC,kDAArC;AAEA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,oBAA9B,QAA0D,wBAA1D;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,iBAAnD,QAA4E,sBAA5E;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAqC;AACpD,MAAMC,MAAM,GAAGZ,SAAS,CAACW,KAAD,CAAxB;AACA,MAAME,IAAI,GAAGD,MAAM,GAAGV,OAAO,CAACS,KAAD,EAAQC,MAAR,CAAV,GAA4B,IAA/C;AACA,MAAME,MAAM,GAAGf,SAAS,CAACY,KAAD,CAAxB;AACA,MAAMI,UAAU,GAAGF,IAAI,IAAIA,IAAI,CAACG,YAAb,GAA4Bf,aAAa,CAACU,KAAD,EAAQE,IAAI,CAACG,YAAb,CAAzC,GAAsE,IAAzF;AAEA,SAAO;AACLJ,IAAAA,MAAM,EAANA,MADK;AAELE,IAAAA,MAAM,EAANA,MAFK;AAGLD,IAAAA,IAAI,EAAJA,IAHK;AAILE,IAAAA,UAAU,EAAVA,UAJK;AAKLE,IAAAA,SAAS,EAAEpB,aAAa,CAACM,UAAU,CAACQ,KAAD,CAAX,EAAoBL,mBAApB,CAAb,IAAyDT,aAAa,CAACM,UAAU,CAACQ,KAAD,CAAX,EAAoBJ,mBAApB,CAL5E;AAMLW,IAAAA,SAAS,EAAEL,IAAI,KAAK,IAAT,IAAiBT,oBAAoB,CAACO,KAAD,EAAQG,MAAM,CAACK,OAAf,EAAwBJ,UAAxB,EAAoCF,IAApC;AAN3C,GAAP;AAQD,CAdD;;AAgBA,IAAMO,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,UAAU,EAAE,oBAAAC,IAAI;AAAA,aAAIF,QAAQ,CAACzB,IAAI,CAAC2B,IAAD,CAAL,CAAZ;AAAA,KADgD;AAEhEC,IAAAA,QAAQ,EAAE,kBAAAX,IAAI;AAAA,aAAIQ,QAAQ,CAACb,iBAAiB,CAACK,IAAD,CAAlB,CAAZ;AAAA,KAFkD;AAGhEY,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,QAAP;AAAA,aAAoBN,QAAQ,CAAChB,SAAS,CAACqB,IAAD,EAAOC,QAAP,CAAV,CAA5B;AAAA;AAHmD,GAA9C;AAAA,CAApB;;AAMA,eAAehC,OAAO,CAACe,QAAD,EAAWU,WAAX,CAAP,CAA+BX,cAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { getData as getWallet } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { RootState } from 'modules/common/types'\nimport { getItemId } from 'modules/location/selectors'\nimport { getCollection } from 'modules/collection/selectors'\nimport { getItem, getLoading, hasViewAndEditRights } from 'modules/item/selectors'\nimport { openModal } from 'modules/modal/actions'\nimport { FETCH_ITEMS_REQUEST, DELETE_ITEM_REQUEST, deleteItemRequest } from 'modules/item/actions'\nimport { MapStateProps, MapDispatchProps, MapDispatch } from './ItemDetailPage.types'\nimport ItemDetailPage from './ItemDetailPage'\n\nconst mapState = (state: RootState): MapStateProps => {\n  const itemId = getItemId(state)\n  const item = itemId ? getItem(state, itemId) : null\n  const wallet = getWallet(state)!\n  const collection = item && item.collectionId ? getCollection(state, item.collectionId) : null\n\n  return {\n    itemId,\n    wallet,\n    item,\n    collection,\n    isLoading: isLoadingType(getLoading(state), FETCH_ITEMS_REQUEST) || isLoadingType(getLoading(state), DELETE_ITEM_REQUEST),\n    hasAccess: item !== null && hasViewAndEditRights(state, wallet.address, collection, item)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onNavigate: path => dispatch(push(path)),\n  onDelete: item => dispatch(deleteItemRequest(item)),\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata))\n})\n\nexport default connect(mapState, mapDispatch)(ItemDetailPage)\n"]},"metadata":{},"sourceType":"module"}