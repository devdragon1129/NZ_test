{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/vrMultiviewToSingleview.fragment\";\nimport \"../Engines/Extensions/engine.multiview\";\n/**\r\n * VRMultiviewToSingleview used to convert multiview texture arrays to standard textures for scenarios such as webVR\r\n * This will not be used for webXR as it supports displaying texture arrays directly\r\n */\n\nvar VRMultiviewToSingleviewPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(VRMultiviewToSingleviewPostProcess, _super);\n  /**\r\n   * Initializes a VRMultiviewToSingleview\r\n   * @param name name of the post process\r\n   * @param camera camera to be applied to\r\n   * @param scaleFactor scaling factor to the size of the output texture\r\n   */\n\n\n  function VRMultiviewToSingleviewPostProcess(name, camera, scaleFactor) {\n    var _this = _super.call(this, name, \"vrMultiviewToSingleview\", [\"imageIndex\"], [\"multiviewSampler\"], scaleFactor, camera, Texture.BILINEAR_SAMPLINGMODE) || this;\n\n    _this.onSizeChangedObservable.add(function () {});\n\n    _this.onApplyObservable.add(function (effect) {\n      if (camera._scene.activeCamera && camera._scene.activeCamera.isLeftCamera) {\n        effect.setInt(\"imageIndex\", 0);\n      } else {\n        effect.setInt(\"imageIndex\", 1);\n      }\n\n      effect.setTexture(\"multiviewSampler\", camera._multiviewTexture);\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"VRMultiviewToSingleviewPostProcess\" string\r\n   */\n\n\n  VRMultiviewToSingleviewPostProcess.prototype.getClassName = function () {\n    return \"VRMultiviewToSingleviewPostProcess\";\n  };\n\n  return VRMultiviewToSingleviewPostProcess;\n}(PostProcess);\n\nexport { VRMultiviewToSingleviewPostProcess };","map":null,"metadata":{},"sourceType":"module"}