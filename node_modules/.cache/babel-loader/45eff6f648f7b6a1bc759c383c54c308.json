{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { BlurPostProcess } from \"./blurPostProcess\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize } from '../Misc/decorators';\n/**\r\n * The DepthOfFieldBlurPostProcess applied a blur in a give direction.\r\n * This blur differs from the standard BlurPostProcess as it attempts to avoid blurring pixels\r\n * based on samples that have a large difference in distance than the center pixel.\r\n * See section 2.6.2 http://fileadmin.cs.lth.se/cs/education/edan35/lectures/12dof.pdf\r\n */\n\nvar DepthOfFieldBlurPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(DepthOfFieldBlurPostProcess, _super);\n  /**\r\n   * Creates a new instance CircleOfConfusionPostProcess\r\n   * @param name The name of the effect.\r\n   * @param scene The scene the effect belongs to.\r\n   * @param direction The direction the blur should be applied.\r\n   * @param kernel The size of the kernel used to blur.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param circleOfConfusion The circle of confusion + depth map to be used to avoid blurring accross edges\r\n   * @param imageToBlur The image to apply the blur to (default: Current rendered frame)\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function DepthOfFieldBlurPostProcess(name, scene, direction, kernel, options, camera, circleOfConfusion, imageToBlur, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (imageToBlur === void 0) {\n      imageToBlur = null;\n    }\n\n    if (samplingMode === void 0) {\n      samplingMode = Texture.BILINEAR_SAMPLINGMODE;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, direction, kernel, options, camera, samplingMode = 2, engine, reusable, textureType = 0, \"#define DOF 1\\r\\n\", blockCompilation) || this;\n\n    _this.direction = direction;\n\n    _this.onApplyObservable.add(function (effect) {\n      if (imageToBlur != null) {\n        effect.setTextureFromPostProcess(\"textureSampler\", imageToBlur);\n      }\n\n      effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\n\n      if (scene.activeCamera) {\n        effect.setFloat2('cameraMinMaxZ', scene.activeCamera.minZ, scene.activeCamera.maxZ);\n      }\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"DepthOfFieldBlurPostProcess\" string\r\n   */\n\n\n  DepthOfFieldBlurPostProcess.prototype.getClassName = function () {\n    return \"DepthOfFieldBlurPostProcess\";\n  };\n\n  __decorate([serialize()], DepthOfFieldBlurPostProcess.prototype, \"direction\", void 0);\n\n  return DepthOfFieldBlurPostProcess;\n}(BlurPostProcess);\n\nexport { DepthOfFieldBlurPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.DepthOfFieldBlurPostProcess\"] = DepthOfFieldBlurPostProcess;","map":null,"metadata":{},"sourceType":"module"}