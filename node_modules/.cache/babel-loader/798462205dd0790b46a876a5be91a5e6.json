{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(statsSaga);\n\nimport { call, put, takeEvery } from 'redux-saga/effects';\nimport { analytics } from 'lib/api/analytics';\nimport { fetchWeeklySceneStatsFailure, fetchWeeklySceneStatsSuccess, FETCH_WEEKLY_SCENE_STATS_REQUEST } from './action';\nexport function statsSaga() {\n  var _marked, handleFetchSceneStatsRequest;\n\n  return _regeneratorRuntime.wrap(function statsSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          handleFetchSceneStatsRequest = function _handleFetchSceneStat(action) {\n            var base, stats;\n            return _regeneratorRuntime.wrap(function handleFetchSceneStatsRequest$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    base = action.payload.base;\n                    _context.prev = 1;\n                    _context.next = 4;\n                    return call(function () {\n                      return analytics.fetchWeeklyStats(base);\n                    });\n\n                  case 4:\n                    stats = _context.sent;\n                    _context.next = 7;\n                    return put(fetchWeeklySceneStatsSuccess(base, stats));\n\n                  case 7:\n                    _context.next = 13;\n                    break;\n\n                  case 9:\n                    _context.prev = 9;\n                    _context.t0 = _context[\"catch\"](1);\n                    _context.next = 13;\n                    return put(fetchWeeklySceneStatsFailure(base, _context.t0.message));\n\n                  case 13:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _marked, null, [[1, 9]]);\n          };\n\n          _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchSceneStatsRequest);\n          _context2.next = 4;\n          return takeEvery(FETCH_WEEKLY_SCENE_STATS_REQUEST, handleFetchSceneStatsRequest);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/stats/sagas.ts"],"names":["statsSaga","call","put","takeEvery","analytics","fetchWeeklySceneStatsFailure","fetchWeeklySceneStatsSuccess","FETCH_WEEKLY_SCENE_STATS_REQUEST","handleFetchSceneStatsRequest","action","base","payload","fetchWeeklyStats","stats","message"],"mappings":";;qDAUiBA,S;;AAVjB,SAASC,IAAT,EAAeC,GAAf,EAAoBC,SAApB,QAAqC,oBAArC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SACEC,4BADF,EAGEC,4BAHF,EAIEC,gCAJF,QAKO,UALP;AAQA,OAAO,SAAUP,SAAV;AAAA,eAGKQ,4BAHL;;AAAA;AAAA;AAAA;AAAA;AAGKA,UAAAA,4BAHL,kCAGkCC,MAHlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAIKC,oBAAAA,IAJL,GAIcD,MAAM,CAACE,OAJrB,CAIKD,IAJL;AAAA;AAAA;AAM0B,2BAAMT,IAAI,CAAC;AAAA,6BAAMG,SAAS,CAACQ,gBAAV,CAA2BF,IAA3B,CAAN;AAAA,qBAAD,CAAV;;AAN1B;AAMKG,oBAAAA,KANL;AAAA;AAOD,2BAAMX,GAAG,CAACI,4BAA4B,CAACI,IAAD,EAAOG,KAAP,CAA7B,CAAT;;AAPC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASD,2BAAMX,GAAG,CAACG,4BAA4B,CAACK,IAAD,EAAO,YAAMI,OAAb,CAA7B,CAAT;;AATC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,0DAGKN,4BAHL;AAAA;AACL,iBAAML,SAAS,CAACI,gCAAD,EAAmCC,4BAAnC,CAAf;;AADK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { call, put, takeEvery } from 'redux-saga/effects'\nimport { analytics } from 'lib/api/analytics'\nimport {\n  fetchWeeklySceneStatsFailure,\n  FetchWeeklySceneStatsRequestAction,\n  fetchWeeklySceneStatsSuccess,\n  FETCH_WEEKLY_SCENE_STATS_REQUEST\n} from './action'\nimport { WeeklyStats } from './types'\n\nexport function* statsSaga() {\n  yield takeEvery(FETCH_WEEKLY_SCENE_STATS_REQUEST, handleFetchSceneStatsRequest)\n\n  function* handleFetchSceneStatsRequest(action: FetchWeeklySceneStatsRequestAction) {\n    const { base } = action.payload\n    try {\n      const stats: WeeklyStats = yield call(() => analytics.fetchWeeklyStats(base))\n      yield put(fetchWeeklySceneStatsSuccess(base, stats))\n    } catch (error) {\n      yield put(fetchWeeklySceneStatsFailure(base, error.message))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}