{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStorageMiddleware = void 0;\n\nvar storage = __importStar(require(\"redux-persistence\"));\n\nvar redux_persistence_engine_localstorage_1 = __importDefault(require(\"redux-persistence-engine-localstorage\"));\n\nvar redux_storage_decorator_filter_1 = __importDefault(require(\"redux-storage-decorator-filter\"));\n\nvar localStorage_1 = require(\"../../lib/localStorage\");\n\nvar disabledMiddleware_1 = require(\"../../lib/disabledMiddleware\");\n\nvar actions_1 = require(\"./actions\");\n\nvar actions_2 = require(\"../translation/actions\");\n\nvar actions_3 = require(\"../transaction/actions\");\n\nvar disabledLoad = function disabledLoad(store) {\n  return setTimeout(function () {\n    return store.dispatch({\n      type: actions_1.STORAGE_LOAD,\n      payload: {}\n    });\n  });\n};\n\nfunction createStorageMiddleware(options) {\n  var storageKey = options.storageKey,\n      _options$migrations = options.migrations,\n      migrations = _options$migrations === void 0 ? {} : _options$migrations,\n      _options$paths = options.paths,\n      paths = _options$paths === void 0 ? [] : _options$paths,\n      _options$actions = options.actions,\n      actions = _options$actions === void 0 ? [] : _options$actions;\n\n  if (!localStorage_1.hasLocalStorage()) {\n    return {\n      storageMiddleware: disabledMiddleware_1.disabledMiddleware,\n      loadStorageMiddleware: disabledLoad\n    };\n  }\n\n  var localStorageState = localStorage_1.migrateStorage(storageKey, migrations);\n  var setItemFailure = false;\n\n  try {\n    localStorage.setItem(storageKey, JSON.stringify(localStorageState));\n  } catch (e) {\n    setItemFailure = true;\n    console.warn(e.message);\n  }\n\n  var storageEngine = redux_storage_decorator_filter_1.default(redux_persistence_engine_localstorage_1.default(storageKey), [['translation', 'locale'], 'transaction', ['storage', 'version']].concat(_toConsumableArray(paths)));\n  var whitelist = new Set([actions_2.CHANGE_LOCALE, actions_2.FETCH_TRANSLATIONS_SUCCESS, actions_3.FETCH_TRANSACTION_REQUEST, actions_3.FETCH_TRANSACTION_SUCCESS, actions_3.FETCH_TRANSACTION_FAILURE, actions_3.UPDATE_TRANSACTION_STATUS, actions_3.UPDATE_TRANSACTION_NONCE, actions_3.REPLACE_TRANSACTION_SUCCESS, actions_3.FIX_REVERTED_TRANSACTION, actions_3.CLEAR_TRANSACTIONS, actions_3.CLEAR_TRANSACTION].concat(_toConsumableArray(actions)));\n  var storageMiddleware = storage.createMiddleware(storageEngine, {\n    filterAction: function filterAction(action) {\n      return whitelist.has(action.type);\n    },\n    transform: options.transform,\n    onError: options.onError\n  });\n\n  var load = function load(store) {\n    if (setItemFailure) {\n      var unsubscribe = store.subscribe(function () {\n        var state = store.getState();\n\n        if (state.storage.loading === false) {\n          unsubscribe();\n          store.dispatch({\n            type: storage.LOAD,\n            payload: localStorageState\n          });\n        }\n      });\n    }\n\n    storage.createLoader(storageEngine)(store);\n  };\n\n  return {\n    storageMiddleware: storageMiddleware,\n    loadStorageMiddleware: load\n  };\n}\n\nexports.createStorageMiddleware = createStorageMiddleware;","map":null,"metadata":{},"sourceType":"script"}