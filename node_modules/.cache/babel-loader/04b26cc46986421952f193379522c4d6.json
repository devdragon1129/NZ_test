{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { Observable } from \"../../Misc/observable\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\nimport { Tools } from \"../../Misc/tools\";\n/**\r\n * Base class for mouse wheel input..\r\n * See FollowCameraMouseWheelInput in src/Cameras/Inputs/freeCameraMouseWheelInput.ts\r\n * for example usage.\r\n */\n\nvar BaseCameraMouseWheelInput =\n/** @class */\nfunction () {\n  function BaseCameraMouseWheelInput() {\n    /**\r\n     * How fast is the camera moves in relation to X axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\n    this.wheelPrecisionX = 3.0;\n    /**\r\n     * How fast is the camera moves in relation to Y axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\n\n    this.wheelPrecisionY = 3.0;\n    /**\r\n     * How fast is the camera moves in relation to Z axis mouseWheel events.\r\n     * Use negative value to reverse direction.\r\n     */\n\n    this.wheelPrecisionZ = 3.0;\n    /**\r\n     * Observable for when a mouse wheel move event occurs.\r\n     */\n\n    this.onChangedObservable = new Observable();\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the X axis.\r\n     * Should be zero-ed when read.\r\n     */\n\n    this._wheelDeltaX = 0;\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the Y axis.\r\n     * Should be zero-ed when read.\r\n     */\n\n    this._wheelDeltaY = 0;\n    /**\r\n     * Incremental value of multiple mouse wheel movements of the Z axis.\r\n     * Should be zero-ed when read.\r\n     */\n\n    this._wheelDeltaZ = 0;\n    /**\r\n     * Firefox uses a different scheme to report scroll distances to other\r\n     * browsers. Rather than use complicated methods to calculate the exact\r\n     * multiple we need to apply, let's just cheat and use a constant.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode\r\n     * https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\r\n     */\n\n    this._ffMultiplier = 12;\n    /**\r\n     * Different event attributes for wheel data fall into a few set ranges.\r\n     * Some relevant but dated date here:\r\n     * https://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers\r\n     */\n\n    this._normalize = 120;\n  }\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   * @param noPreventDefault Defines whether event caught by the controls\r\n   *   should call preventdefault().\r\n   *   (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  BaseCameraMouseWheelInput.prototype.attachControl = function (noPreventDefault) {\n    var _this = this;\n\n    noPreventDefault = Tools.BackCompatCameraNoPreventDefault(arguments);\n\n    this._wheel = function (pointer) {\n      // sanity check - this should be a PointerWheel event.\n      if (pointer.type !== PointerEventTypes.POINTERWHEEL) {\n        return;\n      }\n\n      var event = pointer.event;\n      var platformScale = event.deltaMode === WheelEvent.DOM_DELTA_LINE ? _this._ffMultiplier : 1;\n\n      if (event.deltaY !== undefined) {\n        // Most recent browsers versions have delta properties.\n        // Firefox >= v17  (Has WebGL >= v4)\n        // Chrome >=  v31  (Has WebGL >= v8)\n        // Edge >=    v12  (Has WebGl >= v12)\n        // https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent\n        _this._wheelDeltaX += _this.wheelPrecisionX * platformScale * event.deltaX / _this._normalize;\n        _this._wheelDeltaY -= _this.wheelPrecisionY * platformScale * event.deltaY / _this._normalize;\n        _this._wheelDeltaZ += _this.wheelPrecisionZ * platformScale * event.deltaZ / _this._normalize;\n      } else if (event.wheelDeltaY !== undefined) {\n        // Unsure whether these catch anything more. Documentation\n        // online is contradictory.\n        _this._wheelDeltaX += _this.wheelPrecisionX * platformScale * event.wheelDeltaX / _this._normalize;\n        _this._wheelDeltaY -= _this.wheelPrecisionY * platformScale * event.wheelDeltaY / _this._normalize;\n        _this._wheelDeltaZ += _this.wheelPrecisionZ * platformScale * event.wheelDeltaZ / _this._normalize;\n      } else if (event.wheelDelta) {\n        // IE >= v9   (Has WebGL >= v11)\n        // Maybe others?\n        _this._wheelDeltaY -= _this.wheelPrecisionY * event.wheelDelta / _this._normalize;\n      }\n\n      if (event.preventDefault) {\n        if (!noPreventDefault) {\n          event.preventDefault();\n        }\n      }\n    };\n\n    this._observer = this.camera.getScene().onPointerObservable.add(this._wheel, PointerEventTypes.POINTERWHEEL);\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  BaseCameraMouseWheelInput.prototype.detachControl = function (ignored) {\n    if (this._observer) {\n      this.camera.getScene().onPointerObservable.remove(this._observer);\n      this._observer = null;\n      this._wheel = null;\n    }\n\n    if (this.onChangedObservable) {\n      this.onChangedObservable.clear();\n    }\n  };\n  /**\r\n   * Called for each rendered frame.\r\n   */\n\n\n  BaseCameraMouseWheelInput.prototype.checkInputs = function () {\n    this.onChangedObservable.notifyObservers({\n      wheelDeltaX: this._wheelDeltaX,\n      wheelDeltaY: this._wheelDeltaY,\n      wheelDeltaZ: this._wheelDeltaZ\n    }); // Clear deltas.\n\n    this._wheelDeltaX = 0;\n    this._wheelDeltaY = 0;\n    this._wheelDeltaZ = 0;\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  BaseCameraMouseWheelInput.prototype.getClassName = function () {\n    return \"BaseCameraMouseWheelInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  BaseCameraMouseWheelInput.prototype.getSimpleName = function () {\n    return \"mousewheel\";\n  };\n\n  __decorate([serialize()], BaseCameraMouseWheelInput.prototype, \"wheelPrecisionX\", void 0);\n\n  __decorate([serialize()], BaseCameraMouseWheelInput.prototype, \"wheelPrecisionY\", void 0);\n\n  __decorate([serialize()], BaseCameraMouseWheelInput.prototype, \"wheelPrecisionZ\", void 0);\n\n  return BaseCameraMouseWheelInput;\n}();\n\nexport { BaseCameraMouseWheelInput };","map":null,"metadata":{},"sourceType":"module"}