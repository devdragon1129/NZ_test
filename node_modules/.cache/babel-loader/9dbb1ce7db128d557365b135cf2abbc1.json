{"ast":null,"code":"import { connect } from 'react-redux';\nimport { isLoading, getError, isUploadingRecording } from 'modules/deployment/selectors';\nimport { deployToPoolRequest } from 'modules/deployment/actions';\nimport { getCurrentProject } from 'modules/project/selectors';\nimport { getMedia, isRecording, getProgress } from 'modules/media/selectors';\nimport { openModal } from 'modules/modal/actions';\nimport { isReady } from 'modules/editor/selectors';\nimport { isLoggedIn } from 'modules/identity/selectors';\nimport DeployToLand from './DeployToPool';\n\nvar mapState = function mapState(state) {\n  return {\n    error: getError(state),\n    project: getCurrentProject(state),\n    isLoading: isLoading(state),\n    isReady: isReady(state),\n    progress: getProgress(state),\n    isRecording: isRecording(state),\n    isUploadingRecording: isUploadingRecording(state),\n    media: getMedia(state),\n    isLoggedIn: isLoggedIn(state)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onDeployToPool: function onDeployToPool(projectId) {\n      var additionalInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      return dispatch(deployToPoolRequest(projectId, additionalInfo));\n    },\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(DeployToLand);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/DeployModal/DeployToPool/DeployToPool.container.ts"],"names":["connect","isLoading","getError","isUploadingRecording","deployToPoolRequest","getCurrentProject","getMedia","isRecording","getProgress","openModal","isReady","isLoggedIn","DeployToLand","mapState","state","error","project","progress","media","mapDispatch","dispatch","onDeployToPool","projectId","additionalInfo","onOpenModal","name","metadata"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AAEA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,oBAA9B,QAA0D,8BAA1D;AACA,SAASC,mBAAT,QAAoC,4BAApC;AACA,SAASC,iBAAT,QAAkC,2BAAlC;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,WAAhC,QAAmD,yBAAnD;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AAEA,SAASC,UAAT,QAA2B,4BAA3B;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAsC;AACrDC,IAAAA,KAAK,EAAEb,QAAQ,CAACY,KAAD,CADsC;AAErDE,IAAAA,OAAO,EAAEX,iBAAiB,CAACS,KAAD,CAF2B;AAGrDb,IAAAA,SAAS,EAAEA,SAAS,CAACa,KAAD,CAHiC;AAIrDJ,IAAAA,OAAO,EAAEA,OAAO,CAACI,KAAD,CAJqC;AAKrDG,IAAAA,QAAQ,EAAET,WAAW,CAACM,KAAD,CALgC;AAMrDP,IAAAA,WAAW,EAAEA,WAAW,CAACO,KAAD,CAN6B;AAOrDX,IAAAA,oBAAoB,EAAEA,oBAAoB,CAACW,KAAD,CAPW;AAQrDI,IAAAA,KAAK,EAAEZ,QAAQ,CAACQ,KAAD,CARsC;AASrDH,IAAAA,UAAU,EAAEA,UAAU,CAACG,KAAD;AAT+B,GAAtC;AAAA,CAAjB;;AAYA,IAAMK,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,cAAc,EAAE,wBAACC,SAAD;AAAA,UAAoBC,cAApB,uEAA4E,IAA5E;AAAA,aACdH,QAAQ,CAAChB,mBAAmB,CAACkB,SAAD,EAAYC,cAAZ,CAApB,CADM;AAAA,KADgD;AAGhEC,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,QAAP;AAAA,aAAoBN,QAAQ,CAACX,SAAS,CAACgB,IAAD,EAAOC,QAAP,CAAV,CAA5B;AAAA;AAHmD,GAA9C;AAAA,CAApB;;AAMA,eAAe1B,OAAO,CAACa,QAAD,EAAWM,WAAX,CAAP,CAA+BP,YAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { RootState } from 'modules/common/types'\nimport { isLoading, getError, isUploadingRecording } from 'modules/deployment/selectors'\nimport { deployToPoolRequest } from 'modules/deployment/actions'\nimport { getCurrentProject } from 'modules/project/selectors'\nimport { getMedia, isRecording, getProgress } from 'modules/media/selectors'\nimport { openModal } from 'modules/modal/actions'\nimport { isReady } from 'modules/editor/selectors'\nimport { PoolDeploymentAdditionalFields } from 'lib/api/builder'\nimport { isLoggedIn } from 'modules/identity/selectors'\nimport { MapStateProps, MapDispatchProps, MapDispatch } from './DeployToPool.types'\nimport DeployToLand from './DeployToPool'\n\nconst mapState = (state: RootState): MapStateProps => ({\n  error: getError(state),\n  project: getCurrentProject(state),\n  isLoading: isLoading(state),\n  isReady: isReady(state),\n  progress: getProgress(state),\n  isRecording: isRecording(state),\n  isUploadingRecording: isUploadingRecording(state),\n  media: getMedia(state),\n  isLoggedIn: isLoggedIn(state)\n})\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onDeployToPool: (projectId: string, additionalInfo: PoolDeploymentAdditionalFields | null = null) =>\n    dispatch(deployToPoolRequest(projectId, additionalInfo)),\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata))\n})\n\nexport default connect(mapState, mapDispatch)(DeployToLand)\n"]},"metadata":{},"sourceType":"module"}