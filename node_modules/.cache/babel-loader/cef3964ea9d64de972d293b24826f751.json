{"ast":null,"code":"/**\r\n * Helper class to push actions to a pool of workers.\r\n */\nvar WorkerPool =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   * @param workers Array of workers to use for actions\r\n   */\n  function WorkerPool(workers) {\n    this._pendingActions = new Array();\n    this._workerInfos = workers.map(function (worker) {\n      return {\n        worker: worker,\n        active: false\n      };\n    });\n  }\n  /**\r\n   * Terminates all workers and clears any pending actions.\r\n   */\n\n\n  WorkerPool.prototype.dispose = function () {\n    for (var _i = 0, _a = this._workerInfos; _i < _a.length; _i++) {\n      var workerInfo = _a[_i];\n      workerInfo.worker.terminate();\n    }\n\n    this._workerInfos = [];\n    this._pendingActions = [];\n  };\n  /**\r\n   * Pushes an action to the worker pool. If all the workers are active, the action will be\r\n   * pended until a worker has completed its action.\r\n   * @param action The action to perform. Call onComplete when the action is complete.\r\n   */\n\n\n  WorkerPool.prototype.push = function (action) {\n    for (var _i = 0, _a = this._workerInfos; _i < _a.length; _i++) {\n      var workerInfo = _a[_i];\n\n      if (!workerInfo.active) {\n        this._execute(workerInfo, action);\n\n        return;\n      }\n    }\n\n    this._pendingActions.push(action);\n  };\n\n  WorkerPool.prototype._execute = function (workerInfo, action) {\n    var _this = this;\n\n    workerInfo.active = true;\n    action(workerInfo.worker, function () {\n      workerInfo.active = false;\n\n      var nextAction = _this._pendingActions.shift();\n\n      if (nextAction) {\n        _this._execute(workerInfo, nextAction);\n      }\n    });\n  };\n\n  return WorkerPool;\n}();\n\nexport { WorkerPool };","map":null,"metadata":{},"sourceType":"module"}