{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateAdditionalItems = void 0;\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar util_1 = require(\"../../compile/util\");\n\nvar error = {\n  message: function message(_ref) {\n    var len = _ref.params.len;\n    return (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must NOT have more than \", \" items\"])), len);\n  },\n  params: function params(_ref2) {\n    var len = _ref2.params.len;\n    return (0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{limit: \", \"}\"])), len);\n  }\n};\nvar def = {\n  keyword: \"additionalItems\",\n  type: \"array\",\n  schemaType: [\"boolean\", \"object\"],\n  before: \"uniqueItems\",\n  error: error,\n  code: function code(cxt) {\n    var parentSchema = cxt.parentSchema,\n        it = cxt.it;\n    var items = parentSchema.items;\n\n    if (!Array.isArray(items)) {\n      (0, util_1.checkStrictMode)(it, '\"additionalItems\" is ignored when \"items\" is not an array of schemas');\n      return;\n    }\n\n    validateAdditionalItems(cxt, items);\n  }\n};\n\nfunction validateAdditionalItems(cxt, items) {\n  var gen = cxt.gen,\n      schema = cxt.schema,\n      data = cxt.data,\n      keyword = cxt.keyword,\n      it = cxt.it;\n  it.items = true;\n  var len = gen.const(\"len\", (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \".length\"])), data));\n\n  if (schema === false) {\n    cxt.setParams({\n      len: items.length\n    });\n    cxt.pass((0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \" <= \", \"\"])), len, items.length));\n  } else if (typeof schema == \"object\" && !(0, util_1.alwaysValidSchema)(it, schema)) {\n    var valid = gen.var(\"valid\", (0, codegen_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \" <= \", \"\"])), len, items.length)); // TODO var\n\n    gen.if((0, codegen_1.not)(valid), function () {\n      return validateItems(valid);\n    });\n    cxt.ok(valid);\n  }\n\n  function validateItems(valid) {\n    gen.forRange(\"i\", items.length, len, function (i) {\n      cxt.subschema({\n        keyword: keyword,\n        dataProp: i,\n        dataPropType: util_1.Type.Num\n      }, valid);\n      if (!it.allErrors) gen.if((0, codegen_1.not)(valid), function () {\n        return gen.break();\n      });\n    });\n  }\n}\n\nexports.validateAdditionalItems = validateAdditionalItems;\nexports.default = def;","map":null,"metadata":{},"sourceType":"script"}