{"ast":null,"code":"import { TGATools } from \"../../../Misc/tga\";\nimport { Engine } from \"../../../Engines/engine\";\nimport { StringTools } from '../../../Misc/stringTools';\n/**\r\n * Implementation of the TGA Texture Loader.\r\n * @hidden\r\n */\n\nvar _TGATextureLoader =\n/** @class */\nfunction () {\n  function _TGATextureLoader() {\n    /**\r\n     * Defines wether the loader supports cascade loading the different faces.\r\n     */\n    this.supportCascades = false;\n  }\n  /**\r\n   * This returns if the loader support the current file information.\r\n   * @param extension defines the file extension of the file being loaded\r\n   * @returns true if the loader can load the specified file\r\n   */\n\n\n  _TGATextureLoader.prototype.canLoad = function (extension) {\n    return StringTools.EndsWith(extension, \".tga\");\n  };\n  /**\r\n   * Uploads the cube texture data to the WebGL texture. It has already been bound.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param createPolynomials will be true if polynomials have been requested\r\n   * @param onLoad defines the callback to trigger once the texture is ready\r\n   * @param onError defines the callback to trigger in case of error\r\n   */\n\n\n  _TGATextureLoader.prototype.loadCubeData = function (data, texture, createPolynomials, onLoad, onError) {\n    throw \".env not supported in Cube.\";\n  };\n  /**\r\n   * Uploads the 2D texture data to the WebGL texture. It has already been bound once in the callback.\r\n   * @param data contains the texture data\r\n   * @param texture defines the BabylonJS internal texture\r\n   * @param callback defines the method to call once ready to upload\r\n   */\n\n\n  _TGATextureLoader.prototype.loadData = function (data, texture, callback) {\n    var bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    var header = TGATools.GetTGAHeader(bytes);\n    callback(header.width, header.height, texture.generateMipMaps, false, function () {\n      TGATools.UploadContent(texture, bytes);\n    });\n  };\n\n  return _TGATextureLoader;\n}();\n\nexport { _TGATextureLoader }; // Register the loader.\n\nEngine._TextureLoaders.push(new _TGATextureLoader());","map":null,"metadata":{},"sourceType":"module"}