{"ast":null,"code":"import _defineProperty from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { createSelector } from 'reselect';\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { COLLECTIBLE_ASSET_PACK_ID } from 'modules/ui/sidebar/utils';\nimport { getData as getAssets } from 'modules/asset/selectors';\nexport var getState = function getState(state) {\n  return state.assetPack;\n};\nexport var getData = createSelector(getState, getAddress, function (state, address) {\n  var assetPacks = state.data;\n  assetPacks[COLLECTIBLE_ASSET_PACK_ID] = {\n    id: COLLECTIBLE_ASSET_PACK_ID,\n    title: 'Collectibles',\n    thumbnail: \"\".concat(process.env.PUBLIC_URL, \"/images/nft-icon.png\"),\n    ethAddress: address || null,\n    assets: []\n  };\n  return assetPacks;\n});\nexport var getError = function getError(state) {\n  return getState(state).error;\n};\nexport var getLoading = function getLoading(state) {\n  return getState(state).loading;\n};\nexport var isLoading = function isLoading(state) {\n  return getLoading(state).length > 0;\n};\nexport var getProgress = function getProgress(state) {\n  return getState(state).progress;\n};\nexport var getFullAssetPacks = createSelector(getData, getAssets, function (assetPacks, assets) {\n  return Object.keys(assetPacks).reduce(function (acc, id) {\n    return _objectSpread({}, acc, _defineProperty({}, id, _objectSpread({}, assetPacks[id], {\n      assets: assetPacks[id].assets.map(function (id) {\n        return assets[id];\n      })\n    })));\n  }, {});\n});","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/assetPack/selectors.ts"],"names":["createSelector","getAddress","COLLECTIBLE_ASSET_PACK_ID","getData","getAssets","getState","state","assetPack","address","assetPacks","data","id","title","thumbnail","process","env","PUBLIC_URL","ethAddress","assets","getError","error","getLoading","loading","isLoading","length","getProgress","progress","getFullAssetPacks","Object","keys","reduce","acc","map"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,SAASC,UAAT,QAA2B,kDAA3B;AAEA,SAASC,yBAAT,QAA0C,0BAA1C;AAGA,SAASC,OAAO,IAAIC,SAApB,QAAqC,yBAArC;AAGA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAsBA,KAAK,CAACC,SAA5B;AAAA,CAAjB;AACP,OAAO,IAAMJ,OAAO,GAAGH,cAAc,CACnCK,QADmC,EAEnCJ,UAFmC,EAGnC,UAACK,KAAD,EAAQE,OAAR,EAAoB;AAClB,MAAMC,UAAU,GAAGH,KAAK,CAACI,IAAzB;AACAD,EAAAA,UAAU,CAACP,yBAAD,CAAV,GAAwC;AACtCS,IAAAA,EAAE,EAAET,yBADkC;AAEtCU,IAAAA,KAAK,EAAE,cAF+B;AAGtCC,IAAAA,SAAS,YAAKC,OAAO,CAACC,GAAR,CAAYC,UAAjB,yBAH6B;AAItCC,IAAAA,UAAU,EAAET,OAAO,IAAI,IAJe;AAKtCU,IAAAA,MAAM,EAAE;AAL8B,GAAxC;AAOA,SAAOT,UAAP;AACD,CAbkC,CAA9B;AAgBP,OAAO,IAAMU,QAAQ,GAAG,SAAXA,QAAW,CAACb,KAAD;AAAA,SAAsBD,QAAQ,CAACC,KAAD,CAAR,CAAgBc,KAAtC;AAAA,CAAjB;AACP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACf,KAAD;AAAA,SAAsBD,QAAQ,CAACC,KAAD,CAAR,CAAgBgB,OAAtC;AAAA,CAAnB;AACP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACjB,KAAD;AAAA,SAAsBe,UAAU,CAACf,KAAD,CAAV,CAAkBkB,MAAlB,GAA2B,CAAjD;AAAA,CAAlB;AACP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACnB,KAAD;AAAA,SAAsBD,QAAQ,CAACC,KAAD,CAAR,CAAgBoB,QAAtC;AAAA,CAApB;AAEP,OAAO,IAAMC,iBAAiB,GAAG3B,cAAc,CAC7CG,OAD6C,EAE7CC,SAF6C,EAG7C,UAACK,UAAD,EAAaS,MAAb,EAAwB;AACtB,SAAOU,MAAM,CAACC,IAAP,CAAYpB,UAAZ,EAAwBqB,MAAxB,CACL,UAACC,GAAD,EAAMpB,EAAN;AAAA,6BACKoB,GADL,sBAEGpB,EAFH,oBAEaF,UAAU,CAACE,EAAD,CAFvB;AAE6BO,MAAAA,MAAM,EAAET,UAAU,CAACE,EAAD,CAAV,CAAeO,MAAf,CAAsBc,GAAtB,CAA0B,UAAArB,EAAE;AAAA,eAAIO,MAAM,CAACP,EAAD,CAAV;AAAA,OAA5B;AAFrC;AAAA,GADK,EAKL,EALK,CAAP;AAOD,CAX4C,CAAxC","sourcesContent":["import { createSelector } from 'reselect'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { RootState } from 'modules/common/types'\nimport { COLLECTIBLE_ASSET_PACK_ID } from 'modules/ui/sidebar/utils'\nimport { AssetPackState } from './reducer'\nimport { AssetState } from 'modules/asset/reducer'\nimport { getData as getAssets } from 'modules/asset/selectors'\nimport { FullAssetPack } from './types'\n\nexport const getState = (state: RootState) => state.assetPack\nexport const getData = createSelector<RootState, AssetPackState, string | undefined, AssetPackState['data']>(\n  getState,\n  getAddress,\n  (state, address) => {\n    const assetPacks = state.data\n    assetPacks[COLLECTIBLE_ASSET_PACK_ID] = {\n      id: COLLECTIBLE_ASSET_PACK_ID,\n      title: 'Collectibles',\n      thumbnail: `${process.env.PUBLIC_URL}/images/nft-icon.png`,\n      ethAddress: address || null,\n      assets: []\n    }\n    return assetPacks\n  }\n)\n\nexport const getError = (state: RootState) => getState(state).error\nexport const getLoading = (state: RootState) => getState(state).loading\nexport const isLoading = (state: RootState) => getLoading(state).length > 0\nexport const getProgress = (state: RootState) => getState(state).progress\n\nexport const getFullAssetPacks = createSelector<RootState, AssetPackState['data'], AssetState['data'], Record<string, FullAssetPack>>(\n  getData,\n  getAssets,\n  (assetPacks, assets) => {\n    return Object.keys(assetPacks).reduce(\n      (acc, id) => ({\n        ...acc,\n        [id]: { ...assetPacks[id], assets: assetPacks[id].assets.map(id => assets[id]) }\n      }),\n      {}\n    )\n  }\n)\n"]},"metadata":{},"sourceType":"module"}