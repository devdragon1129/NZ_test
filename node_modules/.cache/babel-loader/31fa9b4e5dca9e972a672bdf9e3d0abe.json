{"ast":null,"code":"import { connect } from 'react-redux';\nimport { deleteProject, duplicateProject } from 'modules/project/actions';\nimport { getDeploymentStatusByProjectId } from 'modules/deployment/selectors';\nimport { getData as getScenes } from 'modules/scene/selectors';\nimport { openModal } from 'modules/modal/actions';\nimport { getLoadingSet, getErrorSet } from 'modules/sync/selectors';\nimport ProjectCard from './ProjectCard';\n\nvar mapState = function mapState(state, ownProps) {\n  var project = ownProps.project;\n  var scene = getScenes(state)[project.sceneId];\n  return {\n    items: scene ? scene.metrics.entities : 0,\n    deploymentStatus: getDeploymentStatusByProjectId(state)[ownProps.project.id],\n    isUploading: getLoadingSet(state).has(project.id),\n    hasError: getErrorSet(state).has(project.id)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onDeleteProject: function onDeleteProject(id) {\n      return dispatch(deleteProject(id));\n    },\n    onDuplicateProject: function onDuplicateProject(id) {\n      return dispatch(duplicateProject(id));\n    },\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(ProjectCard);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/ProjectCard/ProjectCard.container.ts"],"names":["connect","deleteProject","duplicateProject","getDeploymentStatusByProjectId","getData","getScenes","openModal","getLoadingSet","getErrorSet","ProjectCard","mapState","state","ownProps","project","scene","sceneId","items","metrics","entities","deploymentStatus","id","isUploading","has","hasError","mapDispatch","dispatch","onDeleteProject","onDuplicateProject","onOpenModal","name","metadata"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AAGA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,yBAAhD;AACA,SAASC,8BAAT,QAA+C,8BAA/C;AACA,SAASC,OAAO,IAAIC,SAApB,QAAqC,yBAArC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,wBAA3C;AAGA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAmBC,QAAnB,EAAyD;AAAA,MAChEC,OADgE,GACpDD,QADoD,CAChEC,OADgE;AAExE,MAAMC,KAAK,GAAGT,SAAS,CAACM,KAAD,CAAT,CAAiBE,OAAO,CAACE,OAAzB,CAAd;AACA,SAAO;AACLC,IAAAA,KAAK,EAAEF,KAAK,GAAGA,KAAK,CAACG,OAAN,CAAcC,QAAjB,GAA4B,CADnC;AAELC,IAAAA,gBAAgB,EAAEhB,8BAA8B,CAACQ,KAAD,CAA9B,CAAsCC,QAAQ,CAACC,OAAT,CAAiBO,EAAvD,CAFb;AAGLC,IAAAA,WAAW,EAAEd,aAAa,CAACI,KAAD,CAAb,CAAqBW,GAArB,CAAyBT,OAAO,CAACO,EAAjC,CAHR;AAILG,IAAAA,QAAQ,EAAEf,WAAW,CAACG,KAAD,CAAX,CAAmBW,GAAnB,CAAuBT,OAAO,CAACO,EAA/B;AAJL,GAAP;AAMD,CATD;;AAWA,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,eAAe,EAAE,yBAAAN,EAAE;AAAA,aAAIK,QAAQ,CAACxB,aAAa,CAACmB,EAAD,CAAd,CAAZ;AAAA,KAD6C;AAEhEO,IAAAA,kBAAkB,EAAE,4BAAAP,EAAE;AAAA,aAAIK,QAAQ,CAACvB,gBAAgB,CAACkB,EAAD,CAAjB,CAAZ;AAAA,KAF0C;AAGhEQ,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,QAAP;AAAA,aAAoBL,QAAQ,CAACnB,SAAS,CAACuB,IAAD,EAAOC,QAAP,CAAV,CAA5B;AAAA;AAHmD,GAA9C;AAAA,CAApB;;AAMA,eAAe9B,OAAO,CAACU,QAAD,EAAWc,WAAX,CAAP,CAA+Bf,WAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\n\nimport { RootState } from 'modules/common/types'\nimport { deleteProject, duplicateProject } from 'modules/project/actions'\nimport { getDeploymentStatusByProjectId } from 'modules/deployment/selectors'\nimport { getData as getScenes } from 'modules/scene/selectors'\nimport { openModal } from 'modules/modal/actions'\nimport { getLoadingSet, getErrorSet } from 'modules/sync/selectors'\n\nimport { MapStateProps, MapDispatch, MapDispatchProps, OwnProps } from './ProjectCard.types'\nimport ProjectCard from './ProjectCard'\n\nconst mapState = (state: RootState, ownProps: OwnProps): MapStateProps => {\n  const { project } = ownProps\n  const scene = getScenes(state)[project.sceneId]\n  return {\n    items: scene ? scene.metrics.entities : 0,\n    deploymentStatus: getDeploymentStatusByProjectId(state)[ownProps.project.id],\n    isUploading: getLoadingSet(state).has(project.id),\n    hasError: getErrorSet(state).has(project.id)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onDeleteProject: id => dispatch(deleteProject(id)),\n  onDuplicateProject: id => dispatch(duplicateProject(id)),\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata))\n})\n\nexport default connect(mapState, mapDispatch)(ProjectCard)\n"]},"metadata":{},"sourceType":"module"}