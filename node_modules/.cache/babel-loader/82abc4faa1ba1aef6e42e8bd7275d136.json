{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../Misc/typeStore';\n/**\r\n * Block used to expand a Color3/4 into 4 outputs (one for each component)\r\n */\n\nvar ColorSplitterBlock =\n/** @class */\nfunction (_super) {\n  __extends(ColorSplitterBlock, _super);\n  /**\r\n   * Create a new ColorSplitterBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function ColorSplitterBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n\n    _this.registerInput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, true);\n\n    _this.registerInput(\"rgb \", NodeMaterialBlockConnectionPointTypes.Color3, true);\n\n    _this.registerOutput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3);\n\n    _this.registerOutput(\"r\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"g\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"b\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"a\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.inputsAreExclusive = true;\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  ColorSplitterBlock.prototype.getClassName = function () {\n    return \"ColorSplitterBlock\";\n  };\n\n  Object.defineProperty(ColorSplitterBlock.prototype, \"rgba\", {\n    /**\r\n     * Gets the rgba component (input)\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ColorSplitterBlock.prototype, \"rgbIn\", {\n    /**\r\n     * Gets the rgb component (input)\r\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ColorSplitterBlock.prototype, \"rgbOut\", {\n    /**\r\n     * Gets the rgb component (output)\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ColorSplitterBlock.prototype, \"r\", {\n    /**\r\n     * Gets the r component (output)\r\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ColorSplitterBlock.prototype, \"g\", {\n    /**\r\n     * Gets the g component (output)\r\n     */\n    get: function get() {\n      return this._outputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ColorSplitterBlock.prototype, \"b\", {\n    /**\r\n     * Gets the b component (output)\r\n     */\n    get: function get() {\n      return this._outputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ColorSplitterBlock.prototype, \"a\", {\n    /**\r\n     * Gets the a component (output)\r\n     */\n    get: function get() {\n      return this._outputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ColorSplitterBlock.prototype._inputRename = function (name) {\n    if (name === \"rgb \") {\n      return \"rgbIn\";\n    }\n\n    return name;\n  };\n\n  ColorSplitterBlock.prototype._outputRename = function (name) {\n    if (name === \"rgb\") {\n      return \"rgbOut\";\n    }\n\n    return name;\n  };\n\n  ColorSplitterBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var input = this.rgba.isConnected ? this.rgba : this.rgbIn;\n\n    if (!input.isConnected) {\n      return;\n    }\n\n    var rgbOutput = this._outputs[0];\n    var rOutput = this._outputs[1];\n    var gOutput = this._outputs[2];\n    var bOutput = this._outputs[3];\n    var aOutput = this._outputs[4];\n\n    if (rgbOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(rgbOutput, state) + (\" = \" + input.associatedVariableName + \".rgb;\\r\\n\");\n    }\n\n    if (rOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(rOutput, state) + (\" = \" + input.associatedVariableName + \".r;\\r\\n\");\n    }\n\n    if (gOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(gOutput, state) + (\" = \" + input.associatedVariableName + \".g;\\r\\n\");\n    }\n\n    if (bOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(bOutput, state) + (\" = \" + input.associatedVariableName + \".b;\\r\\n\");\n    }\n\n    if (aOutput.hasEndpoints) {\n      state.compilationString += this._declareOutput(aOutput, state) + (\" = \" + input.associatedVariableName + \".a;\\r\\n\");\n    }\n\n    return this;\n  };\n\n  return ColorSplitterBlock;\n}(NodeMaterialBlock);\n\nexport { ColorSplitterBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.ColorSplitterBlock\"] = ColorSplitterBlock;","map":null,"metadata":{},"sourceType":"module"}