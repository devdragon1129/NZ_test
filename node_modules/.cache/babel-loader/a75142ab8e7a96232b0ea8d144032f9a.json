{"ast":null,"code":"import { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getData as getWallet } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { getCollectionId } from 'modules/location/selectors';\nimport { getCollection, isOnSaleLoading, getLoading as getLoadingCollection } from 'modules/collection/selectors';\nimport { FETCH_COLLECTIONS_REQUEST, DELETE_COLLECTION_REQUEST } from 'modules/collection/actions';\nimport { openModal } from 'modules/modal/actions';\nimport CollectionDetailPage from './CollectionDetailPage';\n\nvar mapState = function mapState(state) {\n  var collectionId = getCollectionId(state) || '';\n  var collection = getCollection(state, collectionId);\n  return {\n    wallet: getWallet(state),\n    collection: collection,\n    isOnSaleLoading: isOnSaleLoading(state),\n    isLoading: isLoadingType(getLoadingCollection(state), FETCH_COLLECTIONS_REQUEST) || isLoadingType(getLoadingCollection(state), DELETE_COLLECTION_REQUEST)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onNavigate: function onNavigate(path) {\n      return dispatch(push(path));\n    },\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(CollectionDetailPage);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/CollectionDetailPage/CollectionDetailPage.container.ts"],"names":["connect","push","isLoadingType","getData","getWallet","getCollectionId","getCollection","isOnSaleLoading","getLoading","getLoadingCollection","FETCH_COLLECTIONS_REQUEST","DELETE_COLLECTION_REQUEST","openModal","CollectionDetailPage","mapState","state","collectionId","collection","wallet","isLoading","mapDispatch","dispatch","onNavigate","path","onOpenModal","name","metadata"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,OAAO,IAAIC,SAApB,QAAqC,kDAArC;AAEA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,UAAU,IAAIC,oBAAvD,QAAmF,8BAAnF;AACA,SAASC,yBAAT,EAAoCC,yBAApC,QAAqE,4BAArE;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,OAAOC,oBAAP,MAAiC,wBAAjC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAqC;AACpD,MAAMC,YAAY,GAAGX,eAAe,CAACU,KAAD,CAAf,IAA0B,EAA/C;AACA,MAAME,UAAU,GAAGX,aAAa,CAACS,KAAD,EAAQC,YAAR,CAAhC;AAEA,SAAO;AACLE,IAAAA,MAAM,EAAEd,SAAS,CAACW,KAAD,CADZ;AAELE,IAAAA,UAAU,EAAVA,UAFK;AAGLV,IAAAA,eAAe,EAAEA,eAAe,CAACQ,KAAD,CAH3B;AAILI,IAAAA,SAAS,EACPjB,aAAa,CAACO,oBAAoB,CAACM,KAAD,CAArB,EAA8BL,yBAA9B,CAAb,IACAR,aAAa,CAACO,oBAAoB,CAACM,KAAD,CAArB,EAA8BJ,yBAA9B;AANV,GAAP;AAQD,CAZD;;AAcA,IAAMS,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,UAAU,EAAE,oBAAAC,IAAI;AAAA,aAAIF,QAAQ,CAACpB,IAAI,CAACsB,IAAD,CAAL,CAAZ;AAAA,KADgD;AAEhEC,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,QAAP;AAAA,aAAoBL,QAAQ,CAACT,SAAS,CAACa,IAAD,EAAOC,QAAP,CAAV,CAA5B;AAAA;AAFmD,GAA9C;AAAA,CAApB;;AAKA,eAAe1B,OAAO,CAACc,QAAD,EAAWM,WAAX,CAAP,CAA+BP,oBAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { getData as getWallet } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { RootState } from 'modules/common/types'\nimport { getCollectionId } from 'modules/location/selectors'\nimport { getCollection, isOnSaleLoading, getLoading as getLoadingCollection } from 'modules/collection/selectors'\nimport { FETCH_COLLECTIONS_REQUEST, DELETE_COLLECTION_REQUEST } from 'modules/collection/actions'\nimport { openModal } from 'modules/modal/actions'\nimport { MapStateProps, MapDispatchProps, MapDispatch } from './CollectionDetailPage.types'\nimport CollectionDetailPage from './CollectionDetailPage'\n\nconst mapState = (state: RootState): MapStateProps => {\n  const collectionId = getCollectionId(state) || ''\n  const collection = getCollection(state, collectionId)\n\n  return {\n    wallet: getWallet(state)!,\n    collection,\n    isOnSaleLoading: isOnSaleLoading(state),\n    isLoading:\n      isLoadingType(getLoadingCollection(state), FETCH_COLLECTIONS_REQUEST) ||\n      isLoadingType(getLoadingCollection(state), DELETE_COLLECTION_REQUEST)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onNavigate: path => dispatch(push(path)),\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata))\n})\n\nexport default connect(mapState, mapDispatch)(CollectionDetailPage)\n"]},"metadata":{},"sourceType":"module"}