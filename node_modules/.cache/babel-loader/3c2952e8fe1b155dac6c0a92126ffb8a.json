{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connection = exports.ConnectionManager = void 0;\n\nvar chain_id_1 = require(\"@dcl/schemas/dist/dapps/chain-id\");\n\nvar provider_type_1 = require(\"@dcl/schemas/dist/dapps/provider-type\");\n\nvar connectors_1 = require(\"./connectors\");\n\nvar storage_1 = require(\"./storage\");\n\nvar configuration_1 = require(\"./configuration\");\n\nvar ProviderAdapter_1 = require(\"./ProviderAdapter\");\n\nrequire(\"./declarations\");\n\nvar ConnectionManager = /*#__PURE__*/function () {\n  function ConnectionManager(storage) {\n    _classCallCheck(this, ConnectionManager);\n\n    this.storage = storage;\n  }\n\n  _createClass(ConnectionManager, [{\n    key: \"connect\",\n    value: function connect(providerType) {\n      var chainId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : chain_id_1.ChainId.ETHEREUM_MAINNET;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$this$connector, provider, account;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setConnectionData(providerType, chainId);\n                this.connector = this.buildConnector(providerType, chainId);\n                _context.next = 4;\n                return this.connector.activate();\n\n              case 4:\n                _yield$this$connector = _context.sent;\n                provider = _yield$this$connector.provider;\n                account = _yield$this$connector.account;\n                return _context.abrupt(\"return\", {\n                  provider: ProviderAdapter_1.ProviderAdapter.adapt(provider),\n                  providerType: providerType,\n                  account: account || '',\n                  chainId: chainId\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"tryPreviousConnection\",\n    value: function tryPreviousConnection() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var connectionData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                connectionData = this.getConnectionData();\n\n                if (connectionData) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw new Error('Could not find a valid provider. Make sure to call the `connect` method first');\n\n              case 3:\n                return _context2.abrupt(\"return\", this.connect(connectionData.providerType, connectionData.chainId));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"getAvailableProviders\",\n    value: function getAvailableProviders() {\n      var available = [provider_type_1.ProviderType.FORTMATIC, provider_type_1.ProviderType.WALLET_CONNECT, provider_type_1.ProviderType.WALLET_LINK];\n\n      if (typeof window !== 'undefined' && window.ethereum !== undefined) {\n        available.unshift(provider_type_1.ProviderType.INJECTED);\n      }\n\n      return available;\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _configuration_1$getC, storageKey;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.connector) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                this.connector.deactivate();\n\n                if (!this.isClosableConnector()) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                _context3.next = 5;\n                return this.connector.close();\n\n              case 5:\n                _configuration_1$getC = configuration_1.getConfiguration(), storageKey = _configuration_1$getC.storageKey;\n                this.storage.remove(storageKey);\n                this.connector = undefined;\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"getProvider\",\n    value: function getProvider() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.connector) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw new Error('No valid connector found. Please .connect() first');\n\n              case 2:\n                return _context4.abrupt(\"return\", this.connector.getProvider());\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"createProvider\",\n    value: function createProvider(providerType) {\n      var chainId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : chain_id_1.ChainId.ETHEREUM_MAINNET;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var connector, provider;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                connector = this.buildConnector(providerType, chainId);\n                _context5.next = 3;\n                return connector.getProvider();\n\n              case 3:\n                provider = _context5.sent;\n                return _context5.abrupt(\"return\", ProviderAdapter_1.ProviderAdapter.adapt(provider));\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"buildConnector\",\n    value: function buildConnector(providerType, chainId) {\n      switch (providerType) {\n        case provider_type_1.ProviderType.INJECTED:\n          return new connectors_1.InjectedConnector(chainId);\n\n        case provider_type_1.ProviderType.FORTMATIC:\n          return new connectors_1.FortmaticConnector(chainId);\n\n        case provider_type_1.ProviderType.WALLET_CONNECT:\n          return new connectors_1.WalletConnectConnector();\n\n        case provider_type_1.ProviderType.WALLET_LINK:\n          return new connectors_1.WalletLinkConnector(chainId);\n\n        case provider_type_1.ProviderType.NETWORK:\n          return new connectors_1.NetworkConnector(chainId);\n\n        default:\n          throw new Error(\"Invalid provider \".concat(providerType));\n      }\n    }\n  }, {\n    key: \"getConnectionData\",\n    value: function getConnectionData() {\n      var _configuration_1$getC2 = configuration_1.getConfiguration(),\n          storageKey = _configuration_1$getC2.storageKey;\n\n      var connectionData = this.storage.get(storageKey);\n      return connectionData ? JSON.parse(connectionData) : undefined;\n    }\n  }, {\n    key: \"setConnectionData\",\n    value: function setConnectionData(providerType, chainId) {\n      var _configuration_1$getC3 = configuration_1.getConfiguration(),\n          storageKey = _configuration_1$getC3.storageKey;\n\n      var connectionData = JSON.stringify({\n        providerType: providerType,\n        chainId: chainId\n      });\n      this.storage.set(storageKey, connectionData);\n    }\n  }, {\n    key: \"isClosableConnector\",\n    value: function isClosableConnector() {\n      return this.connector && typeof this.connector['close'] !== 'undefined';\n    }\n  }]);\n\n  return ConnectionManager;\n}();\n\nexports.ConnectionManager = ConnectionManager;\nexports.connection = new ConnectionManager(new storage_1.LocalStorage());","map":null,"metadata":{},"sourceType":"script"}