{"ast":null,"code":"import { connect } from 'react-redux';\nimport { getError as getWalletError, isConnecting, isConnected, getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { clearDeploymentRequest } from 'modules/deployment/actions';\nimport { openModal } from 'modules/modal/actions';\nimport { getData as getDeployments, isUploadingAssets, getProgress as getUploadProgress, isCreatingFiles, getError as getDeploymentError } from 'modules/deployment/selectors';\nimport ClearDeployment from './ClearDeployment';\n\nvar mapState = function mapState(state, ownProps) {\n  return {\n    deployment: getDeployments(state)[ownProps.deploymentId] || null,\n    isConnecting: isConnecting(state),\n    isConnected: isConnected(state),\n    isUploadingAssets: isUploadingAssets(state),\n    isCreatingFiles: isCreatingFiles(state),\n    hasError: !!getWalletError(state),\n    ethAddress: getAddress(state),\n    deploymentProgress: getUploadProgress(state),\n    error: getDeploymentError(state)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    },\n    onClearDeployment: function onClearDeployment(deploymentId) {\n      return dispatch(clearDeploymentRequest(deploymentId));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(ClearDeployment);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/DeployModal/ClearDeployment/ClearDeployment.container.ts"],"names":["connect","getError","getWalletError","isConnecting","isConnected","getAddress","clearDeploymentRequest","openModal","getData","getDeployments","isUploadingAssets","getProgress","getUploadProgress","isCreatingFiles","getDeploymentError","ClearDeployment","mapState","state","ownProps","deployment","deploymentId","hasError","ethAddress","deploymentProgress","error","mapDispatch","dispatch","onOpenModal","name","metadata","onClearDeployment"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AAEA,SAASC,QAAQ,IAAIC,cAArB,EAAqCC,YAArC,EAAmDC,WAAnD,EAAgEC,UAAhE,QAAkF,kDAAlF;AACA,SAASC,sBAAT,QAAuC,4BAAvC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,SACEC,OAAO,IAAIC,cADb,EAEEC,iBAFF,EAGEC,WAAW,IAAIC,iBAHjB,EAIEC,eAJF,EAKEZ,QAAQ,IAAIa,kBALd,QAMO,8BANP;AAQA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAmBC,QAAnB;AAAA,SAA0D;AACzEC,IAAAA,UAAU,EAAEV,cAAc,CAACQ,KAAD,CAAd,CAAsBC,QAAQ,CAACE,YAA/B,KAAgD,IADa;AAEzEjB,IAAAA,YAAY,EAAEA,YAAY,CAACc,KAAD,CAF+C;AAGzEb,IAAAA,WAAW,EAAEA,WAAW,CAACa,KAAD,CAHiD;AAIzEP,IAAAA,iBAAiB,EAAEA,iBAAiB,CAACO,KAAD,CAJqC;AAKzEJ,IAAAA,eAAe,EAAEA,eAAe,CAACI,KAAD,CALyC;AAMzEI,IAAAA,QAAQ,EAAE,CAAC,CAACnB,cAAc,CAACe,KAAD,CAN+C;AAOzEK,IAAAA,UAAU,EAAEjB,UAAU,CAACY,KAAD,CAPmD;AAQzEM,IAAAA,kBAAkB,EAAEX,iBAAiB,CAACK,KAAD,CARoC;AASzEO,IAAAA,KAAK,EAAEV,kBAAkB,CAACG,KAAD;AATgD,GAA1D;AAAA,CAAjB;;AAYA,IAAMQ,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,QAAP;AAAA,aAAoBH,QAAQ,CAACnB,SAAS,CAACqB,IAAD,EAAOC,QAAP,CAAV,CAA5B;AAAA,KADmD;AAEhEC,IAAAA,iBAAiB,EAAE,2BAAAV,YAAY;AAAA,aAAIM,QAAQ,CAACpB,sBAAsB,CAACc,YAAD,CAAvB,CAAZ;AAAA;AAFiC,GAA9C;AAAA,CAApB;;AAKA,eAAepB,OAAO,CAACgB,QAAD,EAAWS,WAAX,CAAP,CAA+BV,eAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\n\nimport { getError as getWalletError, isConnecting, isConnected, getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { clearDeploymentRequest } from 'modules/deployment/actions'\nimport { openModal } from 'modules/modal/actions'\nimport { RootState } from 'modules/common/types'\nimport {\n  getData as getDeployments,\n  isUploadingAssets,\n  getProgress as getUploadProgress,\n  isCreatingFiles,\n  getError as getDeploymentError\n} from 'modules/deployment/selectors'\nimport { MapStateProps, MapDispatchProps, MapDispatch, OwnProps } from './ClearDeployment.types'\nimport ClearDeployment from './ClearDeployment'\n\nconst mapState = (state: RootState, ownProps: OwnProps): MapStateProps => ({\n  deployment: getDeployments(state)[ownProps.deploymentId] || null,\n  isConnecting: isConnecting(state),\n  isConnected: isConnected(state),\n  isUploadingAssets: isUploadingAssets(state),\n  isCreatingFiles: isCreatingFiles(state),\n  hasError: !!getWalletError(state),\n  ethAddress: getAddress(state),\n  deploymentProgress: getUploadProgress(state),\n  error: getDeploymentError(state)\n})\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata)),\n  onClearDeployment: deploymentId => dispatch(clearDeploymentRequest(deploymentId))\n})\n\nexport default connect(mapState, mapDispatch)(ClearDeployment)\n"]},"metadata":{},"sourceType":"module"}