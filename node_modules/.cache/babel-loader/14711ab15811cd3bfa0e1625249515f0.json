{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EntitiesOperator = void 0;\n\nvar dcl_crypto_1 = require(\"dcl-crypto\");\n\nvar personal_1 = require(\"web3x/personal\");\n\nvar eth_1 = require(\"web3x/eth\");\n\nvar address_1 = require(\"web3x/address\");\n\nvar dcl_catalyst_client_1 = require(\"dcl-catalyst-client\");\n\nvar dcl_catalyst_commons_1 = require(\"dcl-catalyst-commons\");\n\nvar eth_2 = require(\"./eth\");\n\nvar peer_1 = require(\"./peer\");\n\nvar EntitiesOperator = /*#__PURE__*/function () {\n  function EntitiesOperator(peerUrl) {\n    _classCallCheck(this, EntitiesOperator);\n\n    this.catalystClient = new dcl_catalyst_client_1.CatalystClient({\n      catalystUrl: peerUrl\n    });\n    this.peerAPI = new peer_1.PeerAPI(peerUrl);\n  }\n  /**\n   * Uses the provider to request the user for a signature to\n   * deploy an entity.\n   *\n   * @param address - The address of the deployer of the entity.\n   * @param entityId - The entity id that it's going to be deployed.\n   */\n\n\n  _createClass(EntitiesOperator, [{\n    key: \"authenticateEntityDeployment\",\n    value: function authenticateEntityDeployment(address, entityId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var provider, eth, personal, signature;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return eth_2.getConnectedProvider();\n\n              case 2:\n                provider = _context.sent;\n\n                if (provider) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"The provider couldn't be retrieved when creating the auth chain\");\n\n              case 5:\n                eth = new eth_1.Eth(provider);\n                personal = new personal_1.Personal(eth.provider);\n                _context.next = 9;\n                return personal.sign(entityId, address_1.Address.fromString(address), '');\n\n              case 9:\n                signature = _context.sent;\n                return _context.abrupt(\"return\", dcl_crypto_1.Authenticator.createSimpleAuthChain(entityId, address, signature));\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n    /**\n     * Gets the first {@link ProfileEntity} out of multiple possible profile entities or\n     * returns the last one in case the given address has no profile entities.\n     *\n     * @param address - The address that owns the profile entity being retrieved.\n     */\n\n  }, {\n    key: \"getProfileEntity\",\n    value: function getProfileEntity(address) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var entities;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.catalystClient.fetchEntitiesByPointers(dcl_catalyst_commons_1.EntityType.PROFILE, [address.toLowerCase()]);\n\n              case 2:\n                entities = _context2.sent;\n\n                if (!(entities.length > 0)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", entities[0]);\n\n              case 5:\n                return _context2.abrupt(\"return\", this.peerAPI.getDefaultProfileEntity());\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Deploys an entity of a determined type.\n     * This method will build everything related to the deployment of\n     * the entity and will prompt the user for their signature before\n     * doing a deployment.\n     *\n     * @param entity - The title of the book.\n     * @param entityType - The type of the entity.\n     * @param address - The owner / soon to be owner of the entity.\n     */\n\n  }, {\n    key: \"deployEntityWithoutNewFiles\",\n    value: function deployEntityWithoutNewFiles(entity, entityType, pointer, address) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var options, entityToDeploy, authChain;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = {\n                  type: entityType,\n                  pointers: [pointer],\n                  metadata: entity.metadata,\n                  timestamp: Date.now()\n                };\n                _context3.next = 3;\n                return this.catalystClient.buildEntityWithoutNewFiles(options);\n\n              case 3:\n                entityToDeploy = _context3.sent;\n                _context3.next = 6;\n                return this.authenticateEntityDeployment(address, entityToDeploy.entityId);\n\n              case 6:\n                authChain = _context3.sent;\n                return _context3.abrupt(\"return\", this.catalystClient.deployEntity(Object.assign(Object.assign({}, entityToDeploy), {\n                  authChain: authChain\n                })));\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }]);\n\n  return EntitiesOperator;\n}();\n\nexports.EntitiesOperator = EntitiesOperator;","map":null,"metadata":{},"sourceType":"script"}