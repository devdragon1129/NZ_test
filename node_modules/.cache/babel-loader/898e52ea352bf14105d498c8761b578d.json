{"ast":null,"code":"import { Scalar } from \"./math.scalar\";\nimport { Epsilon } from './math.constants';\nimport { ArrayTools } from '../Misc/arrayTools';\nimport { _TypeStore } from '../Misc/typeStore';\nimport { PerformanceConfigurator } from '../Engines/performanceConfigurator';\n/**\r\n * Class representing a vector containing 2 coordinates\r\n */\n\nvar Vector2 =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Vector2 from the given x and y coordinates\r\n   * @param x defines the first coordinate\r\n   * @param y defines the second coordinate\r\n   */\n  function Vector2(\n  /** defines the first coordinate */\n  x,\n  /** defines the second coordinate */\n  y) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    this.x = x;\n    this.y = y;\n  }\n  /**\r\n   * Gets a string with the Vector2 coordinates\r\n   * @returns a string with the Vector2 coordinates\r\n   */\n\n\n  Vector2.prototype.toString = function () {\n    return \"{X: \" + this.x + \" Y: \" + this.y + \"}\";\n  };\n  /**\r\n   * Gets class name\r\n   * @returns the string \"Vector2\"\r\n   */\n\n\n  Vector2.prototype.getClassName = function () {\n    return \"Vector2\";\n  };\n  /**\r\n   * Gets current vector hash code\r\n   * @returns the Vector2 hash code as a number\r\n   */\n\n\n  Vector2.prototype.getHashCode = function () {\n    var hash = this.x | 0;\n    hash = hash * 397 ^ (this.y | 0);\n    return hash;\n  }; // Operators\n\n  /**\r\n   * Sets the Vector2 coordinates in the given array or Float32Array from the given index.\r\n   * @param array defines the source array\r\n   * @param index defines the offset in source array\r\n   * @returns the current Vector2\r\n   */\n\n\n  Vector2.prototype.toArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    array[index] = this.x;\n    array[index + 1] = this.y;\n    return this;\n  };\n  /**\r\n   * Update the current vector from an array\r\n   * @param array defines the destination array\r\n   * @param index defines the offset in the destination array\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector2.prototype.fromArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    Vector2.FromArrayToRef(array, index, this);\n    return this;\n  };\n  /**\r\n   * Copy the current vector to an array\r\n   * @returns a new array with 2 elements: the Vector2 coordinates.\r\n   */\n\n\n  Vector2.prototype.asArray = function () {\n    var result = new Array();\n    this.toArray(result, 0);\n    return result;\n  };\n  /**\r\n   * Sets the Vector2 coordinates with the given Vector2 coordinates\r\n   * @param source defines the source Vector2\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.copyFrom = function (source) {\n    this.x = source.x;\n    this.y = source.y;\n    return this;\n  };\n  /**\r\n   * Sets the Vector2 coordinates with the given floats\r\n   * @param x defines the first coordinate\r\n   * @param y defines the second coordinate\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.copyFromFloats = function (x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  };\n  /**\r\n   * Sets the Vector2 coordinates with the given floats\r\n   * @param x defines the first coordinate\r\n   * @param y defines the second coordinate\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.set = function (x, y) {\n    return this.copyFromFloats(x, y);\n  };\n  /**\r\n   * Add another vector with the current one\r\n   * @param otherVector defines the other vector\r\n   * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates\r\n   */\n\n\n  Vector2.prototype.add = function (otherVector) {\n    return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n  };\n  /**\r\n   * Sets the \"result\" coordinates with the addition of the current Vector2 and the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @param result defines the target vector\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.addToRef = function (otherVector, result) {\n    result.x = this.x + otherVector.x;\n    result.y = this.y + otherVector.y;\n    return this;\n  };\n  /**\r\n   * Set the Vector2 coordinates by adding the given Vector2 coordinates\r\n   * @param otherVector defines the other vector\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.addInPlace = function (otherVector) {\n    this.x += otherVector.x;\n    this.y += otherVector.y;\n    return this;\n  };\n  /**\r\n   * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates\r\n   * @param otherVector defines the other vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.addVector3 = function (otherVector) {\n    return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n  };\n  /**\r\n   * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2\r\n   * @param otherVector defines the other vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.subtract = function (otherVector) {\n    return new Vector2(this.x - otherVector.x, this.y - otherVector.y);\n  };\n  /**\r\n   * Sets the \"result\" coordinates with the subtraction of the given one from the current Vector2 coordinates.\r\n   * @param otherVector defines the other vector\r\n   * @param result defines the target vector\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.subtractToRef = function (otherVector, result) {\n    result.x = this.x - otherVector.x;\n    result.y = this.y - otherVector.y;\n    return this;\n  };\n  /**\r\n   * Sets the current Vector2 coordinates by subtracting from it the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.subtractInPlace = function (otherVector) {\n    this.x -= otherVector.x;\n    this.y -= otherVector.y;\n    return this;\n  };\n  /**\r\n   * Multiplies in place the current Vector2 coordinates by the given ones\r\n   * @param otherVector defines the other vector\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.multiplyInPlace = function (otherVector) {\n    this.x *= otherVector.x;\n    this.y *= otherVector.y;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.multiply = function (otherVector) {\n    return new Vector2(this.x * otherVector.x, this.y * otherVector.y);\n  };\n  /**\r\n   * Sets \"result\" coordinates with the multiplication of the current Vector2 and the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @param result defines the target vector\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.multiplyToRef = function (otherVector, result) {\n    result.x = this.x * otherVector.x;\n    result.y = this.y * otherVector.y;\n    return this;\n  };\n  /**\r\n   * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats\r\n   * @param x defines the first coordinate\r\n   * @param y defines the second coordinate\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.multiplyByFloats = function (x, y) {\n    return new Vector2(this.x * x, this.y * y);\n  };\n  /**\r\n   * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.divide = function (otherVector) {\n    return new Vector2(this.x / otherVector.x, this.y / otherVector.y);\n  };\n  /**\r\n   * Sets the \"result\" coordinates with the Vector2 divided by the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @param result defines the target vector\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.divideToRef = function (otherVector, result) {\n    result.x = this.x / otherVector.x;\n    result.y = this.y / otherVector.y;\n    return this;\n  };\n  /**\r\n   * Divides the current Vector2 coordinates by the given ones\r\n   * @param otherVector defines the other vector\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.divideInPlace = function (otherVector) {\n    return this.divideToRef(otherVector, this);\n  };\n  /**\r\n   * Gets a new Vector2 with current Vector2 negated coordinates\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.negate = function () {\n    return new Vector2(-this.x, -this.y);\n  };\n  /**\r\n   * Negate this vector in place\r\n   * @returns this\r\n   */\n\n\n  Vector2.prototype.negateInPlace = function () {\n    this.x *= -1;\n    this.y *= -1;\n    return this;\n  };\n  /**\r\n   * Negate the current Vector2 and stores the result in the given vector \"result\" coordinates\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector2\r\n   */\n\n\n  Vector2.prototype.negateToRef = function (result) {\n    return result.copyFromFloats(this.x * -1, this.y * -1);\n  };\n  /**\r\n   * Multiply the Vector2 coordinates by scale\r\n   * @param scale defines the scaling factor\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.scaleInPlace = function (scale) {\n    this.x *= scale;\n    this.y *= scale;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector2 scaled by \"scale\" from the current Vector2\r\n   * @param scale defines the scaling factor\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.scale = function (scale) {\n    var result = new Vector2(0, 0);\n    this.scaleToRef(scale, result);\n    return result;\n  };\n  /**\r\n   * Scale the current Vector2 values by a factor to a given Vector2\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Vector2 object where to store the result\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.scaleToRef = function (scale, result) {\n    result.x = this.x * scale;\n    result.y = this.y * scale;\n    return this;\n  };\n  /**\r\n   * Scale the current Vector2 values by a factor and add the result to a given Vector2\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Vector2 object where to store the result\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.scaleAndAddToRef = function (scale, result) {\n    result.x += this.x * scale;\n    result.y += this.y * scale;\n    return this;\n  };\n  /**\r\n   * Gets a boolean if two vectors are equals\r\n   * @param otherVector defines the other vector\r\n   * @returns true if the given vector coordinates strictly equal the current Vector2 ones\r\n   */\n\n\n  Vector2.prototype.equals = function (otherVector) {\n    return otherVector && this.x === otherVector.x && this.y === otherVector.y;\n  };\n  /**\r\n   * Gets a boolean if two vectors are equals (using an epsilon value)\r\n   * @param otherVector defines the other vector\r\n   * @param epsilon defines the minimal distance to consider equality\r\n   * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.\r\n   */\n\n\n  Vector2.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\n    if (epsilon === void 0) {\n      epsilon = Epsilon;\n    }\n\n    return otherVector && Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar.WithinEpsilon(this.y, otherVector.y, epsilon);\n  };\n  /**\r\n   * Gets a new Vector2 from current Vector2 floored values\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.floor = function () {\n    return new Vector2(Math.floor(this.x), Math.floor(this.y));\n  };\n  /**\r\n   * Gets a new Vector2 from current Vector2 floored values\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.fract = function () {\n    return new Vector2(this.x - Math.floor(this.x), this.y - Math.floor(this.y));\n  }; // Properties\n\n  /**\r\n   * Gets the length of the vector\r\n   * @returns the vector length (float)\r\n   */\n\n\n  Vector2.prototype.length = function () {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  };\n  /**\r\n   * Gets the vector squared length\r\n   * @returns the vector squared length (float)\r\n   */\n\n\n  Vector2.prototype.lengthSquared = function () {\n    return this.x * this.x + this.y * this.y;\n  }; // Methods\n\n  /**\r\n   * Normalize the vector\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.normalize = function () {\n    var len = this.length();\n\n    if (len === 0) {\n      return this;\n    }\n\n    this.x /= len;\n    this.y /= len;\n    return this;\n  };\n  /**\r\n   * Gets a new Vector2 copied from the Vector2\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.clone = function () {\n    return new Vector2(this.x, this.y);\n  }; // Statics\n\n  /**\r\n   * Gets a new Vector2(0, 0)\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Zero = function () {\n    return new Vector2(0, 0);\n  };\n  /**\r\n   * Gets a new Vector2(1, 1)\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.One = function () {\n    return new Vector2(1, 1);\n  };\n  /**\r\n   * Gets a new Vector2 set from the given index element of the given array\r\n   * @param array defines the data source\r\n   * @param offset defines the offset in the data source\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.FromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    return new Vector2(array[offset], array[offset + 1]);\n  };\n  /**\r\n   * Sets \"result\" from the given index element of the given array\r\n   * @param array defines the data source\r\n   * @param offset defines the offset in the data source\r\n   * @param result defines the target vector\r\n   */\n\n\n  Vector2.FromArrayToRef = function (array, offset, result) {\n    result.x = array[offset];\n    result.y = array[offset + 1];\n  };\n  /**\r\n   * Gets a new Vector2 located for \"amount\" (float) on the CatmullRom spline defined by the given four Vector2\r\n   * @param value1 defines 1st point of control\r\n   * @param value2 defines 2nd point of control\r\n   * @param value3 defines 3rd point of control\r\n   * @param value4 defines 4th point of control\r\n   * @param amount defines the interpolation factor\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.CatmullRom = function (value1, value2, value3, value4, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var x = 0.5 * (2.0 * value2.x + (-value1.x + value3.x) * amount + (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared + (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n    var y = 0.5 * (2.0 * value2.y + (-value1.y + value3.y) * amount + (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared + (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Returns a new Vector2 set with same the coordinates than \"value\" ones if the vector \"value\" is in the square defined by \"min\" and \"max\".\r\n   * If a coordinate of \"value\" is lower than \"min\" coordinates, the returned Vector2 is given this \"min\" coordinate.\r\n   * If a coordinate of \"value\" is greater than \"max\" coordinates, the returned Vector2 is given this \"max\" coordinate\r\n   * @param value defines the value to clamp\r\n   * @param min defines the lower limit\r\n   * @param max defines the upper limit\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Clamp = function (value, min, max) {\n    var x = value.x;\n    x = x > max.x ? max.x : x;\n    x = x < min.x ? min.x : x;\n    var y = value.y;\n    y = y > max.y ? max.y : y;\n    y = y < min.y ? min.y : y;\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Returns a new Vector2 located for \"amount\" (float) on the Hermite spline defined by the vectors \"value1\", \"value3\", \"tangent1\", \"tangent2\"\r\n   * @param value1 defines the 1st control point\r\n   * @param tangent1 defines the outgoing tangent\r\n   * @param value2 defines the 2nd control point\r\n   * @param tangent2 defines the incoming tangent\r\n   * @param amount defines the interpolation factor\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    var part2 = -2.0 * cubed + 3.0 * squared;\n    var part3 = cubed - 2.0 * squared + amount;\n    var part4 = cubed - squared;\n    var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\n    var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Returns a new Vector2 located for \"amount\" (float) on the linear interpolation between the vector \"start\" adn the vector \"end\".\r\n   * @param start defines the start vector\r\n   * @param end defines the end vector\r\n   * @param amount defines the interpolation factor\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Lerp = function (start, end, amount) {\n    var x = start.x + (end.x - start.x) * amount;\n    var y = start.y + (end.y - start.y) * amount;\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Gets the dot product of the vector \"left\" and the vector \"right\"\r\n   * @param left defines first vector\r\n   * @param right defines second vector\r\n   * @returns the dot product (float)\r\n   */\n\n\n  Vector2.Dot = function (left, right) {\n    return left.x * right.x + left.y * right.y;\n  };\n  /**\r\n   * Returns a new Vector2 equal to the normalized given vector\r\n   * @param vector defines the vector to normalize\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Normalize = function (vector) {\n    var newVector = vector.clone();\n    newVector.normalize();\n    return newVector;\n  };\n  /**\r\n   * Gets a new Vector2 set with the minimal coordinate values from the \"left\" and \"right\" vectors\r\n   * @param left defines 1st vector\r\n   * @param right defines 2nd vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Minimize = function (left, right) {\n    var x = left.x < right.x ? left.x : right.x;\n    var y = left.y < right.y ? left.y : right.y;\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Gets a new Vecto2 set with the maximal coordinate values from the \"left\" and \"right\" vectors\r\n   * @param left defines 1st vector\r\n   * @param right defines 2nd vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Maximize = function (left, right) {\n    var x = left.x > right.x ? left.x : right.x;\n    var y = left.y > right.y ? left.y : right.y;\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix\r\n   * @param vector defines the vector to transform\r\n   * @param transformation defines the matrix to apply\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Transform = function (vector, transformation) {\n    var r = Vector2.Zero();\n    Vector2.TransformToRef(vector, transformation, r);\n    return r;\n  };\n  /**\r\n   * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector \"result\" coordinates\r\n   * @param vector defines the vector to transform\r\n   * @param transformation defines the matrix to apply\r\n   * @param result defines the target vector\r\n   */\n\n\n  Vector2.TransformToRef = function (vector, transformation, result) {\n    var m = transformation.m;\n    var x = vector.x * m[0] + vector.y * m[4] + m[12];\n    var y = vector.x * m[1] + vector.y * m[5] + m[13];\n    result.x = x;\n    result.y = y;\n  };\n  /**\r\n   * Determines if a given vector is included in a triangle\r\n   * @param p defines the vector to test\r\n   * @param p0 defines 1st triangle point\r\n   * @param p1 defines 2nd triangle point\r\n   * @param p2 defines 3rd triangle point\r\n   * @returns true if the point \"p\" is in the triangle defined by the vertors \"p0\", \"p1\", \"p2\"\r\n   */\n\n\n  Vector2.PointInTriangle = function (p, p0, p1, p2) {\n    var a = 1 / 2 * (-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y);\n    var sign = a < 0 ? -1 : 1;\n    var s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) * sign;\n    var t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) * sign;\n    return s > 0 && t > 0 && s + t < 2 * a * sign;\n  };\n  /**\r\n   * Gets the distance between the vectors \"value1\" and \"value2\"\r\n   * @param value1 defines first vector\r\n   * @param value2 defines second vector\r\n   * @returns the distance between vectors\r\n   */\n\n\n  Vector2.Distance = function (value1, value2) {\n    return Math.sqrt(Vector2.DistanceSquared(value1, value2));\n  };\n  /**\r\n   * Returns the squared distance between the vectors \"value1\" and \"value2\"\r\n   * @param value1 defines first vector\r\n   * @param value2 defines second vector\r\n   * @returns the squared distance between vectors\r\n   */\n\n\n  Vector2.DistanceSquared = function (value1, value2) {\n    var x = value1.x - value2.x;\n    var y = value1.y - value2.y;\n    return x * x + y * y;\n  };\n  /**\r\n   * Gets a new Vector2 located at the center of the vectors \"value1\" and \"value2\"\r\n   * @param value1 defines first vector\r\n   * @param value2 defines second vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Center = function (value1, value2) {\n    var center = value1.add(value2);\n    center.scaleInPlace(0.5);\n    return center;\n  };\n  /**\r\n   * Gets the shortest distance (float) between the point \"p\" and the segment defined by the two points \"segA\" and \"segB\".\r\n   * @param p defines the middle point\r\n   * @param segA defines one point of the segment\r\n   * @param segB defines the other point of the segment\r\n   * @returns the shortest distance\r\n   */\n\n\n  Vector2.DistanceOfPointFromSegment = function (p, segA, segB) {\n    var l2 = Vector2.DistanceSquared(segA, segB);\n\n    if (l2 === 0.0) {\n      return Vector2.Distance(p, segA);\n    }\n\n    var v = segB.subtract(segA);\n    var t = Math.max(0, Math.min(1, Vector2.Dot(p.subtract(segA), v) / l2));\n    var proj = segA.add(v.multiplyByFloats(t, t));\n    return Vector2.Distance(p, proj);\n  };\n\n  return Vector2;\n}();\n\nexport { Vector2 };\n/**\r\n * Class used to store (x,y,z) vector representation\r\n * A Vector3 is the main object used in 3D geometry\r\n * It can represent etiher the coordinates of a point the space, either a direction\r\n * Reminder: js uses a left handed forward facing system\r\n */\n\nvar Vector3 =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\r\n   * @param x defines the first coordinates (on X axis)\r\n   * @param y defines the second coordinates (on Y axis)\r\n   * @param z defines the third coordinates (on Z axis)\r\n   */\n  function Vector3(x, y, z) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    if (z === void 0) {\n      z = 0;\n    }\n    /** @hidden */\n\n\n    this._isDirty = true;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n  }\n\n  Object.defineProperty(Vector3.prototype, \"x\", {\n    /** Gets or sets the x coordinate */\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      this._x = value;\n      this._isDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Vector3.prototype, \"y\", {\n    /** Gets or sets the y coordinate */\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      this._y = value;\n      this._isDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Vector3.prototype, \"z\", {\n    /** Gets or sets the z coordinate */\n    get: function get() {\n      return this._z;\n    },\n    set: function set(value) {\n      this._z = value;\n      this._isDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Creates a string representation of the Vector3\r\n   * @returns a string with the Vector3 coordinates.\r\n   */\n\n  Vector3.prototype.toString = function () {\n    return \"{X: \" + this._x + \" Y:\" + this._y + \" Z:\" + this._z + \"}\";\n  };\n  /**\r\n   * Gets the class name\r\n   * @returns the string \"Vector3\"\r\n   */\n\n\n  Vector3.prototype.getClassName = function () {\n    return \"Vector3\";\n  };\n  /**\r\n   * Creates the Vector3 hash code\r\n   * @returns a number which tends to be unique between Vector3 instances\r\n   */\n\n\n  Vector3.prototype.getHashCode = function () {\n    var hash = this._x | 0;\n    hash = hash * 397 ^ (this._y | 0);\n    hash = hash * 397 ^ (this._z | 0);\n    return hash;\n  }; // Operators\n\n  /**\r\n   * Creates an array containing three elements : the coordinates of the Vector3\r\n   * @returns a new array of numbers\r\n   */\n\n\n  Vector3.prototype.asArray = function () {\n    var result = [];\n    this.toArray(result, 0);\n    return result;\n  };\n  /**\r\n   * Populates the given array or Float32Array from the given index with the successive coordinates of the Vector3\r\n   * @param array defines the destination array\r\n   * @param index defines the offset in the destination array\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.toArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    array[index] = this._x;\n    array[index + 1] = this._y;\n    array[index + 2] = this._z;\n    return this;\n  };\n  /**\r\n   * Update the current vector from an array\r\n   * @param array defines the destination array\r\n   * @param index defines the offset in the destination array\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.fromArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    Vector3.FromArrayToRef(array, index, this);\n    return this;\n  };\n  /**\r\n   * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)\r\n   * @returns a new Quaternion object, computed from the Vector3 coordinates\r\n   */\n\n\n  Vector3.prototype.toQuaternion = function () {\n    return Quaternion.RotationYawPitchRoll(this._y, this._x, this._z);\n  };\n  /**\r\n   * Adds the given vector to the current Vector3\r\n   * @param otherVector defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.addInPlace = function (otherVector) {\n    return this.addInPlaceFromFloats(otherVector._x, otherVector._y, otherVector._z);\n  };\n  /**\r\n   * Adds the given coordinates to the current Vector3\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.addInPlaceFromFloats = function (x, y, z) {\n    this.x += x;\n    this.y += y;\n    this.z += z;\n    return this;\n  };\n  /**\r\n   * Gets a new Vector3, result of the addition the current Vector3 and the given vector\r\n   * @param otherVector defines the second operand\r\n   * @returns the resulting Vector3\r\n   */\n\n\n  Vector3.prototype.add = function (otherVector) {\n    return new Vector3(this._x + otherVector._x, this._y + otherVector._y, this._z + otherVector._z);\n  };\n  /**\r\n   * Adds the current Vector3 to the given one and stores the result in the vector \"result\"\r\n   * @param otherVector defines the second operand\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.addToRef = function (otherVector, result) {\n    return result.copyFromFloats(this._x + otherVector._x, this._y + otherVector._y, this._z + otherVector._z);\n  };\n  /**\r\n   * Subtract the given vector from the current Vector3\r\n   * @param otherVector defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.subtractInPlace = function (otherVector) {\n    this.x -= otherVector._x;\n    this.y -= otherVector._y;\n    this.z -= otherVector._z;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3\r\n   * @param otherVector defines the second operand\r\n   * @returns the resulting Vector3\r\n   */\n\n\n  Vector3.prototype.subtract = function (otherVector) {\n    return new Vector3(this._x - otherVector._x, this._y - otherVector._y, this._z - otherVector._z);\n  };\n  /**\r\n   * Subtracts the given vector from the current Vector3 and stores the result in the vector \"result\".\r\n   * @param otherVector defines the second operand\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.subtractToRef = function (otherVector, result) {\n    return this.subtractFromFloatsToRef(otherVector._x, otherVector._y, otherVector._z, result);\n  };\n  /**\r\n   * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the resulting Vector3\r\n   */\n\n\n  Vector3.prototype.subtractFromFloats = function (x, y, z) {\n    return new Vector3(this._x - x, this._y - y, this._z - z);\n  };\n  /**\r\n   * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.subtractFromFloatsToRef = function (x, y, z, result) {\n    return result.copyFromFloats(this._x - x, this._y - y, this._z - z);\n  };\n  /**\r\n   * Gets a new Vector3 set with the current Vector3 negated coordinates\r\n   * @returns a new Vector3\r\n   */\n\n\n  Vector3.prototype.negate = function () {\n    return new Vector3(-this._x, -this._y, -this._z);\n  };\n  /**\r\n   * Negate this vector in place\r\n   * @returns this\r\n   */\n\n\n  Vector3.prototype.negateInPlace = function () {\n    this.x *= -1;\n    this.y *= -1;\n    this.z *= -1;\n    return this;\n  };\n  /**\r\n   * Negate the current Vector3 and stores the result in the given vector \"result\" coordinates\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.negateToRef = function (result) {\n    return result.copyFromFloats(this._x * -1, this._y * -1, this._z * -1);\n  };\n  /**\r\n   * Multiplies the Vector3 coordinates by the float \"scale\"\r\n   * @param scale defines the multiplier factor\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.scaleInPlace = function (scale) {\n    this.x *= scale;\n    this.y *= scale;\n    this.z *= scale;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\r\n   * @param scale defines the multiplier factor\r\n   * @returns a new Vector3\r\n   */\n\n\n  Vector3.prototype.scale = function (scale) {\n    return new Vector3(this._x * scale, this._y * scale, this._z * scale);\n  };\n  /**\r\n   * Multiplies the current Vector3 coordinates by the float \"scale\" and stores the result in the given vector \"result\" coordinates\r\n   * @param scale defines the multiplier factor\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.scaleToRef = function (scale, result) {\n    return result.copyFromFloats(this._x * scale, this._y * scale, this._z * scale);\n  };\n  /**\r\n   * Scale the current Vector3 values by a factor and add the result to a given Vector3\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the unmodified current Vector3\r\n   */\n\n\n  Vector3.prototype.scaleAndAddToRef = function (scale, result) {\n    return result.addInPlaceFromFloats(this._x * scale, this._y * scale, this._z * scale);\n  };\n  /**\r\n   * Projects the current vector3 to a plane along a ray starting from a specified origin and directed towards the point.\r\n   * @param origin defines the origin of the projection ray\r\n   * @param plane defines the plane to project to\r\n   * @returns the projected vector3\r\n   */\n\n\n  Vector3.prototype.projectOnPlane = function (plane, origin) {\n    var result = Vector3.Zero();\n    this.projectOnPlaneToRef(plane, origin, result);\n    return result;\n  };\n  /**\r\n   * Projects the current vector3 to a plane along a ray starting from a specified origin and directed towards the point.\r\n   * @param origin defines the origin of the projection ray\r\n   * @param plane defines the plane to project to\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.prototype.projectOnPlaneToRef = function (plane, origin, result) {\n    var n = plane.normal;\n    var d = plane.d;\n    var V = MathTmp.Vector3[0]; // ray direction\n\n    this.subtractToRef(origin, V);\n    V.normalize();\n    var denom = Vector3.Dot(V, n);\n    var t = -(Vector3.Dot(origin, n) + d) / denom; // P = P0 + t*V\n\n    var scaledV = V.scaleInPlace(t);\n    origin.addToRef(scaledV, result);\n  };\n  /**\r\n   * Returns true if the current Vector3 and the given vector coordinates are strictly equal\r\n   * @param otherVector defines the second operand\r\n   * @returns true if both vectors are equals\r\n   */\n\n\n  Vector3.prototype.equals = function (otherVector) {\n    return otherVector && this._x === otherVector._x && this._y === otherVector._y && this._z === otherVector._z;\n  };\n  /**\r\n   * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\r\n   * @param otherVector defines the second operand\r\n   * @param epsilon defines the minimal distance to define values as equals\r\n   * @returns true if both vectors are distant less than epsilon\r\n   */\n\n\n  Vector3.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\n    if (epsilon === void 0) {\n      epsilon = Epsilon;\n    }\n\n    return otherVector && Scalar.WithinEpsilon(this._x, otherVector._x, epsilon) && Scalar.WithinEpsilon(this._y, otherVector._y, epsilon) && Scalar.WithinEpsilon(this._z, otherVector._z, epsilon);\n  };\n  /**\r\n   * Returns true if the current Vector3 coordinates equals the given floats\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns true if both vectors are equals\r\n   */\n\n\n  Vector3.prototype.equalsToFloats = function (x, y, z) {\n    return this._x === x && this._y === y && this._z === z;\n  };\n  /**\r\n   * Multiplies the current Vector3 coordinates by the given ones\r\n   * @param otherVector defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.multiplyInPlace = function (otherVector) {\n    this.x *= otherVector._x;\n    this.y *= otherVector._y;\n    this.z *= otherVector._z;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector\r\n   * @param otherVector defines the second operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.prototype.multiply = function (otherVector) {\n    return this.multiplyByFloats(otherVector._x, otherVector._y, otherVector._z);\n  };\n  /**\r\n   * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\r\n   * @param otherVector defines the second operand\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.multiplyToRef = function (otherVector, result) {\n    return result.copyFromFloats(this._x * otherVector._x, this._y * otherVector._y, this._z * otherVector._z);\n  };\n  /**\r\n   * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.prototype.multiplyByFloats = function (x, y, z) {\n    return new Vector3(this._x * x, this._y * y, this._z * z);\n  };\n  /**\r\n   * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\r\n   * @param otherVector defines the second operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.prototype.divide = function (otherVector) {\n    return new Vector3(this._x / otherVector._x, this._y / otherVector._y, this._z / otherVector._z);\n  };\n  /**\r\n   * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\r\n   * @param otherVector defines the second operand\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.divideToRef = function (otherVector, result) {\n    return result.copyFromFloats(this._x / otherVector._x, this._y / otherVector._y, this._z / otherVector._z);\n  };\n  /**\r\n   * Divides the current Vector3 coordinates by the given ones.\r\n   * @param otherVector defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.divideInPlace = function (otherVector) {\n    return this.divideToRef(otherVector, this);\n  };\n  /**\r\n   * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones\r\n   * @param other defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.minimizeInPlace = function (other) {\n    return this.minimizeInPlaceFromFloats(other._x, other._y, other._z);\n  };\n  /**\r\n   * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.\r\n   * @param other defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.maximizeInPlace = function (other) {\n    return this.maximizeInPlaceFromFloats(other._x, other._y, other._z);\n  };\n  /**\r\n   * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.minimizeInPlaceFromFloats = function (x, y, z) {\n    if (x < this._x) {\n      this.x = x;\n    }\n\n    if (y < this._y) {\n      this.y = y;\n    }\n\n    if (z < this._z) {\n      this.z = z;\n    }\n\n    return this;\n  };\n  /**\r\n   * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.maximizeInPlaceFromFloats = function (x, y, z) {\n    if (x > this._x) {\n      this.x = x;\n    }\n\n    if (y > this._y) {\n      this.y = y;\n    }\n\n    if (z > this._z) {\n      this.z = z;\n    }\n\n    return this;\n  };\n  /**\r\n   * Due to float precision, scale of a mesh could be uniform but float values are off by a small fraction\r\n   * Check if is non uniform within a certain amount of decimal places to account for this\r\n   * @param epsilon the amount the values can differ\r\n   * @returns if the the vector is non uniform to a certain number of decimal places\r\n   */\n\n\n  Vector3.prototype.isNonUniformWithinEpsilon = function (epsilon) {\n    var absX = Math.abs(this._x);\n    var absY = Math.abs(this._y);\n\n    if (!Scalar.WithinEpsilon(absX, absY, epsilon)) {\n      return true;\n    }\n\n    var absZ = Math.abs(this._z);\n\n    if (!Scalar.WithinEpsilon(absX, absZ, epsilon)) {\n      return true;\n    }\n\n    if (!Scalar.WithinEpsilon(absY, absZ, epsilon)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Vector3.prototype, \"isNonUniform\", {\n    /**\r\n     * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\r\n     */\n    get: function get() {\n      var absX = Math.abs(this._x);\n      var absY = Math.abs(this._y);\n\n      if (absX !== absY) {\n        return true;\n      }\n\n      var absZ = Math.abs(this._z);\n\n      if (absX !== absZ) {\n        return true;\n      }\n\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets a new Vector3 from current Vector3 floored values\r\n   * @returns a new Vector3\r\n   */\n\n  Vector3.prototype.floor = function () {\n    return new Vector3(Math.floor(this._x), Math.floor(this._y), Math.floor(this._z));\n  };\n  /**\r\n   * Gets a new Vector3 from current Vector3 floored values\r\n   * @returns a new Vector3\r\n   */\n\n\n  Vector3.prototype.fract = function () {\n    return new Vector3(this._x - Math.floor(this._x), this._y - Math.floor(this._y), this._z - Math.floor(this._z));\n  }; // Properties\n\n  /**\r\n   * Gets the length of the Vector3\r\n   * @returns the length of the Vector3\r\n   */\n\n\n  Vector3.prototype.length = function () {\n    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z);\n  };\n  /**\r\n   * Gets the squared length of the Vector3\r\n   * @returns squared length of the Vector3\r\n   */\n\n\n  Vector3.prototype.lengthSquared = function () {\n    return this._x * this._x + this._y * this._y + this._z * this._z;\n  };\n  /**\r\n   * Normalize the current Vector3.\r\n   * Please note that this is an in place operation.\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.normalize = function () {\n    return this.normalizeFromLength(this.length());\n  };\n  /**\r\n   * Reorders the x y z properties of the vector in place\r\n   * @param order new ordering of the properties (eg. for vector 1,2,3 with \"ZYX\" will produce 3,2,1)\r\n   * @returns the current updated vector\r\n   */\n\n\n  Vector3.prototype.reorderInPlace = function (order) {\n    var _this = this;\n\n    order = order.toLowerCase();\n\n    if (order === \"xyz\") {\n      return this;\n    }\n\n    MathTmp.Vector3[0].copyFrom(this);\n    [\"x\", \"y\", \"z\"].forEach(function (val, i) {\n      _this[val] = MathTmp.Vector3[0][order[i]];\n    });\n    return this;\n  };\n  /**\r\n   * Rotates the vector around 0,0,0 by a quaternion\r\n   * @param quaternion the rotation quaternion\r\n   * @param result vector to store the result\r\n   * @returns the resulting vector\r\n   */\n\n\n  Vector3.prototype.rotateByQuaternionToRef = function (quaternion, result) {\n    quaternion.toRotationMatrix(MathTmp.Matrix[0]);\n    Vector3.TransformCoordinatesToRef(this, MathTmp.Matrix[0], result);\n    return result;\n  };\n  /**\r\n   * Rotates a vector around a given point\r\n   * @param quaternion the rotation quaternion\r\n   * @param point the point to rotate around\r\n   * @param result vector to store the result\r\n   * @returns the resulting vector\r\n   */\n\n\n  Vector3.prototype.rotateByQuaternionAroundPointToRef = function (quaternion, point, result) {\n    this.subtractToRef(point, MathTmp.Vector3[0]);\n    MathTmp.Vector3[0].rotateByQuaternionToRef(quaternion, MathTmp.Vector3[0]);\n    point.addToRef(MathTmp.Vector3[0], result);\n    return result;\n  };\n  /**\r\n   * Returns a new Vector3 as the cross product of the current vector and the \"other\" one\r\n   * The cross product is then orthogonal to both current and \"other\"\r\n   * @param other defines the right operand\r\n   * @returns the cross product\r\n   */\n\n\n  Vector3.prototype.cross = function (other) {\n    return Vector3.Cross(this, other);\n  };\n  /**\r\n   * Normalize the current Vector3 with the given input length.\r\n   * Please note that this is an in place operation.\r\n   * @param len the length of the vector\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.normalizeFromLength = function (len) {\n    if (len === 0 || len === 1.0) {\n      return this;\n    }\n\n    return this.scaleInPlace(1.0 / len);\n  };\n  /**\r\n   * Normalize the current Vector3 to a new vector\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.prototype.normalizeToNew = function () {\n    var normalized = new Vector3(0, 0, 0);\n    this.normalizeToRef(normalized);\n    return normalized;\n  };\n  /**\r\n   * Normalize the current Vector3 to the reference\r\n   * @param reference define the Vector3 to update\r\n   * @returns the updated Vector3\r\n   */\n\n\n  Vector3.prototype.normalizeToRef = function (reference) {\n    var len = this.length();\n\n    if (len === 0 || len === 1.0) {\n      return reference.copyFromFloats(this._x, this._y, this._z);\n    }\n\n    return this.scaleToRef(1.0 / len, reference);\n  };\n  /**\r\n   * Creates a new Vector3 copied from the current Vector3\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.prototype.clone = function () {\n    return new Vector3(this._x, this._y, this._z);\n  };\n  /**\r\n   * Copies the given vector coordinates to the current Vector3 ones\r\n   * @param source defines the source Vector3\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.copyFrom = function (source) {\n    return this.copyFromFloats(source._x, source._y, source._z);\n  };\n  /**\r\n   * Copies the given floats to the current Vector3 coordinates\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.copyFromFloats = function (x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  };\n  /**\r\n   * Copies the given floats to the current Vector3 coordinates\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.set = function (x, y, z) {\n    return this.copyFromFloats(x, y, z);\n  };\n  /**\r\n   * Copies the given float to the current Vector3 coordinates\r\n   * @param v defines the x, y and z coordinates of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.setAll = function (v) {\n    this.x = this.y = this.z = v;\n    return this;\n  }; // Statics\n\n  /**\r\n   * Get the clip factor between two vectors\r\n   * @param vector0 defines the first operand\r\n   * @param vector1 defines the second operand\r\n   * @param axis defines the axis to use\r\n   * @param size defines the size along the axis\r\n   * @returns the clip factor\r\n   */\n\n\n  Vector3.GetClipFactor = function (vector0, vector1, axis, size) {\n    var d0 = Vector3.Dot(vector0, axis) - size;\n    var d1 = Vector3.Dot(vector1, axis) - size;\n    var s = d0 / (d0 - d1);\n    return s;\n  };\n  /**\r\n   * Get angle between two vectors\r\n   * @param vector0 angle between vector0 and vector1\r\n   * @param vector1 angle between vector0 and vector1\r\n   * @param normal direction of the normal\r\n   * @return the angle between vector0 and vector1\r\n   */\n\n\n  Vector3.GetAngleBetweenVectors = function (vector0, vector1, normal) {\n    var v0 = vector0.normalizeToRef(MathTmp.Vector3[1]);\n    var v1 = vector1.normalizeToRef(MathTmp.Vector3[2]);\n    var dot = Vector3.Dot(v0, v1);\n    var n = MathTmp.Vector3[3];\n    Vector3.CrossToRef(v0, v1, n);\n\n    if (Vector3.Dot(n, normal) > 0) {\n      return Math.acos(dot);\n    }\n\n    return -Math.acos(dot);\n  };\n  /**\r\n   * Returns a new Vector3 set from the index \"offset\" of the given array\r\n   * @param array defines the source array\r\n   * @param offset defines the offset in the source array\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.FromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    return new Vector3(array[offset], array[offset + 1], array[offset + 2]);\n  };\n  /**\r\n   * Returns a new Vector3 set from the index \"offset\" of the given Float32Array\r\n   * @param array defines the source array\r\n   * @param offset defines the offset in the source array\r\n   * @returns the new Vector3\r\n   * @deprecated Please use FromArray instead.\r\n   */\n\n\n  Vector3.FromFloatArray = function (array, offset) {\n    return Vector3.FromArray(array, offset);\n  };\n  /**\r\n   * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\r\n   * @param array defines the source array\r\n   * @param offset defines the offset in the source array\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.FromArrayToRef = function (array, offset, result) {\n    result.x = array[offset];\n    result.y = array[offset + 1];\n    result.z = array[offset + 2];\n  };\n  /**\r\n   * Sets the given vector \"result\" with the element values from the index \"offset\" of the given Float32Array\r\n   * @param array defines the source array\r\n   * @param offset defines the offset in the source array\r\n   * @param result defines the Vector3 where to store the result\r\n   * @deprecated Please use FromArrayToRef instead.\r\n   */\n\n\n  Vector3.FromFloatArrayToRef = function (array, offset, result) {\n    return Vector3.FromArrayToRef(array, offset, result);\n  };\n  /**\r\n   * Sets the given vector \"result\" with the given floats.\r\n   * @param x defines the x coordinate of the source\r\n   * @param y defines the y coordinate of the source\r\n   * @param z defines the z coordinate of the source\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.FromFloatsToRef = function (x, y, z, result) {\n    result.copyFromFloats(x, y, z);\n  };\n  /**\r\n   * Returns a new Vector3 set to (0.0, 0.0, 0.0)\r\n   * @returns a new empty Vector3\r\n   */\n\n\n  Vector3.Zero = function () {\n    return new Vector3(0.0, 0.0, 0.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (1.0, 1.0, 1.0)\r\n   * @returns a new unit Vector3\r\n   */\n\n\n  Vector3.One = function () {\n    return new Vector3(1.0, 1.0, 1.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (0.0, 1.0, 0.0)\r\n   * @returns a new up Vector3\r\n   */\n\n\n  Vector3.Up = function () {\n    return new Vector3(0.0, 1.0, 0.0);\n  };\n\n  Object.defineProperty(Vector3, \"UpReadOnly\", {\n    /**\r\n     * Gets a up Vector3 that must not be updated\r\n     */\n    get: function get() {\n      return Vector3._UpReadOnly;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Vector3, \"ZeroReadOnly\", {\n    /**\r\n     * Gets a zero Vector3 that must not be updated\r\n     */\n    get: function get() {\n      return Vector3._ZeroReadOnly;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns a new Vector3 set to (0.0, -1.0, 0.0)\r\n   * @returns a new down Vector3\r\n   */\n\n  Vector3.Down = function () {\n    return new Vector3(0.0, -1.0, 0.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (0.0, 0.0, 1.0)\r\n   * @param rightHandedSystem is the scene right-handed (negative z)\r\n   * @returns a new forward Vector3\r\n   */\n\n\n  Vector3.Forward = function (rightHandedSystem) {\n    if (rightHandedSystem === void 0) {\n      rightHandedSystem = false;\n    }\n\n    return new Vector3(0.0, 0.0, rightHandedSystem ? -1.0 : 1.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (0.0, 0.0, -1.0)\r\n   * @param rightHandedSystem is the scene right-handed (negative-z)\r\n   * @returns a new forward Vector3\r\n   */\n\n\n  Vector3.Backward = function (rightHandedSystem) {\n    if (rightHandedSystem === void 0) {\n      rightHandedSystem = false;\n    }\n\n    return new Vector3(0.0, 0.0, rightHandedSystem ? 1.0 : -1.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (1.0, 0.0, 0.0)\r\n   * @returns a new right Vector3\r\n   */\n\n\n  Vector3.Right = function () {\n    return new Vector3(1.0, 0.0, 0.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\r\n   * @returns a new left Vector3\r\n   */\n\n\n  Vector3.Left = function () {\n    return new Vector3(-1.0, 0.0, 0.0);\n  };\n  /**\r\n   * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector.\r\n   * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\r\n   * @param vector defines the Vector3 to transform\r\n   * @param transformation defines the transformation matrix\r\n   * @returns the transformed Vector3\r\n   */\n\n\n  Vector3.TransformCoordinates = function (vector, transformation) {\n    var result = Vector3.Zero();\n    Vector3.TransformCoordinatesToRef(vector, transformation, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector\r\n   * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\r\n   * @param vector defines the Vector3 to transform\r\n   * @param transformation defines the transformation matrix\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.TransformCoordinatesToRef = function (vector, transformation, result) {\n    Vector3.TransformCoordinatesFromFloatsToRef(vector._x, vector._y, vector._z, transformation, result);\n  };\n  /**\r\n   * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\r\n   * This method computes tranformed coordinates only, not transformed direction vectors\r\n   * @param x define the x coordinate of the source vector\r\n   * @param y define the y coordinate of the source vector\r\n   * @param z define the z coordinate of the source vector\r\n   * @param transformation defines the transformation matrix\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.TransformCoordinatesFromFloatsToRef = function (x, y, z, transformation, result) {\n    var m = transformation.m;\n    var rx = x * m[0] + y * m[4] + z * m[8] + m[12];\n    var ry = x * m[1] + y * m[5] + z * m[9] + m[13];\n    var rz = x * m[2] + y * m[6] + z * m[10] + m[14];\n    var rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);\n    result.x = rx * rw;\n    result.y = ry * rw;\n    result.z = rz * rw;\n  };\n  /**\r\n   * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector\r\n   * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\r\n   * @param vector defines the Vector3 to transform\r\n   * @param transformation defines the transformation matrix\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.TransformNormal = function (vector, transformation) {\n    var result = Vector3.Zero();\n    Vector3.TransformNormalToRef(vector, transformation, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector\r\n   * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\r\n   * @param vector defines the Vector3 to transform\r\n   * @param transformation defines the transformation matrix\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.TransformNormalToRef = function (vector, transformation, result) {\n    this.TransformNormalFromFloatsToRef(vector._x, vector._y, vector._z, transformation, result);\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z)\r\n   * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\r\n   * @param x define the x coordinate of the source vector\r\n   * @param y define the y coordinate of the source vector\r\n   * @param z define the z coordinate of the source vector\r\n   * @param transformation defines the transformation matrix\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.TransformNormalFromFloatsToRef = function (x, y, z, transformation, result) {\n    var m = transformation.m;\n    result.x = x * m[0] + y * m[4] + z * m[8];\n    result.y = x * m[1] + y * m[5] + z * m[9];\n    result.z = x * m[2] + y * m[6] + z * m[10];\n  };\n  /**\r\n   * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\r\n   * @param value1 defines the first control point\r\n   * @param value2 defines the second control point\r\n   * @param value3 defines the third control point\r\n   * @param value4 defines the fourth control point\r\n   * @param amount defines the amount on the spline to use\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.CatmullRom = function (value1, value2, value3, value4, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var x = 0.5 * (2.0 * value2._x + (-value1._x + value3._x) * amount + (2.0 * value1._x - 5.0 * value2._x + 4.0 * value3._x - value4._x) * squared + (-value1._x + 3.0 * value2._x - 3.0 * value3._x + value4._x) * cubed);\n    var y = 0.5 * (2.0 * value2._y + (-value1._y + value3._y) * amount + (2.0 * value1._y - 5.0 * value2._y + 4.0 * value3._y - value4._y) * squared + (-value1._y + 3.0 * value2._y - 3.0 * value3._y + value4._y) * cubed);\n    var z = 0.5 * (2.0 * value2._z + (-value1._z + value3._z) * amount + (2.0 * value1._z - 5.0 * value2._z + 4.0 * value3._z - value4._z) * squared + (-value1._z + 3.0 * value2._z - 3.0 * value3._z + value4._z) * cubed);\n    return new Vector3(x, y, z);\n  };\n  /**\r\n   * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\r\n   * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\r\n   * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\r\n   * @param value defines the current value\r\n   * @param min defines the lower range value\r\n   * @param max defines the upper range value\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Clamp = function (value, min, max) {\n    var v = new Vector3();\n    Vector3.ClampToRef(value, min, max, v);\n    return v;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\r\n   * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\r\n   * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\r\n   * @param value defines the current value\r\n   * @param min defines the lower range value\r\n   * @param max defines the upper range value\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.ClampToRef = function (value, min, max, result) {\n    var x = value._x;\n    x = x > max._x ? max._x : x;\n    x = x < min._x ? min._x : x;\n    var y = value._y;\n    y = y > max._y ? max._y : y;\n    y = y < min._y ? min._y : y;\n    var z = value._z;\n    z = z > max._z ? max._z : z;\n    z = z < min._z ? min._z : z;\n    result.copyFromFloats(x, y, z);\n  };\n  /**\r\n   * Checks if a given vector is inside a specific range\r\n   * @param v defines the vector to test\r\n   * @param min defines the minimum range\r\n   * @param max defines the maximum range\r\n   */\n\n\n  Vector3.CheckExtends = function (v, min, max) {\n    min.minimizeInPlace(v);\n    max.maximizeInPlace(v);\n  };\n  /**\r\n   * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\r\n   * @param value1 defines the first control point\r\n   * @param tangent1 defines the first tangent vector\r\n   * @param value2 defines the second control point\r\n   * @param tangent2 defines the second tangent vector\r\n   * @param amount defines the amount on the interpolation spline (between 0 and 1)\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    var part2 = -2.0 * cubed + 3.0 * squared;\n    var part3 = cubed - 2.0 * squared + amount;\n    var part4 = cubed - squared;\n    var x = value1._x * part1 + value2._x * part2 + tangent1._x * part3 + tangent2._x * part4;\n    var y = value1._y * part1 + value2._y * part2 + tangent1._y * part3 + tangent2._y * part4;\n    var z = value1._z * part1 + value2._z * part2 + tangent1._z * part3 + tangent2._z * part4;\n    return new Vector3(x, y, z);\n  };\n  /**\r\n   * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\r\n   * @param start defines the start value\r\n   * @param end defines the end value\r\n   * @param amount max defines amount between both (between 0 and 1)\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Lerp = function (start, end, amount) {\n    var result = new Vector3(0, 0, 0);\n    Vector3.LerpToRef(start, end, amount, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\r\n   * @param start defines the start value\r\n   * @param end defines the end value\r\n   * @param amount max defines amount between both (between 0 and 1)\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.LerpToRef = function (start, end, amount, result) {\n    result.x = start._x + (end._x - start._x) * amount;\n    result.y = start._y + (end._y - start._y) * amount;\n    result.z = start._z + (end._z - start._z) * amount;\n  };\n  /**\r\n   * Returns the dot product (float) between the vectors \"left\" and \"right\"\r\n   * @param left defines the left operand\r\n   * @param right defines the right operand\r\n   * @returns the dot product\r\n   */\n\n\n  Vector3.Dot = function (left, right) {\n    return left._x * right._x + left._y * right._y + left._z * right._z;\n  };\n  /**\r\n   * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\"\r\n   * The cross product is then orthogonal to both \"left\" and \"right\"\r\n   * @param left defines the left operand\r\n   * @param right defines the right operand\r\n   * @returns the cross product\r\n   */\n\n\n  Vector3.Cross = function (left, right) {\n    var result = Vector3.Zero();\n    Vector3.CrossToRef(left, right, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the cross product of \"left\" and \"right\"\r\n   * The cross product is then orthogonal to both \"left\" and \"right\"\r\n   * @param left defines the left operand\r\n   * @param right defines the right operand\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.CrossToRef = function (left, right, result) {\n    var x = left._y * right._z - left._z * right._y;\n    var y = left._z * right._x - left._x * right._z;\n    var z = left._x * right._y - left._y * right._x;\n    result.copyFromFloats(x, y, z);\n  };\n  /**\r\n   * Returns a new Vector3 as the normalization of the given vector\r\n   * @param vector defines the Vector3 to normalize\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Normalize = function (vector) {\n    var result = Vector3.Zero();\n    Vector3.NormalizeToRef(vector, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the normalization of the given first vector\r\n   * @param vector defines the Vector3 to normalize\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.NormalizeToRef = function (vector, result) {\n    vector.normalizeToRef(result);\n  };\n  /**\r\n   * Project a Vector3 onto screen space\r\n   * @param vector defines the Vector3 to project\r\n   * @param world defines the world matrix to use\r\n   * @param transform defines the transform (view x projection) matrix to use\r\n   * @param viewport defines the screen viewport to use\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Project = function (vector, world, transform, viewport) {\n    var result = new Vector3();\n    Vector3.ProjectToRef(vector, world, transform, viewport, result);\n    return result;\n  };\n  /**\r\n   * Project a Vector3 onto screen space to reference\r\n   * @param vector defines the Vector3 to project\r\n   * @param world defines the world matrix to use\r\n   * @param transform defines the transform (view x projection) matrix to use\r\n   * @param viewport defines the screen viewport to use\r\n   * @param result the vector in which the screen space will be stored\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.ProjectToRef = function (vector, world, transform, viewport, result) {\n    var cw = viewport.width;\n    var ch = viewport.height;\n    var cx = viewport.x;\n    var cy = viewport.y;\n    var viewportMatrix = MathTmp.Matrix[1];\n    Matrix.FromValuesToRef(cw / 2.0, 0, 0, 0, 0, -ch / 2.0, 0, 0, 0, 0, 0.5, 0, cx + cw / 2.0, ch / 2.0 + cy, 0.5, 1, viewportMatrix);\n    var matrix = MathTmp.Matrix[0];\n    world.multiplyToRef(transform, matrix);\n    matrix.multiplyToRef(viewportMatrix, matrix);\n    Vector3.TransformCoordinatesToRef(vector, matrix, result);\n    return result;\n  };\n  /** @hidden */\n\n\n  Vector3._UnprojectFromInvertedMatrixToRef = function (source, matrix, result) {\n    Vector3.TransformCoordinatesToRef(source, matrix, result);\n    var m = matrix.m;\n    var num = source._x * m[3] + source._y * m[7] + source._z * m[11] + m[15];\n\n    if (Scalar.WithinEpsilon(num, 1.0)) {\n      result.scaleInPlace(1.0 / num);\n    }\n  };\n  /**\r\n   * Unproject from screen space to object space\r\n   * @param source defines the screen space Vector3 to use\r\n   * @param viewportWidth defines the current width of the viewport\r\n   * @param viewportHeight defines the current height of the viewport\r\n   * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n   * @param transform defines the transform (view x projection) matrix to use\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.UnprojectFromTransform = function (source, viewportWidth, viewportHeight, world, transform) {\n    var matrix = MathTmp.Matrix[0];\n    world.multiplyToRef(transform, matrix);\n    matrix.invert();\n    source.x = source._x / viewportWidth * 2 - 1;\n    source.y = -(source._y / viewportHeight * 2 - 1);\n    var vector = new Vector3();\n\n    Vector3._UnprojectFromInvertedMatrixToRef(source, matrix, vector);\n\n    return vector;\n  };\n  /**\r\n   * Unproject from screen space to object space\r\n   * @param source defines the screen space Vector3 to use\r\n   * @param viewportWidth defines the current width of the viewport\r\n   * @param viewportHeight defines the current height of the viewport\r\n   * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n   * @param view defines the view matrix to use\r\n   * @param projection defines the projection matrix to use\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Unproject = function (source, viewportWidth, viewportHeight, world, view, projection) {\n    var result = Vector3.Zero();\n    Vector3.UnprojectToRef(source, viewportWidth, viewportHeight, world, view, projection, result);\n    return result;\n  };\n  /**\r\n   * Unproject from screen space to object space\r\n   * @param source defines the screen space Vector3 to use\r\n   * @param viewportWidth defines the current width of the viewport\r\n   * @param viewportHeight defines the current height of the viewport\r\n   * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n   * @param view defines the view matrix to use\r\n   * @param projection defines the projection matrix to use\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.UnprojectToRef = function (source, viewportWidth, viewportHeight, world, view, projection, result) {\n    Vector3.UnprojectFloatsToRef(source._x, source._y, source._z, viewportWidth, viewportHeight, world, view, projection, result);\n  };\n  /**\r\n   * Unproject from screen space to object space\r\n   * @param sourceX defines the screen space x coordinate to use\r\n   * @param sourceY defines the screen space y coordinate to use\r\n   * @param sourceZ defines the screen space z coordinate to use\r\n   * @param viewportWidth defines the current width of the viewport\r\n   * @param viewportHeight defines the current height of the viewport\r\n   * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n   * @param view defines the view matrix to use\r\n   * @param projection defines the projection matrix to use\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.UnprojectFloatsToRef = function (sourceX, sourceY, sourceZ, viewportWidth, viewportHeight, world, view, projection, result) {\n    var matrix = MathTmp.Matrix[0];\n    world.multiplyToRef(view, matrix);\n    matrix.multiplyToRef(projection, matrix);\n    matrix.invert();\n    var screenSource = MathTmp.Vector3[0];\n    screenSource.x = sourceX / viewportWidth * 2 - 1;\n    screenSource.y = -(sourceY / viewportHeight * 2 - 1);\n    screenSource.z = 2 * sourceZ - 1.0;\n\n    Vector3._UnprojectFromInvertedMatrixToRef(screenSource, matrix, result);\n  };\n  /**\r\n   * Gets the minimal coordinate values between two Vector3\r\n   * @param left defines the first operand\r\n   * @param right defines the second operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Minimize = function (left, right) {\n    var min = left.clone();\n    min.minimizeInPlace(right);\n    return min;\n  };\n  /**\r\n   * Gets the maximal coordinate values between two Vector3\r\n   * @param left defines the first operand\r\n   * @param right defines the second operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Maximize = function (left, right) {\n    var max = left.clone();\n    max.maximizeInPlace(right);\n    return max;\n  };\n  /**\r\n   * Returns the distance between the vectors \"value1\" and \"value2\"\r\n   * @param value1 defines the first operand\r\n   * @param value2 defines the second operand\r\n   * @returns the distance\r\n   */\n\n\n  Vector3.Distance = function (value1, value2) {\n    return Math.sqrt(Vector3.DistanceSquared(value1, value2));\n  };\n  /**\r\n   * Returns the squared distance between the vectors \"value1\" and \"value2\"\r\n   * @param value1 defines the first operand\r\n   * @param value2 defines the second operand\r\n   * @returns the squared distance\r\n   */\n\n\n  Vector3.DistanceSquared = function (value1, value2) {\n    var x = value1._x - value2._x;\n    var y = value1._y - value2._y;\n    var z = value1._z - value2._z;\n    return x * x + y * y + z * z;\n  };\n  /**\r\n   * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\r\n   * @param value1 defines the first operand\r\n   * @param value2 defines the second operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Center = function (value1, value2) {\n    var center = value1.add(value2);\n    center.scaleInPlace(0.5);\n    return center;\n  };\n  /**\r\n   * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\r\n   * RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\r\n   * to something in order to rotate it from its local system to the given target system\r\n   * Note: axis1, axis2 and axis3 are normalized during this operation\r\n   * @param axis1 defines the first axis\r\n   * @param axis2 defines the second axis\r\n   * @param axis3 defines the third axis\r\n   * @returns a new Vector3\r\n   */\n\n\n  Vector3.RotationFromAxis = function (axis1, axis2, axis3) {\n    var rotation = Vector3.Zero();\n    Vector3.RotationFromAxisToRef(axis1, axis2, axis3, rotation);\n    return rotation;\n  };\n  /**\r\n   * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\r\n   * @param axis1 defines the first axis\r\n   * @param axis2 defines the second axis\r\n   * @param axis3 defines the third axis\r\n   * @param ref defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.RotationFromAxisToRef = function (axis1, axis2, axis3, ref) {\n    var quat = MathTmp.Quaternion[0];\n    Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n    quat.toEulerAnglesToRef(ref);\n  };\n\n  Vector3._UpReadOnly = Vector3.Up();\n  Vector3._ZeroReadOnly = Vector3.Zero();\n  return Vector3;\n}();\n\nexport { Vector3 };\n/**\r\n * Vector4 class created for EulerAngle class conversion to Quaternion\r\n */\n\nvar Vector4 =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a Vector4 object from the given floats.\r\n   * @param x x value of the vector\r\n   * @param y y value of the vector\r\n   * @param z z value of the vector\r\n   * @param w w value of the vector\r\n   */\n  function Vector4(\n  /** x value of the vector */\n  x,\n  /** y value of the vector */\n  y,\n  /** z value of the vector */\n  z,\n  /** w value of the vector */\n  w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  /**\r\n   * Returns the string with the Vector4 coordinates.\r\n   * @returns a string containing all the vector values\r\n   */\n\n\n  Vector4.prototype.toString = function () {\n    return \"{X: \" + this.x + \" Y:\" + this.y + \" Z:\" + this.z + \" W:\" + this.w + \"}\";\n  };\n  /**\r\n   * Returns the string \"Vector4\".\r\n   * @returns \"Vector4\"\r\n   */\n\n\n  Vector4.prototype.getClassName = function () {\n    return \"Vector4\";\n  };\n  /**\r\n   * Returns the Vector4 hash code.\r\n   * @returns a unique hash code\r\n   */\n\n\n  Vector4.prototype.getHashCode = function () {\n    var hash = this.x | 0;\n    hash = hash * 397 ^ (this.y | 0);\n    hash = hash * 397 ^ (this.z | 0);\n    hash = hash * 397 ^ (this.w | 0);\n    return hash;\n  }; // Operators\n\n  /**\r\n   * Returns a new array populated with 4 elements : the Vector4 coordinates.\r\n   * @returns the resulting array\r\n   */\n\n\n  Vector4.prototype.asArray = function () {\n    var result = new Array();\n    this.toArray(result, 0);\n    return result;\n  };\n  /**\r\n   * Populates the given array from the given index with the Vector4 coordinates.\r\n   * @param array array to populate\r\n   * @param index index of the array to start at (default: 0)\r\n   * @returns the Vector4.\r\n   */\n\n\n  Vector4.prototype.toArray = function (array, index) {\n    if (index === undefined) {\n      index = 0;\n    }\n\n    array[index] = this.x;\n    array[index + 1] = this.y;\n    array[index + 2] = this.z;\n    array[index + 3] = this.w;\n    return this;\n  };\n  /**\r\n   * Update the current vector from an array\r\n   * @param array defines the destination array\r\n   * @param index defines the offset in the destination array\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector4.prototype.fromArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    Vector4.FromArrayToRef(array, index, this);\n    return this;\n  };\n  /**\r\n   * Adds the given vector to the current Vector4.\r\n   * @param otherVector the vector to add\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.addInPlace = function (otherVector) {\n    this.x += otherVector.x;\n    this.y += otherVector.y;\n    this.z += otherVector.z;\n    this.w += otherVector.w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.\r\n   * @param otherVector the vector to add\r\n   * @returns the resulting vector\r\n   */\n\n\n  Vector4.prototype.add = function (otherVector) {\n    return new Vector4(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z, this.w + otherVector.w);\n  };\n  /**\r\n   * Updates the given vector \"result\" with the result of the addition of the current Vector4 and the given one.\r\n   * @param otherVector the vector to add\r\n   * @param result the vector to store the result\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.addToRef = function (otherVector, result) {\n    result.x = this.x + otherVector.x;\n    result.y = this.y + otherVector.y;\n    result.z = this.z + otherVector.z;\n    result.w = this.w + otherVector.w;\n    return this;\n  };\n  /**\r\n   * Subtract in place the given vector from the current Vector4.\r\n   * @param otherVector the vector to subtract\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.subtractInPlace = function (otherVector) {\n    this.x -= otherVector.x;\n    this.y -= otherVector.y;\n    this.z -= otherVector.z;\n    this.w -= otherVector.w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.\r\n   * @param otherVector the vector to add\r\n   * @returns the new vector with the result\r\n   */\n\n\n  Vector4.prototype.subtract = function (otherVector) {\n    return new Vector4(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z, this.w - otherVector.w);\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the subtraction of the given vector from the current Vector4.\r\n   * @param otherVector the vector to subtract\r\n   * @param result the vector to store the result\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.subtractToRef = function (otherVector, result) {\n    result.x = this.x - otherVector.x;\n    result.y = this.y - otherVector.y;\n    result.z = this.z - otherVector.z;\n    result.w = this.w - otherVector.w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\r\n   */\n\n  /**\r\n   * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\r\n   * @param x value to subtract\r\n   * @param y value to subtract\r\n   * @param z value to subtract\r\n   * @param w value to subtract\r\n   * @returns new vector containing the result\r\n   */\n\n\n  Vector4.prototype.subtractFromFloats = function (x, y, z, w) {\n    return new Vector4(this.x - x, this.y - y, this.z - z, this.w - w);\n  };\n  /**\r\n   * Sets the given vector \"result\" set with the result of the subtraction of the given floats from the current Vector4 coordinates.\r\n   * @param x value to subtract\r\n   * @param y value to subtract\r\n   * @param z value to subtract\r\n   * @param w value to subtract\r\n   * @param result the vector to store the result in\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.subtractFromFloatsToRef = function (x, y, z, w, result) {\n    result.x = this.x - x;\n    result.y = this.y - y;\n    result.z = this.z - z;\n    result.w = this.w - w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 set with the current Vector4 negated coordinates.\r\n   * @returns a new vector with the negated values\r\n   */\n\n\n  Vector4.prototype.negate = function () {\n    return new Vector4(-this.x, -this.y, -this.z, -this.w);\n  };\n  /**\r\n   * Negate this vector in place\r\n   * @returns this\r\n   */\n\n\n  Vector4.prototype.negateInPlace = function () {\n    this.x *= -1;\n    this.y *= -1;\n    this.z *= -1;\n    this.w *= -1;\n    return this;\n  };\n  /**\r\n   * Negate the current Vector4 and stores the result in the given vector \"result\" coordinates\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector4\r\n   */\n\n\n  Vector4.prototype.negateToRef = function (result) {\n    return result.copyFromFloats(this.x * -1, this.y * -1, this.z * -1, this.w * -1);\n  };\n  /**\r\n   * Multiplies the current Vector4 coordinates by scale (float).\r\n   * @param scale the number to scale with\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.scaleInPlace = function (scale) {\n    this.x *= scale;\n    this.y *= scale;\n    this.z *= scale;\n    this.w *= scale;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).\r\n   * @param scale the number to scale with\r\n   * @returns a new vector with the result\r\n   */\n\n\n  Vector4.prototype.scale = function (scale) {\n    return new Vector4(this.x * scale, this.y * scale, this.z * scale, this.w * scale);\n  };\n  /**\r\n   * Sets the given vector \"result\" with the current Vector4 coordinates multiplied by scale (float).\r\n   * @param scale the number to scale with\r\n   * @param result a vector to store the result in\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.scaleToRef = function (scale, result) {\n    result.x = this.x * scale;\n    result.y = this.y * scale;\n    result.z = this.z * scale;\n    result.w = this.w * scale;\n    return this;\n  };\n  /**\r\n   * Scale the current Vector4 values by a factor and add the result to a given Vector4\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Vector4 object where to store the result\r\n   * @returns the unmodified current Vector4\r\n   */\n\n\n  Vector4.prototype.scaleAndAddToRef = function (scale, result) {\n    result.x += this.x * scale;\n    result.y += this.y * scale;\n    result.z += this.z * scale;\n    result.w += this.w * scale;\n    return this;\n  };\n  /**\r\n   * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.\r\n   * @param otherVector the vector to compare against\r\n   * @returns true if they are equal\r\n   */\n\n\n  Vector4.prototype.equals = function (otherVector) {\n    return otherVector && this.x === otherVector.x && this.y === otherVector.y && this.z === otherVector.z && this.w === otherVector.w;\n  };\n  /**\r\n   * Boolean : True if the current Vector4 coordinates are each beneath the distance \"epsilon\" from the given vector ones.\r\n   * @param otherVector vector to compare against\r\n   * @param epsilon (Default: very small number)\r\n   * @returns true if they are equal\r\n   */\n\n\n  Vector4.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\n    if (epsilon === void 0) {\n      epsilon = Epsilon;\n    }\n\n    return otherVector && Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) && Scalar.WithinEpsilon(this.z, otherVector.z, epsilon) && Scalar.WithinEpsilon(this.w, otherVector.w, epsilon);\n  };\n  /**\r\n   * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.\r\n   * @param x x value to compare against\r\n   * @param y y value to compare against\r\n   * @param z z value to compare against\r\n   * @param w w value to compare against\r\n   * @returns true if equal\r\n   */\n\n\n  Vector4.prototype.equalsToFloats = function (x, y, z, w) {\n    return this.x === x && this.y === y && this.z === z && this.w === w;\n  };\n  /**\r\n   * Multiplies in place the current Vector4 by the given one.\r\n   * @param otherVector vector to multiple with\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.multiplyInPlace = function (otherVector) {\n    this.x *= otherVector.x;\n    this.y *= otherVector.y;\n    this.z *= otherVector.z;\n    this.w *= otherVector.w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.\r\n   * @param otherVector vector to multiple with\r\n   * @returns resulting new vector\r\n   */\n\n\n  Vector4.prototype.multiply = function (otherVector) {\n    return new Vector4(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z, this.w * otherVector.w);\n  };\n  /**\r\n   * Updates the given vector \"result\" with the multiplication result of the current Vector4 and the given one.\r\n   * @param otherVector vector to multiple with\r\n   * @param result vector to store the result\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.multiplyToRef = function (otherVector, result) {\n    result.x = this.x * otherVector.x;\n    result.y = this.y * otherVector.y;\n    result.z = this.z * otherVector.z;\n    result.w = this.w * otherVector.w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.\r\n   * @param x x value multiply with\r\n   * @param y y value multiply with\r\n   * @param z z value multiply with\r\n   * @param w w value multiply with\r\n   * @returns resulting new vector\r\n   */\n\n\n  Vector4.prototype.multiplyByFloats = function (x, y, z, w) {\n    return new Vector4(this.x * x, this.y * y, this.z * z, this.w * w);\n  };\n  /**\r\n   * Returns a new Vector4 set with the division result of the current Vector4 by the given one.\r\n   * @param otherVector vector to devide with\r\n   * @returns resulting new vector\r\n   */\n\n\n  Vector4.prototype.divide = function (otherVector) {\n    return new Vector4(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z, this.w / otherVector.w);\n  };\n  /**\r\n   * Updates the given vector \"result\" with the division result of the current Vector4 by the given one.\r\n   * @param otherVector vector to devide with\r\n   * @param result vector to store the result\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.divideToRef = function (otherVector, result) {\n    result.x = this.x / otherVector.x;\n    result.y = this.y / otherVector.y;\n    result.z = this.z / otherVector.z;\n    result.w = this.w / otherVector.w;\n    return this;\n  };\n  /**\r\n   * Divides the current Vector3 coordinates by the given ones.\r\n   * @param otherVector vector to devide with\r\n   * @returns the updated Vector3.\r\n   */\n\n\n  Vector4.prototype.divideInPlace = function (otherVector) {\n    return this.divideToRef(otherVector, this);\n  };\n  /**\r\n   * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones\r\n   * @param other defines the second operand\r\n   * @returns the current updated Vector4\r\n   */\n\n\n  Vector4.prototype.minimizeInPlace = function (other) {\n    if (other.x < this.x) {\n      this.x = other.x;\n    }\n\n    if (other.y < this.y) {\n      this.y = other.y;\n    }\n\n    if (other.z < this.z) {\n      this.z = other.z;\n    }\n\n    if (other.w < this.w) {\n      this.w = other.w;\n    }\n\n    return this;\n  };\n  /**\r\n   * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones\r\n   * @param other defines the second operand\r\n   * @returns the current updated Vector4\r\n   */\n\n\n  Vector4.prototype.maximizeInPlace = function (other) {\n    if (other.x > this.x) {\n      this.x = other.x;\n    }\n\n    if (other.y > this.y) {\n      this.y = other.y;\n    }\n\n    if (other.z > this.z) {\n      this.z = other.z;\n    }\n\n    if (other.w > this.w) {\n      this.w = other.w;\n    }\n\n    return this;\n  };\n  /**\r\n   * Gets a new Vector4 from current Vector4 floored values\r\n   * @returns a new Vector4\r\n   */\n\n\n  Vector4.prototype.floor = function () {\n    return new Vector4(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));\n  };\n  /**\r\n   * Gets a new Vector4 from current Vector3 floored values\r\n   * @returns a new Vector4\r\n   */\n\n\n  Vector4.prototype.fract = function () {\n    return new Vector4(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z), this.w - Math.floor(this.w));\n  }; // Properties\n\n  /**\r\n   * Returns the Vector4 length (float).\r\n   * @returns the length\r\n   */\n\n\n  Vector4.prototype.length = function () {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n  };\n  /**\r\n   * Returns the Vector4 squared length (float).\r\n   * @returns the length squared\r\n   */\n\n\n  Vector4.prototype.lengthSquared = function () {\n    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n  }; // Methods\n\n  /**\r\n   * Normalizes in place the Vector4.\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.normalize = function () {\n    var len = this.length();\n\n    if (len === 0) {\n      return this;\n    }\n\n    return this.scaleInPlace(1.0 / len);\n  };\n  /**\r\n   * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.\r\n   * @returns this converted to a new vector3\r\n   */\n\n\n  Vector4.prototype.toVector3 = function () {\n    return new Vector3(this.x, this.y, this.z);\n  };\n  /**\r\n   * Returns a new Vector4 copied from the current one.\r\n   * @returns the new cloned vector\r\n   */\n\n\n  Vector4.prototype.clone = function () {\n    return new Vector4(this.x, this.y, this.z, this.w);\n  };\n  /**\r\n   * Updates the current Vector4 with the given one coordinates.\r\n   * @param source the source vector to copy from\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.copyFrom = function (source) {\n    this.x = source.x;\n    this.y = source.y;\n    this.z = source.z;\n    this.w = source.w;\n    return this;\n  };\n  /**\r\n   * Updates the current Vector4 coordinates with the given floats.\r\n   * @param x float to copy from\r\n   * @param y float to copy from\r\n   * @param z float to copy from\r\n   * @param w float to copy from\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.copyFromFloats = function (x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  };\n  /**\r\n   * Updates the current Vector4 coordinates with the given floats.\r\n   * @param x float to set from\r\n   * @param y float to set from\r\n   * @param z float to set from\r\n   * @param w float to set from\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.set = function (x, y, z, w) {\n    return this.copyFromFloats(x, y, z, w);\n  };\n  /**\r\n   * Copies the given float to the current Vector3 coordinates\r\n   * @param v defines the x, y, z and w coordinates of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector4.prototype.setAll = function (v) {\n    this.x = this.y = this.z = this.w = v;\n    return this;\n  }; // Statics\n\n  /**\r\n   * Returns a new Vector4 set from the starting index of the given array.\r\n   * @param array the array to pull values from\r\n   * @param offset the offset into the array to start at\r\n   * @returns the new vector\r\n   */\n\n\n  Vector4.FromArray = function (array, offset) {\n    if (!offset) {\n      offset = 0;\n    }\n\n    return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n  };\n  /**\r\n   * Updates the given vector \"result\" from the starting index of the given array.\r\n   * @param array the array to pull values from\r\n   * @param offset the offset into the array to start at\r\n   * @param result the vector to store the result in\r\n   */\n\n\n  Vector4.FromArrayToRef = function (array, offset, result) {\n    result.x = array[offset];\n    result.y = array[offset + 1];\n    result.z = array[offset + 2];\n    result.w = array[offset + 3];\n  };\n  /**\r\n   * Updates the given vector \"result\" from the starting index of the given Float32Array.\r\n   * @param array the array to pull values from\r\n   * @param offset the offset into the array to start at\r\n   * @param result the vector to store the result in\r\n   */\n\n\n  Vector4.FromFloatArrayToRef = function (array, offset, result) {\n    Vector4.FromArrayToRef(array, offset, result);\n  };\n  /**\r\n   * Updates the given vector \"result\" coordinates from the given floats.\r\n   * @param x float to set from\r\n   * @param y float to set from\r\n   * @param z float to set from\r\n   * @param w float to set from\r\n   * @param result the vector to the floats in\r\n   */\n\n\n  Vector4.FromFloatsToRef = function (x, y, z, w, result) {\n    result.x = x;\n    result.y = y;\n    result.z = z;\n    result.w = w;\n  };\n  /**\r\n   * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)\r\n   * @returns the new vector\r\n   */\n\n\n  Vector4.Zero = function () {\n    return new Vector4(0.0, 0.0, 0.0, 0.0);\n  };\n  /**\r\n   * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)\r\n   * @returns the new vector\r\n   */\n\n\n  Vector4.One = function () {\n    return new Vector4(1.0, 1.0, 1.0, 1.0);\n  };\n  /**\r\n   * Returns a new normalized Vector4 from the given one.\r\n   * @param vector the vector to normalize\r\n   * @returns the vector\r\n   */\n\n\n  Vector4.Normalize = function (vector) {\n    var result = Vector4.Zero();\n    Vector4.NormalizeToRef(vector, result);\n    return result;\n  };\n  /**\r\n   * Updates the given vector \"result\" from the normalization of the given one.\r\n   * @param vector the vector to normalize\r\n   * @param result the vector to store the result in\r\n   */\n\n\n  Vector4.NormalizeToRef = function (vector, result) {\n    result.copyFrom(vector);\n    result.normalize();\n  };\n  /**\r\n   * Returns a vector with the minimum values from the left and right vectors\r\n   * @param left left vector to minimize\r\n   * @param right right vector to minimize\r\n   * @returns a new vector with the minimum of the left and right vector values\r\n   */\n\n\n  Vector4.Minimize = function (left, right) {\n    var min = left.clone();\n    min.minimizeInPlace(right);\n    return min;\n  };\n  /**\r\n   * Returns a vector with the maximum values from the left and right vectors\r\n   * @param left left vector to maximize\r\n   * @param right right vector to maximize\r\n   * @returns a new vector with the maximum of the left and right vector values\r\n   */\n\n\n  Vector4.Maximize = function (left, right) {\n    var max = left.clone();\n    max.maximizeInPlace(right);\n    return max;\n  };\n  /**\r\n   * Returns the distance (float) between the vectors \"value1\" and \"value2\".\r\n   * @param value1 value to calulate the distance between\r\n   * @param value2 value to calulate the distance between\r\n   * @return the distance between the two vectors\r\n   */\n\n\n  Vector4.Distance = function (value1, value2) {\n    return Math.sqrt(Vector4.DistanceSquared(value1, value2));\n  };\n  /**\r\n   * Returns the squared distance (float) between the vectors \"value1\" and \"value2\".\r\n   * @param value1 value to calulate the distance between\r\n   * @param value2 value to calulate the distance between\r\n   * @return the distance between the two vectors squared\r\n   */\n\n\n  Vector4.DistanceSquared = function (value1, value2) {\n    var x = value1.x - value2.x;\n    var y = value1.y - value2.y;\n    var z = value1.z - value2.z;\n    var w = value1.w - value2.w;\n    return x * x + y * y + z * z + w * w;\n  };\n  /**\r\n   * Returns a new Vector4 located at the center between the vectors \"value1\" and \"value2\".\r\n   * @param value1 value to calulate the center between\r\n   * @param value2 value to calulate the center between\r\n   * @return the center between the two vectors\r\n   */\n\n\n  Vector4.Center = function (value1, value2) {\n    var center = value1.add(value2);\n    center.scaleInPlace(0.5);\n    return center;\n  };\n  /**\r\n   * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector.\r\n   * This methods computes transformed normalized direction vectors only.\r\n   * @param vector the vector to transform\r\n   * @param transformation the transformation matrix to apply\r\n   * @returns the new vector\r\n   */\n\n\n  Vector4.TransformNormal = function (vector, transformation) {\n    var result = Vector4.Zero();\n    Vector4.TransformNormalToRef(vector, transformation, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector.\r\n   * This methods computes transformed normalized direction vectors only.\r\n   * @param vector the vector to transform\r\n   * @param transformation the transformation matrix to apply\r\n   * @param result the vector to store the result in\r\n   */\n\n\n  Vector4.TransformNormalToRef = function (vector, transformation, result) {\n    var m = transformation.m;\n    var x = vector.x * m[0] + vector.y * m[4] + vector.z * m[8];\n    var y = vector.x * m[1] + vector.y * m[5] + vector.z * m[9];\n    var z = vector.x * m[2] + vector.y * m[6] + vector.z * m[10];\n    result.x = x;\n    result.y = y;\n    result.z = z;\n    result.w = vector.w;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w).\r\n   * This methods computes transformed normalized direction vectors only.\r\n   * @param x value to transform\r\n   * @param y value to transform\r\n   * @param z value to transform\r\n   * @param w value to transform\r\n   * @param transformation the transformation matrix to apply\r\n   * @param result the vector to store the results in\r\n   */\n\n\n  Vector4.TransformNormalFromFloatsToRef = function (x, y, z, w, transformation, result) {\n    var m = transformation.m;\n    result.x = x * m[0] + y * m[4] + z * m[8];\n    result.y = x * m[1] + y * m[5] + z * m[9];\n    result.z = x * m[2] + y * m[6] + z * m[10];\n    result.w = w;\n  };\n  /**\r\n   * Creates a new Vector4 from a Vector3\r\n   * @param source defines the source data\r\n   * @param w defines the 4th component (default is 0)\r\n   * @returns a new Vector4\r\n   */\n\n\n  Vector4.FromVector3 = function (source, w) {\n    if (w === void 0) {\n      w = 0;\n    }\n\n    return new Vector4(source._x, source._y, source._z, w);\n  };\n\n  return Vector4;\n}();\n\nexport { Vector4 };\n/**\r\n * Class used to store quaternion data\r\n * @see https://en.wikipedia.org/wiki/Quaternion\r\n * @see https://doc.babylonjs.com/features/position,_rotation,_scaling\r\n */\n\nvar Quaternion =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Quaternion from the given floats\r\n   * @param x defines the first component (0 by default)\r\n   * @param y defines the second component (0 by default)\r\n   * @param z defines the third component (0 by default)\r\n   * @param w defines the fourth component (1.0 by default)\r\n   */\n  function Quaternion(x, y, z, w) {\n    if (x === void 0) {\n      x = 0.0;\n    }\n\n    if (y === void 0) {\n      y = 0.0;\n    }\n\n    if (z === void 0) {\n      z = 0.0;\n    }\n\n    if (w === void 0) {\n      w = 1.0;\n    }\n    /** @hidden */\n\n\n    this._isDirty = true;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  Object.defineProperty(Quaternion.prototype, \"x\", {\n    /** Gets or sets the x coordinate */\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      this._x = value;\n      this._isDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Quaternion.prototype, \"y\", {\n    /** Gets or sets the y coordinate */\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      this._y = value;\n      this._isDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Quaternion.prototype, \"z\", {\n    /** Gets or sets the z coordinate */\n    get: function get() {\n      return this._z;\n    },\n    set: function set(value) {\n      this._z = value;\n      this._isDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Quaternion.prototype, \"w\", {\n    /** Gets or sets the w coordinate */\n    get: function get() {\n      return this._w;\n    },\n    set: function set(value) {\n      this._w = value;\n      this._isDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets a string representation for the current quaternion\r\n   * @returns a string with the Quaternion coordinates\r\n   */\n\n  Quaternion.prototype.toString = function () {\n    return \"{X: \" + this._x + \" Y:\" + this._y + \" Z:\" + this._z + \" W:\" + this._w + \"}\";\n  };\n  /**\r\n   * Gets the class name of the quaternion\r\n   * @returns the string \"Quaternion\"\r\n   */\n\n\n  Quaternion.prototype.getClassName = function () {\n    return \"Quaternion\";\n  };\n  /**\r\n   * Gets a hash code for this quaternion\r\n   * @returns the quaternion hash code\r\n   */\n\n\n  Quaternion.prototype.getHashCode = function () {\n    var hash = this._x | 0;\n    hash = hash * 397 ^ (this._y | 0);\n    hash = hash * 397 ^ (this._z | 0);\n    hash = hash * 397 ^ (this._w | 0);\n    return hash;\n  };\n  /**\r\n   * Copy the quaternion to an array\r\n   * @returns a new array populated with 4 elements from the quaternion coordinates\r\n   */\n\n\n  Quaternion.prototype.asArray = function () {\n    return [this._x, this._y, this._z, this._w];\n  };\n  /**\r\n   * Check if two quaternions are equals\r\n   * @param otherQuaternion defines the second operand\r\n   * @return true if the current quaternion and the given one coordinates are strictly equals\r\n   */\n\n\n  Quaternion.prototype.equals = function (otherQuaternion) {\n    return otherQuaternion && this._x === otherQuaternion._x && this._y === otherQuaternion._y && this._z === otherQuaternion._z && this._w === otherQuaternion._w;\n  };\n  /**\r\n   * Gets a boolean if two quaternions are equals (using an epsilon value)\r\n   * @param otherQuaternion defines the other quaternion\r\n   * @param epsilon defines the minimal distance to consider equality\r\n   * @returns true if the given quaternion coordinates are close to the current ones by a distance of epsilon.\r\n   */\n\n\n  Quaternion.prototype.equalsWithEpsilon = function (otherQuaternion, epsilon) {\n    if (epsilon === void 0) {\n      epsilon = Epsilon;\n    }\n\n    return otherQuaternion && Scalar.WithinEpsilon(this._x, otherQuaternion._x, epsilon) && Scalar.WithinEpsilon(this._y, otherQuaternion._y, epsilon) && Scalar.WithinEpsilon(this._z, otherQuaternion._z, epsilon) && Scalar.WithinEpsilon(this._w, otherQuaternion._w, epsilon);\n  };\n  /**\r\n   * Clone the current quaternion\r\n   * @returns a new quaternion copied from the current one\r\n   */\n\n\n  Quaternion.prototype.clone = function () {\n    return new Quaternion(this._x, this._y, this._z, this._w);\n  };\n  /**\r\n   * Copy a quaternion to the current one\r\n   * @param other defines the other quaternion\r\n   * @returns the updated current quaternion\r\n   */\n\n\n  Quaternion.prototype.copyFrom = function (other) {\n    this.x = other._x;\n    this.y = other._y;\n    this.z = other._z;\n    this.w = other._w;\n    return this;\n  };\n  /**\r\n   * Updates the current quaternion with the given float coordinates\r\n   * @param x defines the x coordinate\r\n   * @param y defines the y coordinate\r\n   * @param z defines the z coordinate\r\n   * @param w defines the w coordinate\r\n   * @returns the updated current quaternion\r\n   */\n\n\n  Quaternion.prototype.copyFromFloats = function (x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  };\n  /**\r\n   * Updates the current quaternion from the given float coordinates\r\n   * @param x defines the x coordinate\r\n   * @param y defines the y coordinate\r\n   * @param z defines the z coordinate\r\n   * @param w defines the w coordinate\r\n   * @returns the updated current quaternion\r\n   */\n\n\n  Quaternion.prototype.set = function (x, y, z, w) {\n    return this.copyFromFloats(x, y, z, w);\n  };\n  /**\r\n   * Adds two quaternions\r\n   * @param other defines the second operand\r\n   * @returns a new quaternion as the addition result of the given one and the current quaternion\r\n   */\n\n\n  Quaternion.prototype.add = function (other) {\n    return new Quaternion(this._x + other._x, this._y + other._y, this._z + other._z, this._w + other._w);\n  };\n  /**\r\n   * Add a quaternion to the current one\r\n   * @param other defines the quaternion to add\r\n   * @returns the current quaternion\r\n   */\n\n\n  Quaternion.prototype.addInPlace = function (other) {\n    this._x += other._x;\n    this._y += other._y;\n    this._z += other._z;\n    this._w += other._w;\n    return this;\n  };\n  /**\r\n   * Subtract two quaternions\r\n   * @param other defines the second operand\r\n   * @returns a new quaternion as the subtraction result of the given one from the current one\r\n   */\n\n\n  Quaternion.prototype.subtract = function (other) {\n    return new Quaternion(this._x - other._x, this._y - other._y, this._z - other._z, this._w - other._w);\n  };\n  /**\r\n   * Multiplies the current quaternion by a scale factor\r\n   * @param value defines the scale factor\r\n   * @returns a new quaternion set by multiplying the current quaternion coordinates by the float \"scale\"\r\n   */\n\n\n  Quaternion.prototype.scale = function (value) {\n    return new Quaternion(this._x * value, this._y * value, this._z * value, this._w * value);\n  };\n  /**\r\n   * Scale the current quaternion values by a factor and stores the result to a given quaternion\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Quaternion object where to store the result\r\n   * @returns the unmodified current quaternion\r\n   */\n\n\n  Quaternion.prototype.scaleToRef = function (scale, result) {\n    result.x = this._x * scale;\n    result.y = this._y * scale;\n    result.z = this._z * scale;\n    result.w = this._w * scale;\n    return this;\n  };\n  /**\r\n   * Multiplies in place the current quaternion by a scale factor\r\n   * @param value defines the scale factor\r\n   * @returns the current modified quaternion\r\n   */\n\n\n  Quaternion.prototype.scaleInPlace = function (value) {\n    this.x *= value;\n    this.y *= value;\n    this.z *= value;\n    this.w *= value;\n    return this;\n  };\n  /**\r\n   * Scale the current quaternion values by a factor and add the result to a given quaternion\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Quaternion object where to store the result\r\n   * @returns the unmodified current quaternion\r\n   */\n\n\n  Quaternion.prototype.scaleAndAddToRef = function (scale, result) {\n    result.x += this._x * scale;\n    result.y += this._y * scale;\n    result.z += this._z * scale;\n    result.w += this._w * scale;\n    return this;\n  };\n  /**\r\n   * Multiplies two quaternions\r\n   * @param q1 defines the second operand\r\n   * @returns a new quaternion set as the multiplication result of the current one with the given one \"q1\"\r\n   */\n\n\n  Quaternion.prototype.multiply = function (q1) {\n    var result = new Quaternion(0, 0, 0, 1.0);\n    this.multiplyToRef(q1, result);\n    return result;\n  };\n  /**\r\n   * Sets the given \"result\" as the the multiplication result of the current one with the given one \"q1\"\r\n   * @param q1 defines the second operand\r\n   * @param result defines the target quaternion\r\n   * @returns the current quaternion\r\n   */\n\n\n  Quaternion.prototype.multiplyToRef = function (q1, result) {\n    var x = this._x * q1._w + this._y * q1._z - this._z * q1._y + this._w * q1._x;\n    var y = -this._x * q1._z + this._y * q1._w + this._z * q1._x + this._w * q1._y;\n    var z = this._x * q1._y - this._y * q1._x + this._z * q1._w + this._w * q1._z;\n    var w = -this._x * q1._x - this._y * q1._y - this._z * q1._z + this._w * q1._w;\n    result.copyFromFloats(x, y, z, w);\n    return this;\n  };\n  /**\r\n   * Updates the current quaternion with the multiplication of itself with the given one \"q1\"\r\n   * @param q1 defines the second operand\r\n   * @returns the currentupdated quaternion\r\n   */\n\n\n  Quaternion.prototype.multiplyInPlace = function (q1) {\n    this.multiplyToRef(q1, this);\n    return this;\n  };\n  /**\r\n   * Conjugates (1-q) the current quaternion and stores the result in the given quaternion\r\n   * @param ref defines the target quaternion\r\n   * @returns the current quaternion\r\n   */\n\n\n  Quaternion.prototype.conjugateToRef = function (ref) {\n    ref.copyFromFloats(-this._x, -this._y, -this._z, this._w);\n    return this;\n  };\n  /**\r\n   * Conjugates in place (1-q) the current quaternion\r\n   * @returns the current updated quaternion\r\n   */\n\n\n  Quaternion.prototype.conjugateInPlace = function () {\n    this.x *= -1;\n    this.y *= -1;\n    this.z *= -1;\n    return this;\n  };\n  /**\r\n   * Conjugates in place (1-q) the current quaternion\r\n   * @returns a new quaternion\r\n   */\n\n\n  Quaternion.prototype.conjugate = function () {\n    var result = new Quaternion(-this._x, -this._y, -this._z, this._w);\n    return result;\n  };\n  /**\r\n   * Gets length of current quaternion\r\n   * @returns the quaternion length (float)\r\n   */\n\n\n  Quaternion.prototype.length = function () {\n    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n  };\n  /**\r\n   * Normalize in place the current quaternion\r\n   * @returns the current updated quaternion\r\n   */\n\n\n  Quaternion.prototype.normalize = function () {\n    var len = this.length();\n\n    if (len === 0) {\n      return this;\n    }\n\n    var inv = 1.0 / len;\n    this.x *= inv;\n    this.y *= inv;\n    this.z *= inv;\n    this.w *= inv;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector3 set with the Euler angles translated from the current quaternion\r\n   * @param order is a reserved parameter and is ignored for now\r\n   * @returns a new Vector3 containing the Euler angles\r\n   */\n\n\n  Quaternion.prototype.toEulerAngles = function (order) {\n    if (order === void 0) {\n      order = \"YZX\";\n    }\n\n    var result = Vector3.Zero();\n    this.toEulerAnglesToRef(result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector3 \"result\" with the Euler angles translated from the current quaternion\r\n   * @param result defines the vector which will be filled with the Euler angles\r\n   * @returns the current unchanged quaternion\r\n   */\n\n\n  Quaternion.prototype.toEulerAnglesToRef = function (result) {\n    var qz = this._z;\n    var qx = this._x;\n    var qy = this._y;\n    var qw = this._w;\n    var sqw = qw * qw;\n    var sqz = qz * qz;\n    var sqx = qx * qx;\n    var sqy = qy * qy;\n    var zAxisY = qy * qz - qx * qw;\n    var limit = .4999999;\n\n    if (zAxisY < -limit) {\n      result.y = 2 * Math.atan2(qy, qw);\n      result.x = Math.PI / 2;\n      result.z = 0;\n    } else if (zAxisY > limit) {\n      result.y = 2 * Math.atan2(qy, qw);\n      result.x = -Math.PI / 2;\n      result.z = 0;\n    } else {\n      result.z = Math.atan2(2.0 * (qx * qy + qz * qw), -sqz - sqx + sqy + sqw);\n      result.x = Math.asin(-2.0 * (qz * qy - qx * qw));\n      result.y = Math.atan2(2.0 * (qz * qx + qy * qw), sqz - sqx - sqy + sqw);\n    }\n\n    return this;\n  };\n  /**\r\n   * Updates the given rotation matrix with the current quaternion values\r\n   * @param result defines the target matrix\r\n   * @returns the current unchanged quaternion\r\n   */\n\n\n  Quaternion.prototype.toRotationMatrix = function (result) {\n    Matrix.FromQuaternionToRef(this, result);\n    return this;\n  };\n  /**\r\n   * Updates the current quaternion from the given rotation matrix values\r\n   * @param matrix defines the source matrix\r\n   * @returns the current updated quaternion\r\n   */\n\n\n  Quaternion.prototype.fromRotationMatrix = function (matrix) {\n    Quaternion.FromRotationMatrixToRef(matrix, this);\n    return this;\n  }; // Statics\n\n  /**\r\n   * Creates a new quaternion from a rotation matrix\r\n   * @param matrix defines the source matrix\r\n   * @returns a new quaternion created from the given rotation matrix values\r\n   */\n\n\n  Quaternion.FromRotationMatrix = function (matrix) {\n    var result = new Quaternion();\n    Quaternion.FromRotationMatrixToRef(matrix, result);\n    return result;\n  };\n  /**\r\n   * Updates the given quaternion with the given rotation matrix values\r\n   * @param matrix defines the source matrix\r\n   * @param result defines the target quaternion\r\n   */\n\n\n  Quaternion.FromRotationMatrixToRef = function (matrix, result) {\n    var data = matrix.m;\n    var m11 = data[0],\n        m12 = data[4],\n        m13 = data[8];\n    var m21 = data[1],\n        m22 = data[5],\n        m23 = data[9];\n    var m31 = data[2],\n        m32 = data[6],\n        m33 = data[10];\n    var trace = m11 + m22 + m33;\n    var s;\n\n    if (trace > 0) {\n      s = 0.5 / Math.sqrt(trace + 1.0);\n      result.w = 0.25 / s;\n      result.x = (m32 - m23) * s;\n      result.y = (m13 - m31) * s;\n      result.z = (m21 - m12) * s;\n    } else if (m11 > m22 && m11 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n      result.w = (m32 - m23) / s;\n      result.x = 0.25 * s;\n      result.y = (m12 + m21) / s;\n      result.z = (m13 + m31) / s;\n    } else if (m22 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n      result.w = (m13 - m31) / s;\n      result.x = (m12 + m21) / s;\n      result.y = 0.25 * s;\n      result.z = (m23 + m32) / s;\n    } else {\n      s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n      result.w = (m21 - m12) / s;\n      result.x = (m13 + m31) / s;\n      result.y = (m23 + m32) / s;\n      result.z = 0.25 * s;\n    }\n  };\n  /**\r\n   * Returns the dot product (float) between the quaternions \"left\" and \"right\"\r\n   * @param left defines the left operand\r\n   * @param right defines the right operand\r\n   * @returns the dot product\r\n   */\n\n\n  Quaternion.Dot = function (left, right) {\n    return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n  };\n  /**\r\n   * Checks if the two quaternions are close to each other\r\n   * @param quat0 defines the first quaternion to check\r\n   * @param quat1 defines the second quaternion to check\r\n   * @returns true if the two quaternions are close to each other\r\n   */\n\n\n  Quaternion.AreClose = function (quat0, quat1) {\n    var dot = Quaternion.Dot(quat0, quat1);\n    return dot >= 0;\n  };\n  /**\r\n   * Creates an empty quaternion\r\n   * @returns a new quaternion set to (0.0, 0.0, 0.0)\r\n   */\n\n\n  Quaternion.Zero = function () {\n    return new Quaternion(0.0, 0.0, 0.0, 0.0);\n  };\n  /**\r\n   * Inverse a given quaternion\r\n   * @param q defines the source quaternion\r\n   * @returns a new quaternion as the inverted current quaternion\r\n   */\n\n\n  Quaternion.Inverse = function (q) {\n    return new Quaternion(-q._x, -q._y, -q._z, q._w);\n  };\n  /**\r\n   * Inverse a given quaternion\r\n   * @param q defines the source quaternion\r\n   * @param result the quaternion the result will be stored in\r\n   * @returns the result quaternion\r\n   */\n\n\n  Quaternion.InverseToRef = function (q, result) {\n    result.set(-q._x, -q._y, -q._z, q._w);\n    return result;\n  };\n  /**\r\n   * Creates an identity quaternion\r\n   * @returns the identity quaternion\r\n   */\n\n\n  Quaternion.Identity = function () {\n    return new Quaternion(0.0, 0.0, 0.0, 1.0);\n  };\n  /**\r\n   * Gets a boolean indicating if the given quaternion is identity\r\n   * @param quaternion defines the quaternion to check\r\n   * @returns true if the quaternion is identity\r\n   */\n\n\n  Quaternion.IsIdentity = function (quaternion) {\n    return quaternion && quaternion._x === 0 && quaternion._y === 0 && quaternion._z === 0 && quaternion._w === 1;\n  };\n  /**\r\n   * Creates a quaternion from a rotation around an axis\r\n   * @param axis defines the axis to use\r\n   * @param angle defines the angle to use\r\n   * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)\r\n   */\n\n\n  Quaternion.RotationAxis = function (axis, angle) {\n    return Quaternion.RotationAxisToRef(axis, angle, new Quaternion());\n  };\n  /**\r\n   * Creates a rotation around an axis and stores it into the given quaternion\r\n   * @param axis defines the axis to use\r\n   * @param angle defines the angle to use\r\n   * @param result defines the target quaternion\r\n   * @returns the target quaternion\r\n   */\n\n\n  Quaternion.RotationAxisToRef = function (axis, angle, result) {\n    var sin = Math.sin(angle / 2);\n    axis.normalize();\n    result.w = Math.cos(angle / 2);\n    result.x = axis._x * sin;\n    result.y = axis._y * sin;\n    result.z = axis._z * sin;\n    return result;\n  };\n  /**\r\n   * Creates a new quaternion from data stored into an array\r\n   * @param array defines the data source\r\n   * @param offset defines the offset in the source array where the data starts\r\n   * @returns a new quaternion\r\n   */\n\n\n  Quaternion.FromArray = function (array, offset) {\n    if (!offset) {\n      offset = 0;\n    }\n\n    return new Quaternion(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n  };\n  /**\r\n   * Updates the given quaternion \"result\" from the starting index of the given array.\r\n   * @param array the array to pull values from\r\n   * @param offset the offset into the array to start at\r\n   * @param result the quaternion to store the result in\r\n   */\n\n\n  Quaternion.FromArrayToRef = function (array, offset, result) {\n    result.x = array[offset];\n    result.y = array[offset + 1];\n    result.z = array[offset + 2];\n    result.w = array[offset + 3];\n  };\n  /**\r\n   * Create a quaternion from Euler rotation angles\r\n   * @param x Pitch\r\n   * @param y Yaw\r\n   * @param z Roll\r\n   * @returns the new Quaternion\r\n   */\n\n\n  Quaternion.FromEulerAngles = function (x, y, z) {\n    var q = new Quaternion();\n    Quaternion.RotationYawPitchRollToRef(y, x, z, q);\n    return q;\n  };\n  /**\r\n   * Updates a quaternion from Euler rotation angles\r\n   * @param x Pitch\r\n   * @param y Yaw\r\n   * @param z Roll\r\n   * @param result the quaternion to store the result\r\n   * @returns the updated quaternion\r\n   */\n\n\n  Quaternion.FromEulerAnglesToRef = function (x, y, z, result) {\n    Quaternion.RotationYawPitchRollToRef(y, x, z, result);\n    return result;\n  };\n  /**\r\n   * Create a quaternion from Euler rotation vector\r\n   * @param vec the Euler vector (x Pitch, y Yaw, z Roll)\r\n   * @returns the new Quaternion\r\n   */\n\n\n  Quaternion.FromEulerVector = function (vec) {\n    var q = new Quaternion();\n    Quaternion.RotationYawPitchRollToRef(vec._y, vec._x, vec._z, q);\n    return q;\n  };\n  /**\r\n   * Updates a quaternion from Euler rotation vector\r\n   * @param vec the Euler vector (x Pitch, y Yaw, z Roll)\r\n   * @param result the quaternion to store the result\r\n   * @returns the updated quaternion\r\n   */\n\n\n  Quaternion.FromEulerVectorToRef = function (vec, result) {\n    Quaternion.RotationYawPitchRollToRef(vec._y, vec._x, vec._z, result);\n    return result;\n  };\n  /**\r\n   * Creates a new quaternion from the given Euler float angles (y, x, z)\r\n   * @param yaw defines the rotation around Y axis\r\n   * @param pitch defines the rotation around X axis\r\n   * @param roll defines the rotation around Z axis\r\n   * @returns the new quaternion\r\n   */\n\n\n  Quaternion.RotationYawPitchRoll = function (yaw, pitch, roll) {\n    var q = new Quaternion();\n    Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, q);\n    return q;\n  };\n  /**\r\n   * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\r\n   * @param yaw defines the rotation around Y axis\r\n   * @param pitch defines the rotation around X axis\r\n   * @param roll defines the rotation around Z axis\r\n   * @param result defines the target quaternion\r\n   */\n\n\n  Quaternion.RotationYawPitchRollToRef = function (yaw, pitch, roll, result) {\n    // Produces a quaternion from Euler angles in the z-y-x orientation (Tait-Bryan angles)\n    var halfRoll = roll * 0.5;\n    var halfPitch = pitch * 0.5;\n    var halfYaw = yaw * 0.5;\n    var sinRoll = Math.sin(halfRoll);\n    var cosRoll = Math.cos(halfRoll);\n    var sinPitch = Math.sin(halfPitch);\n    var cosPitch = Math.cos(halfPitch);\n    var sinYaw = Math.sin(halfYaw);\n    var cosYaw = Math.cos(halfYaw);\n    result.x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\n    result.y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\n    result.z = cosYaw * cosPitch * sinRoll - sinYaw * sinPitch * cosRoll;\n    result.w = cosYaw * cosPitch * cosRoll + sinYaw * sinPitch * sinRoll;\n  };\n  /**\r\n   * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation\r\n   * @param alpha defines the rotation around first axis\r\n   * @param beta defines the rotation around second axis\r\n   * @param gamma defines the rotation around third axis\r\n   * @returns the new quaternion\r\n   */\n\n\n  Quaternion.RotationAlphaBetaGamma = function (alpha, beta, gamma) {\n    var result = new Quaternion();\n    Quaternion.RotationAlphaBetaGammaToRef(alpha, beta, gamma, result);\n    return result;\n  };\n  /**\r\n   * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion\r\n   * @param alpha defines the rotation around first axis\r\n   * @param beta defines the rotation around second axis\r\n   * @param gamma defines the rotation around third axis\r\n   * @param result defines the target quaternion\r\n   */\n\n\n  Quaternion.RotationAlphaBetaGammaToRef = function (alpha, beta, gamma, result) {\n    // Produces a quaternion from Euler angles in the z-x-z orientation\n    var halfGammaPlusAlpha = (gamma + alpha) * 0.5;\n    var halfGammaMinusAlpha = (gamma - alpha) * 0.5;\n    var halfBeta = beta * 0.5;\n    result.x = Math.cos(halfGammaMinusAlpha) * Math.sin(halfBeta);\n    result.y = Math.sin(halfGammaMinusAlpha) * Math.sin(halfBeta);\n    result.z = Math.sin(halfGammaPlusAlpha) * Math.cos(halfBeta);\n    result.w = Math.cos(halfGammaPlusAlpha) * Math.cos(halfBeta);\n  };\n  /**\r\n   * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\r\n   * @param axis1 defines the first axis\r\n   * @param axis2 defines the second axis\r\n   * @param axis3 defines the third axis\r\n   * @returns the new quaternion\r\n   */\n\n\n  Quaternion.RotationQuaternionFromAxis = function (axis1, axis2, axis3) {\n    var quat = new Quaternion(0.0, 0.0, 0.0, 0.0);\n    Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n    return quat;\n  };\n  /**\r\n   * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\r\n   * @param axis1 defines the first axis\r\n   * @param axis2 defines the second axis\r\n   * @param axis3 defines the third axis\r\n   * @param ref defines the target quaternion\r\n   */\n\n\n  Quaternion.RotationQuaternionFromAxisToRef = function (axis1, axis2, axis3, ref) {\n    var rotMat = MathTmp.Matrix[0];\n    Matrix.FromXYZAxesToRef(axis1.normalize(), axis2.normalize(), axis3.normalize(), rotMat);\n    Quaternion.FromRotationMatrixToRef(rotMat, ref);\n  };\n  /**\r\n   * Interpolates between two quaternions\r\n   * @param left defines first quaternion\r\n   * @param right defines second quaternion\r\n   * @param amount defines the gradient to use\r\n   * @returns the new interpolated quaternion\r\n   */\n\n\n  Quaternion.Slerp = function (left, right, amount) {\n    var result = Quaternion.Identity();\n    Quaternion.SlerpToRef(left, right, amount, result);\n    return result;\n  };\n  /**\r\n   * Interpolates between two quaternions and stores it into a target quaternion\r\n   * @param left defines first quaternion\r\n   * @param right defines second quaternion\r\n   * @param amount defines the gradient to use\r\n   * @param result defines the target quaternion\r\n   */\n\n\n  Quaternion.SlerpToRef = function (left, right, amount, result) {\n    var num2;\n    var num3;\n    var num4 = left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n    var flag = false;\n\n    if (num4 < 0) {\n      flag = true;\n      num4 = -num4;\n    }\n\n    if (num4 > 0.999999) {\n      num3 = 1 - amount;\n      num2 = flag ? -amount : amount;\n    } else {\n      var num5 = Math.acos(num4);\n      var num6 = 1.0 / Math.sin(num5);\n      num3 = Math.sin((1.0 - amount) * num5) * num6;\n      num2 = flag ? -Math.sin(amount * num5) * num6 : Math.sin(amount * num5) * num6;\n    }\n\n    result.x = num3 * left._x + num2 * right._x;\n    result.y = num3 * left._y + num2 * right._y;\n    result.z = num3 * left._z + num2 * right._z;\n    result.w = num3 * left._w + num2 * right._w;\n  };\n  /**\r\n   * Interpolate between two quaternions using Hermite interpolation\r\n   * @param value1 defines first quaternion\r\n   * @param tangent1 defines the incoming tangent\r\n   * @param value2 defines second quaternion\r\n   * @param tangent2 defines the outgoing tangent\r\n   * @param amount defines the target quaternion\r\n   * @returns the new interpolated quaternion\r\n   */\n\n\n  Quaternion.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    var part2 = -2.0 * cubed + 3.0 * squared;\n    var part3 = cubed - 2.0 * squared + amount;\n    var part4 = cubed - squared;\n    var x = value1._x * part1 + value2._x * part2 + tangent1._x * part3 + tangent2._x * part4;\n    var y = value1._y * part1 + value2._y * part2 + tangent1._y * part3 + tangent2._y * part4;\n    var z = value1._z * part1 + value2._z * part2 + tangent1._z * part3 + tangent2._z * part4;\n    var w = value1._w * part1 + value2._w * part2 + tangent1._w * part3 + tangent2._w * part4;\n    return new Quaternion(x, y, z, w);\n  };\n\n  return Quaternion;\n}();\n\nexport { Quaternion };\n/**\r\n * Class used to store matrix data (4x4)\r\n */\n\nvar Matrix =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an empty matrix (filled with zeros)\r\n   */\n  function Matrix() {\n    this._isIdentity = false;\n    this._isIdentityDirty = true;\n    this._isIdentity3x2 = true;\n    this._isIdentity3x2Dirty = true;\n    /**\r\n     * Gets the update flag of the matrix which is an unique number for the matrix.\r\n     * It will be incremented every time the matrix data change.\r\n     * You can use it to speed the comparison between two versions of the same matrix.\r\n     */\n\n    this.updateFlag = -1;\n\n    if (PerformanceConfigurator.MatrixTrackPrecisionChange) {\n      PerformanceConfigurator.MatrixTrackedMatrices.push(this);\n    }\n\n    this._m = new PerformanceConfigurator.MatrixCurrentType(16);\n\n    this._updateIdentityStatus(false);\n  }\n\n  Object.defineProperty(Matrix, \"Use64Bits\", {\n    /**\r\n     * Gets the precision of matrix computations\r\n     */\n    get: function get() {\n      return PerformanceConfigurator.MatrixUse64Bits;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Matrix.prototype, \"m\", {\n    /**\r\n     * Gets the internal data of the matrix\r\n     */\n    get: function get() {\n      return this._m;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @hidden */\n\n  Matrix.prototype._markAsUpdated = function () {\n    this.updateFlag = Matrix._updateFlagSeed++;\n    this._isIdentity = false;\n    this._isIdentity3x2 = false;\n    this._isIdentityDirty = true;\n    this._isIdentity3x2Dirty = true;\n  };\n  /** @hidden */\n\n\n  Matrix.prototype._updateIdentityStatus = function (isIdentity, isIdentityDirty, isIdentity3x2, isIdentity3x2Dirty) {\n    if (isIdentityDirty === void 0) {\n      isIdentityDirty = false;\n    }\n\n    if (isIdentity3x2 === void 0) {\n      isIdentity3x2 = false;\n    }\n\n    if (isIdentity3x2Dirty === void 0) {\n      isIdentity3x2Dirty = true;\n    }\n\n    this.updateFlag = Matrix._updateFlagSeed++;\n    this._isIdentity = isIdentity;\n    this._isIdentity3x2 = isIdentity || isIdentity3x2;\n    this._isIdentityDirty = this._isIdentity ? false : isIdentityDirty;\n    this._isIdentity3x2Dirty = this._isIdentity3x2 ? false : isIdentity3x2Dirty;\n  }; // Properties\n\n  /**\r\n   * Check if the current matrix is identity\r\n   * @returns true is the matrix is the identity matrix\r\n   */\n\n\n  Matrix.prototype.isIdentity = function () {\n    if (this._isIdentityDirty) {\n      this._isIdentityDirty = false;\n      var m = this._m;\n      this._isIdentity = m[0] === 1.0 && m[1] === 0.0 && m[2] === 0.0 && m[3] === 0.0 && m[4] === 0.0 && m[5] === 1.0 && m[6] === 0.0 && m[7] === 0.0 && m[8] === 0.0 && m[9] === 0.0 && m[10] === 1.0 && m[11] === 0.0 && m[12] === 0.0 && m[13] === 0.0 && m[14] === 0.0 && m[15] === 1.0;\n    }\n\n    return this._isIdentity;\n  };\n  /**\r\n   * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\r\n   * @returns true is the matrix is the identity matrix\r\n   */\n\n\n  Matrix.prototype.isIdentityAs3x2 = function () {\n    if (this._isIdentity3x2Dirty) {\n      this._isIdentity3x2Dirty = false;\n\n      if (this._m[0] !== 1.0 || this._m[5] !== 1.0 || this._m[15] !== 1.0) {\n        this._isIdentity3x2 = false;\n      } else if (this._m[1] !== 0.0 || this._m[2] !== 0.0 || this._m[3] !== 0.0 || this._m[4] !== 0.0 || this._m[6] !== 0.0 || this._m[7] !== 0.0 || this._m[8] !== 0.0 || this._m[9] !== 0.0 || this._m[10] !== 0.0 || this._m[11] !== 0.0 || this._m[12] !== 0.0 || this._m[13] !== 0.0 || this._m[14] !== 0.0) {\n        this._isIdentity3x2 = false;\n      } else {\n        this._isIdentity3x2 = true;\n      }\n    }\n\n    return this._isIdentity3x2;\n  };\n  /**\r\n   * Gets the determinant of the matrix\r\n   * @returns the matrix determinant\r\n   */\n\n\n  Matrix.prototype.determinant = function () {\n    if (this._isIdentity === true) {\n      return 1;\n    }\n\n    var m = this._m;\n    var m00 = m[0],\n        m01 = m[1],\n        m02 = m[2],\n        m03 = m[3];\n    var m10 = m[4],\n        m11 = m[5],\n        m12 = m[6],\n        m13 = m[7];\n    var m20 = m[8],\n        m21 = m[9],\n        m22 = m[10],\n        m23 = m[11];\n    var m30 = m[12],\n        m31 = m[13],\n        m32 = m[14],\n        m33 = m[15]; // https://en.wikipedia.org/wiki/Laplace_expansion\n    // to compute the deterrminant of a 4x4 Matrix we compute the cofactors of any row or column,\n    // then we multiply each Cofactor by its corresponding matrix value and sum them all to get the determinant\n    // Cofactor(i, j) = sign(i,j) * det(Minor(i, j))\n    // where\n    //  - sign(i,j) = (i+j) % 2 === 0 ? 1 : -1\n    //  - Minor(i, j) is the 3x3 matrix we get by removing row i and column j from current Matrix\n    //\n    // Here we do that for the 1st row.\n\n    var det_22_33 = m22 * m33 - m32 * m23;\n    var det_21_33 = m21 * m33 - m31 * m23;\n    var det_21_32 = m21 * m32 - m31 * m22;\n    var det_20_33 = m20 * m33 - m30 * m23;\n    var det_20_32 = m20 * m32 - m22 * m30;\n    var det_20_31 = m20 * m31 - m30 * m21;\n    var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n    var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n    var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n    var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n    return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n  }; // Methods\n\n  /**\r\n   * Returns the matrix as a Float32Array or Array<number>\r\n   * @returns the matrix underlying array\r\n   */\n\n\n  Matrix.prototype.toArray = function () {\n    return this._m;\n  };\n  /**\r\n   * Returns the matrix as a Float32Array or Array<number>\r\n  * @returns the matrix underlying array.\r\n  */\n\n\n  Matrix.prototype.asArray = function () {\n    return this._m;\n  };\n  /**\r\n   * Inverts the current matrix in place\r\n   * @returns the current inverted matrix\r\n   */\n\n\n  Matrix.prototype.invert = function () {\n    this.invertToRef(this);\n    return this;\n  };\n  /**\r\n   * Sets all the matrix elements to zero\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.reset = function () {\n    Matrix.FromValuesToRef(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, this);\n\n    this._updateIdentityStatus(false);\n\n    return this;\n  };\n  /**\r\n   * Adds the current matrix with a second one\r\n   * @param other defines the matrix to add\r\n   * @returns a new matrix as the addition of the current matrix and the given one\r\n   */\n\n\n  Matrix.prototype.add = function (other) {\n    var result = new Matrix();\n    this.addToRef(other, result);\n    return result;\n  };\n  /**\r\n   * Sets the given matrix \"result\" to the addition of the current matrix and the given one\r\n   * @param other defines the matrix to add\r\n   * @param result defines the target matrix\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.addToRef = function (other, result) {\n    var m = this._m;\n    var resultM = result._m;\n    var otherM = other.m;\n\n    for (var index = 0; index < 16; index++) {\n      resultM[index] = m[index] + otherM[index];\n    }\n\n    result._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Adds in place the given matrix to the current matrix\r\n   * @param other defines the second operand\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.addToSelf = function (other) {\n    var m = this._m;\n    var otherM = other.m;\n\n    for (var index = 0; index < 16; index++) {\n      m[index] += otherM[index];\n    }\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Sets the given matrix to the current inverted Matrix\r\n   * @param other defines the target matrix\r\n   * @returns the unmodified current matrix\r\n   */\n\n\n  Matrix.prototype.invertToRef = function (other) {\n    if (this._isIdentity === true) {\n      Matrix.IdentityToRef(other);\n      return this;\n    } // the inverse of a Matrix is the transpose of cofactor matrix divided by the determinant\n\n\n    var m = this._m;\n    var m00 = m[0],\n        m01 = m[1],\n        m02 = m[2],\n        m03 = m[3];\n    var m10 = m[4],\n        m11 = m[5],\n        m12 = m[6],\n        m13 = m[7];\n    var m20 = m[8],\n        m21 = m[9],\n        m22 = m[10],\n        m23 = m[11];\n    var m30 = m[12],\n        m31 = m[13],\n        m32 = m[14],\n        m33 = m[15];\n    var det_22_33 = m22 * m33 - m32 * m23;\n    var det_21_33 = m21 * m33 - m31 * m23;\n    var det_21_32 = m21 * m32 - m31 * m22;\n    var det_20_33 = m20 * m33 - m30 * m23;\n    var det_20_32 = m20 * m32 - m22 * m30;\n    var det_20_31 = m20 * m31 - m30 * m21;\n    var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n    var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n    var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n    var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n    var det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n\n    if (det === 0) {\n      // not invertible\n      other.copyFrom(this);\n      return this;\n    }\n\n    var detInv = 1 / det;\n    var det_12_33 = m12 * m33 - m32 * m13;\n    var det_11_33 = m11 * m33 - m31 * m13;\n    var det_11_32 = m11 * m32 - m31 * m12;\n    var det_10_33 = m10 * m33 - m30 * m13;\n    var det_10_32 = m10 * m32 - m30 * m12;\n    var det_10_31 = m10 * m31 - m30 * m11;\n    var det_12_23 = m12 * m23 - m22 * m13;\n    var det_11_23 = m11 * m23 - m21 * m13;\n    var det_11_22 = m11 * m22 - m21 * m12;\n    var det_10_23 = m10 * m23 - m20 * m13;\n    var det_10_22 = m10 * m22 - m20 * m12;\n    var det_10_21 = m10 * m21 - m20 * m11;\n    var cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);\n    var cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);\n    var cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);\n    var cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);\n    var cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);\n    var cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);\n    var cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);\n    var cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);\n    var cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);\n    var cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);\n    var cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);\n    var cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);\n    Matrix.FromValuesToRef(cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv, cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv, cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv, cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv, other);\n    return this;\n  };\n  /**\r\n   * add a value at the specified position in the current Matrix\r\n   * @param index the index of the value within the matrix. between 0 and 15.\r\n   * @param value the value to be added\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.addAtIndex = function (index, value) {\n    this._m[index] += value;\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * mutiply the specified position in the current Matrix by a value\r\n   * @param index the index of the value within the matrix. between 0 and 15.\r\n   * @param value the value to be added\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.multiplyAtIndex = function (index, value) {\n    this._m[index] *= value;\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Inserts the translation vector (using 3 floats) in the current matrix\r\n   * @param x defines the 1st component of the translation\r\n   * @param y defines the 2nd component of the translation\r\n   * @param z defines the 3rd component of the translation\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.setTranslationFromFloats = function (x, y, z) {\n    this._m[12] = x;\n    this._m[13] = y;\n    this._m[14] = z;\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Adds the translation vector (using 3 floats) in the current matrix\r\n   * @param x defines the 1st component of the translation\r\n   * @param y defines the 2nd component of the translation\r\n   * @param z defines the 3rd component of the translation\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.addTranslationFromFloats = function (x, y, z) {\n    this._m[12] += x;\n    this._m[13] += y;\n    this._m[14] += z;\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Inserts the translation vector in the current matrix\r\n   * @param vector3 defines the translation to insert\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.setTranslation = function (vector3) {\n    return this.setTranslationFromFloats(vector3._x, vector3._y, vector3._z);\n  };\n  /**\r\n   * Gets the translation value of the current matrix\r\n   * @returns a new Vector3 as the extracted translation from the matrix\r\n   */\n\n\n  Matrix.prototype.getTranslation = function () {\n    return new Vector3(this._m[12], this._m[13], this._m[14]);\n  };\n  /**\r\n   * Fill a Vector3 with the extracted translation from the matrix\r\n   * @param result defines the Vector3 where to store the translation\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.getTranslationToRef = function (result) {\n    result.x = this._m[12];\n    result.y = this._m[13];\n    result.z = this._m[14];\n    return this;\n  };\n  /**\r\n   * Remove rotation and scaling part from the matrix\r\n   * @returns the updated matrix\r\n   */\n\n\n  Matrix.prototype.removeRotationAndScaling = function () {\n    var m = this.m;\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, m[12], m[13], m[14], m[15], this);\n\n    this._updateIdentityStatus(m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1);\n\n    return this;\n  };\n  /**\r\n   * Multiply two matrices\r\n   * @param other defines the second operand\r\n   * @returns a new matrix set with the multiplication result of the current Matrix and the given one\r\n   */\n\n\n  Matrix.prototype.multiply = function (other) {\n    var result = new Matrix();\n    this.multiplyToRef(other, result);\n    return result;\n  };\n  /**\r\n   * Copy the current matrix from the given one\r\n   * @param other defines the source matrix\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.copyFrom = function (other) {\n    other.copyToArray(this._m);\n    var o = other;\n\n    this._updateIdentityStatus(o._isIdentity, o._isIdentityDirty, o._isIdentity3x2, o._isIdentity3x2Dirty);\n\n    return this;\n  };\n  /**\r\n   * Populates the given array from the starting index with the current matrix values\r\n   * @param array defines the target array\r\n   * @param offset defines the offset in the target array where to start storing values\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.copyToArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    var source = this._m;\n    array[offset] = source[0];\n    array[offset + 1] = source[1];\n    array[offset + 2] = source[2];\n    array[offset + 3] = source[3];\n    array[offset + 4] = source[4];\n    array[offset + 5] = source[5];\n    array[offset + 6] = source[6];\n    array[offset + 7] = source[7];\n    array[offset + 8] = source[8];\n    array[offset + 9] = source[9];\n    array[offset + 10] = source[10];\n    array[offset + 11] = source[11];\n    array[offset + 12] = source[12];\n    array[offset + 13] = source[13];\n    array[offset + 14] = source[14];\n    array[offset + 15] = source[15];\n    return this;\n  };\n  /**\r\n   * Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one\r\n   * @param other defines the second operand\r\n   * @param result defines the matrix where to store the multiplication\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.multiplyToRef = function (other, result) {\n    if (this._isIdentity) {\n      result.copyFrom(other);\n      return this;\n    }\n\n    if (other._isIdentity) {\n      result.copyFrom(this);\n      return this;\n    }\n\n    this.multiplyToArray(other, result._m, 0);\n\n    result._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Sets the Float32Array \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one\r\n   * @param other defines the second operand\r\n   * @param result defines the array where to store the multiplication\r\n   * @param offset defines the offset in the target array where to start storing values\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.multiplyToArray = function (other, result, offset) {\n    var m = this._m;\n    var otherM = other.m;\n    var tm0 = m[0],\n        tm1 = m[1],\n        tm2 = m[2],\n        tm3 = m[3];\n    var tm4 = m[4],\n        tm5 = m[5],\n        tm6 = m[6],\n        tm7 = m[7];\n    var tm8 = m[8],\n        tm9 = m[9],\n        tm10 = m[10],\n        tm11 = m[11];\n    var tm12 = m[12],\n        tm13 = m[13],\n        tm14 = m[14],\n        tm15 = m[15];\n    var om0 = otherM[0],\n        om1 = otherM[1],\n        om2 = otherM[2],\n        om3 = otherM[3];\n    var om4 = otherM[4],\n        om5 = otherM[5],\n        om6 = otherM[6],\n        om7 = otherM[7];\n    var om8 = otherM[8],\n        om9 = otherM[9],\n        om10 = otherM[10],\n        om11 = otherM[11];\n    var om12 = otherM[12],\n        om13 = otherM[13],\n        om14 = otherM[14],\n        om15 = otherM[15];\n    result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;\n    result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;\n    result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;\n    result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;\n    result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;\n    result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;\n    result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;\n    result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;\n    result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;\n    result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;\n    result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;\n    result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;\n    result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;\n    result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;\n    result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;\n    result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;\n    return this;\n  };\n  /**\r\n   * Check equality between this matrix and a second one\r\n   * @param value defines the second matrix to compare\r\n   * @returns true is the current matrix and the given one values are strictly equal\r\n   */\n\n\n  Matrix.prototype.equals = function (value) {\n    var other = value;\n\n    if (!other) {\n      return false;\n    }\n\n    if (this._isIdentity || other._isIdentity) {\n      if (!this._isIdentityDirty && !other._isIdentityDirty) {\n        return this._isIdentity && other._isIdentity;\n      }\n    }\n\n    var m = this.m;\n    var om = other.m;\n    return m[0] === om[0] && m[1] === om[1] && m[2] === om[2] && m[3] === om[3] && m[4] === om[4] && m[5] === om[5] && m[6] === om[6] && m[7] === om[7] && m[8] === om[8] && m[9] === om[9] && m[10] === om[10] && m[11] === om[11] && m[12] === om[12] && m[13] === om[13] && m[14] === om[14] && m[15] === om[15];\n  };\n  /**\r\n   * Clone the current matrix\r\n   * @returns a new matrix from the current matrix\r\n   */\n\n\n  Matrix.prototype.clone = function () {\n    var matrix = new Matrix();\n    matrix.copyFrom(this);\n    return matrix;\n  };\n  /**\r\n   * Returns the name of the current matrix class\r\n   * @returns the string \"Matrix\"\r\n   */\n\n\n  Matrix.prototype.getClassName = function () {\n    return \"Matrix\";\n  };\n  /**\r\n   * Gets the hash code of the current matrix\r\n   * @returns the hash code\r\n   */\n\n\n  Matrix.prototype.getHashCode = function () {\n    var hash = this._m[0] | 0;\n\n    for (var i = 1; i < 16; i++) {\n      hash = hash * 397 ^ (this._m[i] | 0);\n    }\n\n    return hash;\n  };\n  /**\r\n   * Decomposes the current Matrix into a translation, rotation and scaling components\r\n   * @param scale defines the scale vector3 given as a reference to update\r\n   * @param rotation defines the rotation quaternion given as a reference to update\r\n   * @param translation defines the translation vector3 given as a reference to update\r\n   * @returns true if operation was successful\r\n   */\n\n\n  Matrix.prototype.decompose = function (scale, rotation, translation) {\n    if (this._isIdentity) {\n      if (translation) {\n        translation.setAll(0);\n      }\n\n      if (scale) {\n        scale.setAll(1);\n      }\n\n      if (rotation) {\n        rotation.copyFromFloats(0, 0, 0, 1);\n      }\n\n      return true;\n    }\n\n    var m = this._m;\n\n    if (translation) {\n      translation.copyFromFloats(m[12], m[13], m[14]);\n    }\n\n    scale = scale || MathTmp.Vector3[0];\n    scale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2]);\n    scale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6]);\n    scale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);\n\n    if (this.determinant() <= 0) {\n      scale.y *= -1;\n    }\n\n    if (scale._x === 0 || scale._y === 0 || scale._z === 0) {\n      if (rotation) {\n        rotation.copyFromFloats(0.0, 0.0, 0.0, 1.0);\n      }\n\n      return false;\n    }\n\n    if (rotation) {\n      var sx = 1 / scale._x,\n          sy = 1 / scale._y,\n          sz = 1 / scale._z;\n      Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, MathTmp.Matrix[0]);\n      Quaternion.FromRotationMatrixToRef(MathTmp.Matrix[0], rotation);\n    }\n\n    return true;\n  };\n  /**\r\n   * Gets specific row of the matrix\r\n   * @param index defines the number of the row to get\r\n   * @returns the index-th row of the current matrix as a new Vector4\r\n   */\n\n\n  Matrix.prototype.getRow = function (index) {\n    if (index < 0 || index > 3) {\n      return null;\n    }\n\n    var i = index * 4;\n    return new Vector4(this._m[i + 0], this._m[i + 1], this._m[i + 2], this._m[i + 3]);\n  };\n  /**\r\n   * Sets the index-th row of the current matrix to the vector4 values\r\n   * @param index defines the number of the row to set\r\n   * @param row defines the target vector4\r\n   * @returns the updated current matrix\r\n   */\n\n\n  Matrix.prototype.setRow = function (index, row) {\n    return this.setRowFromFloats(index, row.x, row.y, row.z, row.w);\n  };\n  /**\r\n   * Compute the transpose of the matrix\r\n   * @returns the new transposed matrix\r\n   */\n\n\n  Matrix.prototype.transpose = function () {\n    return Matrix.Transpose(this);\n  };\n  /**\r\n   * Compute the transpose of the matrix and store it in a given matrix\r\n   * @param result defines the target matrix\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.transposeToRef = function (result) {\n    Matrix.TransposeToRef(this, result);\n    return this;\n  };\n  /**\r\n   * Sets the index-th row of the current matrix with the given 4 x float values\r\n   * @param index defines the row index\r\n   * @param x defines the x component to set\r\n   * @param y defines the y component to set\r\n   * @param z defines the z component to set\r\n   * @param w defines the w component to set\r\n   * @returns the updated current matrix\r\n   */\n\n\n  Matrix.prototype.setRowFromFloats = function (index, x, y, z, w) {\n    if (index < 0 || index > 3) {\n      return this;\n    }\n\n    var i = index * 4;\n    this._m[i + 0] = x;\n    this._m[i + 1] = y;\n    this._m[i + 2] = z;\n    this._m[i + 3] = w;\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Compute a new matrix set with the current matrix values multiplied by scale (float)\r\n   * @param scale defines the scale factor\r\n   * @returns a new matrix\r\n   */\n\n\n  Matrix.prototype.scale = function (scale) {\n    var result = new Matrix();\n    this.scaleToRef(scale, result);\n    return result;\n  };\n  /**\r\n   * Scale the current matrix values by a factor to a given result matrix\r\n   * @param scale defines the scale factor\r\n   * @param result defines the matrix to store the result\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.scaleToRef = function (scale, result) {\n    for (var index = 0; index < 16; index++) {\n      result._m[index] = this._m[index] * scale;\n    }\n\n    result._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Scale the current matrix values by a factor and add the result to a given matrix\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Matrix to store the result\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.scaleAndAddToRef = function (scale, result) {\n    for (var index = 0; index < 16; index++) {\n      result._m[index] += this._m[index] * scale;\n    }\n\n    result._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).\r\n   * @param ref matrix to store the result\r\n   */\n\n\n  Matrix.prototype.toNormalMatrix = function (ref) {\n    var tmp = MathTmp.Matrix[0];\n    this.invertToRef(tmp);\n    tmp.transposeToRef(ref);\n    var m = ref._m;\n    Matrix.FromValuesToRef(m[0], m[1], m[2], 0.0, m[4], m[5], m[6], 0.0, m[8], m[9], m[10], 0.0, 0.0, 0.0, 0.0, 1.0, ref);\n  };\n  /**\r\n   * Gets only rotation part of the current matrix\r\n   * @returns a new matrix sets to the extracted rotation matrix from the current one\r\n   */\n\n\n  Matrix.prototype.getRotationMatrix = function () {\n    var result = new Matrix();\n    this.getRotationMatrixToRef(result);\n    return result;\n  };\n  /**\r\n   * Extracts the rotation matrix from the current one and sets it as the given \"result\"\r\n   * @param result defines the target matrix to store data to\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.getRotationMatrixToRef = function (result) {\n    var scale = MathTmp.Vector3[0];\n\n    if (!this.decompose(scale)) {\n      Matrix.IdentityToRef(result);\n      return this;\n    }\n\n    var m = this._m;\n    var sx = 1 / scale._x,\n        sy = 1 / scale._y,\n        sz = 1 / scale._z;\n    Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n    return this;\n  };\n  /**\r\n   * Toggles model matrix from being right handed to left handed in place and vice versa\r\n   */\n\n\n  Matrix.prototype.toggleModelMatrixHandInPlace = function () {\n    var m = this._m;\n    m[2] *= -1;\n    m[6] *= -1;\n    m[8] *= -1;\n    m[9] *= -1;\n    m[14] *= -1;\n\n    this._markAsUpdated();\n  };\n  /**\r\n   * Toggles projection matrix from being right handed to left handed in place and vice versa\r\n   */\n\n\n  Matrix.prototype.toggleProjectionMatrixHandInPlace = function () {\n    var m = this._m;\n    m[8] *= -1;\n    m[9] *= -1;\n    m[10] *= -1;\n    m[11] *= -1;\n\n    this._markAsUpdated();\n  }; // Statics\n\n  /**\r\n   * Creates a matrix from an array\r\n   * @param array defines the source array\r\n   * @param offset defines an offset in the source array\r\n   * @returns a new Matrix set from the starting index of the given array\r\n   */\n\n\n  Matrix.FromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    var result = new Matrix();\n    Matrix.FromArrayToRef(array, offset, result);\n    return result;\n  };\n  /**\r\n   * Copy the content of an array into a given matrix\r\n   * @param array defines the source array\r\n   * @param offset defines an offset in the source array\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.FromArrayToRef = function (array, offset, result) {\n    for (var index = 0; index < 16; index++) {\n      result._m[index] = array[index + offset];\n    }\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Stores an array into a matrix after having multiplied each component by a given factor\r\n   * @param array defines the source array\r\n   * @param offset defines the offset in the source array\r\n   * @param scale defines the scaling factor\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.FromFloat32ArrayToRefScaled = function (array, offset, scale, result) {\n    for (var index = 0; index < 16; index++) {\n      result._m[index] = array[index + offset] * scale;\n    }\n\n    result._markAsUpdated();\n  };\n\n  Object.defineProperty(Matrix, \"IdentityReadOnly\", {\n    /**\r\n     * Gets an identity matrix that must not be updated\r\n     */\n    get: function get() {\n      return Matrix._identityReadOnly;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Stores a list of values (16) inside a given matrix\r\n   * @param initialM11 defines 1st value of 1st row\r\n   * @param initialM12 defines 2nd value of 1st row\r\n   * @param initialM13 defines 3rd value of 1st row\r\n   * @param initialM14 defines 4th value of 1st row\r\n   * @param initialM21 defines 1st value of 2nd row\r\n   * @param initialM22 defines 2nd value of 2nd row\r\n   * @param initialM23 defines 3rd value of 2nd row\r\n   * @param initialM24 defines 4th value of 2nd row\r\n   * @param initialM31 defines 1st value of 3rd row\r\n   * @param initialM32 defines 2nd value of 3rd row\r\n   * @param initialM33 defines 3rd value of 3rd row\r\n   * @param initialM34 defines 4th value of 3rd row\r\n   * @param initialM41 defines 1st value of 4th row\r\n   * @param initialM42 defines 2nd value of 4th row\r\n   * @param initialM43 defines 3rd value of 4th row\r\n   * @param initialM44 defines 4th value of 4th row\r\n   * @param result defines the target matrix\r\n   */\n\n  Matrix.FromValuesToRef = function (initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result) {\n    var m = result._m;\n    m[0] = initialM11;\n    m[1] = initialM12;\n    m[2] = initialM13;\n    m[3] = initialM14;\n    m[4] = initialM21;\n    m[5] = initialM22;\n    m[6] = initialM23;\n    m[7] = initialM24;\n    m[8] = initialM31;\n    m[9] = initialM32;\n    m[10] = initialM33;\n    m[11] = initialM34;\n    m[12] = initialM41;\n    m[13] = initialM42;\n    m[14] = initialM43;\n    m[15] = initialM44;\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Creates new matrix from a list of values (16)\r\n   * @param initialM11 defines 1st value of 1st row\r\n   * @param initialM12 defines 2nd value of 1st row\r\n   * @param initialM13 defines 3rd value of 1st row\r\n   * @param initialM14 defines 4th value of 1st row\r\n   * @param initialM21 defines 1st value of 2nd row\r\n   * @param initialM22 defines 2nd value of 2nd row\r\n   * @param initialM23 defines 3rd value of 2nd row\r\n   * @param initialM24 defines 4th value of 2nd row\r\n   * @param initialM31 defines 1st value of 3rd row\r\n   * @param initialM32 defines 2nd value of 3rd row\r\n   * @param initialM33 defines 3rd value of 3rd row\r\n   * @param initialM34 defines 4th value of 3rd row\r\n   * @param initialM41 defines 1st value of 4th row\r\n   * @param initialM42 defines 2nd value of 4th row\r\n   * @param initialM43 defines 3rd value of 4th row\r\n   * @param initialM44 defines 4th value of 4th row\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.FromValues = function (initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44) {\n    var result = new Matrix();\n    var m = result._m;\n    m[0] = initialM11;\n    m[1] = initialM12;\n    m[2] = initialM13;\n    m[3] = initialM14;\n    m[4] = initialM21;\n    m[5] = initialM22;\n    m[6] = initialM23;\n    m[7] = initialM24;\n    m[8] = initialM31;\n    m[9] = initialM32;\n    m[10] = initialM33;\n    m[11] = initialM34;\n    m[12] = initialM41;\n    m[13] = initialM42;\n    m[14] = initialM43;\n    m[15] = initialM44;\n\n    result._markAsUpdated();\n\n    return result;\n  };\n  /**\r\n   * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\r\n   * @param scale defines the scale vector3\r\n   * @param rotation defines the rotation quaternion\r\n   * @param translation defines the translation vector3\r\n   * @returns a new matrix\r\n   */\n\n\n  Matrix.Compose = function (scale, rotation, translation) {\n    var result = new Matrix();\n    Matrix.ComposeToRef(scale, rotation, translation, result);\n    return result;\n  };\n  /**\r\n   * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\r\n   * @param scale defines the scale vector3\r\n   * @param rotation defines the rotation quaternion\r\n   * @param translation defines the translation vector3\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.ComposeToRef = function (scale, rotation, translation, result) {\n    var m = result._m;\n    var x = rotation._x,\n        y = rotation._y,\n        z = rotation._z,\n        w = rotation._w;\n    var x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n    var xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n    var yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n    var wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n    var sx = scale._x,\n        sy = scale._y,\n        sz = scale._z;\n    m[0] = (1 - (yy + zz)) * sx;\n    m[1] = (xy + wz) * sx;\n    m[2] = (xz - wy) * sx;\n    m[3] = 0;\n    m[4] = (xy - wz) * sy;\n    m[5] = (1 - (xx + zz)) * sy;\n    m[6] = (yz + wx) * sy;\n    m[7] = 0;\n    m[8] = (xz + wy) * sz;\n    m[9] = (yz - wx) * sz;\n    m[10] = (1 - (xx + yy)) * sz;\n    m[11] = 0;\n    m[12] = translation._x;\n    m[13] = translation._y;\n    m[14] = translation._z;\n    m[15] = 1;\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Creates a new identity matrix\r\n   * @returns a new identity matrix\r\n   */\n\n\n  Matrix.Identity = function () {\n    var identity = Matrix.FromValues(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n\n    identity._updateIdentityStatus(true);\n\n    return identity;\n  };\n  /**\r\n   * Creates a new identity matrix and stores the result in a given matrix\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.IdentityToRef = function (result) {\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n    result._updateIdentityStatus(true);\n  };\n  /**\r\n   * Creates a new zero matrix\r\n   * @returns a new zero matrix\r\n   */\n\n\n  Matrix.Zero = function () {\n    var zero = Matrix.FromValues(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n\n    zero._updateIdentityStatus(false);\n\n    return zero;\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the X axis\r\n   * @param angle defines the angle (in radians) to use\r\n   * @return the new matrix\r\n   */\n\n\n  Matrix.RotationX = function (angle) {\n    var result = new Matrix();\n    Matrix.RotationXToRef(angle, result);\n    return result;\n  };\n  /**\r\n   * Creates a new matrix as the invert of a given matrix\r\n   * @param source defines the source matrix\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.Invert = function (source) {\n    var result = new Matrix();\n    source.invertToRef(result);\n    return result;\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix\r\n   * @param angle defines the angle (in radians) to use\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationXToRef = function (angle, result) {\n    var s = Math.sin(angle);\n    var c = Math.cos(angle);\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n    result._updateIdentityStatus(c === 1 && s === 0);\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the Y axis\r\n   * @param angle defines the angle (in radians) to use\r\n   * @return the new matrix\r\n   */\n\n\n  Matrix.RotationY = function (angle) {\n    var result = new Matrix();\n    Matrix.RotationYToRef(angle, result);\n    return result;\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix\r\n   * @param angle defines the angle (in radians) to use\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationYToRef = function (angle, result) {\n    var s = Math.sin(angle);\n    var c = Math.cos(angle);\n    Matrix.FromValuesToRef(c, 0.0, -s, 0.0, 0.0, 1.0, 0.0, 0.0, s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n    result._updateIdentityStatus(c === 1 && s === 0);\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the Z axis\r\n   * @param angle defines the angle (in radians) to use\r\n   * @return the new matrix\r\n   */\n\n\n  Matrix.RotationZ = function (angle) {\n    var result = new Matrix();\n    Matrix.RotationZToRef(angle, result);\n    return result;\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix\r\n   * @param angle defines the angle (in radians) to use\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationZToRef = function (angle, result) {\n    var s = Math.sin(angle);\n    var c = Math.cos(angle);\n    Matrix.FromValuesToRef(c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n    result._updateIdentityStatus(c === 1 && s === 0);\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the given axis\r\n   * @param axis defines the axis to use\r\n   * @param angle defines the angle (in radians) to use\r\n   * @return the new matrix\r\n   */\n\n\n  Matrix.RotationAxis = function (axis, angle) {\n    var result = new Matrix();\n    Matrix.RotationAxisToRef(axis, angle, result);\n    return result;\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix\r\n   * @param axis defines the axis to use\r\n   * @param angle defines the angle (in radians) to use\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationAxisToRef = function (axis, angle, result) {\n    var s = Math.sin(-angle);\n    var c = Math.cos(-angle);\n    var c1 = 1 - c;\n    axis.normalize();\n    var m = result._m;\n    m[0] = axis._x * axis._x * c1 + c;\n    m[1] = axis._x * axis._y * c1 - axis._z * s;\n    m[2] = axis._x * axis._z * c1 + axis._y * s;\n    m[3] = 0.0;\n    m[4] = axis._y * axis._x * c1 + axis._z * s;\n    m[5] = axis._y * axis._y * c1 + c;\n    m[6] = axis._y * axis._z * c1 - axis._x * s;\n    m[7] = 0.0;\n    m[8] = axis._z * axis._x * c1 - axis._y * s;\n    m[9] = axis._z * axis._y * c1 + axis._x * s;\n    m[10] = axis._z * axis._z * c1 + c;\n    m[11] = 0.0;\n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = 0.0;\n    m[15] = 1.0;\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Takes normalised vectors and returns a rotation matrix to align \"from\" with \"to\".\r\n   * Taken from http://www.iquilezles.org/www/articles/noacos/noacos.htm\r\n   * @param from defines the vector to align\r\n   * @param to defines the vector to align to\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationAlignToRef = function (from, to, result) {\n    var v = Vector3.Cross(to, from);\n    var c = Vector3.Dot(to, from);\n    var k = 1 / (1 + c);\n    var m = result._m;\n    m[0] = v._x * v._x * k + c;\n    m[1] = v._y * v._x * k - v._z;\n    m[2] = v._z * v._x * k + v._y;\n    m[3] = 0;\n    m[4] = v._x * v._y * k + v._z;\n    m[5] = v._y * v._y * k + c;\n    m[6] = v._z * v._y * k - v._x;\n    m[7] = 0;\n    m[8] = v._x * v._z * k - v._y;\n    m[9] = v._y * v._z * k + v._x;\n    m[10] = v._z * v._z * k + c;\n    m[11] = 0;\n    m[12] = 0;\n    m[13] = 0;\n    m[14] = 0;\n    m[15] = 1;\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Creates a rotation matrix\r\n   * @param yaw defines the yaw angle in radians (Y axis)\r\n   * @param pitch defines the pitch angle in radians (X axis)\r\n   * @param roll defines the roll angle in radians (Z axis)\r\n   * @returns the new rotation matrix\r\n   */\n\n\n  Matrix.RotationYawPitchRoll = function (yaw, pitch, roll) {\n    var result = new Matrix();\n    Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, result);\n    return result;\n  };\n  /**\r\n   * Creates a rotation matrix and stores it in a given matrix\r\n   * @param yaw defines the yaw angle in radians (Y axis)\r\n   * @param pitch defines the pitch angle in radians (X axis)\r\n   * @param roll defines the roll angle in radians (Z axis)\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationYawPitchRollToRef = function (yaw, pitch, roll, result) {\n    Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, MathTmp.Quaternion[0]);\n    MathTmp.Quaternion[0].toRotationMatrix(result);\n  };\n  /**\r\n   * Creates a scaling matrix\r\n   * @param x defines the scale factor on X axis\r\n   * @param y defines the scale factor on Y axis\r\n   * @param z defines the scale factor on Z axis\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.Scaling = function (x, y, z) {\n    var result = new Matrix();\n    Matrix.ScalingToRef(x, y, z, result);\n    return result;\n  };\n  /**\r\n   * Creates a scaling matrix and stores it in a given matrix\r\n   * @param x defines the scale factor on X axis\r\n   * @param y defines the scale factor on Y axis\r\n   * @param z defines the scale factor on Z axis\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.ScalingToRef = function (x, y, z, result) {\n    Matrix.FromValuesToRef(x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n    result._updateIdentityStatus(x === 1 && y === 1 && z === 1);\n  };\n  /**\r\n   * Creates a translation matrix\r\n   * @param x defines the translation on X axis\r\n   * @param y defines the translation on Y axis\r\n   * @param z defines the translationon Z axis\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.Translation = function (x, y, z) {\n    var result = new Matrix();\n    Matrix.TranslationToRef(x, y, z, result);\n    return result;\n  };\n  /**\r\n   * Creates a translation matrix and stores it in a given matrix\r\n   * @param x defines the translation on X axis\r\n   * @param y defines the translation on Y axis\r\n   * @param z defines the translationon Z axis\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.TranslationToRef = function (x, y, z, result) {\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0, result);\n\n    result._updateIdentityStatus(x === 0 && y === 0 && z === 0);\n  };\n  /**\r\n   * Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\r\n   * @param startValue defines the start value\r\n   * @param endValue defines the end value\r\n   * @param gradient defines the gradient factor\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.Lerp = function (startValue, endValue, gradient) {\n    var result = new Matrix();\n    Matrix.LerpToRef(startValue, endValue, gradient, result);\n    return result;\n  };\n  /**\r\n   * Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\r\n   * @param startValue defines the start value\r\n   * @param endValue defines the end value\r\n   * @param gradient defines the gradient factor\r\n   * @param result defines the Matrix object where to store data\r\n   */\n\n\n  Matrix.LerpToRef = function (startValue, endValue, gradient, result) {\n    var resultM = result._m;\n    var startM = startValue.m;\n    var endM = endValue.m;\n\n    for (var index = 0; index < 16; index++) {\n      resultM[index] = startM[index] * (1.0 - gradient) + endM[index] * gradient;\n    }\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Builds a new matrix whose values are computed by:\r\n   * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\r\n   * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\r\n   * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\r\n   * @param startValue defines the first matrix\r\n   * @param endValue defines the second matrix\r\n   * @param gradient defines the gradient between the two matrices\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.DecomposeLerp = function (startValue, endValue, gradient) {\n    var result = new Matrix();\n    Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\n    return result;\n  };\n  /**\r\n   * Update a matrix to values which are computed by:\r\n   * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\r\n   * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\r\n   * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\r\n   * @param startValue defines the first matrix\r\n   * @param endValue defines the second matrix\r\n   * @param gradient defines the gradient between the two matrices\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.DecomposeLerpToRef = function (startValue, endValue, gradient, result) {\n    var startScale = MathTmp.Vector3[0];\n    var startRotation = MathTmp.Quaternion[0];\n    var startTranslation = MathTmp.Vector3[1];\n    startValue.decompose(startScale, startRotation, startTranslation);\n    var endScale = MathTmp.Vector3[2];\n    var endRotation = MathTmp.Quaternion[1];\n    var endTranslation = MathTmp.Vector3[3];\n    endValue.decompose(endScale, endRotation, endTranslation);\n    var resultScale = MathTmp.Vector3[4];\n    Vector3.LerpToRef(startScale, endScale, gradient, resultScale);\n    var resultRotation = MathTmp.Quaternion[2];\n    Quaternion.SlerpToRef(startRotation, endRotation, gradient, resultRotation);\n    var resultTranslation = MathTmp.Vector3[5];\n    Vector3.LerpToRef(startTranslation, endTranslation, gradient, resultTranslation);\n    Matrix.ComposeToRef(resultScale, resultRotation, resultTranslation, result);\n  };\n  /**\r\n   * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\r\n   * This function works in left handed mode\r\n   * @param eye defines the final position of the entity\r\n   * @param target defines where the entity should look at\r\n   * @param up defines the up vector for the entity\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.LookAtLH = function (eye, target, up) {\n    var result = new Matrix();\n    Matrix.LookAtLHToRef(eye, target, up, result);\n    return result;\n  };\n  /**\r\n   * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\r\n   * This function works in left handed mode\r\n   * @param eye defines the final position of the entity\r\n   * @param target defines where the entity should look at\r\n   * @param up defines the up vector for the entity\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.LookAtLHToRef = function (eye, target, up, result) {\n    var xAxis = MathTmp.Vector3[0];\n    var yAxis = MathTmp.Vector3[1];\n    var zAxis = MathTmp.Vector3[2]; // Z axis\n\n    target.subtractToRef(eye, zAxis);\n    zAxis.normalize(); // X axis\n\n    Vector3.CrossToRef(up, zAxis, xAxis);\n    var xSquareLength = xAxis.lengthSquared();\n\n    if (xSquareLength === 0) {\n      xAxis.x = 1.0;\n    } else {\n      xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n    } // Y axis\n\n\n    Vector3.CrossToRef(zAxis, xAxis, yAxis);\n    yAxis.normalize(); // Eye angles\n\n    var ex = -Vector3.Dot(xAxis, eye);\n    var ey = -Vector3.Dot(yAxis, eye);\n    var ez = -Vector3.Dot(zAxis, eye);\n    Matrix.FromValuesToRef(xAxis._x, yAxis._x, zAxis._x, 0.0, xAxis._y, yAxis._y, zAxis._y, 0.0, xAxis._z, yAxis._z, zAxis._z, 0.0, ex, ey, ez, 1.0, result);\n  };\n  /**\r\n   * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\r\n   * This function works in right handed mode\r\n   * @param eye defines the final position of the entity\r\n   * @param target defines where the entity should look at\r\n   * @param up defines the up vector for the entity\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.LookAtRH = function (eye, target, up) {\n    var result = new Matrix();\n    Matrix.LookAtRHToRef(eye, target, up, result);\n    return result;\n  };\n  /**\r\n   * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\r\n   * This function works in right handed mode\r\n   * @param eye defines the final position of the entity\r\n   * @param target defines where the entity should look at\r\n   * @param up defines the up vector for the entity\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.LookAtRHToRef = function (eye, target, up, result) {\n    var xAxis = MathTmp.Vector3[0];\n    var yAxis = MathTmp.Vector3[1];\n    var zAxis = MathTmp.Vector3[2]; // Z axis\n\n    eye.subtractToRef(target, zAxis);\n    zAxis.normalize(); // X axis\n\n    Vector3.CrossToRef(up, zAxis, xAxis);\n    var xSquareLength = xAxis.lengthSquared();\n\n    if (xSquareLength === 0) {\n      xAxis.x = 1.0;\n    } else {\n      xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n    } // Y axis\n\n\n    Vector3.CrossToRef(zAxis, xAxis, yAxis);\n    yAxis.normalize(); // Eye angles\n\n    var ex = -Vector3.Dot(xAxis, eye);\n    var ey = -Vector3.Dot(yAxis, eye);\n    var ez = -Vector3.Dot(zAxis, eye);\n    Matrix.FromValuesToRef(xAxis._x, yAxis._x, zAxis._x, 0.0, xAxis._y, yAxis._y, zAxis._y, 0.0, xAxis._z, yAxis._z, zAxis._z, 0.0, ex, ey, ez, 1.0, result);\n  };\n  /**\r\n   * Create a left-handed orthographic projection matrix\r\n   * @param width defines the viewport width\r\n   * @param height defines the viewport height\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a left-handed orthographic projection matrix\r\n   */\n\n\n  Matrix.OrthoLH = function (width, height, znear, zfar) {\n    var matrix = new Matrix();\n    Matrix.OrthoLHToRef(width, height, znear, zfar, matrix);\n    return matrix;\n  };\n  /**\r\n   * Store a left-handed orthographic projection to a given matrix\r\n   * @param width defines the viewport width\r\n   * @param height defines the viewport height\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.OrthoLHToRef = function (width, height, znear, zfar, result) {\n    var n = znear;\n    var f = zfar;\n    var a = 2.0 / width;\n    var b = 2.0 / height;\n    var c = 2.0 / (f - n);\n    var d = -(f + n) / (f - n);\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, 0.0, 0.0, d, 1.0, result);\n\n    result._updateIdentityStatus(a === 1 && b === 1 && c === 1 && d === 0);\n  };\n  /**\r\n   * Create a left-handed orthographic projection matrix\r\n   * @param left defines the viewport left coordinate\r\n   * @param right defines the viewport right coordinate\r\n   * @param bottom defines the viewport bottom coordinate\r\n   * @param top defines the viewport top coordinate\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a left-handed orthographic projection matrix\r\n   */\n\n\n  Matrix.OrthoOffCenterLH = function (left, right, bottom, top, znear, zfar) {\n    var matrix = new Matrix();\n    Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix);\n    return matrix;\n  };\n  /**\r\n   * Stores a left-handed orthographic projection into a given matrix\r\n   * @param left defines the viewport left coordinate\r\n   * @param right defines the viewport right coordinate\r\n   * @param bottom defines the viewport bottom coordinate\r\n   * @param top defines the viewport top coordinate\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.OrthoOffCenterLHToRef = function (left, right, bottom, top, znear, zfar, result) {\n    var n = znear;\n    var f = zfar;\n    var a = 2.0 / (right - left);\n    var b = 2.0 / (top - bottom);\n    var c = 2.0 / (f - n);\n    var d = -(f + n) / (f - n);\n    var i0 = (left + right) / (left - right);\n    var i1 = (top + bottom) / (bottom - top);\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, i0, i1, d, 1.0, result);\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Creates a right-handed orthographic projection matrix\r\n   * @param left defines the viewport left coordinate\r\n   * @param right defines the viewport right coordinate\r\n   * @param bottom defines the viewport bottom coordinate\r\n   * @param top defines the viewport top coordinate\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a right-handed orthographic projection matrix\r\n   */\n\n\n  Matrix.OrthoOffCenterRH = function (left, right, bottom, top, znear, zfar) {\n    var matrix = new Matrix();\n    Matrix.OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix);\n    return matrix;\n  };\n  /**\r\n   * Stores a right-handed orthographic projection into a given matrix\r\n   * @param left defines the viewport left coordinate\r\n   * @param right defines the viewport right coordinate\r\n   * @param bottom defines the viewport bottom coordinate\r\n   * @param top defines the viewport top coordinate\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.OrthoOffCenterRHToRef = function (left, right, bottom, top, znear, zfar, result) {\n    Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result);\n    result._m[10] *= -1; // No need to call _markAsUpdated as previous function already called it and let _isIdentityDirty to true\n  };\n  /**\r\n   * Creates a left-handed perspective projection matrix\r\n   * @param width defines the viewport width\r\n   * @param height defines the viewport height\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a left-handed perspective projection matrix\r\n   */\n\n\n  Matrix.PerspectiveLH = function (width, height, znear, zfar) {\n    var matrix = new Matrix();\n    var n = znear;\n    var f = zfar;\n    var a = 2.0 * n / width;\n    var b = 2.0 * n / height;\n    var c = (f + n) / (f - n);\n    var d = -2.0 * f * n / (f - n);\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, matrix);\n\n    matrix._updateIdentityStatus(false);\n\n    return matrix;\n  };\n  /**\r\n   * Creates a left-handed perspective projection matrix\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a left-handed perspective projection matrix\r\n   */\n\n\n  Matrix.PerspectiveFovLH = function (fov, aspect, znear, zfar) {\n    var matrix = new Matrix();\n    Matrix.PerspectiveFovLHToRef(fov, aspect, znear, zfar, matrix);\n    return matrix;\n  };\n  /**\r\n   * Stores a left-handed perspective projection into a given matrix\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\r\n   */\n\n\n  Matrix.PerspectiveFovLHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n    if (isVerticalFovFixed === void 0) {\n      isVerticalFovFixed = true;\n    }\n\n    var n = znear;\n    var f = zfar;\n    var t = 1.0 / Math.tan(fov * 0.5);\n    var a = isVerticalFovFixed ? t / aspect : t;\n    var b = isVerticalFovFixed ? t : t * aspect;\n    var c = (f + n) / (f - n);\n    var d = -2.0 * f * n / (f - n);\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, result);\n\n    result._updateIdentityStatus(false);\n  };\n  /**\r\n   * Stores a left-handed perspective projection into a given matrix with depth reversed\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar not used as infinity is used as far clip\r\n   * @param result defines the target matrix\r\n   * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\r\n   */\n\n\n  Matrix.PerspectiveFovReverseLHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n    if (isVerticalFovFixed === void 0) {\n      isVerticalFovFixed = true;\n    }\n\n    var t = 1.0 / Math.tan(fov * 0.5);\n    var a = isVerticalFovFixed ? t / aspect : t;\n    var b = isVerticalFovFixed ? t : t * aspect;\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, -znear, 1.0, 0.0, 0.0, 1.0, 0.0, result);\n\n    result._updateIdentityStatus(false);\n  };\n  /**\r\n   * Creates a right-handed perspective projection matrix\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a right-handed perspective projection matrix\r\n   */\n\n\n  Matrix.PerspectiveFovRH = function (fov, aspect, znear, zfar) {\n    var matrix = new Matrix();\n    Matrix.PerspectiveFovRHToRef(fov, aspect, znear, zfar, matrix);\n    return matrix;\n  };\n  /**\r\n   * Stores a right-handed perspective projection into a given matrix\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\r\n   */\n\n\n  Matrix.PerspectiveFovRHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n    //alternatively this could be expressed as:\n    //    m = PerspectiveFovLHToRef\n    //    m[10] *= -1.0;\n    //    m[11] *= -1.0;\n    if (isVerticalFovFixed === void 0) {\n      isVerticalFovFixed = true;\n    }\n\n    var n = znear;\n    var f = zfar;\n    var t = 1.0 / Math.tan(fov * 0.5);\n    var a = isVerticalFovFixed ? t / aspect : t;\n    var b = isVerticalFovFixed ? t : t * aspect;\n    var c = -(f + n) / (f - n);\n    var d = -2 * f * n / (f - n);\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, -1.0, 0.0, 0.0, d, 0.0, result);\n\n    result._updateIdentityStatus(false);\n  };\n  /**\r\n   * Stores a right-handed perspective projection into a given matrix\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar not used as infinity is used as far clip\r\n   * @param result defines the target matrix\r\n   * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\r\n   */\n\n\n  Matrix.PerspectiveFovReverseRHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n    //alternatively this could be expressed as:\n    //    m = PerspectiveFovLHToRef\n    //    m[10] *= -1.0;\n    //    m[11] *= -1.0;\n    if (isVerticalFovFixed === void 0) {\n      isVerticalFovFixed = true;\n    }\n\n    var t = 1.0 / Math.tan(fov * 0.5);\n    var a = isVerticalFovFixed ? t / aspect : t;\n    var b = isVerticalFovFixed ? t : t * aspect;\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, -znear, -1.0, 0.0, 0.0, -1.0, 0.0, result);\n\n    result._updateIdentityStatus(false);\n  };\n  /**\r\n   * Stores a perspective projection for WebVR info a given matrix\r\n   * @param fov defines the field of view\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   * @param rightHanded defines if the matrix must be in right-handed mode (false by default)\r\n   */\n\n\n  Matrix.PerspectiveFovWebVRToRef = function (fov, znear, zfar, result, rightHanded) {\n    if (rightHanded === void 0) {\n      rightHanded = false;\n    }\n\n    var rightHandedFactor = rightHanded ? -1 : 1;\n    var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n    var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n    var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n    var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n    var xScale = 2.0 / (leftTan + rightTan);\n    var yScale = 2.0 / (upTan + downTan);\n    var m = result._m;\n    m[0] = xScale;\n    m[1] = m[2] = m[3] = m[4] = 0.0;\n    m[5] = yScale;\n    m[6] = m[7] = 0.0;\n    m[8] = (leftTan - rightTan) * xScale * 0.5;\n    m[9] = -((upTan - downTan) * yScale * 0.5);\n    m[10] = -zfar / (znear - zfar);\n    m[11] = 1.0 * rightHandedFactor;\n    m[12] = m[13] = m[15] = 0.0;\n    m[14] = -(2.0 * zfar * znear) / (zfar - znear);\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Computes a complete transformation matrix\r\n   * @param viewport defines the viewport to use\r\n   * @param world defines the world matrix\r\n   * @param view defines the view matrix\r\n   * @param projection defines the projection matrix\r\n   * @param zmin defines the near clip plane\r\n   * @param zmax defines the far clip plane\r\n   * @returns the transformation matrix\r\n   */\n\n\n  Matrix.GetFinalMatrix = function (viewport, world, view, projection, zmin, zmax) {\n    var cw = viewport.width;\n    var ch = viewport.height;\n    var cx = viewport.x;\n    var cy = viewport.y;\n    var viewportMatrix = Matrix.FromValues(cw / 2.0, 0.0, 0.0, 0.0, 0.0, -ch / 2.0, 0.0, 0.0, 0.0, 0.0, zmax - zmin, 0.0, cx + cw / 2.0, ch / 2.0 + cy, zmin, 1.0);\n    var matrix = MathTmp.Matrix[0];\n    world.multiplyToRef(view, matrix);\n    matrix.multiplyToRef(projection, matrix);\n    return matrix.multiply(viewportMatrix);\n  };\n  /**\r\n   * Extracts a 2x2 matrix from a given matrix and store the result in a Float32Array\r\n   * @param matrix defines the matrix to use\r\n   * @returns a new Float32Array array with 4 elements : the 2x2 matrix extracted from the given matrix\r\n   */\n\n\n  Matrix.GetAsMatrix2x2 = function (matrix) {\n    var m = matrix.m;\n    var arr = [m[0], m[1], m[4], m[5]];\n    return PerformanceConfigurator.MatrixUse64Bits ? arr : new Float32Array(arr);\n  };\n  /**\r\n   * Extracts a 3x3 matrix from a given matrix and store the result in a Float32Array\r\n   * @param matrix defines the matrix to use\r\n   * @returns a new Float32Array array with 9 elements : the 3x3 matrix extracted from the given matrix\r\n   */\n\n\n  Matrix.GetAsMatrix3x3 = function (matrix) {\n    var m = matrix.m;\n    var arr = [m[0], m[1], m[2], m[4], m[5], m[6], m[8], m[9], m[10]];\n    return PerformanceConfigurator.MatrixUse64Bits ? arr : new Float32Array(arr);\n  };\n  /**\r\n   * Compute the transpose of a given matrix\r\n   * @param matrix defines the matrix to transpose\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.Transpose = function (matrix) {\n    var result = new Matrix();\n    Matrix.TransposeToRef(matrix, result);\n    return result;\n  };\n  /**\r\n   * Compute the transpose of a matrix and store it in a target matrix\r\n   * @param matrix defines the matrix to transpose\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.TransposeToRef = function (matrix, result) {\n    var rm = result._m;\n    var mm = matrix.m;\n    rm[0] = mm[0];\n    rm[1] = mm[4];\n    rm[2] = mm[8];\n    rm[3] = mm[12];\n    rm[4] = mm[1];\n    rm[5] = mm[5];\n    rm[6] = mm[9];\n    rm[7] = mm[13];\n    rm[8] = mm[2];\n    rm[9] = mm[6];\n    rm[10] = mm[10];\n    rm[11] = mm[14];\n    rm[12] = mm[3];\n    rm[13] = mm[7];\n    rm[14] = mm[11];\n    rm[15] = mm[15]; // identity-ness does not change when transposing\n\n    result._updateIdentityStatus(matrix._isIdentity, matrix._isIdentityDirty);\n  };\n  /**\r\n   * Computes a reflection matrix from a plane\r\n   * @param plane defines the reflection plane\r\n   * @returns a new matrix\r\n   */\n\n\n  Matrix.Reflection = function (plane) {\n    var matrix = new Matrix();\n    Matrix.ReflectionToRef(plane, matrix);\n    return matrix;\n  };\n  /**\r\n   * Computes a reflection matrix from a plane\r\n   * @param plane defines the reflection plane\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.ReflectionToRef = function (plane, result) {\n    plane.normalize();\n    var x = plane.normal.x;\n    var y = plane.normal.y;\n    var z = plane.normal.z;\n    var temp = -2 * x;\n    var temp2 = -2 * y;\n    var temp3 = -2 * z;\n    Matrix.FromValuesToRef(temp * x + 1, temp2 * x, temp3 * x, 0.0, temp * y, temp2 * y + 1, temp3 * y, 0.0, temp * z, temp2 * z, temp3 * z + 1, 0.0, temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1.0, result);\n  };\n  /**\r\n   * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\r\n   * @param xaxis defines the value of the 1st axis\r\n   * @param yaxis defines the value of the 2nd axis\r\n   * @param zaxis defines the value of the 3rd axis\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.FromXYZAxesToRef = function (xaxis, yaxis, zaxis, result) {\n    Matrix.FromValuesToRef(xaxis._x, xaxis._y, xaxis._z, 0.0, yaxis._x, yaxis._y, yaxis._z, 0.0, zaxis._x, zaxis._y, zaxis._z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n  };\n  /**\r\n   * Creates a rotation matrix from a quaternion and stores it in a target matrix\r\n   * @param quat defines the quaternion to use\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.FromQuaternionToRef = function (quat, result) {\n    var xx = quat._x * quat._x;\n    var yy = quat._y * quat._y;\n    var zz = quat._z * quat._z;\n    var xy = quat._x * quat._y;\n    var zw = quat._z * quat._w;\n    var zx = quat._z * quat._x;\n    var yw = quat._y * quat._w;\n    var yz = quat._y * quat._z;\n    var xw = quat._x * quat._w;\n    result._m[0] = 1.0 - 2.0 * (yy + zz);\n    result._m[1] = 2.0 * (xy + zw);\n    result._m[2] = 2.0 * (zx - yw);\n    result._m[3] = 0.0;\n    result._m[4] = 2.0 * (xy - zw);\n    result._m[5] = 1.0 - 2.0 * (zz + xx);\n    result._m[6] = 2.0 * (yz + xw);\n    result._m[7] = 0.0;\n    result._m[8] = 2.0 * (zx + yw);\n    result._m[9] = 2.0 * (yz - xw);\n    result._m[10] = 1.0 - 2.0 * (yy + xx);\n    result._m[11] = 0.0;\n    result._m[12] = 0.0;\n    result._m[13] = 0.0;\n    result._m[14] = 0.0;\n    result._m[15] = 1.0;\n\n    result._markAsUpdated();\n  };\n\n  Matrix._updateFlagSeed = 0;\n  Matrix._identityReadOnly = Matrix.Identity();\n  return Matrix;\n}();\n\nexport { Matrix };\n/**\r\n * @hidden\r\n * Same as Tmp but not exported to keep it only for math functions to avoid conflicts\r\n */\n\nvar MathTmp =\n/** @class */\nfunction () {\n  function MathTmp() {}\n\n  MathTmp.Vector3 = ArrayTools.BuildArray(6, Vector3.Zero);\n  MathTmp.Matrix = ArrayTools.BuildArray(2, Matrix.Identity);\n  MathTmp.Quaternion = ArrayTools.BuildArray(3, Quaternion.Zero);\n  return MathTmp;\n}();\n/**\r\n * @hidden\r\n */\n\n\nvar TmpVectors =\n/** @class */\nfunction () {\n  function TmpVectors() {}\n\n  TmpVectors.Vector2 = ArrayTools.BuildArray(3, Vector2.Zero); // 3 temp Vector2 at once should be enough\n\n  TmpVectors.Vector3 = ArrayTools.BuildArray(13, Vector3.Zero); // 13 temp Vector3 at once should be enough\n\n  TmpVectors.Vector4 = ArrayTools.BuildArray(3, Vector4.Zero); // 3 temp Vector4 at once should be enough\n\n  TmpVectors.Quaternion = ArrayTools.BuildArray(2, Quaternion.Zero); // 2 temp Quaternion at once should be enough\n\n  TmpVectors.Matrix = ArrayTools.BuildArray(8, Matrix.Identity); // 8 temp Matrices at once should be enough\n\n  return TmpVectors;\n}();\n\nexport { TmpVectors };\n_TypeStore.RegisteredTypes[\"BABYLON.Vector2\"] = Vector2;\n_TypeStore.RegisteredTypes[\"BABYLON.Vector3\"] = Vector3;\n_TypeStore.RegisteredTypes[\"BABYLON.Vector4\"] = Vector4;\n_TypeStore.RegisteredTypes[\"BABYLON.Matrix\"] = Matrix;","map":null,"metadata":{},"sourceType":"module"}