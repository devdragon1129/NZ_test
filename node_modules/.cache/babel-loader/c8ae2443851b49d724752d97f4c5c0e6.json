{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.takeMaybe = exports.take = exports.spawn = exports.setContext = exports.select = exports.race = exports.putResolve = exports.put = exports.join = exports.fork = exports.getContext = exports.flush = exports.cps = exports.cancelled = exports.cancel = exports.call = exports.apply = exports.actionChannel = void 0;\n\nvar effects = _interopRequireWildcard(require(\"redux-saga/effects\"));\n\nvar _helpers = require(\"./helpers\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar actionChannel = (0, _helpers.wrapEffectCreator)(effects.actionChannel);\nexports.actionChannel = actionChannel;\nvar apply = (0, _helpers.wrapEffectCreator)(effects.apply);\nexports.apply = apply;\nvar call = (0, _helpers.wrapEffectCreator)(effects.call);\nexports.call = call;\nvar cancel = (0, _helpers.wrapEffectCreator)(effects.cancel);\nexports.cancel = cancel;\nvar cancelled = (0, _helpers.wrapEffectCreator)(effects.cancelled);\nexports.cancelled = cancelled;\nvar cps = (0, _helpers.wrapEffectCreator)(effects.cps);\nexports.cps = cps;\nvar flush = (0, _helpers.wrapEffectCreator)(effects.flush);\nexports.flush = flush;\nvar getContext = (0, _helpers.wrapEffectCreator)(effects.getContext);\nexports.getContext = getContext;\nvar fork = (0, _helpers.wrapEffectCreator)(effects.fork);\nexports.fork = fork;\nvar join = (0, _helpers.wrapEffectCreator)(effects.join);\nexports.join = join;\nvar put = (0, _helpers.wrapEffectCreator)(effects.put);\nexports.put = put;\nvar putResolve = (0, _helpers.wrapEffectCreator)(effects.putResolve);\nexports.putResolve = putResolve;\nvar race = (0, _helpers.wrapEffectCreator)(effects.race);\nexports.race = race;\nvar select = (0, _helpers.wrapEffectCreator)(effects.select);\nexports.select = select;\nvar setContext = (0, _helpers.wrapEffectCreator)(effects.setContext);\nexports.setContext = setContext;\nvar spawn = (0, _helpers.wrapEffectCreator)(effects.spawn);\nexports.spawn = spawn;\nvar take = (0, _helpers.wrapEffectCreator)(effects.take);\nexports.take = take;\nvar takeMaybe = (0, _helpers.wrapEffectCreator)(effects.takeMaybe);\nexports.takeMaybe = takeMaybe;\nactionChannel.like = (0, _helpers.like)('actionChannel');\n\nactionChannel.pattern = function (pattern) {\n  return actionChannel.like({\n    pattern: pattern\n  });\n};\n\napply.like = (0, _helpers.like)('call');\n\napply.fn = function (fn) {\n  return apply.like({\n    fn: fn\n  });\n};\n\ncall.like = (0, _helpers.like)('call');\n\ncall.fn = function (fn) {\n  return call.like({\n    fn: fn\n  });\n};\n\ncps.like = (0, _helpers.like)('cps');\n\ncps.fn = function (fn) {\n  return cps.like({\n    fn: fn\n  });\n};\n\nfork.like = (0, _helpers.like)('fork');\n\nfork.fn = function (fn) {\n  return fork.like({\n    fn: fn\n  });\n};\n\nput.like = (0, _helpers.like)('put');\n\nput.actionType = function (type) {\n  return put.like({\n    action: {\n      type: type\n    }\n  });\n};\n\nputResolve.like = (0, _helpers.like)('put', {\n  resolve: true\n});\n\nputResolve.actionType = function (type) {\n  return putResolve.like({\n    action: {\n      type: type\n    }\n  });\n};\n\nselect.like = (0, _helpers.like)('select');\n\nselect.selector = function (selector) {\n  return select.like({\n    selector: selector\n  });\n};\n\nspawn.like = (0, _helpers.like)('spawn', {\n  detached: true\n});\n\nspawn.fn = function (fn) {\n  return spawn.like({\n    fn: fn\n  });\n};","map":null,"metadata":{},"sourceType":"script"}