{"ast":null,"code":"import { connect } from 'react-redux';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { isConnecting } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { getLandId } from 'modules/location/selectors';\nimport { getLoading, getLands, getDeploymentsByLandId } from 'modules/land/selectors';\nimport { isLoggingIn } from 'modules/identity/selectors';\nimport { FETCH_LANDS_REQUEST } from 'modules/land/actions';\nimport LandProvider from './LandProvider';\n\nvar mapState = function mapState(state, ownProps) {\n  var id = ownProps.id || getLandId(state);\n  var lands = getLands(state);\n  var land = lands.find(function (land) {\n    return land.id === id;\n  }) || null;\n  var deploymentsByLandId = getDeploymentsByLandId(state);\n  var deployments = land && land.id in deploymentsByLandId ? deploymentsByLandId[land.id] : [];\n  return {\n    id: id,\n    land: land,\n    isLoading: isLoadingType(getLoading(state), FETCH_LANDS_REQUEST) || isLoggingIn(state) || isConnecting(state),\n    deployments: deployments\n  };\n};\n\nvar mapDispatch = function mapDispatch(_dispatch) {\n  return {};\n};\n\nexport default connect(mapState, mapDispatch)(LandProvider);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/LandProvider/LandProvider.container.ts"],"names":["connect","isLoadingType","isConnecting","getLandId","getLoading","getLands","getDeploymentsByLandId","isLoggingIn","FETCH_LANDS_REQUEST","LandProvider","mapState","state","ownProps","id","lands","land","find","deploymentsByLandId","deployments","isLoading","mapDispatch","_dispatch"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,YAAT,QAA6B,kDAA7B;AAEA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,sBAA/B,QAA6D,wBAA7D;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,mBAAT,QAAoC,sBAApC;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAmBC,QAAnB,EAAyD;AACxE,MAAMC,EAAE,GAAGD,QAAQ,CAACC,EAAT,IAAeV,SAAS,CAACQ,KAAD,CAAnC;AACA,MAAMG,KAAK,GAAGT,QAAQ,CAACM,KAAD,CAAtB;AACA,MAAMI,IAAI,GAAGD,KAAK,CAACE,IAAN,CAAW,UAAAD,IAAI;AAAA,WAAIA,IAAI,CAACF,EAAL,KAAYA,EAAhB;AAAA,GAAf,KAAsC,IAAnD;AACA,MAAMI,mBAAmB,GAAGX,sBAAsB,CAACK,KAAD,CAAlD;AACA,MAAMO,WAAW,GAAGH,IAAI,IAAIA,IAAI,CAACF,EAAL,IAAWI,mBAAnB,GAAyCA,mBAAmB,CAACF,IAAI,CAACF,EAAN,CAA5D,GAAwE,EAA5F;AACA,SAAO;AACLA,IAAAA,EAAE,EAAFA,EADK;AAELE,IAAAA,IAAI,EAAJA,IAFK;AAGLI,IAAAA,SAAS,EAAElB,aAAa,CAACG,UAAU,CAACO,KAAD,CAAX,EAAoBH,mBAApB,CAAb,IAAyDD,WAAW,CAACI,KAAD,CAApE,IAA+ET,YAAY,CAACS,KAAD,CAHjG;AAILO,IAAAA,WAAW,EAAXA;AAJK,GAAP;AAMD,CAZD;;AAcA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD;AAAA,SAA+C,EAA/C;AAAA,CAApB;;AAEA,eAAerB,OAAO,CAACU,QAAD,EAAWU,WAAX,CAAP,CAA+BX,YAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { isConnecting } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { RootState } from 'modules/common/types'\nimport { getLandId } from 'modules/location/selectors'\nimport { getLoading, getLands, getDeploymentsByLandId } from 'modules/land/selectors'\nimport { isLoggingIn } from 'modules/identity/selectors'\nimport { FETCH_LANDS_REQUEST } from 'modules/land/actions'\nimport { MapStateProps, MapDispatchProps, MapDispatch, OwnProps } from './LandProvider.types'\nimport LandProvider from './LandProvider'\n\nconst mapState = (state: RootState, ownProps: OwnProps): MapStateProps => {\n  const id = ownProps.id || getLandId(state)\n  const lands = getLands(state)\n  const land = lands.find(land => land.id === id) || null\n  const deploymentsByLandId = getDeploymentsByLandId(state)\n  const deployments = land && land.id in deploymentsByLandId ? deploymentsByLandId[land.id] : []\n  return {\n    id,\n    land,\n    isLoading: isLoadingType(getLoading(state), FETCH_LANDS_REQUEST) || isLoggingIn(state) || isConnecting(state),\n    deployments\n  }\n}\n\nconst mapDispatch = (_dispatch: MapDispatch): MapDispatchProps => ({})\n\nexport default connect(mapState, mapDispatch)(LandProvider)\n"]},"metadata":{},"sourceType":"module"}