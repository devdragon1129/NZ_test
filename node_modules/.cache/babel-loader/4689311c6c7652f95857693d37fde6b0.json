{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { VertexBuffer } from \"../Meshes/buffer\";\nimport { AbstractMesh } from \"../Meshes/abstractMesh\";\nimport { LinesMesh, InstancedLinesMesh } from \"../Meshes/linesMesh\";\nimport { Vector3, TmpVectors } from \"../Maths/math.vector\";\nimport { Material } from \"../Materials/material\";\nimport { ShaderMaterial } from \"../Materials/shaderMaterial\";\nimport { Camera } from \"../Cameras/camera\";\nimport \"../Shaders/line.fragment\";\nimport \"../Shaders/line.vertex\";\nimport { SmartArray } from '../Misc/smartArray';\nimport { Tools } from '../Misc/tools';\n\nAbstractMesh.prototype.disableEdgesRendering = function () {\n  if (this._edgesRenderer) {\n    this._edgesRenderer.dispose();\n\n    this._edgesRenderer = null;\n  }\n\n  return this;\n};\n\nAbstractMesh.prototype.enableEdgesRendering = function (epsilon, checkVerticesInsteadOfIndices, options) {\n  if (epsilon === void 0) {\n    epsilon = 0.95;\n  }\n\n  if (checkVerticesInsteadOfIndices === void 0) {\n    checkVerticesInsteadOfIndices = false;\n  }\n\n  this.disableEdgesRendering();\n  this._edgesRenderer = new EdgesRenderer(this, epsilon, checkVerticesInsteadOfIndices, true, options);\n  return this;\n};\n\nObject.defineProperty(AbstractMesh.prototype, \"edgesRenderer\", {\n  get: function get() {\n    return this._edgesRenderer;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nLinesMesh.prototype.enableEdgesRendering = function (epsilon, checkVerticesInsteadOfIndices) {\n  if (epsilon === void 0) {\n    epsilon = 0.95;\n  }\n\n  if (checkVerticesInsteadOfIndices === void 0) {\n    checkVerticesInsteadOfIndices = false;\n  }\n\n  this.disableEdgesRendering();\n  this._edgesRenderer = new LineEdgesRenderer(this, epsilon, checkVerticesInsteadOfIndices);\n  return this;\n};\n\nInstancedLinesMesh.prototype.enableEdgesRendering = function (epsilon, checkVerticesInsteadOfIndices) {\n  if (epsilon === void 0) {\n    epsilon = 0.95;\n  }\n\n  if (checkVerticesInsteadOfIndices === void 0) {\n    checkVerticesInsteadOfIndices = false;\n  }\n\n  LinesMesh.prototype.enableEdgesRendering.apply(this, arguments);\n  return this;\n};\n/**\r\n * FaceAdjacencies Helper class to generate edges\r\n */\n\n\nvar FaceAdjacencies =\n/** @class */\nfunction () {\n  function FaceAdjacencies() {\n    this.edges = new Array();\n    this.edgesConnectedCount = 0;\n  }\n\n  return FaceAdjacencies;\n}();\n/**\r\n * This class is used to generate edges of the mesh that could then easily be rendered in a scene.\r\n */\n\n\nvar EdgesRenderer =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an instance of the EdgesRenderer. It is primarily use to display edges of a mesh.\r\n   * Beware when you use this class with complex objects as the adjacencies computation can be really long\r\n   * @param  source Mesh used to create edges\r\n   * @param  epsilon sum of angles in adjacency to check for edge\r\n   * @param  checkVerticesInsteadOfIndices bases the edges detection on vertices vs indices. Note that this parameter is not used if options.useAlternateEdgeFinder = true\r\n   * @param  generateEdgesLines - should generate Lines or only prepare resources.\r\n   * @param  options The options to apply when generating the edges\r\n   */\n  function EdgesRenderer(source, epsilon, checkVerticesInsteadOfIndices, generateEdgesLines, options) {\n    var _this = this;\n\n    if (epsilon === void 0) {\n      epsilon = 0.95;\n    }\n\n    if (checkVerticesInsteadOfIndices === void 0) {\n      checkVerticesInsteadOfIndices = false;\n    }\n\n    if (generateEdgesLines === void 0) {\n      generateEdgesLines = true;\n    }\n\n    var _a;\n    /**\r\n     * Define the size of the edges with an orthographic camera\r\n     */\n\n\n    this.edgesWidthScalerForOrthographic = 1000.0;\n    /**\r\n     * Define the size of the edges with a perspective camera\r\n     */\n\n    this.edgesWidthScalerForPerspective = 50.0;\n    this._linesPositions = new Array();\n    this._linesNormals = new Array();\n    this._linesIndices = new Array();\n    this._buffers = {};\n    this._buffersForInstances = {};\n    this._checkVerticesInsteadOfIndices = false;\n    /** Gets or sets a boolean indicating if the edgesRenderer is active */\n\n    this.isEnabled = true;\n    /**\r\n     * List of instances to render in case the source mesh has instances\r\n     */\n\n    this.customInstances = new SmartArray(32);\n    this._source = source;\n    this._checkVerticesInsteadOfIndices = checkVerticesInsteadOfIndices;\n    this._options = options !== null && options !== void 0 ? options : null;\n    this._epsilon = epsilon;\n\n    this._prepareRessources();\n\n    if (generateEdgesLines) {\n      if ((_a = options === null || options === void 0 ? void 0 : options.useAlternateEdgeFinder) !== null && _a !== void 0 ? _a : true) {\n        this._generateEdgesLinesAlternate();\n      } else {\n        this._generateEdgesLines();\n      }\n    }\n\n    this._meshRebuildObserver = this._source.onRebuildObservable.add(function () {\n      _this._rebuild();\n    });\n    this._meshDisposeObserver = this._source.onDisposeObservable.add(function () {\n      _this.dispose();\n    });\n  }\n\n  Object.defineProperty(EdgesRenderer.prototype, \"linesPositions\", {\n    /** Gets the vertices generated by the edge renderer */\n    get: function get() {\n      return this._linesPositions;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EdgesRenderer.prototype, \"linesNormals\", {\n    /** Gets the normals generated by the edge renderer */\n    get: function get() {\n      return this._linesNormals;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EdgesRenderer.prototype, \"linesIndices\", {\n    /** Gets the indices generated by the edge renderer */\n    get: function get() {\n      return this._linesIndices;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  EdgesRenderer.GetShader = function (scene) {\n    if (!scene._edgeRenderLineShader) {\n      var shader = new ShaderMaterial(\"lineShader\", scene, \"line\", {\n        attributes: [\"position\", \"normal\"],\n        uniforms: [\"world\", \"viewProjection\", \"color\", \"width\", \"aspectRatio\"]\n      });\n      shader.disableDepthWrite = true;\n      shader.backFaceCulling = false;\n      scene._edgeRenderLineShader = shader;\n    }\n\n    return scene._edgeRenderLineShader;\n  };\n\n  EdgesRenderer.prototype._prepareRessources = function () {\n    if (this._lineShader) {\n      return;\n    }\n\n    this._lineShader = EdgesRenderer.GetShader(this._source.getScene());\n  };\n  /** @hidden */\n\n\n  EdgesRenderer.prototype._rebuild = function () {\n    var buffer = this._buffers[VertexBuffer.PositionKind];\n\n    if (buffer) {\n      buffer._rebuild();\n    }\n\n    buffer = this._buffers[VertexBuffer.NormalKind];\n\n    if (buffer) {\n      buffer._rebuild();\n    }\n\n    var scene = this._source.getScene();\n\n    var engine = scene.getEngine();\n    this._ib = engine.createIndexBuffer(this._linesIndices);\n  };\n  /**\r\n   * Releases the required resources for the edges renderer\r\n   */\n\n\n  EdgesRenderer.prototype.dispose = function () {\n    this._source.onRebuildObservable.remove(this._meshRebuildObserver);\n\n    this._source.onDisposeObservable.remove(this._meshDisposeObserver);\n\n    var buffer = this._buffers[VertexBuffer.PositionKind];\n\n    if (buffer) {\n      buffer.dispose();\n      this._buffers[VertexBuffer.PositionKind] = null;\n    }\n\n    buffer = this._buffers[VertexBuffer.NormalKind];\n\n    if (buffer) {\n      buffer.dispose();\n      this._buffers[VertexBuffer.NormalKind] = null;\n    }\n\n    if (this._ib) {\n      this._source.getScene().getEngine()._releaseBuffer(this._ib);\n    }\n\n    this._lineShader.dispose();\n  };\n\n  EdgesRenderer.prototype._processEdgeForAdjacencies = function (pa, pb, p0, p1, p2) {\n    if (pa === p0 && pb === p1 || pa === p1 && pb === p0) {\n      return 0;\n    }\n\n    if (pa === p1 && pb === p2 || pa === p2 && pb === p1) {\n      return 1;\n    }\n\n    if (pa === p2 && pb === p0 || pa === p0 && pb === p2) {\n      return 2;\n    }\n\n    return -1;\n  };\n\n  EdgesRenderer.prototype._processEdgeForAdjacenciesWithVertices = function (pa, pb, p0, p1, p2) {\n    var eps = 1e-10;\n\n    if (pa.equalsWithEpsilon(p0, eps) && pb.equalsWithEpsilon(p1, eps) || pa.equalsWithEpsilon(p1, eps) && pb.equalsWithEpsilon(p0, eps)) {\n      return 0;\n    }\n\n    if (pa.equalsWithEpsilon(p1, eps) && pb.equalsWithEpsilon(p2, eps) || pa.equalsWithEpsilon(p2, eps) && pb.equalsWithEpsilon(p1, eps)) {\n      return 1;\n    }\n\n    if (pa.equalsWithEpsilon(p2, eps) && pb.equalsWithEpsilon(p0, eps) || pa.equalsWithEpsilon(p0, eps) && pb.equalsWithEpsilon(p2, eps)) {\n      return 2;\n    }\n\n    return -1;\n  };\n  /**\r\n   * Checks if the pair of p0 and p1 is en edge\r\n   * @param faceIndex\r\n   * @param edge\r\n   * @param faceNormals\r\n   * @param  p0\r\n   * @param  p1\r\n   * @private\r\n   */\n\n\n  EdgesRenderer.prototype._checkEdge = function (faceIndex, edge, faceNormals, p0, p1) {\n    var needToCreateLine;\n\n    if (edge === undefined) {\n      needToCreateLine = true;\n    } else {\n      var dotProduct = Vector3.Dot(faceNormals[faceIndex], faceNormals[edge]);\n      needToCreateLine = dotProduct < this._epsilon;\n    }\n\n    if (needToCreateLine) {\n      this.createLine(p0, p1, this._linesPositions.length / 3);\n    }\n  };\n  /**\r\n   * push line into the position, normal and index buffer\r\n   * @protected\r\n   */\n\n\n  EdgesRenderer.prototype.createLine = function (p0, p1, offset) {\n    // Positions\n    this._linesPositions.push(p0.x, p0.y, p0.z, p0.x, p0.y, p0.z, p1.x, p1.y, p1.z, p1.x, p1.y, p1.z); // Normals\n\n\n    this._linesNormals.push(p1.x, p1.y, p1.z, -1, p1.x, p1.y, p1.z, 1, p0.x, p0.y, p0.z, -1, p0.x, p0.y, p0.z, 1); // Indices\n\n\n    this._linesIndices.push(offset, offset + 1, offset + 2, offset, offset + 2, offset + 3);\n  };\n  /**\r\n   * See https://playground.babylonjs.com/#R3JR6V#1 for a visual display of the algorithm\r\n   */\n\n\n  EdgesRenderer.prototype._tessellateTriangle = function (edgePoints, indexTriangle, indices, remapVertexIndices) {\n    var makePointList = function makePointList(edgePoints, pointIndices, firstIndex) {\n      if (firstIndex >= 0) {\n        pointIndices.push(firstIndex);\n      }\n\n      for (var i = 0; i < edgePoints.length; ++i) {\n        pointIndices.push(edgePoints[i][0]);\n      }\n    };\n\n    var startEdge = 0;\n\n    if (edgePoints[1].length >= edgePoints[0].length && edgePoints[1].length >= edgePoints[2].length) {\n      startEdge = 1;\n    } else if (edgePoints[2].length >= edgePoints[0].length && edgePoints[2].length >= edgePoints[1].length) {\n      startEdge = 2;\n    }\n\n    for (var e = 0; e < 3; ++e) {\n      if (e === startEdge) {\n        edgePoints[e].sort(function (a, b) {\n          return a[1] < b[1] ? -1 : a[1] > b[1] ? 1 : 0;\n        });\n      } else {\n        edgePoints[e].sort(function (a, b) {\n          return a[1] > b[1] ? -1 : a[1] < b[1] ? 1 : 0;\n        });\n      }\n    }\n\n    var mainPointIndices = [],\n        otherPointIndices = [];\n    makePointList(edgePoints[startEdge], mainPointIndices, -1);\n    var numMainPoints = mainPointIndices.length;\n\n    for (var i = startEdge + 2; i >= startEdge + 1; --i) {\n      makePointList(edgePoints[i % 3], otherPointIndices, i !== startEdge + 2 ? remapVertexIndices[indices[indexTriangle + (i + 1) % 3]] : -1);\n    }\n\n    var numOtherPoints = otherPointIndices.length;\n    var idxMain = 0;\n    var idxOther = 0;\n    indices.push(remapVertexIndices[indices[indexTriangle + startEdge]], mainPointIndices[0], otherPointIndices[0]);\n    indices.push(remapVertexIndices[indices[indexTriangle + (startEdge + 1) % 3]], otherPointIndices[numOtherPoints - 1], mainPointIndices[numMainPoints - 1]);\n    var bucketIsMain = numMainPoints <= numOtherPoints;\n    var bucketStep = bucketIsMain ? numMainPoints : numOtherPoints;\n    var bucketLimit = bucketIsMain ? numOtherPoints : numMainPoints;\n    var bucketIdxLimit = bucketIsMain ? numMainPoints - 1 : numOtherPoints - 1;\n    var winding = bucketIsMain ? 0 : 1;\n    var numTris = numMainPoints + numOtherPoints - 2;\n    var bucketIdx = bucketIsMain ? idxMain : idxOther;\n    var nbucketIdx = bucketIsMain ? idxOther : idxMain;\n    var bucketPoints = bucketIsMain ? mainPointIndices : otherPointIndices;\n    var nbucketPoints = bucketIsMain ? otherPointIndices : mainPointIndices;\n    var bucket = 0;\n\n    while (numTris-- > 0) {\n      if (winding) {\n        indices.push(bucketPoints[bucketIdx], nbucketPoints[nbucketIdx]);\n      } else {\n        indices.push(nbucketPoints[nbucketIdx], bucketPoints[bucketIdx]);\n      }\n\n      bucket += bucketStep;\n      var lastIdx = void 0;\n\n      if (bucket >= bucketLimit && bucketIdx < bucketIdxLimit) {\n        lastIdx = bucketPoints[++bucketIdx];\n        bucket -= bucketLimit;\n      } else {\n        lastIdx = nbucketPoints[++nbucketIdx];\n      }\n\n      indices.push(lastIdx);\n    }\n\n    indices[indexTriangle + 0] = indices[indices.length - 3];\n    indices[indexTriangle + 1] = indices[indices.length - 2];\n    indices[indexTriangle + 2] = indices[indices.length - 1];\n    indices.length = indices.length - 3;\n  };\n\n  EdgesRenderer.prototype._generateEdgesLinesAlternate = function () {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    var positions = this._source.getVerticesData(VertexBuffer.PositionKind);\n\n    var indices = this._source.getIndices();\n\n    if (!indices || !positions) {\n      return;\n    }\n\n    if (!Array.isArray(indices)) {\n      indices = Tools.SliceToArray(indices);\n    }\n    /**\r\n     * Find all vertices that are at the same location (with an epsilon) and remapp them on the same vertex\r\n     */\n\n\n    var useFastVertexMerger = (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.useFastVertexMerger) !== null && _b !== void 0 ? _b : true;\n    var epsVertexMerge = useFastVertexMerger ? Math.round(-Math.log((_d = (_c = this._options) === null || _c === void 0 ? void 0 : _c.epsilonVertexMerge) !== null && _d !== void 0 ? _d : 1e-6) / Math.log(10)) : (_f = (_e = this._options) === null || _e === void 0 ? void 0 : _e.epsilonVertexMerge) !== null && _f !== void 0 ? _f : 1e-6;\n    var remapVertexIndices = [];\n    var uniquePositions = []; // list of unique index of vertices - needed for tessellation\n\n    if (useFastVertexMerger) {\n      var mapVertices = {};\n\n      for (var v1 = 0; v1 < positions.length; v1 += 3) {\n        var x1 = positions[v1 + 0],\n            y1 = positions[v1 + 1],\n            z1 = positions[v1 + 2];\n        var key = x1.toFixed(epsVertexMerge) + \"|\" + y1.toFixed(epsVertexMerge) + \"|\" + z1.toFixed(epsVertexMerge);\n\n        if (mapVertices[key] !== undefined) {\n          remapVertexIndices.push(mapVertices[key]);\n        } else {\n          var idx = v1 / 3;\n          mapVertices[key] = idx;\n          remapVertexIndices.push(idx);\n          uniquePositions.push(idx);\n        }\n      }\n    } else {\n      for (var v1 = 0; v1 < positions.length; v1 += 3) {\n        var x1 = positions[v1 + 0],\n            y1 = positions[v1 + 1],\n            z1 = positions[v1 + 2];\n        var found = false;\n\n        for (var v2 = 0; v2 < v1 && !found; v2 += 3) {\n          var x2 = positions[v2 + 0],\n              y2 = positions[v2 + 1],\n              z2 = positions[v2 + 2];\n\n          if (Math.abs(x1 - x2) < epsVertexMerge && Math.abs(y1 - y2) < epsVertexMerge && Math.abs(z1 - z2) < epsVertexMerge) {\n            remapVertexIndices.push(v2 / 3);\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          remapVertexIndices.push(v1 / 3);\n          uniquePositions.push(v1 / 3);\n        }\n      }\n    }\n\n    if ((_g = this._options) === null || _g === void 0 ? void 0 : _g.applyTessellation) {\n      /**\r\n       * Tessellate triangles if necessary:\r\n       *\r\n       *               A\r\n       *               +\r\n       *               |\\\r\n       *               | \\\r\n       *               |  \\\r\n       *             E +   \\\r\n       *              /|    \\\r\n       *             / |     \\\r\n       *            /  |      \\\r\n       *           +---+-------+ B\r\n       *           D   C\r\n       *\r\n       * For the edges to be rendered correctly, the ABC triangle has to be split into ABE and BCE, else AC is considered to be an edge, whereas only AE should be.\r\n       *\r\n       * The tessellation process looks for the vertices like E that are in-between two other vertices making of an edge and create new triangles as necessary\r\n       */\n      // First step: collect the triangles to tessellate\n      var epsVertexAligned = (_j = (_h = this._options) === null || _h === void 0 ? void 0 : _h.epsilonVertexAligned) !== null && _j !== void 0 ? _j : 1e-6;\n      var mustTesselate = []; // liste of triangles that must be tessellated\n\n      for (var index = 0; index < indices.length; index += 3) {\n        // loop over all triangles\n        var triangleToTessellate = void 0;\n\n        for (var i = 0; i < 3; ++i) {\n          // loop over the 3 edges of the triangle\n          var p0Index = remapVertexIndices[indices[index + i]];\n          var p1Index = remapVertexIndices[indices[index + (i + 1) % 3]];\n          var p2Index = remapVertexIndices[indices[index + (i + 2) % 3]];\n\n          if (p0Index === p1Index) {\n            continue;\n          } // degenerated triangle - don't process\n\n\n          var p0x = positions[p0Index * 3 + 0],\n              p0y = positions[p0Index * 3 + 1],\n              p0z = positions[p0Index * 3 + 2];\n          var p1x = positions[p1Index * 3 + 0],\n              p1y = positions[p1Index * 3 + 1],\n              p1z = positions[p1Index * 3 + 2];\n          var p0p1 = Math.sqrt((p1x - p0x) * (p1x - p0x) + (p1y - p0y) * (p1y - p0y) + (p1z - p0z) * (p1z - p0z));\n\n          for (var v = 0; v < uniquePositions.length - 1; v++) {\n            // loop over all (unique) vertices and look for the ones that would be in-between p0 and p1\n            var vIndex = uniquePositions[v];\n\n            if (vIndex === p0Index || vIndex === p1Index || vIndex === p2Index) {\n              continue;\n            } // don't handle the vertex if it is a vertex of the current triangle\n\n\n            var x = positions[vIndex * 3 + 0],\n                y = positions[vIndex * 3 + 1],\n                z = positions[vIndex * 3 + 2];\n            var p0p = Math.sqrt((x - p0x) * (x - p0x) + (y - p0y) * (y - p0y) + (z - p0z) * (z - p0z));\n            var pp1 = Math.sqrt((x - p1x) * (x - p1x) + (y - p1y) * (y - p1y) + (z - p1z) * (z - p1z));\n\n            if (Math.abs(p0p + pp1 - p0p1) < epsVertexAligned) {\n              // vertices are aligned and p in-between p0 and p1 if distance(p0, p) + distance (p, p1) ~ distance(p0, p1)\n              if (!triangleToTessellate) {\n                triangleToTessellate = {\n                  index: index,\n                  edgesPoints: [[], [], []]\n                };\n                mustTesselate.push(triangleToTessellate);\n              }\n\n              triangleToTessellate.edgesPoints[i].push([vIndex, p0p]);\n            }\n          }\n        }\n      } // Second step: tesselate the triangles\n\n\n      for (var t = 0; t < mustTesselate.length; ++t) {\n        var triangle = mustTesselate[t];\n\n        this._tessellateTriangle(triangle.edgesPoints, triangle.index, indices, remapVertexIndices);\n      }\n\n      mustTesselate = null;\n    }\n    /**\r\n     * Collect the edges to render\r\n     */\n\n\n    var edges = {};\n\n    for (var index = 0; index < indices.length; index += 3) {\n      var faceNormal = void 0;\n\n      for (var i = 0; i < 3; ++i) {\n        var p0Index = remapVertexIndices[indices[index + i]];\n        var p1Index = remapVertexIndices[indices[index + (i + 1) % 3]];\n        var p2Index = remapVertexIndices[indices[index + (i + 2) % 3]];\n\n        if (p0Index === p1Index) {\n          continue;\n        }\n\n        TmpVectors.Vector3[0].copyFromFloats(positions[p0Index * 3 + 0], positions[p0Index * 3 + 1], positions[p0Index * 3 + 2]);\n        TmpVectors.Vector3[1].copyFromFloats(positions[p1Index * 3 + 0], positions[p1Index * 3 + 1], positions[p1Index * 3 + 2]);\n        TmpVectors.Vector3[2].copyFromFloats(positions[p2Index * 3 + 0], positions[p2Index * 3 + 1], positions[p2Index * 3 + 2]);\n\n        if (!faceNormal) {\n          TmpVectors.Vector3[1].subtractToRef(TmpVectors.Vector3[0], TmpVectors.Vector3[3]);\n          TmpVectors.Vector3[2].subtractToRef(TmpVectors.Vector3[1], TmpVectors.Vector3[4]);\n          faceNormal = Vector3.Cross(TmpVectors.Vector3[3], TmpVectors.Vector3[4]);\n          faceNormal.normalize();\n        }\n\n        if (p0Index > p1Index) {\n          var tmp = p0Index;\n          p0Index = p1Index;\n          p1Index = tmp;\n        }\n\n        var key = p0Index + \"_\" + p1Index;\n        var ei = edges[key];\n\n        if (ei) {\n          if (!ei.done) {\n            var dotProduct = Vector3.Dot(faceNormal, ei.normal);\n\n            if (dotProduct < this._epsilon) {\n              this.createLine(TmpVectors.Vector3[0], TmpVectors.Vector3[1], this._linesPositions.length / 3);\n            }\n\n            ei.done = true;\n          }\n        } else {\n          edges[key] = {\n            normal: faceNormal,\n            done: false,\n            index: index,\n            i: i\n          };\n        }\n      }\n    }\n\n    for (var key in edges) {\n      var ei = edges[key];\n\n      if (!ei.done) {\n        // Orphaned edge - we must display it\n        var p0Index = remapVertexIndices[indices[ei.index + ei.i]];\n        var p1Index = remapVertexIndices[indices[ei.index + (ei.i + 1) % 3]];\n        TmpVectors.Vector3[0].copyFromFloats(positions[p0Index * 3 + 0], positions[p0Index * 3 + 1], positions[p0Index * 3 + 2]);\n        TmpVectors.Vector3[1].copyFromFloats(positions[p1Index * 3 + 0], positions[p1Index * 3 + 1], positions[p1Index * 3 + 2]);\n        this.createLine(TmpVectors.Vector3[0], TmpVectors.Vector3[1], this._linesPositions.length / 3);\n      }\n    }\n    /**\r\n     * Merge into a single mesh\r\n     */\n\n\n    var engine = this._source.getScene().getEngine();\n\n    this._buffers[VertexBuffer.PositionKind] = new VertexBuffer(engine, this._linesPositions, VertexBuffer.PositionKind, false);\n    this._buffers[VertexBuffer.NormalKind] = new VertexBuffer(engine, this._linesNormals, VertexBuffer.NormalKind, false, false, 4);\n    this._buffersForInstances[VertexBuffer.PositionKind] = this._buffers[VertexBuffer.PositionKind];\n    this._buffersForInstances[VertexBuffer.NormalKind] = this._buffers[VertexBuffer.NormalKind];\n    this._ib = engine.createIndexBuffer(this._linesIndices);\n    this._indicesCount = this._linesIndices.length;\n  };\n  /**\r\n   * Generates lines edges from adjacencjes\r\n   * @private\r\n   */\n\n\n  EdgesRenderer.prototype._generateEdgesLines = function () {\n    var positions = this._source.getVerticesData(VertexBuffer.PositionKind);\n\n    var indices = this._source.getIndices();\n\n    if (!indices || !positions) {\n      return;\n    } // First let's find adjacencies\n\n\n    var adjacencies = new Array();\n    var faceNormals = new Array();\n    var index;\n    var faceAdjacencies; // Prepare faces\n\n    for (index = 0; index < indices.length; index += 3) {\n      faceAdjacencies = new FaceAdjacencies();\n      var p0Index = indices[index];\n      var p1Index = indices[index + 1];\n      var p2Index = indices[index + 2];\n      faceAdjacencies.p0 = new Vector3(positions[p0Index * 3], positions[p0Index * 3 + 1], positions[p0Index * 3 + 2]);\n      faceAdjacencies.p1 = new Vector3(positions[p1Index * 3], positions[p1Index * 3 + 1], positions[p1Index * 3 + 2]);\n      faceAdjacencies.p2 = new Vector3(positions[p2Index * 3], positions[p2Index * 3 + 1], positions[p2Index * 3 + 2]);\n      var faceNormal = Vector3.Cross(faceAdjacencies.p1.subtract(faceAdjacencies.p0), faceAdjacencies.p2.subtract(faceAdjacencies.p1));\n      faceNormal.normalize();\n      faceNormals.push(faceNormal);\n      adjacencies.push(faceAdjacencies);\n    } // Scan\n\n\n    for (index = 0; index < adjacencies.length; index++) {\n      faceAdjacencies = adjacencies[index];\n\n      for (var otherIndex = index + 1; otherIndex < adjacencies.length; otherIndex++) {\n        var otherFaceAdjacencies = adjacencies[otherIndex];\n\n        if (faceAdjacencies.edgesConnectedCount === 3) {\n          // Full\n          break;\n        }\n\n        if (otherFaceAdjacencies.edgesConnectedCount === 3) {\n          // Full\n          continue;\n        }\n\n        var otherP0 = indices[otherIndex * 3];\n        var otherP1 = indices[otherIndex * 3 + 1];\n        var otherP2 = indices[otherIndex * 3 + 2];\n\n        for (var edgeIndex = 0; edgeIndex < 3; edgeIndex++) {\n          var otherEdgeIndex = 0;\n\n          if (faceAdjacencies.edges[edgeIndex] !== undefined) {\n            continue;\n          }\n\n          switch (edgeIndex) {\n            case 0:\n              if (this._checkVerticesInsteadOfIndices) {\n                otherEdgeIndex = this._processEdgeForAdjacenciesWithVertices(faceAdjacencies.p0, faceAdjacencies.p1, otherFaceAdjacencies.p0, otherFaceAdjacencies.p1, otherFaceAdjacencies.p2);\n              } else {\n                otherEdgeIndex = this._processEdgeForAdjacencies(indices[index * 3], indices[index * 3 + 1], otherP0, otherP1, otherP2);\n              }\n\n              break;\n\n            case 1:\n              if (this._checkVerticesInsteadOfIndices) {\n                otherEdgeIndex = this._processEdgeForAdjacenciesWithVertices(faceAdjacencies.p1, faceAdjacencies.p2, otherFaceAdjacencies.p0, otherFaceAdjacencies.p1, otherFaceAdjacencies.p2);\n              } else {\n                otherEdgeIndex = this._processEdgeForAdjacencies(indices[index * 3 + 1], indices[index * 3 + 2], otherP0, otherP1, otherP2);\n              }\n\n              break;\n\n            case 2:\n              if (this._checkVerticesInsteadOfIndices) {\n                otherEdgeIndex = this._processEdgeForAdjacenciesWithVertices(faceAdjacencies.p2, faceAdjacencies.p0, otherFaceAdjacencies.p0, otherFaceAdjacencies.p1, otherFaceAdjacencies.p2);\n              } else {\n                otherEdgeIndex = this._processEdgeForAdjacencies(indices[index * 3 + 2], indices[index * 3], otherP0, otherP1, otherP2);\n              }\n\n              break;\n          }\n\n          if (otherEdgeIndex === -1) {\n            continue;\n          }\n\n          faceAdjacencies.edges[edgeIndex] = otherIndex;\n          otherFaceAdjacencies.edges[otherEdgeIndex] = index;\n          faceAdjacencies.edgesConnectedCount++;\n          otherFaceAdjacencies.edgesConnectedCount++;\n\n          if (faceAdjacencies.edgesConnectedCount === 3) {\n            break;\n          }\n        }\n      }\n    } // Create lines\n\n\n    for (index = 0; index < adjacencies.length; index++) {\n      // We need a line when a face has no adjacency on a specific edge or if all the adjacencies has an angle greater than epsilon\n      var current = adjacencies[index];\n\n      this._checkEdge(index, current.edges[0], faceNormals, current.p0, current.p1);\n\n      this._checkEdge(index, current.edges[1], faceNormals, current.p1, current.p2);\n\n      this._checkEdge(index, current.edges[2], faceNormals, current.p2, current.p0);\n    } // Merge into a single mesh\n\n\n    var engine = this._source.getScene().getEngine();\n\n    this._buffers[VertexBuffer.PositionKind] = new VertexBuffer(engine, this._linesPositions, VertexBuffer.PositionKind, false);\n    this._buffers[VertexBuffer.NormalKind] = new VertexBuffer(engine, this._linesNormals, VertexBuffer.NormalKind, false, false, 4);\n    this._buffersForInstances[VertexBuffer.PositionKind] = this._buffers[VertexBuffer.PositionKind];\n    this._buffersForInstances[VertexBuffer.NormalKind] = this._buffers[VertexBuffer.NormalKind];\n    this._ib = engine.createIndexBuffer(this._linesIndices);\n    this._indicesCount = this._linesIndices.length;\n  };\n  /**\r\n   * Checks wether or not the edges renderer is ready to render.\r\n   * @return true if ready, otherwise false.\r\n   */\n\n\n  EdgesRenderer.prototype.isReady = function () {\n    return this._lineShader.isReady(this._source, this._source.hasInstances && this.customInstances.length > 0 || this._source.hasThinInstances);\n  };\n  /**\r\n   * Renders the edges of the attached mesh,\r\n   */\n\n\n  EdgesRenderer.prototype.render = function () {\n    var scene = this._source.getScene();\n\n    if (!this.isReady() || !scene.activeCamera) {\n      return;\n    }\n\n    var engine = scene.getEngine();\n\n    this._lineShader._preBind();\n\n    if (this._source.edgesColor.a !== 1) {\n      engine.setAlphaMode(2);\n    } else {\n      engine.setAlphaMode(0);\n    }\n\n    var hasInstances = this._source.hasInstances && this.customInstances.length > 0;\n    var useBuffersWithInstances = hasInstances || this._source.hasThinInstances;\n    var instanceCount = 0;\n\n    if (useBuffersWithInstances) {\n      this._buffersForInstances[\"world0\"] = this._source.getVertexBuffer(\"world0\");\n      this._buffersForInstances[\"world1\"] = this._source.getVertexBuffer(\"world1\");\n      this._buffersForInstances[\"world2\"] = this._source.getVertexBuffer(\"world2\");\n      this._buffersForInstances[\"world3\"] = this._source.getVertexBuffer(\"world3\");\n\n      if (hasInstances) {\n        var instanceStorage = this._source._instanceDataStorage;\n        instanceCount = this.customInstances.length;\n\n        if (!instanceStorage.isFrozen) {\n          var offset = 0;\n\n          for (var i = 0; i < instanceCount; ++i) {\n            this.customInstances.data[i].copyToArray(instanceStorage.instancesData, offset);\n            offset += 16;\n          }\n\n          instanceStorage.instancesBuffer.updateDirectly(instanceStorage.instancesData, 0, instanceCount);\n        }\n      } else {\n        instanceCount = this._source.thinInstanceCount;\n      }\n    } // VBOs\n\n\n    engine.bindBuffers(useBuffersWithInstances ? this._buffersForInstances : this._buffers, this._ib, this._lineShader.getEffect());\n    scene.resetCachedMaterial();\n\n    this._lineShader.setColor4(\"color\", this._source.edgesColor);\n\n    if (scene.activeCamera.mode === Camera.ORTHOGRAPHIC_CAMERA) {\n      this._lineShader.setFloat(\"width\", this._source.edgesWidth / this.edgesWidthScalerForOrthographic);\n    } else {\n      this._lineShader.setFloat(\"width\", this._source.edgesWidth / this.edgesWidthScalerForPerspective);\n    }\n\n    this._lineShader.setFloat(\"aspectRatio\", engine.getAspectRatio(scene.activeCamera));\n\n    this._lineShader.bind(this._source.getWorldMatrix()); // Draw order\n\n\n    engine.drawElementsType(Material.TriangleFillMode, 0, this._indicesCount, instanceCount);\n\n    this._lineShader.unbind();\n\n    if (useBuffersWithInstances) {\n      engine.unbindInstanceAttributes();\n    }\n\n    if (!this._source.getScene()._activeMeshesFrozen) {\n      this.customInstances.reset();\n    }\n  };\n\n  return EdgesRenderer;\n}();\n\nexport { EdgesRenderer };\n/**\r\n * LineEdgesRenderer for LineMeshes to remove unnecessary triangulation\r\n */\n\nvar LineEdgesRenderer =\n/** @class */\nfunction (_super) {\n  __extends(LineEdgesRenderer, _super);\n  /**\r\n   * This constructor turns off auto generating edges line in Edges Renderer to make it here.\r\n   * @param  source LineMesh used to generate edges\r\n   * @param  epsilon not important (specified angle for edge detection)\r\n   * @param  checkVerticesInsteadOfIndices not important for LineMesh\r\n   */\n\n\n  function LineEdgesRenderer(source, epsilon, checkVerticesInsteadOfIndices) {\n    if (epsilon === void 0) {\n      epsilon = 0.95;\n    }\n\n    if (checkVerticesInsteadOfIndices === void 0) {\n      checkVerticesInsteadOfIndices = false;\n    }\n\n    var _this = _super.call(this, source, epsilon, checkVerticesInsteadOfIndices, false) || this;\n\n    _this._generateEdgesLines();\n\n    return _this;\n  }\n  /**\r\n   * Generate edges for each line in LinesMesh. Every Line should be rendered as edge.\r\n   */\n\n\n  LineEdgesRenderer.prototype._generateEdgesLines = function () {\n    var positions = this._source.getVerticesData(VertexBuffer.PositionKind);\n\n    var indices = this._source.getIndices();\n\n    if (!indices || !positions) {\n      return;\n    }\n\n    var p0 = TmpVectors.Vector3[0];\n    var p1 = TmpVectors.Vector3[1];\n    var len = indices.length - 1;\n\n    for (var i = 0, offset = 0; i < len; i += 2, offset += 4) {\n      Vector3.FromArrayToRef(positions, 3 * indices[i], p0);\n      Vector3.FromArrayToRef(positions, 3 * indices[i + 1], p1);\n      this.createLine(p0, p1, offset);\n    } // Merge into a single mesh\n\n\n    var engine = this._source.getScene().getEngine();\n\n    this._buffers[VertexBuffer.PositionKind] = new VertexBuffer(engine, this._linesPositions, VertexBuffer.PositionKind, false);\n    this._buffers[VertexBuffer.NormalKind] = new VertexBuffer(engine, this._linesNormals, VertexBuffer.NormalKind, false, false, 4);\n    this._ib = engine.createIndexBuffer(this._linesIndices);\n    this._indicesCount = this._linesIndices.length;\n  };\n\n  return LineEdgesRenderer;\n}(EdgesRenderer);\n\nexport { LineEdgesRenderer };","map":null,"metadata":{},"sourceType":"module"}