{"ast":null,"code":"'use strict';\n\nvar waterfall = require('async/waterfall');\n\nvar dagPB = require('ipld-dag-pb');\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar persist = require('../utils/persist');\n\nvar DAGLink = dagPB.DAGLink;\nvar DAGNode = dagPB.DAGNode;\n\nmodule.exports = function reduce(file, ipld, options) {\n  return function (leaves, callback) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      var leaf = leaves[0];\n      return callback(null, {\n        size: leaf.size,\n        leafSize: leaf.leafSize,\n        multihash: leaf.multihash,\n        path: file.path,\n        name: leaf.name\n      });\n    } // create a parent node and add all the leaves\n\n\n    var f = new UnixFS('file');\n    var links = leaves.map(function (leaf) {\n      f.addBlockSize(leaf.leafSize);\n      return new DAGLink(leaf.name, leaf.size, leaf.multihash);\n    });\n    waterfall([function (cb) {\n      return DAGNode.create(f.marshal(), links, cb);\n    }, function (node, cb) {\n      return persist(node, ipld, options, cb);\n    }], function (error, result) {\n      if (error) {\n        return callback(error);\n      }\n\n      callback(null, {\n        size: result.node.size,\n        leafSize: f.fileSize(),\n        multihash: result.cid.buffer,\n        path: file.path,\n        name: ''\n      });\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"script"}