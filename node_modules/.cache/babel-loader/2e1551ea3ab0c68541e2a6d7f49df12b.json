{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _awaitAsyncGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\nvar _require = require('ipld-dag-pb'),\n    DAGLink = _require.DAGLink,\n    DAGNode = _require.DAGNode;\n\nvar _require2 = require('ipfs-unixfs'),\n    UnixFS = _require2.UnixFS;\n\nvar Dir = require('./dir');\n\nvar persist = require('./utils/persist');\n\nvar _require3 = require('hamt-sharding'),\n    createHAMT = _require3.createHAMT,\n    Bucket = _require3.Bucket;\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('./types').BlockAPI} BlockAPI\n */\n\n/**\n * @typedef {import('./dir').DirProps} DirProps\n */\n\n\nvar DirSharded = /*#__PURE__*/function (_Dir) {\n  _inherits(DirSharded, _Dir);\n\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  function DirSharded(props, options) {\n    var _this3;\n\n    _classCallCheck(this, DirSharded);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(DirSharded).call(this, props, options));\n    /** @type {Bucket<InProgressImportResult | Dir>} */\n\n    _this3._bucket = createHAMT({\n      hashFn: options.hamtHashFn,\n      bits: options.hamtBucketBits\n    });\n    return _this3;\n  }\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n\n\n  _createClass(DirSharded, [{\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name, value) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._bucket.put(name, value);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function put(_x5, _x6) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n    /**\n     * @param {string} name\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return this._bucket.get(name);\n    }\n  }, {\n    key: \"childCount\",\n    value: function childCount() {\n      return this._bucket.leafCount();\n    }\n  }, {\n    key: \"directChildrenCount\",\n    value: function directChildrenCount() {\n      return this._bucket.childrenCount();\n    }\n  }, {\n    key: \"onlyChild\",\n    value: function onlyChild() {\n      return this._bucket.onlyChild();\n    }\n  }, {\n    key: \"eachChildSeries\",\n    value: function eachChildSeries() {\n      var _this = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, key, value;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context2.prev = 2;\n                _iterator = _asyncIterator(_this._bucket.eachLeafSeries());\n\n              case 4:\n                _context2.next = 6;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 6:\n                if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                _step$value = _step.value, key = _step$value.key, value = _step$value.value;\n                _context2.next = 10;\n                return {\n                  key: key,\n                  child: value\n                };\n\n              case 10:\n                _iteratorAbruptCompletion = false;\n                _context2.next = 4;\n                break;\n\n              case 13:\n                _context2.next = 19;\n                break;\n\n              case 15:\n                _context2.prev = 15;\n                _context2.t0 = _context2[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context2.t0;\n\n              case 19:\n                _context2.prev = 19;\n                _context2.prev = 20;\n\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                _context2.next = 24;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 24:\n                _context2.prev = 24;\n\n                if (!_didIteratorError) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 27:\n                return _context2.finish(24);\n\n              case 28:\n                return _context2.finish(19);\n\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n      }))();\n    }\n    /**\n     * @param {BlockAPI} block\n     * @returns {AsyncIterable<ImportResult>}\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush(block) {\n      var _this2 = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, entry;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _iteratorAbruptCompletion2 = false;\n                _didIteratorError2 = false;\n                _context3.prev = 2;\n                _iterator2 = _asyncIterator(_flush2(_this2._bucket, block, _this2, _this2.options));\n\n              case 4:\n                _context3.next = 6;\n                return _awaitAsyncGenerator(_iterator2.next());\n\n              case 6:\n                if (!(_iteratorAbruptCompletion2 = !(_step2 = _context3.sent).done)) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                entry = _step2.value;\n                _context3.next = 10;\n                return _objectSpread({}, entry, {\n                  path: _this2.path\n                });\n\n              case 10:\n                _iteratorAbruptCompletion2 = false;\n                _context3.next = 4;\n                break;\n\n              case 13:\n                _context3.next = 19;\n                break;\n\n              case 15:\n                _context3.prev = 15;\n                _context3.t0 = _context3[\"catch\"](2);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context3.t0;\n\n              case 19:\n                _context3.prev = 19;\n                _context3.prev = 20;\n\n                if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                _context3.next = 24;\n                return _awaitAsyncGenerator(_iterator2.return());\n\n              case 24:\n                _context3.prev = 24;\n\n                if (!_didIteratorError2) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 27:\n                return _context3.finish(24);\n\n              case 28:\n                return _context3.finish(19);\n\n              case 29:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n      }))();\n    }\n  }]);\n\n  return DirSharded;\n}(Dir);\n\nmodule.exports = DirSharded;\n/**\n * @param {Bucket<?>} bucket\n * @param {BlockAPI} block\n * @param {*} shardRoot\n * @param {ImporterOptions} options\n * @returns {AsyncIterable<ImportResult>}\n */\n\nfunction _flush2(_x, _x2, _x3, _x4) {\n  return _flush.apply(this, arguments);\n}\n\nfunction _flush() {\n  _flush = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(bucket, block, shardRoot, options) {\n    var children, links, childrenSize, i, child, labelPrefix, shard, _iteratorAbruptCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, subShard, _dir, flushedDir, _iteratorAbruptCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, entry, label, value, _label, _size, data, dir, node, buffer, cid, size;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            children = bucket._children;\n            links = [];\n            childrenSize = 0;\n            i = 0;\n\n          case 4:\n            if (!(i < children.length)) {\n              _context4.next = 97;\n              break;\n            }\n\n            child = children.get(i);\n\n            if (child) {\n              _context4.next = 8;\n              break;\n            }\n\n            return _context4.abrupt(\"continue\", 94);\n\n          case 8:\n            labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');\n\n            if (!(child instanceof Bucket)) {\n              _context4.next = 49;\n              break;\n            }\n\n            shard = void 0;\n            _iteratorAbruptCompletion3 = false;\n            _didIteratorError3 = false;\n            _context4.prev = 13;\n            _context4.t0 = _asyncIterator;\n            _context4.next = 17;\n            return _awaitAsyncGenerator(_flush2(child, block, null, options));\n\n          case 17:\n            _context4.t1 = _context4.sent;\n            _iterator3 = (0, _context4.t0)(_context4.t1);\n\n          case 19:\n            _context4.next = 21;\n            return _awaitAsyncGenerator(_iterator3.next());\n\n          case 21:\n            if (!(_iteratorAbruptCompletion3 = !(_step3 = _context4.sent).done)) {\n              _context4.next = 27;\n              break;\n            }\n\n            subShard = _step3.value;\n            shard = subShard;\n\n          case 24:\n            _iteratorAbruptCompletion3 = false;\n            _context4.next = 19;\n            break;\n\n          case 27:\n            _context4.next = 33;\n            break;\n\n          case 29:\n            _context4.prev = 29;\n            _context4.t2 = _context4[\"catch\"](13);\n            _didIteratorError3 = true;\n            _iteratorError3 = _context4.t2;\n\n          case 33:\n            _context4.prev = 33;\n            _context4.prev = 34;\n\n            if (!(_iteratorAbruptCompletion3 && _iterator3.return != null)) {\n              _context4.next = 38;\n              break;\n            }\n\n            _context4.next = 38;\n            return _awaitAsyncGenerator(_iterator3.return());\n\n          case 38:\n            _context4.prev = 38;\n\n            if (!_didIteratorError3) {\n              _context4.next = 41;\n              break;\n            }\n\n            throw _iteratorError3;\n\n          case 41:\n            return _context4.finish(38);\n\n          case 42:\n            return _context4.finish(33);\n\n          case 43:\n            if (shard) {\n              _context4.next = 45;\n              break;\n            }\n\n            throw new Error('Could not flush sharded directory, no subshard found');\n\n          case 45:\n            links.push(new DAGLink(labelPrefix, shard.size, shard.cid));\n            childrenSize += shard.size;\n            _context4.next = 94;\n            break;\n\n          case 49:\n            if (!(typeof child.value.flush === 'function')) {\n              _context4.next = 87;\n              break;\n            }\n\n            _dir = child.value;\n            flushedDir = void 0;\n            _iteratorAbruptCompletion4 = false;\n            _didIteratorError4 = false;\n            _context4.prev = 54;\n            _iterator4 = _asyncIterator(_dir.flush(block));\n\n          case 56:\n            _context4.next = 58;\n            return _awaitAsyncGenerator(_iterator4.next());\n\n          case 58:\n            if (!(_iteratorAbruptCompletion4 = !(_step4 = _context4.sent).done)) {\n              _context4.next = 66;\n              break;\n            }\n\n            entry = _step4.value;\n            flushedDir = entry;\n            _context4.next = 63;\n            return flushedDir;\n\n          case 63:\n            _iteratorAbruptCompletion4 = false;\n            _context4.next = 56;\n            break;\n\n          case 66:\n            _context4.next = 72;\n            break;\n\n          case 68:\n            _context4.prev = 68;\n            _context4.t3 = _context4[\"catch\"](54);\n            _didIteratorError4 = true;\n            _iteratorError4 = _context4.t3;\n\n          case 72:\n            _context4.prev = 72;\n            _context4.prev = 73;\n\n            if (!(_iteratorAbruptCompletion4 && _iterator4.return != null)) {\n              _context4.next = 77;\n              break;\n            }\n\n            _context4.next = 77;\n            return _awaitAsyncGenerator(_iterator4.return());\n\n          case 77:\n            _context4.prev = 77;\n\n            if (!_didIteratorError4) {\n              _context4.next = 80;\n              break;\n            }\n\n            throw _iteratorError4;\n\n          case 80:\n            return _context4.finish(77);\n\n          case 81:\n            return _context4.finish(72);\n\n          case 82:\n            label = labelPrefix + child.key;\n            links.push(new DAGLink(label, flushedDir.size, flushedDir.cid));\n            childrenSize += flushedDir.size;\n            _context4.next = 94;\n            break;\n\n          case 87:\n            value = child.value;\n\n            if (value.cid) {\n              _context4.next = 90;\n              break;\n            }\n\n            return _context4.abrupt(\"continue\", 94);\n\n          case 90:\n            _label = labelPrefix + child.key;\n            _size = value.size;\n            links.push(new DAGLink(_label, _size, value.cid));\n            childrenSize += _size;\n\n          case 94:\n            i++;\n            _context4.next = 4;\n            break;\n\n          case 97:\n            // go-ipfs uses little endian, that's why we have to\n            // reverse the bit field before storing it\n            data = Uint8Array.from(children.bitField().reverse());\n            dir = new UnixFS({\n              type: 'hamt-sharded-directory',\n              data: data,\n              fanout: bucket.tableSize(),\n              hashType: options.hamtHashCode,\n              mtime: shardRoot && shardRoot.mtime,\n              mode: shardRoot && shardRoot.mode\n            });\n            node = new DAGNode(dir.marshal(), links);\n            buffer = node.serialize();\n            _context4.next = 103;\n            return _awaitAsyncGenerator(persist(buffer, block, options));\n\n          case 103:\n            cid = _context4.sent;\n            size = buffer.length + childrenSize;\n            _context4.next = 107;\n            return {\n              cid: cid,\n              unixfs: dir,\n              size: size\n            };\n\n          case 107:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[13, 29, 33, 43], [34,, 38, 42], [54, 68, 72, 82], [73,, 77, 81]]);\n  }));\n  return _flush.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}