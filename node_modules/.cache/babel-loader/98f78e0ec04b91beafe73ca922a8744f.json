{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(locationSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleLoginSuccess),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleSetENSContentSuccess),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(goToActivity),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(handleLocationChange),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(handleRedirectToRequest);\n\nimport { all, takeLatest, put, select, take, race } from 'redux-saga/effects';\nimport { getLocation, LOCATION_CHANGE, push, replace } from 'connected-react-router';\nimport { locations } from 'routing/locations';\nimport { LOGIN_SUCCESS } from 'modules/identity/actions';\nimport { CLAIM_NAME_SUCCESS, SET_ENS_CONTENT_SUCCESS } from 'modules/ens/actions';\nimport { FETCH_COLLECTIONS_FAILURE, FETCH_COLLECTIONS_SUCCESS } from 'modules/collection/actions';\nimport { getCollectionsByContractAddress } from 'modules/collection/selectors';\nimport { RedirectToTypes } from './types';\nimport { redirectToFailure, redirectToRequest, redirectToSuccess, REDIRECT_TO_REQUEST } from './actions';\nexport function locationSaga() {\n  return _regeneratorRuntime.wrap(function locationSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([takeLatest(LOGIN_SUCCESS, handleLoginSuccess), takeLatest(SET_ENS_CONTENT_SUCCESS, handleSetENSContentSuccess), takeLatest(CLAIM_NAME_SUCCESS, goToActivity), takeLatest(LOCATION_CHANGE, handleLocationChange), takeLatest(REDIRECT_TO_REQUEST, handleRedirectToRequest)]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction handleLoginSuccess(_action) {\n  var location;\n  return _regeneratorRuntime.wrap(function handleLoginSuccess$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return select(getLocation);\n\n        case 2:\n          location = _context2.sent;\n\n          if (!(location.pathname === locations.signIn())) {\n            _context2.next = 6;\n            break;\n          }\n\n          _context2.next = 6;\n          return put(replace(locations.root()));\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction handleSetENSContentSuccess(action) {\n  var land;\n  return _regeneratorRuntime.wrap(function handleSetENSContentSuccess$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          land = action.payload.land;\n\n          if (land) {\n            _context3.next = 4;\n            break;\n          }\n\n          _context3.next = 4;\n          return goToActivity();\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction goToActivity() {\n  return _regeneratorRuntime.wrap(function goToActivity$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return put(replace(locations.activity()));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport function handleLocationChange() {\n  var _yield$select, redirectTo;\n\n  return _regeneratorRuntime.wrap(function handleLocationChange$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return select(getLocation);\n\n        case 2:\n          _yield$select = _context5.sent;\n          redirectTo = _yield$select.query.redirectTo;\n\n          if (!redirectTo) {\n            _context5.next = 7;\n            break;\n          }\n\n          _context5.next = 7;\n          return put(redirectToRequest(redirectTo));\n\n        case 7:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\nexport function handleRedirectToRequest(action) {\n  var _marked6, encodedRedirectTo, fail, redirectTo, _yield$race, success, failure, collectionsByContractAddress, contractAddress, collection;\n\n  return _regeneratorRuntime.wrap(function handleRedirectToRequest$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          fail = function _fail(error) {\n            return _regeneratorRuntime.wrap(function fail$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _context6.next = 2;\n                    return put(redirectToFailure(encodedRedirectTo, error));\n\n                  case 2:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _marked6);\n          };\n\n          _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(fail);\n          encodedRedirectTo = action.payload.redirectTo;\n          _context7.prev = 3;\n          redirectTo = JSON.parse(decodeURIComponent(encodedRedirectTo));\n          _context7.t0 = redirectTo.type;\n          _context7.next = _context7.t0 === RedirectToTypes.COLLECTION_DETAIL_BY_CONTRACT_ADDRESS ? 8 : 34;\n          break;\n\n        case 8:\n          _context7.next = 10;\n          return race({\n            success: take(FETCH_COLLECTIONS_SUCCESS),\n            failure: take(FETCH_COLLECTIONS_FAILURE)\n          });\n\n        case 10:\n          _yield$race = _context7.sent;\n          success = _yield$race.success;\n          failure = _yield$race.failure;\n\n          if (!success) {\n            _context7.next = 30;\n            break;\n          }\n\n          _context7.next = 16;\n          return select(getCollectionsByContractAddress);\n\n        case 16:\n          collectionsByContractAddress = _context7.sent;\n          contractAddress = redirectTo.data.contractAddress;\n          collection = collectionsByContractAddress[contractAddress];\n\n          if (!collection) {\n            _context7.next = 26;\n            break;\n          }\n\n          _context7.next = 22;\n          return put(push(locations.collectionDetail(collection.id)));\n\n        case 22:\n          _context7.next = 24;\n          return put(redirectToSuccess(encodedRedirectTo));\n\n        case 24:\n          _context7.next = 30;\n          break;\n\n        case 26:\n          _context7.next = 28;\n          return;\n\n        case 28:\n          _context7.next = 30;\n          return fail(\"Collection with contract address \".concat(contractAddress, \" not found\"));\n\n        case 30:\n          if (!failure) {\n            _context7.next = 33;\n            break;\n          }\n\n          _context7.next = 33;\n          return fail(\"Could not get collections. \".concat(failure.payload.error));\n\n        case 33:\n          return _context7.abrupt(\"break\", 36);\n\n        case 34:\n          _context7.next = 36;\n          return fail(\"Invalid redirect to type \\\"\".concat(redirectTo.type, \"\\\"\"));\n\n        case 36:\n          _context7.next = 42;\n          break;\n\n        case 38:\n          _context7.prev = 38;\n          _context7.t1 = _context7[\"catch\"](3);\n          _context7.next = 42;\n          return fail(_context7.t1.message);\n\n        case 42:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[3, 38]]);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/location/sagas.ts"],"names":["locationSaga","handleLoginSuccess","handleSetENSContentSuccess","goToActivity","handleLocationChange","handleRedirectToRequest","all","takeLatest","put","select","take","race","getLocation","LOCATION_CHANGE","push","replace","locations","LOGIN_SUCCESS","CLAIM_NAME_SUCCESS","SET_ENS_CONTENT_SUCCESS","FETCH_COLLECTIONS_FAILURE","FETCH_COLLECTIONS_SUCCESS","getCollectionsByContractAddress","RedirectToTypes","redirectToFailure","redirectToRequest","redirectToSuccess","REDIRECT_TO_REQUEST","_action","location","pathname","signIn","root","action","land","payload","activity","redirectTo","query","fail","error","encodedRedirectTo","JSON","parse","decodeURIComponent","type","COLLECTION_DETAIL_BY_CONTRACT_ADDRESS","success","failure","collectionsByContractAddress","contractAddress","data","collection","collectionDetail","id","message"],"mappings":"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","sourcesContent":["import { all, takeLatest, put, select, take, race } from 'redux-saga/effects'\nimport { getLocation, LOCATION_CHANGE, push, replace } from 'connected-react-router'\nimport { locations } from 'routing/locations'\nimport { LOGIN_SUCCESS, LoginSuccessAction } from 'modules/identity/actions'\nimport { CLAIM_NAME_SUCCESS, SetENSContentSuccessAction, SET_ENS_CONTENT_SUCCESS } from 'modules/ens/actions'\nimport {\n  FetchCollectionsSuccessAction,\n  FetchCollectionsFailureAction,\n  FETCH_COLLECTIONS_FAILURE,\n  FETCH_COLLECTIONS_SUCCESS\n} from 'modules/collection/actions'\nimport { getCollectionsByContractAddress } from 'modules/collection/selectors'\nimport { RedirectTo, RedirectToTypes } from './types'\nimport { redirectToFailure, redirectToRequest, RedirectToRequestAction, redirectToSuccess, REDIRECT_TO_REQUEST } from './actions'\n\nexport function* locationSaga() {\n  yield all([\n    takeLatest(LOGIN_SUCCESS, handleLoginSuccess),\n    takeLatest(SET_ENS_CONTENT_SUCCESS, handleSetENSContentSuccess),\n    takeLatest(CLAIM_NAME_SUCCESS, goToActivity),\n    takeLatest(LOCATION_CHANGE, handleLocationChange),\n    takeLatest(REDIRECT_TO_REQUEST, handleRedirectToRequest)\n  ])\n}\n\nfunction* handleLoginSuccess(_action: LoginSuccessAction) {\n  const location: ReturnType<typeof getLocation> = yield select(getLocation)\n  if (location.pathname === locations.signIn()) {\n    yield put(replace(locations.root()))\n  }\n}\n\nfunction* handleSetENSContentSuccess(action: SetENSContentSuccessAction) {\n  const { land } = action.payload\n  if (!land) {\n    yield goToActivity()\n  }\n}\n\nfunction* goToActivity() {\n  yield put(replace(locations.activity()))\n}\n\nexport function* handleLocationChange() {\n  const {\n    query: { redirectTo }\n  } = yield select(getLocation)\n\n  if (redirectTo) {\n    yield put(redirectToRequest(redirectTo))\n  }\n}\n\nexport function* handleRedirectToRequest(action: RedirectToRequestAction) {\n  const { redirectTo: encodedRedirectTo } = action.payload\n\n  function* fail(error: string): any {\n    yield put(redirectToFailure(encodedRedirectTo, error))\n  }\n\n  try {\n    const redirectTo: RedirectTo = JSON.parse(decodeURIComponent(encodedRedirectTo))\n\n    switch (redirectTo.type) {\n      case RedirectToTypes.COLLECTION_DETAIL_BY_CONTRACT_ADDRESS:\n        const { success, failure }: { success?: FetchCollectionsSuccessAction; failure?: FetchCollectionsFailureAction } = yield race({\n          success: take(FETCH_COLLECTIONS_SUCCESS),\n          failure: take(FETCH_COLLECTIONS_FAILURE)\n        })\n\n        if (success) {\n          const collectionsByContractAddress: ReturnType<typeof getCollectionsByContractAddress> = yield select(\n            getCollectionsByContractAddress\n          )\n\n          const { contractAddress } = redirectTo.data\n          const collection = collectionsByContractAddress[contractAddress]\n\n          if (collection) {\n            yield put(push(locations.collectionDetail(collection.id)))\n            yield put(redirectToSuccess(encodedRedirectTo))\n          } else {\n            yield\n            yield fail(`Collection with contract address ${contractAddress} not found`)\n          }\n        }\n\n        if (failure) {\n          yield fail(`Could not get collections. ${failure.payload.error}`)\n        }\n        break\n      default:\n        yield fail(`Invalid redirect to type \"${redirectTo.type}\"`)\n    }\n  } catch (error) {\n    yield fail(error.message)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}