{"ast":null,"code":"import { Matrix, Vector3, Vector2 } from \"../../Maths/math.vector\";\nimport { Mesh } from \"../mesh\";\nimport { VertexData } from \"../mesh.vertexData\";\n\nVertexData.CreateTorus = function (options) {\n  var indices = [];\n  var positions = [];\n  var normals = [];\n  var uvs = [];\n  var diameter = options.diameter || 1;\n  var thickness = options.thickness || 0.5;\n  var tessellation = options.tessellation || 16;\n  var sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE;\n  var stride = tessellation + 1;\n\n  for (var i = 0; i <= tessellation; i++) {\n    var u = i / tessellation;\n    var outerAngle = i * Math.PI * 2.0 / tessellation - Math.PI / 2.0;\n    var transform = Matrix.Translation(diameter / 2.0, 0, 0).multiply(Matrix.RotationY(outerAngle));\n\n    for (var j = 0; j <= tessellation; j++) {\n      var v = 1 - j / tessellation;\n      var innerAngle = j * Math.PI * 2.0 / tessellation + Math.PI;\n      var dx = Math.cos(innerAngle);\n      var dy = Math.sin(innerAngle); // Create a vertex.\n\n      var normal = new Vector3(dx, dy, 0);\n      var position = normal.scale(thickness / 2);\n      var textureCoordinate = new Vector2(u, v);\n      position = Vector3.TransformCoordinates(position, transform);\n      normal = Vector3.TransformNormal(normal, transform);\n      positions.push(position.x, position.y, position.z);\n      normals.push(normal.x, normal.y, normal.z);\n      uvs.push(textureCoordinate.x, textureCoordinate.y); // And create indices for two triangles.\n\n      var nextI = (i + 1) % stride;\n      var nextJ = (j + 1) % stride;\n      indices.push(i * stride + j);\n      indices.push(i * stride + nextJ);\n      indices.push(nextI * stride + j);\n      indices.push(i * stride + nextJ);\n      indices.push(nextI * stride + nextJ);\n      indices.push(nextI * stride + j);\n    }\n  } // Sides\n\n\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs); // Result\n\n\n  var vertexData = new VertexData();\n  vertexData.indices = indices;\n  vertexData.positions = positions;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n  return vertexData;\n};\n\nMesh.CreateTorus = function (name, diameter, thickness, tessellation, scene, updatable, sideOrientation) {\n  var options = {\n    diameter: diameter,\n    thickness: thickness,\n    tessellation: tessellation,\n    sideOrientation: sideOrientation,\n    updatable: updatable\n  };\n  return TorusBuilder.CreateTorus(name, options, scene);\n};\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\n\n\nvar TorusBuilder =\n/** @class */\nfunction () {\n  function TorusBuilder() {}\n  /**\r\n   * Creates a torus mesh\r\n   * * The parameter `diameter` sets the diameter size (float) of the torus (default 1)\r\n   * * The parameter `thickness` sets the diameter size of the tube of the torus (float, default 0.5)\r\n   * * The parameter `tessellation` sets the number of torus sides (postive integer, default 16)\r\n   * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n   * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n   * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created.\r\n   * @param name defines the name of the mesh\r\n   * @param options defines the options used to create the mesh\r\n   * @param scene defines the hosting scene\r\n   * @returns the torus mesh\r\n   * @see https://doc.babylonjs.com/how_to/set_shapes#torus\r\n   */\n\n\n  TorusBuilder.CreateTorus = function (name, options, scene) {\n    var torus = new Mesh(name, scene);\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n    torus._originalBuilderSideOrientation = options.sideOrientation;\n    var vertexData = VertexData.CreateTorus(options);\n    vertexData.applyToMesh(torus, options.updatable);\n    return torus;\n  };\n\n  return TorusBuilder;\n}();\n\nexport { TorusBuilder };","map":null,"metadata":{},"sourceType":"module"}