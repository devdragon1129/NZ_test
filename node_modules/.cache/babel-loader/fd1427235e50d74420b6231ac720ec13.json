{"ast":null,"code":"import { Mesh } from \"../../Meshes/mesh\";\nimport { Scene } from \"../../scene\";\nimport { Observable } from \"../../Misc/observable\";\nimport { Vector3 } from \"../../Maths/math.vector\";\nimport { PointerEventTypes } from \"../../Events/pointerEvents\";\nimport { Ray } from \"../../Culling/ray\";\nimport { PivotTools } from '../../Misc/pivotTools';\nimport \"../../Meshes/Builders/planeBuilder\";\n/**\r\n * A behavior that when attached to a mesh will allow the mesh to be dragged around the screen based on pointer events\r\n */\n\nvar PointerDragBehavior =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a pointer drag behavior that can be attached to a mesh\r\n   * @param options The drag axis or normal of the plane that will be dragged across. If no options are specified the drag plane will always face the ray's origin (eg. camera)\r\n   */\n  function PointerDragBehavior(options) {\n    this._useAlternatePickedPointAboveMaxDragAngleDragSpeed = -1.1;\n    /**\r\n     * The maximum tolerated angle between the drag plane and dragging pointer rays to trigger pointer events. Set to 0 to allow any angle (default: 0)\r\n     */\n\n    this.maxDragAngle = 0;\n    /**\r\n     * @hidden\r\n     */\n\n    this._useAlternatePickedPointAboveMaxDragAngle = false;\n    /**\r\n     * The id of the pointer that is currently interacting with the behavior (-1 when no pointer is active)\r\n     */\n\n    this.currentDraggingPointerID = -1;\n    /**\r\n     * If the behavior is currently in a dragging state\r\n     */\n\n    this.dragging = false;\n    /**\r\n     * The distance towards the target drag position to move each frame. This can be useful to avoid jitter. Set this to 1 for no delay. (Default: 0.2)\r\n     */\n\n    this.dragDeltaRatio = 0.2;\n    /**\r\n     * If the drag plane orientation should be updated during the dragging (Default: true)\r\n     */\n\n    this.updateDragPlane = true; // Debug mode will display drag planes to help visualize behavior\n\n    this._debugMode = false;\n    this._moving = false;\n    /**\r\n     *  Fires each time the attached mesh is dragged with the pointer\r\n     *  * delta between last drag position and current drag position in world space\r\n     *  * dragDistance along the drag axis\r\n     *  * dragPlaneNormal normal of the current drag plane used during the drag\r\n     *  * dragPlanePoint in world space where the drag intersects the drag plane\r\n     */\n\n    this.onDragObservable = new Observable();\n    /**\r\n     *  Fires each time a drag begins (eg. mouse down on mesh)\r\n     */\n\n    this.onDragStartObservable = new Observable();\n    /**\r\n     *  Fires each time a drag ends (eg. mouse release after drag)\r\n     */\n\n    this.onDragEndObservable = new Observable();\n    /**\r\n     *  If the attached mesh should be moved when dragged\r\n     */\n\n    this.moveAttached = true;\n    /**\r\n     *  If the drag behavior will react to drag events (Default: true)\r\n     */\n\n    this.enabled = true;\n    /**\r\n     * If pointer events should start and release the drag (Default: true)\r\n     */\n\n    this.startAndReleaseDragOnPointerEvents = true;\n    /**\r\n     * If camera controls should be detached during the drag\r\n     */\n\n    this.detachCameraControls = true;\n    /**\r\n     * If set, the drag plane/axis will be rotated based on the attached mesh's world rotation (Default: true)\r\n     */\n\n    this.useObjectOrientationForDragging = true;\n    /**\r\n     * Predicate to determine if it is valid to move the object to a new position when it is moved\r\n     */\n\n    this.validateDrag = function (targetPosition) {\n      return true;\n    };\n\n    this._tmpVector = new Vector3(0, 0, 0);\n    this._alternatePickedPoint = new Vector3(0, 0, 0);\n    this._worldDragAxis = new Vector3(0, 0, 0);\n    this._targetPosition = new Vector3(0, 0, 0);\n    this._attachedToElement = false;\n    this._startDragRay = new Ray(new Vector3(), new Vector3());\n    this._lastPointerRay = {};\n    this._dragDelta = new Vector3(); // Variables to avoid instantiation in the below method\n\n    this._pointA = new Vector3(0, 0, 0);\n    this._pointC = new Vector3(0, 0, 0);\n    this._localAxis = new Vector3(0, 0, 0);\n    this._lookAt = new Vector3(0, 0, 0);\n    this._options = options ? options : {};\n    var optionCount = 0;\n\n    if (this._options.dragAxis) {\n      optionCount++;\n    }\n\n    if (this._options.dragPlaneNormal) {\n      optionCount++;\n    }\n\n    if (optionCount > 1) {\n      throw \"Multiple drag modes specified in dragBehavior options. Only one expected\";\n    }\n  }\n\n  Object.defineProperty(PointerDragBehavior.prototype, \"options\", {\n    /**\r\n     * Gets the options used by the behavior\r\n     */\n    get: function get() {\n      return this._options;\n    },\n\n    /**\r\n     * Sets the options used by the behavior\r\n     */\n    set: function set(options) {\n      this._options = options;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PointerDragBehavior.prototype, \"name\", {\n    /**\r\n     *  The name of the behavior\r\n     */\n    get: function get() {\n      return \"PointerDrag\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   *  Initializes the behavior\r\n   */\n\n  PointerDragBehavior.prototype.init = function () {};\n  /**\r\n   * Attaches the drag behavior the passed in mesh\r\n   * @param ownerNode The mesh that will be dragged around once attached\r\n   * @param predicate Predicate to use for pick filtering\r\n   */\n\n\n  PointerDragBehavior.prototype.attach = function (ownerNode, predicate) {\n    var _this = this;\n\n    this._scene = ownerNode.getScene();\n    this.attachedNode = ownerNode; // Initialize drag plane to not interfere with existing scene\n\n    if (!PointerDragBehavior._planeScene) {\n      if (this._debugMode) {\n        PointerDragBehavior._planeScene = this._scene;\n      } else {\n        PointerDragBehavior._planeScene = new Scene(this._scene.getEngine(), {\n          virtual: true\n        });\n\n        PointerDragBehavior._planeScene.detachControl();\n\n        this._scene.onDisposeObservable.addOnce(function () {\n          PointerDragBehavior._planeScene.dispose();\n\n          PointerDragBehavior._planeScene = null;\n        });\n      }\n    }\n\n    this._dragPlane = Mesh.CreatePlane(\"pointerDragPlane\", this._debugMode ? 1 : 10000, PointerDragBehavior._planeScene, false, Mesh.DOUBLESIDE); // State of the drag\n\n    this.lastDragPosition = new Vector3(0, 0, 0);\n    var pickPredicate = !!predicate ? predicate : function (m) {\n      return _this.attachedNode == m || m.isDescendantOf(_this.attachedNode);\n    };\n    this._pointerObserver = this._scene.onPointerObservable.add(function (pointerInfo, eventState) {\n      if (!_this.enabled) {\n        return;\n      }\n\n      if (pointerInfo.type == PointerEventTypes.POINTERDOWN) {\n        if (_this.startAndReleaseDragOnPointerEvents && !_this.dragging && pointerInfo.pickInfo && pointerInfo.pickInfo.hit && pointerInfo.pickInfo.pickedMesh && pointerInfo.pickInfo.pickedPoint && pointerInfo.pickInfo.ray && pickPredicate(pointerInfo.pickInfo.pickedMesh)) {\n          _this._startDrag(pointerInfo.event.pointerId, pointerInfo.pickInfo.ray, pointerInfo.pickInfo.pickedPoint);\n        }\n      } else if (pointerInfo.type == PointerEventTypes.POINTERUP) {\n        if (_this.startAndReleaseDragOnPointerEvents && _this.currentDraggingPointerID == pointerInfo.event.pointerId) {\n          _this.releaseDrag();\n        }\n      } else if (pointerInfo.type == PointerEventTypes.POINTERMOVE) {\n        var pointerId = pointerInfo.event.pointerId; // If drag was started with anyMouseID specified, set pointerID to the next mouse that moved\n\n        if (_this.currentDraggingPointerID === PointerDragBehavior._AnyMouseID && pointerId !== PointerDragBehavior._AnyMouseID) {\n          var evt = pointerInfo.event;\n          var isMouseEvent = evt.pointerType === \"mouse\" || !_this._scene.getEngine().hostInformation.isMobile && evt instanceof MouseEvent;\n\n          if (isMouseEvent) {\n            if (_this._lastPointerRay[_this.currentDraggingPointerID]) {\n              _this._lastPointerRay[pointerId] = _this._lastPointerRay[_this.currentDraggingPointerID];\n              delete _this._lastPointerRay[_this.currentDraggingPointerID];\n            }\n\n            _this.currentDraggingPointerID = pointerId;\n          }\n        } // Keep track of last pointer ray, this is used simulating the start of a drag in startDrag()\n\n\n        if (!_this._lastPointerRay[pointerId]) {\n          _this._lastPointerRay[pointerId] = new Ray(new Vector3(), new Vector3());\n        }\n\n        if (pointerInfo.pickInfo && pointerInfo.pickInfo.ray) {\n          _this._lastPointerRay[pointerId].origin.copyFrom(pointerInfo.pickInfo.ray.origin);\n\n          _this._lastPointerRay[pointerId].direction.copyFrom(pointerInfo.pickInfo.ray.direction);\n\n          if (_this.currentDraggingPointerID == pointerId && _this.dragging) {\n            _this._moveDrag(pointerInfo.pickInfo.ray);\n          }\n        }\n      }\n    });\n    this._beforeRenderObserver = this._scene.onBeforeRenderObservable.add(function () {\n      if (_this._moving && _this.moveAttached) {\n        PivotTools._RemoveAndStorePivotPoint(_this.attachedNode); // Slowly move mesh to avoid jitter\n\n\n        _this._targetPosition.subtractToRef(_this.attachedNode.absolutePosition, _this._tmpVector);\n\n        _this._tmpVector.scaleInPlace(_this.dragDeltaRatio);\n\n        _this.attachedNode.getAbsolutePosition().addToRef(_this._tmpVector, _this._tmpVector);\n\n        if (_this.validateDrag(_this._tmpVector)) {\n          _this.attachedNode.setAbsolutePosition(_this._tmpVector);\n        }\n\n        PivotTools._RestorePivotPoint(_this.attachedNode);\n      }\n    });\n  };\n  /**\r\n   * Force relase the drag action by code.\r\n   */\n\n\n  PointerDragBehavior.prototype.releaseDrag = function () {\n    if (this.dragging) {\n      this.dragging = false;\n      this.onDragEndObservable.notifyObservers({\n        dragPlanePoint: this.lastDragPosition,\n        pointerId: this.currentDraggingPointerID\n      });\n    }\n\n    this.currentDraggingPointerID = -1;\n    this._moving = false; // Reattach camera controls\n\n    if (this.detachCameraControls && this._attachedToElement && this._scene.activeCamera && !this._scene.activeCamera.leftCamera) {\n      if (this._scene.activeCamera.getClassName() === \"ArcRotateCamera\") {\n        var arcRotateCamera = this._scene.activeCamera;\n        arcRotateCamera.attachControl(arcRotateCamera.inputs ? arcRotateCamera.inputs.noPreventDefault : true, arcRotateCamera._useCtrlForPanning, arcRotateCamera._panningMouseButton);\n      } else {\n        this._scene.activeCamera.attachControl(this._scene.activeCamera.inputs ? this._scene.activeCamera.inputs.noPreventDefault : true);\n      }\n\n      this._attachedToElement = false;\n    }\n  };\n  /**\r\n   * Simulates the start of a pointer drag event on the behavior\r\n   * @param pointerId pointerID of the pointer that should be simulated (Default: Any mouse pointer ID)\r\n   * @param fromRay initial ray of the pointer to be simulated (Default: Ray from camera to attached mesh)\r\n   * @param startPickedPoint picked point of the pointer to be simulated (Default: attached mesh position)\r\n   */\n\n\n  PointerDragBehavior.prototype.startDrag = function (pointerId, fromRay, startPickedPoint) {\n    if (pointerId === void 0) {\n      pointerId = PointerDragBehavior._AnyMouseID;\n    }\n\n    this._startDrag(pointerId, fromRay, startPickedPoint);\n\n    var lastRay = this._lastPointerRay[pointerId];\n\n    if (pointerId === PointerDragBehavior._AnyMouseID) {\n      lastRay = this._lastPointerRay[Object.keys(this._lastPointerRay)[0]];\n    }\n\n    if (lastRay) {\n      // if there was a last pointer ray drag the object there\n      this._moveDrag(lastRay);\n    }\n  };\n\n  PointerDragBehavior.prototype._startDrag = function (pointerId, fromRay, startPickedPoint) {\n    if (!this._scene.activeCamera || this.dragging || !this.attachedNode) {\n      return;\n    }\n\n    PivotTools._RemoveAndStorePivotPoint(this.attachedNode); // Create start ray from the camera to the object\n\n\n    if (fromRay) {\n      this._startDragRay.direction.copyFrom(fromRay.direction);\n\n      this._startDragRay.origin.copyFrom(fromRay.origin);\n    } else {\n      this._startDragRay.origin.copyFrom(this._scene.activeCamera.position);\n\n      this.attachedNode.getWorldMatrix().getTranslationToRef(this._tmpVector);\n\n      this._tmpVector.subtractToRef(this._scene.activeCamera.position, this._startDragRay.direction);\n    }\n\n    this._updateDragPlanePosition(this._startDragRay, startPickedPoint ? startPickedPoint : this._tmpVector);\n\n    var pickedPoint = this._pickWithRayOnDragPlane(this._startDragRay);\n\n    if (pickedPoint) {\n      this.dragging = true;\n      this.currentDraggingPointerID = pointerId;\n      this.lastDragPosition.copyFrom(pickedPoint);\n      this.onDragStartObservable.notifyObservers({\n        dragPlanePoint: pickedPoint,\n        pointerId: this.currentDraggingPointerID\n      });\n\n      this._targetPosition.copyFrom(this.attachedNode.absolutePosition); // Detatch camera controls\n\n\n      if (this.detachCameraControls && this._scene.activeCamera && this._scene.activeCamera.inputs && !this._scene.activeCamera.leftCamera) {\n        if (this._scene.activeCamera.inputs.attachedToElement) {\n          this._scene.activeCamera.detachControl();\n\n          this._attachedToElement = true;\n        } else {\n          this._attachedToElement = false;\n        }\n      }\n    }\n\n    PivotTools._RestorePivotPoint(this.attachedNode);\n  };\n\n  PointerDragBehavior.prototype._moveDrag = function (ray) {\n    this._moving = true;\n\n    var pickedPoint = this._pickWithRayOnDragPlane(ray);\n\n    if (pickedPoint) {\n      if (this.updateDragPlane) {\n        this._updateDragPlanePosition(ray, pickedPoint);\n      }\n\n      var dragLength = 0; // depending on the drag mode option drag accordingly\n\n      if (this._options.dragAxis) {\n        // Convert local drag axis to world if useObjectOrientationForDragging\n        this.useObjectOrientationForDragging ? Vector3.TransformCoordinatesToRef(this._options.dragAxis, this.attachedNode.getWorldMatrix().getRotationMatrix(), this._worldDragAxis) : this._worldDragAxis.copyFrom(this._options.dragAxis); // Project delta drag from the drag plane onto the drag axis\n\n        pickedPoint.subtractToRef(this.lastDragPosition, this._tmpVector);\n        dragLength = Vector3.Dot(this._tmpVector, this._worldDragAxis);\n\n        this._worldDragAxis.scaleToRef(dragLength, this._dragDelta);\n      } else {\n        dragLength = this._dragDelta.length();\n        pickedPoint.subtractToRef(this.lastDragPosition, this._dragDelta);\n      }\n\n      this._targetPosition.addInPlace(this._dragDelta);\n\n      this.onDragObservable.notifyObservers({\n        dragDistance: dragLength,\n        delta: this._dragDelta,\n        dragPlanePoint: pickedPoint,\n        dragPlaneNormal: this._dragPlane.forward,\n        pointerId: this.currentDraggingPointerID\n      });\n      this.lastDragPosition.copyFrom(pickedPoint);\n    }\n  };\n\n  PointerDragBehavior.prototype._pickWithRayOnDragPlane = function (ray) {\n    var _this = this;\n\n    if (!ray) {\n      return null;\n    } // Calculate angle between plane normal and ray\n\n\n    var angle = Math.acos(Vector3.Dot(this._dragPlane.forward, ray.direction)); // Correct if ray is casted from oposite side\n\n    if (angle > Math.PI / 2) {\n      angle = Math.PI - angle;\n    } // If the angle is too perpendicular to the plane pick another point on the plane where it is looking\n\n\n    if (this.maxDragAngle > 0 && angle > this.maxDragAngle) {\n      if (this._useAlternatePickedPointAboveMaxDragAngle) {\n        // Invert ray direction along the towards object axis\n        this._tmpVector.copyFrom(ray.direction);\n\n        this.attachedNode.absolutePosition.subtractToRef(ray.origin, this._alternatePickedPoint);\n\n        this._alternatePickedPoint.normalize();\n\n        this._alternatePickedPoint.scaleInPlace(this._useAlternatePickedPointAboveMaxDragAngleDragSpeed * Vector3.Dot(this._alternatePickedPoint, this._tmpVector));\n\n        this._tmpVector.addInPlace(this._alternatePickedPoint); // Project resulting vector onto the drag plane and add it to the attached nodes absolute position to get a picked point\n\n\n        var dot = Vector3.Dot(this._dragPlane.forward, this._tmpVector);\n\n        this._dragPlane.forward.scaleToRef(-dot, this._alternatePickedPoint);\n\n        this._alternatePickedPoint.addInPlace(this._tmpVector);\n\n        this._alternatePickedPoint.addInPlace(this.attachedNode.absolutePosition);\n\n        return this._alternatePickedPoint;\n      } else {\n        return null;\n      }\n    }\n\n    var pickResult = PointerDragBehavior._planeScene.pickWithRay(ray, function (m) {\n      return m == _this._dragPlane;\n    });\n\n    if (pickResult && pickResult.hit && pickResult.pickedMesh && pickResult.pickedPoint) {\n      return pickResult.pickedPoint;\n    } else {\n      return null;\n    }\n  }; // Position the drag plane based on the attached mesh position, for single axis rotate the plane along the axis to face the camera\n\n\n  PointerDragBehavior.prototype._updateDragPlanePosition = function (ray, dragPlanePosition) {\n    this._pointA.copyFrom(dragPlanePosition);\n\n    if (this._options.dragAxis) {\n      this.useObjectOrientationForDragging ? Vector3.TransformCoordinatesToRef(this._options.dragAxis, this.attachedNode.getWorldMatrix().getRotationMatrix(), this._localAxis) : this._localAxis.copyFrom(this._options.dragAxis); // Calculate plane normal that is the cross product of local axis and (eye-dragPlanePosition)\n\n      ray.origin.subtractToRef(this._pointA, this._pointC);\n\n      this._pointC.normalize();\n\n      if (Math.abs(Vector3.Dot(this._localAxis, this._pointC)) > 0.999) {\n        // the drag axis is colinear with the (eye to position) ray. The cross product will give jittered values.\n        // A new axis vector need to be computed\n        if (Math.abs(Vector3.Dot(Vector3.UpReadOnly, this._pointC)) > 0.999) {\n          this._lookAt.copyFrom(Vector3.Right());\n        } else {\n          this._lookAt.copyFrom(Vector3.UpReadOnly);\n        }\n      } else {\n        Vector3.CrossToRef(this._localAxis, this._pointC, this._lookAt); // Get perpendicular line from previous result and drag axis to adjust lineB to be perpendiculat to camera\n\n        Vector3.CrossToRef(this._localAxis, this._lookAt, this._lookAt);\n\n        this._lookAt.normalize();\n      }\n\n      this._dragPlane.position.copyFrom(this._pointA);\n\n      this._pointA.addToRef(this._lookAt, this._lookAt);\n\n      this._dragPlane.lookAt(this._lookAt);\n    } else if (this._options.dragPlaneNormal) {\n      this.useObjectOrientationForDragging ? Vector3.TransformCoordinatesToRef(this._options.dragPlaneNormal, this.attachedNode.getWorldMatrix().getRotationMatrix(), this._localAxis) : this._localAxis.copyFrom(this._options.dragPlaneNormal);\n\n      this._dragPlane.position.copyFrom(this._pointA);\n\n      this._pointA.addToRef(this._localAxis, this._lookAt);\n\n      this._dragPlane.lookAt(this._lookAt);\n    } else {\n      this._dragPlane.position.copyFrom(this._pointA);\n\n      this._dragPlane.lookAt(ray.origin);\n    } // Update the position of the drag plane so it doesn't get out of sync with the node (eg. when moving back and forth quickly)\n\n\n    this._dragPlane.position.copyFrom(this.attachedNode.absolutePosition);\n\n    this._dragPlane.computeWorldMatrix(true);\n  };\n  /**\r\n   *  Detaches the behavior from the mesh\r\n   */\n\n\n  PointerDragBehavior.prototype.detach = function () {\n    if (this._pointerObserver) {\n      this._scene.onPointerObservable.remove(this._pointerObserver);\n    }\n\n    if (this._beforeRenderObserver) {\n      this._scene.onBeforeRenderObservable.remove(this._beforeRenderObserver);\n    }\n\n    this.releaseDrag();\n  };\n\n  PointerDragBehavior._AnyMouseID = -2;\n  return PointerDragBehavior;\n}();\n\nexport { PointerDragBehavior };","map":null,"metadata":{},"sourceType":"module"}