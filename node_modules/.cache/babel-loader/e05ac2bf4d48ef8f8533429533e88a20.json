{"ast":null,"code":"/** @hidden */\nvar ShaderDefineExpression =\n/** @class */\nfunction () {\n  function ShaderDefineExpression() {}\n\n  ShaderDefineExpression.prototype.isTrue = function (preprocessors) {\n    return true;\n  };\n\n  ShaderDefineExpression.postfixToInfix = function (postfix) {\n    var stack = [];\n\n    for (var _i = 0, postfix_1 = postfix; _i < postfix_1.length; _i++) {\n      var c = postfix_1[_i];\n\n      if (ShaderDefineExpression._OperatorPriority[c] === undefined) {\n        stack.push(c);\n      } else {\n        var v1 = stack[stack.length - 1],\n            v2 = stack[stack.length - 2];\n        stack.length -= 2;\n        stack.push(\"(\" + v2 + c + v1 + \")\");\n      }\n    }\n\n    return stack[stack.length - 1];\n  };\n\n  ShaderDefineExpression.infixToPostfix = function (infix) {\n    var result = [];\n    var stackIdx = -1;\n\n    var pushOperand = function pushOperand() {\n      operand = operand.trim();\n\n      if (operand !== '') {\n        result.push(operand);\n        operand = '';\n      }\n    };\n\n    var push = function push(s) {\n      if (stackIdx < ShaderDefineExpression._Stack.length - 1) {\n        ShaderDefineExpression._Stack[++stackIdx] = s;\n      }\n    };\n\n    var peek = function peek() {\n      return ShaderDefineExpression._Stack[stackIdx];\n    };\n\n    var pop = function pop() {\n      return stackIdx === -1 ? '!!INVALID EXPRESSION!!' : ShaderDefineExpression._Stack[stackIdx--];\n    };\n\n    var idx = 0,\n        operand = '';\n\n    while (idx < infix.length) {\n      var c = infix.charAt(idx),\n          token = idx < infix.length - 1 ? infix.substr(idx, 2) : '';\n\n      if (c === '(') {\n        operand = '';\n        push(c);\n      } else if (c === ')') {\n        pushOperand();\n\n        while (stackIdx !== -1 && peek() !== '(') {\n          result.push(pop());\n        }\n\n        pop();\n      } else if (ShaderDefineExpression._OperatorPriority[token] > 1) {\n        pushOperand();\n\n        while (stackIdx !== -1 && ShaderDefineExpression._OperatorPriority[peek()] >= ShaderDefineExpression._OperatorPriority[token]) {\n          result.push(pop());\n        }\n\n        push(token);\n        idx++;\n      } else {\n        operand += c;\n      }\n\n      idx++;\n    }\n\n    pushOperand();\n\n    while (stackIdx !== -1) {\n      if (peek() === '(') {\n        pop();\n      } else {\n        result.push(pop());\n      }\n    }\n\n    return result;\n  };\n\n  ShaderDefineExpression._OperatorPriority = {\n    \")\": 0,\n    \"(\": 1,\n    \"||\": 2,\n    \"&&\": 3\n  };\n  ShaderDefineExpression._Stack = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''];\n  return ShaderDefineExpression;\n}();\n\nexport { ShaderDefineExpression };","map":null,"metadata":{},"sourceType":"module"}