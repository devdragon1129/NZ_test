{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\n/**\r\n * Block used for the particle ramp gradient section\r\n */\n\nvar ParticleRampGradientBlock =\n/** @class */\nfunction (_super) {\n  __extends(ParticleRampGradientBlock, _super);\n  /**\r\n   * Create a new ParticleRampGradientBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function ParticleRampGradientBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment) || this;\n\n    _this._isUnique = true;\n\n    _this.registerInput(\"color\", NodeMaterialBlockConnectionPointTypes.Color4, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"rampColor\", NodeMaterialBlockConnectionPointTypes.Color4, NodeMaterialBlockTargets.Fragment);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  ParticleRampGradientBlock.prototype.getClassName = function () {\n    return \"ParticleRampGradientBlock\";\n  };\n\n  Object.defineProperty(ParticleRampGradientBlock.prototype, \"color\", {\n    /**\r\n     * Gets the color input component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ParticleRampGradientBlock.prototype, \"rampColor\", {\n    /**\r\n     * Gets the rampColor output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Initialize the block and prepare the context for build\r\n   * @param state defines the state that will be used for the build\r\n   */\n\n  ParticleRampGradientBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"remapRanges\");\n\n    state._excludeVariableName(\"rampSampler\");\n\n    state._excludeVariableName(\"baseColor\");\n\n    state._excludeVariableName(\"alpha\");\n\n    state._excludeVariableName(\"remappedColorIndex\");\n\n    state._excludeVariableName(\"rampColor\");\n\n    state._excludeVariableName(\"finalAlpha\");\n  };\n\n  ParticleRampGradientBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (state.target === NodeMaterialBlockTargets.Vertex) {\n      return;\n    }\n\n    state._emit2DSampler(\"rampSampler\");\n\n    state._emitVaryingFromString(\"remapRanges\", \"vec4\", \"RAMPGRADIENT\");\n\n    state.compilationString += \"\\n            #ifdef RAMPGRADIENT\\n                vec4 baseColor = \" + this.color.associatedVariableName + \";\\n                float alpha = \" + this.color.associatedVariableName + \".a;\\n\\n                float remappedColorIndex = clamp((alpha - remapRanges.x) / remapRanges.y, 0.0, 1.0);\\n\\n                vec4 rampColor = texture2D(rampSampler, vec2(1.0 - remappedColorIndex, 0.));\\n                baseColor.rgb *= rampColor.rgb;\\n\\n                // Remapped alpha\\n                float finalAlpha = baseColor.a;\\n                baseColor.a = clamp((alpha * rampColor.a - remapRanges.z) / remapRanges.w, 0.0, 1.0);\\n\\n                \" + this._declareOutput(this.rampColor, state) + \" = baseColor;\\n            #else\\n                \" + this._declareOutput(this.rampColor, state) + \" = \" + this.color.associatedVariableName + \";\\n            #endif\\n        \";\n    return this;\n  };\n\n  return ParticleRampGradientBlock;\n}(NodeMaterialBlock);\n\nexport { ParticleRampGradientBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.ParticleRampGradientBlock\"] = ParticleRampGradientBlock;","map":null,"metadata":{},"sourceType":"module"}