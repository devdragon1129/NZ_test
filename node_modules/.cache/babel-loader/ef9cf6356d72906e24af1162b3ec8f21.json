{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getUpdatedApprovedListWithoutQueryingContract = exports.getApprovedListFromContract = void 0;\n\nvar dcl_catalyst_commons_1 = require(\"dcl-catalyst-commons\");\n\nvar CatalystClient_1 = require(\"../CatalystClient\");\n\nvar CatalystsList_1 = __importDefault(require(\"../CatalystsList\"));\n\nvar common_1 = require(\"./common\");\n\nfunction getApprovedListFromContract(_x) {\n  return _getApprovedListFromContract.apply(this, arguments);\n}\n\nfunction _getApprovedListFromContract() {\n  _getApprovedListFromContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(network) {\n    var servers;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(network === 'mainnet')) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return (0, dcl_catalyst_commons_1.getMainnetCatalysts)();\n\n          case 3:\n            _context.t0 = _context.sent;\n            _context.next = 9;\n            break;\n\n          case 6:\n            _context.next = 8;\n            return (0, dcl_catalyst_commons_1.getRopstenCatalysts)();\n\n          case 8:\n            _context.t0 = _context.sent;\n\n          case 9:\n            servers = _context.t0;\n            return _context.abrupt(\"return\", servers.map(function (_ref5) {\n              var address = _ref5.address;\n              return address;\n            }));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getApprovedListFromContract.apply(this, arguments);\n}\n\nexports.getApprovedListFromContract = getApprovedListFromContract;\n/**\n * The idea here is to build an updated list of the catalysts approved by the DAO, without actually querying the DAO's contract\n * directly. This is because that query is both slow and expensive, so the idea is to use a list of known servers and ask them\n * for the updated list. The thing is this known server list might be outdated, so we need to take that into account. We will\n * take N (defined by REQUIRED_LISTS below) random servers from this known list, and ask them for the currently approved ones. We will then use the intersection of those\n * N lists as the updated list.\n */\n\nvar REQUIRED_LISTS = 3;\n\nfunction getUpdatedApprovedListWithoutQueryingContract(_x2) {\n  return _getUpdatedApprovedListWithoutQueryingContract.apply(this, arguments);\n}\n\nfunction _getUpdatedApprovedListWithoutQueryingContract() {\n  _getUpdatedApprovedListWithoutQueryingContract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n    var catalystListFetch, requiredAmountOfLists, knownServers, shuffledPreKnownServers, approvedServersList, allLists, i, list, intersection;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // Set defaults if needed\n            catalystListFetch = options.fetchApprovedCatalysts ? options.fetchApprovedCatalysts : function (catalystUrl) {\n              return fetchCatalystsApprovedByDAO(catalystUrl);\n            };\n            requiredAmountOfLists = options.requiredLists ? options.requiredLists : REQUIRED_LISTS; // Get the list of known servers\n\n            knownServers = 'list' in options.preKnownServers ? options.preKnownServers.list : CatalystsList_1.default[options.preKnownServers.network]; // If I don't know enough servers, then it doesn't make sense to continue\n\n            if (!(knownServers.length < requiredAmountOfLists)) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", undefined);\n\n          case 5:\n            // Shuffle the list\n            shuffledPreKnownServers = (0, common_1.shuffleArray)(knownServers); // Ask N of them for their list\n\n            _context2.next = 8;\n            return Promise.all(shuffledPreKnownServers.slice(0, requiredAmountOfLists + 3).map(function (server) {\n              return server.address;\n            }).map(function (address) {\n              return catalystListFetch(address);\n            }));\n\n          case 8:\n            approvedServersList = _context2.sent;\n            // Removed any failures\n            allLists = approvedServersList.filter(function (approvedServerList) {\n              return !!approvedServerList;\n            }); // Check if we need to ask for anyone else's list\n\n            i = requiredAmountOfLists + 3;\n\n          case 11:\n            if (!(i < shuffledPreKnownServers.length && allLists.length < requiredAmountOfLists)) {\n              _context2.next = 19;\n              break;\n            }\n\n            _context2.next = 14;\n            return catalystListFetch(shuffledPreKnownServers[i].address);\n\n          case 14:\n            list = _context2.sent;\n\n            if (list) {\n              allLists.push(list);\n            }\n\n            i++;\n            _context2.next = 11;\n            break;\n\n          case 19:\n            if (!(allLists.length < requiredAmountOfLists)) {\n              _context2.next = 21;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", undefined);\n\n          case 21:\n            // Calculate the intersection\n            intersection = calculateIntersection(allLists);\n            return _context2.abrupt(\"return\", intersection.length > 0 ? intersection : undefined);\n\n          case 23:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getUpdatedApprovedListWithoutQueryingContract.apply(this, arguments);\n}\n\nexports.getUpdatedApprovedListWithoutQueryingContract = getUpdatedApprovedListWithoutQueryingContract;\n\nfunction calculateIntersection(lists) {\n  var count = new Map();\n\n  var _iterator = _createForOfIteratorHelper(lists),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var list = _step.value;\n\n      var _iterator2 = _createForOfIteratorHelper(list),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var element = _step2.value;\n          var i = count.get(element);\n          count.set(element, (i ? i : 0) + 1);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return Array.from(count.entries()).filter(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        _ = _ref2[0],\n        count = _ref2[1];\n\n    return count === lists.length;\n  }).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 1),\n        element = _ref4[0];\n\n    return element;\n  });\n}\n\nfunction fetchCatalystsApprovedByDAO(_x3) {\n  return _fetchCatalystsApprovedByDAO.apply(this, arguments);\n}\n\nfunction _fetchCatalystsApprovedByDAO() {\n  _fetchCatalystsApprovedByDAO = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(catalystUrl) {\n    var client, servers;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            client = new CatalystClient_1.CatalystClient({\n              catalystUrl: catalystUrl\n            });\n            _context3.prev = 1;\n            _context3.next = 4;\n            return client.fetchCatalystsApprovedByDAO({\n              timeout: '10s'\n            });\n\n          case 4:\n            servers = _context3.sent;\n            return _context3.abrupt(\"return\", servers.map(function (_ref6) {\n              var address = _ref6.address;\n              return address;\n            }));\n\n          case 8:\n            _context3.prev = 8;\n            _context3.t0 = _context3[\"catch\"](1);\n            return _context3.abrupt(\"return\", undefined);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[1, 8]]);\n  }));\n  return _fetchCatalystsApprovedByDAO.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}