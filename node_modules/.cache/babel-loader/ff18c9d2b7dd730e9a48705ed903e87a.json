{"ast":null,"code":"import _defineProperty from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { loadingReducer } from 'decentraland-dapps/dist/modules/loading/reducer';\nimport { FETCH_TRANSACTION_SUCCESS } from 'decentraland-dapps/dist/modules/transaction/actions';\nimport { FETCH_ENS_LIST_REQUEST, FETCH_ENS_LIST_SUCCESS, FETCH_ENS_LIST_FAILURE, FETCH_ENS_AUTHORIZATION_REQUEST, FETCH_ENS_AUTHORIZATION_SUCCESS, FETCH_ENS_AUTHORIZATION_FAILURE, FETCH_ENS_REQUEST, FETCH_ENS_SUCCESS, FETCH_ENS_FAILURE, SET_ENS_CONTENT_REQUEST, SET_ENS_CONTENT_SUCCESS, SET_ENS_CONTENT_FAILURE, SET_ENS_RESOLVER_REQUEST, SET_ENS_RESOLVER_SUCCESS, SET_ENS_RESOLVER_FAILURE, CLAIM_NAME_REQUEST, CLAIM_NAME_FAILURE, CLAIM_NAME_SUCCESS, ALLOW_CLAIM_MANA_REQUEST, ALLOW_CLAIM_MANA_FAILURE, ALLOW_CLAIM_MANA_SUCCESS } from './actions';\nvar INITIAL_STATE = {\n  data: {},\n  authorizations: {},\n  loading: [],\n  error: null\n};\nexport function ensReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CLAIM_NAME_REQUEST:\n    case FETCH_ENS_LIST_REQUEST:\n    case FETCH_ENS_AUTHORIZATION_REQUEST:\n    case FETCH_ENS_REQUEST:\n    case SET_ENS_CONTENT_REQUEST:\n    case SET_ENS_RESOLVER_REQUEST:\n    case SET_ENS_CONTENT_SUCCESS:\n    case SET_ENS_RESOLVER_SUCCESS:\n    case ALLOW_CLAIM_MANA_REQUEST:\n    case ALLOW_CLAIM_MANA_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          error: null,\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case FETCH_ENS_LIST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action),\n          data: _objectSpread({}, state.data, action.payload.ensList.reduce(function (obj, ens) {\n            obj[ens.subdomain] = _objectSpread({}, obj[ens.subdomain], ens);\n            return obj;\n          }, _objectSpread({}, state.data)))\n        });\n      }\n\n    case FETCH_ENS_AUTHORIZATION_SUCCESS:\n      {\n        var _action$payload = action.payload,\n            authorization = _action$payload.authorization,\n            address = _action$payload.address;\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action),\n          authorizations: _objectSpread({}, state.authorizations, _defineProperty({}, address, _objectSpread({}, authorization)))\n        });\n      }\n\n    case FETCH_ENS_SUCCESS:\n      {\n        var ens = action.payload.ens;\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action),\n          data: _objectSpread({}, state.data, _defineProperty({}, ens.subdomain, _objectSpread({}, ens)))\n        });\n      }\n\n    case CLAIM_NAME_SUCCESS:\n      {\n        var _ens = action.payload.ens;\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action),\n          data: _objectSpread({}, state.data, _defineProperty({}, _ens.subdomain, _objectSpread({}, state.data[_ens.subdomain], _ens)))\n        });\n      }\n\n    case CLAIM_NAME_FAILURE:\n    case SET_ENS_RESOLVER_FAILURE:\n    case SET_ENS_CONTENT_FAILURE:\n    case FETCH_ENS_FAILURE:\n    case FETCH_ENS_LIST_FAILURE:\n    case FETCH_ENS_AUTHORIZATION_FAILURE:\n    case ALLOW_CLAIM_MANA_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action),\n          error: _objectSpread({}, action.payload.error)\n        });\n      }\n\n    case FETCH_TRANSACTION_SUCCESS:\n      {\n        var transaction = action.payload.transaction;\n\n        switch (transaction.actionType) {\n          case SET_ENS_RESOLVER_SUCCESS:\n            {\n              var _transaction$payload = transaction.payload,\n                  _ens2 = _transaction$payload.ens,\n                  resolver = _transaction$payload.resolver;\n              var subdomain = _ens2.subdomain;\n              return _objectSpread({}, state, {\n                loading: loadingReducer(state.loading, action),\n                data: _objectSpread({}, state.data, _defineProperty({}, subdomain, _objectSpread({}, state.data[subdomain], {\n                  resolver: resolver\n                })))\n              });\n            }\n\n          case SET_ENS_CONTENT_SUCCESS:\n            {\n              var _transaction$payload2 = transaction.payload,\n                  _ens3 = _transaction$payload2.ens,\n                  content = _transaction$payload2.content,\n                  land = _transaction$payload2.land;\n              var _subdomain = _ens3.subdomain;\n              return _objectSpread({}, state, {\n                loading: loadingReducer(state.loading, action),\n                data: _objectSpread({}, state.data, _defineProperty({}, _subdomain, _objectSpread({}, state.data[_subdomain], {\n                  content: content,\n                  landId: land ? land.id : ''\n                })))\n              });\n            }\n\n          case ALLOW_CLAIM_MANA_SUCCESS:\n            {\n              var _transaction$payload3 = transaction.payload,\n                  allowance = _transaction$payload3.allowance,\n                  _address = _transaction$payload3.address;\n              return _objectSpread({}, state, {\n                authorizations: _objectSpread({}, state.authorizations, _defineProperty({}, _address, _objectSpread({}, state.authorizations[_address], {\n                  allowance: allowance\n                }))),\n                loading: loadingReducer(state.loading, action)\n              });\n            }\n\n          default:\n            return state;\n        }\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/ens/reducer.ts"],"names":["loadingReducer","FETCH_TRANSACTION_SUCCESS","FETCH_ENS_LIST_REQUEST","FETCH_ENS_LIST_SUCCESS","FETCH_ENS_LIST_FAILURE","FETCH_ENS_AUTHORIZATION_REQUEST","FETCH_ENS_AUTHORIZATION_SUCCESS","FETCH_ENS_AUTHORIZATION_FAILURE","FETCH_ENS_REQUEST","FETCH_ENS_SUCCESS","FETCH_ENS_FAILURE","SET_ENS_CONTENT_REQUEST","SET_ENS_CONTENT_SUCCESS","SET_ENS_CONTENT_FAILURE","SET_ENS_RESOLVER_REQUEST","SET_ENS_RESOLVER_SUCCESS","SET_ENS_RESOLVER_FAILURE","CLAIM_NAME_REQUEST","CLAIM_NAME_FAILURE","CLAIM_NAME_SUCCESS","ALLOW_CLAIM_MANA_REQUEST","ALLOW_CLAIM_MANA_FAILURE","ALLOW_CLAIM_MANA_SUCCESS","INITIAL_STATE","data","authorizations","loading","error","ensReducer","state","action","type","payload","ensList","reduce","obj","ens","subdomain","authorization","address","transaction","actionType","resolver","content","land","landId","id","allowance"],"mappings":"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","sourcesContent":["import { LoadingState, loadingReducer } from 'decentraland-dapps/dist/modules/loading/reducer'\nimport { FetchTransactionSuccessAction, FETCH_TRANSACTION_SUCCESS } from 'decentraland-dapps/dist/modules/transaction/actions'\nimport {\n  FetchENSListRequestAction,\n  FetchENSListSuccessAction,\n  FetchENSListFailureAction,\n  FETCH_ENS_LIST_REQUEST,\n  FETCH_ENS_LIST_SUCCESS,\n  FETCH_ENS_LIST_FAILURE,\n  FetchENSAuthorizationRequestAction,\n  FetchENSAuthorizationSuccessAction,\n  FetchENSAuthorizationFailureAction,\n  FETCH_ENS_AUTHORIZATION_REQUEST,\n  FETCH_ENS_AUTHORIZATION_SUCCESS,\n  FETCH_ENS_AUTHORIZATION_FAILURE,\n  FetchENSRequestAction,\n  FetchENSSuccessAction,\n  FetchENSFailureAction,\n  FETCH_ENS_REQUEST,\n  FETCH_ENS_SUCCESS,\n  FETCH_ENS_FAILURE,\n  SetENSContentRequestAction,\n  SetENSContentSuccessAction,\n  SetENSContentFailureAction,\n  SET_ENS_CONTENT_REQUEST,\n  SET_ENS_CONTENT_SUCCESS,\n  SET_ENS_CONTENT_FAILURE,\n  SetENSResolverRequestAction,\n  SetENSResolverSuccessAction,\n  SetENSResolverFailureAction,\n  SET_ENS_RESOLVER_REQUEST,\n  SET_ENS_RESOLVER_SUCCESS,\n  SET_ENS_RESOLVER_FAILURE,\n  CLAIM_NAME_REQUEST,\n  ClaimNameRequestAction,\n  ClaimNameFailureAction,\n  ClaimNameSuccessAction,\n  CLAIM_NAME_FAILURE,\n  CLAIM_NAME_SUCCESS,\n  ALLOW_CLAIM_MANA_REQUEST,\n  ALLOW_CLAIM_MANA_FAILURE,\n  ALLOW_CLAIM_MANA_SUCCESS,\n  AllowClaimManaRequestAction,\n  AllowClaimManaSuccessAction,\n  AllowClaimManaFailureAction\n} from './actions'\nimport { ENS, ENSError, Authorization } from './types'\n\nexport type ENSState = {\n  data: Record<string, ENS>\n  authorizations: Record<string, Authorization>\n  loading: LoadingState\n  error: ENSError | null\n}\n\nconst INITIAL_STATE: ENSState = {\n  data: {},\n  authorizations: {},\n  loading: [],\n  error: null\n}\n\nexport type ENSReducerAction =\n  | FetchENSRequestAction\n  | FetchENSSuccessAction\n  | FetchENSFailureAction\n  | SetENSContentRequestAction\n  | SetENSContentSuccessAction\n  | SetENSContentFailureAction\n  | SetENSResolverRequestAction\n  | SetENSResolverSuccessAction\n  | SetENSResolverFailureAction\n  | FetchENSListRequestAction\n  | FetchENSListSuccessAction\n  | FetchENSListFailureAction\n  | FetchENSAuthorizationRequestAction\n  | FetchENSAuthorizationSuccessAction\n  | FetchENSAuthorizationFailureAction\n  | FetchTransactionSuccessAction\n  | ClaimNameRequestAction\n  | ClaimNameFailureAction\n  | ClaimNameSuccessAction\n  | AllowClaimManaRequestAction\n  | AllowClaimManaSuccessAction\n  | AllowClaimManaFailureAction\n\nexport function ensReducer(state: ENSState = INITIAL_STATE, action: ENSReducerAction): ENSState {\n  switch (action.type) {\n    case CLAIM_NAME_REQUEST:\n    case FETCH_ENS_LIST_REQUEST:\n    case FETCH_ENS_AUTHORIZATION_REQUEST:\n    case FETCH_ENS_REQUEST:\n    case SET_ENS_CONTENT_REQUEST:\n    case SET_ENS_RESOLVER_REQUEST:\n    case SET_ENS_CONTENT_SUCCESS:\n    case SET_ENS_RESOLVER_SUCCESS:\n    case ALLOW_CLAIM_MANA_REQUEST:\n    case ALLOW_CLAIM_MANA_SUCCESS: {\n      return {\n        ...state,\n        error: null,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case FETCH_ENS_LIST_SUCCESS: {\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        data: {\n          ...state.data,\n          ...action.payload.ensList.reduce(\n            (obj, ens) => {\n              obj[ens.subdomain] = { ...obj[ens.subdomain], ...ens }\n              return obj\n            },\n            { ...state.data }\n          )\n        }\n      }\n    }\n    case FETCH_ENS_AUTHORIZATION_SUCCESS: {\n      const { authorization, address } = action.payload\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        authorizations: {\n          ...state.authorizations,\n          [address]: {\n            ...authorization\n          }\n        }\n      }\n    }\n    case FETCH_ENS_SUCCESS: {\n      const { ens } = action.payload\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        data: {\n          ...state.data,\n          [ens.subdomain]: {\n            ...ens\n          }\n        }\n      }\n    }\n    case CLAIM_NAME_SUCCESS: {\n      const { ens } = action.payload\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        data: {\n          ...state.data,\n          [ens.subdomain]: {\n            ...state.data[ens.subdomain],\n            ...ens\n          }\n        }\n      }\n    }\n    case CLAIM_NAME_FAILURE:\n    case SET_ENS_RESOLVER_FAILURE:\n    case SET_ENS_CONTENT_FAILURE:\n    case FETCH_ENS_FAILURE:\n    case FETCH_ENS_LIST_FAILURE:\n    case FETCH_ENS_AUTHORIZATION_FAILURE:\n    case ALLOW_CLAIM_MANA_FAILURE: {\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: { ...action.payload.error }\n      }\n    }\n    case FETCH_TRANSACTION_SUCCESS: {\n      const transaction = action.payload.transaction\n\n      switch (transaction.actionType) {\n        case SET_ENS_RESOLVER_SUCCESS: {\n          const { ens, resolver } = transaction.payload\n          const { subdomain } = ens\n          return {\n            ...state,\n            loading: loadingReducer(state.loading, action),\n            data: {\n              ...state.data,\n              [subdomain]: {\n                ...state.data[subdomain],\n                resolver\n              }\n            }\n          }\n        }\n        case SET_ENS_CONTENT_SUCCESS: {\n          const { ens, content, land } = transaction.payload\n          const { subdomain } = ens\n          return {\n            ...state,\n            loading: loadingReducer(state.loading, action),\n            data: {\n              ...state.data,\n              [subdomain]: {\n                ...state.data[subdomain],\n                content,\n                landId: land ? land.id : ''\n              }\n            }\n          }\n        }\n        case ALLOW_CLAIM_MANA_SUCCESS: {\n          const { allowance, address } = transaction.payload\n          return {\n            ...state,\n            authorizations: {\n              ...state.authorizations,\n              [address]: {\n                ...state.authorizations[address],\n                allowance\n              }\n            },\n            loading: loadingReducer(state.loading, action)\n          }\n        }\n        default:\n          return state\n      }\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}