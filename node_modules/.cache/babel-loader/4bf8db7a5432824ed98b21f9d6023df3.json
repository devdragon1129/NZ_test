{"ast":null,"code":"import { connect } from 'react-redux';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { isConnected } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { DEFAULT_PAGE_SIZE } from 'lib/api/pagination';\nimport { getCollectionId } from 'modules/location/selectors';\nimport { getPaginatedCollectionItems, getLoading as getLoadingItems, getCollectionItems } from 'modules/item/selectors';\nimport { fetchCollectionItemsRequest, FETCH_COLLECTION_ITEMS_REQUEST } from 'modules/item/actions';\nimport { getLoading, getCollection, getPaginatedCollections } from 'modules/collection/selectors';\nimport { FETCH_COLLECTION_REQUEST, fetchCollectionRequest } from 'modules/collection/actions';\nimport { getItemCurations, getLoading as getLoadingItemCurations } from 'modules/curations/itemCuration/selectors';\nimport CollectionProvider from './CollectionProvider';\nimport { getCuration } from 'modules/curations/collectionCuration/selectors';\nimport { FETCH_ITEM_CURATIONS_REQUEST } from 'modules/curations/itemCuration/actions';\n\nvar mapState = function mapState(state, ownProps) {\n  var _getPaginatedCollecti;\n\n  var id = ownProps.id || getCollectionId(state);\n  var collection = id ? getCollection(state, id) : null;\n  var items = collection ? getCollectionItems(state, collection.id) : [];\n  var paginatedItems = collection ? getPaginatedCollectionItems(state, collection.id, ownProps.itemsPageSize || DEFAULT_PAGE_SIZE) : [];\n  var paginatedCollections = (_getPaginatedCollecti = getPaginatedCollections(state, ownProps.itemsPageSize || DEFAULT_PAGE_SIZE)) !== null && _getPaginatedCollecti !== void 0 ? _getPaginatedCollecti : [];\n  var itemCurations = collection ? getItemCurations(state, collection.id) : [];\n  var curation = id ? getCuration(state, id) : null;\n  return {\n    id: id,\n    collection: collection,\n    items: items,\n    paginatedItems: paginatedItems,\n    paginatedCollections: paginatedCollections,\n    itemCurations: itemCurations,\n    curation: curation,\n    isConnected: isConnected(state),\n    isLoading: isLoadingType(getLoading(state), FETCH_COLLECTION_REQUEST) || isLoadingType(getLoadingItemCurations(state), FETCH_ITEM_CURATIONS_REQUEST) || isLoadingType(getLoadingItems(state), FETCH_COLLECTION_ITEMS_REQUEST)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onFetchCollection: function onFetchCollection(id) {\n      return dispatch(fetchCollectionRequest(id));\n    },\n    onFetchCollectionItems: function onFetchCollectionItems(id, params) {\n      return dispatch(fetchCollectionItemsRequest(id, params));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(CollectionProvider);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/CollectionProvider/CollectionProvider.container.ts"],"names":["connect","isLoadingType","isConnected","DEFAULT_PAGE_SIZE","getCollectionId","getPaginatedCollectionItems","getLoading","getLoadingItems","getCollectionItems","fetchCollectionItemsRequest","FETCH_COLLECTION_ITEMS_REQUEST","getCollection","getPaginatedCollections","FETCH_COLLECTION_REQUEST","fetchCollectionRequest","getItemCurations","getLoadingItemCurations","CollectionProvider","getCuration","FETCH_ITEM_CURATIONS_REQUEST","mapState","state","ownProps","id","collection","items","paginatedItems","itemsPageSize","paginatedCollections","itemCurations","curation","isLoading","mapDispatch","dispatch","onFetchCollection","onFetchCollectionItems","params"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { isConnected } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { DEFAULT_PAGE_SIZE } from 'lib/api/pagination'\nimport { RootState } from 'modules/common/types'\nimport { getCollectionId } from 'modules/location/selectors'\nimport { getPaginatedCollectionItems, getLoading as getLoadingItems, getCollectionItems } from 'modules/item/selectors'\nimport { fetchCollectionItemsRequest, FETCH_COLLECTION_ITEMS_REQUEST } from 'modules/item/actions'\nimport { getLoading, getCollection, getPaginatedCollections } from 'modules/collection/selectors'\nimport { FETCH_COLLECTION_REQUEST, fetchCollectionRequest } from 'modules/collection/actions'\nimport { getItemCurations, getLoading as getLoadingItemCurations } from 'modules/curations/itemCuration/selectors'\nimport { MapStateProps, MapDispatchProps, MapDispatch, OwnProps } from './CollectionProvider.types'\nimport CollectionProvider from './CollectionProvider'\nimport { getCuration } from 'modules/curations/collectionCuration/selectors'\nimport { FETCH_ITEM_CURATIONS_REQUEST } from 'modules/curations/itemCuration/actions'\n\nconst mapState = (state: RootState, ownProps: OwnProps): MapStateProps => {\n  const id = ownProps.id || getCollectionId(state)\n  const collection = id ? getCollection(state, id) : null\n  const items = collection ? getCollectionItems(state, collection.id) : []\n  const paginatedItems = collection ? getPaginatedCollectionItems(state, collection.id, ownProps.itemsPageSize || DEFAULT_PAGE_SIZE) : []\n  const paginatedCollections = getPaginatedCollections(state, ownProps.itemsPageSize || DEFAULT_PAGE_SIZE) ?? []\n  const itemCurations = collection ? getItemCurations(state, collection.id) : []\n  const curation = id ? getCuration(state, id) : null\n  return {\n    id,\n    collection,\n    items,\n    paginatedItems,\n    paginatedCollections,\n    itemCurations,\n    curation,\n    isConnected: isConnected(state),\n    isLoading:\n      isLoadingType(getLoading(state), FETCH_COLLECTION_REQUEST) ||\n      isLoadingType(getLoadingItemCurations(state), FETCH_ITEM_CURATIONS_REQUEST) ||\n      isLoadingType(getLoadingItems(state), FETCH_COLLECTION_ITEMS_REQUEST)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onFetchCollection: id => dispatch(fetchCollectionRequest(id)),\n  onFetchCollectionItems: (id, params) => dispatch(fetchCollectionItemsRequest(id, params))\n})\n\nexport default connect(mapState, mapDispatch)(CollectionProvider)\n"]},"metadata":{},"sourceType":"module"}