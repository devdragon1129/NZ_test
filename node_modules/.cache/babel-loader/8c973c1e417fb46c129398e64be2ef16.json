{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize } from \"../../Misc/decorators\";\nimport { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { BaseCameraPointersInput } from \"../../Cameras/Inputs/BaseCameraPointersInput\";\n/**\r\n * Manage the pointers inputs to control an follow camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar FollowCameraPointersInput =\n/** @class */\nfunction (_super) {\n  __extends(FollowCameraPointersInput, _super);\n\n  function FollowCameraPointersInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\r\n     * Defines the pointer angular sensibility along the X axis or how fast is\r\n     * the camera rotating.\r\n     * A negative number will reverse the axis direction.\r\n     */\n\n\n    _this.angularSensibilityX = 1;\n    /**\r\n     * Defines the pointer angular sensibility along the Y axis or how fast is\r\n     * the camera rotating.\r\n     * A negative number will reverse the axis direction.\r\n     */\n\n    _this.angularSensibilityY = 1;\n    /**\r\n     * Defines the pointer pinch precision or how fast is the camera zooming.\r\n     * A negative number will reverse the axis direction.\r\n     */\n\n    _this.pinchPrecision = 10000.0;\n    /**\r\n     * pinchDeltaPercentage will be used instead of pinchPrecision if different\r\n     * from 0.\r\n     * It defines the percentage of current camera.radius to use as delta when\r\n     * pinch zoom is used.\r\n     */\n\n    _this.pinchDeltaPercentage = 0;\n    /**\r\n     * Pointer X axis controls zoom. (X axis modifies camera.radius value.)\r\n     */\n\n    _this.axisXControlRadius = false;\n    /**\r\n     * Pointer X axis controls height. (X axis modifies camera.heightOffset value.)\r\n     */\n\n    _this.axisXControlHeight = false;\n    /**\r\n     * Pointer X axis controls angle. (X axis modifies camera.rotationOffset value.)\r\n     */\n\n    _this.axisXControlRotation = true;\n    /**\r\n     * Pointer Y axis controls zoom. (Y axis modifies camera.radius value.)\r\n     */\n\n    _this.axisYControlRadius = false;\n    /**\r\n     * Pointer Y axis controls height. (Y axis modifies camera.heightOffset value.)\r\n     */\n\n    _this.axisYControlHeight = true;\n    /**\r\n     * Pointer Y axis controls angle. (Y axis modifies camera.rotationOffset value.)\r\n     */\n\n    _this.axisYControlRotation = false;\n    /**\r\n     * Pinch controls zoom. (Pinch modifies camera.radius value.)\r\n     */\n\n    _this.axisPinchControlRadius = true;\n    /**\r\n     * Pinch controls height. (Pinch modifies camera.heightOffset value.)\r\n     */\n\n    _this.axisPinchControlHeight = false;\n    /**\r\n     * Pinch controls angle. (Pinch modifies camera.rotationOffset value.)\r\n     */\n\n    _this.axisPinchControlRotation = false;\n    /**\r\n     * Log error messages if basic misconfiguration has occurred.\r\n     */\n\n    _this.warningEnable = true;\n    /* Check for obvious misconfiguration. */\n\n    _this._warningCounter = 0;\n    return _this;\n  }\n  /**\r\n   * Gets the class name of the current input.\r\n   * @returns the class name\r\n   */\n\n\n  FollowCameraPointersInput.prototype.getClassName = function () {\n    return \"FollowCameraPointersInput\";\n  };\n\n  FollowCameraPointersInput.prototype.onTouch = function (pointA, offsetX, offsetY) {\n    this._warning();\n\n    if (this.axisXControlRotation) {\n      this.camera.rotationOffset += offsetX / this.angularSensibilityX;\n    } else if (this.axisYControlRotation) {\n      this.camera.rotationOffset += offsetY / this.angularSensibilityX;\n    }\n\n    if (this.axisXControlHeight) {\n      this.camera.heightOffset += offsetX / this.angularSensibilityY;\n    } else if (this.axisYControlHeight) {\n      this.camera.heightOffset += offsetY / this.angularSensibilityY;\n    }\n\n    if (this.axisXControlRadius) {\n      this.camera.radius -= offsetX / this.angularSensibilityY;\n    } else if (this.axisYControlRadius) {\n      this.camera.radius -= offsetY / this.angularSensibilityY;\n    }\n  };\n\n  FollowCameraPointersInput.prototype.onMultiTouch = function (pointA, pointB, previousPinchSquaredDistance, pinchSquaredDistance, previousMultiTouchPanPosition, multiTouchPanPosition) {\n    if (previousPinchSquaredDistance === 0 && previousMultiTouchPanPosition === null) {\n      // First time this method is called for new pinch.\n      // Next time this is called there will be a\n      // previousPinchSquaredDistance and pinchSquaredDistance to compare.\n      return;\n    }\n\n    if (pinchSquaredDistance === 0 && multiTouchPanPosition === null) {\n      // Last time this method is called at the end of a pinch.\n      return;\n    }\n\n    var pinchDelta = (pinchSquaredDistance - previousPinchSquaredDistance) / (this.pinchPrecision * (this.angularSensibilityX + this.angularSensibilityY) / 2);\n\n    if (this.pinchDeltaPercentage) {\n      pinchDelta *= 0.01 * this.pinchDeltaPercentage;\n\n      if (this.axisPinchControlRotation) {\n        this.camera.rotationOffset += pinchDelta * this.camera.rotationOffset;\n      }\n\n      if (this.axisPinchControlHeight) {\n        this.camera.heightOffset += pinchDelta * this.camera.heightOffset;\n      }\n\n      if (this.axisPinchControlRadius) {\n        this.camera.radius -= pinchDelta * this.camera.radius;\n      }\n    } else {\n      if (this.axisPinchControlRotation) {\n        this.camera.rotationOffset += pinchDelta;\n      }\n\n      if (this.axisPinchControlHeight) {\n        this.camera.heightOffset += pinchDelta;\n      }\n\n      if (this.axisPinchControlRadius) {\n        this.camera.radius -= pinchDelta;\n      }\n    }\n  };\n\n  FollowCameraPointersInput.prototype._warning = function () {\n    if (!this.warningEnable || this._warningCounter++ % 100 !== 0) {\n      return;\n    }\n\n    var warn = \"It probably only makes sense to control ONE camera \" + \"property with each pointer axis. Set 'warningEnable = false' \" + \"if you are sure. Currently enabled: \";\n    console.assert(this.axisXControlRotation + this.axisXControlHeight + this.axisXControlRadius <= 1, warn + \"axisXControlRotation: \" + this.axisXControlRotation + \", axisXControlHeight: \" + this.axisXControlHeight + \", axisXControlRadius: \" + this.axisXControlRadius);\n    console.assert(this.axisYControlRotation + this.axisYControlHeight + this.axisYControlRadius <= 1, warn + \"axisYControlRotation: \" + this.axisYControlRotation + \", axisYControlHeight: \" + this.axisYControlHeight + \", axisYControlRadius: \" + this.axisYControlRadius);\n    console.assert(this.axisPinchControlRotation + this.axisPinchControlHeight + this.axisPinchControlRadius <= 1, warn + \"axisPinchControlRotation: \" + this.axisPinchControlRotation + \", axisPinchControlHeight: \" + this.axisPinchControlHeight + \", axisPinchControlRadius: \" + this.axisPinchControlRadius);\n  };\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"angularSensibilityX\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"angularSensibilityY\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"pinchPrecision\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"pinchDeltaPercentage\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisXControlRadius\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisXControlHeight\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisXControlRotation\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisYControlRadius\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisYControlHeight\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisYControlRotation\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisPinchControlRadius\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisPinchControlHeight\", void 0);\n\n  __decorate([serialize()], FollowCameraPointersInput.prototype, \"axisPinchControlRotation\", void 0);\n\n  return FollowCameraPointersInput;\n}(BaseCameraPointersInput);\n\nexport { FollowCameraPointersInput };\nCameraInputTypes[\"FollowCameraPointersInput\"] = FollowCameraPointersInput;","map":null,"metadata":{},"sourceType":"module"}