{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _assertThisInitialized = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _wrapNativeSuper = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(transactionSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchTransactionRequest),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleReplaceTransactionRequest),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(handleWatchPendingTransactions),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(handleWatchDroppedTransactions),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(handleWatchRevertedTransaction),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(handleConnectWalletSuccess);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FailedTransactionError = exports.transactionSaga = void 0;\n\nvar eth_1 = require(\"web3x/eth\");\n\nvar effects_1 = require(\"redux-saga/effects\");\n\nvar types_1 = require(\"./types\");\n\nvar actions_1 = require(\"./actions\");\n\nvar actions_2 = require(\"../wallet/actions\");\n\nvar selectors_1 = require(\"./selectors\");\n\nvar utils_1 = require(\"./utils\");\n\nvar txUtils_1 = require(\"./txUtils\");\n\nvar selectors_2 = require(\"../wallet/selectors\");\n\nvar eth_2 = require(\"../../lib/eth\");\n\nfunction transactionSaga() {\n  return _regeneratorRuntime.wrap(function transactionSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return effects_1.takeEvery(actions_1.FETCH_TRANSACTION_REQUEST, handleFetchTransactionRequest);\n\n        case 2:\n          _context.next = 4;\n          return effects_1.takeEvery(actions_1.REPLACE_TRANSACTION_REQUEST, handleReplaceTransactionRequest);\n\n        case 4:\n          _context.next = 6;\n          return effects_1.takeEvery(actions_1.WATCH_PENDING_TRANSACTIONS, handleWatchPendingTransactions);\n\n        case 6:\n          _context.next = 8;\n          return effects_1.takeEvery(actions_1.WATCH_DROPPED_TRANSACTIONS, handleWatchDroppedTransactions);\n\n        case 8:\n          _context.next = 10;\n          return effects_1.takeEvery(actions_1.WATCH_REVERTED_TRANSACTION, handleWatchRevertedTransaction);\n\n        case 10:\n          _context.next = 12;\n          return effects_1.takeEvery(actions_2.CONNECT_WALLET_SUCCESS, handleConnectWalletSuccess);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nexports.transactionSaga = transactionSaga;\nvar BLOCKS_DEPTH = 100;\nvar PENDING_TRANSACTION_THRESHOLD = 72 * 60 * 60 * 1000; // 72 hours\n\nvar REVERTED_TRANSACTION_THRESHOLD = 24 * 60 * 60 * 1000; // 24 hours\n\nvar TRANSACTION_FETCH_DELAY = 2 * 1000; // 2 seconds\n\nvar isExpired = function isExpired(transaction, threshold) {\n  return Date.now() - transaction.timestamp > threshold;\n};\n\nvar watchPendingIndex = {// hash: true\n};\nvar watchDroppedIndex = {// hash: true\n};\n\nvar FailedTransactionError = /*#__PURE__*/function (_Error) {\n  _inherits(FailedTransactionError, _Error);\n\n  function FailedTransactionError(hash, status) {\n    var _this;\n\n    _classCallCheck(this, FailedTransactionError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FailedTransactionError).call(this, \"[\".concat(hash, \"] \").concat(status))); // 'Error' breaks prototype chain here\n\n    _this.hash = hash;\n    _this.status = status;\n    Object.setPrototypeOf(_assertThisInitialized(_assertThisInitialized(_this)), (this instanceof FailedTransactionError ? this.constructor : void 0).prototype); // restore prototype chain\n\n    return _this;\n  }\n\n  return FailedTransactionError;\n}(_wrapNativeSuper(Error));\n\nexports.FailedTransactionError = FailedTransactionError;\n\nfunction handleFetchTransactionRequest(action) {\n  var hash, transaction;\n  return _regeneratorRuntime.wrap(function handleFetchTransactionRequest$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          hash = action.payload.hash;\n          _context3.next = 3;\n          return effects_1.select(function (state) {\n            return selectors_1.getTransaction(state, hash);\n          });\n\n        case 3:\n          transaction = _context3.sent;\n\n          if (transaction) {\n            _context3.next = 7;\n            break;\n          }\n\n          console.warn(\"Could not find a valid transaction for hash \".concat(hash));\n          return _context3.abrupt(\"return\");\n\n        case 7:\n          _context3.prev = 7;\n          return _context3.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var address, tx, isUnknown, txInState, nonceInState, nonceInNetwork, statusInState, statusInNetwork, nonce, isDropped, isReplaced;\n            return _regeneratorRuntime.wrap(function _callee$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return effects_1.select(function (state) {\n                      return selectors_2.getAddress(state);\n                    });\n\n                  case 2:\n                    address = _context2.sent;\n                    watchPendingIndex[hash] = true;\n                    _context2.next = 6;\n                    return effects_1.call(function () {\n                      return txUtils_1.getTransaction(address, transaction.chainId, hash);\n                    });\n\n                  case 6:\n                    tx = _context2.sent;\n                    isUnknown = tx == null; // loop while tx is pending\n\n                  case 8:\n                    if (!(isUnknown || utils_1.isPending(tx.status) || tx.status === types_1.TransactionStatus.REPLACED // let replaced transactions be kept in the loop so it can be picked up as dropped\n                    )) {\n                      _context2.next = 37;\n                      break;\n                    }\n\n                    _context2.next = 11;\n                    return effects_1.select(function (state) {\n                      return selectors_1.getTransaction(state, hash);\n                    });\n\n                  case 11:\n                    txInState = _context2.sent;\n                    // update nonce\n                    nonceInState = txInState == null ? null : txInState.nonce;\n                    nonceInNetwork = isUnknown ? null : tx.nonce;\n\n                    if (!(nonceInNetwork != null && nonceInState == null)) {\n                      _context2.next = 17;\n                      break;\n                    }\n\n                    _context2.next = 17;\n                    return effects_1.put(actions_1.updateTransactionNonce(hash, nonceInNetwork));\n\n                  case 17:\n                    // update status\n                    statusInState = txInState == null ? null : txInState.status;\n                    statusInNetwork = isUnknown ? null : tx.status;\n                    nonce = nonceInState || nonceInNetwork;\n\n                    if (!(statusInState !== statusInNetwork && nonce != null)) {\n                      _context2.next = 29;\n                      break;\n                    }\n\n                    // check if dropped or replaced\n                    isDropped = statusInState != null && statusInNetwork == null;\n                    isReplaced = statusInNetwork === types_1.TransactionStatus.REPLACED;\n\n                    if (!(isDropped || isReplaced)) {\n                      _context2.next = 27;\n                      break;\n                    }\n\n                    _context2.next = 26;\n                    return effects_1.put(actions_1.replaceTransactionRequest(hash, nonce));\n\n                  case 26:\n                    throw new FailedTransactionError(hash, types_1.TransactionStatus.DROPPED);\n\n                  case 27:\n                    _context2.next = 29;\n                    return effects_1.put(actions_1.updateTransactionStatus(hash, statusInNetwork));\n\n                  case 29:\n                    _context2.next = 31;\n                    return effects_1.delay(TRANSACTION_FETCH_DELAY);\n\n                  case 31:\n                    _context2.next = 33;\n                    return effects_1.call(function () {\n                      return txUtils_1.getTransaction(address, transaction.chainId, hash);\n                    });\n\n                  case 33:\n                    tx = _context2.sent;\n                    isUnknown = tx == null;\n                    _context2.next = 8;\n                    break;\n\n                  case 37:\n                    delete watchPendingIndex[hash];\n\n                    if (!(tx.status === types_1.TransactionStatus.CONFIRMED)) {\n                      _context2.next = 43;\n                      break;\n                    }\n\n                    _context2.next = 41;\n                    return effects_1.put(actions_1.fetchTransactionSuccess(Object.assign(Object.assign({}, transaction), {\n                      status: tx.status,\n                      receipt: {\n                        logs: transaction.withReceipt ? tx.receipt.logs : []\n                      }\n                    })));\n\n                  case 41:\n                    _context2.next = 47;\n                    break;\n\n                  case 43:\n                    if (!(tx.status === types_1.TransactionStatus.REVERTED)) {\n                      _context2.next = 46;\n                      break;\n                    }\n\n                    _context2.next = 46;\n                    return effects_1.put(actions_1.watchRevertedTransaction(tx.hash));\n\n                  case 46:\n                    throw new FailedTransactionError(tx.hash, tx.status);\n\n                  case 47:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee);\n          })(), \"t0\", 9);\n\n        case 9:\n          _context3.next = 15;\n          break;\n\n        case 11:\n          _context3.prev = 11;\n          _context3.t1 = _context3[\"catch\"](7);\n          _context3.next = 15;\n          return effects_1.put(actions_1.fetchTransactionFailure(_context3.t1.hash, _context3.t1.status, _context3.t1.message, transaction));\n\n        case 15:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2, null, [[7, 11]]);\n}\n\nfunction handleReplaceTransactionRequest(action) {\n  var _action$payload, hash, nonce, transaction, provider, eth, accounts, account, checkpoint, tx, txInState, blockNumber, highestNonce, replacedBy, startBlock, endBlock, _loop, i, _ret, _txInState;\n\n  return _regeneratorRuntime.wrap(function handleReplaceTransactionRequest$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _action$payload = action.payload, hash = _action$payload.hash, nonce = _action$payload.nonce;\n          _context5.next = 3;\n          return effects_1.select(function (state) {\n            return selectors_1.getTransaction(state, hash);\n          });\n\n        case 3:\n          transaction = _context5.sent;\n\n          if (transaction) {\n            _context5.next = 7;\n            break;\n          }\n\n          console.warn(\"Could not find a valid transaction for hash \".concat(hash));\n          return _context5.abrupt(\"return\");\n\n        case 7:\n          _context5.next = 9;\n          return effects_1.call(function () {\n            return eth_2.getConnectedProvider();\n          });\n\n        case 9:\n          provider = _context5.sent;\n\n          if (provider) {\n            _context5.next = 13;\n            break;\n          }\n\n          console.warn('Could not connect to ethereum');\n          return _context5.abrupt(\"return\");\n\n        case 13:\n          eth = new eth_1.Eth(provider);\n          _context5.next = 16;\n          return effects_1.call(function () {\n            return eth.getAccounts();\n          });\n\n        case 16:\n          accounts = _context5.sent;\n\n          if (!(accounts.length === 0)) {\n            _context5.next = 20;\n            break;\n          }\n\n          console.warn('Could not get accounts');\n          return _context5.abrupt(\"return\");\n\n        case 20:\n          account = accounts[0].toString();\n          checkpoint = null;\n          watchDroppedIndex[hash] = true;\n\n        case 23:\n          if (!true) {\n            _context5.next = 72;\n            break;\n          }\n\n          _context5.next = 26;\n          return effects_1.call(function () {\n            return txUtils_1.getTransaction(account, transaction.chainId, hash);\n          });\n\n        case 26:\n          tx = _context5.sent;\n\n          if (!(tx != null)) {\n            _context5.next = 34;\n            break;\n          }\n\n          _context5.next = 30;\n          return effects_1.select(function (state) {\n            return selectors_1.getTransaction(state, hash);\n          });\n\n        case 30:\n          txInState = _context5.sent;\n          _context5.next = 33;\n          return effects_1.put(actions_1.fetchTransactionRequest(account, hash, utils_1.buildActionRef(txInState)));\n\n        case 33:\n          return _context5.abrupt(\"break\", 72);\n\n        case 34:\n          _context5.next = 36;\n          return effects_1.call(function () {\n            return eth.getBlockNumber();\n          });\n\n        case 36:\n          blockNumber = _context5.sent;\n          highestNonce = 0;\n          replacedBy = null; // loop through the last blocks\n\n          startBlock = blockNumber;\n          endBlock = checkpoint || blockNumber - BLOCKS_DEPTH;\n          _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop(i) {\n            var block, transactions;\n            return _regeneratorRuntime.wrap(function _loop$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return effects_1.call(function () {\n                      return eth.getBlock(i, true);\n                    });\n\n                  case 2:\n                    block = _context4.sent;\n                    transactions = block != null && block.transactions != null ? block.transactions : []; // look for a replacement tx, if so break the loop\n\n                    replacedBy = transactions.find(function (tx) {\n                      return tx.nonce === nonce && tx.from.toString() === account;\n                    });\n\n                    if (!replacedBy) {\n                      _context4.next = 7;\n                      break;\n                    }\n\n                    return _context4.abrupt(\"return\", \"break\");\n\n                  case 7:\n                    // if no replacement is found, keep track of the highest nonce for the account\n                    highestNonce = transactions.filter(function (tx) {\n                      return tx.from.toString() === account;\n                    }).reduce(function (max, tx) {\n                      return Math.max(max, tx.nonce);\n                    }, highestNonce);\n\n                  case 8:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _loop);\n          });\n          i = startBlock;\n\n        case 43:\n          if (!(i > endBlock)) {\n            _context5.next = 51;\n            break;\n          }\n\n          return _context5.delegateYield(_loop(i), \"t0\", 45);\n\n        case 45:\n          _ret = _context5.t0;\n\n          if (!(_ret === \"break\")) {\n            _context5.next = 48;\n            break;\n          }\n\n          return _context5.abrupt(\"break\", 51);\n\n        case 48:\n          i--;\n          _context5.next = 43;\n          break;\n\n        case 51:\n          checkpoint = blockNumber; // if a replacement tx was found, replace it\n\n          if (!replacedBy) {\n            _context5.next = 64;\n            break;\n          }\n\n          if (!(hash === replacedBy.hash)) {\n            _context5.next = 61;\n            break;\n          }\n\n          _context5.next = 56;\n          return effects_1.select(function (state) {\n            return selectors_1.getTransaction(state, hash);\n          });\n\n        case 56:\n          _txInState = _context5.sent;\n          _context5.next = 59;\n          return effects_1.put(actions_1.fetchTransactionRequest(account, hash, utils_1.buildActionRef(_txInState)));\n\n        case 59:\n          _context5.next = 63;\n          break;\n\n        case 61:\n          _context5.next = 63;\n          return effects_1.put(actions_1.replaceTransactionSuccess(hash, replacedBy.hash));\n\n        case 63:\n          return _context5.abrupt(\"break\", 72);\n\n        case 64:\n          if (!(highestNonce >= nonce)) {\n            _context5.next = 68;\n            break;\n          }\n\n          _context5.next = 67;\n          return effects_1.put(actions_1.updateTransactionStatus(action.payload.hash, types_1.TransactionStatus.REPLACED));\n\n        case 67:\n          return _context5.abrupt(\"break\", 72);\n\n        case 68:\n          _context5.next = 70;\n          return effects_1.delay(TRANSACTION_FETCH_DELAY);\n\n        case 70:\n          _context5.next = 23;\n          break;\n\n        case 72:\n          delete watchDroppedIndex[action.payload.hash];\n\n        case 73:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction handleWatchPendingTransactions() {\n  var transactions, pendingTransactions, _iterator, _step, tx;\n\n  return _regeneratorRuntime.wrap(function handleWatchPendingTransactions$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return effects_1.select(selectors_1.getData);\n\n        case 2:\n          transactions = _context6.sent;\n          pendingTransactions = transactions.filter(function (transaction) {\n            return utils_1.isPending(transaction.status);\n          });\n          _iterator = _createForOfIteratorHelper(pendingTransactions);\n          _context6.prev = 5;\n\n          _iterator.s();\n\n        case 7:\n          if ((_step = _iterator.n()).done) {\n            _context6.next = 19;\n            break;\n          }\n\n          tx = _step.value;\n\n          if (watchPendingIndex[tx.hash]) {\n            _context6.next = 17;\n            break;\n          }\n\n          if (isExpired(tx, PENDING_TRANSACTION_THRESHOLD)) {\n            _context6.next = 15;\n            break;\n          }\n\n          _context6.next = 13;\n          return effects_1.fork(handleFetchTransactionRequest, actions_1.fetchTransactionRequest(tx.from, tx.hash, utils_1.buildActionRef(tx)));\n\n        case 13:\n          _context6.next = 17;\n          break;\n\n        case 15:\n          _context6.next = 17;\n          return effects_1.put(actions_1.updateTransactionStatus(tx.hash, types_1.TransactionStatus.DROPPED));\n\n        case 17:\n          _context6.next = 7;\n          break;\n\n        case 19:\n          _context6.next = 24;\n          break;\n\n        case 21:\n          _context6.prev = 21;\n          _context6.t0 = _context6[\"catch\"](5);\n\n          _iterator.e(_context6.t0);\n\n        case 24:\n          _context6.prev = 24;\n\n          _iterator.f();\n\n          return _context6.finish(24);\n\n        case 27:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked4, null, [[5, 21, 24, 27]]);\n}\n\nfunction handleWatchDroppedTransactions() {\n  var transactions, droppedTransactions, _iterator2, _step2, tx;\n\n  return _regeneratorRuntime.wrap(function handleWatchDroppedTransactions$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return effects_1.select(selectors_1.getData);\n\n        case 2:\n          transactions = _context7.sent;\n          droppedTransactions = transactions.filter(function (transaction) {\n            return transaction.status === types_1.TransactionStatus.DROPPED && transaction.nonce != null;\n          });\n          _iterator2 = _createForOfIteratorHelper(droppedTransactions);\n          _context7.prev = 5;\n\n          _iterator2.s();\n\n        case 7:\n          if ((_step2 = _iterator2.n()).done) {\n            _context7.next = 14;\n            break;\n          }\n\n          tx = _step2.value;\n\n          if (watchDroppedIndex[tx.hash]) {\n            _context7.next = 12;\n            break;\n          }\n\n          _context7.next = 12;\n          return effects_1.fork(handleReplaceTransactionRequest, actions_1.replaceTransactionRequest(tx.hash, tx.nonce));\n\n        case 12:\n          _context7.next = 7;\n          break;\n\n        case 14:\n          _context7.next = 19;\n          break;\n\n        case 16:\n          _context7.prev = 16;\n          _context7.t0 = _context7[\"catch\"](5);\n\n          _iterator2.e(_context7.t0);\n\n        case 19:\n          _context7.prev = 19;\n\n          _iterator2.f();\n\n          return _context7.finish(19);\n\n        case 22:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked5, null, [[5, 16, 19, 22]]);\n}\n\nfunction handleWatchRevertedTransaction(action) {\n  var hash, txInState, address, txInNetwork;\n  return _regeneratorRuntime.wrap(function handleWatchRevertedTransaction$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          hash = action.payload.hash;\n          _context8.next = 3;\n          return effects_1.select(function (state) {\n            return selectors_1.getTransaction(state, hash);\n          });\n\n        case 3:\n          txInState = _context8.sent;\n          _context8.next = 6;\n          return effects_1.select(function (state) {\n            return selectors_2.getAddress(state);\n          });\n\n        case 6:\n          address = _context8.sent;\n\n        case 7:\n          _context8.next = 9;\n          return effects_1.delay(TRANSACTION_FETCH_DELAY);\n\n        case 9:\n          _context8.next = 11;\n          return effects_1.call(function () {\n            return txUtils_1.getTransaction(address, txInState.chainId, hash);\n          });\n\n        case 11:\n          txInNetwork = _context8.sent;\n\n          if (!(txInNetwork != null && txInNetwork.status === types_1.TransactionStatus.CONFIRMED)) {\n            _context8.next = 18;\n            break;\n          }\n\n          _context8.next = 15;\n          return effects_1.put(actions_1.fixRevertedTransaction(hash));\n\n        case 15:\n          return _context8.abrupt(\"return\");\n\n        case 18:\n          if (!(txInNetwork == null && txInState.nonce)) {\n            _context8.next = 22;\n            break;\n          }\n\n          _context8.next = 21;\n          return effects_1.put(actions_1.replaceTransactionRequest(hash, txInState.nonce));\n\n        case 21:\n          return _context8.abrupt(\"return\");\n\n        case 22:\n          if (!isExpired(txInState, REVERTED_TRANSACTION_THRESHOLD)) {\n            _context8.next = 7;\n            break;\n          }\n\n        case 23:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction handleConnectWalletSuccess(_) {\n  var address, transactions, revertedTransactions, _iterator3, _step3, transaction;\n\n  return _regeneratorRuntime.wrap(function handleConnectWalletSuccess$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return effects_1.put(actions_1.watchPendingTransactions());\n\n        case 2:\n          _context9.next = 4;\n          return effects_1.put(actions_1.watchDroppedTransactions());\n\n        case 4:\n          _context9.next = 6;\n          return effects_1.select(function (state) {\n            return selectors_2.getAddress(state);\n          });\n\n        case 6:\n          address = _context9.sent;\n          _context9.next = 9;\n          return effects_1.select(function (state) {\n            return selectors_1.getTransactions(state, address);\n          });\n\n        case 9:\n          transactions = _context9.sent;\n          revertedTransactions = transactions.filter(function (transaction) {\n            return transaction.status === types_1.TransactionStatus.REVERTED && !isExpired(transaction, REVERTED_TRANSACTION_THRESHOLD);\n          });\n          _iterator3 = _createForOfIteratorHelper(revertedTransactions);\n          _context9.prev = 12;\n\n          _iterator3.s();\n\n        case 14:\n          if ((_step3 = _iterator3.n()).done) {\n            _context9.next = 20;\n            break;\n          }\n\n          transaction = _step3.value;\n          _context9.next = 18;\n          return effects_1.put(actions_1.watchRevertedTransaction(transaction.hash));\n\n        case 18:\n          _context9.next = 14;\n          break;\n\n        case 20:\n          _context9.next = 25;\n          break;\n\n        case 22:\n          _context9.prev = 22;\n          _context9.t0 = _context9[\"catch\"](12);\n\n          _iterator3.e(_context9.t0);\n\n        case 25:\n          _context9.prev = 25;\n\n          _iterator3.f();\n\n          return _context9.finish(25);\n\n        case 28:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked7, null, [[12, 22, 25, 28]]);\n}","map":null,"metadata":{},"sourceType":"script"}