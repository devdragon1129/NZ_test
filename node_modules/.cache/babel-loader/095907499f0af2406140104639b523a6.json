{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"util\");\n\nvar address_1 = require(\"../address\");\n\nvar utils_1 = require(\"../utils\");\n\nvar input_block_number_formatter_1 = require(\"./input-block-number-formatter\");\n\nfunction toRawLogRequest() {\n  var logRequest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var rawLogRequest = {};\n\n  if (logRequest.fromBlock !== undefined) {\n    rawLogRequest.fromBlock = input_block_number_formatter_1.inputBlockNumberFormatter(logRequest.fromBlock);\n  }\n\n  if (logRequest.toBlock !== undefined) {\n    rawLogRequest.toBlock = input_block_number_formatter_1.inputBlockNumberFormatter(logRequest.toBlock);\n  } // Convert topics to hex.\n\n\n  rawLogRequest.topics = (logRequest.topics || []).map(function (topic) {\n    var toTopic = function toTopic(value) {\n      if (value === null || typeof value === 'undefined') {\n        return null;\n      }\n\n      value = String(value);\n      return value.indexOf('0x') === 0 ? value : utils_1.utf8ToHex(value);\n    };\n\n    return util_1.isArray(topic) ? topic.map(toTopic) : toTopic(topic);\n  });\n\n  if (logRequest.address) {\n    rawLogRequest.address = util_1.isArray(logRequest.address) ? logRequest.address.map(function (a) {\n      return a.toString().toLowerCase();\n    }) : logRequest.address.toString().toLowerCase();\n  }\n\n  return rawLogRequest;\n}\n\nexports.toRawLogRequest = toRawLogRequest;\n\nfunction fromRawLogRequest(rawLogRequest) {\n  var toBlock = rawLogRequest.toBlock,\n      fromBlock = rawLogRequest.fromBlock,\n      address = rawLogRequest.address,\n      topics = rawLogRequest.topics;\n  return {\n    toBlock: toBlock ? utils_1.hexToNumber(toBlock) : undefined,\n    fromBlock: fromBlock ? utils_1.hexToNumber(fromBlock) : undefined,\n    address: address ? util_1.isArray(address) ? address.map(address_1.Address.fromString) : address_1.Address.fromString(address) : undefined,\n    topics: topics\n  };\n}\n\nexports.fromRawLogRequest = fromRawLogRequest;","map":null,"metadata":{},"sourceType":"script"}