{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../Misc/typeStore';\n/**\r\n * Operations supported by the Trigonometry block\r\n */\n\nexport var TrigonometryBlockOperations;\n\n(function (TrigonometryBlockOperations) {\n  /** Cos */\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Cos\"] = 0] = \"Cos\";\n  /** Sin */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Sin\"] = 1] = \"Sin\";\n  /** Abs */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Abs\"] = 2] = \"Abs\";\n  /** Exp */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Exp\"] = 3] = \"Exp\";\n  /** Exp2 */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Exp2\"] = 4] = \"Exp2\";\n  /** Round */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Round\"] = 5] = \"Round\";\n  /** Floor */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Floor\"] = 6] = \"Floor\";\n  /** Ceiling */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Ceiling\"] = 7] = \"Ceiling\";\n  /** Square root */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Sqrt\"] = 8] = \"Sqrt\";\n  /** Log */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Log\"] = 9] = \"Log\";\n  /** Tangent */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Tan\"] = 10] = \"Tan\";\n  /** Arc tangent */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"ArcTan\"] = 11] = \"ArcTan\";\n  /** Arc cosinus */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"ArcCos\"] = 12] = \"ArcCos\";\n  /** Arc sinus */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"ArcSin\"] = 13] = \"ArcSin\";\n  /** Fraction */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Fract\"] = 14] = \"Fract\";\n  /** Sign */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Sign\"] = 15] = \"Sign\";\n  /** To radians (from degrees) */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Radians\"] = 16] = \"Radians\";\n  /** To degrees (from radians) */\n\n  TrigonometryBlockOperations[TrigonometryBlockOperations[\"Degrees\"] = 17] = \"Degrees\";\n})(TrigonometryBlockOperations || (TrigonometryBlockOperations = {}));\n/**\r\n * Block used to apply trigonometry operation to floats\r\n */\n\n\nvar TrigonometryBlock =\n/** @class */\nfunction (_super) {\n  __extends(TrigonometryBlock, _super);\n  /**\r\n   * Creates a new TrigonometryBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function TrigonometryBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n    /**\r\n     * Gets or sets the operation applied by the block\r\n     */\n\n\n    _this.operation = TrigonometryBlockOperations.Cos;\n\n    _this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n\n    _this._outputs[0]._typeConnectionSource = _this._inputs[0];\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  TrigonometryBlock.prototype.getClassName = function () {\n    return \"TrigonometryBlock\";\n  };\n\n  Object.defineProperty(TrigonometryBlock.prototype, \"input\", {\n    /**\r\n     * Gets the input component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TrigonometryBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TrigonometryBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var output = this._outputs[0];\n    var operation = \"\";\n\n    switch (this.operation) {\n      case TrigonometryBlockOperations.Cos:\n        {\n          operation = \"cos\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Sin:\n        {\n          operation = \"sin\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Abs:\n        {\n          operation = \"abs\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Exp:\n        {\n          operation = \"exp\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Exp2:\n        {\n          operation = \"exp2\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Round:\n        {\n          operation = \"round\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Floor:\n        {\n          operation = \"floor\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Ceiling:\n        {\n          operation = \"ceil\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Sqrt:\n        {\n          operation = \"sqrt\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Log:\n        {\n          operation = \"log\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Tan:\n        {\n          operation = \"tan\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.ArcTan:\n        {\n          operation = \"atan\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.ArcCos:\n        {\n          operation = \"acos\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.ArcSin:\n        {\n          operation = \"asin\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Fract:\n        {\n          operation = \"fract\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Sign:\n        {\n          operation = \"sign\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Radians:\n        {\n          operation = \"radians\";\n          break;\n        }\n\n      case TrigonometryBlockOperations.Degrees:\n        {\n          operation = \"degrees\";\n          break;\n        }\n    }\n\n    state.compilationString += this._declareOutput(output, state) + (\" = \" + operation + \"(\" + this.input.associatedVariableName + \");\\r\\n\");\n    return this;\n  };\n\n  TrigonometryBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.operation = this.operation;\n    return serializationObject;\n  };\n\n  TrigonometryBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.operation = serializationObject.operation;\n  };\n\n  TrigonometryBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = this._codeVariableName + \".operation = BABYLON.TrigonometryBlockOperations.\" + TrigonometryBlockOperations[this.operation] + \";\\r\\n\";\n    return codeString;\n  };\n\n  return TrigonometryBlock;\n}(NodeMaterialBlock);\n\nexport { TrigonometryBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.TrigonometryBlock\"] = TrigonometryBlock;","map":null,"metadata":{},"sourceType":"module"}