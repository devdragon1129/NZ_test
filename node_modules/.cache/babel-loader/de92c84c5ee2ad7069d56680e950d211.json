{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../Misc/typeStore';\n/**\r\n * Block used to transform a vector (2, 3 or 4) with a matrix. It will generate a Vector4\r\n */\n\nvar TransformBlock =\n/** @class */\nfunction (_super) {\n  __extends(TransformBlock, _super);\n  /**\r\n   * Creates a new TransformBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function TransformBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Vertex) || this;\n    /**\r\n     * Defines the value to use to complement W value to transform it to a Vector4\r\n     */\n\n\n    _this.complementW = 1;\n    /**\r\n     * Defines the value to use to complement z value to transform it to a Vector4\r\n     */\n\n    _this.complementZ = 0;\n\n    _this.registerInput(\"vector\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n\n    _this.registerInput(\"transform\", NodeMaterialBlockConnectionPointTypes.Matrix);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this.registerOutput(\"xyz\", NodeMaterialBlockConnectionPointTypes.Vector3);\n\n    _this._inputs[0].onConnectionObservable.add(function (other) {\n      if (other.ownerBlock.isInput) {\n        var otherAsInput = other.ownerBlock;\n\n        if (otherAsInput.name === \"normal\" || otherAsInput.name === \"tangent\") {\n          _this.complementW = 0;\n        }\n      }\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  TransformBlock.prototype.getClassName = function () {\n    return \"TransformBlock\";\n  };\n\n  Object.defineProperty(TransformBlock.prototype, \"vector\", {\n    /**\r\n     * Gets the vector input\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TransformBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TransformBlock.prototype, \"xyz\", {\n    /**\r\n     * Gets the xyz output component\r\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TransformBlock.prototype, \"transform\", {\n    /**\r\n     * Gets the matrix transform input\r\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TransformBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var vector = this.vector;\n    var transform = this.transform;\n\n    if (vector.connectedPoint) {\n      // None uniform scaling case.\n      if (this.complementW === 0) {\n        var comments = \"//\" + this.name;\n\n        state._emitFunctionFromInclude(\"helperFunctions\", comments);\n\n        state.sharedData.blocksWithDefines.push(this);\n\n        var transformName = state._getFreeVariableName(transform.associatedVariableName + \"_NUS\");\n\n        state.compilationString += \"mat3 \" + transformName + \" = mat3(\" + transform.associatedVariableName + \");\\r\\n\";\n        state.compilationString += \"#ifdef NONUNIFORMSCALING\\r\\n\";\n        state.compilationString += transformName + \" = transposeMat3(inverseMat3(\" + transformName + \"));\\r\\n\";\n        state.compilationString += \"#endif\\r\\n\";\n\n        switch (vector.connectedPoint.type) {\n          case NodeMaterialBlockConnectionPointTypes.Vector2:\n            state.compilationString += this._declareOutput(this.output, state) + (\" = vec4(\" + transformName + \" * vec3(\" + vector.associatedVariableName + \", \" + this._writeFloat(this.complementZ) + \"), \" + this._writeFloat(this.complementW) + \");\\r\\n\");\n            break;\n\n          case NodeMaterialBlockConnectionPointTypes.Vector3:\n          case NodeMaterialBlockConnectionPointTypes.Color3:\n            state.compilationString += this._declareOutput(this.output, state) + (\" = vec4(\" + transformName + \" * \" + vector.associatedVariableName + \", \" + this._writeFloat(this.complementW) + \");\\r\\n\");\n            break;\n\n          default:\n            state.compilationString += this._declareOutput(this.output, state) + (\" = vec4(\" + transformName + \" * \" + vector.associatedVariableName + \".xyz, \" + this._writeFloat(this.complementW) + \");\\r\\n\");\n            break;\n        }\n      } else {\n        var transformName = transform.associatedVariableName;\n\n        switch (vector.connectedPoint.type) {\n          case NodeMaterialBlockConnectionPointTypes.Vector2:\n            state.compilationString += this._declareOutput(this.output, state) + (\" = \" + transformName + \" * vec4(\" + vector.associatedVariableName + \", \" + this._writeFloat(this.complementZ) + \", \" + this._writeFloat(this.complementW) + \");\\r\\n\");\n            break;\n\n          case NodeMaterialBlockConnectionPointTypes.Vector3:\n          case NodeMaterialBlockConnectionPointTypes.Color3:\n            state.compilationString += this._declareOutput(this.output, state) + (\" = \" + transformName + \" * vec4(\" + vector.associatedVariableName + \", \" + this._writeFloat(this.complementW) + \");\\r\\n\");\n            break;\n\n          default:\n            state.compilationString += this._declareOutput(this.output, state) + (\" = \" + transformName + \" * \" + vector.associatedVariableName + \";\\r\\n\");\n            break;\n        }\n      }\n\n      if (this.xyz.hasEndpoints) {\n        state.compilationString += this._declareOutput(this.xyz, state) + (\" = \" + this.output.associatedVariableName + \".xyz;\\r\\n\");\n      }\n    }\n\n    return this;\n  };\n  /**\r\n   * Update defines for shader compilation\r\n   * @param mesh defines the mesh to be rendered\r\n   * @param nodeMaterial defines the node material requesting the update\r\n   * @param defines defines the material defines to update\r\n   * @param useInstances specifies that instances should be used\r\n   * @param subMesh defines which submesh to render\r\n   */\n\n\n  TransformBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines, useInstances, subMesh) {\n    if (useInstances === void 0) {\n      useInstances = false;\n    } // Do nothing\n\n\n    if (mesh.nonUniformScaling) {\n      defines.setValue(\"NONUNIFORMSCALING\", true);\n    }\n  };\n\n  TransformBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.complementZ = this.complementZ;\n    serializationObject.complementW = this.complementW;\n    return serializationObject;\n  };\n\n  TransformBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.complementZ = serializationObject.complementZ !== undefined ? serializationObject.complementZ : 0.0;\n    this.complementW = serializationObject.complementW !== undefined ? serializationObject.complementW : 1.0;\n  };\n\n  TransformBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = this._codeVariableName + \".complementZ = \" + this.complementZ + \";\\r\\n\";\n    codeString += this._codeVariableName + \".complementW = \" + this.complementW + \";\\r\\n\";\n    return codeString;\n  };\n\n  return TransformBlock;\n}(NodeMaterialBlock);\n\nexport { TransformBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.TransformBlock\"] = TransformBlock;","map":null,"metadata":{},"sourceType":"module"}