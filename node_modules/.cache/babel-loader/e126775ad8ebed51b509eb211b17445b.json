{"ast":null,"code":"import { Color3 } from \"../Maths/math.color\";\nimport { Texture } from \"../Materials/Textures/texture\";\n/**\r\n * This represents one of the lens effect in a `lensFlareSystem`.\r\n * It controls one of the indiviual texture used in the effect.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n */\n\nvar LensFlare =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a new Lens Flare.\r\n   * This represents one of the lens effect in a `lensFlareSystem`.\r\n   * It controls one of the indiviual texture used in the effect.\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n   * @param size Define the size of the lens flare in the system (a floating value between 0 and 1)\r\n   * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n   * @param color Define the lens color\r\n   * @param imgUrl Define the lens texture url\r\n   * @param system Define the `lensFlareSystem` this flare is part of\r\n   */\n  function LensFlare(\n  /**\r\n   * Define the size of the lens flare in the system (a floating value between 0 and 1)\r\n   */\n  size,\n  /**\r\n   * Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n   */\n  position, color, imgUrl, system) {\n    this.size = size;\n    this.position = position;\n    /**\r\n     * Define the alpha mode to render this particular lens.\r\n     */\n\n    this.alphaMode = 6;\n    this.color = color || new Color3(1, 1, 1);\n    this.texture = imgUrl ? new Texture(imgUrl, system.getScene(), true) : null;\n    this._system = system;\n    system.lensFlares.push(this);\n  }\n  /**\r\n   * Creates a new Lens Flare.\r\n   * This represents one of the lens effect in a `lensFlareSystem`.\r\n   * It controls one of the indiviual texture used in the effect.\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_lens_flares\r\n   * @param size Define the size of the lens flare (a floating value between 0 and 1)\r\n   * @param position Define the position of the lens flare in the system. (a floating value between -1 and 1). A value of 0 is located on the emitter. A value greater than 0 is beyond the emitter and a value lesser than 0 is behind.\r\n   * @param color Define the lens color\r\n   * @param imgUrl Define the lens texture url\r\n   * @param system Define the `lensFlareSystem` this flare is part of\r\n   * @returns The newly created Lens Flare\r\n   */\n\n\n  LensFlare.AddFlare = function (size, position, color, imgUrl, system) {\n    return new LensFlare(size, position, color, imgUrl, system);\n  };\n  /**\r\n   * Dispose and release the lens flare with its associated resources.\r\n   */\n\n\n  LensFlare.prototype.dispose = function () {\n    if (this.texture) {\n      this.texture.dispose();\n    } // Remove from scene\n\n\n    var index = this._system.lensFlares.indexOf(this);\n\n    this._system.lensFlares.splice(index, 1);\n  };\n\n  return LensFlare;\n}();\n\nexport { LensFlare };","map":null,"metadata":{},"sourceType":"module"}