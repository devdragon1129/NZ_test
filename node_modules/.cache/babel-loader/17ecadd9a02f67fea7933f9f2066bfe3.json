{"ast":null,"code":"import { connect } from 'react-redux';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getData as getWallet } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { getCollection, getLoading as getCollectionLoading, getUnsyncedCollectionError, getError as getCollectionError } from 'modules/collection/selectors';\nimport { getLoading as getItemLoading, getCollectionItems, getError as getItemError } from 'modules/item/selectors';\nimport { publishCollectionRequest, PUBLISH_COLLECTION_REQUEST } from 'modules/collection/actions';\nimport { fetchRaritiesRequest, FETCH_RARITIES_REQUEST, FETCH_ITEMS_REQUEST } from 'modules/item/actions';\nimport { getRarities } from 'modules/item/selectors';\nimport PublishCollectionModal from './PublishCollectionModal';\n\nvar mapState = function mapState(state, ownProps) {\n  var collectionId = ownProps.metadata.collectionId;\n  return {\n    wallet: getWallet(state),\n    collection: getCollection(state, collectionId),\n    items: getCollectionItems(state, collectionId),\n    rarities: getRarities(state),\n    unsyncedCollectionError: getUnsyncedCollectionError(state),\n    isPublishLoading: isLoadingType(getCollectionLoading(state), PUBLISH_COLLECTION_REQUEST),\n    isFetchingItems: isLoadingType(getItemLoading(state), FETCH_ITEMS_REQUEST),\n    isFetchingRarities: isLoadingType(getItemLoading(state), FETCH_RARITIES_REQUEST),\n    itemError: getItemError(state),\n    collectionError: getCollectionError(state)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onPublish: function onPublish(collection, items, email) {\n      return dispatch(publishCollectionRequest(collection, items, email));\n    },\n    onFetchRarities: function onFetchRarities() {\n      return dispatch(fetchRaritiesRequest());\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(PublishCollectionModal);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/PublishCollectionModalWithOracle/PublishCollectionModal.container.ts"],"names":["connect","isLoadingType","getData","getWallet","getCollection","getLoading","getCollectionLoading","getUnsyncedCollectionError","getError","getCollectionError","getItemLoading","getCollectionItems","getItemError","publishCollectionRequest","PUBLISH_COLLECTION_REQUEST","fetchRaritiesRequest","FETCH_RARITIES_REQUEST","FETCH_ITEMS_REQUEST","getRarities","PublishCollectionModal","mapState","state","ownProps","collectionId","metadata","wallet","collection","items","rarities","unsyncedCollectionError","isPublishLoading","isFetchingItems","isFetchingRarities","itemError","collectionError","mapDispatch","dispatch","onPublish","email","onFetchRarities"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,OAAO,IAAIC,SAApB,QAAqC,kDAArC;AAEA,SACEC,aADF,EAEEC,UAAU,IAAIC,oBAFhB,EAGEC,0BAHF,EAIEC,QAAQ,IAAIC,kBAJd,QAKO,8BALP;AAMA,SAASJ,UAAU,IAAIK,cAAvB,EAAuCC,kBAAvC,EAA2DH,QAAQ,IAAII,YAAvE,QAA2F,wBAA3F;AACA,SAASC,wBAAT,EAAmCC,0BAAnC,QAAqE,4BAArE;AACA,SAASC,oBAAT,EAA+BC,sBAA/B,EAAuDC,mBAAvD,QAAkF,sBAAlF;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA,OAAOC,sBAAP,MAAmC,0BAAnC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAmBC,QAAnB,EAAyD;AAAA,MAChEC,YADgE,GAC/CD,QAAQ,CAACE,QADsC,CAChED,YADgE;AAGxE,SAAO;AACLE,IAAAA,MAAM,EAAEtB,SAAS,CAACkB,KAAD,CADZ;AAELK,IAAAA,UAAU,EAAEtB,aAAa,CAACiB,KAAD,EAAQE,YAAR,CAFpB;AAGLI,IAAAA,KAAK,EAAEhB,kBAAkB,CAACU,KAAD,EAAQE,YAAR,CAHpB;AAILK,IAAAA,QAAQ,EAAEV,WAAW,CAACG,KAAD,CAJhB;AAKLQ,IAAAA,uBAAuB,EAAEtB,0BAA0B,CAACc,KAAD,CAL9C;AAMLS,IAAAA,gBAAgB,EAAE7B,aAAa,CAACK,oBAAoB,CAACe,KAAD,CAArB,EAA8BP,0BAA9B,CAN1B;AAOLiB,IAAAA,eAAe,EAAE9B,aAAa,CAACS,cAAc,CAACW,KAAD,CAAf,EAAwBJ,mBAAxB,CAPzB;AAQLe,IAAAA,kBAAkB,EAAE/B,aAAa,CAACS,cAAc,CAACW,KAAD,CAAf,EAAwBL,sBAAxB,CAR5B;AASLiB,IAAAA,SAAS,EAAErB,YAAY,CAACS,KAAD,CATlB;AAULa,IAAAA,eAAe,EAAEzB,kBAAkB,CAACY,KAAD;AAV9B,GAAP;AAYD,CAfD;;AAiBA,IAAMc,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,SAAS,EAAE,mBAACX,UAAD,EAAaC,KAAb,EAAoBW,KAApB;AAAA,aAA8BF,QAAQ,CAACvB,wBAAwB,CAACa,UAAD,EAAaC,KAAb,EAAoBW,KAApB,CAAzB,CAAtC;AAAA,KADqD;AAEhEC,IAAAA,eAAe,EAAE;AAAA,aAAMH,QAAQ,CAACrB,oBAAoB,EAArB,CAAd;AAAA;AAF+C,GAA9C;AAAA,CAApB;;AAKA,eAAef,OAAO,CAACoB,QAAD,EAAWe,WAAX,CAAP,CAA+BhB,sBAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { getData as getWallet } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { RootState } from 'modules/common/types'\nimport {\n  getCollection,\n  getLoading as getCollectionLoading,\n  getUnsyncedCollectionError,\n  getError as getCollectionError\n} from 'modules/collection/selectors'\nimport { getLoading as getItemLoading, getCollectionItems, getError as getItemError } from 'modules/item/selectors'\nimport { publishCollectionRequest, PUBLISH_COLLECTION_REQUEST } from 'modules/collection/actions'\nimport { fetchRaritiesRequest, FETCH_RARITIES_REQUEST, FETCH_ITEMS_REQUEST } from 'modules/item/actions'\nimport { getRarities } from 'modules/item/selectors'\nimport { OwnProps, MapStateProps, MapDispatchProps, MapDispatch } from './PublishCollectionModal.types'\nimport PublishCollectionModal from './PublishCollectionModal'\n\nconst mapState = (state: RootState, ownProps: OwnProps): MapStateProps => {\n  const { collectionId } = ownProps.metadata\n\n  return {\n    wallet: getWallet(state),\n    collection: getCollection(state, collectionId),\n    items: getCollectionItems(state, collectionId),\n    rarities: getRarities(state),\n    unsyncedCollectionError: getUnsyncedCollectionError(state),\n    isPublishLoading: isLoadingType(getCollectionLoading(state), PUBLISH_COLLECTION_REQUEST),\n    isFetchingItems: isLoadingType(getItemLoading(state), FETCH_ITEMS_REQUEST),\n    isFetchingRarities: isLoadingType(getItemLoading(state), FETCH_RARITIES_REQUEST),\n    itemError: getItemError(state),\n    collectionError: getCollectionError(state)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onPublish: (collection, items, email) => dispatch(publishCollectionRequest(collection, items, email)),\n  onFetchRarities: () => dispatch(fetchRaritiesRequest())\n})\n\nexport default connect(mapState, mapDispatch)(PublishCollectionModal)\n"]},"metadata":{},"sourceType":"module"}