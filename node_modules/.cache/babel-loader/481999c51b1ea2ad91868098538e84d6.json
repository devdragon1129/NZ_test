{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(waitForTx);\n\nimport { race, take } from 'redux-saga/effects';\nimport { FETCH_TRANSACTION_SUCCESS, FETCH_TRANSACTION_FAILURE } from 'decentraland-dapps/dist/modules/transaction/actions'; // TODO: Move to a lib like decentraland-dapps\n// Function that blocks the execution and waits until a tx is mined or it fails\n\nexport function waitForTx(txHash) {\n  var _yield$race, success, failure;\n\n  return _regeneratorRuntime.wrap(function waitForTx$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!true) {\n            _context.next = 14;\n            break;\n          }\n\n          _context.next = 3;\n          return race({\n            success: take(FETCH_TRANSACTION_SUCCESS),\n            failure: take(FETCH_TRANSACTION_FAILURE)\n          });\n\n        case 3:\n          _yield$race = _context.sent;\n          success = _yield$race.success;\n          failure = _yield$race.failure;\n\n          if (!((success === null || success === void 0 ? void 0 : success.payload.transaction.hash) === txHash)) {\n            _context.next = 10;\n            break;\n          }\n\n          return _context.abrupt(\"break\", 14);\n\n        case 10:\n          if (!((failure === null || failure === void 0 ? void 0 : failure.payload.transaction.hash) === txHash)) {\n            _context.next = 12;\n            break;\n          }\n\n          throw new Error(\"The transaction \".concat(txHash, \" failed to be mined.\"));\n\n        case 12:\n          _context.next = 0;\n          break;\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/transaction/utils.ts"],"names":["waitForTx","race","take","FETCH_TRANSACTION_SUCCESS","FETCH_TRANSACTION_FAILURE","txHash","success","failure","payload","transaction","hash","Error"],"mappings":";;oDAUiBA,S;;AAVjB,SAASC,IAAT,EAAeC,IAAf,QAA2B,oBAA3B;AACA,SAGEC,yBAHF,EAIEC,yBAJF,QAKO,qDALP,C,CAOA;AACA;;AACA,OAAO,SAAUJ,SAAV,CAAoBK,MAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eACE,IADF;AAAA;AAAA;AAAA;;AAAA;AAK6G,iBAAMJ,IAAI,CAAC;AACzHK,YAAAA,OAAO,EAAEJ,IAAI,CAACC,yBAAD,CAD4G;AAEzHI,YAAAA,OAAO,EAAEL,IAAI,CAACE,yBAAD;AAF4G,WAAD,CAAV;;AAL7G;AAAA;AAGDE,UAAAA,OAHC,eAGDA,OAHC;AAIDC,UAAAA,OAJC,eAIDA,OAJC;;AAAA,gBAUC,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEE,OAAT,CAAiBC,WAAjB,CAA6BC,IAA7B,MAAsCL,MAVvC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,gBAYQ,CAAAE,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,OAAT,CAAiBC,WAAjB,CAA6BC,IAA7B,MAAsCL,MAZ9C;AAAA;AAAA;AAAA;;AAAA,gBAaK,IAAIM,KAAJ,2BAA6BN,MAA7B,0BAbL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { race, take } from 'redux-saga/effects'\nimport {\n  FetchTransactionSuccessAction,\n  FetchTransactionFailureAction,\n  FETCH_TRANSACTION_SUCCESS,\n  FETCH_TRANSACTION_FAILURE\n} from 'decentraland-dapps/dist/modules/transaction/actions'\n\n// TODO: Move to a lib like decentraland-dapps\n// Function that blocks the execution and waits until a tx is mined or it fails\nexport function* waitForTx(txHash: string) {\n  while (true) {\n    const {\n      success,\n      failure\n    }: { success: FetchTransactionSuccessAction | undefined; failure: FetchTransactionFailureAction | undefined } = yield race({\n      success: take(FETCH_TRANSACTION_SUCCESS),\n      failure: take(FETCH_TRANSACTION_FAILURE)\n    })\n\n    if (success?.payload.transaction.hash === txHash) {\n      break\n    } else if (failure?.payload.transaction.hash === txHash) {\n      throw new Error(`The transaction ${txHash} failed to be mined.`)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}