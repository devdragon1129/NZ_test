{"ast":null,"code":"import { Vector3 } from \"../Maths/math.vector\";\nimport { _DevTools } from '../Misc/devTools';\nimport { _TypeStore } from '../Misc/typeStore';\n/**\r\n     * Type of sub emitter\r\n     */\n\nexport var SubEmitterType;\n\n(function (SubEmitterType) {\n  /**\r\n   * Attached to the particle over it's lifetime\r\n   */\n  SubEmitterType[SubEmitterType[\"ATTACHED\"] = 0] = \"ATTACHED\";\n  /**\r\n   * Created when the particle dies\r\n   */\n\n  SubEmitterType[SubEmitterType[\"END\"] = 1] = \"END\";\n})(SubEmitterType || (SubEmitterType = {}));\n/**\r\n * Sub emitter class used to emit particles from an existing particle\r\n */\n\n\nvar SubEmitter =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a sub emitter\r\n   * @param particleSystem the particle system to be used by the sub emitter\r\n   */\n  function SubEmitter(\n  /**\r\n   * the particle system to be used by the sub emitter\r\n   */\n  particleSystem) {\n    this.particleSystem = particleSystem;\n    /**\r\n     * Type of the submitter (Default: END)\r\n     */\n\n    this.type = SubEmitterType.END;\n    /**\r\n     * If the particle should inherit the direction from the particle it's attached to. (+Y will face the direction the particle is moving) (Default: false)\r\n     * Note: This only is supported when using an emitter of type Mesh\r\n     */\n\n    this.inheritDirection = false;\n    /**\r\n     * How much of the attached particles speed should be added to the sub emitted particle (default: 0)\r\n     */\n\n    this.inheritedVelocityAmount = 0; // Create mesh as emitter to support rotation\n\n    if (!particleSystem.emitter || !particleSystem.emitter.dispose) {\n      var internalClass = _TypeStore.GetClass(\"BABYLON.AbstractMesh\");\n\n      particleSystem.emitter = new internalClass(\"SubemitterSystemEmitter\", particleSystem.getScene());\n    } // Automatically dispose of subemitter when system is disposed\n\n\n    particleSystem.onDisposeObservable.add(function () {\n      if (particleSystem.emitter && particleSystem.emitter.dispose) {\n        particleSystem.emitter.dispose();\n      }\n    });\n  }\n  /**\r\n   * Clones the sub emitter\r\n   * @returns the cloned sub emitter\r\n   */\n\n\n  SubEmitter.prototype.clone = function () {\n    // Clone particle system\n    var emitter = this.particleSystem.emitter;\n\n    if (!emitter) {\n      emitter = new Vector3();\n    } else if (emitter instanceof Vector3) {\n      emitter = emitter.clone();\n    } else if (emitter.getClassName().indexOf(\"Mesh\") !== -1) {\n      var internalClass = _TypeStore.GetClass(\"BABYLON.Mesh\");\n\n      emitter = new internalClass(\"\", emitter.getScene());\n      emitter.isVisible = false;\n    }\n\n    var clone = new SubEmitter(this.particleSystem.clone(\"\", emitter)); // Clone properties\n\n    clone.particleSystem.name += \"Clone\";\n    clone.type = this.type;\n    clone.inheritDirection = this.inheritDirection;\n    clone.inheritedVelocityAmount = this.inheritedVelocityAmount;\n    clone.particleSystem._disposeEmitterOnDispose = true;\n    clone.particleSystem.disposeOnStop = true;\n    return clone;\n  };\n  /**\r\n   * Serialize current object to a JSON object\r\n   * @returns the serialized object\r\n   */\n\n\n  SubEmitter.prototype.serialize = function () {\n    var serializationObject = {};\n    serializationObject.type = this.type;\n    serializationObject.inheritDirection = this.inheritDirection;\n    serializationObject.inheritedVelocityAmount = this.inheritedVelocityAmount;\n    serializationObject.particleSystem = this.particleSystem.serialize();\n    return serializationObject;\n  };\n  /** @hidden */\n\n\n  SubEmitter._ParseParticleSystem = function (system, sceneOrEngine, rootUrl) {\n    throw _DevTools.WarnImport(\"ParseParticle\");\n  };\n  /**\r\n   * Creates a new SubEmitter from a serialized JSON version\r\n   * @param serializationObject defines the JSON object to read from\r\n   * @param sceneOrEngine defines the hosting scene or the hosting engine\r\n   * @param rootUrl defines the rootUrl for data loading\r\n   * @returns a new SubEmitter\r\n   */\n\n\n  SubEmitter.Parse = function (serializationObject, sceneOrEngine, rootUrl) {\n    var system = serializationObject.particleSystem;\n    var subEmitter = new SubEmitter(SubEmitter._ParseParticleSystem(system, sceneOrEngine, rootUrl));\n    subEmitter.type = serializationObject.type;\n    subEmitter.inheritDirection = serializationObject.inheritDirection;\n    subEmitter.inheritedVelocityAmount = serializationObject.inheritedVelocityAmount;\n    subEmitter.particleSystem._isSubEmitter = true;\n    return subEmitter;\n  };\n  /** Release associated resources */\n\n\n  SubEmitter.prototype.dispose = function () {\n    this.particleSystem.dispose();\n  };\n\n  return SubEmitter;\n}();\n\nexport { SubEmitter };","map":null,"metadata":{},"sourceType":"module"}