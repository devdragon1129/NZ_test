{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/DeployButton/DeployButton.tsx\";\nimport * as React from 'react';\nimport { Button, Popup } from 'decentraland-ui';\nimport { t, T } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { getExceededMetrics } from 'modules/scene/utils';\nimport { DeploymentStatus } from 'modules/deployment/types';\nimport { DeployModalView } from 'components/Modals/DeployModal/DeployModal.types';\nimport './DeployButton.css';\n\nvar DeployButton = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DeployButton, _React$PureComponent);\n\n  function DeployButton() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DeployButton);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DeployButton)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleClearDeployment = function () {\n      var _this$props = _this.props,\n          project = _this$props.project,\n          onOpenModal = _this$props.onOpenModal;\n      onOpenModal('DeployModal', {\n        view: DeployModalView.CLEAR_DEPLOYMENT,\n        projectId: project.id\n      });\n    };\n\n    _this.handleClick = function () {\n      var _this$props2 = _this.props,\n          project = _this$props2.project,\n          onOpenModal = _this$props2.onOpenModal;\n\n      var canUpdate = _this.isUpdate();\n\n      onOpenModal('DeployModal', {\n        view: canUpdate ? DeployModalView.DEPLOY_TO_LAND : DeployModalView.NONE,\n        projectId: project.id\n      });\n    };\n\n    _this.isUpdate = function () {\n      var deploymentStatus = _this.props.deploymentStatus;\n      return deploymentStatus !== DeploymentStatus.UNPUBLISHED;\n    };\n\n    _this.getExceededMetric = function () {\n      var _this$props3 = _this.props,\n          metrics = _this$props3.metrics,\n          limits = _this$props3.limits;\n      var exceededMetrics = getExceededMetrics(metrics, limits);\n      return exceededMetrics.length > 0 ? exceededMetrics[0] : '';\n    };\n\n    _this.renderPopupContent = function () {\n      var _this$props4 = _this.props,\n          areEntitiesOutOfBoundaries = _this$props4.areEntitiesOutOfBoundaries,\n          deploymentStatus = _this$props4.deploymentStatus;\n\n      var exceededMetric = _this.getExceededMetric();\n\n      if (areEntitiesOutOfBoundaries) return /*#__PURE__*/React.createElement(T, {\n        id: \"topbar.bounds_exceeded\",\n        values: {\n          br: /*#__PURE__*/React.createElement(\"br\", {\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 89\n            }\n          })\n        },\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 44\n        }\n      });\n      if (exceededMetric !== '') return /*#__PURE__*/React.createElement(T, {\n        id: \"topbar.limits_exceeded\",\n        values: {\n          metric: exceededMetric,\n          br: /*#__PURE__*/React.createElement(\"br\", {\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 108\n            }\n          })\n        },\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 39\n        }\n      });\n\n      if (deploymentStatus === DeploymentStatus.PUBLISHED) {\n        return /*#__PURE__*/React.createElement(T, {\n          id: \"topbar.up_to_date\",\n          values: {\n            br: /*#__PURE__*/React.createElement(\"br\", {\n              __self: _assertThisInitialized(_assertThisInitialized(_this)),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 50,\n                columnNumber: 54\n              }\n            })\n          },\n          __self: _assertThisInitialized(_assertThisInitialized(_this)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 14\n          }\n        });\n      }\n\n      return null;\n    };\n\n    return _this;\n  }\n\n  _createClass(DeployButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          areEntitiesOutOfBoundaries = _this$props5.areEntitiesOutOfBoundaries,\n          isLoading = _this$props5.isLoading;\n      var exceededMetric = this.getExceededMetric();\n      var didExceedMetrics = exceededMetric !== '' || areEntitiesOutOfBoundaries;\n      var isButtonDisabled = isLoading || didExceedMetrics;\n      var isPopupDisabled = isLoading || !isButtonDisabled;\n      return /*#__PURE__*/React.createElement(\"span\", {\n        className: \"DeployButton tool\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Popup, {\n        content: this.renderPopupContent(),\n        position: \"bottom center\",\n        disabled: isPopupDisabled,\n        trigger: /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          primary: true,\n          size: \"mini\",\n          onClick: this.handleClick,\n          disabled: isButtonDisabled,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }\n        }, t('global.publish'))),\n        on: \"hover\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return DeployButton;\n}(React.PureComponent);\n\nDeployButton.defaultProps = {\n  onClick: function onClick() {\n    /* noop */\n  }\n};\nexport { DeployButton as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/DeployButton/DeployButton.tsx"],"names":["React","Button","Popup","t","T","getExceededMetrics","DeploymentStatus","DeployModalView","DeployButton","handleClearDeployment","props","project","onOpenModal","view","CLEAR_DEPLOYMENT","projectId","id","handleClick","canUpdate","isUpdate","DEPLOY_TO_LAND","NONE","deploymentStatus","UNPUBLISHED","getExceededMetric","metrics","limits","exceededMetrics","length","renderPopupContent","areEntitiesOutOfBoundaries","exceededMetric","br","metric","PUBLISHED","isLoading","didExceedMetrics","isButtonDisabled","isPopupDisabled","PureComponent","defaultProps","onClick"],"mappings":"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","sourcesContent":["import * as React from 'react'\n\nimport { Button, Popup } from 'decentraland-ui'\nimport { t, T } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { getExceededMetrics } from 'modules/scene/utils'\nimport { DeploymentStatus } from 'modules/deployment/types'\nimport { DeployModalView, DeployModalMetadata } from 'components/Modals/DeployModal/DeployModal.types'\nimport { Props, DefaultProps } from './DeployButton.types'\nimport './DeployButton.css'\n\nexport default class DeployButton extends React.PureComponent<Props> {\n  static defaultProps: DefaultProps = {\n    onClick: () => {\n      /* noop */\n    }\n  }\n\n  handleClearDeployment = () => {\n    const { project, onOpenModal } = this.props\n    onOpenModal('DeployModal', { view: DeployModalView.CLEAR_DEPLOYMENT, projectId: project.id } as DeployModalMetadata)\n  }\n\n  handleClick = () => {\n    const { project, onOpenModal } = this.props\n    const canUpdate = this.isUpdate()\n\n    onOpenModal('DeployModal', {\n      view: canUpdate ? DeployModalView.DEPLOY_TO_LAND : DeployModalView.NONE,\n      projectId: project.id\n    } as DeployModalMetadata)\n  }\n\n  isUpdate = () => {\n    const { deploymentStatus } = this.props\n    return deploymentStatus !== DeploymentStatus.UNPUBLISHED\n  }\n\n  getExceededMetric = () => {\n    const { metrics, limits } = this.props\n    const exceededMetrics = getExceededMetrics(metrics, limits)\n    return exceededMetrics.length > 0 ? exceededMetrics[0] : ''\n  }\n\n  renderPopupContent = () => {\n    const { areEntitiesOutOfBoundaries, deploymentStatus } = this.props\n    const exceededMetric = this.getExceededMetric()\n    if (areEntitiesOutOfBoundaries) return <T id=\"topbar.bounds_exceeded\" values={{ br: <br /> }} />\n    if (exceededMetric !== '') return <T id=\"topbar.limits_exceeded\" values={{ metric: exceededMetric, br: <br /> }} />\n    if (deploymentStatus === DeploymentStatus.PUBLISHED) {\n      return <T id=\"topbar.up_to_date\" values={{ br: <br /> }} />\n    }\n    return null\n  }\n\n  render() {\n    const { areEntitiesOutOfBoundaries, isLoading } = this.props\n    const exceededMetric = this.getExceededMetric()\n    const didExceedMetrics = exceededMetric !== '' || areEntitiesOutOfBoundaries\n    const isButtonDisabled = isLoading || didExceedMetrics\n    const isPopupDisabled = isLoading || !isButtonDisabled\n\n    return (\n      <span className=\"DeployButton tool\">\n        <Popup\n          content={this.renderPopupContent()}\n          position=\"bottom center\"\n          disabled={isPopupDisabled}\n          trigger={\n            <span>\n              <Button primary size=\"mini\" onClick={this.handleClick} disabled={isButtonDisabled}>\n                {t('global.publish')}\n              </Button>\n            </span>\n          }\n          on=\"hover\"\n        />\n      </span>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}