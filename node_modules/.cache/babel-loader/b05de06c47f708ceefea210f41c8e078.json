{"ast":null,"code":"/**\r\n * Base class of the scene acting as a container for the different elements composing a scene.\r\n * This class is dynamically extended by the different components of the scene increasing\r\n * flexibility and reducing coupling\r\n */\nvar AbstractScene =\n/** @class */\nfunction () {\n  function AbstractScene() {\n    /**\r\n     * Gets the list of root nodes (ie. nodes with no parent)\r\n     */\n    this.rootNodes = new Array();\n    /** All of the cameras added to this scene\r\n     * @see https://doc.babylonjs.com/babylon101/cameras\r\n     */\n\n    this.cameras = new Array();\n    /**\r\n    * All of the lights added to this scene\r\n    * @see https://doc.babylonjs.com/babylon101/lights\r\n    */\n\n    this.lights = new Array();\n    /**\r\n    * All of the (abstract) meshes added to this scene\r\n    */\n\n    this.meshes = new Array();\n    /**\r\n     * The list of skeletons added to the scene\r\n     * @see https://doc.babylonjs.com/how_to/how_to_use_bones_and_skeletons\r\n     */\n\n    this.skeletons = new Array();\n    /**\r\n    * All of the particle systems added to this scene\r\n    * @see https://doc.babylonjs.com/babylon101/particles\r\n    */\n\n    this.particleSystems = new Array();\n    /**\r\n     * Gets a list of Animations associated with the scene\r\n     */\n\n    this.animations = [];\n    /**\r\n    * All of the animation groups added to this scene\r\n    * @see https://doc.babylonjs.com/how_to/group\r\n    */\n\n    this.animationGroups = new Array();\n    /**\r\n    * All of the multi-materials added to this scene\r\n    * @see https://doc.babylonjs.com/how_to/multi_materials\r\n    */\n\n    this.multiMaterials = new Array();\n    /**\r\n    * All of the materials added to this scene\r\n    * In the context of a Scene, it is not supposed to be modified manually.\r\n    * Any addition or removal should be done using the addMaterial and removeMaterial Scene methods.\r\n    * Note also that the order of the Material within the array is not significant and might change.\r\n    * @see https://doc.babylonjs.com/babylon101/materials\r\n    */\n\n    this.materials = new Array();\n    /**\r\n     * The list of morph target managers added to the scene\r\n     * @see https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh\r\n     */\n\n    this.morphTargetManagers = new Array();\n    /**\r\n     * The list of geometries used in the scene.\r\n     */\n\n    this.geometries = new Array();\n    /**\r\n    * All of the tranform nodes added to this scene\r\n    * In the context of a Scene, it is not supposed to be modified manually.\r\n    * Any addition or removal should be done using the addTransformNode and removeTransformNode Scene methods.\r\n    * Note also that the order of the TransformNode wihin the array is not significant and might change.\r\n    * @see https://doc.babylonjs.com/how_to/transformnode\r\n    */\n\n    this.transformNodes = new Array();\n    /**\r\n     * ActionManagers available on the scene.\r\n     */\n\n    this.actionManagers = new Array();\n    /**\r\n     * Textures to keep.\r\n     */\n\n    this.textures = new Array();\n    /** @hidden */\n\n    this._environmentTexture = null;\n    /**\r\n     * The list of postprocesses added to the scene\r\n     */\n\n    this.postProcesses = new Array();\n  }\n  /**\r\n   * Adds a parser in the list of available ones\r\n   * @param name Defines the name of the parser\r\n   * @param parser Defines the parser to add\r\n   */\n\n\n  AbstractScene.AddParser = function (name, parser) {\n    this._BabylonFileParsers[name] = parser;\n  };\n  /**\r\n   * Gets a general parser from the list of avaialble ones\r\n   * @param name Defines the name of the parser\r\n   * @returns the requested parser or null\r\n   */\n\n\n  AbstractScene.GetParser = function (name) {\n    if (this._BabylonFileParsers[name]) {\n      return this._BabylonFileParsers[name];\n    }\n\n    return null;\n  };\n  /**\r\n   * Adds n individual parser in the list of available ones\r\n   * @param name Defines the name of the parser\r\n   * @param parser Defines the parser to add\r\n   */\n\n\n  AbstractScene.AddIndividualParser = function (name, parser) {\n    this._IndividualBabylonFileParsers[name] = parser;\n  };\n  /**\r\n   * Gets an individual parser from the list of avaialble ones\r\n   * @param name Defines the name of the parser\r\n   * @returns the requested parser or null\r\n   */\n\n\n  AbstractScene.GetIndividualParser = function (name) {\n    if (this._IndividualBabylonFileParsers[name]) {\n      return this._IndividualBabylonFileParsers[name];\n    }\n\n    return null;\n  };\n  /**\r\n   * Parser json data and populate both a scene and its associated container object\r\n   * @param jsonData Defines the data to parse\r\n   * @param scene Defines the scene to parse the data for\r\n   * @param container Defines the container attached to the parsing sequence\r\n   * @param rootUrl Defines the root url of the data\r\n   */\n\n\n  AbstractScene.Parse = function (jsonData, scene, container, rootUrl) {\n    for (var parserName in this._BabylonFileParsers) {\n      if (this._BabylonFileParsers.hasOwnProperty(parserName)) {\n        this._BabylonFileParsers[parserName](jsonData, scene, container, rootUrl);\n      }\n    }\n  };\n\n  Object.defineProperty(AbstractScene.prototype, \"environmentTexture\", {\n    /**\r\n     * Texture used in all pbr material as the reflection texture.\r\n     * As in the majority of the scene they are the same (exception for multi room and so on),\r\n     * this is easier to reference from here than from all the materials.\r\n     */\n    get: function get() {\n      return this._environmentTexture;\n    },\n    set: function set(value) {\n      this._environmentTexture = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * @returns all meshes, lights, cameras, transformNodes and bones\r\n   */\n\n  AbstractScene.prototype.getNodes = function () {\n    var nodes = new Array();\n    nodes = nodes.concat(this.meshes);\n    nodes = nodes.concat(this.lights);\n    nodes = nodes.concat(this.cameras);\n    nodes = nodes.concat(this.transformNodes); // dummies\n\n    this.skeletons.forEach(function (skeleton) {\n      return nodes = nodes.concat(skeleton.bones);\n    });\n    return nodes;\n  };\n  /**\r\n   * Stores the list of available parsers in the application.\r\n   */\n\n\n  AbstractScene._BabylonFileParsers = {};\n  /**\r\n   * Stores the list of available individual parsers in the application.\r\n   */\n\n  AbstractScene._IndividualBabylonFileParsers = {};\n  return AbstractScene;\n}();\n\nexport { AbstractScene };","map":null,"metadata":{},"sourceType":"module"}