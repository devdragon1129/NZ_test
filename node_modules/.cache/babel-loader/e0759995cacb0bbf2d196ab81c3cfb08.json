{"ast":null,"code":"import { Color3 } from \"@babylonjs/core/Maths/math.color\";\nimport { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport { GLTFLoader } from \"../glTFLoader\";\nvar NAME = \"KHR_materials_pbrSpecularGlossiness\";\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness)\r\n */\n\nvar KHR_materials_pbrSpecularGlossiness =\n/** @class */\nfunction () {\n  /** @hidden */\n  function KHR_materials_pbrSpecularGlossiness(loader) {\n    /**\r\n     * The name of this extension.\r\n     */\n    this.name = NAME;\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\n\n    this.order = 200;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_materials_pbrSpecularGlossiness.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /** @hidden */\n\n\n  KHR_materials_pbrSpecularGlossiness.prototype.loadMaterialPropertiesAsync = function (context, material, babylonMaterial) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, function (extensionContext, extension) {\n      var promises = new Array();\n      promises.push(_this._loader.loadMaterialBasePropertiesAsync(context, material, babylonMaterial));\n      promises.push(_this._loadSpecularGlossinessPropertiesAsync(extensionContext, material, extension, babylonMaterial));\n\n      _this._loader.loadMaterialAlphaProperties(context, material, babylonMaterial);\n\n      return Promise.all(promises).then(function () {});\n    });\n  };\n\n  KHR_materials_pbrSpecularGlossiness.prototype._loadSpecularGlossinessPropertiesAsync = function (context, material, properties, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(context + \": Material type not supported\");\n    }\n\n    var promises = new Array();\n    babylonMaterial.metallic = null;\n    babylonMaterial.roughness = null;\n\n    if (properties.diffuseFactor) {\n      babylonMaterial.albedoColor = Color3.FromArray(properties.diffuseFactor);\n      babylonMaterial.alpha = properties.diffuseFactor[3];\n    } else {\n      babylonMaterial.albedoColor = Color3.White();\n    }\n\n    babylonMaterial.reflectivityColor = properties.specularFactor ? Color3.FromArray(properties.specularFactor) : Color3.White();\n    babylonMaterial.microSurface = properties.glossinessFactor == undefined ? 1 : properties.glossinessFactor;\n\n    if (properties.diffuseTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(context + \"/diffuseTexture\", properties.diffuseTexture, function (texture) {\n        texture.name = babylonMaterial.name + \" (Diffuse)\";\n        babylonMaterial.albedoTexture = texture;\n      }));\n    }\n\n    if (properties.specularGlossinessTexture) {\n      properties.specularGlossinessTexture.nonColorData = true;\n      promises.push(this._loader.loadTextureInfoAsync(context + \"/specularGlossinessTexture\", properties.specularGlossinessTexture, function (texture) {\n        texture.name = babylonMaterial.name + \" (Specular Glossiness)\";\n        babylonMaterial.reflectivityTexture = texture;\n      }));\n      babylonMaterial.reflectivityTexture.hasAlpha = true;\n      babylonMaterial.useMicroSurfaceFromReflectivityMapAlpha = true;\n    }\n\n    return Promise.all(promises).then(function () {});\n  };\n\n  return KHR_materials_pbrSpecularGlossiness;\n}();\n\nexport { KHR_materials_pbrSpecularGlossiness };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_materials_pbrSpecularGlossiness(loader);\n});","map":null,"metadata":{},"sourceType":"module"}