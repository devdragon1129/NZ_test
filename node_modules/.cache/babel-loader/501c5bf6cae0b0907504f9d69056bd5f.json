{"ast":null,"code":"/**\r\n * Class used to store shared data between 2 NodeMaterialBuildState\r\n */\nvar NodeMaterialBuildStateSharedData =\n/** @class */\nfunction () {\n  /** Creates a new shared data */\n  function NodeMaterialBuildStateSharedData() {\n    /**\r\n    * Gets the list of emitted varyings\r\n    */\n    this.temps = new Array();\n    /**\r\n     * Gets the list of emitted varyings\r\n     */\n\n    this.varyings = new Array();\n    /**\r\n     * Gets the varying declaration string\r\n     */\n\n    this.varyingDeclaration = \"\";\n    /**\r\n     * Input blocks\r\n     */\n\n    this.inputBlocks = new Array();\n    /**\r\n     * Input blocks\r\n     */\n\n    this.textureBlocks = new Array();\n    /**\r\n     * Bindable blocks (Blocks that need to set data to the effect)\r\n     */\n\n    this.bindableBlocks = new Array();\n    /**\r\n     * List of blocks that can provide a compilation fallback\r\n     */\n\n    this.blocksWithFallbacks = new Array();\n    /**\r\n     * List of blocks that can provide a define update\r\n     */\n\n    this.blocksWithDefines = new Array();\n    /**\r\n    * List of blocks that can provide a repeatable content\r\n    */\n\n    this.repeatableContentBlocks = new Array();\n    /**\r\n    * List of blocks that can provide a dynamic list of uniforms\r\n    */\n\n    this.dynamicUniformBlocks = new Array();\n    /**\r\n     * List of blocks that can block the isReady function for the material\r\n     */\n\n    this.blockingBlocks = new Array();\n    /**\r\n     * Gets the list of animated inputs\r\n     */\n\n    this.animatedInputs = new Array();\n    /** List of emitted variables */\n\n    this.variableNames = {};\n    /** List of emitted defines */\n\n    this.defineNames = {};\n    /**\r\n     * Gets the compilation hints emitted at compilation time\r\n     */\n\n    this.hints = {\n      needWorldViewMatrix: false,\n      needWorldViewProjectionMatrix: false,\n      needAlphaBlending: false,\n      needAlphaTesting: false\n    };\n    /**\r\n     * List of compilation checks\r\n     */\n\n    this.checks = {\n      emitVertex: false,\n      emitFragment: false,\n      notConnectedNonOptionalInputs: new Array()\n    };\n    /**\r\n     * Is vertex program allowed to be empty?\r\n     */\n\n    this.allowEmptyVertexProgram = false; // Exclude usual attributes from free variable names\n\n    this.variableNames[\"position\"] = 0;\n    this.variableNames[\"normal\"] = 0;\n    this.variableNames[\"tangent\"] = 0;\n    this.variableNames[\"uv\"] = 0;\n    this.variableNames[\"uv2\"] = 0;\n    this.variableNames[\"uv3\"] = 0;\n    this.variableNames[\"uv4\"] = 0;\n    this.variableNames[\"uv4\"] = 0;\n    this.variableNames[\"uv5\"] = 0;\n    this.variableNames[\"uv6\"] = 0;\n    this.variableNames[\"color\"] = 0;\n    this.variableNames[\"matricesIndices\"] = 0;\n    this.variableNames[\"matricesWeights\"] = 0;\n    this.variableNames[\"matricesIndicesExtra\"] = 0;\n    this.variableNames[\"matricesWeightsExtra\"] = 0;\n    this.variableNames[\"diffuseBase\"] = 0;\n    this.variableNames[\"specularBase\"] = 0;\n    this.variableNames[\"worldPos\"] = 0;\n    this.variableNames[\"shadow\"] = 0;\n    this.variableNames[\"view\"] = 0; // Exclude known varyings\n\n    this.variableNames[\"vTBN\"] = 0; // Exclude defines\n\n    this.defineNames[\"MAINUV0\"] = 0;\n    this.defineNames[\"MAINUV1\"] = 0;\n    this.defineNames[\"MAINUV2\"] = 0;\n    this.defineNames[\"MAINUV3\"] = 0;\n    this.defineNames[\"MAINUV4\"] = 0;\n    this.defineNames[\"MAINUV5\"] = 0;\n    this.defineNames[\"MAINUV6\"] = 0;\n    this.defineNames[\"MAINUV7\"] = 0;\n  }\n  /**\r\n   * Emits console errors and exceptions if there is a failing check\r\n   */\n\n\n  NodeMaterialBuildStateSharedData.prototype.emitErrors = function () {\n    var errorMessage = \"\";\n\n    if (!this.checks.emitVertex && !this.allowEmptyVertexProgram) {\n      errorMessage += \"NodeMaterial does not have a vertex output. You need to at least add a block that generates a glPosition value.\\r\\n\";\n    }\n\n    if (!this.checks.emitFragment) {\n      errorMessage += \"NodeMaterial does not have a fragment output. You need to at least add a block that generates a glFragColor value.\\r\\n\";\n    }\n\n    for (var _i = 0, _a = this.checks.notConnectedNonOptionalInputs; _i < _a.length; _i++) {\n      var notConnectedInput = _a[_i];\n      errorMessage += \"input \" + notConnectedInput.name + \" from block \" + notConnectedInput.ownerBlock.name + \"[\" + notConnectedInput.ownerBlock.getClassName() + \"] is not connected and is not optional.\\r\\n\";\n    }\n\n    if (errorMessage) {\n      throw \"Build of NodeMaterial failed:\\r\\n\" + errorMessage;\n    }\n  };\n\n  return NodeMaterialBuildStateSharedData;\n}();\n\nexport { NodeMaterialBuildStateSharedData };","map":null,"metadata":{},"sourceType":"module"}