{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { Observable } from \"../Misc/observable\";\nimport { WebXRState } from \"./webXRTypes\";\nimport { Tools } from \"../Misc/tools\";\n/**\r\n * Button which can be used to enter a different mode of XR\r\n */\n\nvar WebXREnterExitUIButton =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a WebXREnterExitUIButton\r\n   * @param element button element\r\n   * @param sessionMode XR initialization session mode\r\n   * @param referenceSpaceType the type of reference space to be used\r\n   */\n  function WebXREnterExitUIButton(\n  /** button element */\n  element,\n  /** XR initialization options for the button */\n  sessionMode,\n  /** Reference space type */\n  referenceSpaceType) {\n    this.element = element;\n    this.sessionMode = sessionMode;\n    this.referenceSpaceType = referenceSpaceType;\n  }\n  /**\r\n   * Extendable function which can be used to update the button's visuals when the state changes\r\n   * @param activeButton the current active button in the UI\r\n   */\n\n\n  WebXREnterExitUIButton.prototype.update = function (activeButton) {};\n\n  return WebXREnterExitUIButton;\n}();\n\nexport { WebXREnterExitUIButton };\n/**\r\n * Options to create the webXR UI\r\n */\n\nvar WebXREnterExitUIOptions =\n/** @class */\nfunction () {\n  function WebXREnterExitUIOptions() {}\n\n  return WebXREnterExitUIOptions;\n}();\n\nexport { WebXREnterExitUIOptions };\n/**\r\n * UI to allow the user to enter/exit XR mode\r\n */\n\nvar WebXREnterExitUI =\n/** @class */\nfunction () {\n  /**\r\n   *\r\n   * @param scene babylon scene object to use\r\n   * @param options (read-only) version of the options passed to this UI\r\n   */\n  function WebXREnterExitUI(scene,\n  /** version of the options passed to this UI */\n  options) {\n    var _this = this;\n\n    this.scene = scene;\n    this.options = options;\n    this._activeButton = null;\n    this._buttons = [];\n    /**\r\n     * Fired every time the active button is changed.\r\n     *\r\n     * When xr is entered via a button that launches xr that button will be the callback parameter\r\n     *\r\n     * When exiting xr the callback parameter will be null)\r\n     */\n\n    this.activeButtonChangedObservable = new Observable();\n    this.overlay = document.createElement(\"div\");\n    this.overlay.classList.add(\"xr-button-overlay\");\n    this.overlay.style.cssText = \"z-index:11;position: absolute; right: 20px;bottom: 50px;\"; // if served over HTTP, warn people.\n    // Hopefully the browsers will catch up\n\n    if (typeof window !== \"undefined\") {\n      if (window.location && window.location.protocol === \"http:\") {\n        Tools.Warn(\"WebXR can only be served over HTTPS\");\n      }\n    }\n\n    if (options.customButtons) {\n      this._buttons = options.customButtons;\n    } else {\n      var sessionMode = options.sessionMode || \"immersive-vr\";\n      var referenceSpaceType = options.referenceSpaceType || \"local-floor\";\n      var url = typeof SVGSVGElement === \"undefined\" ? \"https://cdn.babylonjs.com/Assets/vrButton.png\" : \"data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%222048%22%20height%3D%221152%22%20viewBox%3D%220%200%202048%201152%22%20version%3D%221.1%22%3E%3Cpath%20transform%3D%22rotate%28180%201024%2C576.0000000000001%29%22%20d%3D%22m1109%2C896q17%2C0%2030%2C-12t13%2C-30t-12.5%2C-30.5t-30.5%2C-12.5l-170%2C0q-18%2C0%20-30.5%2C12.5t-12.5%2C30.5t13%2C30t30%2C12l170%2C0zm-85%2C256q59%2C0%20132.5%2C-1.5t154.5%2C-5.5t164.5%2C-11.5t163%2C-20t150%2C-30t124.5%2C-41.5q23%2C-11%2042%2C-24t38%2C-30q27%2C-25%2041%2C-61.5t14%2C-72.5l0%2C-257q0%2C-123%20-47%2C-232t-128%2C-190t-190%2C-128t-232%2C-47l-81%2C0q-37%2C0%20-68.5%2C14t-60.5%2C34.5t-55.5%2C45t-53%2C45t-53%2C34.5t-55.5%2C14t-55.5%2C-14t-53%2C-34.5t-53%2C-45t-55.5%2C-45t-60.5%2C-34.5t-68.5%2C-14l-81%2C0q-123%2C0%20-232%2C47t-190%2C128t-128%2C190t-47%2C232l0%2C257q0%2C68%2038%2C115t97%2C73q54%2C24%20124.5%2C41.5t150%2C30t163%2C20t164.5%2C11.5t154.5%2C5.5t132.5%2C1.5zm939%2C-298q0%2C39%20-24.5%2C67t-58.5%2C42q-54%2C23%20-122%2C39.5t-143.5%2C28t-155.5%2C19t-157%2C11t-148.5%2C5t-129.5%2C1.5q-59%2C0%20-130%2C-1.5t-148%2C-5t-157%2C-11t-155.5%2C-19t-143.5%2C-28t-122%2C-39.5q-34%2C-14%20-58.5%2C-42t-24.5%2C-67l0%2C-257q0%2C-106%2040.5%2C-199t110%2C-162.5t162.5%2C-109.5t199%2C-40l81%2C0q27%2C0%2052%2C14t50%2C34.5t51%2C44.5t55.5%2C44.5t63.5%2C34.5t74%2C14t74%2C-14t63.5%2C-34.5t55.5%2C-44.5t51%2C-44.5t50%2C-34.5t52%2C-14l14%2C0q37%2C0%2070%2C0.5t64.5%2C4.5t63.5%2C12t68%2C23q71%2C30%20128.5%2C78.5t98.5%2C110t63.5%2C133.5t22.5%2C149l0%2C257z%22%20fill%3D%22white%22%20/%3E%3C/svg%3E%0A\";\n      var css = \".babylonVRicon { color: #868686; border-color: #868686; border-style: solid; margin-left: 10px; height: 50px; width: 80px; background-color: rgba(51,51,51,0.7); background-image: url(\" + url + \"); background-size: 80%; background-repeat:no-repeat; background-position: center; border: none; outline: none; transition: transform 0.125s ease-out } .babylonVRicon:hover { transform: scale(1.05) } .babylonVRicon:active {background-color: rgba(51,51,51,1) } .babylonVRicon:focus {background-color: rgba(51,51,51,1) }\";\n      css += '.babylonVRicon.vrdisplaypresenting { background-image: none;} .vrdisplaypresenting::after { content: \"EXIT\"} .xr-error::after { content: \"ERROR\"}';\n      var style = document.createElement(\"style\");\n      style.appendChild(document.createTextNode(css));\n      document.getElementsByTagName(\"head\")[0].appendChild(style);\n      var hmdBtn = document.createElement(\"button\");\n      hmdBtn.className = \"babylonVRicon\";\n      hmdBtn.title = sessionMode + \" - \" + referenceSpaceType;\n\n      this._buttons.push(new WebXREnterExitUIButton(hmdBtn, sessionMode, referenceSpaceType));\n\n      this._buttons[this._buttons.length - 1].update = function (activeButton) {\n        this.element.style.display = activeButton === null || activeButton === this ? \"\" : \"none\";\n        hmdBtn.className = \"babylonVRicon\" + (activeButton === this ? \" vrdisplaypresenting\" : \"\");\n      };\n\n      this._updateButtons(null);\n    }\n\n    var renderCanvas = scene.getEngine().getInputElement();\n\n    if (renderCanvas && renderCanvas.parentNode) {\n      renderCanvas.parentNode.appendChild(this.overlay);\n      scene.onDisposeObservable.addOnce(function () {\n        _this.dispose();\n      });\n    }\n  }\n  /**\r\n   * Creates UI to allow the user to enter/exit XR mode\r\n   * @param scene the scene to add the ui to\r\n   * @param helper the xr experience helper to enter/exit xr with\r\n   * @param options options to configure the UI\r\n   * @returns the created ui\r\n   */\n\n\n  WebXREnterExitUI.CreateAsync = function (scene, helper, options) {\n    var _this = this;\n\n    var ui = new WebXREnterExitUI(scene, options);\n\n    var supportedPromises = ui._buttons.map(function (btn) {\n      return helper.sessionManager.isSessionSupportedAsync(btn.sessionMode);\n    });\n\n    helper.onStateChangedObservable.add(function (state) {\n      if (state == WebXRState.NOT_IN_XR) {\n        ui._updateButtons(null);\n      }\n    });\n    return Promise.all(supportedPromises).then(function (results) {\n      results.forEach(function (supported, i) {\n        if (supported) {\n          ui.overlay.appendChild(ui._buttons[i].element);\n\n          ui._buttons[i].element.onclick = function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var e_1, element, prevTitle;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    if (!(helper.state == WebXRState.IN_XR)) return [3\n                    /*break*/\n                    , 2];\n                    return [4\n                    /*yield*/\n                    , helper.exitXRAsync()];\n\n                  case 1:\n                    _a.sent();\n\n                    ui._updateButtons(null);\n\n                    return [3\n                    /*break*/\n                    , 6];\n\n                  case 2:\n                    if (!(helper.state == WebXRState.NOT_IN_XR)) return [3\n                    /*break*/\n                    , 6];\n                    if (!options.renderTarget) return [3\n                    /*break*/\n                    , 6];\n                    _a.label = 3;\n\n                  case 3:\n                    _a.trys.push([3, 5,, 6]);\n\n                    return [4\n                    /*yield*/\n                    , helper.enterXRAsync(ui._buttons[i].sessionMode, ui._buttons[i].referenceSpaceType, options.renderTarget, {\n                      optionalFeatures: options.optionalFeatures,\n                      requiredFeatures: options.requiredFeatures\n                    })];\n\n                  case 4:\n                    _a.sent();\n\n                    ui._updateButtons(ui._buttons[i]);\n\n                    return [3\n                    /*break*/\n                    , 6];\n\n                  case 5:\n                    e_1 = _a.sent(); // make sure button is visible\n\n                    ui._updateButtons(null);\n\n                    element = ui._buttons[i].element;\n                    prevTitle = element.title;\n                    element.title = \"Error entering XR session : \" + prevTitle;\n                    element.classList.add(\"xr-error\");\n\n                    if (options.onError) {\n                      options.onError(e_1);\n                    }\n\n                    return [3\n                    /*break*/\n                    , 6];\n\n                  case 6:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          };\n        } else {\n          Tools.Warn(\"Session mode \\\"\" + ui._buttons[i].sessionMode + \"\\\" not supported in browser\");\n        }\n      });\n      return ui;\n    });\n  };\n  /**\r\n   * Disposes of the XR UI component\r\n   */\n\n\n  WebXREnterExitUI.prototype.dispose = function () {\n    var renderCanvas = this.scene.getEngine().getInputElement();\n\n    if (renderCanvas && renderCanvas.parentNode && renderCanvas.parentNode.contains(this.overlay)) {\n      renderCanvas.parentNode.removeChild(this.overlay);\n    }\n\n    this.activeButtonChangedObservable.clear();\n  };\n\n  WebXREnterExitUI.prototype._updateButtons = function (activeButton) {\n    var _this = this;\n\n    this._activeButton = activeButton;\n\n    this._buttons.forEach(function (b) {\n      b.update(_this._activeButton);\n    });\n\n    this.activeButtonChangedObservable.notifyObservers(this._activeButton);\n  };\n\n  return WebXREnterExitUI;\n}();\n\nexport { WebXREnterExitUI };","map":null,"metadata":{},"sourceType":"module"}