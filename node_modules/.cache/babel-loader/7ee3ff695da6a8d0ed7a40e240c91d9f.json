{"ast":null,"code":"/** @hidden */\nvar WebGL2ShaderProcessor =\n/** @class */\nfunction () {\n  function WebGL2ShaderProcessor() {}\n\n  WebGL2ShaderProcessor.prototype.attributeProcessor = function (attribute) {\n    return attribute.replace(\"attribute\", \"in\");\n  };\n\n  WebGL2ShaderProcessor.prototype.varyingProcessor = function (varying, isFragment) {\n    return varying.replace(\"varying\", isFragment ? \"in\" : \"out\");\n  };\n\n  WebGL2ShaderProcessor.prototype.postProcessor = function (code, defines, isFragment) {\n    var hasDrawBuffersExtension = code.search(/#extension.+GL_EXT_draw_buffers.+require/) !== -1; // Remove extensions\n\n    var regex = /#extension.+(GL_OVR_multiview2|GL_OES_standard_derivatives|GL_EXT_shader_texture_lod|GL_EXT_frag_depth|GL_EXT_draw_buffers).+(enable|require)/g;\n    code = code.replace(regex, \"\"); // Replace instructions\n\n    code = code.replace(/texture2D\\s*\\(/g, \"texture(\");\n\n    if (isFragment) {\n      code = code.replace(/texture2DLodEXT\\s*\\(/g, \"textureLod(\");\n      code = code.replace(/textureCubeLodEXT\\s*\\(/g, \"textureLod(\");\n      code = code.replace(/textureCube\\s*\\(/g, \"texture(\");\n      code = code.replace(/gl_FragDepthEXT/g, \"gl_FragDepth\");\n      code = code.replace(/gl_FragColor/g, \"glFragColor\");\n      code = code.replace(/gl_FragData/g, \"glFragData\");\n      code = code.replace(/void\\s+?main\\s*\\(/g, (hasDrawBuffersExtension ? \"\" : \"out vec4 glFragColor;\\n\") + \"void main(\");\n    } else {\n      var hasMultiviewExtension = defines.indexOf(\"#define MULTIVIEW\") !== -1;\n\n      if (hasMultiviewExtension) {\n        return \"#extension GL_OVR_multiview2 : require\\nlayout (num_views = 2) in;\\n\" + code;\n      }\n    }\n\n    return code;\n  };\n\n  return WebGL2ShaderProcessor;\n}();\n\nexport { WebGL2ShaderProcessor };","map":null,"metadata":{},"sourceType":"module"}