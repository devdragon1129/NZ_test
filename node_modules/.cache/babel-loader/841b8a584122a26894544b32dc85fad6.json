{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { RenderTargetTexture } from '../Textures/renderTargetTexture';\nimport { InternalTextureSource } from '../Textures/internalTexture';\n/**\r\n * Renders to multiple views with a single draw call\r\n * @see https://www.khronos.org/registry/webgl/extensions/WEBGL_multiview/\r\n */\n\nvar MultiviewRenderTarget =\n/** @class */\nfunction (_super) {\n  __extends(MultiviewRenderTarget, _super);\n  /**\r\n   * Creates a multiview render target\r\n   * @param scene scene used with the render target\r\n   * @param size the size of the render target (used for each view)\r\n   */\n\n\n  function MultiviewRenderTarget(scene, size) {\n    if (size === void 0) {\n      size = 512;\n    }\n\n    var _this = _super.call(this, \"multiview rtt\", size, scene, false, true, InternalTextureSource.Unknown, false, undefined, false, false, true, undefined, true) || this;\n\n    var internalTexture = scene.getEngine().createMultiviewRenderTargetTexture(_this.getRenderWidth(), _this.getRenderHeight());\n    internalTexture.isMultiview = true;\n    internalTexture.format = 5;\n    _this._texture = internalTexture;\n    _this.samples = _this._getEngine().getCaps().maxSamples || _this.samples;\n    return _this;\n  }\n  /**\r\n   * @hidden\r\n   * @param faceIndex the face index, if its a cube texture\r\n   */\n\n\n  MultiviewRenderTarget.prototype._bindFrameBuffer = function (faceIndex) {\n    if (faceIndex === void 0) {\n      faceIndex = 0;\n    }\n\n    if (!this._texture) {\n      return;\n    }\n\n    this.getScene().getEngine().bindMultiviewFramebuffer(this._texture);\n  };\n  /**\r\n   * Gets the number of views the corresponding to the texture (eg. a MultiviewRenderTarget will have > 1)\r\n   * @returns the view count\r\n   */\n\n\n  MultiviewRenderTarget.prototype.getViewCount = function () {\n    return 2;\n  };\n\n  return MultiviewRenderTarget;\n}(RenderTargetTexture);\n\nexport { MultiviewRenderTarget };","map":null,"metadata":{},"sourceType":"module"}