{"ast":null,"code":"import { GLTFLoader, ArrayItem } from \"../glTFLoader\";\nimport { Mesh } from '@babylonjs/core/Meshes/mesh';\nvar NAME = \"KHR_materials_variants\";\n/**\r\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/pull/1681)\r\n * !!! Experimental Extension Subject to Changes !!!\r\n */\n\nvar KHR_materials_variants =\n/** @class */\nfunction () {\n  /** @hidden */\n  function KHR_materials_variants(loader) {\n    /**\r\n     * The name of this extension.\r\n     */\n    this.name = NAME;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_materials_variants.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /**\r\n   * Gets the list of available variant names for this asset.\r\n   * @param rootMesh The glTF root mesh\r\n   * @returns the list of all the variant names for this model\r\n   */\n\n\n  KHR_materials_variants.GetAvailableVariants = function (rootMesh) {\n    var extensionMetadata = this._GetExtensionMetadata(rootMesh);\n\n    if (!extensionMetadata) {\n      return [];\n    }\n\n    return Object.keys(extensionMetadata.variants);\n  };\n  /**\r\n   * Gets the list of available variant names for this asset.\r\n   * @param rootMesh The glTF root mesh\r\n   * @returns the list of all the variant names for this model\r\n   */\n\n\n  KHR_materials_variants.prototype.getAvailableVariants = function (rootMesh) {\n    return KHR_materials_variants.GetAvailableVariants(rootMesh);\n  };\n  /**\r\n   * Select a variant given a variant name or a list of variant names.\r\n   * @param rootMesh The glTF root mesh\r\n   * @param variantName The variant name(s) to select.\r\n   */\n\n\n  KHR_materials_variants.SelectVariant = function (rootMesh, variantName) {\n    var extensionMetadata = this._GetExtensionMetadata(rootMesh);\n\n    if (!extensionMetadata) {\n      throw new Error(\"Cannot select variant on a glTF mesh that does not have the \" + NAME + \" extension\");\n    }\n\n    var select = function select(variantName) {\n      var entries = extensionMetadata.variants[variantName];\n\n      if (entries) {\n        for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n          var entry = entries_1[_i];\n          entry.mesh.material = entry.material;\n        }\n      }\n    };\n\n    if (variantName instanceof Array) {\n      for (var _i = 0, variantName_1 = variantName; _i < variantName_1.length; _i++) {\n        var name_1 = variantName_1[_i];\n        select(name_1);\n      }\n    } else {\n      select(variantName);\n    }\n\n    extensionMetadata.lastSelected = variantName;\n  };\n  /**\r\n   * Select a variant given a variant name or a list of variant names.\r\n   * @param rootMesh The glTF root mesh\r\n   * @param variantName The variant name(s) to select.\r\n   */\n\n\n  KHR_materials_variants.prototype.selectVariant = function (rootMesh, variantName) {\n    return KHR_materials_variants.SelectVariant(rootMesh, variantName);\n  };\n  /**\r\n   * Reset back to the original before selecting a variant.\r\n   * @param rootMesh The glTF root mesh\r\n   */\n\n\n  KHR_materials_variants.Reset = function (rootMesh) {\n    var extensionMetadata = this._GetExtensionMetadata(rootMesh);\n\n    if (!extensionMetadata) {\n      throw new Error(\"Cannot reset on a glTF mesh that does not have the \" + NAME + \" extension\");\n    }\n\n    for (var _i = 0, _a = extensionMetadata.original; _i < _a.length; _i++) {\n      var entry = _a[_i];\n      entry.mesh.material = entry.material;\n    }\n\n    extensionMetadata.lastSelected = null;\n  };\n  /**\r\n   * Reset back to the original before selecting a variant.\r\n   * @param rootMesh The glTF root mesh\r\n   */\n\n\n  KHR_materials_variants.prototype.reset = function (rootMesh) {\n    return KHR_materials_variants.Reset(rootMesh);\n  };\n  /**\r\n   * Gets the last selected variant name(s) or null if original.\r\n   * @param rootMesh The glTF root mesh\r\n   * @returns The selected variant name(s).\r\n   */\n\n\n  KHR_materials_variants.GetLastSelectedVariant = function (rootMesh) {\n    var extensionMetadata = this._GetExtensionMetadata(rootMesh);\n\n    if (!extensionMetadata) {\n      throw new Error(\"Cannot get the last selected variant on a glTF mesh that does not have the \" + NAME + \" extension\");\n    }\n\n    return extensionMetadata.lastSelected;\n  };\n  /**\r\n   * Gets the last selected variant name(s) or null if original.\r\n   * @param rootMesh The glTF root mesh\r\n   * @returns The selected variant name(s).\r\n   */\n\n\n  KHR_materials_variants.prototype.getLastSelectedVariant = function (rootMesh) {\n    return KHR_materials_variants.GetLastSelectedVariant(rootMesh);\n  };\n\n  KHR_materials_variants._GetExtensionMetadata = function (rootMesh) {\n    var _a, _b;\n\n    return ((_b = (_a = rootMesh === null || rootMesh === void 0 ? void 0 : rootMesh.metadata) === null || _a === void 0 ? void 0 : _a.gltf) === null || _b === void 0 ? void 0 : _b[NAME]) || null;\n  };\n  /** @hidden */\n\n\n  KHR_materials_variants.prototype.onLoading = function () {\n    var extensions = this._loader.gltf.extensions;\n\n    if (extensions && extensions[this.name]) {\n      var extension = extensions[this.name];\n      this._variants = extension.variants;\n    }\n  };\n  /** @hidden */\n\n\n  KHR_materials_variants.prototype._loadMeshPrimitiveAsync = function (context, name, node, mesh, primitive, assign) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, primitive, this.name, function (extensionContext, extension) {\n      var promises = new Array();\n      promises.push(_this._loader._loadMeshPrimitiveAsync(context, name, node, mesh, primitive, function (babylonMesh) {\n        assign(babylonMesh);\n\n        if (babylonMesh instanceof Mesh) {\n          var babylonDrawMode = GLTFLoader._GetDrawMode(context, primitive.mode);\n\n          var root = _this._loader.rootBabylonMesh;\n          var metadata = root.metadata = root.metadata || {};\n          var gltf = metadata.gltf = metadata.gltf || {};\n          var extensionMetadata = gltf[NAME] = gltf[NAME] || {\n            lastSelected: null,\n            original: [],\n            variants: {}\n          }; // Store the original material.\n\n          extensionMetadata.original.push({\n            mesh: babylonMesh,\n            material: babylonMesh.material\n          }); // For each mapping, look at the variants and make a new entry for them.\n\n          var variants_1 = extensionMetadata.variants;\n\n          for (var _i = 0, _a = extension.mappings; _i < _a.length; _i++) {\n            var mapping = _a[_i];\n\n            var _loop_1 = function _loop_1(variantIndex) {\n              var variant = ArrayItem.Get(extensionContext + \"/mapping/\" + variantIndex, _this._variants, variantIndex);\n              var material = ArrayItem.Get(\"#/materials/\", _this._loader.gltf.materials, mapping.material);\n              promises.push(_this._loader._loadMaterialAsync(\"#/materials/\" + mapping.material, material, babylonMesh, babylonDrawMode, function (babylonMaterial) {\n                variants_1[variant.name] = variants_1[variant.name] || [];\n                variants_1[variant.name].push({\n                  mesh: babylonMesh,\n                  material: babylonMaterial\n                });\n              }));\n            };\n\n            for (var _b = 0, _c = mapping.variants; _b < _c.length; _b++) {\n              var variantIndex = _c[_b];\n\n              _loop_1(variantIndex);\n            }\n          }\n        }\n      }));\n      return Promise.all(promises).then(function (_a) {\n        var babylonMesh = _a[0];\n        return babylonMesh;\n      });\n    });\n  };\n\n  return KHR_materials_variants;\n}();\n\nexport { KHR_materials_variants };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_materials_variants(loader);\n});","map":null,"metadata":{},"sourceType":"module"}