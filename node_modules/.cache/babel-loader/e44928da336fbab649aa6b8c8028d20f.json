{"ast":null,"code":"import { Observable } from \"../../Misc/observable\";\n/**\r\n * This class represents a single component (for example button or thumbstick) of a motion controller\r\n */\n\nvar WebXRControllerComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new component for a motion controller.\r\n   * It is created by the motion controller itself\r\n   *\r\n   * @param id the id of this component\r\n   * @param type the type of the component\r\n   * @param _buttonIndex index in the buttons array of the gamepad\r\n   * @param _axesIndices indices of the values in the axes array of the gamepad\r\n   */\n  function WebXRControllerComponent(\n  /**\r\n   * the id of this component\r\n   */\n  id,\n  /**\r\n   * the type of the component\r\n   */\n  type, _buttonIndex, _axesIndices) {\n    if (_buttonIndex === void 0) {\n      _buttonIndex = -1;\n    }\n\n    if (_axesIndices === void 0) {\n      _axesIndices = [];\n    }\n\n    this.id = id;\n    this.type = type;\n    this._buttonIndex = _buttonIndex;\n    this._axesIndices = _axesIndices;\n    this._axes = {\n      x: 0,\n      y: 0\n    };\n    this._changes = {};\n    this._currentValue = 0;\n    this._hasChanges = false;\n    this._pressed = false;\n    this._touched = false;\n    /**\r\n     * If axes are available for this component (like a touchpad or thumbstick) the observers will be notified when\r\n     * the axes data changes\r\n     */\n\n    this.onAxisValueChangedObservable = new Observable();\n    /**\r\n     * Observers registered here will be triggered when the state of a button changes\r\n     * State change is either pressed / touched / value\r\n     */\n\n    this.onButtonStateChangedObservable = new Observable();\n  }\n\n  Object.defineProperty(WebXRControllerComponent.prototype, \"axes\", {\n    /**\r\n     * The current axes data. If this component has no axes it will still return an object { x: 0, y: 0 }\r\n     */\n    get: function get() {\n      return this._axes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebXRControllerComponent.prototype, \"changes\", {\n    /**\r\n     * Get the changes. Elements will be populated only if they changed with their previous and current value\r\n     */\n    get: function get() {\n      return this._changes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebXRControllerComponent.prototype, \"hasChanges\", {\n    /**\r\n     * Return whether or not the component changed the last frame\r\n     */\n    get: function get() {\n      return this._hasChanges;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebXRControllerComponent.prototype, \"pressed\", {\n    /**\r\n     * is the button currently pressed\r\n     */\n    get: function get() {\n      return this._pressed;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebXRControllerComponent.prototype, \"touched\", {\n    /**\r\n     * is the button currently touched\r\n     */\n    get: function get() {\n      return this._touched;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(WebXRControllerComponent.prototype, \"value\", {\n    /**\r\n     * Get the current value of this component\r\n     */\n    get: function get() {\n      return this._currentValue;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Dispose this component\r\n   */\n\n  WebXRControllerComponent.prototype.dispose = function () {\n    this.onAxisValueChangedObservable.clear();\n    this.onButtonStateChangedObservable.clear();\n  };\n  /**\r\n   * Are there axes correlating to this component\r\n   * @return true is axes data is available\r\n   */\n\n\n  WebXRControllerComponent.prototype.isAxes = function () {\n    return this._axesIndices.length !== 0;\n  };\n  /**\r\n   * Is this component a button (hence - pressable)\r\n   * @returns true if can be pressed\r\n   */\n\n\n  WebXRControllerComponent.prototype.isButton = function () {\n    return this._buttonIndex !== -1;\n  };\n  /**\r\n   * update this component using the gamepad object it is in. Called on every frame\r\n   * @param nativeController the native gamepad controller object\r\n   */\n\n\n  WebXRControllerComponent.prototype.update = function (nativeController) {\n    var buttonUpdated = false;\n    var axesUpdate = false;\n    this._hasChanges = false;\n    this._changes = {};\n\n    if (this.isButton()) {\n      var button = nativeController.buttons[this._buttonIndex]; // defensive, in case a profile was forced\n\n      if (!button) {\n        return;\n      }\n\n      if (this._currentValue !== button.value) {\n        this.changes.value = {\n          current: button.value,\n          previous: this._currentValue\n        };\n        buttonUpdated = true;\n        this._currentValue = button.value;\n      }\n\n      if (this._touched !== button.touched) {\n        this.changes.touched = {\n          current: button.touched,\n          previous: this._touched\n        };\n        buttonUpdated = true;\n        this._touched = button.touched;\n      }\n\n      if (this._pressed !== button.pressed) {\n        this.changes.pressed = {\n          current: button.pressed,\n          previous: this._pressed\n        };\n        buttonUpdated = true;\n        this._pressed = button.pressed;\n      }\n    }\n\n    if (this.isAxes()) {\n      if (this._axes.x !== nativeController.axes[this._axesIndices[0]]) {\n        this.changes.axes = {\n          current: {\n            x: nativeController.axes[this._axesIndices[0]],\n            y: this._axes.y\n          },\n          previous: {\n            x: this._axes.x,\n            y: this._axes.y\n          }\n        };\n        this._axes.x = nativeController.axes[this._axesIndices[0]];\n        axesUpdate = true;\n      }\n\n      if (this._axes.y !== nativeController.axes[this._axesIndices[1]]) {\n        if (this.changes.axes) {\n          this.changes.axes.current.y = nativeController.axes[this._axesIndices[1]];\n        } else {\n          this.changes.axes = {\n            current: {\n              x: this._axes.x,\n              y: nativeController.axes[this._axesIndices[1]]\n            },\n            previous: {\n              x: this._axes.x,\n              y: this._axes.y\n            }\n          };\n        }\n\n        this._axes.y = nativeController.axes[this._axesIndices[1]];\n        axesUpdate = true;\n      }\n    }\n\n    if (buttonUpdated) {\n      this._hasChanges = true;\n      this.onButtonStateChangedObservable.notifyObservers(this);\n    }\n\n    if (axesUpdate) {\n      this._hasChanges = true;\n      this.onAxisValueChangedObservable.notifyObservers(this._axes);\n    }\n  };\n  /**\r\n   * button component type\r\n   */\n\n\n  WebXRControllerComponent.BUTTON_TYPE = \"button\";\n  /**\r\n   * squeeze component type\r\n   */\n\n  WebXRControllerComponent.SQUEEZE_TYPE = \"squeeze\";\n  /**\r\n   * Thumbstick component type\r\n   */\n\n  WebXRControllerComponent.THUMBSTICK_TYPE = \"thumbstick\";\n  /**\r\n   * Touchpad component type\r\n   */\n\n  WebXRControllerComponent.TOUCHPAD_TYPE = \"touchpad\";\n  /**\r\n   * trigger component type\r\n   */\n\n  WebXRControllerComponent.TRIGGER_TYPE = \"trigger\";\n  return WebXRControllerComponent;\n}();\n\nexport { WebXRControllerComponent };","map":null,"metadata":{},"sourceType":"module"}