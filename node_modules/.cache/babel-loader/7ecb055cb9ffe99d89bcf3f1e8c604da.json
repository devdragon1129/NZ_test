{"ast":null,"code":"export var SIDEBAR_ITEM_SOURCE = 'SIDEBAR_ITEM_SOURCE';\nexport var sidebarItemSource = {\n  beginDrag: function beginDrag(props) {\n    return {\n      item: props.item\n    };\n  },\n  canDrag: function canDrag(props) {\n    return props.selectedCollectionId === null;\n  }\n}; // @ts-ignore\n\nexport var collect = function collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging()\n  };\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/ItemEditorPage/LeftPanel/Items/SidebarItem/SidebarItem.dnd.ts"],"names":["SIDEBAR_ITEM_SOURCE","sidebarItemSource","beginDrag","props","item","canDrag","selectedCollectionId","collect","connect","monitor","connectDragSource","dragSource","connectDragPreview","dragPreview","isDragging"],"mappings":"AAKA,OAAO,IAAMA,mBAAmB,GAAG,qBAA5B;AAYP,OAAO,IAAMC,iBAA+D,GAAG;AAC7EC,EAAAA,SAD6E,qBACnEC,KADmE,EAC5D;AACf,WAAO;AACLC,MAAAA,IAAI,EAAED,KAAK,CAACC;AADP,KAAP;AAGD,GAL4E;AAM7EC,EAAAA,OAN6E,mBAMrEF,KANqE,EAM9D;AACb,WAAOA,KAAK,CAACG,oBAAN,KAA+B,IAAtC;AACD;AAR4E,CAAxE,C,CAWP;;AACA,OAAO,IAAMC,OAA4C,GAAG,SAA/CA,OAA+C,CAACC,OAAD,EAAUC,OAAV,EAAsB;AAChF,SAAO;AACLC,IAAAA,iBAAiB,EAAEF,OAAO,CAACG,UAAR,EADd;AAELC,IAAAA,kBAAkB,EAAEJ,OAAO,CAACK,WAAR,EAFf;AAGLC,IAAAA,UAAU,EAAEL,OAAO,CAACK,UAAR;AAHP,GAAP;AAKD,CANM","sourcesContent":["import { DragSourceSpec, DragSourceCollector, ConnectDragSource, ConnectDragPreview } from 'react-dnd'\n\nimport { Item } from 'modules/item/types'\nimport { Props } from './SidebarItem.types'\n\nexport const SIDEBAR_ITEM_SOURCE = 'SIDEBAR_ITEM_SOURCE'\n\nexport type SidebarItemDragObject = {\n  item: Item\n}\n\nexport type CollectedProps = {\n  connectDragSource: ConnectDragSource\n  connectDragPreview: ConnectDragPreview\n  isDragging: boolean\n}\n\nexport const sidebarItemSource: DragSourceSpec<Props, SidebarItemDragObject> = {\n  beginDrag(props) {\n    return {\n      item: props.item\n    }\n  },\n  canDrag(props) {\n    return props.selectedCollectionId === null\n  }\n}\n\n// @ts-ignore\nexport const collect: DragSourceCollector<CollectedProps> = (connect, monitor) => {\n  return {\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}