{"ast":null,"code":"import { Vector3 } from \"../Maths/math.vector\";\n/**\r\n * Class used to explode meshes (ie. to have a center and move them away from that center to better see the overall organization)\r\n */\n\nvar MeshExploder =\n/** @class */\nfunction () {\n  /**\r\n   * Explodes meshes from a center mesh.\r\n   * @param meshes The meshes to explode.\r\n   * @param centerMesh The mesh to be center of explosion.\r\n   */\n  function MeshExploder(meshes, centerMesh) {\n    this._meshesOrigins = [];\n    this._toCenterVectors = [];\n    this._scaledDirection = Vector3.Zero();\n    this._newPosition = Vector3.Zero();\n    this._centerPosition = Vector3.Zero();\n    this._meshes = meshes.slice();\n\n    if (centerMesh) {\n      this._centerMesh = centerMesh;\n    } else {\n      this._setCenterMesh();\n    }\n\n    var centerMeshIndex = this._meshes.indexOf(this._centerMesh);\n\n    if (centerMeshIndex >= 0) {\n      this._meshes.splice(centerMeshIndex, 1);\n    }\n\n    this._centerPosition = this._centerMesh.getAbsolutePosition().clone();\n\n    for (var index = 0; index < this._meshes.length; index++) {\n      if (this._meshes[index]) {\n        var mesh = this._meshes[index];\n        this._meshesOrigins[index] = mesh.getAbsolutePosition().clone();\n        this._toCenterVectors[index] = Vector3.Zero();\n\n        if (mesh._boundingInfo && this._centerMesh._boundingInfo) {\n          mesh._boundingInfo.boundingBox.centerWorld.subtractToRef(this._centerMesh._boundingInfo.boundingBox.centerWorld, this._toCenterVectors[index]);\n        }\n      }\n    }\n  }\n\n  MeshExploder.prototype._setCenterMesh = function () {\n    var averageCenter = Vector3.Zero();\n    var totalCenters = Vector3.Zero();\n    var shortestToCenter = Number.MAX_VALUE;\n\n    for (var index = 0; index < this._meshes.length; index++) {\n      if (this._meshes[index]) {\n        var mesh = this._meshes[index];\n        var boundingInfo = mesh.getBoundingInfo();\n\n        if (boundingInfo) {\n          totalCenters.addInPlace(boundingInfo.boundingBox.centerWorld);\n        }\n      }\n    }\n\n    averageCenter = totalCenters.scale(1 / this._meshes.length);\n\n    for (var index = 0; index < this._meshes.length; index++) {\n      if (this._meshes[index]) {\n        var mesh = this._meshes[index];\n        var boundingInfo = mesh.getBoundingInfo();\n\n        if (boundingInfo) {\n          var distanceToCenter = boundingInfo.boundingBox.centerWorld.subtract(averageCenter).lengthSquared();\n\n          if (distanceToCenter < shortestToCenter) {\n            this._centerMesh = mesh;\n            shortestToCenter = distanceToCenter;\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Get class name\r\n   * @returns \"MeshExploder\"\r\n   */\n\n\n  MeshExploder.prototype.getClassName = function () {\n    return \"MeshExploder\";\n  };\n  /**\r\n   * \"Exploded meshes\"\r\n   * @returns Array of meshes with the centerMesh at index 0.\r\n   */\n\n\n  MeshExploder.prototype.getMeshes = function () {\n    var meshArray = this._meshes.slice();\n\n    meshArray.unshift(this._centerMesh);\n    return meshArray;\n  };\n  /**\r\n   * Explodes meshes giving a specific direction\r\n   * @param direction Number to multiply distance of each mesh's origin from center. Use a negative number to implode, or zero to reset.\r\n   */\n\n\n  MeshExploder.prototype.explode = function (direction) {\n    if (direction === void 0) {\n      direction = 1.0;\n    }\n\n    for (var index = 0; index < this._meshes.length; index++) {\n      if (this._meshes[index] && this._meshesOrigins[index] && this._toCenterVectors[index]) {\n        this._toCenterVectors[index].scaleToRef(direction, this._scaledDirection);\n\n        this._meshesOrigins[index].addToRef(this._scaledDirection, this._newPosition);\n\n        this._meshes[index].setAbsolutePosition(this._newPosition);\n      }\n    }\n\n    this._centerMesh.setAbsolutePosition(this._centerPosition);\n  };\n\n  return MeshExploder;\n}();\n\nexport { MeshExploder };","map":null,"metadata":{},"sourceType":"module"}