{"ast":null,"code":"import { connect } from 'react-redux';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { SET_COLLECTION_MANAGERS_REQUEST, setCollectionManagersRequest } from 'modules/collection/actions';\nimport { getCollection, getLoading } from 'modules/collection/selectors';\nimport CollectionManagersModal from './CollectionManagersModal';\n\nvar mapState = function mapState(state, ownProps) {\n  var collectionId = ownProps.metadata.collectionId;\n\n  if (!collectionId) {\n    throw new Error('Invalid collection id to add managers');\n  }\n\n  return {\n    collection: getCollection(state, collectionId),\n    isLoading: isLoadingType(getLoading(state), SET_COLLECTION_MANAGERS_REQUEST)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onSetManagers: function onSetManagers(collection, managers) {\n      return dispatch(setCollectionManagersRequest(collection, managers));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(CollectionManagersModal);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/CollectionManagersModal/CollectionManagersModal.container.ts"],"names":["connect","isLoadingType","SET_COLLECTION_MANAGERS_REQUEST","setCollectionManagersRequest","getCollection","getLoading","CollectionManagersModal","mapState","state","ownProps","collectionId","metadata","Error","collection","isLoading","mapDispatch","dispatch","onSetManagers","managers"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AAEA,SAASC,+BAAT,EAA0CC,4BAA1C,QAA8E,4BAA9E;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAA0C,8BAA1C;AAEA,OAAOC,uBAAP,MAAoC,2BAApC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAmBC,QAAnB,EAAyD;AAAA,MAClEC,YADkE,GACjDD,QAAQ,CAACE,QADwC,CAClED,YADkE;;AAGxE,MAAI,CAACA,YAAL,EAAmB;AACjB,UAAM,IAAIE,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,SAAO;AACLC,IAAAA,UAAU,EAAET,aAAa,CAACI,KAAD,EAAQE,YAAR,CADpB;AAELI,IAAAA,SAAS,EAAEb,aAAa,CAACI,UAAU,CAACG,KAAD,CAAX,EAAoBN,+BAApB;AAFnB,GAAP;AAID,CAXD;;AAaA,IAAMa,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,aAAa,EAAE,uBAACJ,UAAD,EAAaK,QAAb;AAAA,aAA0BF,QAAQ,CAACb,4BAA4B,CAACU,UAAD,EAAaK,QAAb,CAA7B,CAAlC;AAAA;AADiD,GAA9C;AAAA,CAApB;;AAIA,eAAelB,OAAO,CAACO,QAAD,EAAWQ,WAAX,CAAP,CAA+BT,uBAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { RootState } from 'modules/common/types'\nimport { SET_COLLECTION_MANAGERS_REQUEST, setCollectionManagersRequest } from 'modules/collection/actions'\nimport { getCollection, getLoading } from 'modules/collection/selectors'\nimport { MapStateProps, MapDispatchProps, MapDispatch, OwnProps } from './CollectionManagersModal.types'\nimport CollectionManagersModal from './CollectionManagersModal'\n\nconst mapState = (state: RootState, ownProps: OwnProps): MapStateProps => {\n  let { collectionId } = ownProps.metadata\n\n  if (!collectionId) {\n    throw new Error('Invalid collection id to add managers')\n  }\n\n  return {\n    collection: getCollection(state, collectionId)!,\n    isLoading: isLoadingType(getLoading(state), SET_COLLECTION_MANAGERS_REQUEST)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onSetManagers: (collection, managers) => dispatch(setCollectionManagersRequest(collection, managers))\n})\n\nexport default connect(mapState, mapDispatch)(CollectionManagersModal)\n"]},"metadata":{},"sourceType":"module"}