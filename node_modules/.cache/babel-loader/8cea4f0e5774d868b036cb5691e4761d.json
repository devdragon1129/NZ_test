{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/CollectionImage/CollectionImage.tsx\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { Loader } from 'decentraland-ui';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport ItemImage from 'components/ItemImage';\nimport './CollectionImage.css';\nvar MAX_IMAGES_TO_SHOW = 4;\n\nvar CollectionImage = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(CollectionImage, _React$PureComponent);\n\n  function CollectionImage() {\n    _classCallCheck(this, CollectionImage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CollectionImage).apply(this, arguments));\n  }\n\n  _createClass(CollectionImage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var itemCount = this.props.itemCount;\n\n      if (itemCount) {\n        this.fetchItemsIfNeeded(itemCount);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var itemCount = this.props.itemCount;\n\n      if (prevProps.itemCount !== itemCount && itemCount) {\n        this.fetchItemsIfNeeded(itemCount);\n      }\n    }\n  }, {\n    key: \"fetchItemsIfNeeded\",\n    value: function fetchItemsIfNeeded(itemCount) {\n      var _this$props = this.props,\n          collectionId = _this$props.collectionId,\n          items = _this$props.items,\n          onFetchCollectionItems = _this$props.onFetchCollectionItems;\n      var needsToFetchMoreImages = itemCount >= MAX_IMAGES_TO_SHOW && items.length < MAX_IMAGES_TO_SHOW || itemCount < MAX_IMAGES_TO_SHOW && items.length < itemCount;\n\n      if (needsToFetchMoreImages) {\n        onFetchCollectionItems(collectionId, {\n          page: 1,\n          limit: MAX_IMAGES_TO_SHOW\n        }); // fetch just the first page and 4 items to show the images\n      }\n    }\n  }, {\n    key: \"renderItemRow\",\n    value: function renderItemRow(items) {\n      var _this = this;\n\n      return items.map(function (item, index) {\n        return /*#__PURE__*/React.createElement(ItemImage, {\n          key: index,\n          item: item,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 39\n          }\n        });\n      });\n    }\n  }, {\n    key: \"renderItemRows\",\n    value: function renderItemRows(items) {\n      var firstItemRow = items.slice(0, 2);\n      var secondItemRow = items.slice(2, MAX_IMAGES_TO_SHOW);\n      var itemRowStyle = {\n        height: secondItemRow.length ? '50%' : '100%'\n      };\n      return /*#__PURE__*/React.createElement(React.Fragment, null, firstItemRow.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"item-row\",\n        style: itemRowStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }\n      }, this.renderItemRow(firstItemRow)) : null, secondItemRow.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"item-row\",\n        style: itemRowStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }, this.renderItemRow(secondItemRow)) : null);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          items = _this$props2.items,\n          className = _this$props2.className,\n          itemCount = _this$props2.itemCount,\n          isLoading = _this$props2.isLoading;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classNames('CollectionImage', 'is-image', className),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }\n      }, isLoading || itemCount === undefined ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"item-row loading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Loader, {\n        active: true,\n        size: \"tiny\",\n        inline: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      })) : itemCount === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"item-row empty\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sparkles\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      }, t('collection_image.no_items'))) : this.renderItemRows(items));\n    }\n  }]);\n\n  return CollectionImage;\n}(React.PureComponent);\n\nCollectionImage.defaultProps = {\n  className: ''\n};\nexport { CollectionImage as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/CollectionImage/CollectionImage.tsx"],"names":["classNames","React","Loader","t","ItemImage","MAX_IMAGES_TO_SHOW","CollectionImage","itemCount","props","fetchItemsIfNeeded","prevProps","collectionId","items","onFetchCollectionItems","needsToFetchMoreImages","length","page","limit","map","item","index","firstItemRow","slice","secondItemRow","itemRowStyle","height","renderItemRow","className","isLoading","undefined","renderItemRows","PureComponent","defaultProps"],"mappings":"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","sourcesContent":["import classNames from 'classnames'\nimport * as React from 'react'\nimport { Loader } from 'decentraland-ui'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { Item } from 'modules/item/types'\nimport ItemImage from 'components/ItemImage'\nimport { Props } from './CollectionImage.types'\nimport './CollectionImage.css'\n\nconst MAX_IMAGES_TO_SHOW = 4\n\nexport default class CollectionImage extends React.PureComponent<Props> {\n  static defaultProps = {\n    className: ''\n  }\n\n  componentDidMount() {\n    const { itemCount } = this.props\n    if (itemCount) {\n      this.fetchItemsIfNeeded(itemCount)\n    }\n  }\n  componentDidUpdate(prevProps: Props) {\n    const { itemCount } = this.props\n    if (prevProps.itemCount !== itemCount && itemCount) {\n      this.fetchItemsIfNeeded(itemCount)\n    }\n  }\n\n  fetchItemsIfNeeded(itemCount: number) {\n    const { collectionId, items, onFetchCollectionItems } = this.props\n    const needsToFetchMoreImages =\n      (itemCount >= MAX_IMAGES_TO_SHOW && items.length < MAX_IMAGES_TO_SHOW) || (itemCount < MAX_IMAGES_TO_SHOW && items.length < itemCount)\n    if (needsToFetchMoreImages) {\n      onFetchCollectionItems(collectionId, { page: 1, limit: MAX_IMAGES_TO_SHOW }) // fetch just the first page and 4 items to show the images\n    }\n  }\n\n  renderItemRow(items: Item[]) {\n    return items.map((item, index) => <ItemImage key={index} item={item} />)\n  }\n\n  renderItemRows(items: Item[]) {\n    const firstItemRow = items.slice(0, 2)\n    const secondItemRow = items.slice(2, MAX_IMAGES_TO_SHOW)\n    const itemRowStyle = { height: secondItemRow.length ? '50%' : '100%' }\n    return (\n      <>\n        {firstItemRow.length > 0 ? (\n          <div className=\"item-row\" style={itemRowStyle}>\n            {this.renderItemRow(firstItemRow)}\n          </div>\n        ) : null}\n        {secondItemRow.length > 0 ? (\n          <div className=\"item-row\" style={itemRowStyle}>\n            {this.renderItemRow(secondItemRow)}\n          </div>\n        ) : null}\n      </>\n    )\n  }\n\n  render() {\n    const { items, className, itemCount, isLoading } = this.props\n\n    return (\n      <div className={classNames('CollectionImage', 'is-image', className)}>\n        {isLoading || itemCount === undefined ? (\n          <div className=\"item-row loading\">\n            <Loader active size=\"tiny\" inline />\n          </div>\n        ) : itemCount === 0 ? (\n          <div className=\"item-row empty\">\n            <div className=\"sparkles\" />\n            <div>{t('collection_image.no_items')}</div>\n          </div>\n        ) : (\n          this.renderItemRows(items)\n        )}\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}