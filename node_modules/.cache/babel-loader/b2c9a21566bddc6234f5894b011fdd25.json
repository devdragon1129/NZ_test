{"ast":null,"code":"import { AndOrNotEvaluator } from \"./andOrNotEvaluator\";\n/**\r\n * Class used to store custom tags\r\n */\n\nvar Tags =\n/** @class */\nfunction () {\n  function Tags() {}\n  /**\r\n   * Adds support for tags on the given object\r\n   * @param obj defines the object to use\r\n   */\n\n\n  Tags.EnableFor = function (obj) {\n    obj._tags = obj._tags || {};\n\n    obj.hasTags = function () {\n      return Tags.HasTags(obj);\n    };\n\n    obj.addTags = function (tagsString) {\n      return Tags.AddTagsTo(obj, tagsString);\n    };\n\n    obj.removeTags = function (tagsString) {\n      return Tags.RemoveTagsFrom(obj, tagsString);\n    };\n\n    obj.matchesTagsQuery = function (tagsQuery) {\n      return Tags.MatchesQuery(obj, tagsQuery);\n    };\n  };\n  /**\r\n   * Removes tags support\r\n   * @param obj defines the object to use\r\n   */\n\n\n  Tags.DisableFor = function (obj) {\n    delete obj._tags;\n    delete obj.hasTags;\n    delete obj.addTags;\n    delete obj.removeTags;\n    delete obj.matchesTagsQuery;\n  };\n  /**\r\n   * Gets a boolean indicating if the given object has tags\r\n   * @param obj defines the object to use\r\n   * @returns a boolean\r\n   */\n\n\n  Tags.HasTags = function (obj) {\n    if (!obj._tags) {\n      return false;\n    }\n\n    var tags = obj._tags;\n\n    for (var i in tags) {\n      if (tags.hasOwnProperty(i)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\r\n   * Gets the tags available on a given object\r\n   * @param obj defines the object to use\r\n   * @param asString defines if the tags must be returned as a string instead of an array of strings\r\n   * @returns the tags\r\n   */\n\n\n  Tags.GetTags = function (obj, asString) {\n    if (asString === void 0) {\n      asString = true;\n    }\n\n    if (!obj._tags) {\n      return null;\n    }\n\n    if (asString) {\n      var tagsArray = [];\n\n      for (var tag in obj._tags) {\n        if (obj._tags.hasOwnProperty(tag) && obj._tags[tag] === true) {\n          tagsArray.push(tag);\n        }\n      }\n\n      return tagsArray.join(\" \");\n    } else {\n      return obj._tags;\n    }\n  };\n  /**\r\n   * Adds tags to an object\r\n   * @param obj defines the object to use\r\n   * @param tagsString defines the tag string. The tags 'true' and 'false' are reserved and cannot be used as tags.\r\n   * A tag cannot start with '||', '&&', and '!'. It cannot contain whitespaces\r\n   */\n\n\n  Tags.AddTagsTo = function (obj, tagsString) {\n    if (!tagsString) {\n      return;\n    }\n\n    if (typeof tagsString !== \"string\") {\n      return;\n    }\n\n    var tags = tagsString.split(\" \");\n    tags.forEach(function (tag, index, array) {\n      Tags._AddTagTo(obj, tag);\n    });\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  Tags._AddTagTo = function (obj, tag) {\n    tag = tag.trim();\n\n    if (tag === \"\" || tag === \"true\" || tag === \"false\") {\n      return;\n    }\n\n    if (tag.match(/[\\s]/) || tag.match(/^([!]|([|]|[&]){2})/)) {\n      return;\n    }\n\n    Tags.EnableFor(obj);\n    obj._tags[tag] = true;\n  };\n  /**\r\n   * Removes specific tags from a specific object\r\n   * @param obj defines the object to use\r\n   * @param tagsString defines the tags to remove\r\n   */\n\n\n  Tags.RemoveTagsFrom = function (obj, tagsString) {\n    if (!Tags.HasTags(obj)) {\n      return;\n    }\n\n    var tags = tagsString.split(\" \");\n\n    for (var t in tags) {\n      Tags._RemoveTagFrom(obj, tags[t]);\n    }\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  Tags._RemoveTagFrom = function (obj, tag) {\n    delete obj._tags[tag];\n  };\n  /**\r\n   * Defines if tags hosted on an object match a given query\r\n   * @param obj defines the object to use\r\n   * @param tagsQuery defines the tag query\r\n   * @returns a boolean\r\n   */\n\n\n  Tags.MatchesQuery = function (obj, tagsQuery) {\n    if (tagsQuery === undefined) {\n      return true;\n    }\n\n    if (tagsQuery === \"\") {\n      return Tags.HasTags(obj);\n    }\n\n    return AndOrNotEvaluator.Eval(tagsQuery, function (r) {\n      return Tags.HasTags(obj) && obj._tags[r];\n    });\n  };\n\n  return Tags;\n}();\n\nexport { Tags };","map":null,"metadata":{},"sourceType":"module"}