{"ast":null,"code":"import { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport { GLTFLoader } from \"../glTFLoader\";\nimport { Color3 } from '@babylonjs/core/Maths/math.color';\nvar NAME = \"KHR_materials_sheen\";\n/**\r\n * [Proposed Specification](https://github.com/KhronosGroup/glTF/pull/1688)\r\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#BNIZX6#4)\r\n * !!! Experimental Extension Subject to Changes !!!\r\n */\n\nvar KHR_materials_sheen =\n/** @class */\nfunction () {\n  /** @hidden */\n  function KHR_materials_sheen(loader) {\n    /**\r\n     * The name of this extension.\r\n     */\n    this.name = NAME;\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\n\n    this.order = 190;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_materials_sheen.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /** @hidden */\n\n\n  KHR_materials_sheen.prototype.loadMaterialPropertiesAsync = function (context, material, babylonMaterial) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, function (extensionContext, extension) {\n      var promises = new Array();\n      promises.push(_this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n      promises.push(_this._loadSheenPropertiesAsync(extensionContext, extension, babylonMaterial));\n      return Promise.all(promises).then(function () {});\n    });\n  };\n\n  KHR_materials_sheen.prototype._loadSheenPropertiesAsync = function (context, properties, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(context + \": Material type not supported\");\n    }\n\n    var promises = new Array();\n    babylonMaterial.sheen.isEnabled = true;\n    babylonMaterial.sheen.intensity = 1;\n\n    if (properties.sheenColorFactor != undefined) {\n      babylonMaterial.sheen.color = Color3.FromArray(properties.sheenColorFactor);\n    } else {\n      babylonMaterial.sheen.color = Color3.Black();\n    }\n\n    if (properties.sheenColorTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(context + \"/sheenColorTexture\", properties.sheenColorTexture, function (texture) {\n        texture.name = babylonMaterial.name + \" (Sheen Color)\";\n        babylonMaterial.sheen.texture = texture;\n      }));\n    }\n\n    if (properties.sheenRoughnessFactor !== undefined) {\n      babylonMaterial.sheen.roughness = properties.sheenRoughnessFactor;\n    } else {\n      babylonMaterial.sheen.roughness = 0;\n    }\n\n    if (properties.sheenRoughnessTexture) {\n      properties.sheenRoughnessTexture.nonColorData = true;\n      promises.push(this._loader.loadTextureInfoAsync(context + \"/sheenRoughnessTexture\", properties.sheenRoughnessTexture, function (texture) {\n        texture.name = babylonMaterial.name + \" (Sheen Roughness)\";\n        babylonMaterial.sheen.textureRoughness = texture;\n      }));\n    }\n\n    babylonMaterial.sheen.albedoScaling = true;\n    babylonMaterial.sheen.useRoughnessFromMainTexture = false;\n    return Promise.all(promises).then(function () {});\n  };\n\n  return KHR_materials_sheen;\n}();\n\nexport { KHR_materials_sheen };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_materials_sheen(loader);\n});","map":null,"metadata":{},"sourceType":"module"}