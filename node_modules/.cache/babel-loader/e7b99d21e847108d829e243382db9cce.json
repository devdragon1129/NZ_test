{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar bip39_1 = tslib_1.__importDefault(require(\"bip39\"));\n\nvar hdkey_1 = tslib_1.__importDefault(require(\"hdkey\"));\n\nvar address_1 = require(\"../address\");\n\nvar account_1 = require(\"../eth-lib/account\");\n\nvar send_tx_1 = require(\"../eth/send-tx\");\n\nvar utils_1 = require(\"../utils\");\n\nvar sign_1 = require(\"../utils/sign\");\n\nvar sign_transaction_1 = require(\"./sign-transaction\");\n\nvar Account = /*#__PURE__*/function () {\n  function Account(address, privateKey, publicKey) {\n    _classCallCheck(this, Account);\n\n    this.address = address;\n    this.privateKey = privateKey;\n    this.publicKey = publicKey;\n  }\n\n  _createClass(Account, [{\n    key: \"sendTransaction\",\n    value: function sendTransaction(tx, eth) {\n      var _this = this;\n\n      var promise = new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {\n          var signedTx;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  _context.next = 3;\n                  return sign_transaction_1.signTransaction(tx, _this.privateKey, eth);\n\n                case 3:\n                  signedTx = _context.sent;\n                  _context.t0 = resolve;\n                  _context.next = 7;\n                  return eth.sendSignedTransaction(signedTx.rawTransaction).getTxHash();\n\n                case 7:\n                  _context.t1 = _context.sent;\n                  (0, _context.t0)(_context.t1);\n                  _context.next = 14;\n                  break;\n\n                case 11:\n                  _context.prev = 11;\n                  _context.t2 = _context[\"catch\"](0);\n                  reject(_context.t2);\n\n                case 14:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[0, 11]]);\n        }));\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      return new send_tx_1.SentTransaction(eth, promise);\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(tx, eth) {\n      return sign_transaction_1.signTransaction(tx, this.privateKey, eth);\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(data) {\n      return sign_1.sign(data, this.privateKey);\n    }\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(password, options) {\n      return utils_1.encrypt(this.privateKey, this.address, password, options);\n    }\n  }], [{\n    key: \"create\",\n    value: function create() {\n      var entropy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : utils_1.randomBuffer(32);\n\n      var _account_1$create = account_1.create(entropy),\n          privateKey = _account_1$create.privateKey,\n          address = _account_1$create.address,\n          publicKey = _account_1$create.publicKey;\n\n      return new Account(address_1.Address.fromString(address), privateKey, publicKey);\n    }\n  }, {\n    key: \"fromPrivate\",\n    value: function fromPrivate(privateKey) {\n      var _account_1$fromPrivat = account_1.fromPrivate(privateKey),\n          address = _account_1$fromPrivat.address,\n          publicKey = _account_1$fromPrivat.publicKey;\n\n      return new Account(address_1.Address.fromString(address), privateKey, publicKey);\n    }\n  }, {\n    key: \"createFromMnemonicAndPath\",\n    value: function createFromMnemonicAndPath(mnemonic, derivationPath) {\n      var seed = bip39_1.default.mnemonicToSeed(mnemonic);\n      return Account.createFromSeedAndPath(seed, derivationPath);\n    }\n  }, {\n    key: \"createFromSeedAndPath\",\n    value: function createFromSeedAndPath(seed, derivationPath) {\n      var root = hdkey_1.default.fromMasterSeed(seed);\n      var addrNode = root.derive(derivationPath);\n      var privateKey = addrNode.privateKey;\n      return Account.fromPrivate(privateKey);\n    }\n  }, {\n    key: \"fromKeystore\",\n    value: function () {\n      var _fromKeystore = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(v3Keystore, password) {\n        var nonStrict,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                nonStrict = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : false;\n                _context2.t0 = Account;\n                _context2.next = 4;\n                return utils_1.decrypt(v3Keystore, password, nonStrict);\n\n              case 4:\n                _context2.t1 = _context2.sent;\n                return _context2.abrupt(\"return\", _context2.t0.fromPrivate.call(_context2.t0, _context2.t1));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function fromKeystore(_x3, _x4) {\n        return _fromKeystore.apply(this, arguments);\n      }\n\n      return fromKeystore;\n    }()\n  }]);\n\n  return Account;\n}();\n\nexports.Account = Account;","map":null,"metadata":{},"sourceType":"script"}