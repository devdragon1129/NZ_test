{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar equal = require(\"fast-deep-equal\");\n\nvar error = {\n  message: \"should be equal to one of the allowed values\",\n  params: function params(_ref) {\n    var schemaCode = _ref.schemaCode;\n    return codegen_1._(_templateObject || (_templateObject = _taggedTemplateLiteral([\"{allowedValues: \", \"}\"])), schemaCode);\n  }\n};\nvar def = {\n  keyword: \"enum\",\n  schemaType: \"array\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var gen = cxt.gen,\n        data = cxt.data,\n        $data = cxt.$data,\n        schema = cxt.schema,\n        schemaCode = cxt.schemaCode,\n        it = cxt.it;\n    if (!$data && schema.length === 0) throw new Error(\"enum must have non-empty array\");\n    var useLoop = schema.length >= it.opts.loopEnum;\n    var eql = cxt.gen.scopeValue(\"func\", {\n      ref: equal,\n      code: codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"require(\\\"ajv/dist/compile/equal\\\")\"])))\n    });\n    var valid;\n\n    if (useLoop || $data) {\n      valid = gen.let(\"valid\");\n      cxt.block$data(valid, loopEnum);\n    } else {\n      /* istanbul ignore if */\n      if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\");\n      var vSchema = gen.const(\"vSchema\", schemaCode);\n      valid = codegen_1.or.apply(codegen_1, _toConsumableArray(schema.map(function (_x, i) {\n        return equalCode(vSchema, i);\n      })));\n    }\n\n    cxt.pass(valid);\n\n    function loopEnum() {\n      gen.assign(valid, false);\n      gen.forOf(\"v\", schemaCode, function (v) {\n        return gen.if(codegen_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \"(\", \", \", \")\"])), eql, data, v), function () {\n          return gen.assign(valid, true).break();\n        });\n      });\n    }\n\n    function equalCode(vSchema, i) {\n      var sch = schema[i];\n      return sch && typeof sch === \"object\" ? codegen_1._(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \"(\", \", \", \"[\", \"])\"])), eql, data, vSchema, i) : codegen_1._(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \" === \", \"\"])), data, sch);\n    }\n  }\n};\nexports.default = def;","map":null,"metadata":{},"sourceType":"script"}