{"ast":null,"code":"import { DeepCopier } from \"../../Misc/deepCopier\";\nimport { Vector3, TmpVectors } from \"../../Maths/math.vector\";\n/**\r\n * Particle emitter emitting particles from a custom list of positions.\r\n */\n\nvar CustomParticleEmitter =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance CustomParticleEmitter\r\n   */\n  function CustomParticleEmitter() {\n    /**\r\n     * Gets or sets the position generator that will create the inital position of each particle.\r\n     * Index will be provided when used with GPU particle. Particle will be provided when used with CPU particles\r\n     */\n    this.particlePositionGenerator = function () {};\n    /**\r\n     * Gets or sets the destination generator that will create the final destination of each particle.\r\n     *  * Index will be provided when used with GPU particle. Particle will be provided when used with CPU particles\r\n     */\n\n\n    this.particleDestinationGenerator = function () {};\n  }\n  /**\r\n   * Called by the particle System when the direction is computed for the created particle.\r\n   * @param worldMatrix is the world matrix of the particle system\r\n   * @param directionToUpdate is the direction vector to update with the result\r\n   * @param particle is the particle we are computed the direction for\r\n   * @param isLocal defines if the direction should be set in local space\r\n   */\n\n\n  CustomParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle, isLocal) {\n    var tmpVector = TmpVectors.Vector3[0];\n\n    if (this.particleDestinationGenerator) {\n      this.particleDestinationGenerator(-1, particle, tmpVector); // Get direction\n\n      var diffVector = TmpVectors.Vector3[1];\n      tmpVector.subtractToRef(particle.position, diffVector);\n      diffVector.scaleToRef(1 / particle.lifeTime, tmpVector);\n    } else {\n      tmpVector.set(0, 0, 0);\n    }\n\n    if (isLocal) {\n      directionToUpdate.copyFrom(tmpVector);\n      return;\n    }\n\n    Vector3.TransformNormalToRef(tmpVector, worldMatrix, directionToUpdate);\n  };\n  /**\r\n   * Called by the particle System when the position is computed for the created particle.\r\n   * @param worldMatrix is the world matrix of the particle system\r\n   * @param positionToUpdate is the position vector to update with the result\r\n   * @param particle is the particle we are computed the position for\r\n   * @param isLocal defines if the position should be set in local space\r\n   */\n\n\n  CustomParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle, isLocal) {\n    var tmpVector = TmpVectors.Vector3[0];\n\n    if (this.particlePositionGenerator) {\n      this.particlePositionGenerator(-1, particle, tmpVector);\n    } else {\n      tmpVector.set(0, 0, 0);\n    }\n\n    if (isLocal) {\n      positionToUpdate.copyFrom(tmpVector);\n      return;\n    }\n\n    Vector3.TransformCoordinatesToRef(tmpVector, worldMatrix, positionToUpdate);\n  };\n  /**\r\n   * Clones the current emitter and returns a copy of it\r\n   * @returns the new emitter\r\n   */\n\n\n  CustomParticleEmitter.prototype.clone = function () {\n    var newOne = new CustomParticleEmitter();\n    DeepCopier.DeepCopy(this, newOne);\n    return newOne;\n  };\n  /**\r\n   * Called by the GPUParticleSystem to setup the update shader\r\n   * @param effect defines the update shader\r\n   */\n\n\n  CustomParticleEmitter.prototype.applyToShader = function (effect) {};\n  /**\r\n   * Returns a string to use to update the GPU particles update shader\r\n   * @returns a string containng the defines string\r\n   */\n\n\n  CustomParticleEmitter.prototype.getEffectDefines = function () {\n    return \"#define CUSTOMEMITTER\";\n  };\n  /**\r\n   * Returns the string \"PointParticleEmitter\"\r\n   * @returns a string containing the class name\r\n   */\n\n\n  CustomParticleEmitter.prototype.getClassName = function () {\n    return \"CustomParticleEmitter\";\n  };\n  /**\r\n   * Serializes the particle system to a JSON object.\r\n   * @returns the JSON object\r\n   */\n\n\n  CustomParticleEmitter.prototype.serialize = function () {\n    var serializationObject = {};\n    serializationObject.type = this.getClassName();\n    return serializationObject;\n  };\n  /**\r\n   * Parse properties from a JSON object\r\n   * @param serializationObject defines the JSON object\r\n   */\n\n\n  CustomParticleEmitter.prototype.parse = function (serializationObject) {};\n\n  return CustomParticleEmitter;\n}();\n\nexport { CustomParticleEmitter };","map":null,"metadata":{},"sourceType":"module"}