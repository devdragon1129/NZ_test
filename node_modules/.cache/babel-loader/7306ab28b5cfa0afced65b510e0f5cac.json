{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nvar RequestError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(RequestError, _Error);\n\n  function RequestError(message, code, data) {\n    var _this;\n\n    _this = _Error.call(this) || this;\n    _this.code = code;\n    _this.data = data;\n    _this.name = _this.constructor.name;\n    _this.message = message;\n    return _this;\n  }\n\n  return RequestError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar MiniRpcProvider = function MiniRpcProvider(chainId, url) {\n  var _this3 = this;\n\n  var _this2 = this;\n\n  this.isMetaMask = false;\n\n  this.sendAsync = function (request, callback) {\n    console.log('sendAsync', request.method, request.params);\n\n    _this2.request(request.method, request.params).then(function (result) {\n      return callback(null, {\n        jsonrpc: '2.0',\n        id: request.id,\n        result: result\n      });\n    })[\"catch\"](function (error) {\n      return callback(error, null);\n    });\n  };\n\n  this.request = function (method, params) {\n    try {\n      if (typeof method !== 'string') {\n        params = method.params;\n        method = method.method;\n      }\n\n      return Promise.resolve(fetch(_this3.url, {\n        method: 'POST',\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method: method,\n          params: params\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })).then(function (response) {\n        if (!response.ok) throw new RequestError(response.status + \": \" + response.statusText, -32000);\n        return Promise.resolve(response.json()).then(function (body) {\n          if ('error' in body) {\n            var _body$error, _body$error2, _body$error3;\n\n            throw new RequestError(body == null ? void 0 : (_body$error = body.error) == null ? void 0 : _body$error.message, body == null ? void 0 : (_body$error2 = body.error) == null ? void 0 : _body$error2.code, body == null ? void 0 : (_body$error3 = body.error) == null ? void 0 : _body$error3.data);\n          } else if ('result' in body) {\n            return body.result;\n          } else {\n            throw new RequestError(\"Received unexpected JSON-RPC response to \" + method + \" request.\", -32000, body);\n          }\n        });\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  this.chainId = chainId;\n  this.url = url;\n  var parsed = new URL(url);\n  this.host = parsed.host;\n  this.path = parsed.pathname;\n};\n\nvar NetworkConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(NetworkConnector, _AbstractConnector);\n\n  function NetworkConnector(_ref) {\n    var _this4;\n\n    var urls = _ref.urls,\n        defaultChainId = _ref.defaultChainId;\n    !(defaultChainId || Object.keys(urls).length === 1) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'defaultChainId is a required argument with >1 url') : invariant(false) : void 0;\n    _this4 = _AbstractConnector.call(this, {\n      supportedChainIds: Object.keys(urls).map(function (k) {\n        return Number(k);\n      })\n    }) || this;\n    _this4.currentChainId = defaultChainId || Number(Object.keys(urls)[0]);\n    _this4.providers = Object.keys(urls).reduce(function (accumulator, chainId) {\n      accumulator[Number(chainId)] = new MiniRpcProvider(Number(chainId), urls[Number(chainId)]);\n      return accumulator;\n    }, {});\n    return _this4;\n  }\n\n  var _proto = NetworkConnector.prototype;\n\n  _proto.activate = function activate() {\n    try {\n      var _this6 = this;\n\n      return Promise.resolve({\n        provider: _this6.providers[_this6.currentChainId],\n        chainId: _this6.currentChainId,\n        account: null\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this8 = this;\n\n      return Promise.resolve(_this8.providers[_this8.currentChainId]);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this10 = this;\n\n      return Promise.resolve(_this10.currentChainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    return Promise.resolve(null);\n  };\n\n  _proto.deactivate = function deactivate() {\n    return;\n  };\n\n  _proto.changeChainId = function changeChainId(chainId) {\n    !Object.keys(this.providers).includes(chainId.toString()) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"No url found for chainId \" + chainId) : invariant(false) : void 0;\n    this.currentChainId = chainId;\n    this.emitUpdate({\n      provider: this.providers[this.currentChainId],\n      chainId: chainId\n    });\n  };\n\n  return NetworkConnector;\n}(AbstractConnector);\n\nexport { NetworkConnector, RequestError };","map":null,"metadata":{},"sourceType":"module"}