{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/tonemap.fragment\";\n/** Defines operator used for tonemapping */\n\nexport var TonemappingOperator;\n\n(function (TonemappingOperator) {\n  /** Hable */\n  TonemappingOperator[TonemappingOperator[\"Hable\"] = 0] = \"Hable\";\n  /** Reinhard */\n\n  TonemappingOperator[TonemappingOperator[\"Reinhard\"] = 1] = \"Reinhard\";\n  /** HejiDawson */\n\n  TonemappingOperator[TonemappingOperator[\"HejiDawson\"] = 2] = \"HejiDawson\";\n  /** Photographic */\n\n  TonemappingOperator[TonemappingOperator[\"Photographic\"] = 3] = \"Photographic\";\n})(TonemappingOperator || (TonemappingOperator = {}));\n/**\r\n * Defines a post process to apply tone mapping\r\n */\n\n\nvar TonemapPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(TonemapPostProcess, _super);\n  /**\r\n   * Creates a new TonemapPostProcess\r\n   * @param name defines the name of the postprocess\r\n   * @param _operator defines the operator to use\r\n   * @param exposureAdjustment defines the required exposure adjustement\r\n   * @param camera defines the camera to use (can be null)\r\n   * @param samplingMode defines the required sampling mode (BABYLON.Texture.BILINEAR_SAMPLINGMODE by default)\r\n   * @param engine defines the hosting engine (can be ignore if camera is set)\r\n   * @param textureFormat defines the texture format to use (BABYLON.Engine.TEXTURETYPE_UNSIGNED_INT by default)\r\n   */\n\n\n  function TonemapPostProcess(name, _operator,\n  /** Defines the required exposure adjustement */\n  exposureAdjustment, camera, samplingMode, engine, textureFormat) {\n    if (samplingMode === void 0) {\n      samplingMode = 2;\n    }\n\n    if (textureFormat === void 0) {\n      textureFormat = 0;\n    }\n\n    var _this = _super.call(this, name, \"tonemap\", [\"_ExposureAdjustment\"], null, 1.0, camera, samplingMode, engine, true, null, textureFormat) || this;\n\n    _this._operator = _operator;\n    _this.exposureAdjustment = exposureAdjustment;\n    var defines = \"#define \";\n\n    if (_this._operator === TonemappingOperator.Hable) {\n      defines += \"HABLE_TONEMAPPING\";\n    } else if (_this._operator === TonemappingOperator.Reinhard) {\n      defines += \"REINHARD_TONEMAPPING\";\n    } else if (_this._operator === TonemappingOperator.HejiDawson) {\n      defines += \"OPTIMIZED_HEJIDAWSON_TONEMAPPING\";\n    } else if (_this._operator === TonemappingOperator.Photographic) {\n      defines += \"PHOTOGRAPHIC_TONEMAPPING\";\n    } //sadly a second call to create the effect.\n\n\n    _this.updateEffect(defines);\n\n    _this.onApply = function (effect) {\n      effect.setFloat(\"_ExposureAdjustment\", _this.exposureAdjustment);\n    };\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"TonemapPostProcess\" string\r\n   */\n\n\n  TonemapPostProcess.prototype.getClassName = function () {\n    return \"TonemapPostProcess\";\n  };\n\n  return TonemapPostProcess;\n}(PostProcess);\n\nexport { TonemapPostProcess };","map":null,"metadata":{},"sourceType":"module"}