{"ast":null,"code":"import { Plane } from './math.plane';\n/**\r\n * Represents a camera frustum\r\n */\n\nvar Frustum =\n/** @class */\nfunction () {\n  function Frustum() {}\n  /**\r\n   * Gets the planes representing the frustum\r\n   * @param transform matrix to be applied to the returned planes\r\n   * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\r\n   */\n\n\n  Frustum.GetPlanes = function (transform) {\n    var frustumPlanes = [];\n\n    for (var index = 0; index < 6; index++) {\n      frustumPlanes.push(new Plane(0.0, 0.0, 0.0, 0.0));\n    }\n\n    Frustum.GetPlanesToRef(transform, frustumPlanes);\n    return frustumPlanes;\n  };\n  /**\r\n   * Gets the near frustum plane transformed by the transform matrix\r\n   * @param transform transformation matrix to be applied to the resulting frustum plane\r\n   * @param frustumPlane the resuling frustum plane\r\n   */\n\n\n  Frustum.GetNearPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] + m[2];\n    frustumPlane.normal.y = m[7] + m[6];\n    frustumPlane.normal.z = m[11] + m[10];\n    frustumPlane.d = m[15] + m[14];\n    frustumPlane.normalize();\n  };\n  /**\r\n   * Gets the far frustum plane transformed by the transform matrix\r\n   * @param transform transformation matrix to be applied to the resulting frustum plane\r\n   * @param frustumPlane the resuling frustum plane\r\n   */\n\n\n  Frustum.GetFarPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] - m[2];\n    frustumPlane.normal.y = m[7] - m[6];\n    frustumPlane.normal.z = m[11] - m[10];\n    frustumPlane.d = m[15] - m[14];\n    frustumPlane.normalize();\n  };\n  /**\r\n   * Gets the left frustum plane transformed by the transform matrix\r\n   * @param transform transformation matrix to be applied to the resulting frustum plane\r\n   * @param frustumPlane the resuling frustum plane\r\n   */\n\n\n  Frustum.GetLeftPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] + m[0];\n    frustumPlane.normal.y = m[7] + m[4];\n    frustumPlane.normal.z = m[11] + m[8];\n    frustumPlane.d = m[15] + m[12];\n    frustumPlane.normalize();\n  };\n  /**\r\n   * Gets the right frustum plane transformed by the transform matrix\r\n   * @param transform transformation matrix to be applied to the resulting frustum plane\r\n   * @param frustumPlane the resuling frustum plane\r\n   */\n\n\n  Frustum.GetRightPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] - m[0];\n    frustumPlane.normal.y = m[7] - m[4];\n    frustumPlane.normal.z = m[11] - m[8];\n    frustumPlane.d = m[15] - m[12];\n    frustumPlane.normalize();\n  };\n  /**\r\n   * Gets the top frustum plane transformed by the transform matrix\r\n   * @param transform transformation matrix to be applied to the resulting frustum plane\r\n   * @param frustumPlane the resuling frustum plane\r\n   */\n\n\n  Frustum.GetTopPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] - m[1];\n    frustumPlane.normal.y = m[7] - m[5];\n    frustumPlane.normal.z = m[11] - m[9];\n    frustumPlane.d = m[15] - m[13];\n    frustumPlane.normalize();\n  };\n  /**\r\n   * Gets the bottom frustum plane transformed by the transform matrix\r\n   * @param transform transformation matrix to be applied to the resulting frustum plane\r\n   * @param frustumPlane the resuling frustum plane\r\n   */\n\n\n  Frustum.GetBottomPlaneToRef = function (transform, frustumPlane) {\n    var m = transform.m;\n    frustumPlane.normal.x = m[3] + m[1];\n    frustumPlane.normal.y = m[7] + m[5];\n    frustumPlane.normal.z = m[11] + m[9];\n    frustumPlane.d = m[15] + m[13];\n    frustumPlane.normalize();\n  };\n  /**\r\n   * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\r\n   * @param transform transformation matrix to be applied to the resulting frustum planes\r\n   * @param frustumPlanes the resuling frustum planes\r\n   */\n\n\n  Frustum.GetPlanesToRef = function (transform, frustumPlanes) {\n    // Near\n    Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]); // Far\n\n    Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]); // Left\n\n    Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]); // Right\n\n    Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]); // Top\n\n    Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]); // Bottom\n\n    Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\n  };\n\n  return Frustum;\n}();\n\nexport { Frustum };","map":null,"metadata":{},"sourceType":"module"}