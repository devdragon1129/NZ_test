{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTrailingZeros = exports.toFixedMANAValue = exports.MAXIMUM_FRACTION_DIGITS = void 0; // Careful! This value is normally later formated by `toLocaleString` **but** if it ever goes above 3 (the default min maximumFractionDigits),\n// we should review every call to `toLocaleString` as it will round up values beyond that decimal point\n\nexports.MAXIMUM_FRACTION_DIGITS = 2;\n/**\n * Parses the mana value with the supplied amount of decimals. It uses MAXIMUM_FRACTION_DIGITS as a default (recommended).\n * It'll return the value as is if it's an invalid number or it doesn't have more than decimals than the upper limit.\n */\n\nfunction toFixedMANAValue(strValue) {\n  var maximumFractionDigits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.MAXIMUM_FRACTION_DIGITS;\n  var value = parseFloat(strValue);\n\n  if (!isNaN(value)) {\n    var decimals = value.toString().split('.')[1];\n    var decimalsCount = decimals ? decimals.length : 0;\n    var trailingZeros = getTrailingZeros(strValue);\n\n    if (trailingZeros + decimalsCount >= maximumFractionDigits) {\n      return value.toFixed(maximumFractionDigits);\n    }\n  }\n\n  return strValue;\n}\n\nexports.toFixedMANAValue = toFixedMANAValue;\n/**\n * Returns the amount of trailing zeros\n */\n\nfunction getTrailingZeros(strValue) {\n  // count zeros\n  var zeros = 0; // parse string value to remove trailing zeros\n\n  var parsed = parseFloat(strValue); // remove parsed value from original string value (ie. string value is \"1.0576000\" and parsed is \"1.0576\" the rest would be \"000\")\n\n  var rest = strValue.split(parsed.toString()).pop(); // if after removing the parsed value there's nothing left, return 0\n\n  if (!rest) {\n    return 0;\n  } // if the first char is a dot, skip it (this would be the case for an integer with decimals, like \"1.00\")\n\n\n  if (rest[0] === '.') {\n    rest = rest.slice(1);\n  } // count zeros\n\n\n  while (rest[0] === '0') {\n    zeros++;\n    rest = rest.slice(1);\n  } // return amount\n\n\n  return zeros;\n}\n\nexports.getTrailingZeros = getTrailingZeros;","map":null,"metadata":{},"sourceType":"script"}