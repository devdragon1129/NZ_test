{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"ajv/dist/compile/codegen\");\n\nvar transform = {\n  trimStart: function trimStart(s) {\n    return s.trimStart();\n  },\n  trimEnd: function trimEnd(s) {\n    return s.trimEnd();\n  },\n  trimLeft: function trimLeft(s) {\n    return s.trimStart();\n  },\n  trimRight: function trimRight(s) {\n    return s.trimEnd();\n  },\n  trim: function trim(s) {\n    return s.trim();\n  },\n  toLowerCase: function toLowerCase(s) {\n    return s.toLowerCase();\n  },\n  toUpperCase: function toUpperCase(s) {\n    return s.toUpperCase();\n  },\n  toEnumCase: function toEnumCase(s, cfg) {\n    return (cfg === null || cfg === void 0 ? void 0 : cfg.hash[configKey(s)]) || s;\n  }\n};\nvar getDef = Object.assign(_getDef, {\n  transform: transform\n});\n\nfunction _getDef() {\n  return {\n    keyword: \"transform\",\n    schemaType: \"array\",\n    before: \"enum\",\n    code: function code(cxt) {\n      var gen = cxt.gen,\n          data = cxt.data,\n          schema = cxt.schema,\n          parentSchema = cxt.parentSchema,\n          it = cxt.it;\n      var parentData = it.parentData,\n          parentDataProperty = it.parentDataProperty;\n      var tNames = schema;\n      if (!tNames.length) return;\n      var cfg;\n\n      if (tNames.includes(\"toEnumCase\")) {\n        var config = getEnumCaseCfg(parentSchema);\n        cfg = gen.scopeValue(\"obj\", {\n          ref: config,\n          code: codegen_1.stringify(config)\n        });\n      }\n\n      gen.if(codegen_1._(_templateObject || (_templateObject = _taggedTemplateLiteral([\"typeof \", \" == \\\"string\\\" && \", \" !== undefined\"])), data, parentData), function () {\n        gen.assign(data, transformExpr(tNames));\n        gen.assign(codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\", \"[\", \"]\"])), parentData, parentDataProperty), data);\n      });\n\n      function transformExpr(ts) {\n        if (!ts.length) return data;\n        var t = ts.pop();\n        if (!(t in transform)) throw new Error(\"transform: unknown transformation \".concat(t));\n        var func = gen.scopeValue(\"func\", {\n          ref: transform[t],\n          code: codegen_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"require(\\\"ajv-keywords/dist/definitions/transform\\\").transform\", \"\"])), codegen_1.getProperty(t))\n        });\n        var arg = transformExpr(ts);\n        return cfg && t === \"toEnumCase\" ? codegen_1._(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \"(\", \", \", \")\"])), func, arg, cfg) : codegen_1._(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \"(\", \")\"])), func, arg);\n      }\n    },\n    metaSchema: {\n      type: \"array\",\n      items: {\n        type: \"string\",\n        enum: Object.keys(transform)\n      }\n    }\n  };\n}\n\nfunction getEnumCaseCfg(parentSchema) {\n  // build hash table to enum values\n  var cfg = {\n    hash: {}\n  }; // requires `enum` in the same schema as transform\n\n  if (!parentSchema.enum) throw new Error('transform: \"toEnumCase\" requires \"enum\"');\n\n  var _iterator = _createForOfIteratorHelper(parentSchema.enum),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var v = _step.value;\n      if (typeof v !== \"string\") continue;\n      var k = configKey(v); // requires all `enum` values have unique keys\n\n      if (cfg.hash[k]) {\n        throw new Error('transform: \"toEnumCase\" requires all lowercased \"enum\" values to be unique');\n      }\n\n      cfg.hash[k] = v;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return cfg;\n}\n\nfunction configKey(s) {\n  return s.toLowerCase();\n}\n\nexports.default = getDef;\nmodule.exports = getDef;","map":null,"metadata":{},"sourceType":"script"}