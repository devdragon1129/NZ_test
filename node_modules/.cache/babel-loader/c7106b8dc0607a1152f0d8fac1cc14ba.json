{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/LandDetailPage/LandDetailPage.tsx\";\nimport * as React from 'react';\nimport { Row, Badge, Section, Narrow, Column, Button, Dropdown, Icon, Header, Empty, Stats } from 'decentraland-ui';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { LandType, RoleType } from 'modules/land/types';\nimport { coordsToId, hoverStrokeByRole, hoverFillByRole } from 'modules/land/utils';\nimport { Atlas } from 'components/Atlas';\nimport { locations } from 'routing/locations';\nimport LandProviderPage from 'components/LandProviderPage';\nimport Back from 'components/Back';\nimport Profile from 'components/Profile';\nimport JumpIn from 'components/JumpIn';\nimport ENSChip from './ENSChip';\nimport Scene from './Scene';\nimport './LandDetailPage.css';\n\nvar LandDetailPage = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(LandDetailPage, _React$PureComponent);\n\n  function LandDetailPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LandDetailPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LandDetailPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      hovered: null,\n      mouseX: 0,\n      mouseY: 0,\n      showTooltip: false\n    };\n\n    _this.handleMouseEnter = function (deployment) {\n      _this.setState({\n        hovered: deployment,\n        showTooltip: false\n      });\n    };\n\n    _this.handleMouseLeave = function () {\n      _this.setState({\n        hovered: null,\n        showTooltip: false\n      });\n    };\n\n    _this.handleMouseMove = function (event) {\n      _this.setState({\n        mouseX: event.clientX,\n        mouseY: event.clientY\n      });\n    };\n\n    _this.handleHover = function (deployments) {\n      return function (x, y) {\n        var deploymentsByCoord = _this.props.deploymentsByCoord;\n        var deployment = deploymentsByCoord[coordsToId(x, y)];\n\n        if (deployment && deployments.some(function (_deployment) {\n          return _deployment.id === deployment.id;\n        })) {\n          _this.setState({\n            hovered: deployment,\n            showTooltip: true\n          });\n        } else {\n          _this.setState({\n            hovered: null,\n            showTooltip: false\n          });\n        }\n      };\n    };\n\n    _this.handleClick = function (x, y) {\n      var _this$props = _this.props,\n          deploymentsByCoord = _this$props.deploymentsByCoord,\n          projects = _this$props.projects,\n          onNavigate = _this$props.onNavigate,\n          onReplace = _this$props.onReplace,\n          landTiles = _this$props.landTiles;\n      var id = coordsToId(x, y);\n      var deployment = deploymentsByCoord[id];\n\n      if (deployment && deployment.projectId && deployment.projectId in projects) {\n        onNavigate(locations.sceneDetail(deployment.projectId));\n      } else if (id in landTiles) {\n        onReplace(locations.landDetail(landTiles[id].land.id));\n      }\n    };\n\n    _this.isHovered = function (x, y) {\n      var deploymentsByCoord = _this.props.deploymentsByCoord;\n      var hovered = _this.state.hovered;\n      var id = coordsToId(x, y);\n      var deployment = deploymentsByCoord[id];\n      return !!deployment && !!hovered && hovered.id === deployment.id;\n    };\n\n    _this.getHoverStrokeLayer = function (land) {\n      return function (x, y) {\n        return _this.isHovered(x, y) ? {\n          color: hoverStrokeByRole[land.role],\n          scale: 1.4\n        } : null;\n      };\n    };\n\n    _this.getHoverFillLayer = function (land) {\n      return function (x, y) {\n        return _this.isHovered(x, y) ? {\n          color: hoverFillByRole[land.role],\n          scale: 1.2\n        } : null;\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(LandDetailPage, [{\n    key: \"computeOccupiedLand\",\n    value: function computeOccupiedLand(land, deployments) {\n      var landTiles = this.props.landTiles;\n      var occupiedTotal = deployments.reduce(function (total, deployment) {\n        return total + deployment.parcels.filter(function (coords) {\n          var tile = landTiles[coords];\n          return !!tile && tile.land.id === land.id;\n        }).length;\n      }, 0);\n      return occupiedTotal;\n    }\n  }, {\n    key: \"renderDetail\",\n    value: function renderDetail(land, deployments) {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          ensList = _this$props2.ensList,\n          parcelsAvailableToBuildEstates = _this$props2.parcelsAvailableToBuildEstates,\n          projects = _this$props2.projects,\n          onNavigate = _this$props2.onNavigate,\n          onOpenModal = _this$props2.onOpenModal;\n      var _this$state = this.state,\n          hovered = _this$state.hovered,\n          mouseX = _this$state.mouseX,\n          mouseY = _this$state.mouseY,\n          showTooltip = _this$state.showTooltip;\n      var occupiedTotal = this.computeOccupiedLand(land, deployments);\n      var canBuildEstate = parcelsAvailableToBuildEstates[land.id];\n      var isAtlasClickable = showTooltip && hovered && hovered.projectId && hovered.projectId in projects;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, hovered && showTooltip ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"tooltip\",\n        style: {\n          top: mouseY,\n          left: mouseX\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }\n      }, hovered.thumbnail ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"thumbnail\",\n        style: {\n          backgroundImage: \"url(\".concat(hovered.thumbnail, \")\")\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 34\n        }\n      }) : null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }\n      }, hovered.name)) : null, /*#__PURE__*/React.createElement(Section, {\n        size: \"large\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Back, {\n        absolute: true,\n        onClick: function onClick() {\n          return onNavigate(locations.land());\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Narrow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Header, {\n        size: \"huge\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }\n      }, land.name), land.type === LandType.PARCEL ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Badge, {\n        color: \"#37333D\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"pin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 27\n        }\n      }), land.id)) : /*#__PURE__*/React.createElement(Badge, {\n        color: \"#37333D\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 23\n        }\n      }, land.size, \" LAND\"), /*#__PURE__*/React.createElement(JumpIn, {\n        land: land,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }\n      }))), land.role === RoleType.OWNER ? /*#__PURE__*/React.createElement(Column, {\n        className: \"actions\",\n        align: \"right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        basic: true,\n        onClick: function onClick() {\n          return onNavigate(locations.landTransfer(land.id));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 23\n        }\n      }, t('land_detail_page.transfer')), /*#__PURE__*/React.createElement(Button, {\n        basic: true,\n        onClick: function onClick() {\n          return onNavigate(locations.landEdit(land.id));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 23\n        }\n      }, t('global.edit')), /*#__PURE__*/React.createElement(Dropdown, {\n        trigger: /*#__PURE__*/React.createElement(Button, {\n          basic: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 27\n          }\n        }, /*#__PURE__*/React.createElement(Icon, {\n          name: \"ellipsis horizontal\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 29\n          }\n        })),\n        inline: true,\n        direction: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(Dropdown.Menu, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }\n      }, canBuildEstate ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Dropdown.Item, {\n        text: t('land_detail_page.build_estate'),\n        onClick: function onClick() {\n          return onOpenModal('EstateEditorModal', {\n            land: land\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 31\n        }\n      }), /*#__PURE__*/React.createElement(Dropdown.Divider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 31\n        }\n      })) : null, land.type === LandType.ESTATE ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Dropdown.Item, {\n        text: t('land_detail_page.add_or_remove_parcels'),\n        onClick: function onClick() {\n          return onOpenModal('EstateEditorModal', {\n            land: land\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 31\n        }\n      }), /*#__PURE__*/React.createElement(Dropdown.Item, {\n        text: t('land_detail_page.dissolve_estate'),\n        onClick: function onClick() {\n          return onOpenModal('DissolveModal', {\n            land: land\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 31\n        }\n      }), /*#__PURE__*/React.createElement(Dropdown.Divider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 31\n        }\n      })) : null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Dropdown.Item, {\n        text: t('land_detail_page.assign_name'),\n        onClick: function onClick() {\n          return onNavigate(locations.landSelectENS(land.id));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(Dropdown.Divider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Dropdown.Item, {\n        text: t('land_detail_page.set_operator'),\n        onClick: function onClick() {\n          return onNavigate(locations.landOperator(land.id));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 27\n        }\n      }))))) : null)))), /*#__PURE__*/React.createElement(Narrow, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Section, {\n        size: \"large\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"atlas-wrapper \".concat(isAtlasClickable ? 'clickable' : ''),\n        onMouseLeave: this.handleMouseLeave,\n        onMouseMove: this.handleMouseMove,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Atlas, {\n        landId: land.id,\n        layers: [this.getHoverStrokeLayer(land), this.getHoverFillLayer(land)],\n        isDraggable: true,\n        zoom: land.size && land.size >= 1000 ? 0.5 : 1,\n        onHover: this.handleHover(deployments),\n        onClick: this.handleClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(Section, {\n        size: \"large\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Header, {\n        sub: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }\n      }, t('land_detail_page.online_scenes')), deployments.length === 0 ? /*#__PURE__*/React.createElement(Empty, {\n        height: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }\n      }, t('land_detail_page.none')) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"deployments\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 17\n        }\n      }, deployments.map(function (deployment) {\n        return /*#__PURE__*/React.createElement(Scene, {\n          key: deployment.id,\n          deployment: deployment,\n          onMouseEnter: _this2.handleMouseEnter,\n          onMouseLeave: _this2.handleMouseLeave,\n          onNavigate: onNavigate,\n          onOpenModal: onOpenModal,\n          projects: projects,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 21\n          }\n        });\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"notice\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 17\n        }\n      }, t('analytics.notice')))), ensList.length > 0 ? /*#__PURE__*/React.createElement(Section, {\n        size: \"large\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Header, {\n        sub: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Column, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 19\n        }\n      }, t('land_detail_page.assigned_names')))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ens-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 15\n        }\n      }, ensList.map(function (ens) {\n        return /*#__PURE__*/React.createElement(ENSChip, {\n          key: ens.subdomain,\n          ens: ens,\n          onIconClick: function onIconClick() {\n            return onOpenModal('UnsetENSContentModal', {\n              ens: ens,\n              land: land\n            });\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 19\n          }\n        });\n      }))) : null, land.description ? /*#__PURE__*/React.createElement(Section, {\n        size: \"large\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Header, {\n        sub: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 15\n        }\n      }, t('land_detail_page.description')), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 15\n        }\n      }, land.description)) : null, /*#__PURE__*/React.createElement(Section, {\n        className: \"data\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Stats, {\n        title: t('land_detail_page.owner'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Profile, {\n        address: land.owner,\n        size: \"large\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 15\n        }\n      })), land.operators.length > 0 ? /*#__PURE__*/React.createElement(Stats, {\n        title: t('land_detail_page.operators'),\n        className: \"operators\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 17\n        }\n      }, land.operators.map(function (operator) {\n        return /*#__PURE__*/React.createElement(Profile, {\n          address: operator,\n          size: \"large\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 21\n          }\n        });\n      }))) : null, land.type === LandType.ESTATE ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Stats, {\n        title: t('land_detail_page.total_land'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 19\n        }\n      }, land.size)), /*#__PURE__*/React.createElement(Stats, {\n        title: t('land_detail_page.empty_land'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 19\n        }\n      }, land.size - occupiedTotal))) : null)));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(LandProviderPage, {\n        className: \"LandDetailPage\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 12\n        }\n      }, function (land, projects) {\n        return _this3.renderDetail(land, projects);\n      });\n    }\n  }]);\n\n  return LandDetailPage;\n}(React.PureComponent);\n\nexport { LandDetailPage as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/LandDetailPage/LandDetailPage.tsx"],"names":["React","Row","Badge","Section","Narrow","Column","Button","Dropdown","Icon","Header","Empty","Stats","t","LandType","RoleType","coordsToId","hoverStrokeByRole","hoverFillByRole","Atlas","locations","LandProviderPage","Back","Profile","JumpIn","ENSChip","Scene","LandDetailPage","state","hovered","mouseX","mouseY","showTooltip","handleMouseEnter","deployment","setState","handleMouseLeave","handleMouseMove","event","clientX","clientY","handleHover","deployments","x","y","deploymentsByCoord","props","some","_deployment","id","handleClick","projects","onNavigate","onReplace","landTiles","projectId","sceneDetail","landDetail","land","isHovered","getHoverStrokeLayer","color","role","scale","getHoverFillLayer","occupiedTotal","reduce","total","parcels","filter","coords","tile","length","ensList","parcelsAvailableToBuildEstates","onOpenModal","computeOccupiedLand","canBuildEstate","isAtlasClickable","top","left","thumbnail","backgroundImage","name","type","PARCEL","size","OWNER","landTransfer","landEdit","ESTATE","landSelectENS","landOperator","map","ens","subdomain","description","owner","operators","operator","renderDetail","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Row, Badge, Section, Narrow, Column, Button, Dropdown, Icon, Header, Empty, Layer, Stats } from 'decentraland-ui'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { LandType, Land, RoleType } from 'modules/land/types'\nimport { Deployment } from 'modules/deployment/types'\nimport { coordsToId, hoverStrokeByRole, hoverFillByRole } from 'modules/land/utils'\nimport { Atlas } from 'components/Atlas'\nimport { locations } from 'routing/locations'\nimport LandProviderPage from 'components/LandProviderPage'\nimport Back from 'components/Back'\nimport Profile from 'components/Profile'\nimport JumpIn from 'components/JumpIn'\nimport ENSChip from './ENSChip'\nimport Scene from './Scene'\nimport { Props, State } from './LandDetailPage.types'\nimport './LandDetailPage.css'\n\nexport default class LandDetailPage extends React.PureComponent<Props, State> {\n  state: State = {\n    hovered: null,\n    mouseX: 0,\n    mouseY: 0,\n    showTooltip: false\n  }\n\n  handleMouseEnter = (deployment: Deployment) => {\n    this.setState({ hovered: deployment, showTooltip: false })\n  }\n\n  handleMouseLeave = () => {\n    this.setState({ hovered: null, showTooltip: false })\n  }\n\n  handleMouseMove = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    this.setState({ mouseX: event.clientX, mouseY: event.clientY })\n  }\n\n  handleHover = (deployments: Deployment[]) => (x: number, y: number) => {\n    const { deploymentsByCoord } = this.props\n    const deployment = deploymentsByCoord[coordsToId(x, y)]\n    if (deployment && deployments.some(_deployment => _deployment.id === deployment.id)) {\n      this.setState({ hovered: deployment, showTooltip: true })\n    } else {\n      this.setState({ hovered: null, showTooltip: false })\n    }\n  }\n\n  handleClick = (x: number, y: number) => {\n    const { deploymentsByCoord, projects, onNavigate, onReplace, landTiles } = this.props\n    const id = coordsToId(x, y)\n    const deployment = deploymentsByCoord[id]\n    if (deployment && deployment.projectId && deployment.projectId in projects) {\n      onNavigate(locations.sceneDetail(deployment.projectId))\n    } else if (id in landTiles) {\n      onReplace(locations.landDetail(landTiles[id].land.id))\n    }\n  }\n\n  isHovered = (x: number, y: number) => {\n    const { deploymentsByCoord } = this.props\n    const { hovered } = this.state\n    const id = coordsToId(x, y)\n    const deployment = deploymentsByCoord[id]\n\n    return !!deployment && !!hovered && hovered.id === deployment.id\n  }\n\n  getHoverStrokeLayer = (land: Land): Layer => (x, y) => {\n    return this.isHovered(x, y) ? { color: hoverStrokeByRole[land.role], scale: 1.4 } : null\n  }\n\n  getHoverFillLayer = (land: Land): Layer => (x, y) => {\n    return this.isHovered(x, y) ? { color: hoverFillByRole[land.role], scale: 1.2 } : null\n  }\n\n  computeOccupiedLand(land: Land, deployments: Deployment[]) {\n    const { landTiles } = this.props\n    const occupiedTotal = deployments.reduce(\n      (total, deployment) =>\n        total +\n        deployment.parcels.filter(coords => {\n          const tile = landTiles[coords]\n          return !!tile && tile.land.id === land.id\n        }).length,\n      0\n    )\n    return occupiedTotal\n  }\n\n  renderDetail(land: Land, deployments: Deployment[]) {\n    const { ensList, parcelsAvailableToBuildEstates, projects, onNavigate, onOpenModal } = this.props\n    const { hovered, mouseX, mouseY, showTooltip } = this.state\n    const occupiedTotal = this.computeOccupiedLand(land, deployments)\n\n    const canBuildEstate = parcelsAvailableToBuildEstates[land.id]\n    const isAtlasClickable = showTooltip && hovered && hovered.projectId && hovered.projectId in projects\n\n    return (\n      <>\n        {hovered && showTooltip ? (\n          <div className=\"tooltip\" style={{ top: mouseY, left: mouseX }}>\n            {hovered.thumbnail ? <div className=\"thumbnail\" style={{ backgroundImage: `url(${hovered.thumbnail})` }} /> : null}\n            <div className=\"name\">{hovered.name}</div>\n          </div>\n        ) : null}\n        <Section size=\"large\">\n          <Row>\n            <Back absolute onClick={() => onNavigate(locations.land())} />\n            <Narrow>\n              <Row>\n                <Column>\n                  <Row>\n                    <Header size=\"huge\">{land.name}</Header>\n                    {land.type === LandType.PARCEL ? (\n                      <>\n                        <Badge color=\"#37333D\">\n                          <i className=\"pin\" />\n                          {land.id}\n                        </Badge>\n                      </>\n                    ) : (\n                      <Badge color=\"#37333D\">{land.size!} LAND</Badge>\n                    )}\n                    <JumpIn land={land} />\n                  </Row>\n                </Column>\n                {land.role === RoleType.OWNER ? (\n                  <Column className=\"actions\" align=\"right\">\n                    <Row>\n                      <Button basic onClick={() => onNavigate(locations.landTransfer(land.id))}>\n                        {t('land_detail_page.transfer')}\n                      </Button>\n                      <Button basic onClick={() => onNavigate(locations.landEdit(land.id))}>\n                        {t('global.edit')}\n                      </Button>\n                      <Dropdown\n                        trigger={\n                          <Button basic>\n                            <Icon name=\"ellipsis horizontal\" />\n                          </Button>\n                        }\n                        inline\n                        direction=\"left\"\n                      >\n                        <Dropdown.Menu>\n                          {canBuildEstate ? (\n                            <>\n                              <Dropdown.Item\n                                text={t('land_detail_page.build_estate')}\n                                onClick={() => onOpenModal('EstateEditorModal', { land })}\n                              />\n                              <Dropdown.Divider />\n                            </>\n                          ) : null}\n                          {land.type === LandType.ESTATE ? (\n                            <>\n                              <Dropdown.Item\n                                text={t('land_detail_page.add_or_remove_parcels')}\n                                onClick={() => onOpenModal('EstateEditorModal', { land })}\n                              />\n                              <Dropdown.Item\n                                text={t('land_detail_page.dissolve_estate')}\n                                onClick={() => onOpenModal('DissolveModal', { land })}\n                              />\n                              <Dropdown.Divider />\n                            </>\n                          ) : null}\n                          <>\n                            <Dropdown.Item\n                              text={t('land_detail_page.assign_name')}\n                              onClick={() => onNavigate(locations.landSelectENS(land.id))}\n                            />\n                            <Dropdown.Divider />\n                          </>\n                          <Dropdown.Item\n                            text={t('land_detail_page.set_operator')}\n                            onClick={() => onNavigate(locations.landOperator(land.id))}\n                          />\n                        </Dropdown.Menu>\n                      </Dropdown>\n                    </Row>\n                  </Column>\n                ) : null}\n              </Row>\n            </Narrow>\n          </Row>\n        </Section>\n        <Narrow>\n          <Section size=\"large\">\n            <div\n              className={`atlas-wrapper ${isAtlasClickable ? 'clickable' : ''}`}\n              onMouseLeave={this.handleMouseLeave}\n              onMouseMove={this.handleMouseMove}\n            >\n              <Atlas\n                landId={land.id}\n                layers={[this.getHoverStrokeLayer(land), this.getHoverFillLayer(land)]}\n                isDraggable\n                zoom={land.size && land.size >= 1000 ? 0.5 : 1}\n                onHover={this.handleHover(deployments)}\n                onClick={this.handleClick}\n              ></Atlas>\n            </div>\n          </Section>\n          <Section size=\"large\">\n            <Header sub>{t('land_detail_page.online_scenes')}</Header>\n            {deployments.length === 0 ? (\n              <Empty height={100}>{t('land_detail_page.none')}</Empty>\n            ) : (\n              <>\n                <div className=\"deployments\">\n                  {deployments.map(deployment => (\n                    <Scene\n                      key={deployment.id}\n                      deployment={deployment}\n                      onMouseEnter={this.handleMouseEnter}\n                      onMouseLeave={this.handleMouseLeave}\n                      onNavigate={onNavigate}\n                      onOpenModal={onOpenModal}\n                      projects={projects}\n                    />\n                  ))}\n                </div>\n                <div className=\"notice\">{t('analytics.notice')}</div>\n              </>\n            )}\n          </Section>\n          {ensList.length > 0 ? (\n            <Section size=\"large\">\n              <Header sub>\n                <Row>\n                  <Column>{t('land_detail_page.assigned_names')}</Column>\n                </Row>\n              </Header>\n              <div className=\"ens-list\">\n                {ensList.map(ens => (\n                  <ENSChip key={ens.subdomain} ens={ens} onIconClick={() => onOpenModal('UnsetENSContentModal', { ens, land })} />\n                ))}\n              </div>\n            </Section>\n          ) : null}\n          {land.description ? (\n            <Section size=\"large\">\n              <Header sub>{t('land_detail_page.description')}</Header>\n              <p>{land.description}</p>\n            </Section>\n          ) : null}\n          <Section className=\"data\">\n            <Stats title={t('land_detail_page.owner')}>\n              <Profile address={land.owner} size=\"large\" />\n            </Stats>\n            {land.operators.length > 0 ? (\n              <Stats title={t('land_detail_page.operators')} className=\"operators\">\n                <Row>\n                  {land.operators.map(operator => (\n                    <Profile address={operator} size=\"large\" />\n                  ))}\n                </Row>\n              </Stats>\n            ) : null}\n            {land.type === LandType.ESTATE ? (\n              <>\n                <Stats title={t('land_detail_page.total_land')}>\n                  <Header>{land.size}</Header>\n                </Stats>\n                <Stats title={t('land_detail_page.empty_land')}>\n                  <Header>{land.size! - occupiedTotal}</Header>\n                </Stats>\n              </>\n            ) : null}\n          </Section>\n        </Narrow>\n      </>\n    )\n  }\n\n  render() {\n    return <LandProviderPage className=\"LandDetailPage\">{(land, projects) => this.renderDetail(land, projects)}</LandProviderPage>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}