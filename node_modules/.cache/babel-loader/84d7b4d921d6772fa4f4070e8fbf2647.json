{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Vector3 } from \"../../Maths/math.vector\";\nimport { Scalar } from \"../../Maths/math.scalar\";\nimport { DeepCopier } from \"../../Misc/deepCopier\";\n/**\r\n * Particle emitter emitting particles from the inside of a sphere.\r\n * It emits the particles alongside the sphere radius. The emission direction might be randomized.\r\n */\n\nvar SphereParticleEmitter =\n/** @class */\nfunction () {\n  /**\r\n  * Creates a new instance SphereParticleEmitter\r\n  * @param radius the radius of the emission sphere (1 by default)\r\n  * @param radiusRange the range of the emission sphere [0-1] 0 Surface only, 1 Entire Radius (1 by default)\r\n  * @param directionRandomizer defines how much to randomize the particle direction [0-1]\r\n  */\n  function SphereParticleEmitter(\n  /**\r\n   * The radius of the emission sphere.\r\n   */\n  radius,\n  /**\r\n   * The range of emission [0-1] 0 Surface only, 1 Entire Radius.\r\n   */\n  radiusRange,\n  /**\r\n   * How much to randomize the particle direction [0-1].\r\n   */\n  directionRandomizer) {\n    if (radius === void 0) {\n      radius = 1;\n    }\n\n    if (radiusRange === void 0) {\n      radiusRange = 1;\n    }\n\n    if (directionRandomizer === void 0) {\n      directionRandomizer = 0;\n    }\n\n    this.radius = radius;\n    this.radiusRange = radiusRange;\n    this.directionRandomizer = directionRandomizer;\n  }\n  /**\r\n   * Called by the particle System when the direction is computed for the created particle.\r\n   * @param worldMatrix is the world matrix of the particle system\r\n   * @param directionToUpdate is the direction vector to update with the result\r\n   * @param particle is the particle we are computed the direction for\r\n   * @param isLocal defines if the direction should be set in local space\r\n   */\n\n\n  SphereParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle, isLocal) {\n    var direction = particle.position.subtract(worldMatrix.getTranslation()).normalize();\n    var randX = Scalar.RandomRange(0, this.directionRandomizer);\n    var randY = Scalar.RandomRange(0, this.directionRandomizer);\n    var randZ = Scalar.RandomRange(0, this.directionRandomizer);\n    direction.x += randX;\n    direction.y += randY;\n    direction.z += randZ;\n    direction.normalize();\n\n    if (isLocal) {\n      directionToUpdate.copyFrom(direction);\n      return;\n    }\n\n    Vector3.TransformNormalFromFloatsToRef(direction.x, direction.y, direction.z, worldMatrix, directionToUpdate);\n  };\n  /**\r\n   * Called by the particle System when the position is computed for the created particle.\r\n   * @param worldMatrix is the world matrix of the particle system\r\n   * @param positionToUpdate is the position vector to update with the result\r\n   * @param particle is the particle we are computed the position for\r\n   * @param isLocal defines if the position should be set in local space\r\n   */\n\n\n  SphereParticleEmitter.prototype.startPositionFunction = function (worldMatrix, positionToUpdate, particle, isLocal) {\n    var randRadius = this.radius - Scalar.RandomRange(0, this.radius * this.radiusRange);\n    var v = Scalar.RandomRange(0, 1.0);\n    var phi = Scalar.RandomRange(0, 2 * Math.PI);\n    var theta = Math.acos(2 * v - 1);\n    var randX = randRadius * Math.cos(phi) * Math.sin(theta);\n    var randY = randRadius * Math.cos(theta);\n    var randZ = randRadius * Math.sin(phi) * Math.sin(theta);\n\n    if (isLocal) {\n      positionToUpdate.copyFromFloats(randX, randY, randZ);\n      return;\n    }\n\n    Vector3.TransformCoordinatesFromFloatsToRef(randX, randY, randZ, worldMatrix, positionToUpdate);\n  };\n  /**\r\n   * Clones the current emitter and returns a copy of it\r\n   * @returns the new emitter\r\n   */\n\n\n  SphereParticleEmitter.prototype.clone = function () {\n    var newOne = new SphereParticleEmitter(this.radius, this.directionRandomizer);\n    DeepCopier.DeepCopy(this, newOne);\n    return newOne;\n  };\n  /**\r\n   * Called by the GPUParticleSystem to setup the update shader\r\n   * @param effect defines the update shader\r\n   */\n\n\n  SphereParticleEmitter.prototype.applyToShader = function (effect) {\n    effect.setFloat(\"radius\", this.radius);\n    effect.setFloat(\"radiusRange\", this.radiusRange);\n    effect.setFloat(\"directionRandomizer\", this.directionRandomizer);\n  };\n  /**\r\n   * Returns a string to use to update the GPU particles update shader\r\n   * @returns a string containng the defines string\r\n   */\n\n\n  SphereParticleEmitter.prototype.getEffectDefines = function () {\n    return \"#define SPHEREEMITTER\";\n  };\n  /**\r\n   * Returns the string \"SphereParticleEmitter\"\r\n   * @returns a string containing the class name\r\n   */\n\n\n  SphereParticleEmitter.prototype.getClassName = function () {\n    return \"SphereParticleEmitter\";\n  };\n  /**\r\n   * Serializes the particle system to a JSON object.\r\n   * @returns the JSON object\r\n   */\n\n\n  SphereParticleEmitter.prototype.serialize = function () {\n    var serializationObject = {};\n    serializationObject.type = this.getClassName();\n    serializationObject.radius = this.radius;\n    serializationObject.radiusRange = this.radiusRange;\n    serializationObject.directionRandomizer = this.directionRandomizer;\n    return serializationObject;\n  };\n  /**\r\n   * Parse properties from a JSON object\r\n   * @param serializationObject defines the JSON object\r\n   */\n\n\n  SphereParticleEmitter.prototype.parse = function (serializationObject) {\n    this.radius = serializationObject.radius;\n    this.radiusRange = serializationObject.radiusRange;\n    this.directionRandomizer = serializationObject.directionRandomizer;\n  };\n\n  return SphereParticleEmitter;\n}();\n\nexport { SphereParticleEmitter };\n/**\r\n * Particle emitter emitting particles from the inside of a sphere.\r\n * It emits the particles randomly between two vectors.\r\n */\n\nvar SphereDirectedParticleEmitter =\n/** @class */\nfunction (_super) {\n  __extends(SphereDirectedParticleEmitter, _super);\n  /**\r\n   * Creates a new instance SphereDirectedParticleEmitter\r\n   * @param radius the radius of the emission sphere (1 by default)\r\n   * @param direction1 the min limit of the emission direction (up vector by default)\r\n   * @param direction2 the max limit of the emission direction (up vector by default)\r\n   */\n\n\n  function SphereDirectedParticleEmitter(radius,\n  /**\r\n   * The min limit of the emission direction.\r\n   */\n  direction1,\n  /**\r\n   * The max limit of the emission direction.\r\n   */\n  direction2) {\n    if (radius === void 0) {\n      radius = 1;\n    }\n\n    if (direction1 === void 0) {\n      direction1 = new Vector3(0, 1, 0);\n    }\n\n    if (direction2 === void 0) {\n      direction2 = new Vector3(0, 1, 0);\n    }\n\n    var _this = _super.call(this, radius) || this;\n\n    _this.direction1 = direction1;\n    _this.direction2 = direction2;\n    return _this;\n  }\n  /**\r\n   * Called by the particle System when the direction is computed for the created particle.\r\n   * @param worldMatrix is the world matrix of the particle system\r\n   * @param directionToUpdate is the direction vector to update with the result\r\n   * @param particle is the particle we are computed the direction for\r\n   */\n\n\n  SphereDirectedParticleEmitter.prototype.startDirectionFunction = function (worldMatrix, directionToUpdate, particle) {\n    var randX = Scalar.RandomRange(this.direction1.x, this.direction2.x);\n    var randY = Scalar.RandomRange(this.direction1.y, this.direction2.y);\n    var randZ = Scalar.RandomRange(this.direction1.z, this.direction2.z);\n    Vector3.TransformNormalFromFloatsToRef(randX, randY, randZ, worldMatrix, directionToUpdate);\n  };\n  /**\r\n   * Clones the current emitter and returns a copy of it\r\n   * @returns the new emitter\r\n   */\n\n\n  SphereDirectedParticleEmitter.prototype.clone = function () {\n    var newOne = new SphereDirectedParticleEmitter(this.radius, this.direction1, this.direction2);\n    DeepCopier.DeepCopy(this, newOne);\n    return newOne;\n  };\n  /**\r\n   * Called by the GPUParticleSystem to setup the update shader\r\n   * @param effect defines the update shader\r\n   */\n\n\n  SphereDirectedParticleEmitter.prototype.applyToShader = function (effect) {\n    effect.setFloat(\"radius\", this.radius);\n    effect.setFloat(\"radiusRange\", this.radiusRange);\n    effect.setVector3(\"direction1\", this.direction1);\n    effect.setVector3(\"direction2\", this.direction2);\n  };\n  /**\r\n   * Returns a string to use to update the GPU particles update shader\r\n   * @returns a string containng the defines string\r\n   */\n\n\n  SphereDirectedParticleEmitter.prototype.getEffectDefines = function () {\n    return \"#define SPHEREEMITTER\\n#define DIRECTEDSPHEREEMITTER\";\n  };\n  /**\r\n   * Returns the string \"SphereDirectedParticleEmitter\"\r\n   * @returns a string containing the class name\r\n   */\n\n\n  SphereDirectedParticleEmitter.prototype.getClassName = function () {\n    return \"SphereDirectedParticleEmitter\";\n  };\n  /**\r\n   * Serializes the particle system to a JSON object.\r\n   * @returns the JSON object\r\n   */\n\n\n  SphereDirectedParticleEmitter.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.direction1 = this.direction1.asArray();\n    serializationObject.direction2 = this.direction2.asArray();\n    return serializationObject;\n  };\n  /**\r\n   * Parse properties from a JSON object\r\n   * @param serializationObject defines the JSON object\r\n   */\n\n\n  SphereDirectedParticleEmitter.prototype.parse = function (serializationObject) {\n    _super.prototype.parse.call(this, serializationObject);\n\n    this.direction1.copyFrom(serializationObject.direction1);\n    this.direction2.copyFrom(serializationObject.direction2);\n  };\n\n  return SphereDirectedParticleEmitter;\n}(SphereParticleEmitter);\n\nexport { SphereDirectedParticleEmitter };","map":null,"metadata":{},"sourceType":"module"}