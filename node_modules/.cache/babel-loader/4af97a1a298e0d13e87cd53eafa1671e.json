{"ast":null,"code":"export var ApprovalFlowModalView;\n\n(function (ApprovalFlowModalView) {\n  ApprovalFlowModalView[\"LOADING\"] = \"loading\";\n  ApprovalFlowModalView[\"RESCUE\"] = \"rescue\";\n  ApprovalFlowModalView[\"CONSUME_TP_SLOTS\"] = \"consume_tp_slots\";\n  ApprovalFlowModalView[\"DEPLOY\"] = \"deploy\";\n  ApprovalFlowModalView[\"DEPLOY_TP\"] = \"deploy_third_party\";\n  ApprovalFlowModalView[\"APPROVE\"] = \"approve\";\n  ApprovalFlowModalView[\"SUCCESS\"] = \"success\";\n  ApprovalFlowModalView[\"ERROR\"] = \"error\";\n})(ApprovalFlowModalView || (ApprovalFlowModalView = {}));","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/ApprovalFlowModal/ApprovalFlowModal.types.ts"],"names":["ApprovalFlowModalView"],"mappings":"AAiBA,WAAYA,qBAAZ;;WAAYA,qB;AAAAA,EAAAA,qB;AAAAA,EAAAA,qB;AAAAA,EAAAA,qB;AAAAA,EAAAA,qB;AAAAA,EAAAA,qB;AAAAA,EAAAA,qB;AAAAA,EAAAA,qB;AAAAA,EAAAA,qB;GAAAA,qB,KAAAA,qB","sourcesContent":["import { Dispatch } from 'redux'\nimport { MerkleDistributorInfo } from '@dcl/content-hash-tree/dist/types'\nimport { DeploymentPreparationData } from 'dcl-catalyst-client'\nimport { ModalProps } from 'decentraland-dapps/dist/providers/ModalProvider/ModalProvider.types'\nimport { approveCollectionRequest, ApproveCollectionRequestAction } from 'modules/collection/actions'\nimport { Collection } from 'modules/collection/types'\nimport { rescueItemsRequest, RescueItemsRequestAction } from 'modules/item/actions'\nimport { Item } from 'modules/item/types'\nimport { deployEntitiesRequest, DeployEntitiesRequestAction } from 'modules/entity/actions'\nimport {\n  deployBatchedThirdPartyItemsRequest,\n  DeployBatchedThirdPartyItemsRequestAction,\n  reviewThirdPartyRequest,\n  ReviewThirdPartyRequestAction\n} from 'modules/thirdParty/actions'\nimport { Slot } from 'modules/thirdParty/types'\n\nexport enum ApprovalFlowModalView {\n  LOADING = 'loading',\n  RESCUE = 'rescue',\n  CONSUME_TP_SLOTS = 'consume_tp_slots',\n  DEPLOY = 'deploy',\n  DEPLOY_TP = 'deploy_third_party',\n  APPROVE = 'approve',\n  SUCCESS = 'success',\n  ERROR = 'error'\n}\n\nexport type ApprovalFlowModalMetadata<V extends ApprovalFlowModalView = ApprovalFlowModalView> = {\n  view: V\n  collection: Collection\n} & (V extends ApprovalFlowModalView.RESCUE\n  ? { items: Item[]; contentHashes: string[] }\n  : V extends ApprovalFlowModalView.DEPLOY\n  ? { items: Item[]; entities: DeploymentPreparationData[] }\n  : V extends ApprovalFlowModalView.CONSUME_TP_SLOTS\n  ? { slots: Slot[]; merkleTreeRoot: MerkleDistributorInfo['merkleRoot']; items: Item[] }\n  : V extends ApprovalFlowModalView.DEPLOY_TP\n  ? { items: Item[]; collection: Collection; tree: MerkleDistributorInfo; hashes: Record<string, string> }\n  : V extends ApprovalFlowModalView.ERROR\n  ? { error: string }\n  : {})\n\nexport type Props = ModalProps & {\n  onRescueItems: typeof rescueItemsRequest\n  onDeployItems: typeof deployEntitiesRequest\n  onDeployThirdPartyItems: typeof deployBatchedThirdPartyItemsRequest\n  onApproveCollection: typeof approveCollectionRequest\n  onReviewThirdParty: typeof reviewThirdPartyRequest\n  isConfirmingRescueTx: boolean\n  isConfirmingReviewThirdPartyTx: boolean\n  isDeployingItems: boolean\n  isConfirmingApproveTx: boolean\n  isAwaitingApproveTx: boolean\n}\n\nexport type State = {\n  didRescue: boolean\n  didApproveConsumeSlots: boolean\n}\n\nexport type MapStateProps = Pick<\n  Props,\n  'isConfirmingRescueTx' | 'isConfirmingReviewThirdPartyTx' | 'isDeployingItems' | 'isAwaitingApproveTx' | 'isConfirmingApproveTx'\n>\nexport type MapDispatchProps = Pick<\n  Props,\n  'onRescueItems' | 'onDeployItems' | 'onApproveCollection' | 'onReviewThirdParty' | 'onDeployThirdPartyItems'\n>\nexport type MapDispatch = Dispatch<\n  | RescueItemsRequestAction\n  | DeployEntitiesRequestAction\n  | ApproveCollectionRequestAction\n  | ReviewThirdPartyRequestAction\n  | DeployBatchedThirdPartyItemsRequestAction\n>\n"]},"metadata":{},"sourceType":"module"}