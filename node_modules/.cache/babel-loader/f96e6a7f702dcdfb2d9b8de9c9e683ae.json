{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"ajv/dist/compile/codegen\");\n\nvar _util_1 = require(\"./_util\");\n\nvar error = {\n  message: function message(_ref) {\n    var schemaProp = _ref.params.schemaProp;\n    return schemaProp ? codegen_1.str(_templateObject || (_templateObject = _taggedTemplateLiteral([\"should match case \\\"\", \"\\\" schema\"])), schemaProp) : codegen_1.str(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"should match default case schema\"])));\n  },\n  params: function params(_ref2) {\n    var schemaProp = _ref2.params.schemaProp;\n    return schemaProp ? codegen_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"{failingCase: \", \"}\"])), schemaProp) : codegen_1._(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"{failingDefault: true}\"])));\n  }\n};\n\nfunction getDef(opts) {\n  var metaSchema = _util_1.metaSchemaRef(opts);\n\n  return [{\n    keyword: \"select\",\n    schemaType: [\"string\", \"number\", \"boolean\", \"null\"],\n    $data: true,\n    error: error,\n    dependencies: [\"selectCases\"],\n    code: function code(cxt) {\n      var gen = cxt.gen,\n          schemaCode = cxt.schemaCode,\n          parentSchema = cxt.parentSchema;\n      cxt.block$data(codegen_1.nil, function () {\n        var valid = gen.let(\"valid\", true);\n        var schValid = gen.name(\"_valid\");\n        var value = gen.const(\"value\", codegen_1._(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \" === null ? \\\"null\\\" : \", \"\"])), schemaCode, schemaCode));\n        gen.if(false); // optimizer should remove it from generated code\n\n        for (var schemaProp in parentSchema.selectCases) {\n          cxt.setParams({\n            schemaProp: schemaProp\n          });\n          gen.elseIf(codegen_1._(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\\\"\\\" + \", \" == \", \"\"])), value, schemaProp)); // intentional ==, to match numbers and booleans\n\n          var schCxt = cxt.subschema({\n            keyword: \"selectCases\",\n            schemaProp: schemaProp\n          }, schValid);\n          cxt.mergeEvaluated(schCxt, codegen_1.Name);\n          gen.assign(valid, schValid);\n        }\n\n        gen.else();\n\n        if (parentSchema.selectDefault !== undefined) {\n          cxt.setParams({\n            schemaProp: undefined\n          });\n\n          var _schCxt = cxt.subschema({\n            keyword: \"selectDefault\"\n          }, schValid);\n\n          cxt.mergeEvaluated(_schCxt, codegen_1.Name);\n          gen.assign(valid, schValid);\n        }\n\n        gen.endIf();\n        cxt.pass(valid);\n      });\n    }\n  }, {\n    keyword: \"selectCases\",\n    dependencies: [\"select\"],\n    metaSchema: {\n      type: \"object\",\n      additionalProperties: metaSchema\n    }\n  }, {\n    keyword: \"selectDefault\",\n    dependencies: [\"select\", \"selectCases\"],\n    metaSchema: metaSchema\n  }];\n}\n\nexports.default = getDef;\nmodule.exports = getDef;","map":null,"metadata":{},"sourceType":"script"}