{"ast":null,"code":"import _defineProperty from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport undoable, { includeAction, ActionTypes } from 'redux-undo';\nimport { EDITOR_UNDO, EDITOR_REDO, OPEN_EDITOR } from 'modules/editor/actions';\nimport { PROVISION_SCENE, UPDATE_METRICS, CREATE_SCENE, FIX_LEGACY_NAMESPACES_SUCCESS, SYNC_SCENE_ASSETS_SUCCESS } from 'modules/scene/actions';\nimport { DELETE_PROJECT } from 'modules/project/actions';\nvar INITIAL_STATE = {\n  data: {},\n  loading: [],\n  error: null\n};\n\nvar baseSceneReducer = function baseSceneReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CREATE_SCENE:\n    case PROVISION_SCENE:\n    case FIX_LEGACY_NAMESPACES_SUCCESS:\n    case SYNC_SCENE_ASSETS_SUCCESS:\n      {\n        var scene = action.payload.scene;\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, _defineProperty({}, scene.id, _objectSpread({}, scene, {\n            components: _objectSpread({}, scene.components),\n            entities: _objectSpread({}, scene.entities)\n          })))\n        });\n      }\n\n    case UPDATE_METRICS:\n      {\n        var _action$payload = action.payload,\n            sceneId = _action$payload.sceneId,\n            metrics = _action$payload.metrics,\n            limits = _action$payload.limits;\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, _defineProperty({}, sceneId, _objectSpread({}, state.data[sceneId], {\n            metrics: _objectSpread({}, state.data[sceneId].metrics, metrics),\n            limits: _objectSpread({}, state.data[sceneId].limits, limits)\n          })))\n        });\n      }\n\n    case DELETE_PROJECT:\n      {\n        var project = action.payload.project;\n\n        var newState = _objectSpread({}, state, {\n          data: _objectSpread({}, state.data)\n        });\n\n        delete newState.data[project.sceneId];\n        return newState;\n      }\n\n    default:\n      return state;\n  }\n}; // This is typed `as any` because undoable uses AnyAction from redux which doesn't account for the payload we use\n// so types don't match\n\n\nexport var sceneReducer = undoable(baseSceneReducer, {\n  limit: 48,\n  undoType: EDITOR_UNDO,\n  redoType: EDITOR_REDO,\n  clearHistoryType: [OPEN_EDITOR, ActionTypes.CLEAR_HISTORY],\n  // clearHistoryType comes with the wrong typing, tracked here https://github.com/omnidan/redux-undo/issues/222\n  filter: includeAction([CREATE_SCENE, PROVISION_SCENE])\n});","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/scene/reducer.ts"],"names":["undoable","includeAction","ActionTypes","EDITOR_UNDO","EDITOR_REDO","OPEN_EDITOR","PROVISION_SCENE","UPDATE_METRICS","CREATE_SCENE","FIX_LEGACY_NAMESPACES_SUCCESS","SYNC_SCENE_ASSETS_SUCCESS","DELETE_PROJECT","INITIAL_STATE","data","loading","error","baseSceneReducer","state","action","type","scene","payload","id","components","entities","sceneId","metrics","limits","project","newState","sceneReducer","limit","undoType","redoType","clearHistoryType","CLEAR_HISTORY","filter"],"mappings":";;AAAA,OAAOA,QAAP,IAAqCC,aAArC,EAAoDC,WAApD,QAAuE,YAAvE;AAGA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,WAAnC,QAAsD,wBAAtD;AAEA,SAEEC,eAFF,EAIEC,cAJF,EAKEC,YALF,EAQEC,6BARF,EASEC,yBATF,QAWO,uBAXP;AAYA,SAA8BC,cAA9B,QAA+E,yBAA/E;AAkBA,IAAMC,aAAyB,GAAG;AAChCC,EAAAA,IAAI,EAAE,EAD0B;AAEhCC,EAAAA,OAAO,EAAE,EAFuB;AAGhCC,EAAAA,KAAK,EAAE;AAHyB,CAAlC;;AAMA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAA+E;AAAA,MAA9EC,KAA8E,uEAA1DL,aAA0D;AAAA,MAA3CM,MAA2C;;AACtG,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,YAAL;AACA,SAAKF,eAAL;AACA,SAAKG,6BAAL;AACA,SAAKC,yBAAL;AAAgC;AAAA,YACtBU,KADsB,GACZF,MAAM,CAACG,OADK,CACtBD,KADsB;AAG9B,iCACKH,KADL;AAEEJ,UAAAA,IAAI,oBACCI,KAAK,CAACJ,IADP,sBAEDO,KAAK,CAACE,EAFL,oBAEeF,KAFf;AAEsBG,YAAAA,UAAU,oBAAOH,KAAK,CAACG,UAAb,CAFhC;AAE2DC,YAAAA,QAAQ,oBAAOJ,KAAK,CAACI,QAAb;AAFnE;AAFN;AAOD;;AACD,SAAKjB,cAAL;AAAqB;AAAA,8BACkBW,MAAM,CAACG,OADzB;AAAA,YACXI,OADW,mBACXA,OADW;AAAA,YACFC,OADE,mBACFA,OADE;AAAA,YACOC,MADP,mBACOA,MADP;AAEnB,iCACKV,KADL;AAEEJ,UAAAA,IAAI,oBACCI,KAAK,CAACJ,IADP,sBAEDY,OAFC,oBAGGR,KAAK,CAACJ,IAAN,CAAWY,OAAX,CAHH;AAIAC,YAAAA,OAAO,oBACFT,KAAK,CAACJ,IAAN,CAAWY,OAAX,EAAoBC,OADlB,EAEFA,OAFE,CAJP;AAQAC,YAAAA,MAAM,oBACDV,KAAK,CAACJ,IAAN,CAAWY,OAAX,EAAoBE,MADnB,EAEDA,MAFC;AARN;AAFN;AAiBD;;AACD,SAAKhB,cAAL;AAAqB;AAAA,YACXiB,OADW,GACCV,MAAM,CAACG,OADR,CACXO,OADW;;AAEnB,YAAMC,QAAQ,qBACTZ,KADS;AAEZJ,UAAAA,IAAI,oBACCI,KAAK,CAACJ,IADP;AAFQ,UAAd;;AAMA,eAAOgB,QAAQ,CAAChB,IAAT,CAAce,OAAO,CAACH,OAAtB,CAAP;AACA,eAAOI,QAAP;AACD;;AAED;AACE,aAAOZ,KAAP;AAhDJ;AAkDD,CAnDD,C,CAqDA;AACA;;;AACA,OAAO,IAAMa,YAAY,GAAG9B,QAAQ,CAAagB,gBAAb,EAAsC;AACxEe,EAAAA,KAAK,EAAE,EADiE;AAExEC,EAAAA,QAAQ,EAAE7B,WAF8D;AAGxE8B,EAAAA,QAAQ,EAAE7B,WAH8D;AAIxE8B,EAAAA,gBAAgB,EAAE,CAAC7B,WAAD,EAAcH,WAAW,CAACiC,aAA1B,CAJsD;AAIL;AACnEC,EAAAA,MAAM,EAAEnC,aAAa,CAAC,CAACO,YAAD,EAAeF,eAAf,CAAD;AALmD,CAAtC,CAA7B","sourcesContent":["import undoable, { StateWithHistory, includeAction, ActionTypes } from 'redux-undo'\nimport { ModelById } from 'decentraland-dapps/dist/lib/types'\nimport { LoadingState } from 'decentraland-dapps/dist/modules/loading/reducer'\nimport { EDITOR_UNDO, EDITOR_REDO, OPEN_EDITOR } from 'modules/editor/actions'\nimport { Scene } from 'modules/scene/types'\nimport {\n  ProvisionSceneAction,\n  PROVISION_SCENE,\n  UpdateMetricsAction,\n  UPDATE_METRICS,\n  CREATE_SCENE,\n  CreateSceneAction,\n  FixLegacyNamespacesSuccessAction,\n  FIX_LEGACY_NAMESPACES_SUCCESS,\n  SYNC_SCENE_ASSETS_SUCCESS,\n  SyncSceneAssetsSuccessAction\n} from 'modules/scene/actions'\nimport { DeleteProjectAction, DELETE_PROJECT, LoadManifestSuccessAction } from 'modules/project/actions'\n\nexport type SceneState = {\n  data: ModelById<Scene>\n  loading: LoadingState\n  error: string | null\n}\nexport type UndoableSceneState = StateWithHistory<SceneState>\n\nexport type SceneReducerAction =\n  | ProvisionSceneAction\n  | UpdateMetricsAction\n  | CreateSceneAction\n  | DeleteProjectAction\n  | LoadManifestSuccessAction\n  | FixLegacyNamespacesSuccessAction\n  | SyncSceneAssetsSuccessAction\n\nconst INITIAL_STATE: SceneState = {\n  data: {},\n  loading: [],\n  error: null\n}\n\nconst baseSceneReducer = (state: SceneState = INITIAL_STATE, action: SceneReducerAction): SceneState => {\n  switch (action.type) {\n    case CREATE_SCENE:\n    case PROVISION_SCENE:\n    case FIX_LEGACY_NAMESPACES_SUCCESS:\n    case SYNC_SCENE_ASSETS_SUCCESS: {\n      const { scene } = action.payload\n\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [scene.id]: { ...scene, components: { ...scene.components }, entities: { ...scene.entities } }\n        }\n      }\n    }\n    case UPDATE_METRICS: {\n      const { sceneId, metrics, limits } = action.payload\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [sceneId]: {\n            ...state.data[sceneId],\n            metrics: {\n              ...state.data[sceneId].metrics,\n              ...metrics\n            },\n            limits: {\n              ...state.data[sceneId].limits,\n              ...limits\n            }\n          }\n        }\n      }\n    }\n    case DELETE_PROJECT: {\n      const { project } = action.payload\n      const newState = {\n        ...state,\n        data: {\n          ...state.data\n        }\n      }\n      delete newState.data[project.sceneId]\n      return newState\n    }\n\n    default:\n      return state\n  }\n}\n\n// This is typed `as any` because undoable uses AnyAction from redux which doesn't account for the payload we use\n// so types don't match\nexport const sceneReducer = undoable<SceneState>(baseSceneReducer as any, {\n  limit: 48,\n  undoType: EDITOR_UNDO,\n  redoType: EDITOR_REDO,\n  clearHistoryType: [OPEN_EDITOR, ActionTypes.CLEAR_HISTORY] as any, // clearHistoryType comes with the wrong typing, tracked here https://github.com/omnidan/redux-undo/issues/222\n  filter: includeAction([CREATE_SCENE, PROVISION_SCENE])\n})\n"]},"metadata":{},"sourceType":"module"}