{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { SerializationHelper, serialize, serializeAsColor3, expandToProperty, serializeAsTexture, serializeAsVector3, serializeAsImageProcessingConfiguration } from \"../../Misc/decorators\";\nimport { SmartArray } from \"../../Misc/smartArray\";\nimport { Logger } from \"../../Misc/logger\";\nimport { Vector3, Vector4 } from \"../../Maths/math.vector\";\nimport { VertexBuffer } from \"../../Meshes/buffer\";\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\nimport { MaterialDefines } from \"../../Materials/materialDefines\";\nimport { PushMaterial } from \"../../Materials/pushMaterial\";\nimport { ImageProcessingConfiguration } from \"../../Materials/imageProcessingConfiguration\";\nimport { Texture } from \"../../Materials/Textures/texture\";\nimport { _TypeStore } from \"../../Misc/typeStore\";\nimport { MaterialFlags } from \"../materialFlags\";\nimport { Color3 } from '../../Maths/math.color';\nimport \"../../Shaders/background.fragment\";\nimport \"../../Shaders/background.vertex\";\nimport { EffectFallbacks } from '../effectFallbacks';\n/**\r\n * Background material defines definition.\r\n * @hidden Mainly internal Use\r\n */\n\nvar BackgroundMaterialDefines =\n/** @class */\nfunction (_super) {\n  __extends(BackgroundMaterialDefines, _super);\n  /**\r\n   * Constructor of the defines.\r\n   */\n\n\n  function BackgroundMaterialDefines() {\n    var _this = _super.call(this) || this;\n    /**\r\n     * True if the diffuse texture is in use.\r\n     */\n\n\n    _this.DIFFUSE = false;\n    /**\r\n     * The direct UV channel to use.\r\n     */\n\n    _this.DIFFUSEDIRECTUV = 0;\n    /**\r\n     * True if the diffuse texture is in gamma space.\r\n     */\n\n    _this.GAMMADIFFUSE = false;\n    /**\r\n     * True if the diffuse texture has opacity in the alpha channel.\r\n     */\n\n    _this.DIFFUSEHASALPHA = false;\n    /**\r\n     * True if you want the material to fade to transparent at grazing angle.\r\n     */\n\n    _this.OPACITYFRESNEL = false;\n    /**\r\n     * True if an extra blur needs to be added in the reflection.\r\n     */\n\n    _this.REFLECTIONBLUR = false;\n    /**\r\n     * True if you want the material to fade to reflection at grazing angle.\r\n     */\n\n    _this.REFLECTIONFRESNEL = false;\n    /**\r\n     * True if you want the material to falloff as far as you move away from the scene center.\r\n     */\n\n    _this.REFLECTIONFALLOFF = false;\n    /**\r\n     * False if the current Webgl implementation does not support the texture lod extension.\r\n     */\n\n    _this.TEXTURELODSUPPORT = false;\n    /**\r\n     * True to ensure the data are premultiplied.\r\n     */\n\n    _this.PREMULTIPLYALPHA = false;\n    /**\r\n     * True if the texture contains cooked RGB values and not gray scaled multipliers.\r\n     */\n\n    _this.USERGBCOLOR = false;\n    /**\r\n     * True if highlight and shadow levels have been specified. It can help ensuring the main perceived color\r\n     * stays aligned with the desired configuration.\r\n     */\n\n    _this.USEHIGHLIGHTANDSHADOWCOLORS = false;\n    /**\r\n     * True if only shadows must be rendered\r\n     */\n\n    _this.BACKMAT_SHADOWONLY = false;\n    /**\r\n     * True to add noise in order to reduce the banding effect.\r\n     */\n\n    _this.NOISE = false;\n    /**\r\n     * is the reflection texture in BGR color scheme?\r\n     * Mainly used to solve a bug in ios10 video tag\r\n     */\n\n    _this.REFLECTIONBGR = false;\n    _this.IMAGEPROCESSING = false;\n    _this.VIGNETTE = false;\n    _this.VIGNETTEBLENDMODEMULTIPLY = false;\n    _this.VIGNETTEBLENDMODEOPAQUE = false;\n    _this.TONEMAPPING = false;\n    _this.TONEMAPPING_ACES = false;\n    _this.CONTRAST = false;\n    _this.COLORCURVES = false;\n    _this.COLORGRADING = false;\n    _this.COLORGRADING3D = false;\n    _this.SAMPLER3DGREENDEPTH = false;\n    _this.SAMPLER3DBGRMAP = false;\n    _this.IMAGEPROCESSINGPOSTPROCESS = false;\n    _this.EXPOSURE = false;\n    _this.MULTIVIEW = false; // Reflection.\n\n    _this.REFLECTION = false;\n    _this.REFLECTIONMAP_3D = false;\n    _this.REFLECTIONMAP_SPHERICAL = false;\n    _this.REFLECTIONMAP_PLANAR = false;\n    _this.REFLECTIONMAP_CUBIC = false;\n    _this.REFLECTIONMAP_PROJECTION = false;\n    _this.REFLECTIONMAP_SKYBOX = false;\n    _this.REFLECTIONMAP_EXPLICIT = false;\n    _this.REFLECTIONMAP_EQUIRECTANGULAR = false;\n    _this.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n    _this.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n    _this.INVERTCUBICMAP = false;\n    _this.REFLECTIONMAP_OPPOSITEZ = false;\n    _this.LODINREFLECTIONALPHA = false;\n    _this.GAMMAREFLECTION = false;\n    _this.RGBDREFLECTION = false;\n    _this.EQUIRECTANGULAR_RELFECTION_FOV = false; // Default BJS.\n\n    _this.MAINUV1 = false;\n    _this.MAINUV2 = false;\n    _this.UV1 = false;\n    _this.UV2 = false;\n    _this.CLIPPLANE = false;\n    _this.CLIPPLANE2 = false;\n    _this.CLIPPLANE3 = false;\n    _this.CLIPPLANE4 = false;\n    _this.CLIPPLANE5 = false;\n    _this.CLIPPLANE6 = false;\n    _this.POINTSIZE = false;\n    _this.FOG = false;\n    _this.NORMAL = false;\n    _this.NUM_BONE_INFLUENCERS = 0;\n    _this.BonesPerMesh = 0;\n    _this.INSTANCES = false;\n    _this.SHADOWFLOAT = false;\n\n    _this.rebuild();\n\n    return _this;\n  }\n\n  return BackgroundMaterialDefines;\n}(MaterialDefines);\n/**\r\n * Background material used to create an efficient environement around your scene.\r\n */\n\n\nvar BackgroundMaterial =\n/** @class */\nfunction (_super) {\n  __extends(BackgroundMaterial, _super);\n  /**\r\n   * Instantiates a Background Material in the given scene\r\n   * @param name The friendly name of the material\r\n   * @param scene The scene to add the material to\r\n   */\n\n\n  function BackgroundMaterial(name, scene) {\n    var _this = _super.call(this, name, scene) || this;\n    /**\r\n     * Key light Color (multiply against the environement texture)\r\n     */\n\n\n    _this.primaryColor = Color3.White();\n    _this._primaryColorShadowLevel = 0;\n    _this._primaryColorHighlightLevel = 0;\n    /**\r\n     * Reflection Texture used in the material.\r\n     * Should be author in a specific way for the best result (refer to the documentation).\r\n     */\n\n    _this.reflectionTexture = null;\n    /**\r\n     * Reflection Texture level of blur.\r\n     *\r\n     * Can be use to reuse an existing HDR Texture and target a specific LOD to prevent authoring the\r\n     * texture twice.\r\n     */\n\n    _this.reflectionBlur = 0;\n    /**\r\n     * Diffuse Texture used in the material.\r\n     * Should be author in a specific way for the best result (refer to the documentation).\r\n     */\n\n    _this.diffuseTexture = null;\n    _this._shadowLights = null;\n    /**\r\n     * Specify the list of lights casting shadow on the material.\r\n     * All scene shadow lights will be included if null.\r\n     */\n\n    _this.shadowLights = null;\n    /**\r\n     * Helps adjusting the shadow to a softer level if required.\r\n     * 0 means black shadows and 1 means no shadows.\r\n     */\n\n    _this.shadowLevel = 0;\n    /**\r\n     * In case of opacity Fresnel or reflection falloff, this is use as a scene center.\r\n     * It is usually zero but might be interesting to modify according to your setup.\r\n     */\n\n    _this.sceneCenter = Vector3.Zero();\n    /**\r\n     * This helps specifying that the material is falling off to the sky box at grazing angle.\r\n     * This helps ensuring a nice transition when the camera goes under the ground.\r\n     */\n\n    _this.opacityFresnel = true;\n    /**\r\n     * This helps specifying that the material is falling off from diffuse to the reflection texture at grazing angle.\r\n     * This helps adding a mirror texture on the ground.\r\n     */\n\n    _this.reflectionFresnel = false;\n    /**\r\n     * This helps specifying the falloff radius off the reflection texture from the sceneCenter.\r\n     * This helps adding a nice falloff effect to the reflection if used as a mirror for instance.\r\n     */\n\n    _this.reflectionFalloffDistance = 0.0;\n    /**\r\n     * This specifies the weight of the reflection against the background in case of reflection Fresnel.\r\n     */\n\n    _this.reflectionAmount = 1.0;\n    /**\r\n     * This specifies the weight of the reflection at grazing angle.\r\n     */\n\n    _this.reflectionReflectance0 = 0.05;\n    /**\r\n     * This specifies the weight of the reflection at a perpendicular point of view.\r\n     */\n\n    _this.reflectionReflectance90 = 0.5;\n    /**\r\n     * Helps to directly use the maps channels instead of their level.\r\n     */\n\n    _this.useRGBColor = true;\n    /**\r\n     * This helps reducing the banding effect that could occur on the background.\r\n     */\n\n    _this.enableNoise = false;\n    _this._fovMultiplier = 1.0;\n    /**\r\n     * Enable the FOV adjustment feature controlled by fovMultiplier.\r\n     */\n\n    _this.useEquirectangularFOV = false;\n    _this._maxSimultaneousLights = 4;\n    /**\r\n     * Number of Simultaneous lights allowed on the material.\r\n     */\n\n    _this.maxSimultaneousLights = 4;\n    _this._shadowOnly = false;\n    /**\r\n     * Make the material only render shadows\r\n     */\n\n    _this.shadowOnly = false;\n    /**\r\n     * Keep track of the image processing observer to allow dispose and replace.\r\n     */\n\n    _this._imageProcessingObserver = null;\n    /**\r\n     * Due to a bug in iOS10, video tags (which are using the background material) are in BGR and not RGB.\r\n     * Setting this flag to true (not done automatically!) will convert it back to RGB.\r\n     */\n\n    _this.switchToBGR = false; // Temp values kept as cache in the material.\n\n    _this._renderTargets = new SmartArray(16);\n    _this._reflectionControls = Vector4.Zero();\n    _this._white = Color3.White();\n    _this._primaryShadowColor = Color3.Black();\n    _this._primaryHighlightColor = Color3.Black(); // Setup the default processing configuration to the scene.\n\n    _this._attachImageProcessingConfiguration(null);\n\n    _this.getRenderTargetTextures = function () {\n      _this._renderTargets.reset();\n\n      if (_this._diffuseTexture && _this._diffuseTexture.isRenderTarget) {\n        _this._renderTargets.push(_this._diffuseTexture);\n      }\n\n      if (_this._reflectionTexture && _this._reflectionTexture.isRenderTarget) {\n        _this._renderTargets.push(_this._reflectionTexture);\n      }\n\n      return _this._renderTargets;\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(BackgroundMaterial.prototype, \"_perceptualColor\", {\n    /**\r\n     * Experimental Internal Use Only.\r\n     *\r\n     * Key light Color in \"perceptual value\" meaning the color you would like to see on screen.\r\n     * This acts as a helper to set the primary color to a more \"human friendly\" value.\r\n     * Conversion to linear space as well as exposure and tone mapping correction will be applied to keep the\r\n     * output color as close as possible from the chosen value.\r\n     * (This does not account for contrast color grading and color curves as they are considered post effect and not directly\r\n     * part of lighting setup.)\r\n     */\n    get: function get() {\n      return this.__perceptualColor;\n    },\n    set: function set(value) {\n      this.__perceptualColor = value;\n\n      this._computePrimaryColorFromPerceptualColor();\n\n      this._markAllSubMeshesAsLightsDirty();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundMaterial.prototype, \"primaryColorShadowLevel\", {\n    /**\r\n     * Defines the level of the shadows (dark area of the reflection map) in order to help scaling the colors.\r\n     * The color opposite to the primary color is used at the level chosen to define what the black area would look.\r\n     */\n    get: function get() {\n      return this._primaryColorShadowLevel;\n    },\n    set: function set(value) {\n      this._primaryColorShadowLevel = value;\n\n      this._computePrimaryColors();\n\n      this._markAllSubMeshesAsLightsDirty();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundMaterial.prototype, \"primaryColorHighlightLevel\", {\n    /**\r\n     * Defines the level of the highliights (highlight area of the reflection map) in order to help scaling the colors.\r\n     * The primary color is used at the level chosen to define what the white area would look.\r\n     */\n    get: function get() {\n      return this._primaryColorHighlightLevel;\n    },\n    set: function set(value) {\n      this._primaryColorHighlightLevel = value;\n\n      this._computePrimaryColors();\n\n      this._markAllSubMeshesAsLightsDirty();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundMaterial.prototype, \"reflectionStandardFresnelWeight\", {\n    /**\r\n     * Sets the reflection reflectance fresnel values according to the default standard\r\n     * empirically know to work well :-)\r\n     */\n    set: function set(value) {\n      var reflectionWeight = value;\n\n      if (reflectionWeight < 0.5) {\n        reflectionWeight = reflectionWeight * 2.0;\n        this.reflectionReflectance0 = BackgroundMaterial.StandardReflectance0 * reflectionWeight;\n        this.reflectionReflectance90 = BackgroundMaterial.StandardReflectance90 * reflectionWeight;\n      } else {\n        reflectionWeight = reflectionWeight * 2.0 - 1.0;\n        this.reflectionReflectance0 = BackgroundMaterial.StandardReflectance0 + (1.0 - BackgroundMaterial.StandardReflectance0) * reflectionWeight;\n        this.reflectionReflectance90 = BackgroundMaterial.StandardReflectance90 + (1.0 - BackgroundMaterial.StandardReflectance90) * reflectionWeight;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundMaterial.prototype, \"fovMultiplier\", {\n    /**\r\n     * The current fov(field of view) multiplier, 0.0 - 2.0. Defaults to 1.0. Lower values \"zoom in\" and higher values \"zoom out\".\r\n     * Best used when trying to implement visual zoom effects like fish-eye or binoculars while not adjusting camera fov.\r\n     * Recommended to be keep at 1.0 except for special cases.\r\n     */\n    get: function get() {\n      return this._fovMultiplier;\n    },\n    set: function set(value) {\n      if (isNaN(value)) {\n        value = 1.0;\n      }\n\n      this._fovMultiplier = Math.max(0.0, Math.min(2.0, value));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Attaches a new image processing configuration to the PBR Material.\r\n   * @param configuration (if null the scene configuration will be use)\r\n   */\n\n  BackgroundMaterial.prototype._attachImageProcessingConfiguration = function (configuration) {\n    var _this = this;\n\n    if (configuration === this._imageProcessingConfiguration) {\n      return;\n    } // Detaches observer.\n\n\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    } // Pick the scene configuration if needed.\n\n\n    if (!configuration) {\n      this._imageProcessingConfiguration = this.getScene().imageProcessingConfiguration;\n    } else {\n      this._imageProcessingConfiguration = configuration;\n    } // Attaches observer.\n\n\n    if (this._imageProcessingConfiguration) {\n      this._imageProcessingObserver = this._imageProcessingConfiguration.onUpdateParameters.add(function () {\n        _this._computePrimaryColorFromPerceptualColor();\n\n        _this._markAllSubMeshesAsImageProcessingDirty();\n      });\n    }\n  };\n\n  Object.defineProperty(BackgroundMaterial.prototype, \"imageProcessingConfiguration\", {\n    /**\r\n     * Gets the image processing configuration used either in this material.\r\n     */\n    get: function get() {\n      return this._imageProcessingConfiguration;\n    },\n\n    /**\r\n     * Sets the Default image processing configuration used either in the this material.\r\n     *\r\n     * If sets to null, the scene one is in use.\r\n     */\n    set: function set(value) {\n      this._attachImageProcessingConfiguration(value); // Ensure the effect will be rebuilt.\n\n\n      this._markAllSubMeshesAsTexturesDirty();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundMaterial.prototype, \"cameraColorCurvesEnabled\", {\n    /**\r\n     * Gets wether the color curves effect is enabled.\r\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.colorCurvesEnabled;\n    },\n\n    /**\r\n     * Sets wether the color curves effect is enabled.\r\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.colorCurvesEnabled = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundMaterial.prototype, \"cameraColorGradingEnabled\", {\n    /**\r\n     * Gets wether the color grading effect is enabled.\r\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.colorGradingEnabled;\n    },\n\n    /**\r\n     * Gets wether the color grading effect is enabled.\r\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.colorGradingEnabled = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundMaterial.prototype, \"cameraToneMappingEnabled\", {\n    /**\r\n     * Gets wether tonemapping is enabled or not.\r\n     */\n    get: function get() {\n      return this._imageProcessingConfiguration.toneMappingEnabled;\n    },\n\n    /**\r\n     * Sets wether tonemapping is enabled or not\r\n     */\n    set: function set(value) {\n      this._imageProcessingConfiguration.toneMappingEnabled = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundMaterial.prototype, \"cameraExposure\", {\n    /**\r\n     * The camera exposure used on this material.\r\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\r\n     * This corresponds to a photographic exposure.\r\n     */\n    get: function get() {\n      return this._imageProcessingConfiguration.exposure;\n    },\n\n    /**\r\n     * The camera exposure used on this material.\r\n     * This property is here and not in the camera to allow controlling exposure without full screen post process.\r\n     * This corresponds to a photographic exposure.\r\n     */\n    set: function set(value) {\n      this._imageProcessingConfiguration.exposure = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundMaterial.prototype, \"cameraContrast\", {\n    /**\r\n     * Gets The camera contrast used on this material.\r\n     */\n    get: function get() {\n      return this._imageProcessingConfiguration.contrast;\n    },\n\n    /**\r\n     * Sets The camera contrast used on this material.\r\n     */\n    set: function set(value) {\n      this._imageProcessingConfiguration.contrast = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundMaterial.prototype, \"cameraColorGradingTexture\", {\n    /**\r\n     * Gets the Color Grading 2D Lookup Texture.\r\n     */\n    get: function get() {\n      return this._imageProcessingConfiguration.colorGradingTexture;\n    },\n\n    /**\r\n     * Sets the Color Grading 2D Lookup Texture.\r\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.colorGradingTexture = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundMaterial.prototype, \"cameraColorCurves\", {\n    /**\r\n     * The color grading curves provide additional color adjustmnent that is applied after any color grading transform (3D LUT).\r\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n     */\n    get: function get() {\n      return this.imageProcessingConfiguration.colorCurves;\n    },\n\n    /**\r\n     * The color grading curves provide additional color adjustmnent that is applied after any color grading transform (3D LUT).\r\n     * They allow basic adjustment of saturation and small exposure adjustments, along with color filter tinting to provide white balance adjustment or more stylistic effects.\r\n     * These are similar to controls found in many professional imaging or colorist software. The global controls are applied to the entire image. For advanced tuning, extra controls are provided to adjust the shadow, midtone and highlight areas of the image;\r\n     * corresponding to low luminance, medium luminance, and high luminance areas respectively.\r\n     */\n    set: function set(value) {\n      this.imageProcessingConfiguration.colorCurves = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundMaterial.prototype, \"hasRenderTargetTextures\", {\n    /**\r\n     * Gets a boolean indicating that current material needs to register RTT\r\n     */\n    get: function get() {\n      if (this._diffuseTexture && this._diffuseTexture.isRenderTarget) {\n        return true;\n      }\n\n      if (this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n        return true;\n      }\n\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * The entire material has been created in order to prevent overdraw.\r\n   * @returns false\r\n   */\n\n  BackgroundMaterial.prototype.needAlphaTesting = function () {\n    return true;\n  };\n  /**\r\n   * The entire material has been created in order to prevent overdraw.\r\n   * @returns true if blending is enable\r\n   */\n\n\n  BackgroundMaterial.prototype.needAlphaBlending = function () {\n    return this.alpha < 1 || this._diffuseTexture != null && this._diffuseTexture.hasAlpha || this._shadowOnly;\n  };\n  /**\r\n   * Checks wether the material is ready to be rendered for a given mesh.\r\n   * @param mesh The mesh to render\r\n   * @param subMesh The submesh to check against\r\n   * @param useInstances Specify wether or not the material is used with instances\r\n   * @returns true if all the dependencies are ready (Textures, Effects...)\r\n   */\n\n\n  BackgroundMaterial.prototype.isReadyForSubMesh = function (mesh, subMesh, useInstances) {\n    var _this = this;\n\n    if (useInstances === void 0) {\n      useInstances = false;\n    }\n\n    if (subMesh.effect && this.isFrozen) {\n      if (subMesh.effect._wasPreviouslyReady) {\n        return true;\n      }\n    }\n\n    if (!subMesh._materialDefines) {\n      subMesh._materialDefines = new BackgroundMaterialDefines();\n    }\n\n    var scene = this.getScene();\n    var defines = subMesh._materialDefines;\n\n    if (this._isReadyForSubMesh(subMesh)) {\n      return true;\n    }\n\n    var engine = scene.getEngine(); // Lights\n\n    MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, false, this._maxSimultaneousLights);\n    defines._needNormals = true; // Multiview\n\n    MaterialHelper.PrepareDefinesForMultiview(scene, defines); // Textures\n\n    if (defines._areTexturesDirty) {\n      defines._needUVs = false;\n\n      if (scene.texturesEnabled) {\n        if (scene.getEngine().getCaps().textureLOD) {\n          defines.TEXTURELODSUPPORT = true;\n        }\n\n        if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\n          if (!this._diffuseTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n\n          MaterialHelper.PrepareDefinesForMergedUV(this._diffuseTexture, defines, \"DIFFUSE\");\n          defines.DIFFUSEHASALPHA = this._diffuseTexture.hasAlpha;\n          defines.GAMMADIFFUSE = this._diffuseTexture.gammaSpace;\n          defines.OPACITYFRESNEL = this._opacityFresnel;\n        } else {\n          defines.DIFFUSE = false;\n          defines.DIFFUSEHASALPHA = false;\n          defines.GAMMADIFFUSE = false;\n          defines.OPACITYFRESNEL = false;\n        }\n\n        var reflectionTexture = this._reflectionTexture;\n\n        if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n          if (!reflectionTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n\n          defines.REFLECTION = true;\n          defines.GAMMAREFLECTION = reflectionTexture.gammaSpace;\n          defines.RGBDREFLECTION = reflectionTexture.isRGBD;\n          defines.REFLECTIONBLUR = this._reflectionBlur > 0;\n          defines.REFLECTIONMAP_OPPOSITEZ = this.getScene().useRightHandedSystem ? !reflectionTexture.invertZ : reflectionTexture.invertZ;\n          defines.LODINREFLECTIONALPHA = reflectionTexture.lodLevelInAlpha;\n          defines.EQUIRECTANGULAR_RELFECTION_FOV = this.useEquirectangularFOV;\n          defines.REFLECTIONBGR = this.switchToBGR;\n\n          if (reflectionTexture.coordinatesMode === Texture.INVCUBIC_MODE) {\n            defines.INVERTCUBICMAP = true;\n          }\n\n          defines.REFLECTIONMAP_3D = reflectionTexture.isCube;\n\n          switch (reflectionTexture.coordinatesMode) {\n            case Texture.EXPLICIT_MODE:\n              defines.REFLECTIONMAP_EXPLICIT = true;\n              break;\n\n            case Texture.PLANAR_MODE:\n              defines.REFLECTIONMAP_PLANAR = true;\n              break;\n\n            case Texture.PROJECTION_MODE:\n              defines.REFLECTIONMAP_PROJECTION = true;\n              break;\n\n            case Texture.SKYBOX_MODE:\n              defines.REFLECTIONMAP_SKYBOX = true;\n              break;\n\n            case Texture.SPHERICAL_MODE:\n              defines.REFLECTIONMAP_SPHERICAL = true;\n              break;\n\n            case Texture.EQUIRECTANGULAR_MODE:\n              defines.REFLECTIONMAP_EQUIRECTANGULAR = true;\n              break;\n\n            case Texture.FIXED_EQUIRECTANGULAR_MODE:\n              defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = true;\n              break;\n\n            case Texture.FIXED_EQUIRECTANGULAR_MIRRORED_MODE:\n              defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = true;\n              break;\n\n            case Texture.CUBIC_MODE:\n            case Texture.INVCUBIC_MODE:\n            default:\n              defines.REFLECTIONMAP_CUBIC = true;\n              break;\n          }\n\n          if (this.reflectionFresnel) {\n            defines.REFLECTIONFRESNEL = true;\n            defines.REFLECTIONFALLOFF = this.reflectionFalloffDistance > 0;\n            this._reflectionControls.x = this.reflectionAmount;\n            this._reflectionControls.y = this.reflectionReflectance0;\n            this._reflectionControls.z = this.reflectionReflectance90;\n            this._reflectionControls.w = 1 / this.reflectionFalloffDistance;\n          } else {\n            defines.REFLECTIONFRESNEL = false;\n            defines.REFLECTIONFALLOFF = false;\n          }\n        } else {\n          defines.REFLECTION = false;\n          defines.REFLECTIONFRESNEL = false;\n          defines.REFLECTIONFALLOFF = false;\n          defines.REFLECTIONBLUR = false;\n          defines.REFLECTIONMAP_3D = false;\n          defines.REFLECTIONMAP_SPHERICAL = false;\n          defines.REFLECTIONMAP_PLANAR = false;\n          defines.REFLECTIONMAP_CUBIC = false;\n          defines.REFLECTIONMAP_PROJECTION = false;\n          defines.REFLECTIONMAP_SKYBOX = false;\n          defines.REFLECTIONMAP_EXPLICIT = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR = false;\n          defines.REFLECTIONMAP_EQUIRECTANGULAR_FIXED = false;\n          defines.REFLECTIONMAP_MIRROREDEQUIRECTANGULAR_FIXED = false;\n          defines.INVERTCUBICMAP = false;\n          defines.REFLECTIONMAP_OPPOSITEZ = false;\n          defines.LODINREFLECTIONALPHA = false;\n          defines.GAMMAREFLECTION = false;\n          defines.RGBDREFLECTION = false;\n        }\n      }\n\n      defines.PREMULTIPLYALPHA = this.alphaMode === 7 || this.alphaMode === 8;\n      defines.USERGBCOLOR = this._useRGBColor;\n      defines.NOISE = this._enableNoise;\n    }\n\n    if (defines._areLightsDirty) {\n      defines.USEHIGHLIGHTANDSHADOWCOLORS = !this._useRGBColor && (this._primaryColorShadowLevel !== 0 || this._primaryColorHighlightLevel !== 0);\n      defines.BACKMAT_SHADOWONLY = this._shadowOnly;\n    }\n\n    if (defines._areImageProcessingDirty && this._imageProcessingConfiguration) {\n      if (!this._imageProcessingConfiguration.isReady()) {\n        return false;\n      }\n\n      this._imageProcessingConfiguration.prepareDefines(defines);\n    } // Misc.\n\n\n    MaterialHelper.PrepareDefinesForMisc(mesh, scene, false, this.pointsCloud, this.fogEnabled, this._shouldTurnAlphaTestOn(mesh), defines); // Values that need to be evaluated on every frame\n\n    MaterialHelper.PrepareDefinesForFrameBoundValues(scene, engine, defines, useInstances, null, subMesh.getRenderingMesh().hasThinInstances); // Attribs\n\n    if (MaterialHelper.PrepareDefinesForAttributes(mesh, defines, false, true, false)) {\n      if (mesh) {\n        if (!scene.getEngine().getCaps().standardDerivatives && !mesh.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n          mesh.createNormals(true);\n          Logger.Warn(\"BackgroundMaterial: Normals have been created for the mesh: \" + mesh.name);\n        }\n      }\n    } // Get correct effect\n\n\n    if (defines.isDirty) {\n      defines.markAsProcessed();\n      scene.resetCachedMaterial(); // Fallbacks\n\n      var fallbacks = new EffectFallbacks();\n\n      if (defines.FOG) {\n        fallbacks.addFallback(0, \"FOG\");\n      }\n\n      if (defines.POINTSIZE) {\n        fallbacks.addFallback(1, \"POINTSIZE\");\n      }\n\n      if (defines.MULTIVIEW) {\n        fallbacks.addFallback(0, \"MULTIVIEW\");\n      }\n\n      MaterialHelper.HandleFallbacksForShadows(defines, fallbacks, this._maxSimultaneousLights); //Attributes\n\n      var attribs = [VertexBuffer.PositionKind];\n\n      if (defines.NORMAL) {\n        attribs.push(VertexBuffer.NormalKind);\n      }\n\n      if (defines.UV1) {\n        attribs.push(VertexBuffer.UVKind);\n      }\n\n      if (defines.UV2) {\n        attribs.push(VertexBuffer.UV2Kind);\n      }\n\n      MaterialHelper.PrepareAttributesForBones(attribs, mesh, defines, fallbacks);\n      MaterialHelper.PrepareAttributesForInstances(attribs, defines);\n      var uniforms = [\"world\", \"view\", \"viewProjection\", \"vEyePosition\", \"vLightsType\", \"vFogInfos\", \"vFogColor\", \"pointSize\", \"vClipPlane\", \"vClipPlane2\", \"vClipPlane3\", \"vClipPlane4\", \"vClipPlane5\", \"vClipPlane6\", \"mBones\", \"vPrimaryColor\", \"vPrimaryColorShadow\", \"vReflectionInfos\", \"reflectionMatrix\", \"vReflectionMicrosurfaceInfos\", \"fFovMultiplier\", \"shadowLevel\", \"alpha\", \"vBackgroundCenter\", \"vReflectionControl\", \"vDiffuseInfos\", \"diffuseMatrix\"];\n      var samplers = [\"diffuseSampler\", \"reflectionSampler\", \"reflectionSamplerLow\", \"reflectionSamplerHigh\"];\n      var uniformBuffers = [\"Material\", \"Scene\"];\n\n      if (ImageProcessingConfiguration) {\n        ImageProcessingConfiguration.PrepareUniforms(uniforms, defines);\n        ImageProcessingConfiguration.PrepareSamplers(samplers, defines);\n      }\n\n      MaterialHelper.PrepareUniformsAndSamplersList({\n        uniformsNames: uniforms,\n        uniformBuffersNames: uniformBuffers,\n        samplers: samplers,\n        defines: defines,\n        maxSimultaneousLights: this._maxSimultaneousLights\n      });\n\n      var onCompiled = function onCompiled(effect) {\n        if (_this.onCompiled) {\n          _this.onCompiled(effect);\n        }\n\n        _this.bindSceneUniformBuffer(effect, scene.getSceneUniformBuffer());\n      };\n\n      var join = defines.toString();\n      subMesh.setEffect(scene.getEngine().createEffect(\"background\", {\n        attributes: attribs,\n        uniformsNames: uniforms,\n        uniformBuffersNames: uniformBuffers,\n        samplers: samplers,\n        defines: join,\n        fallbacks: fallbacks,\n        onCompiled: onCompiled,\n        onError: this.onError,\n        indexParameters: {\n          maxSimultaneousLights: this._maxSimultaneousLights\n        }\n      }, engine), defines);\n      this.buildUniformLayout();\n    }\n\n    if (!subMesh.effect || !subMesh.effect.isReady()) {\n      return false;\n    }\n\n    defines._renderId = scene.getRenderId();\n    subMesh.effect._wasPreviouslyReady = true;\n    return true;\n  };\n  /**\r\n   * Compute the primary color according to the chosen perceptual color.\r\n   */\n\n\n  BackgroundMaterial.prototype._computePrimaryColorFromPerceptualColor = function () {\n    if (!this.__perceptualColor) {\n      return;\n    }\n\n    this._primaryColor.copyFrom(this.__perceptualColor); // Revert gamma space.\n\n\n    this._primaryColor.toLinearSpaceToRef(this._primaryColor); // Revert image processing configuration.\n\n\n    if (this._imageProcessingConfiguration) {\n      // Revert Exposure.\n      this._primaryColor.scaleToRef(1 / this._imageProcessingConfiguration.exposure, this._primaryColor);\n    }\n\n    this._computePrimaryColors();\n  };\n  /**\r\n   * Compute the highlights and shadow colors according to their chosen levels.\r\n   */\n\n\n  BackgroundMaterial.prototype._computePrimaryColors = function () {\n    if (this._primaryColorShadowLevel === 0 && this._primaryColorHighlightLevel === 0) {\n      return;\n    } // Find the highlight color based on the configuration.\n\n\n    this._primaryColor.scaleToRef(this._primaryColorShadowLevel, this._primaryShadowColor);\n\n    this._primaryColor.subtractToRef(this._primaryShadowColor, this._primaryShadowColor); // Find the shadow color based on the configuration.\n\n\n    this._white.subtractToRef(this._primaryColor, this._primaryHighlightColor);\n\n    this._primaryHighlightColor.scaleToRef(this._primaryColorHighlightLevel, this._primaryHighlightColor);\n\n    this._primaryColor.addToRef(this._primaryHighlightColor, this._primaryHighlightColor);\n  };\n  /**\r\n   * Build the uniform buffer used in the material.\r\n   */\n\n\n  BackgroundMaterial.prototype.buildUniformLayout = function () {\n    // Order is important !\n    this._uniformBuffer.addUniform(\"vPrimaryColor\", 4);\n\n    this._uniformBuffer.addUniform(\"vPrimaryColorShadow\", 4);\n\n    this._uniformBuffer.addUniform(\"vDiffuseInfos\", 2);\n\n    this._uniformBuffer.addUniform(\"vReflectionInfos\", 2);\n\n    this._uniformBuffer.addUniform(\"diffuseMatrix\", 16);\n\n    this._uniformBuffer.addUniform(\"reflectionMatrix\", 16);\n\n    this._uniformBuffer.addUniform(\"vReflectionMicrosurfaceInfos\", 3);\n\n    this._uniformBuffer.addUniform(\"fFovMultiplier\", 1);\n\n    this._uniformBuffer.addUniform(\"pointSize\", 1);\n\n    this._uniformBuffer.addUniform(\"shadowLevel\", 1);\n\n    this._uniformBuffer.addUniform(\"alpha\", 1);\n\n    this._uniformBuffer.addUniform(\"vBackgroundCenter\", 3);\n\n    this._uniformBuffer.addUniform(\"vReflectionControl\", 4);\n\n    this._uniformBuffer.create();\n  };\n  /**\r\n   * Unbind the material.\r\n   */\n\n\n  BackgroundMaterial.prototype.unbind = function () {\n    if (this._diffuseTexture && this._diffuseTexture.isRenderTarget) {\n      this._uniformBuffer.setTexture(\"diffuseSampler\", null);\n    }\n\n    if (this._reflectionTexture && this._reflectionTexture.isRenderTarget) {\n      this._uniformBuffer.setTexture(\"reflectionSampler\", null);\n    }\n\n    _super.prototype.unbind.call(this);\n  };\n  /**\r\n   * Bind only the world matrix to the material.\r\n   * @param world The world matrix to bind.\r\n   */\n\n\n  BackgroundMaterial.prototype.bindOnlyWorldMatrix = function (world) {\n    this._activeEffect.setMatrix(\"world\", world);\n  };\n  /**\r\n   * Bind the material for a dedicated submeh (every used meshes will be considered opaque).\r\n   * @param world The world matrix to bind.\r\n   * @param subMesh The submesh to bind for.\r\n   */\n\n\n  BackgroundMaterial.prototype.bindForSubMesh = function (world, mesh, subMesh) {\n    var scene = this.getScene();\n    var defines = subMesh._materialDefines;\n\n    if (!defines) {\n      return;\n    }\n\n    var effect = subMesh.effect;\n\n    if (!effect) {\n      return;\n    }\n\n    this._activeEffect = effect; // Matrices\n\n    this.bindOnlyWorldMatrix(world); // Bones\n\n    MaterialHelper.BindBonesParameters(mesh, this._activeEffect);\n\n    var mustRebind = this._mustRebind(scene, effect, mesh.visibility);\n\n    if (mustRebind) {\n      this._uniformBuffer.bindToEffect(effect, \"Material\");\n\n      this.bindViewProjection(effect);\n      var reflectionTexture = this._reflectionTexture;\n\n      if (!this._uniformBuffer.useUbo || !this.isFrozen || !this._uniformBuffer.isSync) {\n        // Texture uniforms\n        if (scene.texturesEnabled) {\n          if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\n            this._uniformBuffer.updateFloat2(\"vDiffuseInfos\", this._diffuseTexture.coordinatesIndex, this._diffuseTexture.level);\n\n            MaterialHelper.BindTextureMatrix(this._diffuseTexture, this._uniformBuffer, \"diffuse\");\n          }\n\n          if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n            this._uniformBuffer.updateMatrix(\"reflectionMatrix\", reflectionTexture.getReflectionTextureMatrix());\n\n            this._uniformBuffer.updateFloat2(\"vReflectionInfos\", reflectionTexture.level, this._reflectionBlur);\n\n            this._uniformBuffer.updateFloat3(\"vReflectionMicrosurfaceInfos\", reflectionTexture.getSize().width, reflectionTexture.lodGenerationScale, reflectionTexture.lodGenerationOffset);\n          }\n        }\n\n        if (this.shadowLevel > 0) {\n          this._uniformBuffer.updateFloat(\"shadowLevel\", this.shadowLevel);\n        }\n\n        this._uniformBuffer.updateFloat(\"alpha\", this.alpha); // Point size\n\n\n        if (this.pointsCloud) {\n          this._uniformBuffer.updateFloat(\"pointSize\", this.pointSize);\n        }\n\n        if (defines.USEHIGHLIGHTANDSHADOWCOLORS) {\n          this._uniformBuffer.updateColor4(\"vPrimaryColor\", this._primaryHighlightColor, 1.0);\n\n          this._uniformBuffer.updateColor4(\"vPrimaryColorShadow\", this._primaryShadowColor, 1.0);\n        } else {\n          this._uniformBuffer.updateColor4(\"vPrimaryColor\", this._primaryColor, 1.0);\n        }\n      }\n\n      this._uniformBuffer.updateFloat(\"fFovMultiplier\", this._fovMultiplier); // Textures\n\n\n      if (scene.texturesEnabled) {\n        if (this._diffuseTexture && MaterialFlags.DiffuseTextureEnabled) {\n          this._uniformBuffer.setTexture(\"diffuseSampler\", this._diffuseTexture);\n        }\n\n        if (reflectionTexture && MaterialFlags.ReflectionTextureEnabled) {\n          if (defines.REFLECTIONBLUR && defines.TEXTURELODSUPPORT) {\n            this._uniformBuffer.setTexture(\"reflectionSampler\", reflectionTexture);\n          } else if (!defines.REFLECTIONBLUR) {\n            this._uniformBuffer.setTexture(\"reflectionSampler\", reflectionTexture);\n          } else {\n            this._uniformBuffer.setTexture(\"reflectionSampler\", reflectionTexture._lodTextureMid || reflectionTexture);\n\n            this._uniformBuffer.setTexture(\"reflectionSamplerLow\", reflectionTexture._lodTextureLow || reflectionTexture);\n\n            this._uniformBuffer.setTexture(\"reflectionSamplerHigh\", reflectionTexture._lodTextureHigh || reflectionTexture);\n          }\n\n          if (defines.REFLECTIONFRESNEL) {\n            this._uniformBuffer.updateFloat3(\"vBackgroundCenter\", this.sceneCenter.x, this.sceneCenter.y, this.sceneCenter.z);\n\n            this._uniformBuffer.updateFloat4(\"vReflectionControl\", this._reflectionControls.x, this._reflectionControls.y, this._reflectionControls.z, this._reflectionControls.w);\n          }\n        }\n      } // Clip plane\n\n\n      MaterialHelper.BindClipPlane(this._activeEffect, scene);\n      MaterialHelper.BindEyePosition(effect, scene);\n    }\n\n    if (mustRebind || !this.isFrozen) {\n      if (scene.lightsEnabled) {\n        MaterialHelper.BindLights(scene, mesh, this._activeEffect, defines, this._maxSimultaneousLights, false);\n      } // View\n\n\n      this.bindView(effect); // Fog\n\n      MaterialHelper.BindFogParameters(scene, mesh, this._activeEffect, true); // image processing\n\n      if (this._imageProcessingConfiguration) {\n        this._imageProcessingConfiguration.bind(this._activeEffect);\n      }\n    }\n\n    this._uniformBuffer.update();\n\n    this._afterBind(mesh, this._activeEffect);\n  };\n  /**\r\n   * Checks to see if a texture is used in the material.\r\n   * @param texture - Base texture to use.\r\n   * @returns - Boolean specifying if a texture is used in the material.\r\n   */\n\n\n  BackgroundMaterial.prototype.hasTexture = function (texture) {\n    if (_super.prototype.hasTexture.call(this, texture)) {\n      return true;\n    }\n\n    if (this._reflectionTexture === texture) {\n      return true;\n    }\n\n    if (this._diffuseTexture === texture) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Dispose the material.\r\n   * @param forceDisposeEffect Force disposal of the associated effect.\r\n   * @param forceDisposeTextures Force disposal of the associated textures.\r\n   */\n\n\n  BackgroundMaterial.prototype.dispose = function (forceDisposeEffect, forceDisposeTextures) {\n    if (forceDisposeEffect === void 0) {\n      forceDisposeEffect = false;\n    }\n\n    if (forceDisposeTextures === void 0) {\n      forceDisposeTextures = false;\n    }\n\n    if (forceDisposeTextures) {\n      if (this.diffuseTexture) {\n        this.diffuseTexture.dispose();\n      }\n\n      if (this.reflectionTexture) {\n        this.reflectionTexture.dispose();\n      }\n    }\n\n    this._renderTargets.dispose();\n\n    if (this._imageProcessingConfiguration && this._imageProcessingObserver) {\n      this._imageProcessingConfiguration.onUpdateParameters.remove(this._imageProcessingObserver);\n    }\n\n    _super.prototype.dispose.call(this, forceDisposeEffect);\n  };\n  /**\r\n   * Clones the material.\r\n   * @param name The cloned name.\r\n   * @returns The cloned material.\r\n   */\n\n\n  BackgroundMaterial.prototype.clone = function (name) {\n    var _this = this;\n\n    return SerializationHelper.Clone(function () {\n      return new BackgroundMaterial(name, _this.getScene());\n    }, this);\n  };\n  /**\r\n   * Serializes the current material to its JSON representation.\r\n   * @returns The JSON representation.\r\n   */\n\n\n  BackgroundMaterial.prototype.serialize = function () {\n    var serializationObject = SerializationHelper.Serialize(this);\n    serializationObject.customType = \"BABYLON.BackgroundMaterial\";\n    return serializationObject;\n  };\n  /**\r\n   * Gets the class name of the material\r\n   * @returns \"BackgroundMaterial\"\r\n   */\n\n\n  BackgroundMaterial.prototype.getClassName = function () {\n    return \"BackgroundMaterial\";\n  };\n  /**\r\n   * Parse a JSON input to create back a background material.\r\n   * @param source The JSON data to parse\r\n   * @param scene The scene to create the parsed material in\r\n   * @param rootUrl The root url of the assets the material depends upon\r\n   * @returns the instantiated BackgroundMaterial.\r\n   */\n\n\n  BackgroundMaterial.Parse = function (source, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new BackgroundMaterial(source.name, scene);\n    }, source, scene, rootUrl);\n  };\n  /**\r\n   * Standard reflectance value at parallel view angle.\r\n   */\n\n\n  BackgroundMaterial.StandardReflectance0 = 0.05;\n  /**\r\n   * Standard reflectance value at grazing angle.\r\n   */\n\n  BackgroundMaterial.StandardReflectance90 = 0.5;\n\n  __decorate([serializeAsColor3()], BackgroundMaterial.prototype, \"_primaryColor\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsLightsDirty\")], BackgroundMaterial.prototype, \"primaryColor\", void 0);\n\n  __decorate([serializeAsColor3()], BackgroundMaterial.prototype, \"__perceptualColor\", void 0);\n\n  __decorate([serialize()], BackgroundMaterial.prototype, \"_primaryColorShadowLevel\", void 0);\n\n  __decorate([serialize()], BackgroundMaterial.prototype, \"_primaryColorHighlightLevel\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsLightsDirty\")], BackgroundMaterial.prototype, \"primaryColorHighlightLevel\", null);\n\n  __decorate([serializeAsTexture()], BackgroundMaterial.prototype, \"_reflectionTexture\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], BackgroundMaterial.prototype, \"reflectionTexture\", void 0);\n\n  __decorate([serialize()], BackgroundMaterial.prototype, \"_reflectionBlur\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], BackgroundMaterial.prototype, \"reflectionBlur\", void 0);\n\n  __decorate([serializeAsTexture()], BackgroundMaterial.prototype, \"_diffuseTexture\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], BackgroundMaterial.prototype, \"diffuseTexture\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], BackgroundMaterial.prototype, \"shadowLights\", void 0);\n\n  __decorate([serialize()], BackgroundMaterial.prototype, \"_shadowLevel\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], BackgroundMaterial.prototype, \"shadowLevel\", void 0);\n\n  __decorate([serializeAsVector3()], BackgroundMaterial.prototype, \"_sceneCenter\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], BackgroundMaterial.prototype, \"sceneCenter\", void 0);\n\n  __decorate([serialize()], BackgroundMaterial.prototype, \"_opacityFresnel\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], BackgroundMaterial.prototype, \"opacityFresnel\", void 0);\n\n  __decorate([serialize()], BackgroundMaterial.prototype, \"_reflectionFresnel\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], BackgroundMaterial.prototype, \"reflectionFresnel\", void 0);\n\n  __decorate([serialize()], BackgroundMaterial.prototype, \"_reflectionFalloffDistance\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], BackgroundMaterial.prototype, \"reflectionFalloffDistance\", void 0);\n\n  __decorate([serialize()], BackgroundMaterial.prototype, \"_reflectionAmount\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], BackgroundMaterial.prototype, \"reflectionAmount\", void 0);\n\n  __decorate([serialize()], BackgroundMaterial.prototype, \"_reflectionReflectance0\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], BackgroundMaterial.prototype, \"reflectionReflectance0\", void 0);\n\n  __decorate([serialize()], BackgroundMaterial.prototype, \"_reflectionReflectance90\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], BackgroundMaterial.prototype, \"reflectionReflectance90\", void 0);\n\n  __decorate([serialize()], BackgroundMaterial.prototype, \"_useRGBColor\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], BackgroundMaterial.prototype, \"useRGBColor\", void 0);\n\n  __decorate([serialize()], BackgroundMaterial.prototype, \"_enableNoise\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], BackgroundMaterial.prototype, \"enableNoise\", void 0);\n\n  __decorate([serialize()], BackgroundMaterial.prototype, \"_maxSimultaneousLights\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], BackgroundMaterial.prototype, \"maxSimultaneousLights\", void 0);\n\n  __decorate([serialize()], BackgroundMaterial.prototype, \"_shadowOnly\", void 0);\n\n  __decorate([expandToProperty(\"_markAllSubMeshesAsLightsDirty\")], BackgroundMaterial.prototype, \"shadowOnly\", void 0);\n\n  __decorate([serializeAsImageProcessingConfiguration()], BackgroundMaterial.prototype, \"_imageProcessingConfiguration\", void 0);\n\n  return BackgroundMaterial;\n}(PushMaterial);\n\nexport { BackgroundMaterial };\n_TypeStore.RegisteredTypes[\"BABYLON.BackgroundMaterial\"] = BackgroundMaterial;","map":null,"metadata":{},"sourceType":"module"}