{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CatalystClient = void 0;\n\nvar dcl_catalyst_commons_1 = require(\"dcl-catalyst-commons\");\n\nvar ContentClient_1 = require(\"./ContentClient\");\n\nvar LambdasClient_1 = require(\"./LambdasClient\");\n\nvar CatalystClientBuilder_1 = require(\"./utils/CatalystClientBuilder\");\n\nvar Helper_1 = require(\"./utils/Helper\");\n\nvar CatalystClient = /*#__PURE__*/function () {\n  function CatalystClient(options) {\n    _classCallCheck(this, CatalystClient);\n\n    this.catalystUrl = (0, Helper_1.sanitizeUrl)(options.catalystUrl);\n    var fetcher = options.fetcher ? options.fetcher : new dcl_catalyst_commons_1.Fetcher({\n      headers: (0, Helper_1.getHeadersWithUserAgent)('catalyst-client')\n    });\n    this.contentClient = new ContentClient_1.ContentClient({\n      contentUrl: this.catalystUrl + '/content',\n      fetcher: fetcher,\n      deploymentBuilderClass: options.deploymentBuilderClass\n    });\n    this.lambdasClient = new LambdasClient_1.LambdasClient({\n      lambdasUrl: this.catalystUrl + '/lambdas',\n      fetcher: fetcher\n    });\n  }\n\n  _createClass(CatalystClient, [{\n    key: \"buildEntity\",\n    value: function buildEntity(options) {\n      return this.contentClient.buildEntity(options);\n    }\n  }, {\n    key: \"buildEntityWithoutNewFiles\",\n    value: function buildEntityWithoutNewFiles(options) {\n      return this.contentClient.buildEntityWithoutNewFiles(options);\n    }\n  }, {\n    key: \"deployEntity\",\n    value: function deployEntity(deployData) {\n      var fix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var options = arguments.length > 2 ? arguments[2] : undefined;\n      return this.contentClient.deployEntity(deployData, fix, options);\n    }\n  }, {\n    key: \"fetchEntitiesByPointers\",\n    value: function fetchEntitiesByPointers(type, pointers, options) {\n      return this.contentClient.fetchEntitiesByPointers(type, pointers, options);\n    }\n  }, {\n    key: \"fetchEntitiesByIds\",\n    value: function fetchEntitiesByIds(type, ids, options) {\n      return this.contentClient.fetchEntitiesByIds(type, ids, options);\n    }\n  }, {\n    key: \"fetchEntityById\",\n    value: function fetchEntityById(type, id, options) {\n      return this.contentClient.fetchEntityById(type, id, options);\n    }\n  }, {\n    key: \"fetchAuditInfo\",\n    value: function fetchAuditInfo(type, id, options) {\n      return this.contentClient.fetchAuditInfo(type, id, options);\n    }\n  }, {\n    key: \"fetchContentStatus\",\n    value: function fetchContentStatus(options) {\n      return this.contentClient.fetchContentStatus(options);\n    }\n  }, {\n    key: \"isContentAvailable\",\n    value: function isContentAvailable(cids, options) {\n      return this.contentClient.isContentAvailable(cids, options);\n    }\n  }, {\n    key: \"downloadContent\",\n    value: function downloadContent(contentHash, options) {\n      return this.contentClient.downloadContent(contentHash, options);\n    }\n  }, {\n    key: \"pipeContent\",\n    value: function pipeContent(contentHash, writeTo, options) {\n      return this.contentClient.pipeContent(contentHash, writeTo, options);\n    }\n  }, {\n    key: \"fetchProfiles\",\n    value: function fetchProfiles(ethAddresses, profileOptions, options) {\n      return this.lambdasClient.fetchProfiles(ethAddresses, profileOptions, options);\n    }\n  }, {\n    key: \"fetchWearables\",\n    value: function fetchWearables(filters, options) {\n      return this.lambdasClient.fetchWearables(filters, options);\n    }\n  }, {\n    key: \"fetchOwnedWearables\",\n    value: function fetchOwnedWearables(ethAddress, includeDefinitions, options) {\n      return this.lambdasClient.fetchOwnedWearables(ethAddress, includeDefinitions, options);\n    }\n  }, {\n    key: \"fetchOwnedThirdPartyWearables\",\n    value: function fetchOwnedThirdPartyWearables(ethAddress, thirdPartyId, includeDefinitions, options) {\n      return this.lambdasClient.fetchOwnedThirdPartyWearables(ethAddress, thirdPartyId, includeDefinitions, options);\n    }\n  }, {\n    key: \"fetchCatalystsApprovedByDAO\",\n    value: function fetchCatalystsApprovedByDAO(options) {\n      return this.lambdasClient.fetchCatalystsApprovedByDAO(options);\n    }\n  }, {\n    key: \"fetchLambdasStatus\",\n    value: function fetchLambdasStatus(options) {\n      return this.lambdasClient.fetchLambdasStatus(options);\n    }\n  }, {\n    key: \"fetchPeerHealth\",\n    value: function fetchPeerHealth(options) {\n      return this.lambdasClient.fetchPeerHealth(options);\n    }\n  }, {\n    key: \"getCatalystUrl\",\n    value: function getCatalystUrl() {\n      return this.catalystUrl;\n    }\n  }, {\n    key: \"getContentUrl\",\n    value: function getContentUrl() {\n      return this.contentClient.getContentUrl();\n    }\n  }, {\n    key: \"getLambdasUrl\",\n    value: function getLambdasUrl() {\n      return this.lambdasClient.getLambdasUrl();\n    }\n  }], [{\n    key: \"connectedToCatalystIn\",\n    value: function connectedToCatalystIn(options) {\n      return (0, CatalystClientBuilder_1.clientConnectedToCatalystIn)(options);\n    }\n  }]);\n\n  return CatalystClient;\n}();\n\nexports.CatalystClient = CatalystClient;","map":null,"metadata":{},"sourceType":"script"}