{"ast":null,"code":"import _defineProperty from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { loadingReducer } from 'decentraland-dapps/dist/modules/loading/reducer';\nimport { LOAD_POOLS_SUCCESS, LOAD_POOLS_REQUEST, LOAD_POOLS_FAILURE, LIKE_POOL_REQUEST, LIKE_POOL_SUCCESS, LIKE_POOL_FAILURE } from 'modules/pool/actions';\nimport { LOAD_PUBLIC_PROJECT_SUCCESS } from 'modules/project/actions';\nvar INITIAL_STATE = {\n  data: {},\n  loading: [],\n  error: {},\n  list: null,\n  total: null\n};\nexport var poolReducer = function poolReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LIKE_POOL_FAILURE:\n    case LIKE_POOL_SUCCESS:\n    case LOAD_POOLS_REQUEST:\n    case LOAD_POOLS_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          list: null,\n          total: null,\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case LOAD_POOLS_SUCCESS:\n      {\n        var _action$payload = action.payload,\n            pools = _action$payload.pools,\n            total = _action$payload.total;\n        var list = Object.keys(pools);\n        return _objectSpread({}, state, {\n          total: total,\n          list: list,\n          data: Object.keys(pools).reduce(function (data, id) {\n            data[id] = _objectSpread({}, state.data[id], pools[id]);\n            return data;\n          }, state.data),\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case LOAD_PUBLIC_PROJECT_SUCCESS:\n      {\n        var _action$payload2 = action.payload,\n            project = _action$payload2.project,\n            type = _action$payload2.type;\n\n        if (type !== 'pool') {\n          return _objectSpread({}, state, {\n            loading: loadingReducer(state.loading, action)\n          });\n        }\n\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, _defineProperty({}, project.id, project))\n        });\n      }\n\n    case LIKE_POOL_REQUEST:\n      {\n        var _action$payload3 = action.payload,\n            pool = _action$payload3.pool,\n            like = _action$payload3.like;\n\n        if (!state.data[pool]) {\n          return state;\n        }\n\n        var addition = like ? 1 : -1;\n        var currentPool = state.data[pool];\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, _defineProperty({}, pool, _objectSpread({}, currentPool, {\n            likes: (currentPool.likes || 0) + addition,\n            like: like\n          })))\n        });\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/pool/reducer.ts"],"names":["loadingReducer","LOAD_POOLS_SUCCESS","LOAD_POOLS_REQUEST","LOAD_POOLS_FAILURE","LIKE_POOL_REQUEST","LIKE_POOL_SUCCESS","LIKE_POOL_FAILURE","LOAD_PUBLIC_PROJECT_SUCCESS","INITIAL_STATE","data","loading","error","list","total","poolReducer","state","action","type","payload","pools","Object","keys","reduce","id","project","pool","like","addition","currentPool","likes"],"mappings":"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","sourcesContent":["import { loadingReducer, LoadingState } from 'decentraland-dapps/dist/modules/loading/reducer'\nimport { ModelById } from 'decentraland-dapps/dist/lib/types'\nimport { Pool } from 'modules/pool/types'\nimport {\n  LOAD_POOLS_SUCCESS,\n  LoadPoolsSuccessAction,\n  LOAD_POOLS_REQUEST,\n  LoadPoolsRequestAction,\n  LoadPoolsFailureAction,\n  LOAD_POOLS_FAILURE,\n  LIKE_POOL_REQUEST,\n  LIKE_POOL_SUCCESS,\n  LIKE_POOL_FAILURE,\n  LikePoolRequestAction,\n  LikePoolSuccessAction,\n  LikePoolFailureAction\n} from 'modules/pool/actions'\nimport { LOAD_PUBLIC_PROJECT_SUCCESS, LoadPublicProjectSuccessAction } from 'modules/project/actions'\n\nexport type PoolState = {\n  data: ModelById<Pool>\n  loading: LoadingState\n  error: Record<string, string>\n  list: string[] | null\n  total: number | null\n}\n\nconst INITIAL_STATE: PoolState = {\n  data: {},\n  loading: [],\n  error: {},\n  list: null,\n  total: null\n}\n\nexport type PoolReducerAction =\n  | LoadPoolsRequestAction\n  | LoadPoolsSuccessAction\n  | LoadPoolsFailureAction\n  | LikePoolRequestAction\n  | LikePoolSuccessAction\n  | LikePoolFailureAction\n  | LoadPublicProjectSuccessAction\n\nexport const poolReducer = (state = INITIAL_STATE, action: PoolReducerAction): PoolState => {\n  switch (action.type) {\n    case LIKE_POOL_FAILURE:\n    case LIKE_POOL_SUCCESS:\n    case LOAD_POOLS_REQUEST:\n    case LOAD_POOLS_FAILURE: {\n      return {\n        ...state,\n        list: null,\n        total: null,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case LOAD_POOLS_SUCCESS: {\n      const { pools, total } = action.payload\n      const list = Object.keys(pools)\n      return {\n        ...state,\n        total,\n        list,\n        data: Object.keys(pools).reduce((data, id) => {\n          data[id] = {\n            ...state.data[id],\n            ...pools[id]\n          }\n          return data\n        }, state.data),\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case LOAD_PUBLIC_PROJECT_SUCCESS: {\n      const { project, type } = action.payload\n      if (type !== 'pool') {\n        return {\n          ...state,\n          loading: loadingReducer(state.loading, action)\n        }\n      }\n\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [project.id]: project as Pool\n        }\n      }\n    }\n    case LIKE_POOL_REQUEST: {\n      const { pool, like } = action.payload\n\n      if (!state.data[pool]) {\n        return state\n      }\n\n      const addition = like ? 1 : -1\n      const currentPool = state.data[pool]\n\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [pool]: {\n            ...currentPool,\n            likes: (currentPool.likes || 0) + addition,\n            like\n          }\n        }\n      }\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}