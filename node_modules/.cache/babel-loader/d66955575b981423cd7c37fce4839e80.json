{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../Misc/typeStore';\n/**\r\n * block used to Generate a Simplex Perlin 3d Noise Pattern\r\n */\n//\n//  Wombat\n//  An efficient texture-free GLSL procedural noise library\n//  Source: https://github.com/BrianSharpe/Wombat\n//  Derived from: https://github.com/BrianSharpe/GPU-Noise-Lib\n//\n//  I'm not one for copyrights.  Use the code however you wish.\n//  All I ask is that credit be given back to the blog or myself when appropriate.\n//  And also to let me know if you come up with any changes, improvements, thoughts or interesting uses for this stuff. :)\n//  Thanks!\n//\n//  Brian Sharpe\n//  brisharpe CIRCLE_A yahoo DOT com\n//  http://briansharpe.wordpress.com\n//  https://github.com/BrianSharpe\n//\n//\n//  This is a modified version of Stefan Gustavson's and Ian McEwan's work at http://github.com/ashima/webgl-noise\n//  Modifications are...\n//  - faster random number generation\n//  - analytical final normalization\n//  - space scaled can have an approx feature size of 1.0\n//  - filter kernel changed to fix discontinuities at tetrahedron boundaries\n//\n//  Converted to BJS by Pryme8\n//\n//  Simplex Perlin Noise 3D\n//  Return value range of -1.0->1.0\n//\n\nvar SimplexPerlin3DBlock =\n/** @class */\nfunction (_super) {\n  __extends(SimplexPerlin3DBlock, _super);\n  /**\r\n   * Creates a new SimplexPerlin3DBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function SimplexPerlin3DBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n\n    _this.registerInput(\"seed\", NodeMaterialBlockConnectionPointTypes.Vector3);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  SimplexPerlin3DBlock.prototype.getClassName = function () {\n    return \"SimplexPerlin3DBlock\";\n  };\n\n  Object.defineProperty(SimplexPerlin3DBlock.prototype, \"seed\", {\n    /**\r\n     * Gets the seed operand input component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SimplexPerlin3DBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SimplexPerlin3DBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    if (!this.seed.isConnected) {\n      return;\n    }\n\n    if (!this._outputs[0].hasEndpoints) {\n      return;\n    }\n\n    var functionString = \"const float SKEWFACTOR = 1.0/3.0;\\r\\n\";\n    functionString += \"const float UNSKEWFACTOR = 1.0/6.0;\\r\\n\";\n    functionString += \"const float SIMPLEX_CORNER_POS = 0.5;\\r\\n\";\n    functionString += \"const float SIMPLEX_TETRAHADRON_HEIGHT = 0.70710678118654752440084436210485;\\r\\n\";\n    functionString += \"float SimplexPerlin3D( vec3 P ){\\r\\n\";\n    functionString += \"    P *= SIMPLEX_TETRAHADRON_HEIGHT;\\r\\n\";\n    functionString += \"    vec3 Pi = floor( P + dot( P, vec3( SKEWFACTOR) ) );\";\n    functionString += \"    vec3 x0 = P - Pi + dot(Pi, vec3( UNSKEWFACTOR ) );\\r\\n\";\n    functionString += \"    vec3 g = step(x0.yzx, x0.xyz);\\r\\n\";\n    functionString += \"    vec3 l = 1.0 - g;\\r\\n\";\n    functionString += \"    vec3 Pi_1 = min( g.xyz, l.zxy );\\r\\n\";\n    functionString += \"    vec3 Pi_2 = max( g.xyz, l.zxy );\\r\\n\";\n    functionString += \"    vec3 x1 = x0 - Pi_1 + UNSKEWFACTOR;\\r\\n\";\n    functionString += \"    vec3 x2 = x0 - Pi_2 + SKEWFACTOR;\\r\\n\";\n    functionString += \"    vec3 x3 = x0 - SIMPLEX_CORNER_POS;\\r\\n\";\n    functionString += \"    vec4 v1234_x = vec4( x0.x, x1.x, x2.x, x3.x );\\r\\n\";\n    functionString += \"    vec4 v1234_y = vec4( x0.y, x1.y, x2.y, x3.y );\\r\\n\";\n    functionString += \"    vec4 v1234_z = vec4( x0.z, x1.z, x2.z, x3.z );\\r\\n\";\n    functionString += \"    Pi.xyz = Pi.xyz - floor(Pi.xyz * ( 1.0 / 69.0 )) * 69.0;\\r\\n\";\n    functionString += \"    vec3 Pi_inc1 = step( Pi, vec3( 69.0 - 1.5 ) ) * ( Pi + 1.0 );\\r\\n\";\n    functionString += \"    vec4 Pt = vec4( Pi.xy, Pi_inc1.xy ) + vec2( 50.0, 161.0 ).xyxy;\\r\\n\";\n    functionString += \"    Pt *= Pt;\\r\\n\";\n    functionString += \"    vec4 V1xy_V2xy = mix( Pt.xyxy, Pt.zwzw, vec4( Pi_1.xy, Pi_2.xy ) );\\r\\n\";\n    functionString += \"    Pt = vec4( Pt.x, V1xy_V2xy.xz, Pt.z ) * vec4( Pt.y, V1xy_V2xy.yw, Pt.w );\\r\\n\";\n    functionString += \"    const vec3 SOMELARGEFLOATS = vec3( 635.298681, 682.357502, 668.926525 );\\r\\n\";\n    functionString += \"    const vec3 ZINC = vec3( 48.500388, 65.294118, 63.934599 );\\r\\n\";\n    functionString += \"    vec3 lowz_mods = vec3( 1.0 / ( SOMELARGEFLOATS.xyz + Pi.zzz * ZINC.xyz ) );\\r\\n\";\n    functionString += \"    vec3 highz_mods = vec3( 1.0 / ( SOMELARGEFLOATS.xyz + Pi_inc1.zzz * ZINC.xyz ) );\\r\\n\";\n    functionString += \"    Pi_1 = ( Pi_1.z < 0.5 ) ? lowz_mods : highz_mods;\\r\\n\";\n    functionString += \"    Pi_2 = ( Pi_2.z < 0.5 ) ? lowz_mods : highz_mods;\\r\\n\";\n    functionString += \"    vec4 hash_0 = fract( Pt * vec4( lowz_mods.x, Pi_1.x, Pi_2.x, highz_mods.x ) ) - 0.49999;\\r\\n\";\n    functionString += \"    vec4 hash_1 = fract( Pt * vec4( lowz_mods.y, Pi_1.y, Pi_2.y, highz_mods.y ) ) - 0.49999;\\r\\n\";\n    functionString += \"    vec4 hash_2 = fract( Pt * vec4( lowz_mods.z, Pi_1.z, Pi_2.z, highz_mods.z ) ) - 0.49999;\\r\\n\";\n    functionString += \"    vec4 grad_results = inversesqrt( hash_0 * hash_0 + hash_1 * hash_1 + hash_2 * hash_2 ) * ( hash_0 * v1234_x + hash_1 * v1234_y + hash_2 * v1234_z );\\r\\n\";\n    functionString += \"    const float FINAL_NORMALIZATION = 37.837227241611314102871574478976;\\r\\n\";\n    functionString += \"    vec4 kernel_weights = v1234_x * v1234_x + v1234_y * v1234_y + v1234_z * v1234_z;\\r\\n\";\n    functionString += \"    kernel_weights = max(0.5 - kernel_weights, 0.0);\\r\\n\";\n    functionString += \"    kernel_weights = kernel_weights*kernel_weights*kernel_weights;\\r\\n\";\n    functionString += \"    return dot( kernel_weights, grad_results ) * FINAL_NORMALIZATION;\\r\\n\";\n    functionString += \"}\\r\\n\";\n\n    state._emitFunction('SimplexPerlin3D', functionString, '// SimplexPerlin3D');\n\n    state.compilationString += this._declareOutput(this._outputs[0], state) + (\" = SimplexPerlin3D(\" + this.seed.associatedVariableName + \");\\r\\n\");\n    return this;\n  };\n\n  return SimplexPerlin3DBlock;\n}(NodeMaterialBlock);\n\nexport { SimplexPerlin3DBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.SimplexPerlin3DBlock\"] = SimplexPerlin3DBlock;","map":null,"metadata":{},"sourceType":"module"}