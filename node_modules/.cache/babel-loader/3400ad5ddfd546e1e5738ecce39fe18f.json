{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _memoize2 = _interopRequireDefault(require(\"lodash/memoize\"));\n\nvar _invoke2 = _interopRequireDefault(require(\"lodash/invoke\"));\n\nvar _reactComponentRef = require(\"@fluentui/react-component-ref\");\n\nvar ReferenceProxy = /*#__PURE__*/function () {\n  function ReferenceProxy(refObject) {\n    this.ref = refObject;\n  }\n\n  var _proto = ReferenceProxy.prototype;\n\n  _proto.getBoundingClientRect = function getBoundingClientRect() {\n    return (0, _invoke2.default)(this.ref.current, 'getBoundingClientRect') || {};\n  };\n\n  (0, _createClass2.default)(ReferenceProxy, [{\n    key: \"clientWidth\",\n    get: function get() {\n      return this.getBoundingClientRect().width;\n    }\n  }, {\n    key: \"clientHeight\",\n    get: function get() {\n      return this.getBoundingClientRect().height;\n    }\n  }, {\n    key: \"parentNode\",\n    get: function get() {\n      return this.ref.current ? this.ref.current.parentNode : undefined;\n    }\n  }]);\n  return ReferenceProxy;\n}();\n/**\n * Popper.js does not support ref objects from `createRef()` as referenceElement. If we will pass\n * directly `ref`, `ref.current` will be `null` at the render process. We use memoize to keep the\n * same reference between renders.\n *\n * @see https://popper.js.org/popper-documentation.html#referenceObject\n */\n\n\nvar createReferenceProxy = (0, _memoize2.default)(function (reference) {\n  return new ReferenceProxy((0, _reactComponentRef.isRefObject)(reference) ? reference : {\n    current: reference\n  });\n});\nvar _default = createReferenceProxy;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}