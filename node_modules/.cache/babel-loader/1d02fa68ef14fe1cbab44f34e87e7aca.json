{"ast":null,"code":"\"use strict\"; /// <reference path=\"./types.d.ts\" />\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar REQUEST_VALUE = '__request_value__';\nvar REPLY_VALUE = '__reply_value__';\nvar POLL_INTERVAL = 5000;\n\nfunction createChannel(id, host, bus) {\n  var handlers = {};\n  var requests = {};\n  var responses = {};\n  bus.on(host.name, function (action) {\n    var handler = handlers[action.actionId];\n\n    if (handler) {\n      handler(action);\n    } // clear all pending requests for this entity\n\n\n    requests = {};\n  });\n  bus.on(REQUEST_VALUE, function (message) {\n    if (message.sender !== id && message.entityName === host.name) {\n      var key = message.key;\n      var response = responses[key];\n\n      if (response) {\n        var value = response();\n        var reply = {\n          entityName: host.name,\n          key: key,\n          sender: id,\n          value: value\n        };\n        bus.emit(REPLY_VALUE, reply);\n      } // clear pending request for this key\n\n\n      delete requests[key];\n    }\n  });\n  bus.on(REPLY_VALUE, function (message) {\n    if (message.sender !== id && message.entityName === host.name) {\n      var key = message.key,\n          value = message.value;\n      var request = requests[key];\n\n      if (request) {\n        request(value);\n      } // clear pending request for this key\n\n\n      delete requests[key];\n    }\n  });\n  return {\n    id: id,\n    bus: bus,\n    createAction: function createAction(actionId, values) {\n      var action = {\n        entityName: host.name,\n        actionId: actionId,\n        values: values\n      };\n      return action;\n    },\n    sendActions: function sendActions(actions) {\n      var e_1, _a;\n\n      if (actions === void 0) {\n        actions = [];\n      }\n\n      try {\n        for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {\n          var base = actions_1_1.value;\n\n          var action = __assign({}, base, {\n            sender: id\n          });\n\n          bus.emit(action.entityName, action);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    },\n    handleAction: function handleAction(actionId, handler) {\n      handlers[actionId] = handler;\n    },\n    request: function request(key, callback) {\n      requests[key] = callback;\n      var request = {\n        entityName: host.name,\n        key: key,\n        sender: id\n      };\n      var interval = setInterval(function () {\n        if (key in requests) {\n          bus.emit(REQUEST_VALUE, request);\n        } else {\n          clearInterval(interval);\n        }\n      }, POLL_INTERVAL);\n    },\n    reply: function reply(key, callback) {\n      responses[key] = callback;\n    }\n  };\n}\n\nexports.createChannel = createChannel;","map":null,"metadata":{},"sourceType":"script"}