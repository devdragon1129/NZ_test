{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/LandDetailPage/Scene/Scene.tsx\";\nimport * as React from 'react';\nimport { Dropdown, Button, Icon } from 'decentraland-ui';\nimport { locations } from 'routing/locations';\nimport SceneStats from 'components/SceneStats';\nimport { DeployModalView } from 'components/Modals/DeployModal/DeployModal.types';\nimport './Scene.css';\n\nvar Scene = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(Scene, _React$PureComponent);\n\n  function Scene() {\n    _classCallCheck(this, Scene);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Scene).apply(this, arguments));\n  }\n\n  _createClass(Scene, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          deployment = _this$props.deployment,\n          _onMouseEnter = _this$props.onMouseEnter,\n          _onMouseLeave = _this$props.onMouseLeave,\n          onNavigate = _this$props.onNavigate,\n          onOpenModal = _this$props.onOpenModal,\n          projects = _this$props.projects;\n      var project = deployment.projectId && deployment.projectId in projects ? projects[deployment.projectId] : null;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Scene \".concat(project ? 'clickable' : ''),\n        onClick: function onClick() {\n          return project && onNavigate(locations.sceneDetail(project.id));\n        },\n        onMouseEnter: function onMouseEnter() {\n          return _onMouseEnter(deployment);\n        },\n        onMouseLeave: function onMouseLeave() {\n          return _onMouseLeave(deployment);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 7\n        }\n      }, deployment.thumbnail ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"thumbnail\",\n        style: {\n          backgroundImage: \"url(\".concat(deployment.thumbnail, \")\")\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }\n      }) : /*#__PURE__*/React.createElement(\"div\", {\n        className: \"no-thumbnail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"stat\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"title\",\n        title: deployment.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }\n      }, deployment.name), deployment.layout ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"secondary-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }\n      }, deployment.layout.rows, \"x\", deployment.layout.cols) : null), /*#__PURE__*/React.createElement(SceneStats, {\n        deployment: deployment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Dropdown, {\n        trigger: /*#__PURE__*/React.createElement(Button, {\n          basic: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(Icon, {\n          name: \"ellipsis horizontal\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }\n        })),\n        inline: true,\n        direction: \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Dropdown.Menu, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Dropdown.Item, {\n        text: \"Unpublish\",\n        onClick: function onClick() {\n          return onOpenModal('DeployModal', {\n            view: DeployModalView.CLEAR_DEPLOYMENT,\n            deploymentId: deployment.id\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return Scene;\n}(React.PureComponent);\n\nexport { Scene as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/LandDetailPage/Scene/Scene.tsx"],"names":["React","Dropdown","Button","Icon","locations","SceneStats","DeployModalView","Scene","props","deployment","onMouseEnter","onMouseLeave","onNavigate","onOpenModal","projects","project","projectId","sceneDetail","id","thumbnail","backgroundImage","name","layout","rows","cols","view","CLEAR_DEPLOYMENT","deploymentId","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Dropdown, Button, Icon } from 'decentraland-ui'\nimport { locations } from 'routing/locations'\nimport SceneStats from 'components/SceneStats'\nimport { DeployModalView, DeployModalMetadata } from 'components/Modals/DeployModal/DeployModal.types'\nimport { Props } from './Scene.types'\nimport './Scene.css'\n\nexport default class Scene extends React.PureComponent<Props> {\n  render() {\n    const { deployment, onMouseEnter, onMouseLeave, onNavigate, onOpenModal, projects } = this.props\n    const project = deployment.projectId && deployment.projectId in projects ? projects[deployment.projectId] : null\n\n    return (\n      <div\n        className={`Scene ${project ? 'clickable' : ''}`}\n        onClick={() => project && onNavigate(locations.sceneDetail(project.id))}\n        onMouseEnter={() => onMouseEnter(deployment)}\n        onMouseLeave={() => onMouseLeave(deployment)}\n      >\n        {deployment.thumbnail ? (\n          <div className=\"thumbnail\" style={{ backgroundImage: `url(${deployment.thumbnail})` }}></div>\n        ) : (\n          <div className=\"no-thumbnail\" />\n        )}\n        <div className=\"stat\">\n          <div className=\"title\" title={deployment.name}>\n            {deployment.name}\n          </div>\n          {deployment.layout ? (\n            <div className=\"secondary-text\">\n              {deployment.layout.rows}x{deployment.layout.cols}\n            </div>\n          ) : null}\n        </div>\n        <SceneStats deployment={deployment} />\n        <Dropdown\n          trigger={\n            <Button basic>\n              <Icon name=\"ellipsis horizontal\" />\n            </Button>\n          }\n          inline\n          direction=\"left\"\n        >\n          <Dropdown.Menu>\n            <Dropdown.Item\n              text=\"Unpublish\"\n              onClick={() =>\n                onOpenModal('DeployModal', { view: DeployModalView.CLEAR_DEPLOYMENT, deploymentId: deployment.id } as DeployModalMetadata)\n              }\n            />\n          </Dropdown.Menu>\n        </Dropdown>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}