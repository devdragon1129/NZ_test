{"ast":null,"code":"/**\r\n * Abstract class used to decouple action Manager from scene and meshes.\r\n * Do not instantiate.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\nvar AbstractActionManager =\n/** @class */\nfunction () {\n  function AbstractActionManager() {\n    /** Gets the cursor to use when hovering items */\n    this.hoverCursor = '';\n    /** Gets the list of actions */\n\n    this.actions = new Array();\n    /**\r\n     * Gets or sets a boolean indicating that the manager is recursive meaning that it can trigger action from children\r\n     */\n\n    this.isRecursive = false;\n  }\n\n  Object.defineProperty(AbstractActionManager, \"HasTriggers\", {\n    /**\r\n     * Does exist one action manager with at least one trigger\r\n     **/\n    get: function get() {\n      for (var t in AbstractActionManager.Triggers) {\n        if (AbstractActionManager.Triggers.hasOwnProperty(t)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AbstractActionManager, \"HasPickTriggers\", {\n    /**\r\n     * Does exist one action manager with at least one pick trigger\r\n     **/\n    get: function get() {\n      for (var t in AbstractActionManager.Triggers) {\n        if (AbstractActionManager.Triggers.hasOwnProperty(t)) {\n          var t_int = parseInt(t);\n\n          if (t_int >= 1 && t_int <= 7) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Does exist one action manager that handles actions of a given trigger\r\n   * @param trigger defines the trigger to be tested\r\n   * @return a boolean indicating whether the trigger is handeled by at least one action manager\r\n  **/\n\n  AbstractActionManager.HasSpecificTrigger = function (trigger) {\n    for (var t in AbstractActionManager.Triggers) {\n      if (AbstractActionManager.Triggers.hasOwnProperty(t)) {\n        var t_int = parseInt(t);\n\n        if (t_int === trigger) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n  /** Gets the list of active triggers */\n\n\n  AbstractActionManager.Triggers = {};\n  return AbstractActionManager;\n}();\n\nexport { AbstractActionManager };","map":null,"metadata":{},"sourceType":"module"}