{"ast":null,"code":"import { Matrix } from \"../../Maths/math.vector\";\n/**\r\n * This represents all the required metrics to create a VR camera.\r\n * @see https://doc.babylonjs.com/babylon101/cameras#device-orientation-camera\r\n */\n\nvar VRCameraMetrics =\n/** @class */\nfunction () {\n  function VRCameraMetrics() {\n    /**\r\n     * Define if the current vr camera should compensate the distortion of the lense or not.\r\n     */\n    this.compensateDistortion = true;\n    /**\r\n     * Defines if multiview should be enabled when rendering (Default: false)\r\n     */\n\n    this.multiviewEnabled = false;\n  }\n\n  Object.defineProperty(VRCameraMetrics.prototype, \"aspectRatio\", {\n    /**\r\n     * Gets the rendering aspect ratio based on the provided resolutions.\r\n     */\n    get: function get() {\n      return this.hResolution / (2 * this.vResolution);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRCameraMetrics.prototype, \"aspectRatioFov\", {\n    /**\r\n     * Gets the aspect ratio based on the FOV, scale factors, and real screen sizes.\r\n     */\n    get: function get() {\n      return 2 * Math.atan(this.postProcessScaleFactor * this.vScreenSize / (2 * this.eyeToScreenDistance));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRCameraMetrics.prototype, \"leftHMatrix\", {\n    /**\r\n     * @hidden\r\n     */\n    get: function get() {\n      var meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;\n      var h = 4 * meters / this.hScreenSize;\n      return Matrix.Translation(h, 0, 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRCameraMetrics.prototype, \"rightHMatrix\", {\n    /**\r\n     * @hidden\r\n     */\n    get: function get() {\n      var meters = this.hScreenSize / 4 - this.lensSeparationDistance / 2;\n      var h = 4 * meters / this.hScreenSize;\n      return Matrix.Translation(-h, 0, 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRCameraMetrics.prototype, \"leftPreViewMatrix\", {\n    /**\r\n     * @hidden\r\n     */\n    get: function get() {\n      return Matrix.Translation(0.5 * this.interpupillaryDistance, 0, 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(VRCameraMetrics.prototype, \"rightPreViewMatrix\", {\n    /**\r\n     * @hidden\r\n     */\n    get: function get() {\n      return Matrix.Translation(-0.5 * this.interpupillaryDistance, 0, 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Get the default VRMetrics based on the most generic setup.\r\n   * @returns the default vr metrics\r\n   */\n\n  VRCameraMetrics.GetDefault = function () {\n    var result = new VRCameraMetrics();\n    result.hResolution = 1280;\n    result.vResolution = 800;\n    result.hScreenSize = 0.149759993;\n    result.vScreenSize = 0.0935999975;\n    result.vScreenCenter = 0.0467999987;\n    result.eyeToScreenDistance = 0.0410000011;\n    result.lensSeparationDistance = 0.0635000020;\n    result.interpupillaryDistance = 0.0640000030;\n    result.distortionK = [1.0, 0.219999999, 0.239999995, 0.0];\n    result.chromaAbCorrection = [0.995999992, -0.00400000019, 1.01400006, 0.0];\n    result.postProcessScaleFactor = 1.714605507808412;\n    result.lensCenterOffset = 0.151976421;\n    return result;\n  };\n\n  return VRCameraMetrics;\n}();\n\nexport { VRCameraMetrics };","map":null,"metadata":{},"sourceType":"module"}