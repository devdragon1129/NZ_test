{"ast":null,"code":"import _toConsumableArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { LOCATION_CHANGE } from 'connected-react-router';\nimport { CLOSE_ALL_MODALS, CLOSE_MODAL } from 'decentraland-dapps/dist/modules/modal/actions';\nimport { loadingReducer } from 'decentraland-dapps/dist/modules/loading/reducer';\nimport { FETCH_TRANSACTION_SUCCESS } from 'decentraland-dapps/dist/modules/transaction/actions';\nimport { CREATE_COLLECTION_FORUM_POST_REQUEST, CREATE_COLLECTION_FORUM_POST_SUCCESS, CREATE_COLLECTION_FORUM_POST_FAILURE } from 'modules/forum/actions';\nimport { PUBLISH_THIRD_PARTY_ITEMS_SUCCESS } from 'modules/thirdParty/actions';\nimport { FETCH_COLLECTIONS_REQUEST, FETCH_COLLECTIONS_SUCCESS, FETCH_COLLECTIONS_FAILURE, FETCH_COLLECTION_REQUEST, FETCH_COLLECTION_SUCCESS, FETCH_COLLECTION_FAILURE, SAVE_COLLECTION_REQUEST, SAVE_COLLECTION_FAILURE, SAVE_COLLECTION_SUCCESS, DELETE_COLLECTION_REQUEST, DELETE_COLLECTION_FAILURE, DELETE_COLLECTION_SUCCESS, PUBLISH_COLLECTION_REQUEST, PUBLISH_COLLECTION_FAILURE, PUBLISH_COLLECTION_SUCCESS, APPROVE_COLLECTION_REQUEST, APPROVE_COLLECTION_FAILURE, APPROVE_COLLECTION_SUCCESS, REJECT_COLLECTION_REQUEST, REJECT_COLLECTION_FAILURE, REJECT_COLLECTION_SUCCESS, SET_COLLECTION_MINTERS_REQUEST, SET_COLLECTION_MINTERS_SUCCESS, SET_COLLECTION_MINTERS_FAILURE, SET_COLLECTION_MANAGERS_REQUEST, SET_COLLECTION_MANAGERS_SUCCESS, SET_COLLECTION_MANAGERS_FAILURE, MINT_COLLECTION_ITEMS_REQUEST, MINT_COLLECTION_ITEMS_SUCCESS, MINT_COLLECTION_ITEMS_FAILURE } from './actions';\nimport { toCollectionObject } from './utils';\nvar INITIAL_STATE = {\n  data: {},\n  loading: [],\n  error: null,\n  pagination: null\n};\nexport function collectionReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CLOSE_MODAL:\n    case CLOSE_ALL_MODALS:\n    case LOCATION_CHANGE:\n      {\n        return _objectSpread({}, state, {\n          error: null\n        });\n      }\n\n    case FETCH_COLLECTIONS_REQUEST:\n    case FETCH_COLLECTION_REQUEST:\n    case SAVE_COLLECTION_REQUEST:\n    case DELETE_COLLECTION_REQUEST:\n    case PUBLISH_COLLECTION_REQUEST:\n    case APPROVE_COLLECTION_REQUEST:\n    case REJECT_COLLECTION_REQUEST:\n    case SET_COLLECTION_MINTERS_REQUEST:\n    case SET_COLLECTION_MINTERS_SUCCESS:\n    case SET_COLLECTION_MANAGERS_REQUEST:\n    case SET_COLLECTION_MANAGERS_SUCCESS:\n    case MINT_COLLECTION_ITEMS_REQUEST:\n    case MINT_COLLECTION_ITEMS_SUCCESS:\n    case CREATE_COLLECTION_FORUM_POST_REQUEST:\n    case APPROVE_COLLECTION_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case FETCH_COLLECTIONS_SUCCESS:\n      {\n        var _action$payload = action.payload,\n            collections = _action$payload.collections,\n            paginationStats = _action$payload.paginationStats;\n        var hasPagination = paginationStats !== undefined;\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, toCollectionObject(collections)),\n          loading: loadingReducer(state.loading, action)\n        }, hasPagination ? {\n          pagination: {\n            ids: collections.map(function (collections) {\n              return collections.id;\n            }),\n            total: paginationStats.total,\n            limit: paginationStats.limit,\n            currentPage: paginationStats.page,\n            totalPages: paginationStats.pages\n          }\n        } : {}, {\n          error: null\n        });\n      }\n\n    case FETCH_COLLECTION_SUCCESS:\n    case SAVE_COLLECTION_SUCCESS:\n      {\n        var collection = action.payload.collection;\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, toCollectionObject([collection])),\n          loading: loadingReducer(state.loading, action),\n          error: null\n        });\n      }\n\n    case DELETE_COLLECTION_SUCCESS:\n      {\n        var _collection = action.payload.collection;\n\n        var newState = _objectSpread({}, state, {\n          data: _objectSpread({}, state.data),\n          loading: loadingReducer(state.loading, action),\n          error: null\n        });\n\n        delete newState.data[_collection.id];\n        return newState;\n      }\n\n    case PUBLISH_COLLECTION_SUCCESS:\n      {\n        var _collection2 = action.payload.collection;\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, _defineProperty({}, _collection2.id, _objectSpread({}, state.data[_collection2.id], {\n            lock: _collection2.lock\n          })))\n        });\n      }\n\n    case PUBLISH_THIRD_PARTY_ITEMS_SUCCESS:\n      {\n        var collectionId = action.payload.collectionId;\n        var now = Date.now();\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, _defineProperty({}, collectionId, _objectSpread({}, state.data[collectionId], {\n            isPublished: true,\n            // Consolidation on the builder-server will populate these values with the ones on the database\n            // which have the value set at the moment the publication occured.\n            createdAt: now,\n            updatedAt: now,\n            reviewedAt: now\n          })))\n        });\n      }\n\n    case CREATE_COLLECTION_FORUM_POST_SUCCESS:\n      {\n        var _action$payload2 = action.payload,\n            _collection3 = _action$payload2.collection,\n            forumLink = _action$payload2.forumLink;\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, _defineProperty({}, _collection3.id, _objectSpread({}, state.data[_collection3.id], {\n            forumLink: forumLink\n          })))\n        });\n      }\n\n    case FETCH_COLLECTIONS_FAILURE:\n    case FETCH_COLLECTION_FAILURE:\n    case SAVE_COLLECTION_FAILURE:\n    case DELETE_COLLECTION_FAILURE:\n    case PUBLISH_COLLECTION_FAILURE:\n    case APPROVE_COLLECTION_FAILURE:\n    case REJECT_COLLECTION_FAILURE:\n    case SET_COLLECTION_MINTERS_FAILURE:\n    case SET_COLLECTION_MANAGERS_FAILURE:\n    case MINT_COLLECTION_ITEMS_FAILURE:\n    case CREATE_COLLECTION_FORUM_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action),\n          error: action.payload.error\n        });\n      }\n\n    case FETCH_TRANSACTION_SUCCESS:\n      {\n        var transaction = action.payload.transaction;\n\n        switch (transaction.actionType) {\n          case PUBLISH_COLLECTION_SUCCESS:\n            {\n              var _collection4 = transaction.payload.collection;\n\n              var _now = Date.now();\n\n              return _objectSpread({}, state, {\n                loading: loadingReducer(state.loading, action),\n                data: _objectSpread({}, state.data, _defineProperty({}, _collection4.id, _objectSpread({}, state.data[_collection4.id], {\n                  isPublished: true,\n                  // These date values are set to the current date because, as the collection is published,\n                  // consolidation on the builder-server will populate these values with the ones on the blockchain\n                  // which have the value set at the moment the publication occured.\n                  createdAt: _now,\n                  updatedAt: _now,\n                  reviewedAt: _now\n                })))\n              });\n            }\n\n          case APPROVE_COLLECTION_SUCCESS:\n            {\n              var _collection5 = transaction.payload.collection;\n              return _objectSpread({}, state, {\n                loading: loadingReducer(state.loading, {\n                  type: transaction.actionType\n                }),\n                data: _objectSpread({}, state.data, _defineProperty({}, _collection5.id, _objectSpread({}, state.data[_collection5.id], {\n                  reviewedAt: Date.now(),\n                  isApproved: true\n                })))\n              });\n            }\n\n          case REJECT_COLLECTION_SUCCESS:\n            {\n              var _collection6 = transaction.payload.collection;\n              return _objectSpread({}, state, {\n                loading: loadingReducer(state.loading, {\n                  type: transaction.actionType\n                }),\n                data: _objectSpread({}, state.data, _defineProperty({}, _collection6.id, _objectSpread({}, state.data[_collection6.id], {\n                  reviewedAt: Date.now(),\n                  isApproved: false\n                })))\n              });\n            }\n\n          case SET_COLLECTION_MINTERS_SUCCESS:\n            {\n              var _transaction$payload = transaction.payload,\n                  _collection7 = _transaction$payload.collection,\n                  minters = _transaction$payload.minters;\n              return _objectSpread({}, state, {\n                data: _objectSpread({}, state.data, _defineProperty({}, _collection7.id, _objectSpread({}, state.data[_collection7.id], {\n                  minters: _toConsumableArray(minters)\n                })))\n              });\n            }\n\n          case SET_COLLECTION_MANAGERS_SUCCESS:\n            {\n              var _transaction$payload2 = transaction.payload,\n                  _collection8 = _transaction$payload2.collection,\n                  managers = _transaction$payload2.managers;\n              return _objectSpread({}, state, {\n                data: _objectSpread({}, state.data, _defineProperty({}, _collection8.id, _objectSpread({}, state.data[_collection8.id], {\n                  managers: _toConsumableArray(managers)\n                })))\n              });\n            }\n\n          default:\n            return state;\n        }\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/collection/reducer.ts"],"names":["LOCATION_CHANGE","CLOSE_ALL_MODALS","CLOSE_MODAL","loadingReducer","FETCH_TRANSACTION_SUCCESS","CREATE_COLLECTION_FORUM_POST_REQUEST","CREATE_COLLECTION_FORUM_POST_SUCCESS","CREATE_COLLECTION_FORUM_POST_FAILURE","PUBLISH_THIRD_PARTY_ITEMS_SUCCESS","FETCH_COLLECTIONS_REQUEST","FETCH_COLLECTIONS_SUCCESS","FETCH_COLLECTIONS_FAILURE","FETCH_COLLECTION_REQUEST","FETCH_COLLECTION_SUCCESS","FETCH_COLLECTION_FAILURE","SAVE_COLLECTION_REQUEST","SAVE_COLLECTION_FAILURE","SAVE_COLLECTION_SUCCESS","DELETE_COLLECTION_REQUEST","DELETE_COLLECTION_FAILURE","DELETE_COLLECTION_SUCCESS","PUBLISH_COLLECTION_REQUEST","PUBLISH_COLLECTION_FAILURE","PUBLISH_COLLECTION_SUCCESS","APPROVE_COLLECTION_REQUEST","APPROVE_COLLECTION_FAILURE","APPROVE_COLLECTION_SUCCESS","REJECT_COLLECTION_REQUEST","REJECT_COLLECTION_FAILURE","REJECT_COLLECTION_SUCCESS","SET_COLLECTION_MINTERS_REQUEST","SET_COLLECTION_MINTERS_SUCCESS","SET_COLLECTION_MINTERS_FAILURE","SET_COLLECTION_MANAGERS_REQUEST","SET_COLLECTION_MANAGERS_SUCCESS","SET_COLLECTION_MANAGERS_FAILURE","MINT_COLLECTION_ITEMS_REQUEST","MINT_COLLECTION_ITEMS_SUCCESS","MINT_COLLECTION_ITEMS_FAILURE","toCollectionObject","INITIAL_STATE","data","loading","error","pagination","collectionReducer","state","action","type","payload","collections","paginationStats","hasPagination","undefined","ids","map","id","total","limit","currentPage","page","totalPages","pages","collection","newState","lock","collectionId","now","Date","isPublished","createdAt","updatedAt","reviewedAt","forumLink","transaction","actionType","isApproved","minters","managers"],"mappings":"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","sourcesContent":["import { LocationChangeAction, LOCATION_CHANGE } from 'connected-react-router'\nimport { CloseAllModalsAction, CloseModalAction, CLOSE_ALL_MODALS, CLOSE_MODAL } from 'decentraland-dapps/dist/modules/modal/actions'\nimport { LoadingState, loadingReducer } from 'decentraland-dapps/dist/modules/loading/reducer'\nimport { FetchTransactionSuccessAction, FETCH_TRANSACTION_SUCCESS } from 'decentraland-dapps/dist/modules/transaction/actions'\nimport {\n  CreateCollectionForumPostRequestAction,\n  CreateCollectionForumPostSuccessAction,\n  CreateCollectionForumPostFailureAction,\n  CREATE_COLLECTION_FORUM_POST_REQUEST,\n  CREATE_COLLECTION_FORUM_POST_SUCCESS,\n  CREATE_COLLECTION_FORUM_POST_FAILURE\n} from 'modules/forum/actions'\nimport { PublishThirdPartyItemsSuccessAction, PUBLISH_THIRD_PARTY_ITEMS_SUCCESS } from 'modules/thirdParty/actions'\nimport {\n  FetchCollectionsRequestAction,\n  FetchCollectionsSuccessAction,\n  FetchCollectionsFailureAction,\n  FetchCollectionRequestAction,\n  FetchCollectionSuccessAction,\n  FetchCollectionFailureAction,\n  SaveCollectionRequestAction,\n  SaveCollectionSuccessAction,\n  SaveCollectionFailureAction,\n  DeleteCollectionRequestAction,\n  DeleteCollectionSuccessAction,\n  DeleteCollectionFailureAction,\n  PublishCollectionRequestAction,\n  PublishCollectionSuccessAction,\n  PublishCollectionFailureAction,\n  ApproveCollectionRequestAction,\n  ApproveCollectionFailureAction,\n  RejectCollectionRequestAction,\n  RejectCollectionFailureAction,\n  FETCH_COLLECTIONS_REQUEST,\n  FETCH_COLLECTIONS_SUCCESS,\n  FETCH_COLLECTIONS_FAILURE,\n  FETCH_COLLECTION_REQUEST,\n  FETCH_COLLECTION_SUCCESS,\n  FETCH_COLLECTION_FAILURE,\n  SAVE_COLLECTION_REQUEST,\n  SAVE_COLLECTION_FAILURE,\n  SAVE_COLLECTION_SUCCESS,\n  DELETE_COLLECTION_REQUEST,\n  DELETE_COLLECTION_FAILURE,\n  DELETE_COLLECTION_SUCCESS,\n  PUBLISH_COLLECTION_REQUEST,\n  PUBLISH_COLLECTION_FAILURE,\n  PUBLISH_COLLECTION_SUCCESS,\n  APPROVE_COLLECTION_REQUEST,\n  APPROVE_COLLECTION_FAILURE,\n  APPROVE_COLLECTION_SUCCESS,\n  REJECT_COLLECTION_REQUEST,\n  REJECT_COLLECTION_FAILURE,\n  REJECT_COLLECTION_SUCCESS,\n  SET_COLLECTION_MINTERS_REQUEST,\n  SET_COLLECTION_MINTERS_SUCCESS,\n  SET_COLLECTION_MINTERS_FAILURE,\n  SetCollectionMintersRequestAction,\n  SetCollectionMintersSuccessAction,\n  SetCollectionMintersFailureAction,\n  SET_COLLECTION_MANAGERS_REQUEST,\n  SET_COLLECTION_MANAGERS_SUCCESS,\n  SET_COLLECTION_MANAGERS_FAILURE,\n  SetCollectionManagersRequestAction,\n  SetCollectionManagersSuccessAction,\n  SetCollectionManagersFailureAction,\n  MINT_COLLECTION_ITEMS_REQUEST,\n  MINT_COLLECTION_ITEMS_SUCCESS,\n  MINT_COLLECTION_ITEMS_FAILURE,\n  MintCollectionItemsRequestAction,\n  MintCollectionItemsSuccessAction,\n  MintCollectionItemsFailureAction,\n  ApproveCollectionSuccessAction\n} from './actions'\nimport { toCollectionObject } from './utils'\nimport { Collection } from './types'\n\nexport type CollectionPaginationData = {\n  ids: string[]\n  total: number\n  totalPages: number\n  currentPage: number\n  limit: number\n}\n\nexport type CollectionState = {\n  data: Record<string, Collection>\n  loading: LoadingState\n  error: string | null\n  pagination: CollectionPaginationData | null\n}\n\nconst INITIAL_STATE: CollectionState = {\n  data: {},\n  loading: [],\n  error: null,\n  pagination: null\n}\n\ntype CollectionReducerAction =\n  | CloseModalAction\n  | CloseAllModalsAction\n  | LocationChangeAction\n  | FetchCollectionsRequestAction\n  | FetchCollectionsSuccessAction\n  | FetchCollectionsFailureAction\n  | FetchCollectionRequestAction\n  | FetchCollectionSuccessAction\n  | FetchCollectionFailureAction\n  | SaveCollectionRequestAction\n  | SaveCollectionSuccessAction\n  | SaveCollectionFailureAction\n  | DeleteCollectionRequestAction\n  | DeleteCollectionSuccessAction\n  | DeleteCollectionFailureAction\n  | PublishCollectionRequestAction\n  | PublishCollectionSuccessAction\n  | PublishCollectionFailureAction\n  | ApproveCollectionRequestAction\n  | ApproveCollectionSuccessAction\n  | ApproveCollectionFailureAction\n  | RejectCollectionRequestAction\n  | RejectCollectionFailureAction\n  | FetchTransactionSuccessAction\n  | SetCollectionMintersRequestAction\n  | SetCollectionMintersSuccessAction\n  | SetCollectionMintersFailureAction\n  | SetCollectionManagersRequestAction\n  | SetCollectionManagersSuccessAction\n  | SetCollectionManagersFailureAction\n  | MintCollectionItemsRequestAction\n  | MintCollectionItemsSuccessAction\n  | MintCollectionItemsFailureAction\n  | CreateCollectionForumPostRequestAction\n  | CreateCollectionForumPostSuccessAction\n  | CreateCollectionForumPostFailureAction\n  | PublishThirdPartyItemsSuccessAction\n\nexport function collectionReducer(state: CollectionState = INITIAL_STATE, action: CollectionReducerAction): CollectionState {\n  switch (action.type) {\n    case CLOSE_MODAL:\n    case CLOSE_ALL_MODALS:\n    case LOCATION_CHANGE: {\n      return {\n        ...state,\n        error: null\n      }\n    }\n    case FETCH_COLLECTIONS_REQUEST:\n    case FETCH_COLLECTION_REQUEST:\n    case SAVE_COLLECTION_REQUEST:\n    case DELETE_COLLECTION_REQUEST:\n    case PUBLISH_COLLECTION_REQUEST:\n    case APPROVE_COLLECTION_REQUEST:\n    case REJECT_COLLECTION_REQUEST:\n    case SET_COLLECTION_MINTERS_REQUEST:\n    case SET_COLLECTION_MINTERS_SUCCESS:\n    case SET_COLLECTION_MANAGERS_REQUEST:\n    case SET_COLLECTION_MANAGERS_SUCCESS:\n    case MINT_COLLECTION_ITEMS_REQUEST:\n    case MINT_COLLECTION_ITEMS_SUCCESS:\n    case CREATE_COLLECTION_FORUM_POST_REQUEST:\n    case APPROVE_COLLECTION_SUCCESS: {\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case FETCH_COLLECTIONS_SUCCESS: {\n      const { collections, paginationStats } = action.payload\n      const hasPagination = paginationStats !== undefined\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          ...toCollectionObject(collections)\n        },\n        loading: loadingReducer(state.loading, action),\n        ...(hasPagination\n          ? {\n              pagination: {\n                ids: collections.map(collections => collections.id),\n                total: paginationStats.total,\n                limit: paginationStats.limit,\n                currentPage: paginationStats.page,\n                totalPages: paginationStats.pages\n              }\n            }\n          : {}),\n        error: null\n      }\n    }\n    case FETCH_COLLECTION_SUCCESS:\n    case SAVE_COLLECTION_SUCCESS: {\n      const { collection } = action.payload\n\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          ...toCollectionObject([collection])\n        },\n        loading: loadingReducer(state.loading, action),\n        error: null\n      }\n    }\n    case DELETE_COLLECTION_SUCCESS: {\n      const { collection } = action.payload\n      const newState = {\n        ...state,\n        data: {\n          ...state.data\n        },\n        loading: loadingReducer(state.loading, action),\n        error: null\n      }\n      delete newState.data[collection.id]\n      return newState\n    }\n    case PUBLISH_COLLECTION_SUCCESS: {\n      const { collection } = action.payload\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [collection.id]: {\n            ...state.data[collection.id],\n            lock: collection.lock\n          }\n        }\n      }\n    }\n    case PUBLISH_THIRD_PARTY_ITEMS_SUCCESS: {\n      const { collectionId } = action.payload\n      const now = Date.now()\n\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [collectionId]: {\n            ...state.data[collectionId],\n            isPublished: true,\n\n            // Consolidation on the builder-server will populate these values with the ones on the database\n            // which have the value set at the moment the publication occured.\n            createdAt: now,\n            updatedAt: now,\n            reviewedAt: now\n          }\n        }\n      }\n    }\n    case CREATE_COLLECTION_FORUM_POST_SUCCESS: {\n      const { collection, forumLink } = action.payload\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [collection.id]: {\n            ...state.data[collection.id],\n            forumLink\n          }\n        }\n      }\n    }\n    case FETCH_COLLECTIONS_FAILURE:\n    case FETCH_COLLECTION_FAILURE:\n    case SAVE_COLLECTION_FAILURE:\n    case DELETE_COLLECTION_FAILURE:\n    case PUBLISH_COLLECTION_FAILURE:\n    case APPROVE_COLLECTION_FAILURE:\n    case REJECT_COLLECTION_FAILURE:\n    case SET_COLLECTION_MINTERS_FAILURE:\n    case SET_COLLECTION_MANAGERS_FAILURE:\n    case MINT_COLLECTION_ITEMS_FAILURE:\n    case CREATE_COLLECTION_FORUM_POST_FAILURE: {\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error\n      }\n    }\n    case FETCH_TRANSACTION_SUCCESS: {\n      const transaction = action.payload.transaction\n\n      switch (transaction.actionType) {\n        case PUBLISH_COLLECTION_SUCCESS: {\n          const { collection } = transaction.payload\n          const now = Date.now()\n\n          return {\n            ...state,\n            loading: loadingReducer(state.loading, action),\n            data: {\n              ...state.data,\n              [collection.id]: {\n                ...state.data[collection.id],\n                isPublished: true,\n                // These date values are set to the current date because, as the collection is published,\n                // consolidation on the builder-server will populate these values with the ones on the blockchain\n                // which have the value set at the moment the publication occured.\n                createdAt: now,\n                updatedAt: now,\n                reviewedAt: now\n              }\n            }\n          }\n        }\n        case APPROVE_COLLECTION_SUCCESS: {\n          const { collection } = transaction.payload\n          return {\n            ...state,\n            loading: loadingReducer(state.loading, { type: transaction.actionType }),\n            data: {\n              ...state.data,\n              [collection.id]: {\n                ...state.data[collection.id],\n                reviewedAt: Date.now(),\n                isApproved: true\n              }\n            }\n          }\n        }\n        case REJECT_COLLECTION_SUCCESS: {\n          const { collection } = transaction.payload\n          return {\n            ...state,\n            loading: loadingReducer(state.loading, { type: transaction.actionType }),\n            data: {\n              ...state.data,\n              [collection.id]: {\n                ...state.data[collection.id],\n                reviewedAt: Date.now(),\n                isApproved: false\n              }\n            }\n          }\n        }\n        case SET_COLLECTION_MINTERS_SUCCESS: {\n          const { collection, minters } = transaction.payload\n          return {\n            ...state,\n            data: {\n              ...state.data,\n              [collection.id]: {\n                ...state.data[collection.id],\n                minters: [...minters]\n              }\n            }\n          }\n        }\n        case SET_COLLECTION_MANAGERS_SUCCESS: {\n          const { collection, managers } = transaction.payload\n          return {\n            ...state,\n            data: {\n              ...state.data,\n              [collection.id]: {\n                ...state.data[collection.id],\n                managers: [...managers]\n              }\n            }\n          }\n        }\n        default:\n          return state\n      }\n    }\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}