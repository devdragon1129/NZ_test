{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/convolution.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize, SerializationHelper } from '../Misc/decorators';\n/**\r\n * The ConvolutionPostProcess applies a 3x3 kernel to every pixel of the\r\n * input texture to perform effects such as edge detection or sharpening\r\n * See http://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n */\n\nvar ConvolutionPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(ConvolutionPostProcess, _super);\n  /**\r\n   * Creates a new instance ConvolutionPostProcess\r\n   * @param name The name of the effect.\r\n   * @param kernel Array of 9 values corresponding to the 3x3 kernel to be applied\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   */\n\n\n  function ConvolutionPostProcess(name, kernel, options, camera, samplingMode, engine, reusable, textureType) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    var _this = _super.call(this, name, \"convolution\", [\"kernel\", \"screenSize\"], null, options, camera, samplingMode, engine, reusable, null, textureType) || this;\n\n    _this.kernel = kernel;\n\n    _this.onApply = function (effect) {\n      effect.setFloat2(\"screenSize\", _this.width, _this.height);\n      effect.setArray(\"kernel\", _this.kernel);\n    };\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"ConvolutionPostProcess\" string\r\n   */\n\n\n  ConvolutionPostProcess.prototype.getClassName = function () {\n    return \"ConvolutionPostProcess\";\n  };\n  /** @hidden */\n\n\n  ConvolutionPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new ConvolutionPostProcess(parsedPostProcess.name, parsedPostProcess.kernel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType);\n    }, parsedPostProcess, scene, rootUrl);\n  }; // Statics\n\n  /**\r\n   * Edge detection 0 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n   */\n\n\n  ConvolutionPostProcess.EdgeDetect0Kernel = [1, 0, -1, 0, 0, 0, -1, 0, 1];\n  /**\r\n   * Edge detection 1 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n   */\n\n  ConvolutionPostProcess.EdgeDetect1Kernel = [0, 1, 0, 1, -4, 1, 0, 1, 0];\n  /**\r\n   * Edge detection 2 see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n   */\n\n  ConvolutionPostProcess.EdgeDetect2Kernel = [-1, -1, -1, -1, 8, -1, -1, -1, -1];\n  /**\r\n   * Kernel to sharpen an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n   */\n\n  ConvolutionPostProcess.SharpenKernel = [0, -1, 0, -1, 5, -1, 0, -1, 0];\n  /**\r\n   * Kernel to emboss an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n   */\n\n  ConvolutionPostProcess.EmbossKernel = [-2, -1, 0, -1, 1, 1, 0, 1, 2];\n  /**\r\n   * Kernel to blur an image see https://en.wikipedia.org/wiki/Kernel_(image_processing)\r\n   */\n\n  ConvolutionPostProcess.GaussianKernel = [0, 1, 0, 1, 1, 1, 0, 1, 0];\n\n  __decorate([serialize()], ConvolutionPostProcess.prototype, \"kernel\", void 0);\n\n  return ConvolutionPostProcess;\n}(PostProcess);\n\nexport { ConvolutionPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.ConvolutionPostProcess\"] = ConvolutionPostProcess;","map":null,"metadata":{},"sourceType":"module"}