{"ast":null,"code":"import { ThinEngine } from \"../../Engines/thinEngine\";\nimport { WebGLDataBuffer } from '../../Meshes/WebGL/webGLDataBuffer';\n\nThinEngine.prototype.createUniformBuffer = function (elements) {\n  var ubo = this._gl.createBuffer();\n\n  if (!ubo) {\n    throw new Error(\"Unable to create uniform buffer\");\n  }\n\n  var result = new WebGLDataBuffer(ubo);\n  this.bindUniformBuffer(result);\n\n  if (elements instanceof Float32Array) {\n    this._gl.bufferData(this._gl.UNIFORM_BUFFER, elements, this._gl.STATIC_DRAW);\n  } else {\n    this._gl.bufferData(this._gl.UNIFORM_BUFFER, new Float32Array(elements), this._gl.STATIC_DRAW);\n  }\n\n  this.bindUniformBuffer(null);\n  result.references = 1;\n  return result;\n};\n\nThinEngine.prototype.createDynamicUniformBuffer = function (elements) {\n  var ubo = this._gl.createBuffer();\n\n  if (!ubo) {\n    throw new Error(\"Unable to create dynamic uniform buffer\");\n  }\n\n  var result = new WebGLDataBuffer(ubo);\n  this.bindUniformBuffer(result);\n\n  if (elements instanceof Float32Array) {\n    this._gl.bufferData(this._gl.UNIFORM_BUFFER, elements, this._gl.DYNAMIC_DRAW);\n  } else {\n    this._gl.bufferData(this._gl.UNIFORM_BUFFER, new Float32Array(elements), this._gl.DYNAMIC_DRAW);\n  }\n\n  this.bindUniformBuffer(null);\n  result.references = 1;\n  return result;\n};\n\nThinEngine.prototype.updateUniformBuffer = function (uniformBuffer, elements, offset, count) {\n  this.bindUniformBuffer(uniformBuffer);\n\n  if (offset === undefined) {\n    offset = 0;\n  }\n\n  if (count === undefined) {\n    if (elements instanceof Float32Array) {\n      this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, offset, elements);\n    } else {\n      this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, offset, new Float32Array(elements));\n    }\n  } else {\n    if (elements instanceof Float32Array) {\n      this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, 0, elements.subarray(offset, offset + count));\n    } else {\n      this._gl.bufferSubData(this._gl.UNIFORM_BUFFER, 0, new Float32Array(elements).subarray(offset, offset + count));\n    }\n  }\n\n  this.bindUniformBuffer(null);\n};\n\nThinEngine.prototype.bindUniformBuffer = function (buffer) {\n  this._gl.bindBuffer(this._gl.UNIFORM_BUFFER, buffer ? buffer.underlyingResource : null);\n};\n\nThinEngine.prototype.bindUniformBufferBase = function (buffer, location) {\n  this._gl.bindBufferBase(this._gl.UNIFORM_BUFFER, location, buffer ? buffer.underlyingResource : null);\n};\n\nThinEngine.prototype.bindUniformBlock = function (pipelineContext, blockName, index) {\n  var program = pipelineContext.program;\n\n  var uniformLocation = this._gl.getUniformBlockIndex(program, blockName);\n\n  this._gl.uniformBlockBinding(program, uniformLocation, index);\n};","map":null,"metadata":{},"sourceType":"module"}