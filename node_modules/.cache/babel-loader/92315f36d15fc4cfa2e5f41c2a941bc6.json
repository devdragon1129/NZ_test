{"ast":null,"code":"import { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { getError as getWalletError, isConnecting, isConnected, getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { isUploadingAssets, getProgress as getUploadProgress, getError as getDeploymentError, isCreatingFiles, getCurrentDeploymentStatus, getCurrentDeployments, isUploadingRecording } from 'modules/deployment/selectors';\nimport { deployToLandRequest } from 'modules/deployment/actions';\nimport { recordMediaRequest } from 'modules/media/actions';\nimport { openModal } from 'modules/modal/actions';\nimport { getCurrentProject } from 'modules/project/selectors';\nimport { getLandTiles, getDeploymentsByCoord } from 'modules/land/selectors';\nimport { isLoggedIn } from 'modules/identity/selectors';\nimport { getMedia, isRecording, getProgress } from 'modules/media/selectors';\nimport { locations } from 'routing/locations';\nimport DeployToLand from './DeployToLand';\n\nvar mapState = function mapState(state) {\n  return {\n    project: getCurrentProject(state),\n    isConnecting: isConnecting(state),\n    isConnected: isConnected(state),\n    isRecording: isRecording(state),\n    isUploadingAssets: isUploadingAssets(state),\n    isUploadingRecording: isUploadingRecording(state),\n    isCreatingFiles: isCreatingFiles(state),\n    isLoggedIn: isLoggedIn(state),\n    walletError: !!getWalletError(state),\n    media: getMedia(state),\n    ethAddress: getAddress(state),\n    mediaProgress: getProgress(state),\n    deploymentProgress: getUploadProgress(state),\n    deploymentStatus: getCurrentDeploymentStatus(state),\n    deploymentsByCoord: getDeploymentsByCoord(state),\n    landTiles: getLandTiles(state),\n    deployments: getCurrentDeployments(state),\n    error: getDeploymentError(state)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    },\n    onRecord: function onRecord() {\n      return dispatch(recordMediaRequest());\n    },\n    onDeploy: function onDeploy(projectId, placement, overrideDeploymentId) {\n      return dispatch(deployToLandRequest(projectId, placement, overrideDeploymentId));\n    },\n    onNavigateHome: function onNavigateHome() {\n      return dispatch(push(locations.root()));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(DeployToLand);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/DeployModal/DeployToLand/DeployToLand.container.ts"],"names":["connect","push","getError","getWalletError","isConnecting","isConnected","getAddress","isUploadingAssets","getProgress","getUploadProgress","getDeploymentError","isCreatingFiles","getCurrentDeploymentStatus","getCurrentDeployments","isUploadingRecording","deployToLandRequest","recordMediaRequest","openModal","getCurrentProject","getLandTiles","getDeploymentsByCoord","isLoggedIn","getMedia","isRecording","locations","DeployToLand","mapState","state","project","walletError","media","ethAddress","mediaProgress","deploymentProgress","deploymentStatus","deploymentsByCoord","landTiles","deployments","error","mapDispatch","dispatch","onOpenModal","name","metadata","onRecord","onDeploy","projectId","placement","overrideDeploymentId","onNavigateHome","root"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport { getError as getWalletError, isConnecting, isConnected, getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport {\n  isUploadingAssets,\n  getProgress as getUploadProgress,\n  getError as getDeploymentError,\n  isCreatingFiles,\n  getCurrentDeploymentStatus,\n  getCurrentDeployments,\n  isUploadingRecording\n} from 'modules/deployment/selectors'\nimport { RootState } from 'modules/common/types'\nimport { deployToLandRequest } from 'modules/deployment/actions'\nimport { recordMediaRequest } from 'modules/media/actions'\nimport { openModal } from 'modules/modal/actions'\nimport { getCurrentProject } from 'modules/project/selectors'\nimport { getLandTiles, getDeploymentsByCoord } from 'modules/land/selectors'\nimport { isLoggedIn } from 'modules/identity/selectors'\nimport { getMedia, isRecording, getProgress } from 'modules/media/selectors'\nimport { locations } from 'routing/locations'\nimport { MapStateProps, MapDispatchProps, MapDispatch } from './DeployToLand.types'\nimport DeployToLand from './DeployToLand'\n\nconst mapState = (state: RootState): MapStateProps => ({\n  project: getCurrentProject(state)!,\n  isConnecting: isConnecting(state),\n  isConnected: isConnected(state),\n  isRecording: isRecording(state),\n  isUploadingAssets: isUploadingAssets(state),\n  isUploadingRecording: isUploadingRecording(state),\n  isCreatingFiles: isCreatingFiles(state),\n  isLoggedIn: isLoggedIn(state),\n  walletError: !!getWalletError(state),\n  media: getMedia(state),\n  ethAddress: getAddress(state),\n  mediaProgress: getProgress(state),\n  deploymentProgress: getUploadProgress(state),\n  deploymentStatus: getCurrentDeploymentStatus(state),\n  deploymentsByCoord: getDeploymentsByCoord(state),\n  landTiles: getLandTiles(state),\n  deployments: getCurrentDeployments(state),\n  error: getDeploymentError(state)\n})\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata)),\n  onRecord: () => dispatch(recordMediaRequest()),\n  onDeploy: (projectId, placement, overrideDeploymentId) => dispatch(deployToLandRequest(projectId, placement, overrideDeploymentId)),\n  onNavigateHome: () => dispatch(push(locations.root()))\n})\n\nexport default connect(mapState, mapDispatch)(DeployToLand)\n"]},"metadata":{},"sourceType":"module"}