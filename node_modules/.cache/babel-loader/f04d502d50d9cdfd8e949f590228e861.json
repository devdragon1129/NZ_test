{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { serialize, SerializationHelper, serializeAsTexture, serializeAsColorCurves, serializeAsColor4 } from \"../Misc/decorators\";\nimport { Observable } from \"../Misc/observable\";\nimport { Tools } from \"../Misc/tools\";\nimport { Color4 } from \"../Maths/math.color\";\nimport { MaterialDefines } from \"../Materials/materialDefines\";\nimport { ColorCurves } from \"../Materials/colorCurves\";\n/**\r\n * @hidden\r\n */\n\nvar ImageProcessingConfigurationDefines =\n/** @class */\nfunction (_super) {\n  __extends(ImageProcessingConfigurationDefines, _super);\n\n  function ImageProcessingConfigurationDefines() {\n    var _this = _super.call(this) || this;\n\n    _this.IMAGEPROCESSING = false;\n    _this.VIGNETTE = false;\n    _this.VIGNETTEBLENDMODEMULTIPLY = false;\n    _this.VIGNETTEBLENDMODEOPAQUE = false;\n    _this.TONEMAPPING = false;\n    _this.TONEMAPPING_ACES = false;\n    _this.CONTRAST = false;\n    _this.COLORCURVES = false;\n    _this.COLORGRADING = false;\n    _this.COLORGRADING3D = false;\n    _this.SAMPLER3DGREENDEPTH = false;\n    _this.SAMPLER3DBGRMAP = false;\n    _this.IMAGEPROCESSINGPOSTPROCESS = false;\n    _this.EXPOSURE = false;\n\n    _this.rebuild();\n\n    return _this;\n  }\n\n  return ImageProcessingConfigurationDefines;\n}(MaterialDefines);\n\nexport { ImageProcessingConfigurationDefines };\n/**\r\n * This groups together the common properties used for image processing either in direct forward pass\r\n * or through post processing effect depending on the use of the image processing pipeline in your scene\r\n * or not.\r\n */\n\nvar ImageProcessingConfiguration =\n/** @class */\nfunction () {\n  function ImageProcessingConfiguration() {\n    /**\r\n     * Color curves setup used in the effect if colorCurvesEnabled is set to true\r\n     */\n    this.colorCurves = new ColorCurves();\n    this._colorCurvesEnabled = false;\n    this._colorGradingEnabled = false;\n    this._colorGradingWithGreenDepth = true;\n    this._colorGradingBGR = true;\n    /** @hidden */\n\n    this._exposure = 1.0;\n    this._toneMappingEnabled = false;\n    this._toneMappingType = ImageProcessingConfiguration.TONEMAPPING_STANDARD;\n    this._contrast = 1.0;\n    /**\r\n     * Vignette stretch size.\r\n     */\n\n    this.vignetteStretch = 0;\n    /**\r\n     * Vignette centre X Offset.\r\n     */\n\n    this.vignetteCentreX = 0;\n    /**\r\n     * Vignette centre Y Offset.\r\n     */\n\n    this.vignetteCentreY = 0;\n    /**\r\n     * Vignette weight or intensity of the vignette effect.\r\n     */\n\n    this.vignetteWeight = 1.5;\n    /**\r\n     * Color of the vignette applied on the screen through the chosen blend mode (vignetteBlendMode)\r\n     * if vignetteEnabled is set to true.\r\n     */\n\n    this.vignetteColor = new Color4(0, 0, 0, 0);\n    /**\r\n     * Camera field of view used by the Vignette effect.\r\n     */\n\n    this.vignetteCameraFov = 0.5;\n    this._vignetteBlendMode = ImageProcessingConfiguration.VIGNETTEMODE_MULTIPLY;\n    this._vignetteEnabled = false;\n    this._applyByPostProcess = false;\n    this._isEnabled = true;\n    /**\r\n    * An event triggered when the configuration changes and requires Shader to Update some parameters.\r\n    */\n\n    this.onUpdateParameters = new Observable();\n  }\n\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorCurvesEnabled\", {\n    /**\r\n     * Gets wether the color curves effect is enabled.\r\n     */\n    get: function get() {\n      return this._colorCurvesEnabled;\n    },\n\n    /**\r\n     * Sets wether the color curves effect is enabled.\r\n     */\n    set: function set(value) {\n      if (this._colorCurvesEnabled === value) {\n        return;\n      }\n\n      this._colorCurvesEnabled = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingTexture\", {\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\n    get: function get() {\n      return this._colorGradingTexture;\n    },\n\n    /**\r\n     * Color grading LUT texture used in the effect if colorGradingEnabled is set to true\r\n     */\n    set: function set(value) {\n      if (this._colorGradingTexture === value) {\n        return;\n      }\n\n      this._colorGradingTexture = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingEnabled\", {\n    /**\r\n     * Gets wether the color grading effect is enabled.\r\n     */\n    get: function get() {\n      return this._colorGradingEnabled;\n    },\n\n    /**\r\n     * Sets wether the color grading effect is enabled.\r\n     */\n    set: function set(value) {\n      if (this._colorGradingEnabled === value) {\n        return;\n      }\n\n      this._colorGradingEnabled = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingWithGreenDepth\", {\n    /**\r\n     * Gets wether the color grading effect is using a green depth for the 3d Texture.\r\n     */\n    get: function get() {\n      return this._colorGradingWithGreenDepth;\n    },\n\n    /**\r\n     * Sets wether the color grading effect is using a green depth for the 3d Texture.\r\n     */\n    set: function set(value) {\n      if (this._colorGradingWithGreenDepth === value) {\n        return;\n      }\n\n      this._colorGradingWithGreenDepth = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"colorGradingBGR\", {\n    /**\r\n     * Gets wether the color grading texture contains BGR values.\r\n     */\n    get: function get() {\n      return this._colorGradingBGR;\n    },\n\n    /**\r\n     * Sets wether the color grading texture contains BGR values.\r\n     */\n    set: function set(value) {\n      if (this._colorGradingBGR === value) {\n        return;\n      }\n\n      this._colorGradingBGR = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"exposure\", {\n    /**\r\n     * Gets the Exposure used in the effect.\r\n     */\n    get: function get() {\n      return this._exposure;\n    },\n\n    /**\r\n     * Sets the Exposure used in the effect.\r\n     */\n    set: function set(value) {\n      if (this._exposure === value) {\n        return;\n      }\n\n      this._exposure = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"toneMappingEnabled\", {\n    /**\r\n     * Gets wether the tone mapping effect is enabled.\r\n     */\n    get: function get() {\n      return this._toneMappingEnabled;\n    },\n\n    /**\r\n     * Sets wether the tone mapping effect is enabled.\r\n     */\n    set: function set(value) {\n      if (this._toneMappingEnabled === value) {\n        return;\n      }\n\n      this._toneMappingEnabled = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"toneMappingType\", {\n    /**\r\n     * Gets the type of tone mapping effect.\r\n     */\n    get: function get() {\n      return this._toneMappingType;\n    },\n\n    /**\r\n     * Sets the type of tone mapping effect used in BabylonJS.\r\n     */\n    set: function set(value) {\n      if (this._toneMappingType === value) {\n        return;\n      }\n\n      this._toneMappingType = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"contrast\", {\n    /**\r\n     * Gets the contrast used in the effect.\r\n     */\n    get: function get() {\n      return this._contrast;\n    },\n\n    /**\r\n     * Sets the contrast used in the effect.\r\n     */\n    set: function set(value) {\n      if (this._contrast === value) {\n        return;\n      }\n\n      this._contrast = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"vignetteBlendMode\", {\n    /**\r\n     * Gets the vignette blend mode allowing different kind of effect.\r\n     */\n    get: function get() {\n      return this._vignetteBlendMode;\n    },\n\n    /**\r\n     * Sets the vignette blend mode allowing different kind of effect.\r\n     */\n    set: function set(value) {\n      if (this._vignetteBlendMode === value) {\n        return;\n      }\n\n      this._vignetteBlendMode = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"vignetteEnabled\", {\n    /**\r\n     * Gets wether the vignette effect is enabled.\r\n     */\n    get: function get() {\n      return this._vignetteEnabled;\n    },\n\n    /**\r\n     * Sets wether the vignette effect is enabled.\r\n     */\n    set: function set(value) {\n      if (this._vignetteEnabled === value) {\n        return;\n      }\n\n      this._vignetteEnabled = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"applyByPostProcess\", {\n    /**\r\n     * Gets wether the image processing is applied through a post process or not.\r\n     */\n    get: function get() {\n      return this._applyByPostProcess;\n    },\n\n    /**\r\n     * Sets wether the image processing is applied through a post process or not.\r\n     */\n    set: function set(value) {\n      if (this._applyByPostProcess === value) {\n        return;\n      }\n\n      this._applyByPostProcess = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration.prototype, \"isEnabled\", {\n    /**\r\n     * Gets wether the image processing is enabled or not.\r\n     */\n    get: function get() {\n      return this._isEnabled;\n    },\n\n    /**\r\n     * Sets wether the image processing is enabled or not.\r\n     */\n    set: function set(value) {\n      if (this._isEnabled === value) {\n        return;\n      }\n\n      this._isEnabled = value;\n\n      this._updateParameters();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Method called each time the image processing information changes requires to recompile the effect.\r\n   */\n\n  ImageProcessingConfiguration.prototype._updateParameters = function () {\n    this.onUpdateParameters.notifyObservers(this);\n  };\n  /**\r\n   * Gets the current class name.\r\n   * @return \"ImageProcessingConfiguration\"\r\n   */\n\n\n  ImageProcessingConfiguration.prototype.getClassName = function () {\n    return \"ImageProcessingConfiguration\";\n  };\n  /**\r\n   * Prepare the list of uniforms associated with the Image Processing effects.\r\n   * @param uniforms The list of uniforms used in the effect\r\n   * @param defines the list of defines currently in use\r\n   */\n\n\n  ImageProcessingConfiguration.PrepareUniforms = function (uniforms, defines) {\n    if (defines.EXPOSURE) {\n      uniforms.push(\"exposureLinear\");\n    }\n\n    if (defines.CONTRAST) {\n      uniforms.push(\"contrast\");\n    }\n\n    if (defines.COLORGRADING) {\n      uniforms.push(\"colorTransformSettings\");\n    }\n\n    if (defines.VIGNETTE) {\n      uniforms.push(\"vInverseScreenSize\");\n      uniforms.push(\"vignetteSettings1\");\n      uniforms.push(\"vignetteSettings2\");\n    }\n\n    if (defines.COLORCURVES) {\n      ColorCurves.PrepareUniforms(uniforms);\n    }\n  };\n  /**\r\n   * Prepare the list of samplers associated with the Image Processing effects.\r\n   * @param samplersList The list of uniforms used in the effect\r\n   * @param defines the list of defines currently in use\r\n   */\n\n\n  ImageProcessingConfiguration.PrepareSamplers = function (samplersList, defines) {\n    if (defines.COLORGRADING) {\n      samplersList.push(\"txColorTransform\");\n    }\n  };\n  /**\r\n   * Prepare the list of defines associated to the shader.\r\n   * @param defines the list of defines to complete\r\n   * @param forPostProcess Define if we are currently in post process mode or not\r\n   */\n\n\n  ImageProcessingConfiguration.prototype.prepareDefines = function (defines, forPostProcess) {\n    if (forPostProcess === void 0) {\n      forPostProcess = false;\n    }\n\n    if (forPostProcess !== this.applyByPostProcess || !this._isEnabled) {\n      defines.VIGNETTE = false;\n      defines.TONEMAPPING = false;\n      defines.TONEMAPPING_ACES = false;\n      defines.CONTRAST = false;\n      defines.EXPOSURE = false;\n      defines.COLORCURVES = false;\n      defines.COLORGRADING = false;\n      defines.COLORGRADING3D = false;\n      defines.IMAGEPROCESSING = false;\n      defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess && this._isEnabled;\n      return;\n    }\n\n    defines.VIGNETTE = this.vignetteEnabled;\n    defines.VIGNETTEBLENDMODEMULTIPLY = this.vignetteBlendMode === ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY;\n    defines.VIGNETTEBLENDMODEOPAQUE = !defines.VIGNETTEBLENDMODEMULTIPLY;\n    defines.TONEMAPPING = this.toneMappingEnabled;\n\n    switch (this._toneMappingType) {\n      case ImageProcessingConfiguration.TONEMAPPING_ACES:\n        defines.TONEMAPPING_ACES = true;\n        break;\n\n      default:\n        defines.TONEMAPPING_ACES = false;\n        break;\n    }\n\n    defines.CONTRAST = this.contrast !== 1.0;\n    defines.EXPOSURE = this.exposure !== 1.0;\n    defines.COLORCURVES = this.colorCurvesEnabled && !!this.colorCurves;\n    defines.COLORGRADING = this.colorGradingEnabled && !!this.colorGradingTexture;\n\n    if (defines.COLORGRADING) {\n      defines.COLORGRADING3D = this.colorGradingTexture.is3D;\n    } else {\n      defines.COLORGRADING3D = false;\n    }\n\n    defines.SAMPLER3DGREENDEPTH = this.colorGradingWithGreenDepth;\n    defines.SAMPLER3DBGRMAP = this.colorGradingBGR;\n    defines.IMAGEPROCESSINGPOSTPROCESS = this.applyByPostProcess;\n    defines.IMAGEPROCESSING = defines.VIGNETTE || defines.TONEMAPPING || defines.CONTRAST || defines.EXPOSURE || defines.COLORCURVES || defines.COLORGRADING;\n  };\n  /**\r\n   * Returns true if all the image processing information are ready.\r\n   * @returns True if ready, otherwise, false\r\n   */\n\n\n  ImageProcessingConfiguration.prototype.isReady = function () {\n    // Color Grading texure can not be none blocking.\n    return !this.colorGradingEnabled || !this.colorGradingTexture || this.colorGradingTexture.isReady();\n  };\n  /**\r\n   * Binds the image processing to the shader.\r\n   * @param effect The effect to bind to\r\n   * @param overrideAspectRatio Override the aspect ratio of the effect\r\n   */\n\n\n  ImageProcessingConfiguration.prototype.bind = function (effect, overrideAspectRatio) {\n    // Color Curves\n    if (this._colorCurvesEnabled && this.colorCurves) {\n      ColorCurves.Bind(this.colorCurves, effect);\n    } // Vignette\n\n\n    if (this._vignetteEnabled) {\n      var inverseWidth = 1 / effect.getEngine().getRenderWidth();\n      var inverseHeight = 1 / effect.getEngine().getRenderHeight();\n      effect.setFloat2(\"vInverseScreenSize\", inverseWidth, inverseHeight);\n      var aspectRatio = overrideAspectRatio != null ? overrideAspectRatio : inverseHeight / inverseWidth;\n      var vignetteScaleY = Math.tan(this.vignetteCameraFov * 0.5);\n      var vignetteScaleX = vignetteScaleY * aspectRatio;\n      var vignetteScaleGeometricMean = Math.sqrt(vignetteScaleX * vignetteScaleY);\n      vignetteScaleX = Tools.Mix(vignetteScaleX, vignetteScaleGeometricMean, this.vignetteStretch);\n      vignetteScaleY = Tools.Mix(vignetteScaleY, vignetteScaleGeometricMean, this.vignetteStretch);\n      effect.setFloat4(\"vignetteSettings1\", vignetteScaleX, vignetteScaleY, -vignetteScaleX * this.vignetteCentreX, -vignetteScaleY * this.vignetteCentreY);\n      var vignettePower = -2.0 * this.vignetteWeight;\n      effect.setFloat4(\"vignetteSettings2\", this.vignetteColor.r, this.vignetteColor.g, this.vignetteColor.b, vignettePower);\n    } // Exposure\n\n\n    effect.setFloat(\"exposureLinear\", this.exposure); // Contrast\n\n    effect.setFloat(\"contrast\", this.contrast); // Color transform settings\n\n    if (this.colorGradingTexture) {\n      effect.setTexture(\"txColorTransform\", this.colorGradingTexture);\n      var textureSize = this.colorGradingTexture.getSize().height;\n      effect.setFloat4(\"colorTransformSettings\", (textureSize - 1) / textureSize, // textureScale\n      0.5 / textureSize, // textureOffset\n      textureSize, // textureSize\n      this.colorGradingTexture.level // weight\n      );\n    }\n  };\n  /**\r\n   * Clones the current image processing instance.\r\n   * @return The cloned image processing\r\n   */\n\n\n  ImageProcessingConfiguration.prototype.clone = function () {\n    return SerializationHelper.Clone(function () {\n      return new ImageProcessingConfiguration();\n    }, this);\n  };\n  /**\r\n   * Serializes the current image processing instance to a json representation.\r\n   * @return a JSON representation\r\n   */\n\n\n  ImageProcessingConfiguration.prototype.serialize = function () {\n    return SerializationHelper.Serialize(this);\n  };\n  /**\r\n   * Parses the image processing from a json representation.\r\n   * @param source the JSON source to parse\r\n   * @return The parsed image processing\r\n   */\n\n\n  ImageProcessingConfiguration.Parse = function (source) {\n    return SerializationHelper.Parse(function () {\n      return new ImageProcessingConfiguration();\n    }, source, null, null);\n  };\n\n  Object.defineProperty(ImageProcessingConfiguration, \"VIGNETTEMODE_MULTIPLY\", {\n    /**\r\n     * Used to apply the vignette as a mix with the pixel color.\r\n     */\n    get: function get() {\n      return this._VIGNETTEMODE_MULTIPLY;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ImageProcessingConfiguration, \"VIGNETTEMODE_OPAQUE\", {\n    /**\r\n     * Used to apply the vignette as a replacement of the pixel color.\r\n     */\n    get: function get() {\n      return this._VIGNETTEMODE_OPAQUE;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Default tone mapping applied in BabylonJS.\r\n   */\n\n  ImageProcessingConfiguration.TONEMAPPING_STANDARD = 0;\n  /**\r\n   * ACES Tone mapping (used by default in unreal and unity). This can help getting closer\r\n   * to other engines rendering to increase portability.\r\n   */\n\n  ImageProcessingConfiguration.TONEMAPPING_ACES = 1; // Static constants associated to the image processing.\n\n  ImageProcessingConfiguration._VIGNETTEMODE_MULTIPLY = 0;\n  ImageProcessingConfiguration._VIGNETTEMODE_OPAQUE = 1;\n\n  __decorate([serializeAsColorCurves()], ImageProcessingConfiguration.prototype, \"colorCurves\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorCurvesEnabled\", void 0);\n\n  __decorate([serializeAsTexture(\"colorGradingTexture\")], ImageProcessingConfiguration.prototype, \"_colorGradingTexture\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorGradingEnabled\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorGradingWithGreenDepth\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_colorGradingBGR\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_exposure\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_toneMappingEnabled\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_toneMappingType\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_contrast\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteStretch\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteCentreX\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteCentreY\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteWeight\", void 0);\n\n  __decorate([serializeAsColor4()], ImageProcessingConfiguration.prototype, \"vignetteColor\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"vignetteCameraFov\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_vignetteBlendMode\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_vignetteEnabled\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_applyByPostProcess\", void 0);\n\n  __decorate([serialize()], ImageProcessingConfiguration.prototype, \"_isEnabled\", void 0);\n\n  return ImageProcessingConfiguration;\n}();\n\nexport { ImageProcessingConfiguration }; // References the dependencies.\n\nSerializationHelper._ImageProcessingConfigurationParser = ImageProcessingConfiguration.Parse;","map":null,"metadata":{},"sourceType":"module"}