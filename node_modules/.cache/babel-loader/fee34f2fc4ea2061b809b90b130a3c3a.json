{"ast":null,"code":"import { Vector3, Vector2 } from './math.vector';\n/**\r\n * Contains position and normal vectors for a vertex\r\n */\n\nvar PositionNormalVertex =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a PositionNormalVertex\r\n   * @param position the position of the vertex (defaut: 0,0,0)\r\n   * @param normal the normal of the vertex (defaut: 0,1,0)\r\n   */\n  function PositionNormalVertex(\n  /** the position of the vertex (defaut: 0,0,0) */\n  position,\n  /** the normal of the vertex (defaut: 0,1,0) */\n  normal) {\n    if (position === void 0) {\n      position = Vector3.Zero();\n    }\n\n    if (normal === void 0) {\n      normal = Vector3.Up();\n    }\n\n    this.position = position;\n    this.normal = normal;\n  }\n  /**\r\n   * Clones the PositionNormalVertex\r\n   * @returns the cloned PositionNormalVertex\r\n   */\n\n\n  PositionNormalVertex.prototype.clone = function () {\n    return new PositionNormalVertex(this.position.clone(), this.normal.clone());\n  };\n\n  return PositionNormalVertex;\n}();\n\nexport { PositionNormalVertex };\n/**\r\n * Contains position, normal and uv vectors for a vertex\r\n */\n\nvar PositionNormalTextureVertex =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a PositionNormalTextureVertex\r\n   * @param position the position of the vertex (defaut: 0,0,0)\r\n   * @param normal the normal of the vertex (defaut: 0,1,0)\r\n   * @param uv the uv of the vertex (default: 0,0)\r\n   */\n  function PositionNormalTextureVertex(\n  /** the position of the vertex (defaut: 0,0,0) */\n  position,\n  /** the normal of the vertex (defaut: 0,1,0) */\n  normal,\n  /** the uv of the vertex (default: 0,0) */\n  uv) {\n    if (position === void 0) {\n      position = Vector3.Zero();\n    }\n\n    if (normal === void 0) {\n      normal = Vector3.Up();\n    }\n\n    if (uv === void 0) {\n      uv = Vector2.Zero();\n    }\n\n    this.position = position;\n    this.normal = normal;\n    this.uv = uv;\n  }\n  /**\r\n   * Clones the PositionNormalTextureVertex\r\n   * @returns the cloned PositionNormalTextureVertex\r\n   */\n\n\n  PositionNormalTextureVertex.prototype.clone = function () {\n    return new PositionNormalTextureVertex(this.position.clone(), this.normal.clone(), this.uv.clone());\n  };\n\n  return PositionNormalTextureVertex;\n}();\n\nexport { PositionNormalTextureVertex };","map":null,"metadata":{},"sourceType":"module"}