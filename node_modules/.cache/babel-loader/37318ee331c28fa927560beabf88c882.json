{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar bn_js_1 = tslib_1.__importDefault(require(\"bn.js\"));\n\nvar bytes_1 = tslib_1.__importDefault(require(\"./bytes\"));\n\nvar fromBN = function fromBN(bn) {\n  return '0x' + bn.toString('hex');\n};\n\nvar toBN = function toBN(str) {\n  return new bn_js_1.default(str.slice(2), 16);\n};\n\nvar fromString = function fromString(str) {\n  var bn = '0x' + (str.slice(0, 2) === '0x' ? new bn_js_1.default(str.slice(2), 16) : new bn_js_1.default(str, 10)).toString('hex');\n  return bn === '0x0' ? '0x' : bn;\n};\n\nvar toEther = function toEther(wei) {\n  return toNumber(div(wei, fromString('10000000000'))) / 100000000;\n};\n\nvar fromEther = function fromEther(eth) {\n  return mul(fromNumber(Math.floor(eth * 100000000)), fromString('10000000000'));\n};\n\nvar toString = function toString(a) {\n  return toBN(a).toString(10);\n};\n\nvar fromNumber = function fromNumber(a) {\n  return typeof a === 'string' ? /^0x/.test(a) ? a : '0x' + a : '0x' + new bn_js_1.default(a).toString('hex');\n};\n\nvar toNumber = function toNumber(a) {\n  return toBN(a).toNumber();\n};\n\nvar toUint256 = function toUint256(a) {\n  return bytes_1.default.pad(32, a);\n};\n\nvar bin = function bin(method) {\n  return function (a, b) {\n    return fromBN(toBN(a)[method](toBN(b)));\n  };\n};\n\nvar add = bin('add');\nvar mul = bin('mul');\nvar div = bin('div');\nvar sub = bin('sub');\nexports.default = {\n  toString: toString,\n  fromString: fromString,\n  toNumber: toNumber,\n  fromNumber: fromNumber,\n  toEther: toEther,\n  fromEther: fromEther,\n  toUint256: toUint256,\n  add: add,\n  mul: mul,\n  div: div,\n  sub: sub\n};","map":null,"metadata":{},"sourceType":"script"}