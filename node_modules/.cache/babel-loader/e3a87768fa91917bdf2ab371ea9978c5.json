{"ast":null,"code":"import _toConsumableArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/AssetImporter/AssetImporter.tsx\";\n\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\n\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport * as React from 'react';\nimport { basename } from 'path';\nimport * as crypto from 'crypto';\nimport uuidv4 from 'uuid/v4';\nimport JSZip from 'jszip';\nimport { Button, Loader } from 'decentraland-ui';\nimport { t, T } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { getAnalytics } from 'decentraland-dapps/dist/modules/analytics/utils';\nimport FileImport from 'components/FileImport';\nimport AssetThumbnail from 'components/AssetThumbnail';\nimport { GROUND_CATEGORY } from 'modules/asset/types';\nimport { EXPORT_PATH } from 'modules/project/export';\nimport { cleanAssetName, rawMappingsToObjectURL, revokeMappingsObjectURL, MAX_NAME_LENGTH, MAX_FILE_SIZE } from 'modules/asset/utils';\nimport { getModelData, ThumbnailType } from 'lib/getModelData';\nimport { createDefaultImportedFile, getMetrics, ASSET_MANIFEST, prepareScript } from './utils';\nimport { truncateFileName, getExtension } from 'lib/file';\nimport './AssetImporter.css';\nexport var getSHA256 = function getSHA256(data) {\n  return crypto.createHash('sha256').update(data).digest('hex');\n};\n\nvar AssetImporter = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(AssetImporter, _React$PureComponent);\n\n  function AssetImporter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AssetImporter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AssetImporter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      assetPackId: _this.getAssetPackId(),\n      files: {},\n      isLoading: false\n    };\n    _this.analytics = getAnalytics();\n\n    _this.renderFiles = function () {\n      var files = Object.values(_this.state.files);\n      return /*#__PURE__*/React.createElement(React.Fragment, null, files.length === 1 && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"single-project\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 32\n        }\n      }, _this.renderFile(files[0])), files.length > 1 && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"multiple-projects\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 30\n        }\n      }, files.map(function (saved) {\n        return _this.renderFile(saved);\n      }), \" \"));\n    };\n\n    _this.renderFile = function (file) {\n      if (!file.fileName) {\n        // Hide any weird cases where no fileName is available\n        _this.handleRemoveProject(file.id);\n\n        return null;\n      }\n\n      var id = !file.error ? file.asset.id : file.id;\n      var isDuplicated = file.error && file.asset && file.asset.thumbnail;\n      return /*#__PURE__*/React.createElement(AssetThumbnail, {\n        key: id,\n        asset: _objectSpread({}, file.asset, {\n          id: id,\n          name: !file.error ? file.asset.name : file.fileName\n        }),\n        error: file.error,\n        errorLabel: isDuplicated ? t('asset_pack.import.errors.duplicated') : t('asset_pack.import.errors.invalid'),\n        onRemove: _this.handleRemoveProject,\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 7\n        }\n      });\n    };\n\n    _this.renderDropzoneCTA = function (open) {\n      var isLoading = _this.state.isLoading;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"overlay\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Loader, {\n        active: true,\n        size: \"big\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }\n      })) : null, /*#__PURE__*/React.createElement(T, {\n        id: \"asset_pack.import.cta\",\n        values: {\n          models_link: /*#__PURE__*/React.createElement(\"span\", {\n            className: \"link\",\n            onClick: _this.handleOpenDocs,\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }\n          }, \"GLB, GLTF, ZIP\"),\n          action: /*#__PURE__*/React.createElement(\"span\", {\n            className: \"action\",\n            onClick: open,\n            __self: _assertThisInitialized(_assertThisInitialized(_this)),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }\n          }, t('import_modal.upload_manually'))\n        },\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      }));\n    };\n\n    _this.handleZipFile = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(file) {\n        var assetPackId, zip, manifestPath, manifestParsed, manifestRaw, content, fileNames, files, model, script, contents, id, asset, _manifestParsed, _, rest;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assetPackId = _this.state.assetPackId;\n                _context2.next = 3;\n                return JSZip.loadAsync(file);\n\n              case 3:\n                zip = _context2.sent;\n                manifestPath = Object.keys(zip.files).find(function (path) {\n                  return basename(path) === ASSET_MANIFEST;\n                });\n                manifestParsed = null;\n\n                if (!manifestPath) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                manifestRaw = zip.file(manifestPath);\n                _context2.next = 10;\n                return manifestRaw.async('text');\n\n              case 10:\n                content = _context2.sent;\n                manifestParsed = JSON.parse(content);\n\n              case 12:\n                fileNames = [];\n                zip.forEach(function (fileName) {\n                  if (fileName === EXPORT_PATH.MANIFEST_FILE) {\n                    _this.analytics.track('Asset Importer Error Scene File');\n\n                    throw new Error(t('asset_pack.import.errors.scene_file', {\n                      name: fileName\n                    }));\n                  }\n\n                  if (basename(fileName) !== ASSET_MANIFEST && !basename(fileName).startsWith('.')) {\n                    fileNames.push(fileName);\n                  }\n                });\n                _context2.next = 16;\n                return Promise.all(fileNames.map(function (fileName) {\n                  return zip.file(fileName);\n                }).filter(function (file) {\n                  return !!file;\n                }).map( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n                    var blob;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return file.async('blob');\n\n                          case 2:\n                            blob = _context.sent;\n\n                            if (!(blob.size > MAX_FILE_SIZE)) {\n                              _context.next = 6;\n                              break;\n                            }\n\n                            _this.analytics.track('Asset Importer Error Max File Size');\n\n                            throw new Error(t('asset_pack.import.errors.max_file_size', {\n                              name: truncateFileName(file.name),\n                              max: MAX_FILE_SIZE / 1000000\n                            }));\n\n                          case 6:\n                            return _context.abrupt(\"return\", {\n                              name: file.name,\n                              blob: blob\n                            });\n\n                          case 7:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x2) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 16:\n                files = _context2.sent;\n                model = fileNames.find(function (fileName) {\n                  return fileName.endsWith('.gltf') || fileName.endsWith('.glb');\n                });\n                script = fileNames.find(function (fileName) {\n                  return fileName.endsWith('.js');\n                }) || null;\n                contents = files.reduce(function (contents, file) {\n                  contents[file.name] = file.blob;\n                  return contents;\n                }, {});\n\n                if (manifestParsed && manifestParsed.id) {\n                  id = manifestParsed.id;\n                } else {\n                  id = uuidv4();\n                }\n\n                if (!script) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                _context2.next = 24;\n                return prepareScript(script, id, contents);\n\n              case 24:\n                contents = _context2.sent;\n\n              case 25:\n                _this.analytics.track('Asset Importer File Success');\n\n                asset = {\n                  id: id,\n                  name: cleanAssetName(file.name),\n                  assetPackId: assetPackId,\n                  model: model,\n                  script: script,\n                  contents: contents,\n                  tags: [],\n                  category: 'decorations',\n                  metrics: getMetrics(),\n                  thumbnail: '',\n                  parameters: [],\n                  actions: []\n                }; // apply manifest data\n\n                if (manifestParsed) {\n                  if (manifestParsed.name) {\n                    manifestParsed.name = manifestParsed.name.slice(0, MAX_NAME_LENGTH);\n                  }\n\n                  _manifestParsed = manifestParsed, _ = _manifestParsed.contents, rest = _objectWithoutProperties(_manifestParsed, [\"contents\"]);\n                  asset = _objectSpread({}, asset, rest);\n                }\n\n                return _context2.abrupt(\"return\", {\n                  id: id,\n                  fileName: file.name,\n                  asset: asset\n                });\n\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleModelFile = function (file) {\n      var assetPackId = _this.state.assetPackId;\n      var id = uuidv4();\n\n      if (file.size > MAX_FILE_SIZE) {\n        _this.analytics.track('Asset Importer Error Max File Size');\n\n        throw new Error(t('asset_pack.import.errors.max_file_size', {\n          name: truncateFileName(file.name),\n          max: MAX_FILE_SIZE / 1000000\n        }));\n      }\n\n      return createDefaultImportedFile(id, assetPackId, file);\n    };\n\n    _this.handleDropAccepted = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(acceptedFiles) {\n        var assetPack, files, newFiles, _iterator, _step, _loop, fileRecord;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                assetPack = _this.props.assetPack;\n                files = _this.state.files;\n                newFiles = {};\n\n                _this.setState({\n                  isLoading: true\n                });\n\n                _iterator = _createForOfIteratorHelper(acceptedFiles);\n                _context4.prev = 5;\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var file, outFile, extension, mappings, _yield$getModelData, image, info, existingAsset;\n\n                  return _regeneratorRuntime.wrap(function _loop$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          file = _step.value;\n                          outFile = null;\n                          extension = getExtension(file.name);\n                          _context3.prev = 3;\n\n                          if (extension) {\n                            _context3.next = 7;\n                            break;\n                          }\n\n                          _this.analytics.track('Asset Importer Error Missing Extension');\n\n                          throw new Error(t('asset_pack.import.errors.missing_extension', {\n                            name: truncateFileName(file.name)\n                          }));\n\n                        case 7:\n                          if (!(extension === '.zip')) {\n                            _context3.next = 13;\n                            break;\n                          }\n\n                          _context3.next = 10;\n                          return _this.handleZipFile(file);\n\n                        case 10:\n                          outFile = _context3.sent;\n                          _context3.next = 14;\n                          break;\n\n                        case 13:\n                          if (extension === '.gltf' || extension === '.glb') {\n                            outFile = _this.handleModelFile(file);\n                          }\n\n                        case 14:\n                          if (!outFile) {\n                            _context3.next = 28;\n                            break;\n                          }\n\n                          mappings = rawMappingsToObjectURL(outFile.asset.contents);\n                          _context3.next = 18;\n                          return getModelData(mappings[outFile.asset.model], {\n                            mappings: mappings,\n                            thumbnailType: outFile.asset.category === GROUND_CATEGORY ? ThumbnailType.TOP : ThumbnailType.DEFAULT,\n                            width: 256,\n                            height: 256\n                          });\n\n                        case 18:\n                          _yield$getModelData = _context3.sent;\n                          image = _yield$getModelData.image;\n                          info = _yield$getModelData.info;\n                          revokeMappingsObjectURL(mappings);\n                          outFile.asset.thumbnail = image;\n                          outFile.asset.metrics = info;\n                          existingAsset = assetPack.assets.find(function (asset) {\n                            return asset.id === outFile.asset.id;\n                          });\n\n                          if (!existingAsset) {\n                            _context3.next = 28;\n                            break;\n                          }\n\n                          _this.analytics.track('Asset Importer Error Duplicated Asset');\n\n                          throw new Error(t('asset_pack.import.errors.duplicated_asset', {\n                            name: truncateFileName(file.name),\n                            id: existingAsset.id,\n                            existingAsset: existingAsset.name,\n                            newAsset: outFile.asset.name\n                          }));\n\n                        case 28:\n                          _context3.next = 33;\n                          break;\n\n                        case 30:\n                          _context3.prev = 30;\n                          _context3.t0 = _context3[\"catch\"](3);\n                          outFile = {\n                            id: uuidv4(),\n                            asset: outFile ? outFile.asset : null,\n                            fileName: file.name,\n                            error: _context3.t0.message || t('asset_pack.import.errors.invalid')\n                          };\n\n                        case 33:\n                          if (outFile) {\n                            newFiles[outFile.id] = outFile;\n                          }\n\n                        case 34:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _loop, null, [[3, 30]]);\n                });\n\n                _iterator.s();\n\n              case 8:\n                if ((_step = _iterator.n()).done) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                return _context4.delegateYield(_loop(), \"t0\", 10);\n\n              case 10:\n                _context4.next = 8;\n                break;\n\n              case 12:\n                _context4.next = 17;\n                break;\n\n              case 14:\n                _context4.prev = 14;\n                _context4.t1 = _context4[\"catch\"](5);\n\n                _iterator.e(_context4.t1);\n\n              case 17:\n                _context4.prev = 17;\n\n                _iterator.f();\n\n                return _context4.finish(17);\n\n              case 20:\n                fileRecord = _objectSpread({}, files, newFiles);\n\n                _this.setState({\n                  files: fileRecord,\n                  isLoading: false\n                });\n\n              case 22:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee3, null, [[5, 14, 17, 20]]);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.handleDropRejected = function (rejectedFiles) {\n      console.log('rejected', rejectedFiles);\n    };\n\n    _this.handleRemoveProject = function (id) {\n      var _this$state$files = _this.state.files,\n          _ = _this$state$files[id],\n          files = _objectWithoutProperties(_this$state$files, [id].map(_toPropertyKey));\n\n      _this.setState({\n        files: files\n      });\n    };\n\n    _this.handleSubmit = function () {\n      var assetPack = _this.props.assetPack;\n      var files = _this.state.files;\n      var assets = Object.values(files).map(function (file) {\n        return file.asset;\n      });\n\n      _this.props.onSubmit(_objectSpread({}, assetPack, {\n        assets: assetPack ? [].concat(_toConsumableArray(assetPack.assets), _toConsumableArray(assets)) : assets\n      }));\n    };\n\n    _this.handleOpenDocs = function () {\n      window.open('https://docs.decentraland.org/3d-modeling/3d-models/', '_blank');\n    };\n\n    return _this;\n  }\n\n  _createClass(AssetImporter, [{\n    key: \"getAssetPackId\",\n    value: function getAssetPackId() {\n      var assetPack = this.props.assetPack;\n      return assetPack ? assetPack.id : uuidv4();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var files = this.state.files;\n      var items = Object.values(files);\n      var buttonText = items.length > 1 ? t('asset_pack.import.action_many', {\n        count: items.length\n      }) : t('asset_pack.import.action');\n      var hasCorrupted = items.find(function (item) {\n        return !!item.error;\n      });\n      var canImport = items.length > 0 && !hasCorrupted;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"AssetImporter\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(FileImport, {\n        accept: ['.zip', '.gltf', '.glb'],\n        items: items,\n        renderFiles: this.renderFiles,\n        onAcceptedFiles: this.handleDropAccepted,\n        onRejectedFiles: this.handleDropRejected,\n        renderAction: this.renderDropzoneCTA,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        className: \"submit\",\n        disabled: !canImport,\n        primary: canImport,\n        onClick: this.handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 9\n        }\n      }, buttonText));\n    }\n  }]);\n\n  return AssetImporter;\n}(React.PureComponent);\n\nexport { AssetImporter as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/AssetImporter/AssetImporter.tsx"],"names":["React","basename","crypto","uuidv4","JSZip","Button","Loader","t","T","getAnalytics","FileImport","AssetThumbnail","GROUND_CATEGORY","EXPORT_PATH","cleanAssetName","rawMappingsToObjectURL","revokeMappingsObjectURL","MAX_NAME_LENGTH","MAX_FILE_SIZE","getModelData","ThumbnailType","createDefaultImportedFile","getMetrics","ASSET_MANIFEST","prepareScript","truncateFileName","getExtension","getSHA256","data","createHash","update","digest","AssetImporter","state","assetPackId","getAssetPackId","files","isLoading","analytics","renderFiles","Object","values","length","renderFile","map","saved","file","fileName","handleRemoveProject","id","error","asset","isDuplicated","thumbnail","name","renderDropzoneCTA","open","models_link","handleOpenDocs","action","handleZipFile","loadAsync","zip","manifestPath","keys","find","path","manifestParsed","manifestRaw","async","content","JSON","parse","fileNames","forEach","MANIFEST_FILE","track","Error","startsWith","push","Promise","all","filter","blob","size","max","model","endsWith","script","contents","reduce","tags","category","metrics","parameters","actions","slice","_","rest","handleModelFile","handleDropAccepted","acceptedFiles","assetPack","props","newFiles","setState","outFile","extension","mappings","thumbnailType","TOP","DEFAULT","width","height","image","info","existingAsset","assets","newAsset","message","fileRecord","handleDropRejected","rejectedFiles","console","log","handleSubmit","onSubmit","window","items","buttonText","count","hasCorrupted","item","canImport","PureComponent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { basename } from 'path'\nimport * as crypto from 'crypto'\nimport uuidv4 from 'uuid/v4'\nimport JSZip from 'jszip'\nimport { Button, Loader } from 'decentraland-ui'\nimport { t, T } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { getAnalytics } from 'decentraland-dapps/dist/modules/analytics/utils'\n\nimport FileImport from 'components/FileImport'\nimport AssetThumbnail from 'components/AssetThumbnail'\nimport { Asset, GROUND_CATEGORY, RawAsset } from 'modules/asset/types'\nimport { EXPORT_PATH } from 'modules/project/export'\nimport { RawAssetPack, MixedAssetPack } from 'modules/assetPack/types'\nimport { cleanAssetName, rawMappingsToObjectURL, revokeMappingsObjectURL, MAX_NAME_LENGTH, MAX_FILE_SIZE } from 'modules/asset/utils'\nimport { getModelData, ThumbnailType } from 'lib/getModelData'\nimport { createDefaultImportedFile, getMetrics, ASSET_MANIFEST, prepareScript } from './utils'\nimport { truncateFileName, getExtension } from 'lib/file'\n\nimport { Props, State, ImportedFile } from './AssetImporter.types'\nimport './AssetImporter.css'\n\nexport const getSHA256 = (data: string) => {\n  return crypto\n    .createHash('sha256')\n    .update(data)\n    .digest('hex')\n}\n\nexport default class AssetImporter<T extends MixedAssetPack = RawAssetPack> extends React.PureComponent<Props<T>, State> {\n  state: State = {\n    assetPackId: this.getAssetPackId(),\n    files: {},\n    isLoading: false\n  }\n\n  analytics = getAnalytics()\n\n  getAssetPackId() {\n    const { assetPack } = this.props\n    return assetPack ? assetPack.id : uuidv4()\n  }\n\n  renderFiles = () => {\n    const files = Object.values(this.state.files)\n\n    return (\n      <>\n        {files.length === 1 && <div className=\"single-project\">{this.renderFile(files[0])}</div>}\n        {files.length > 1 && <div className=\"multiple-projects\">{(files as ImportedFile[]).map(saved => this.renderFile(saved))} </div>}\n      </>\n    )\n  }\n\n  renderFile = (file: ImportedFile) => {\n    if (!file.fileName) {\n      // Hide any weird cases where no fileName is available\n      this.handleRemoveProject(file.id)\n      return null\n    }\n\n    const id = !file.error ? file.asset.id : file.id\n    const isDuplicated = file.error && file.asset && file.asset.thumbnail\n\n    return (\n      <AssetThumbnail\n        key={id}\n        asset={{\n          ...file.asset,\n          id,\n          name: !file.error ? file.asset.name : file.fileName\n        }}\n        error={file.error}\n        errorLabel={isDuplicated ? t('asset_pack.import.errors.duplicated') : t('asset_pack.import.errors.invalid')}\n        onRemove={this.handleRemoveProject}\n      />\n    )\n  }\n\n  renderDropzoneCTA = (open: () => void) => {\n    const { isLoading } = this.state\n    return (\n      <>\n        {isLoading ? (\n          <div className=\"overlay\">\n            <Loader active size=\"big\" />\n          </div>\n        ) : null}\n        <T\n          id=\"asset_pack.import.cta\"\n          values={{\n            models_link: (\n              <span className=\"link\" onClick={this.handleOpenDocs}>\n                GLB, GLTF, ZIP\n              </span>\n            ),\n            action: (\n              <span className=\"action\" onClick={open}>\n                {t('import_modal.upload_manually')}\n              </span>\n            )\n          }}\n        />\n      </>\n    )\n  }\n\n  handleZipFile = async (file: File) => {\n    const { assetPackId } = this.state\n    const zip: JSZip = await JSZip.loadAsync(file)\n    const manifestPath = Object.keys(zip.files).find(path => basename(path) === ASSET_MANIFEST)\n    let manifestParsed: Asset | null = null\n\n    if (manifestPath) {\n      const manifestRaw = zip.file(manifestPath)\n      const content = await manifestRaw.async('text')\n      manifestParsed = JSON.parse(content)\n    }\n\n    const fileNames: string[] = []\n\n    zip.forEach(fileName => {\n      if (fileName === EXPORT_PATH.MANIFEST_FILE) {\n        this.analytics.track('Asset Importer Error Scene File')\n        throw new Error(\n          t('asset_pack.import.errors.scene_file', {\n            name: fileName\n          })\n        )\n      }\n\n      if (basename(fileName) !== ASSET_MANIFEST && !basename(fileName).startsWith('.')) {\n        fileNames.push(fileName)\n      }\n    })\n\n    const files = await Promise.all(\n      fileNames\n        .map(fileName => zip.file(fileName))\n        .filter(file => !!file)\n        .map(async file => {\n          const blob = await file.async('blob')\n\n          if (blob.size > MAX_FILE_SIZE) {\n            this.analytics.track('Asset Importer Error Max File Size')\n            throw new Error(\n              t('asset_pack.import.errors.max_file_size', {\n                name: truncateFileName(file.name),\n                max: MAX_FILE_SIZE / 1000000\n              })\n            )\n          }\n\n          return {\n            name: file.name,\n            blob\n          }\n        })\n    )\n\n    let model = fileNames.find(fileName => fileName.endsWith('.gltf') || fileName.endsWith('.glb'))\n    let script = fileNames.find(fileName => fileName.endsWith('.js')) || null\n    let contents = files.reduce<Record<string, Blob>>((contents, file) => {\n      contents[file.name] = file.blob\n      return contents\n    }, {})\n\n    let id: string\n    if (manifestParsed && manifestParsed.id) {\n      id = manifestParsed.id\n    } else {\n      id = uuidv4()\n    }\n\n    if (script) {\n      contents = await prepareScript(script, id, contents)\n    }\n\n    this.analytics.track('Asset Importer File Success')\n\n    let asset: RawAsset = {\n      id,\n      name: cleanAssetName(file.name),\n      assetPackId,\n      model: model!,\n      script,\n      contents,\n      tags: [],\n      category: 'decorations',\n      metrics: getMetrics(),\n      thumbnail: '',\n      parameters: [],\n      actions: []\n    }\n\n    // apply manifest data\n    if (manifestParsed) {\n      if (manifestParsed.name) {\n        manifestParsed.name = manifestParsed.name.slice(0, MAX_NAME_LENGTH)\n      }\n      const { contents: _, ...rest } = manifestParsed\n      asset = {\n        ...asset,\n        ...rest\n      }\n    }\n\n    return {\n      id,\n      fileName: file.name,\n      asset\n    } as ImportedFile\n  }\n\n  handleModelFile = (file: File) => {\n    const { assetPackId } = this.state\n    const id = uuidv4()\n\n    if (file.size > MAX_FILE_SIZE) {\n      this.analytics.track('Asset Importer Error Max File Size')\n      throw new Error(\n        t('asset_pack.import.errors.max_file_size', {\n          name: truncateFileName(file.name),\n          max: MAX_FILE_SIZE / 1000000\n        })\n      )\n    }\n\n    return createDefaultImportedFile(id, assetPackId, file)\n  }\n\n  handleDropAccepted = async (acceptedFiles: File[]) => {\n    const { assetPack } = this.props\n    const { files } = this.state\n    let newFiles: Record<string, ImportedFile> = {}\n\n    this.setState({ isLoading: true })\n\n    for (let file of acceptedFiles) {\n      let outFile: ImportedFile | null = null\n      const extension = getExtension(file.name)\n\n      try {\n        if (!extension) {\n          this.analytics.track('Asset Importer Error Missing Extension')\n          throw new Error(\n            t('asset_pack.import.errors.missing_extension', {\n              name: truncateFileName(file.name)\n            })\n          )\n        }\n\n        if (extension === '.zip') {\n          outFile = await this.handleZipFile(file)\n        } else if (extension === '.gltf' || extension === '.glb') {\n          outFile = this.handleModelFile(file)\n        }\n\n        if (outFile) {\n          let mappings = rawMappingsToObjectURL(outFile.asset.contents)\n          const { image, info } = await getModelData(mappings[outFile.asset.model], {\n            mappings,\n            thumbnailType: outFile.asset.category === GROUND_CATEGORY ? ThumbnailType.TOP : ThumbnailType.DEFAULT,\n            width: 256,\n            height: 256\n          })\n          revokeMappingsObjectURL(mappings)\n\n          outFile.asset.thumbnail = image\n          outFile.asset.metrics = info\n\n          const existingAsset = assetPack.assets.find(asset => asset.id === outFile!.asset.id)\n\n          if (existingAsset) {\n            this.analytics.track('Asset Importer Error Duplicated Asset')\n            throw new Error(\n              t('asset_pack.import.errors.duplicated_asset', {\n                name: truncateFileName(file.name),\n                id: existingAsset.id,\n                existingAsset: existingAsset.name,\n                newAsset: outFile.asset.name\n              })\n            )\n          }\n        }\n      } catch (e) {\n        outFile = {\n          id: uuidv4(),\n          asset: outFile ? outFile!.asset : null,\n          fileName: file.name,\n          error: e.message || t('asset_pack.import.errors.invalid')\n        } as ImportedFile\n      }\n\n      if (outFile) {\n        newFiles[outFile!.id] = outFile\n      }\n    }\n\n    const fileRecord = { ...files, ...newFiles }\n    this.setState({ files: fileRecord, isLoading: false })\n  }\n\n  handleDropRejected = (rejectedFiles: File[]) => {\n    console.log('rejected', rejectedFiles)\n  }\n\n  handleRemoveProject = (id: string) => {\n    const { [id]: _, ...files } = this.state.files\n    this.setState({ files })\n  }\n\n  handleSubmit = () => {\n    const { assetPack } = this.props\n    const { files } = this.state\n    const assets = Object.values(files).map(file => file.asset)\n\n    this.props.onSubmit({\n      ...assetPack,\n      assets: assetPack ? [...assetPack.assets, ...assets] : assets\n    })\n  }\n\n  handleOpenDocs = () => {\n    window.open('https://docs.decentraland.org/3d-modeling/3d-models/', '_blank')\n  }\n\n  render() {\n    const { files } = this.state\n    const items = Object.values(files)\n    const buttonText = items.length > 1 ? t('asset_pack.import.action_many', { count: items.length }) : t('asset_pack.import.action')\n    const hasCorrupted = items.find(item => !!item.error)\n    const canImport = items.length > 0 && !hasCorrupted\n\n    return (\n      <div className=\"AssetImporter\">\n        <FileImport<ImportedFile>\n          accept={['.zip', '.gltf', '.glb']}\n          items={items}\n          renderFiles={this.renderFiles}\n          onAcceptedFiles={this.handleDropAccepted}\n          onRejectedFiles={this.handleDropRejected}\n          renderAction={this.renderDropzoneCTA}\n        />\n        <Button className=\"submit\" disabled={!canImport} primary={canImport} onClick={this.handleSubmit}>\n          {buttonText}\n        </Button>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}