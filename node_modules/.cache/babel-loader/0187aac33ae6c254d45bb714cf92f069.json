{"ast":null,"code":"/**\r\n * Scalar computation library\r\n */\nvar Scalar =\n/** @class */\nfunction () {\n  function Scalar() {}\n  /**\r\n   * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\r\n   * @param a number\r\n   * @param b number\r\n   * @param epsilon (default = 1.401298E-45)\r\n   * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\r\n   */\n\n\n  Scalar.WithinEpsilon = function (a, b, epsilon) {\n    if (epsilon === void 0) {\n      epsilon = 1.401298E-45;\n    }\n\n    var num = a - b;\n    return -epsilon <= num && num <= epsilon;\n  };\n  /**\r\n   * Returns a string : the upper case translation of the number i to hexadecimal.\r\n   * @param i number\r\n   * @returns the upper case translation of the number i to hexadecimal.\r\n   */\n\n\n  Scalar.ToHex = function (i) {\n    var str = i.toString(16);\n\n    if (i <= 15) {\n      return (\"0\" + str).toUpperCase();\n    }\n\n    return str.toUpperCase();\n  };\n  /**\r\n   * Returns -1 if value is negative and +1 is value is positive.\r\n   * @param value the value\r\n   * @returns the value itself if it's equal to zero.\r\n   */\n\n\n  Scalar.Sign = function (value) {\n    value = +value; // convert to a number\n\n    if (value === 0 || isNaN(value)) {\n      return value;\n    }\n\n    return value > 0 ? 1 : -1;\n  };\n  /**\r\n   * Returns the value itself if it's between min and max.\r\n   * Returns min if the value is lower than min.\r\n   * Returns max if the value is greater than max.\r\n   * @param value the value to clmap\r\n   * @param min the min value to clamp to (default: 0)\r\n   * @param max the max value to clamp to (default: 1)\r\n   * @returns the clamped value\r\n   */\n\n\n  Scalar.Clamp = function (value, min, max) {\n    if (min === void 0) {\n      min = 0;\n    }\n\n    if (max === void 0) {\n      max = 1;\n    }\n\n    return Math.min(max, Math.max(min, value));\n  };\n  /**\r\n   * the log2 of value.\r\n   * @param value the value to compute log2 of\r\n   * @returns the log2 of value.\r\n   */\n\n\n  Scalar.Log2 = function (value) {\n    return Math.log(value) * Math.LOG2E;\n  };\n  /**\r\n  * Loops the value, so that it is never larger than length and never smaller than 0.\r\n  *\r\n  * This is similar to the modulo operator but it works with floating point numbers.\r\n  * For example, using 3.0 for t and 2.5 for length, the result would be 0.5.\r\n  * With t = 5 and length = 2.5, the result would be 0.0.\r\n  * Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\r\n  * @param value the value\r\n  * @param length the length\r\n  * @returns the looped value\r\n  */\n\n\n  Scalar.Repeat = function (value, length) {\n    return value - Math.floor(value / length) * length;\n  };\n  /**\r\n   * Normalize the value between 0.0 and 1.0 using min and max values\r\n   * @param value value to normalize\r\n   * @param min max to normalize between\r\n   * @param max min to normalize between\r\n   * @returns the normalized value\r\n   */\n\n\n  Scalar.Normalize = function (value, min, max) {\n    return (value - min) / (max - min);\n  };\n  /**\r\n  * Denormalize the value from 0.0 and 1.0 using min and max values\r\n  * @param normalized value to denormalize\r\n  * @param min max to denormalize between\r\n  * @param max min to denormalize between\r\n  * @returns the denormalized value\r\n  */\n\n\n  Scalar.Denormalize = function (normalized, min, max) {\n    return normalized * (max - min) + min;\n  };\n  /**\r\n  * Calculates the shortest difference between two given angles given in degrees.\r\n  * @param current current angle in degrees\r\n  * @param target target angle in degrees\r\n  * @returns the delta\r\n  */\n\n\n  Scalar.DeltaAngle = function (current, target) {\n    var num = Scalar.Repeat(target - current, 360.0);\n\n    if (num > 180.0) {\n      num -= 360.0;\n    }\n\n    return num;\n  };\n  /**\r\n  * PingPongs the value t, so that it is never larger than length and never smaller than 0.\r\n  * @param tx value\r\n  * @param length length\r\n  * @returns The returned value will move back and forth between 0 and length\r\n  */\n\n\n  Scalar.PingPong = function (tx, length) {\n    var t = Scalar.Repeat(tx, length * 2.0);\n    return length - Math.abs(t - length);\n  };\n  /**\r\n  * Interpolates between min and max with smoothing at the limits.\r\n  *\r\n  * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up\r\n  * from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\r\n  * @param from from\r\n  * @param to to\r\n  * @param tx value\r\n  * @returns the smooth stepped value\r\n  */\n\n\n  Scalar.SmoothStep = function (from, to, tx) {\n    var t = Scalar.Clamp(tx);\n    t = -2.0 * t * t * t + 3.0 * t * t;\n    return to * t + from * (1.0 - t);\n  };\n  /**\r\n  * Moves a value current towards target.\r\n  *\r\n  * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta.\r\n  * Negative values of maxDelta pushes the value away from target.\r\n  * @param current current value\r\n  * @param target target value\r\n  * @param maxDelta max distance to move\r\n  * @returns resulting value\r\n  */\n\n\n  Scalar.MoveTowards = function (current, target, maxDelta) {\n    var result = 0;\n\n    if (Math.abs(target - current) <= maxDelta) {\n      result = target;\n    } else {\n      result = current + Scalar.Sign(target - current) * maxDelta;\n    }\n\n    return result;\n  };\n  /**\r\n  * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\r\n  *\r\n  * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta\r\n  *  are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\r\n  * @param current current value\r\n  * @param target target value\r\n  * @param maxDelta max distance to move\r\n  * @returns resulting angle\r\n  */\n\n\n  Scalar.MoveTowardsAngle = function (current, target, maxDelta) {\n    var num = Scalar.DeltaAngle(current, target);\n    var result = 0;\n\n    if (-maxDelta < num && num < maxDelta) {\n      result = target;\n    } else {\n      target = current + num;\n      result = Scalar.MoveTowards(current, target, maxDelta);\n    }\n\n    return result;\n  };\n  /**\r\n   * Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar.\r\n   * @param start start value\r\n   * @param end target value\r\n   * @param amount amount to lerp between\r\n   * @returns the lerped value\r\n   */\n\n\n  Scalar.Lerp = function (start, end, amount) {\n    return start + (end - start) * amount;\n  };\n  /**\r\n  * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.\r\n  * The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\r\n  * @param start start value\r\n  * @param end target value\r\n  * @param amount amount to lerp between\r\n  * @returns the lerped value\r\n  */\n\n\n  Scalar.LerpAngle = function (start, end, amount) {\n    var num = Scalar.Repeat(end - start, 360.0);\n\n    if (num > 180.0) {\n      num -= 360.0;\n    }\n\n    return start + num * Scalar.Clamp(amount);\n  };\n  /**\r\n  * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\r\n  * @param a start value\r\n  * @param b target value\r\n  * @param value value between a and b\r\n  * @returns the inverseLerp value\r\n  */\n\n\n  Scalar.InverseLerp = function (a, b, value) {\n    var result = 0;\n\n    if (a != b) {\n      result = Scalar.Clamp((value - a) / (b - a));\n    } else {\n      result = 0.0;\n    }\n\n    return result;\n  };\n  /**\r\n   * Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\".\r\n   * @see http://mathworld.wolfram.com/HermitePolynomial.html\r\n   * @param value1 spline value\r\n   * @param tangent1 spline value\r\n   * @param value2 spline value\r\n   * @param tangent2 spline value\r\n   * @param amount input value\r\n   * @returns hermite result\r\n   */\n\n\n  Scalar.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    var part2 = -2.0 * cubed + 3.0 * squared;\n    var part3 = cubed - 2.0 * squared + amount;\n    var part4 = cubed - squared;\n    return value1 * part1 + value2 * part2 + tangent1 * part3 + tangent2 * part4;\n  };\n  /**\r\n  * Returns a random float number between and min and max values\r\n  * @param min min value of random\r\n  * @param max max value of random\r\n  * @returns random value\r\n  */\n\n\n  Scalar.RandomRange = function (min, max) {\n    if (min === max) {\n      return min;\n    }\n\n    return Math.random() * (max - min) + min;\n  };\n  /**\r\n  * This function returns percentage of a number in a given range.\r\n  *\r\n  * RangeToPercent(40,20,60) will return 0.5 (50%)\r\n  * RangeToPercent(34,0,100) will return 0.34 (34%)\r\n  * @param number to convert to percentage\r\n  * @param min min range\r\n  * @param max max range\r\n  * @returns the percentage\r\n  */\n\n\n  Scalar.RangeToPercent = function (number, min, max) {\n    return (number - min) / (max - min);\n  };\n  /**\r\n  * This function returns number that corresponds to the percentage in a given range.\r\n  *\r\n  * PercentToRange(0.34,0,100) will return 34.\r\n  * @param percent to convert to number\r\n  * @param min min range\r\n  * @param max max range\r\n  * @returns the number\r\n  */\n\n\n  Scalar.PercentToRange = function (percent, min, max) {\n    return (max - min) * percent + min;\n  };\n  /**\r\n   * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\r\n   * @param angle The angle to normalize in radian.\r\n   * @return The converted angle.\r\n   */\n\n\n  Scalar.NormalizeRadians = function (angle) {\n    // More precise but slower version kept for reference.\n    // angle = angle % Tools.TwoPi;\n    // angle = (angle + Tools.TwoPi) % Tools.TwoPi;\n    //if (angle > Math.PI) {\n    //\tangle -= Tools.TwoPi;\n    //}\n    angle -= Scalar.TwoPi * Math.floor((angle + Math.PI) / Scalar.TwoPi);\n    return angle;\n  };\n  /**\r\n   * Two pi constants convenient for computation.\r\n   */\n\n\n  Scalar.TwoPi = Math.PI * 2;\n  return Scalar;\n}();\n\nexport { Scalar };","map":null,"metadata":{},"sourceType":"module"}