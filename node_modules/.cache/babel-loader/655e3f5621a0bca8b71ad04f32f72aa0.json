{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRopstenCatalysts = exports.getMainnetCatalysts = void 0;\n\nvar CatalystContract_1 = require(\"../contracts/CatalystContract\");\n\nfunction getMainnetCatalysts() {\n  return getServersFromNetwork('mainnet');\n}\n\nexports.getMainnetCatalysts = getMainnetCatalysts;\n\nfunction getRopstenCatalysts() {\n  return getServersFromNetwork('ropsten');\n}\n\nexports.getRopstenCatalysts = getRopstenCatalysts;\n\nfunction getServersFromNetwork(_x) {\n  return _getServersFromNetwork.apply(this, arguments);\n}\n/**\n * Converts the data from the contract into something more useful.\n * Returns undefined if the data from the contract is invalid.\n */\n\n\nfunction _getServersFromNetwork() {\n  _getServersFromNetwork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(network) {\n    var contract, count, indices, dataPromises, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            contract = CatalystContract_1.DAOContract.withNetwork(network); // Check count on the list\n\n            _context.next = 3;\n            return contract.getCount();\n\n          case 3:\n            count = _context.sent;\n            // Create an array with values from 0 to count - 1\n            indices = new Array(count).fill(0).map(function (_, i) {\n              return i;\n            }); // Fetch data from the contract\n\n            dataPromises = indices.map(function (index) {\n              return contract.getCatalystIdByIndex(index).then(function (id) {\n                return contract.getServerData(id);\n              });\n            });\n            _context.next = 8;\n            return Promise.all(dataPromises);\n\n          case 8:\n            data = _context.sent;\n            return _context.abrupt(\"return\", data.map(toMetadata).filter(function (metadata) {\n              return !!metadata;\n            }));\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getServersFromNetwork.apply(this, arguments);\n}\n\nfunction toMetadata(data) {\n  var id = data.id,\n      owner = data.owner,\n      domain = data.domain;\n  var address = domain.trim();\n\n  if (address.startsWith('http://')) {\n    console.warn(\"Catalyst node domain using http protocol, skipping \".concat(address));\n    return undefined;\n  }\n\n  if (!address.startsWith('https://')) {\n    address = 'https://' + address;\n  }\n\n  return {\n    address: address,\n    owner: owner,\n    id: id\n  };\n}","map":null,"metadata":{},"sourceType":"script"}