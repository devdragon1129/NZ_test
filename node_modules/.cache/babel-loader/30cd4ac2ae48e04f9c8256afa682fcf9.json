{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AbstractScene } from \"./abstractScene\";\nimport { Mesh } from \"./Meshes/mesh\";\nimport { Logger } from './Misc/logger';\nimport { EngineStore } from './Engines/engineStore';\n/**\r\n * Set of assets to keep when moving a scene into an asset container.\r\n */\n\nvar KeepAssets =\n/** @class */\nfunction (_super) {\n  __extends(KeepAssets, _super);\n\n  function KeepAssets() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return KeepAssets;\n}(AbstractScene);\n\nexport { KeepAssets };\n/**\r\n * Class used to store the output of the AssetContainer.instantiateAllMeshesToScene function\r\n */\n\nvar InstantiatedEntries =\n/** @class */\nfunction () {\n  function InstantiatedEntries() {\n    /**\r\n     * List of new root nodes (eg. nodes with no parent)\r\n     */\n    this.rootNodes = [];\n    /**\r\n     * List of new skeletons\r\n     */\n\n    this.skeletons = [];\n    /**\r\n     * List of new animation groups\r\n     */\n\n    this.animationGroups = [];\n  }\n\n  return InstantiatedEntries;\n}();\n\nexport { InstantiatedEntries };\n/**\r\n * Container with a set of assets that can be added or removed from a scene.\r\n */\n\nvar AssetContainer =\n/** @class */\nfunction (_super) {\n  __extends(AssetContainer, _super);\n  /**\r\n   * Instantiates an AssetContainer.\r\n   * @param scene The scene the AssetContainer belongs to.\r\n   */\n\n\n  function AssetContainer(scene) {\n    var _this = _super.call(this) || this;\n\n    _this._wasAddedToScene = false;\n    _this.scene = scene;\n    _this[\"sounds\"] = [];\n    _this[\"effectLayers\"] = [];\n    _this[\"layers\"] = [];\n    _this[\"lensFlareSystems\"] = [];\n    _this[\"proceduralTextures\"] = [];\n    _this[\"reflectionProbes\"] = [];\n    scene.onDisposeObservable.add(function () {\n      if (!_this._wasAddedToScene) {\n        _this.dispose();\n      }\n    });\n    return _this;\n  }\n  /**\r\n   * Instantiate or clone all meshes and add the new ones to the scene.\r\n   * Skeletons and animation groups will all be cloned\r\n   * @param nameFunction defines an optional function used to get new names for clones\r\n   * @param cloneMaterials defines an optional boolean that defines if materials must be cloned as well (false by default)\r\n   * @returns a list of rootNodes, skeletons and aniamtion groups that were duplicated\r\n   */\n\n\n  AssetContainer.prototype.instantiateModelsToScene = function (nameFunction, cloneMaterials) {\n    var _this = this;\n\n    if (cloneMaterials === void 0) {\n      cloneMaterials = false;\n    }\n\n    var convertionMap = {};\n    var storeMap = {};\n    var result = new InstantiatedEntries();\n    var alreadySwappedSkeletons = [];\n    var alreadySwappedMaterials = [];\n    var options = {\n      doNotInstantiate: true\n    };\n\n    var onClone = function onClone(source, clone) {\n      convertionMap[source.uniqueId] = clone.uniqueId;\n      storeMap[clone.uniqueId] = clone;\n\n      if (nameFunction) {\n        clone.name = nameFunction(source.name);\n      }\n\n      if (clone instanceof Mesh) {\n        var clonedMesh = clone;\n\n        if (clonedMesh.morphTargetManager) {\n          var oldMorphTargetManager = source.morphTargetManager;\n          clonedMesh.morphTargetManager = oldMorphTargetManager.clone();\n\n          for (var index = 0; index < oldMorphTargetManager.numTargets; index++) {\n            var oldTarget = oldMorphTargetManager.getTarget(index);\n            var newTarget = clonedMesh.morphTargetManager.getTarget(index);\n            convertionMap[oldTarget.uniqueId] = newTarget.uniqueId;\n            storeMap[newTarget.uniqueId] = newTarget;\n          }\n        }\n      }\n    };\n\n    this.transformNodes.forEach(function (o) {\n      if (!o.parent) {\n        var newOne = o.instantiateHierarchy(null, options, function (source, clone) {\n          onClone(source, clone);\n        });\n\n        if (newOne) {\n          result.rootNodes.push(newOne);\n        }\n      }\n    });\n    this.meshes.forEach(function (o) {\n      if (!o.parent) {\n        var newOne = o.instantiateHierarchy(null, options, function (source, clone) {\n          onClone(source, clone);\n\n          if (clone.material) {\n            var mesh = clone;\n\n            if (mesh.material) {\n              if (cloneMaterials) {\n                var sourceMaterial = source.material;\n\n                if (alreadySwappedMaterials.indexOf(sourceMaterial) === -1) {\n                  var swap = sourceMaterial.clone(nameFunction ? nameFunction(sourceMaterial.name) : \"Clone of \" + sourceMaterial.name);\n                  alreadySwappedMaterials.push(sourceMaterial);\n                  convertionMap[sourceMaterial.uniqueId] = swap.uniqueId;\n                  storeMap[swap.uniqueId] = swap;\n\n                  if (sourceMaterial.getClassName() === \"MultiMaterial\") {\n                    var multi = sourceMaterial;\n\n                    for (var _i = 0, _a = multi.subMaterials; _i < _a.length; _i++) {\n                      var material = _a[_i];\n\n                      if (!material) {\n                        continue;\n                      }\n\n                      swap = material.clone(nameFunction ? nameFunction(material.name) : \"Clone of \" + material.name);\n                      alreadySwappedMaterials.push(material);\n                      convertionMap[material.uniqueId] = swap.uniqueId;\n                      storeMap[swap.uniqueId] = swap;\n                    }\n\n                    multi.subMaterials = multi.subMaterials.map(function (m) {\n                      return m && storeMap[convertionMap[m.uniqueId]];\n                    });\n                  }\n                }\n\n                mesh.material = storeMap[convertionMap[sourceMaterial.uniqueId]];\n              } else {\n                if (mesh.material.getClassName() === \"MultiMaterial\") {\n                  if (_this.scene.multiMaterials.indexOf(mesh.material) === -1) {\n                    _this.scene.addMultiMaterial(mesh.material);\n                  }\n                } else {\n                  if (_this.scene.materials.indexOf(mesh.material) === -1) {\n                    _this.scene.addMaterial(mesh.material);\n                  }\n                }\n              }\n            }\n          }\n        });\n\n        if (newOne) {\n          result.rootNodes.push(newOne);\n        }\n      }\n    });\n    this.skeletons.forEach(function (s) {\n      var clone = s.clone(nameFunction ? nameFunction(s.name) : \"Clone of \" + s.name);\n\n      if (s.overrideMesh) {\n        clone.overrideMesh = storeMap[convertionMap[s.overrideMesh.uniqueId]];\n      }\n\n      for (var _i = 0, _a = _this.meshes; _i < _a.length; _i++) {\n        var m = _a[_i];\n\n        if (m.skeleton === s && !m.isAnInstance) {\n          var copy = storeMap[convertionMap[m.uniqueId]];\n          copy.skeleton = clone;\n\n          if (alreadySwappedSkeletons.indexOf(clone) !== -1) {\n            continue;\n          }\n\n          alreadySwappedSkeletons.push(clone); // Check if bones are mesh linked\n\n          for (var _b = 0, _c = clone.bones; _b < _c.length; _b++) {\n            var bone = _c[_b];\n\n            if (bone._linkedTransformNode) {\n              bone._linkedTransformNode = storeMap[convertionMap[bone._linkedTransformNode.uniqueId]];\n            }\n          }\n        }\n      }\n\n      result.skeletons.push(clone);\n    });\n    this.animationGroups.forEach(function (o) {\n      var clone = o.clone(o.name, function (oldTarget) {\n        var newTarget = storeMap[convertionMap[oldTarget.uniqueId]];\n        return newTarget || oldTarget;\n      });\n      result.animationGroups.push(clone);\n    });\n    return result;\n  };\n  /**\r\n   * Adds all the assets from the container to the scene.\r\n   */\n\n\n  AssetContainer.prototype.addAllToScene = function () {\n    var _this = this;\n\n    this._wasAddedToScene = true;\n    this.cameras.forEach(function (o) {\n      _this.scene.addCamera(o);\n    });\n    this.lights.forEach(function (o) {\n      _this.scene.addLight(o);\n    });\n    this.meshes.forEach(function (o) {\n      _this.scene.addMesh(o);\n    });\n    this.skeletons.forEach(function (o) {\n      _this.scene.addSkeleton(o);\n    });\n    this.animations.forEach(function (o) {\n      _this.scene.addAnimation(o);\n    });\n    this.animationGroups.forEach(function (o) {\n      _this.scene.addAnimationGroup(o);\n    });\n    this.multiMaterials.forEach(function (o) {\n      _this.scene.addMultiMaterial(o);\n    });\n    this.materials.forEach(function (o) {\n      _this.scene.addMaterial(o);\n    });\n    this.morphTargetManagers.forEach(function (o) {\n      _this.scene.addMorphTargetManager(o);\n    });\n    this.geometries.forEach(function (o) {\n      _this.scene.addGeometry(o);\n    });\n    this.transformNodes.forEach(function (o) {\n      _this.scene.addTransformNode(o);\n    });\n    this.actionManagers.forEach(function (o) {\n      _this.scene.addActionManager(o);\n    });\n    this.textures.forEach(function (o) {\n      _this.scene.addTexture(o);\n    });\n    this.reflectionProbes.forEach(function (o) {\n      _this.scene.addReflectionProbe(o);\n    });\n\n    if (this.environmentTexture) {\n      this.scene.environmentTexture = this.environmentTexture;\n    }\n\n    for (var _i = 0, _a = this.scene._serializableComponents; _i < _a.length; _i++) {\n      var component = _a[_i];\n      component.addFromContainer(this);\n    }\n  };\n  /**\r\n   * Removes all the assets in the container from the scene\r\n   */\n\n\n  AssetContainer.prototype.removeAllFromScene = function () {\n    var _this = this;\n\n    this._wasAddedToScene = false;\n    this.cameras.forEach(function (o) {\n      _this.scene.removeCamera(o);\n    });\n    this.lights.forEach(function (o) {\n      _this.scene.removeLight(o);\n    });\n    this.meshes.forEach(function (o) {\n      _this.scene.removeMesh(o);\n    });\n    this.skeletons.forEach(function (o) {\n      _this.scene.removeSkeleton(o);\n    });\n    this.animations.forEach(function (o) {\n      _this.scene.removeAnimation(o);\n    });\n    this.animationGroups.forEach(function (o) {\n      _this.scene.removeAnimationGroup(o);\n    });\n    this.multiMaterials.forEach(function (o) {\n      _this.scene.removeMultiMaterial(o);\n    });\n    this.materials.forEach(function (o) {\n      _this.scene.removeMaterial(o);\n    });\n    this.morphTargetManagers.forEach(function (o) {\n      _this.scene.removeMorphTargetManager(o);\n    });\n    this.geometries.forEach(function (o) {\n      _this.scene.removeGeometry(o);\n    });\n    this.transformNodes.forEach(function (o) {\n      _this.scene.removeTransformNode(o);\n    });\n    this.actionManagers.forEach(function (o) {\n      _this.scene.removeActionManager(o);\n    });\n    this.textures.forEach(function (o) {\n      _this.scene.removeTexture(o);\n    });\n    this.reflectionProbes.forEach(function (o) {\n      _this.scene.removeReflectionProbe(o);\n    });\n\n    if (this.environmentTexture === this.scene.environmentTexture) {\n      this.scene.environmentTexture = null;\n    }\n\n    for (var _i = 0, _a = this.scene._serializableComponents; _i < _a.length; _i++) {\n      var component = _a[_i];\n      component.removeFromContainer(this);\n    }\n  };\n  /**\r\n   * Disposes all the assets in the container\r\n   */\n\n\n  AssetContainer.prototype.dispose = function () {\n    this.cameras.forEach(function (o) {\n      o.dispose();\n    });\n    this.cameras = [];\n    this.lights.forEach(function (o) {\n      o.dispose();\n    });\n    this.lights = [];\n    this.meshes.forEach(function (o) {\n      o.dispose();\n    });\n    this.meshes = [];\n    this.skeletons.forEach(function (o) {\n      o.dispose();\n    });\n    this.skeletons = [];\n    this.animationGroups.forEach(function (o) {\n      o.dispose();\n    });\n    this.animationGroups = [];\n    this.multiMaterials.forEach(function (o) {\n      o.dispose();\n    });\n    this.multiMaterials = [];\n    this.materials.forEach(function (o) {\n      o.dispose();\n    });\n    this.materials = [];\n    this.geometries.forEach(function (o) {\n      o.dispose();\n    });\n    this.geometries = [];\n    this.transformNodes.forEach(function (o) {\n      o.dispose();\n    });\n    this.transformNodes = [];\n    this.actionManagers.forEach(function (o) {\n      o.dispose();\n    });\n    this.actionManagers = [];\n    this.textures.forEach(function (o) {\n      o.dispose();\n    });\n    this.textures = [];\n    this.reflectionProbes.forEach(function (o) {\n      o.dispose();\n    });\n    this.reflectionProbes = [];\n\n    if (this.environmentTexture) {\n      this.environmentTexture.dispose();\n      this.environmentTexture = null;\n    }\n\n    for (var _i = 0, _a = this.scene._serializableComponents; _i < _a.length; _i++) {\n      var component = _a[_i];\n      component.removeFromContainer(this, true);\n    }\n  };\n\n  AssetContainer.prototype._moveAssets = function (sourceAssets, targetAssets, keepAssets) {\n    if (!sourceAssets) {\n      return;\n    }\n\n    for (var _i = 0, sourceAssets_1 = sourceAssets; _i < sourceAssets_1.length; _i++) {\n      var asset = sourceAssets_1[_i];\n      var move = true;\n\n      if (keepAssets) {\n        for (var _a = 0, keepAssets_1 = keepAssets; _a < keepAssets_1.length; _a++) {\n          var keepAsset = keepAssets_1[_a];\n\n          if (asset === keepAsset) {\n            move = false;\n            break;\n          }\n        }\n      }\n\n      if (move) {\n        targetAssets.push(asset);\n      }\n    }\n  };\n  /**\r\n   * Removes all the assets contained in the scene and adds them to the container.\r\n   * @param keepAssets Set of assets to keep in the scene. (default: empty)\r\n   */\n\n\n  AssetContainer.prototype.moveAllFromScene = function (keepAssets) {\n    this._wasAddedToScene = false;\n\n    if (keepAssets === undefined) {\n      keepAssets = new KeepAssets();\n    }\n\n    for (var key in this) {\n      if (this.hasOwnProperty(key)) {\n        this[key] = this[key] || (key === \"environmentTexture\" ? null : []);\n\n        this._moveAssets(this.scene[key], this[key], keepAssets[key]);\n      }\n    }\n\n    this.environmentTexture = this.scene.environmentTexture;\n    this.removeAllFromScene();\n  };\n  /**\r\n   * Adds all meshes in the asset container to a root mesh that can be used to position all the contained meshes. The root mesh is then added to the front of the meshes in the assetContainer.\r\n   * @returns the root mesh\r\n   */\n\n\n  AssetContainer.prototype.createRootMesh = function () {\n    var rootMesh = new Mesh(\"assetContainerRootMesh\", this.scene);\n    this.meshes.forEach(function (m) {\n      if (!m.parent) {\n        rootMesh.addChild(m);\n      }\n    });\n    this.meshes.unshift(rootMesh);\n    return rootMesh;\n  };\n  /**\r\n   * Merge animations (direct and animation groups) from this asset container into a scene\r\n   * @param scene is the instance of BABYLON.Scene to append to (default: last created scene)\r\n   * @param animatables set of animatables to retarget to a node from the scene\r\n   * @param targetConverter defines a function used to convert animation targets from the asset container to the scene (default: search node by name)\r\n   * @returns an array of the new AnimationGroup added to the scene (empty array if none)\r\n   */\n\n\n  AssetContainer.prototype.mergeAnimationsTo = function (scene, animatables, targetConverter) {\n    if (scene === void 0) {\n      scene = EngineStore.LastCreatedScene;\n    }\n\n    if (targetConverter === void 0) {\n      targetConverter = null;\n    }\n\n    if (!scene) {\n      Logger.Error(\"No scene available to merge animations to\");\n      return [];\n    }\n\n    var _targetConverter = targetConverter ? targetConverter : function (target) {\n      var node = null;\n      var targetProperty = target.animations.length ? target.animations[0].targetProperty : \"\";\n      /*\r\n          BabylonJS adds special naming to targets that are children of nodes.\r\n          This name attempts to remove that special naming to get the parent nodes name in case the target\r\n          can't be found in the node tree\r\n            Ex: Torso_primitive0 likely points to a Mesh primitive. We take away primitive0 and are left with \"Torso\" which is the name\r\n          of the primitive's parent.\r\n      */\n\n      var name = target.name.split(\".\").join(\"\").split(\"_primitive\")[0];\n\n      switch (targetProperty) {\n        case \"position\":\n        case \"rotationQuaternion\":\n          node = scene.getTransformNodeByName(target.name) || scene.getTransformNodeByName(name);\n          break;\n\n        case \"influence\":\n          node = scene.getMorphTargetByName(target.name) || scene.getMorphTargetByName(name);\n          break;\n\n        default:\n          node = scene.getNodeByName(target.name) || scene.getNodeByName(name);\n      }\n\n      return node;\n    }; // Copy new node animations\n\n\n    var nodesInAC = this.getNodes();\n    nodesInAC.forEach(function (nodeInAC) {\n      var nodeInScene = _targetConverter(nodeInAC);\n\n      if (nodeInScene !== null) {\n        var _loop_1 = function _loop_1(animationInAC) {\n          // Doing treatment on an array for safety measure\n          var animationsWithSameProperty = nodeInScene.animations.filter(function (animationInScene) {\n            return animationInScene.targetProperty === animationInAC.targetProperty;\n          });\n\n          for (var _i = 0, animationsWithSameProperty_1 = animationsWithSameProperty; _i < animationsWithSameProperty_1.length; _i++) {\n            var animationWithSameProperty = animationsWithSameProperty_1[_i];\n            var index = nodeInScene.animations.indexOf(animationWithSameProperty, 0);\n\n            if (index > -1) {\n              nodeInScene.animations.splice(index, 1);\n            }\n          }\n        }; // Remove old animations with same target property as a new one\n\n\n        for (var _i = 0, _a = nodeInAC.animations; _i < _a.length; _i++) {\n          var animationInAC = _a[_i];\n\n          _loop_1(animationInAC);\n        } // Append new animations\n\n\n        nodeInScene.animations = nodeInScene.animations.concat(nodeInAC.animations);\n      }\n    });\n    var newAnimationGroups = new Array(); // Copy new animation groups\n\n    this.animationGroups.slice().forEach(function (animationGroupInAC) {\n      // Clone the animation group and all its animatables\n      newAnimationGroups.push(animationGroupInAC.clone(animationGroupInAC.name, _targetConverter)); // Remove animatables related to the asset container\n\n      animationGroupInAC.animatables.forEach(function (animatable) {\n        animatable.stop();\n      });\n    }); // Retarget animatables\n\n    animatables.forEach(function (animatable) {\n      var target = _targetConverter(animatable.target);\n\n      if (target) {\n        // Clone the animatable and retarget it\n        scene.beginAnimation(target, animatable.fromFrame, animatable.toFrame, animatable.loopAnimation, animatable.speedRatio, animatable.onAnimationEnd ? animatable.onAnimationEnd : undefined, undefined, true, undefined, animatable.onAnimationLoop ? animatable.onAnimationLoop : undefined); // Stop animation for the target in the asset container\n\n        scene.stopAnimation(animatable.target);\n      }\n    });\n    return newAnimationGroups;\n  };\n\n  return AssetContainer;\n}(AbstractScene);\n\nexport { AssetContainer };","map":null,"metadata":{},"sourceType":"module"}