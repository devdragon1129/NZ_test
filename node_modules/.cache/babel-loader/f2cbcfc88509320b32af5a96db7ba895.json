{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateUnion = exports.validateArray = exports.usePattern = exports.callValidateCode = exports.schemaProperties = exports.allSchemaProperties = exports.noPropertyInData = exports.propertyInData = exports.isOwnProperty = exports.hasPropFunc = exports.reportMissingProp = exports.checkMissingProp = exports.checkReportMissingProp = void 0;\n\nvar codegen_1 = require(\"../compile/codegen\");\n\nvar util_1 = require(\"../compile/util\");\n\nvar subschema_1 = require(\"../compile/subschema\");\n\nvar names_1 = require(\"../compile/names\");\n\nfunction checkReportMissingProp(cxt, prop) {\n  var gen = cxt.gen,\n      data = cxt.data,\n      it = cxt.it;\n  gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), function () {\n    cxt.setParams({\n      missingProperty: codegen_1._(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\", \"\"])), prop)\n    }, true);\n    cxt.error();\n  });\n}\n\nexports.checkReportMissingProp = checkReportMissingProp;\n\nfunction checkMissingProp(_ref, properties, missing) {\n  var gen = _ref.gen,\n      data = _ref.data,\n      opts = _ref.it.opts;\n  return codegen_1.or.apply(codegen_1, _toConsumableArray(properties.map(function (prop) {\n    return codegen_1.and(noPropertyInData(gen, data, prop, opts.ownProperties), codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\", \" = \", \"\"])), missing, prop));\n  })));\n}\n\nexports.checkMissingProp = checkMissingProp;\n\nfunction reportMissingProp(cxt, missing) {\n  cxt.setParams({\n    missingProperty: missing\n  }, true);\n  cxt.error();\n}\n\nexports.reportMissingProp = reportMissingProp;\n\nfunction hasPropFunc(gen) {\n  return gen.scopeValue(\"func\", {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    ref: Object.prototype.hasOwnProperty,\n    code: codegen_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"Object.prototype.hasOwnProperty\"])))\n  });\n}\n\nexports.hasPropFunc = hasPropFunc;\n\nfunction isOwnProperty(gen, data, property) {\n  return codegen_1._(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \".call(\", \", \", \")\"])), hasPropFunc(gen), data, property);\n}\n\nexports.isOwnProperty = isOwnProperty;\n\nfunction propertyInData(gen, data, property, ownProperties) {\n  var cond = codegen_1._(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \"\", \" !== undefined\"])), data, codegen_1.getProperty(property));\n\n  return ownProperties ? codegen_1._(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\", \" && \", \"\"])), cond, isOwnProperty(gen, data, property)) : cond;\n}\n\nexports.propertyInData = propertyInData;\n\nfunction noPropertyInData(gen, data, property, ownProperties) {\n  var cond = codegen_1._(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\", \"\", \" === undefined\"])), data, codegen_1.getProperty(property));\n\n  return ownProperties ? codegen_1.or(cond, codegen_1.not(isOwnProperty(gen, data, property))) : cond;\n}\n\nexports.noPropertyInData = noPropertyInData;\n\nfunction allSchemaProperties(schemaMap) {\n  return schemaMap ? Object.keys(schemaMap).filter(function (p) {\n    return p !== \"__proto__\";\n  }) : [];\n}\n\nexports.allSchemaProperties = allSchemaProperties;\n\nfunction schemaProperties(it, schemaMap) {\n  return allSchemaProperties(schemaMap).filter(function (p) {\n    return !util_1.alwaysValidSchema(it, schemaMap[p]);\n  });\n}\n\nexports.schemaProperties = schemaProperties;\n\nfunction callValidateCode(_ref2, func, context, passSchema) {\n  var schemaCode = _ref2.schemaCode,\n      data = _ref2.data,\n      _ref2$it = _ref2.it,\n      gen = _ref2$it.gen,\n      topSchemaRef = _ref2$it.topSchemaRef,\n      schemaPath = _ref2$it.schemaPath,\n      errorPath = _ref2$it.errorPath,\n      it = _ref2.it;\n  var dataAndSchema = passSchema ? codegen_1._(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\", \", \", \", \", \"\", \"\"])), schemaCode, data, topSchemaRef, schemaPath) : data;\n  var valCxt = [[names_1.default.dataPath, codegen_1.strConcat(names_1.default.dataPath, errorPath)], [names_1.default.parentData, it.parentData], [names_1.default.parentDataProperty, it.parentDataProperty], [names_1.default.rootData, names_1.default.rootData]];\n  if (it.opts.dynamicRef) valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);\n\n  var args = codegen_1._(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"\", \", \", \"\"])), dataAndSchema, gen.object.apply(gen, valCxt));\n\n  return context !== codegen_1.nil ? codegen_1._(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"\", \".call(\", \", \", \")\"])), func, context, args) : codegen_1._(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([\"\", \"(\", \")\"])), func, args);\n}\n\nexports.callValidateCode = callValidateCode;\n\nfunction usePattern(gen, pattern) {\n  return gen.scopeValue(\"pattern\", {\n    key: pattern,\n    ref: new RegExp(pattern, \"u\"),\n    code: codegen_1._(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([\"new RegExp(\", \", \\\"u\\\")\"])), pattern)\n  });\n}\n\nexports.usePattern = usePattern;\n\nfunction validateArray(cxt) {\n  var gen = cxt.gen,\n      data = cxt.data,\n      keyword = cxt.keyword,\n      it = cxt.it;\n  var valid = gen.name(\"valid\");\n\n  if (it.allErrors) {\n    var validArr = gen.let(\"valid\", true);\n    validateItems(function () {\n      return gen.assign(validArr, false);\n    });\n    return validArr;\n  }\n\n  gen.var(valid, true);\n  validateItems(function () {\n    return gen.break();\n  });\n  return valid;\n\n  function validateItems(notValid) {\n    var len = gen.const(\"len\", codegen_1._(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral([\"\", \".length\"])), data));\n    gen.forRange(\"i\", 0, len, function (i) {\n      cxt.subschema({\n        keyword: keyword,\n        dataProp: i,\n        dataPropType: subschema_1.Type.Num\n      }, valid);\n      gen.if(codegen_1.not(valid), notValid);\n    });\n  }\n}\n\nexports.validateArray = validateArray;\n\nfunction validateUnion(cxt) {\n  var gen = cxt.gen,\n      schema = cxt.schema,\n      keyword = cxt.keyword,\n      it = cxt.it;\n  /* istanbul ignore if */\n\n  if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\");\n  var alwaysValid = schema.some(function (sch) {\n    return util_1.alwaysValidSchema(it, sch);\n  });\n  if (alwaysValid && !it.opts.unevaluated) return;\n  var valid = gen.let(\"valid\", false);\n  var schValid = gen.name(\"_valid\");\n  gen.block(function () {\n    return schema.forEach(function (_sch, i) {\n      var schCxt = cxt.subschema({\n        keyword: keyword,\n        schemaProp: i,\n        compositeRule: true\n      }, schValid);\n      gen.assign(valid, codegen_1._(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral([\"\", \" || \", \"\"])), valid, schValid));\n      var merged = cxt.mergeValidEvaluated(schCxt, schValid); // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)\n      // or if all properties and items were evaluated (it.props === true && it.items === true)\n\n      if (!merged) gen.if(codegen_1.not(valid));\n    });\n  });\n  cxt.result(valid, function () {\n    return cxt.reset();\n  }, function () {\n    return cxt.error(true);\n  });\n}\n\nexports.validateUnion = validateUnion;","map":null,"metadata":{},"sourceType":"script"}