{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clientConnectedToCatalystIn = void 0;\n\nvar dcl_catalyst_commons_1 = require(\"dcl-catalyst-commons\");\n\nvar CatalystClient_1 = require(\"../CatalystClient\");\n\nvar catalystList_1 = require(\"./catalystList\");\n\nvar common_1 = require(\"./common\");\n\nvar FETCH_HEALTH_TIMEOUT = '10s';\n/**\n * Returns a CatalystClient connected to one of the catalysts in the given network\n */\n\nfunction clientConnectedToCatalystIn(_x) {\n  return _clientConnectedToCatalystIn.apply(this, arguments);\n}\n\nfunction _clientConnectedToCatalystIn() {\n  _clientConnectedToCatalystIn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n    var noContractList, list, shuffled, _iterator, _step, catalystUrl, client, isUp;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return (0, catalystList_1.getUpdatedApprovedListWithoutQueryingContract)({\n              preKnownServers: {\n                network: options.network\n              }\n            });\n\n          case 2:\n            noContractList = _context.sent;\n\n            if (!noContractList) {\n              _context.next = 7;\n              break;\n            }\n\n            list = noContractList;\n            _context.next = 11;\n            break;\n\n          case 7:\n            console.warn('Falling back to the smart contract to get an updated list of active servers');\n            _context.next = 10;\n            return (0, catalystList_1.getApprovedListFromContract)(options.network);\n\n          case 10:\n            list = _context.sent;\n\n          case 11:\n            shuffled = (0, common_1.shuffleArray)(list);\n            _iterator = _createForOfIteratorHelper(shuffled);\n            _context.prev = 13;\n\n            _iterator.s();\n\n          case 15:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 25;\n              break;\n            }\n\n            catalystUrl = _step.value;\n            client = new CatalystClient_1.CatalystClient({\n              catalystUrl: catalystUrl\n            });\n            _context.next = 20;\n            return isServerUp(client);\n\n          case 20:\n            isUp = _context.sent;\n\n            if (!isUp) {\n              _context.next = 23;\n              break;\n            }\n\n            return _context.abrupt(\"return\", client);\n\n          case 23:\n            _context.next = 15;\n            break;\n\n          case 25:\n            _context.next = 30;\n            break;\n\n          case 27:\n            _context.prev = 27;\n            _context.t0 = _context[\"catch\"](13);\n\n            _iterator.e(_context.t0);\n\n          case 30:\n            _context.prev = 30;\n\n            _iterator.f();\n\n            return _context.finish(30);\n\n          case 33:\n            throw new Error(\"Couldn't find a server on the \".concat(options.network, \" network that was up\"));\n\n          case 34:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[13, 27, 30, 33]]);\n  }));\n  return _clientConnectedToCatalystIn.apply(this, arguments);\n}\n\nexports.clientConnectedToCatalystIn = clientConnectedToCatalystIn;\n\nfunction isServerUp(_x2) {\n  return _isServerUp.apply(this, arguments);\n}\n\nfunction _isServerUp() {\n  _isServerUp = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(client) {\n    var result, isSomeServerDown;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return client.fetchPeerHealth({\n              timeout: FETCH_HEALTH_TIMEOUT\n            });\n\n          case 3:\n            result = _context2.sent;\n            isSomeServerDown = Object.keys(result).some(function (service) {\n              return result[service] !== dcl_catalyst_commons_1.HealthStatus.HEALTHY;\n            });\n            return _context2.abrupt(\"return\", !isSomeServerDown);\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            return _context2.abrupt(\"return\", false);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 8]]);\n  }));\n  return _isServerUp.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}