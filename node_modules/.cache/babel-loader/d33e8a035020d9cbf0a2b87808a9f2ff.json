{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getLocation } from 'connected-react-router';\nimport * as routing from 'routing/utils';\nimport { getProjectId } from 'modules/location/utils';\nimport { getData as gerProjectsData } from 'modules/project/selectors';\nimport { LOAD_PROJECTS_REQUEST, LOAD_PUBLIC_PROJECT_REQUEST } from 'modules/project/actions';\nimport { LOAD_POOLS_REQUEST } from './actions';\nimport { SortBy, RECORDS_PER_PAGE } from './types';\nexport var getState = function getState(state) {\n  return state.pool;\n};\nexport var getData = function getData(state) {\n  return getState(state).data;\n};\nexport var getError = function getError(state) {\n  return getState(state).error;\n};\nexport var getLoading = function getLoading(state) {\n  return getState(state).loading;\n};\nexport var getTotal = function getTotal(state) {\n  return getState(state).total;\n};\nexport var getList = function getList(state) {\n  return getState(state).list;\n};\nexport var getTotalPages = createSelector(getTotal, function (total) {\n  switch (total) {\n    case null:\n    case 0:\n      return total;\n\n    default:\n      return Math.ceil(total / RECORDS_PER_PAGE);\n  }\n});\nexport var getPoolList = createSelector(getList, getData, function (list, pools) {\n  if (list === null) {\n    return null;\n  }\n\n  return list.map(function (id) {\n    return pools[id];\n  });\n});\nexport var getCurrentPublicProject = createSelector(getProjectId, gerProjectsData, function (projectId, projects) {\n  if (projectId && projects[projectId] && projects[projectId].isPublic) {\n    return projects[projectId];\n  }\n\n  return null;\n});\nexport var getCurrentPool = createSelector(getProjectId, getData, function (projectId, pools) {\n  if (projectId && pools[projectId]) {\n    return pools[projectId];\n  }\n\n  return null;\n});\nexport var isFetching = createSelector(getLoading, function (projectLoading) {\n  return isLoadingType(projectLoading, LOAD_PROJECTS_REQUEST) || isLoadingType(projectLoading, LOAD_PUBLIC_PROJECT_REQUEST) || isLoadingType(projectLoading, LOAD_POOLS_REQUEST);\n});\nexport var getSearchGroup = createSelector(function (state) {\n  return getLocation(state);\n}, function (location) {\n  var params = new URLSearchParams(location.search);\n  return routing.getValue(params.get('group'));\n});\nexport var getSearchEthAddress = createSelector(function (state) {\n  return getLocation(state);\n}, function (location) {\n  var params = new URLSearchParams(location.search);\n  return routing.getValue(params.get('eth_address'));\n});\nexport var getPage = createSelector(function (state) {\n  return getLocation(state);\n}, function (location) {\n  var params = new URLSearchParams(location.search);\n  return routing.getPage(params.get('page'), 1);\n});\nexport var getSortBy = createSelector(function (state) {\n  return getLocation(state);\n}, function (location) {\n  var params = new URLSearchParams(location.search);\n  return routing.getSortBy(params.get('sort_by'), [SortBy.NEWEST, SortBy.LIKES, SortBy.NAME, SortBy.SIZE, SortBy.ITEMS, SortBy.SMART_ITEMS], SortBy.NEWEST);\n});\nexport var getSortOrder = createSelector(function (state) {\n  return getLocation(state);\n}, function (location) {\n  var params = new URLSearchParams(location.search);\n  return routing.getSortOrder(params.get('sort_order'), 'desc');\n});","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/pool/selectors.ts"],"names":["createSelector","isLoadingType","getLocation","routing","getProjectId","getData","gerProjectsData","LOAD_PROJECTS_REQUEST","LOAD_PUBLIC_PROJECT_REQUEST","LOAD_POOLS_REQUEST","SortBy","RECORDS_PER_PAGE","getState","state","pool","data","getError","error","getLoading","loading","getTotal","total","getList","list","getTotalPages","Math","ceil","getPoolList","pools","map","id","getCurrentPublicProject","projectId","projects","isPublic","getCurrentPool","isFetching","projectLoading","getSearchGroup","location","params","URLSearchParams","search","getValue","get","getSearchEthAddress","getPage","getSortBy","NEWEST","LIKES","NAME","SIZE","ITEMS","SMART_ITEMS","getSortOrder"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { getLocation } from 'connected-react-router'\n\nimport * as routing from 'routing/utils'\nimport { RootState } from 'modules/common/types'\nimport { getProjectId } from 'modules/location/utils'\nimport { getData as gerProjectsData } from 'modules/project/selectors'\nimport { LOAD_PROJECTS_REQUEST, LOAD_PUBLIC_PROJECT_REQUEST } from 'modules/project/actions'\nimport { PoolState } from './reducer'\nimport { LOAD_POOLS_REQUEST } from './actions'\nimport { SortBy, RECORDS_PER_PAGE } from './types'\n\nexport const getState: (state: RootState) => PoolState = state => state.pool\n\nexport const getData: (state: RootState) => PoolState['data'] = state => getState(state).data\n\nexport const getError: (state: RootState) => PoolState['error'] = state => getState(state).error\n\nexport const getLoading = (state: RootState) => getState(state).loading\n\nexport const getTotal = (state: RootState) => getState(state).total\n\nexport const getList = (state: RootState) => getState(state).list\n\nexport const getTotalPages = createSelector(getTotal, total => {\n  switch (total) {\n    case null:\n    case 0:\n      return total\n    default:\n      return Math.ceil(total / RECORDS_PER_PAGE)\n  }\n})\n\nexport const getPoolList = createSelector(getList, getData, (list, pools) => {\n  if (list === null) {\n    return null\n  }\n\n  return list.map(id => pools[id])\n})\n\nexport const getCurrentPublicProject = createSelector(getProjectId, gerProjectsData, (projectId, projects) => {\n  if (projectId && projects[projectId] && projects[projectId].isPublic) {\n    return projects[projectId]\n  }\n\n  return null\n})\n\nexport const getCurrentPool = createSelector(getProjectId, getData, (projectId, pools) => {\n  if (projectId && pools[projectId]) {\n    return pools[projectId]\n  }\n\n  return null\n})\n\nexport const isFetching = createSelector(\n  getLoading,\n  projectLoading =>\n    isLoadingType(projectLoading, LOAD_PROJECTS_REQUEST) ||\n    isLoadingType(projectLoading, LOAD_PUBLIC_PROJECT_REQUEST) ||\n    isLoadingType(projectLoading, LOAD_POOLS_REQUEST)\n)\n\nexport const getSearchGroup = createSelector(\n  (state: RootState) => getLocation(state),\n  location => {\n    const params = new URLSearchParams(location.search)\n    return routing.getValue(params.get('group')) as string | undefined\n  }\n)\n\nexport const getSearchEthAddress = createSelector(\n  (state: RootState) => getLocation(state),\n  location => {\n    const params = new URLSearchParams(location.search)\n    return routing.getValue(params.get('eth_address')) as string | undefined\n  }\n)\n\nexport const getPage = createSelector(\n  (state: RootState) => getLocation(state),\n  location => {\n    const params = new URLSearchParams(location.search)\n    return routing.getPage(params.get('page'), 1)\n  }\n)\n\nexport const getSortBy = createSelector(\n  (state: RootState) => getLocation(state),\n  location => {\n    const params = new URLSearchParams(location.search)\n    return routing.getSortBy(\n      params.get('sort_by'),\n      [SortBy.NEWEST, SortBy.LIKES, SortBy.NAME, SortBy.SIZE, SortBy.ITEMS, SortBy.SMART_ITEMS],\n      SortBy.NEWEST\n    )\n  }\n)\n\nexport const getSortOrder = createSelector(\n  (state: RootState) => getLocation(state),\n  location => {\n    const params = new URLSearchParams(location.search)\n    return routing.getSortOrder(params.get('sort_order'), 'desc')\n  }\n)\n"]},"metadata":{},"sourceType":"module"}