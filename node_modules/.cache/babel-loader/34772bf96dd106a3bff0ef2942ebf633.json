{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Contract } from 'web3x/contract';\nimport abi from './DCLControllerAbi';\nexport var DCLController = /*#__PURE__*/function (_Contract) {\n  _inherits(DCLController, _Contract);\n\n  function DCLController(eth, address, options) {\n    _classCallCheck(this, DCLController);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DCLController).call(this, eth, abi, address, options));\n  }\n\n  return DCLController;\n}(Contract);\nexport var DCLControllerAbi = abi;","map":{"version":3,"sources":["/opt/work/NZ_test/src/contracts/DCLController.ts"],"names":["Contract","abi","DCLController","eth","address","options","DCLControllerAbi"],"mappings":";;;;AAGA,SAASA,QAAT,QAAoF,gBAApF;AAEA,OAAOC,GAAP,MAAgB,oBAAhB;AAmDA,WAAaC,aAAb;AAAA;;AACE,yBAAYC,GAAZ,EAAsBC,OAAtB,EAAyCC,OAAzC,EAAoE;AAAA;;AAAA,sFAC5DF,GAD4D,EACvDF,GADuD,EAClDG,OADkD,EACzCC,OADyC;AAEnE;;AAHH;AAAA,EAAmCL,QAAnC;AAKA,OAAO,IAAMM,gBAAgB,GAAGL,GAAzB","sourcesContent":["import BN from 'bn.js'\nimport { Address } from 'web3x/address'\nimport { EventLog, TransactionReceipt } from 'web3x/formatters'\nimport { Contract, ContractOptions, TxCall, TxSend, EventSubscriptionFactory } from 'web3x/contract'\nimport { Eth } from 'web3x/eth'\nimport abi from './DCLControllerAbi'\nexport type MaxGasPriceChangedEvent = {\n  _oldMaxGasPrice: string\n  _newMaxGasPrice: string\n}\nexport type NameBoughtEvent = {\n  _caller: Address\n  _beneficiary: Address\n  _price: string\n  _name: string\n}\nexport type OwnershipTransferredEvent = {\n  previousOwner: Address\n  newOwner: Address\n}\nexport interface MaxGasPriceChangedEventLog extends EventLog<MaxGasPriceChangedEvent, 'MaxGasPriceChanged'> {}\nexport interface NameBoughtEventLog extends EventLog<NameBoughtEvent, 'NameBought'> {}\nexport interface OwnershipTransferredEventLog extends EventLog<OwnershipTransferredEvent, 'OwnershipTransferred'> {}\ninterface DCLControllerEvents {\n  MaxGasPriceChanged: EventSubscriptionFactory<MaxGasPriceChangedEventLog>\n  NameBought: EventSubscriptionFactory<NameBoughtEventLog>\n  OwnershipTransferred: EventSubscriptionFactory<OwnershipTransferredEventLog>\n}\ninterface DCLControllerEventLogs {\n  MaxGasPriceChanged: MaxGasPriceChangedEventLog\n  NameBought: NameBoughtEventLog\n  OwnershipTransferred: OwnershipTransferredEventLog\n}\ninterface DCLControllerTxEventLogs {\n  MaxGasPriceChanged: MaxGasPriceChangedEventLog[]\n  NameBought: NameBoughtEventLog[]\n  OwnershipTransferred: OwnershipTransferredEventLog[]\n}\nexport interface DCLControllerTransactionReceipt extends TransactionReceipt<DCLControllerTxEventLogs> {}\ninterface DCLControllerMethods {\n  PRICE(): TxCall<string>\n  acceptedToken(): TxCall<Address>\n  isOwner(): TxCall<boolean>\n  maxGasPrice(): TxCall<string>\n  owner(): TxCall<Address>\n  register(_name: string, _beneficiary: Address): TxSend<DCLControllerTransactionReceipt>\n  registrar(): TxCall<Address>\n  renounceOwnership(): TxSend<DCLControllerTransactionReceipt>\n  transferOwnership(newOwner: Address): TxSend<DCLControllerTransactionReceipt>\n  updateMaxGasPrice(_maxGasPrice: number | string | BN): TxSend<DCLControllerTransactionReceipt>\n}\nexport interface DCLControllerDefinition {\n  methods: DCLControllerMethods\n  events: DCLControllerEvents\n  eventLogs: DCLControllerEventLogs\n}\nexport class DCLController extends Contract<DCLControllerDefinition> {\n  constructor(eth: Eth, address?: Address, options?: ContractOptions) {\n    super(eth, abi, address, options)\n  }\n}\nexport const DCLControllerAbi = abi\n"]},"metadata":{},"sourceType":"module"}