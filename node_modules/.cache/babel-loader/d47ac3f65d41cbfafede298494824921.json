{"ast":null,"code":"import { SceneComponentConstants } from \"../sceneComponent\";\n/**\r\n * Defines the layer scene component responsible to manage any layers\r\n * in a given scene.\r\n */\n\nvar LayerSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function LayerSceneComponent(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_LAYER;\n    this.scene = scene;\n    this._engine = scene.getEngine();\n    scene.layers = new Array();\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  LayerSceneComponent.prototype.register = function () {\n    this.scene._beforeCameraDrawStage.registerStep(SceneComponentConstants.STEP_BEFORECAMERADRAW_LAYER, this, this._drawCameraBackground);\n\n    this.scene._afterCameraDrawStage.registerStep(SceneComponentConstants.STEP_AFTERCAMERADRAW_LAYER, this, this._drawCameraForeground);\n\n    this.scene._beforeRenderTargetDrawStage.registerStep(SceneComponentConstants.STEP_BEFORERENDERTARGETDRAW_LAYER, this, this._drawRenderTargetBackground);\n\n    this.scene._afterRenderTargetDrawStage.registerStep(SceneComponentConstants.STEP_AFTERRENDERTARGETDRAW_LAYER, this, this._drawRenderTargetForeground);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  LayerSceneComponent.prototype.rebuild = function () {\n    var layers = this.scene.layers;\n\n    for (var _i = 0, layers_1 = layers; _i < layers_1.length; _i++) {\n      var layer = layers_1[_i];\n\n      layer._rebuild();\n    }\n  };\n  /**\r\n   * Disposes the component and the associated ressources.\r\n   */\n\n\n  LayerSceneComponent.prototype.dispose = function () {\n    var layers = this.scene.layers;\n\n    while (layers.length) {\n      layers[0].dispose();\n    }\n  };\n\n  LayerSceneComponent.prototype._draw = function (predicate) {\n    var layers = this.scene.layers;\n\n    if (layers.length) {\n      this._engine.setDepthBuffer(false);\n\n      for (var _i = 0, layers_2 = layers; _i < layers_2.length; _i++) {\n        var layer = layers_2[_i];\n\n        if (predicate(layer)) {\n          layer.render();\n        }\n      }\n\n      this._engine.setDepthBuffer(true);\n    }\n  };\n\n  LayerSceneComponent.prototype._drawCameraPredicate = function (layer, isBackground, cameraLayerMask) {\n    return !layer.renderOnlyInRenderTargetTextures && layer.isBackground === isBackground && (layer.layerMask & cameraLayerMask) !== 0;\n  };\n\n  LayerSceneComponent.prototype._drawCameraBackground = function (camera) {\n    var _this = this;\n\n    this._draw(function (layer) {\n      return _this._drawCameraPredicate(layer, true, camera.layerMask);\n    });\n  };\n\n  LayerSceneComponent.prototype._drawCameraForeground = function (camera) {\n    var _this = this;\n\n    this._draw(function (layer) {\n      return _this._drawCameraPredicate(layer, false, camera.layerMask);\n    });\n  };\n\n  LayerSceneComponent.prototype._drawRenderTargetPredicate = function (layer, isBackground, cameraLayerMask, renderTargetTexture) {\n    return layer.renderTargetTextures.length > 0 && layer.isBackground === isBackground && layer.renderTargetTextures.indexOf(renderTargetTexture) > -1 && (layer.layerMask & cameraLayerMask) !== 0;\n  };\n\n  LayerSceneComponent.prototype._drawRenderTargetBackground = function (renderTarget) {\n    var _this = this;\n\n    this._draw(function (layer) {\n      return _this._drawRenderTargetPredicate(layer, true, _this.scene.activeCamera.layerMask, renderTarget);\n    });\n  };\n\n  LayerSceneComponent.prototype._drawRenderTargetForeground = function (renderTarget) {\n    var _this = this;\n\n    this._draw(function (layer) {\n      return _this._drawRenderTargetPredicate(layer, false, _this.scene.activeCamera.layerMask, renderTarget);\n    });\n  };\n  /**\r\n   * Adds all the elements from the container to the scene\r\n   * @param container the container holding the elements\r\n   */\n\n\n  LayerSceneComponent.prototype.addFromContainer = function (container) {\n    var _this = this;\n\n    if (!container.layers) {\n      return;\n    }\n\n    container.layers.forEach(function (layer) {\n      _this.scene.layers.push(layer);\n    });\n  };\n  /**\r\n   * Removes all the elements in the container from the scene\r\n   * @param container contains the elements to remove\r\n   * @param dispose if the removed element should be disposed (default: false)\r\n   */\n\n\n  LayerSceneComponent.prototype.removeFromContainer = function (container, dispose) {\n    var _this = this;\n\n    if (dispose === void 0) {\n      dispose = false;\n    }\n\n    if (!container.layers) {\n      return;\n    }\n\n    container.layers.forEach(function (layer) {\n      var index = _this.scene.layers.indexOf(layer);\n\n      if (index !== -1) {\n        _this.scene.layers.splice(index, 1);\n      }\n\n      if (dispose) {\n        layer.dispose();\n      }\n    });\n  };\n\n  return LayerSceneComponent;\n}();\n\nexport { LayerSceneComponent };","map":null,"metadata":{},"sourceType":"module"}