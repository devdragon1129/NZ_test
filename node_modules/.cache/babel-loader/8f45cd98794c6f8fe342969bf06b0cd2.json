{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { FreeCamera } from \"./freeCamera\";\nimport { Quaternion, Vector3 } from \"../Maths/math.vector\";\nimport { Node } from \"../node\";\nimport \"./Inputs/freeCameraDeviceOrientationInput\";\nimport { Axis } from '../Maths/math.axis';\nNode.AddNodeConstructor(\"DeviceOrientationCamera\", function (name, scene) {\n  return function () {\n    return new DeviceOrientationCamera(name, Vector3.Zero(), scene);\n  };\n}); // We're mainly based on the logic defined into the FreeCamera code\n\n/**\r\n * This is a camera specifically designed to react to device orientation events such as a modern mobile device\r\n * being tilted forward or back and left or right.\r\n */\n\nvar DeviceOrientationCamera =\n/** @class */\nfunction (_super) {\n  __extends(DeviceOrientationCamera, _super);\n  /**\r\n   * Creates a new device orientation camera\r\n   * @param name The name of the camera\r\n   * @param position The start position camera\r\n   * @param scene The scene the camera belongs to\r\n   */\n\n\n  function DeviceOrientationCamera(name, position, scene) {\n    var _this = _super.call(this, name, position, scene) || this;\n\n    _this._tmpDragQuaternion = new Quaternion();\n    _this._disablePointerInputWhenUsingDeviceOrientation = true;\n    _this._dragFactor = 0;\n    _this._quaternionCache = new Quaternion();\n\n    _this.inputs.addDeviceOrientation(); // When the orientation sensor fires it's first event, disable mouse input\n\n\n    if (_this.inputs._deviceOrientationInput) {\n      _this.inputs._deviceOrientationInput._onDeviceOrientationChangedObservable.addOnce(function () {\n        if (_this._disablePointerInputWhenUsingDeviceOrientation) {\n          if (_this.inputs._mouseInput) {\n            _this.inputs._mouseInput._allowCameraRotation = false;\n\n            _this.inputs._mouseInput.onPointerMovedObservable.add(function (e) {\n              if (_this._dragFactor != 0) {\n                if (!_this._initialQuaternion) {\n                  _this._initialQuaternion = new Quaternion();\n                } // Rotate the initial space around the y axis to allow users to \"turn around\" via touch/mouse\n\n\n                Quaternion.FromEulerAnglesToRef(0, e.offsetX * _this._dragFactor, 0, _this._tmpDragQuaternion);\n\n                _this._initialQuaternion.multiplyToRef(_this._tmpDragQuaternion, _this._initialQuaternion);\n              }\n            });\n          }\n        }\n      });\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(DeviceOrientationCamera.prototype, \"disablePointerInputWhenUsingDeviceOrientation\", {\n    /**\r\n     * Gets or sets a boolean indicating that pointer input must be disabled on first orientation sensor update (Default: true)\r\n     */\n    get: function get() {\n      return this._disablePointerInputWhenUsingDeviceOrientation;\n    },\n    set: function set(value) {\n      this._disablePointerInputWhenUsingDeviceOrientation = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Enabled turning on the y axis when the orientation sensor is active\r\n   * @param dragFactor the factor that controls the turn speed (default: 1/300)\r\n   */\n\n  DeviceOrientationCamera.prototype.enableHorizontalDragging = function (dragFactor) {\n    if (dragFactor === void 0) {\n      dragFactor = 1 / 300;\n    }\n\n    this._dragFactor = dragFactor;\n  };\n  /**\r\n   * Gets the current instance class name (\"DeviceOrientationCamera\").\r\n   * This helps avoiding instanceof at run time.\r\n   * @returns the class name\r\n   */\n\n\n  DeviceOrientationCamera.prototype.getClassName = function () {\n    return \"DeviceOrientationCamera\";\n  };\n  /**\r\n   * @hidden\r\n   * Checks and applies the current values of the inputs to the camera. (Internal use only)\r\n   */\n\n\n  DeviceOrientationCamera.prototype._checkInputs = function () {\n    _super.prototype._checkInputs.call(this);\n\n    this._quaternionCache.copyFrom(this.rotationQuaternion);\n\n    if (this._initialQuaternion) {\n      this._initialQuaternion.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\n    }\n  };\n  /**\r\n   * Reset the camera to its default orientation on the specified axis only.\r\n   * @param axis The axis to reset\r\n   */\n\n\n  DeviceOrientationCamera.prototype.resetToCurrentRotation = function (axis) {\n    var _this = this;\n\n    if (axis === void 0) {\n      axis = Axis.Y;\n    } //can only work if this camera has a rotation quaternion already.\n\n\n    if (!this.rotationQuaternion) {\n      return;\n    }\n\n    if (!this._initialQuaternion) {\n      this._initialQuaternion = new Quaternion();\n    }\n\n    this._initialQuaternion.copyFrom(this._quaternionCache || this.rotationQuaternion);\n\n    ['x', 'y', 'z'].forEach(function (axisName) {\n      if (!axis[axisName]) {\n        _this._initialQuaternion[axisName] = 0;\n      } else {\n        _this._initialQuaternion[axisName] *= -1;\n      }\n    });\n\n    this._initialQuaternion.normalize(); //force rotation update\n\n\n    this._initialQuaternion.multiplyToRef(this.rotationQuaternion, this.rotationQuaternion);\n  };\n\n  return DeviceOrientationCamera;\n}(FreeCamera);\n\nexport { DeviceOrientationCamera };","map":null,"metadata":{},"sourceType":"module"}