{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar _objectSpread = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"util\");\n\nvar address_1 = require(\"../address\");\n\nvar utils_1 = require(\"../utils\");\n\nfunction fromRawLogResponse(log) {\n  var id = log.id || null; // Generate a custom log id.\n\n  if (typeof log.blockHash === 'string' && typeof log.transactionHash === 'string' && typeof log.logIndex === 'string') {\n    var shaId = utils_1.sha3(log.blockHash.replace('0x', '') + log.transactionHash.replace('0x', '') + log.logIndex.replace('0x', ''));\n    id = 'log_' + shaId.replace('0x', '').substr(0, 8);\n  }\n\n  var blockNumber = log.blockNumber !== null ? utils_1.hexToNumber(log.blockNumber) : null;\n  var transactionIndex = log.transactionIndex !== null ? utils_1.hexToNumber(log.transactionIndex) : null;\n  var logIndex = log.logIndex !== null ? utils_1.hexToNumber(log.logIndex) : null;\n  var address = util_1.isString(log.address) ? address_1.Address.fromString(log.address) : log.address;\n  return _objectSpread({}, log, {\n    id: id,\n    blockNumber: blockNumber,\n    transactionIndex: transactionIndex,\n    logIndex: logIndex,\n    address: address\n  });\n}\n\nexports.fromRawLogResponse = fromRawLogResponse;\n\nfunction toRawLogResponse(log) {\n  var id = log.id,\n      blockNumber = log.blockNumber,\n      transactionIndex = log.transactionIndex,\n      logIndex = log.logIndex,\n      address = log.address;\n  return _objectSpread({}, log, {\n    id: id ? id : undefined,\n    blockNumber: util_1.isNumber(blockNumber) ? utils_1.numberToHex(blockNumber) : null,\n    transactionIndex: util_1.isNumber(transactionIndex) ? utils_1.numberToHex(transactionIndex) : null,\n    logIndex: util_1.isNumber(logIndex) ? utils_1.numberToHex(logIndex) : null,\n    address: address.toString().toLowerCase()\n  });\n}\n\nexports.toRawLogResponse = toRawLogResponse;","map":null,"metadata":{},"sourceType":"script"}