{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar util_1 = require(\"../../compile/util\");\n\nvar error = {\n  message: function message(_ref) {\n    var params = _ref.params;\n    return codegen_1.str(_templateObject || (_templateObject = _taggedTemplateLiteral([\"property name '\", \"' is invalid\"])), params.propertyName);\n  },\n  params: function params(_ref2) {\n    var _params = _ref2.params;\n    return codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{propertyName: \", \"}\"])), _params.propertyName);\n  }\n};\nvar def = {\n  keyword: \"propertyNames\",\n  type: \"object\",\n  schemaType: [\"object\", \"boolean\"],\n  error: error,\n  code: function code(cxt) {\n    var gen = cxt.gen,\n        schema = cxt.schema,\n        data = cxt.data,\n        it = cxt.it;\n    if (util_1.alwaysValidSchema(it, schema)) return;\n    var valid = gen.name(\"valid\");\n    gen.forIn(\"key\", data, function (key) {\n      cxt.setParams({\n        propertyName: key\n      });\n      cxt.subschema({\n        keyword: \"propertyNames\",\n        data: key,\n        dataTypes: [\"string\"],\n        propertyName: key,\n        compositeRule: true\n      }, valid);\n      gen.if(codegen_1.not(valid), function () {\n        cxt.error(true);\n        if (!it.allErrors) gen.break();\n      });\n    });\n    cxt.ok(valid);\n  }\n};\nexports.default = def;","map":null,"metadata":{},"sourceType":"script"}