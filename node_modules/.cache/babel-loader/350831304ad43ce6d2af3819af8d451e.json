{"ast":null,"code":"import { Logger } from \"../Misc/logger\";\nimport { Scene } from \"../scene\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Mesh } from \"../Meshes/mesh\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\nimport { PBRMaterial } from \"../Materials/PBR/pbrMaterial\";\nimport { HemisphericLight } from \"../Lights/hemisphericLight\";\nimport { EnvironmentHelper } from \"./environmentHelper\";\nimport { FreeCamera } from \"../Cameras/freeCamera\";\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera\";\nimport { VRExperienceHelper } from \"../Cameras/VR/vrExperienceHelper\";\nimport \"../Materials/Textures/Loaders/ddsTextureLoader\";\nimport \"../Materials/Textures/Loaders/envTextureLoader\";\nimport \"../Materials/Textures/Loaders/ktxTextureLoader\";\nimport \"../Meshes/Builders/boxBuilder\";\nimport { WebXRDefaultExperience } from '../XR/webXRDefaultExperience';\n/** @hidden */\n\nexport var _forceSceneHelpersToBundle = true;\n\nScene.prototype.createDefaultLight = function (replace) {\n  if (replace === void 0) {\n    replace = false;\n  } // Dispose existing light in replace mode.\n\n\n  if (replace) {\n    if (this.lights) {\n      for (var i = 0; i < this.lights.length; i++) {\n        this.lights[i].dispose();\n      }\n    }\n  } // Light\n\n\n  if (this.lights.length === 0) {\n    new HemisphericLight(\"default light\", Vector3.Up(), this);\n  }\n};\n\nScene.prototype.createDefaultCamera = function (createArcRotateCamera, replace, attachCameraControls) {\n  if (createArcRotateCamera === void 0) {\n    createArcRotateCamera = false;\n  }\n\n  if (replace === void 0) {\n    replace = false;\n  }\n\n  if (attachCameraControls === void 0) {\n    attachCameraControls = false;\n  } // Dispose existing camera in replace mode.\n\n\n  if (replace) {\n    if (this.activeCamera) {\n      this.activeCamera.dispose();\n      this.activeCamera = null;\n    }\n  } // Camera\n\n\n  if (!this.activeCamera) {\n    var worldExtends = this.getWorldExtends(function (mesh) {\n      return mesh.isVisible && mesh.isEnabled();\n    });\n    var worldSize = worldExtends.max.subtract(worldExtends.min);\n    var worldCenter = worldExtends.min.add(worldSize.scale(0.5));\n    var camera;\n    var radius = worldSize.length() * 1.5; // empty scene scenario!\n\n    if (!isFinite(radius)) {\n      radius = 1;\n      worldCenter.copyFromFloats(0, 0, 0);\n    }\n\n    if (createArcRotateCamera) {\n      var arcRotateCamera = new ArcRotateCamera(\"default camera\", -(Math.PI / 2), Math.PI / 2, radius, worldCenter, this);\n      arcRotateCamera.lowerRadiusLimit = radius * 0.01;\n      arcRotateCamera.wheelPrecision = 100 / radius;\n      camera = arcRotateCamera;\n    } else {\n      var freeCamera = new FreeCamera(\"default camera\", new Vector3(worldCenter.x, worldCenter.y, -radius), this);\n      freeCamera.setTarget(worldCenter);\n      camera = freeCamera;\n    }\n\n    camera.minZ = radius * 0.01;\n    camera.maxZ = radius * 1000;\n    camera.speed = radius * 0.2;\n    this.activeCamera = camera;\n    var canvas = this.getEngine().getInputElement();\n\n    if (attachCameraControls && canvas) {\n      camera.attachControl();\n    }\n  }\n};\n\nScene.prototype.createDefaultCameraOrLight = function (createArcRotateCamera, replace, attachCameraControls) {\n  if (createArcRotateCamera === void 0) {\n    createArcRotateCamera = false;\n  }\n\n  if (replace === void 0) {\n    replace = false;\n  }\n\n  if (attachCameraControls === void 0) {\n    attachCameraControls = false;\n  }\n\n  this.createDefaultLight(replace);\n  this.createDefaultCamera(createArcRotateCamera, replace, attachCameraControls);\n};\n\nScene.prototype.createDefaultSkybox = function (environmentTexture, pbr, scale, blur, setGlobalEnvTexture) {\n  if (pbr === void 0) {\n    pbr = false;\n  }\n\n  if (scale === void 0) {\n    scale = 1000;\n  }\n\n  if (blur === void 0) {\n    blur = 0;\n  }\n\n  if (setGlobalEnvTexture === void 0) {\n    setGlobalEnvTexture = true;\n  }\n\n  if (!environmentTexture) {\n    Logger.Warn(\"Can not create default skybox without environment texture.\");\n    return null;\n  }\n\n  if (setGlobalEnvTexture) {\n    if (environmentTexture) {\n      this.environmentTexture = environmentTexture;\n    }\n  } // Skybox\n\n\n  var hdrSkybox = Mesh.CreateBox(\"hdrSkyBox\", scale, this);\n\n  if (pbr) {\n    var hdrSkyboxMaterial = new PBRMaterial(\"skyBox\", this);\n    hdrSkyboxMaterial.backFaceCulling = false;\n    hdrSkyboxMaterial.reflectionTexture = environmentTexture.clone();\n\n    if (hdrSkyboxMaterial.reflectionTexture) {\n      hdrSkyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\n    }\n\n    hdrSkyboxMaterial.microSurface = 1.0 - blur;\n    hdrSkyboxMaterial.disableLighting = true;\n    hdrSkyboxMaterial.twoSidedLighting = true;\n    hdrSkybox.infiniteDistance = true;\n    hdrSkybox.material = hdrSkyboxMaterial;\n  } else {\n    var skyboxMaterial = new StandardMaterial(\"skyBox\", this);\n    skyboxMaterial.backFaceCulling = false;\n    skyboxMaterial.reflectionTexture = environmentTexture.clone();\n\n    if (skyboxMaterial.reflectionTexture) {\n      skyboxMaterial.reflectionTexture.coordinatesMode = Texture.SKYBOX_MODE;\n    }\n\n    skyboxMaterial.disableLighting = true;\n    hdrSkybox.infiniteDistance = true;\n    hdrSkybox.material = skyboxMaterial;\n  }\n\n  hdrSkybox.isPickable = false;\n  return hdrSkybox;\n};\n\nScene.prototype.createDefaultEnvironment = function (options) {\n  if (EnvironmentHelper) {\n    return new EnvironmentHelper(options, this);\n  }\n\n  return null;\n};\n\nScene.prototype.createDefaultVRExperience = function (webVROptions) {\n  if (webVROptions === void 0) {\n    webVROptions = {};\n  }\n\n  return new VRExperienceHelper(this, webVROptions);\n};\n\nScene.prototype.createDefaultXRExperienceAsync = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return WebXRDefaultExperience.CreateAsync(this, options).then(function (helper) {\n    return helper;\n  });\n};","map":null,"metadata":{},"sourceType":"module"}