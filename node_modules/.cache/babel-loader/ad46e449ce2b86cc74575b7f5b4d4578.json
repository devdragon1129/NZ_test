{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getPublishItemsSignature);\n\nimport { Network } from '@dcl/schemas';\nimport { call } from 'redux-saga/effects';\nimport { utils } from 'ethers';\nimport { getChainIdByNetwork, getConnectedProvider } from 'decentraland-dapps/dist/lib/eth';\nimport { ContractName, getContract } from 'decentraland-transactions';\nimport { extractThirdPartyId } from 'lib/urn';\nexport function isUserManagerOfThirdParty(address, thirdParty) {\n  return thirdParty.managers.map(function (manager) {\n    return manager.toLowerCase();\n  }).includes(address.toLowerCase());\n}\nexport var getThirdPartyForCollection = function getThirdPartyForCollection(thirdParties, collection) {\n  return thirdParties[extractThirdPartyId(collection.urn)];\n};\nexport var getThirdPartyForItem = function getThirdPartyForItem(thirdParties, item) {\n  return item.urn ? thirdParties[extractThirdPartyId(item.urn)] : undefined;\n};\nexport function getPublishItemsSignature(thirdPartyId, qty) {\n  var maticChainId, provider, thirdPartyContract, salt, domain, dataToSign, domainTypes, msgString, accounts, from, signature;\n  return _regeneratorRuntime.wrap(function getPublishItemsSignature$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(getChainIdByNetwork, Network.MATIC);\n\n        case 2:\n          maticChainId = _context.sent;\n          _context.next = 5;\n          return call(getConnectedProvider);\n\n        case 5:\n          provider = _context.sent;\n\n          if (provider) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new Error('Could not get a valid connected Wallet');\n\n        case 8:\n          _context.next = 10;\n          return call(getContract, ContractName.ThirdPartyRegistry, maticChainId);\n\n        case 10:\n          thirdPartyContract = _context.sent;\n          salt = utils.hexlify(utils.randomBytes(32));\n          domain = {\n            name: thirdPartyContract.name,\n            verifyingContract: thirdPartyContract.address,\n            version: thirdPartyContract.version,\n            salt: utils.hexZeroPad(utils.hexlify(maticChainId), 32)\n          };\n          dataToSign = {\n            thirdPartyId: thirdPartyId,\n            qty: qty,\n            salt: salt\n          };\n          domainTypes = {\n            EIP712Domain: [{\n              name: 'name',\n              type: 'string'\n            }, {\n              name: 'version',\n              type: 'string'\n            }, {\n              name: 'verifyingContract',\n              type: 'address'\n            }, {\n              name: 'salt',\n              type: 'bytes32'\n            }],\n            ConsumeSlots: [{\n              name: 'thirdPartyId',\n              type: 'string'\n            }, {\n              name: 'qty',\n              type: 'uint256'\n            }, {\n              name: 'salt',\n              type: 'bytes32'\n            }]\n          }; // TODO: expose this as a function in decentraland-transactions\n\n          msgString = JSON.stringify({\n            domain: domain,\n            message: dataToSign,\n            types: domainTypes,\n            primaryType: 'ConsumeSlots'\n          });\n          _context.next = 18;\n          return call([provider, 'request'], {\n            method: 'eth_requestAccounts',\n            params: [],\n            jsonrpc: '2.0'\n          });\n\n        case 18:\n          accounts = _context.sent;\n          from = accounts[0];\n          _context.next = 22;\n          return call([provider, 'request'], {\n            method: 'eth_signTypedData_v4',\n            params: [from, msgString],\n            jsonrpc: '2.0'\n          });\n\n        case 22:\n          signature = _context.sent;\n          return _context.abrupt(\"return\", {\n            signature: signature,\n            salt: salt\n          });\n\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/thirdParty/utils.ts"],"names":["getPublishItemsSignature","Network","call","utils","getChainIdByNetwork","getConnectedProvider","ContractName","getContract","extractThirdPartyId","isUserManagerOfThirdParty","address","thirdParty","managers","map","manager","toLowerCase","includes","getThirdPartyForCollection","thirdParties","collection","urn","getThirdPartyForItem","item","undefined","thirdPartyId","qty","MATIC","maticChainId","provider","Error","ThirdPartyRegistry","thirdPartyContract","salt","hexlify","randomBytes","domain","name","verifyingContract","version","hexZeroPad","dataToSign","domainTypes","EIP712Domain","type","ConsumeSlots","msgString","JSON","stringify","message","types","primaryType","method","params","jsonrpc","accounts","from","signature"],"mappings":"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","sourcesContent":["import { ChainId, Network } from '@dcl/schemas'\nimport { call } from 'redux-saga/effects'\nimport { utils } from 'ethers'\nimport { getChainIdByNetwork, getConnectedProvider } from 'decentraland-dapps/dist/lib/eth'\nimport { Provider } from 'decentraland-dapps/dist/modules/wallet/types'\nimport { ContractData, ContractName, getContract } from 'decentraland-transactions'\nimport { extractThirdPartyId } from 'lib/urn'\nimport { Collection } from 'modules/collection/types'\nimport { Item } from 'modules/item/types'\nimport { ThirdParty } from './types'\n\nexport function isUserManagerOfThirdParty(address: string, thirdParty: ThirdParty): boolean {\n  return thirdParty.managers.map(manager => manager.toLowerCase()).includes(address.toLowerCase())\n}\n\nexport const getThirdPartyForCollection = (thirdParties: Record<string, ThirdParty>, collection: Collection): ThirdParty | undefined =>\n  thirdParties[extractThirdPartyId(collection.urn)]\n\nexport const getThirdPartyForItem = (thirdParties: Record<string, ThirdParty>, item: Item): ThirdParty | undefined =>\n  item.urn ? thirdParties[extractThirdPartyId(item.urn)] : undefined\n\nexport function* getPublishItemsSignature(thirdPartyId: string, qty: number) {\n  const maticChainId: ChainId = yield call(getChainIdByNetwork, Network.MATIC)\n  const provider: Provider | null = yield call(getConnectedProvider)\n  if (!provider) {\n    throw new Error('Could not get a valid connected Wallet')\n  }\n  const thirdPartyContract: ContractData = yield call(getContract, ContractName.ThirdPartyRegistry, maticChainId)\n  const salt = utils.hexlify(utils.randomBytes(32))\n  const domain = {\n    name: thirdPartyContract.name,\n    verifyingContract: thirdPartyContract.address,\n    version: thirdPartyContract.version,\n    salt: utils.hexZeroPad(utils.hexlify(maticChainId), 32)\n  }\n  const dataToSign = {\n    thirdPartyId,\n    qty,\n    salt\n  }\n  const domainTypes = {\n    EIP712Domain: [\n      { name: 'name', type: 'string' },\n      { name: 'version', type: 'string' },\n      { name: 'verifyingContract', type: 'address' },\n      { name: 'salt', type: 'bytes32' }\n    ],\n    ConsumeSlots: [\n      { name: 'thirdPartyId', type: 'string' },\n      { name: 'qty', type: 'uint256' },\n      { name: 'salt', type: 'bytes32' }\n    ]\n  }\n\n  // TODO: expose this as a function in decentraland-transactions\n  const msgString = JSON.stringify({ domain, message: dataToSign, types: domainTypes, primaryType: 'ConsumeSlots' })\n\n  const accounts: string[] = yield call([provider, 'request'], { method: 'eth_requestAccounts', params: [], jsonrpc: '2.0' })\n  const from = accounts[0]\n\n  const signature: string = yield call([provider, 'request'], {\n    method: 'eth_signTypedData_v4',\n    params: [from, msgString],\n    jsonrpc: '2.0'\n  })\n\n  return { signature, salt }\n}\n"]},"metadata":{},"sourceType":"module"}