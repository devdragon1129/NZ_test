{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/SceneViewPage/SceneViewPage.tsx\";\nimport * as React from 'react';\nimport { Loader, Page, Responsive, Container } from 'decentraland-ui';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport Chip from 'components/Chip';\nimport Footer from 'components/Footer';\nimport Icon from 'components/Icon';\nimport Navbar from 'components/Navbar';\nimport NotFoundPage from 'components/NotFoundPage';\nimport ViewPort from 'components/ViewPort';\nimport Back from 'components/Back';\nimport { PreviewType } from 'modules/editor/types';\nimport './SceneViewPage.css';\n\nvar SceneViewPage = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(SceneViewPage, _React$PureComponent);\n\n  function SceneViewPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SceneViewPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SceneViewPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handlePreview = function () {\n      _this.props.onPreview();\n    };\n\n    _this.handleLike = function () {\n      var _this$props = _this.props,\n          currentPool = _this$props.currentPool,\n          isLoggedIn = _this$props.isLoggedIn,\n          onOpenModal = _this$props.onOpenModal;\n\n      if (currentPool) {\n        if (isLoggedIn) {\n          _this.props.onLikePool(currentPool.id, !currentPool.like);\n        } else {\n          onOpenModal('LikeModal', {});\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(SceneViewPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props2 = this.props,\n          match = _this$props2.match,\n          onLoadProject = _this$props2.onLoadProject;\n\n      if (match.params.projectId) {\n        onLoadProject(match.params.projectId, this.getType());\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.onCloseEditor();\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return this.props.match && this.props.match.params && this.props.match.params.type || PreviewType.PUBLIC;\n    }\n  }, {\n    key: \"getCurrentProject\",\n    value: function getCurrentProject() {\n      var _this$props3 = this.props,\n          currentProject = _this$props3.currentProject,\n          currentPool = _this$props3.currentPool;\n\n      switch (this.getType()) {\n        case 'pool':\n          return currentPool;\n\n        default:\n          return currentProject;\n      }\n    }\n  }, {\n    key: \"getCurrentPool\",\n    value: function getCurrentPool() {\n      var currentPool = this.props.currentPool;\n\n      switch (this.getType()) {\n        case 'pool':\n          return currentPool;\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"getParcelCount\",\n    value: function getParcelCount() {\n      var currentProject = this.getCurrentProject();\n\n      if (!currentProject) {\n        return 0;\n      }\n\n      return currentProject.layout.cols * currentProject.layout.rows;\n    }\n  }, {\n    key: \"getObjectCount\",\n    value: function getObjectCount() {\n      var currentScene = this.props.currentScene;\n\n      if (!currentScene) {\n        return 0;\n      }\n\n      var parcelCount = this.getParcelCount();\n\n      if (parcelCount === 0) {\n        return 0;\n      }\n\n      var entitiesCount = Object.keys(currentScene.entities).length;\n\n      if (entitiesCount < parcelCount) {\n        return 0;\n      }\n\n      return entitiesCount - parcelCount;\n    }\n  }, {\n    key: \"renderNotFount\",\n    value: function renderNotFount() {\n      return /*#__PURE__*/React.createElement(NotFoundPage, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 12\n        }\n      });\n    }\n  }, {\n    key: \"renderLoading\",\n    value: function renderLoading() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n        isFullscreen: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Page, {\n        isFullscreen: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Loader, {\n        active: true,\n        size: \"huge\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(Footer, {\n        isFullscreen: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props4 = this.props,\n          isFetching = _this$props4.isFetching,\n          isPreviewing = _this$props4.isPreviewing,\n          isReady = _this$props4.isReady;\n\n      if (isFetching) {\n        return this.renderLoading();\n      }\n\n      var currentProject = this.getCurrentProject();\n\n      if (!currentProject) {\n        return this.renderNotFount();\n      }\n\n      var currentPool = this.getCurrentPool();\n      var _this$props5 = this.props,\n          author = _this$props5.currentAuthor,\n          onBack = _this$props5.onBack;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, !isPreviewing && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n        isFullscreen: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Container, {\n        className: \"back-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Back, {\n        absolute: true,\n        onClick: onBack,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: 'SceneViewPage' + (isPreviewing ? ' preview' : ' mini'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"thumbnail\",\n        style: {\n          backgroundImage: \"url(\\\"\".concat(currentProject.thumbnail, \"\\\")\")\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Responsive, {\n        minWidth: 1025,\n        as: React.Fragment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(ViewPort, {\n        key: currentProject.id,\n        isReadOnly: true,\n        type: this.getType(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"scene-action-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }\n      }, currentPool && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"scene-action\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Chip, {\n        text: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Icon, {\n          name: currentPool.like ? 'heart-full' : 'heart',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 23\n          }\n        }), currentPool.likes > 0 && /*#__PURE__*/React.createElement(\"span\", {\n          className: \"LikeCount\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 49\n          }\n        }, currentPool.likes)),\n        type: \"circle\",\n        onClick: this.handleLike,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Responsive, {\n        minWidth: 1025,\n        as: React.Fragment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"scene-action\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Chip, {\n        icon: \"view\",\n        type: \"circle\",\n        isActive: isPreviewing,\n        isDisabled: !isReady,\n        onClick: this.handlePreview,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }\n      })))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"detail\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 15\n        }\n      }, currentProject.title)), author && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"author\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 15\n        }\n      }, t('public_page.made_by'), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"author-name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }\n      }, \" \", author.avatars.length > 0 ? author.avatars[0].name : t('user_menu.guest')), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"avatar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        width: \"24\",\n        height: \"24\",\n        src: author.avatars.length > 0 ? author.avatars[0].avatar.snapshots.face256 : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 19\n        }\n      }))), currentProject.description && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 17\n        }\n      }, currentProject.description)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"component-list\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"component\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"scene-parcel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }\n      }), \" \", t('public_page.parcel_count', {\n        parcels: this.getParcelCount()\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"component\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        name: \"scene-object\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 17\n        }\n      }), \" \", t('public_page.item_count', {\n        items: this.getObjectCount()\n      }))))), !isPreviewing && /*#__PURE__*/React.createElement(Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 27\n        }\n      }));\n    }\n  }]);\n\n  return SceneViewPage;\n}(React.PureComponent);\n\nexport { SceneViewPage as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/SceneViewPage/SceneViewPage.tsx"],"names":["React","Loader","Page","Responsive","Container","t","Chip","Footer","Icon","Navbar","NotFoundPage","ViewPort","Back","PreviewType","SceneViewPage","handlePreview","props","onPreview","handleLike","currentPool","isLoggedIn","onOpenModal","onLikePool","id","like","match","onLoadProject","params","projectId","getType","onCloseEditor","type","PUBLIC","currentProject","getCurrentProject","layout","cols","rows","currentScene","parcelCount","getParcelCount","entitiesCount","Object","keys","entities","length","isFetching","isPreviewing","isReady","renderLoading","renderNotFount","getCurrentPool","author","currentAuthor","onBack","backgroundImage","thumbnail","Fragment","likes","flex","title","avatars","name","avatar","snapshots","face256","description","parcels","items","getObjectCount","PureComponent"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,UAAvB,EAAmCC,SAAnC,QAAoD,iBAApD;AACA,SAASC,CAAT,QAAkB,mDAAlB;AAEA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAGA,OAAO,qBAAP;;IAEqBC,a;;;;;;;;;;;;;;;;UAYnBC,a,GAAgB,YAAM;AACpB,YAAKC,KAAL,CAAWC,SAAX;AACD,K;;UAEDC,U,GAAa,YAAM;AAAA,wBACgC,MAAKF,KADrC;AAAA,UACTG,WADS,eACTA,WADS;AAAA,UACIC,UADJ,eACIA,UADJ;AAAA,UACgBC,WADhB,eACgBA,WADhB;;AAGjB,UAAIF,WAAJ,EAAiB;AACf,YAAIC,UAAJ,EAAgB;AACd,gBAAKJ,KAAL,CAAWM,UAAX,CAAsBH,WAAW,CAACI,EAAlC,EAAsC,CAACJ,WAAW,CAACK,IAAnD;AACD,SAFD,MAEO;AACLH,UAAAA,WAAW,CAAC,WAAD,EAAc,EAAd,CAAX;AACD;AACF;AACF,K;;;;;;;wCAzBmB;AAAA,yBACe,KAAKL,KADpB;AAAA,UACVS,KADU,gBACVA,KADU;AAAA,UACHC,aADG,gBACHA,aADG;;AAElB,UAAID,KAAK,CAACE,MAAN,CAAaC,SAAjB,EAA4B;AAC1BF,QAAAA,aAAa,CAACD,KAAK,CAACE,MAAN,CAAaC,SAAd,EAAyB,KAAKC,OAAL,EAAzB,CAAb;AACD;AACF;;;2CAEsB;AACrB,WAAKb,KAAL,CAAWc,aAAX;AACD;;;8BAkBS;AACR,aAAQ,KAAKd,KAAL,CAAWS,KAAX,IAAoB,KAAKT,KAAL,CAAWS,KAAX,CAAiBE,MAArC,IAA+C,KAAKX,KAAL,CAAWS,KAAX,CAAiBE,MAAjB,CAAwBI,IAAxE,IAAiFlB,WAAW,CAACmB,MAApG;AACD;;;wCAEmB;AAAA,yBACsB,KAAKhB,KAD3B;AAAA,UACViB,cADU,gBACVA,cADU;AAAA,UACMd,WADN,gBACMA,WADN;;AAGlB,cAAQ,KAAKU,OAAL,EAAR;AACE,aAAK,MAAL;AACE,iBAAOV,WAAP;;AACF;AACE,iBAAOc,cAAP;AAJJ;AAMD;;;qCAEgB;AAAA,UACPd,WADO,GACS,KAAKH,KADd,CACPG,WADO;;AAGf,cAAQ,KAAKU,OAAL,EAAR;AACE,aAAK,MAAL;AACE,iBAAOV,WAAP;;AACF;AACE,iBAAO,IAAP;AAJJ;AAMD;;;qCAEgB;AACf,UAAMc,cAAc,GAAG,KAAKC,iBAAL,EAAvB;;AACA,UAAI,CAACD,cAAL,EAAqB;AACnB,eAAO,CAAP;AACD;;AAED,aAAOA,cAAc,CAACE,MAAf,CAAsBC,IAAtB,GAA6BH,cAAc,CAACE,MAAf,CAAsBE,IAA1D;AACD;;;qCAEgB;AAAA,UACPC,YADO,GACU,KAAKtB,KADf,CACPsB,YADO;;AAEf,UAAI,CAACA,YAAL,EAAmB;AACjB,eAAO,CAAP;AACD;;AAED,UAAMC,WAAW,GAAG,KAAKC,cAAL,EAApB;;AACA,UAAID,WAAW,KAAK,CAApB,EAAuB;AACrB,eAAO,CAAP;AACD;;AAED,UAAME,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAYL,YAAY,CAACM,QAAzB,EAAmCC,MAAzD;;AACA,UAAIJ,aAAa,GAAGF,WAApB,EAAiC;AAC/B,eAAO,CAAP;AACD;;AAED,aAAOE,aAAa,GAAGF,WAAvB;AACD;;;qCAEgB;AACf,0BAAO,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;oCAEe;AACd,0BACE,uDACE,oBAAC,MAAD;AAAQ,QAAA,YAAY,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE,oBAAC,IAAD;AAAM,QAAA,YAAY,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,MAAD;AAAQ,QAAA,MAAM,MAAd;AAAe,QAAA,IAAI,EAAC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,eAKE,oBAAC,MAAD;AAAQ,QAAA,YAAY,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF;AASD;;;6BAEQ;AAAA,yBACuC,KAAKvB,KAD5C;AAAA,UACC8B,UADD,gBACCA,UADD;AAAA,UACaC,YADb,gBACaA,YADb;AAAA,UAC2BC,OAD3B,gBAC2BA,OAD3B;;AAGP,UAAIF,UAAJ,EAAgB;AACd,eAAO,KAAKG,aAAL,EAAP;AACD;;AAED,UAAMhB,cAAc,GAAG,KAAKC,iBAAL,EAAvB;;AACA,UAAI,CAACD,cAAL,EAAqB;AACnB,eAAO,KAAKiB,cAAL,EAAP;AACD;;AAED,UAAM/B,WAAW,GAAG,KAAKgC,cAAL,EAApB;AAZO,yBAamC,KAAKnC,KAbxC;AAAA,UAagBoC,MAbhB,gBAaCC,aAbD;AAAA,UAawBC,MAbxB,gBAawBA,MAbxB;AAeP,0BACE,0CACG,CAACP,YAAD,iBACC,uDACE,oBAAC,MAAD;AAAQ,QAAA,YAAY,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE,oBAAC,SAAD;AAAW,QAAA,SAAS,EAAC,gBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,IAAD;AAAM,QAAA,QAAQ,MAAd;AAAe,QAAA,OAAO,EAAEO,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,CAFJ,eAUE;AAAK,QAAA,SAAS,EAAE,mBAAmBP,YAAY,GAAG,UAAH,GAAgB,OAA/C,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,KAAK,EAAE;AAAEQ,UAAAA,eAAe,kBAAUtB,cAAc,CAACuB,SAAzB;AAAjB,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,UAAD;AAAY,QAAA,QAAQ,EAAE,IAAtB;AAA4B,QAAA,EAAE,EAAExD,KAAK,CAACyD,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAExB,cAAc,CAACV,EAA9B;AAAkC,QAAA,UAAU,EAAE,IAA9C;AAAoD,QAAA,IAAI,EAAE,KAAKM,OAAL,EAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF,eAME;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGV,WAAW,iBACV;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,IAAD;AACE,QAAA,IAAI,eACF,uDACE,oBAAC,IAAD;AAAM,UAAA,IAAI,EAAEA,WAAW,CAACK,IAAZ,GAAmB,YAAnB,GAAkC,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEGL,WAAW,CAACuC,KAAZ,GAAoB,CAApB,iBAAyB;AAAM,UAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA6BvC,WAAW,CAACuC,KAAzC,CAF5B,CAFJ;AAOE,QAAA,IAAI,EAAC,QAPP;AAQE,QAAA,OAAO,EAAE,KAAKxC,UARhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFJ,eAeE;AAAK,QAAA,KAAK,EAAE;AAAEyC,UAAAA,IAAI,EAAE;AAAR,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAfF,eAgBE,oBAAC,UAAD;AAAY,QAAA,QAAQ,EAAE,IAAtB;AAA4B,QAAA,EAAE,EAAE3D,KAAK,CAACyD,QAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,IAAI,EAAC,QAAvB;AAAgC,QAAA,QAAQ,EAAEV,YAA1C;AAAwD,QAAA,UAAU,EAAE,CAACC,OAArE;AAA8E,QAAA,OAAO,EAAE,KAAKjC,aAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CAhBF,CANF,eA4BE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKkB,cAAc,CAAC2B,KAApB,CADF,CADF,EAIGR,MAAM,iBACL;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG/C,CAAC,CAAC,qBAAD,CADJ,eAEE;AAAM,QAAA,SAAS,EAAC,aAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAgC+C,MAAM,CAACS,OAAP,CAAehB,MAAf,GAAwB,CAAxB,GAA4BO,MAAM,CAACS,OAAP,CAAe,CAAf,EAAkBC,IAA9C,GAAqDzD,CAAC,CAAC,iBAAD,CAAtF,CAFF,eAGE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,KAAK,EAAC,IAAX;AAAgB,QAAA,MAAM,EAAC,IAAvB;AAA4B,QAAA,GAAG,EAAE+C,MAAM,CAACS,OAAP,CAAehB,MAAf,GAAwB,CAAxB,GAA4BO,MAAM,CAACS,OAAP,CAAe,CAAf,EAAkBE,MAAlB,CAAyBC,SAAzB,CAAmCC,OAA/D,GAAyE,EAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAHF,CALJ,EAaGhC,cAAc,CAACiC,WAAf,iBACC;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIjC,cAAc,CAACiC,WAAnB,CADF,CAdJ,eAkBE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,OACgC7D,CAAC,CAAC,0BAAD,EAA6B;AAAE8D,QAAAA,OAAO,EAAE,KAAK3B,cAAL;AAAX,OAA7B,CADjC,CADF,eAIE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAC,cAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,OACgCnC,CAAC,CAAC,wBAAD,EAA2B;AAAE+D,QAAAA,KAAK,EAAE,KAAKC,cAAL;AAAT,OAA3B,CADjC,CAJF,CAlBF,CA5BF,CAVF,EAkEG,CAACtB,YAAD,iBAAiB,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAlEpB,CADF;AAsED;;;;EAvLwC/C,KAAK,CAACsE,a;;SAA5BxD,a","sourcesContent":["import * as React from 'react'\nimport { Loader, Page, Responsive, Container } from 'decentraland-ui'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\n\nimport Chip from 'components/Chip'\nimport Footer from 'components/Footer'\nimport Icon from 'components/Icon'\nimport Navbar from 'components/Navbar'\nimport NotFoundPage from 'components/NotFoundPage'\nimport ViewPort from 'components/ViewPort'\nimport Back from 'components/Back'\nimport { PreviewType } from 'modules/editor/types'\nimport { Props, State } from './SceneViewPage.types'\n\nimport './SceneViewPage.css'\n\nexport default class SceneViewPage extends React.PureComponent<Props, State> {\n  componentDidMount() {\n    const { match, onLoadProject } = this.props\n    if (match.params.projectId) {\n      onLoadProject(match.params.projectId, this.getType())\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.onCloseEditor()\n  }\n\n  handlePreview = () => {\n    this.props.onPreview()\n  }\n\n  handleLike = () => {\n    const { currentPool, isLoggedIn, onOpenModal } = this.props\n\n    if (currentPool) {\n      if (isLoggedIn) {\n        this.props.onLikePool(currentPool.id, !currentPool.like)\n      } else {\n        onOpenModal('LikeModal', {})\n      }\n    }\n  }\n\n  getType() {\n    return (this.props.match && this.props.match.params && this.props.match.params.type) || PreviewType.PUBLIC\n  }\n\n  getCurrentProject() {\n    const { currentProject, currentPool } = this.props\n\n    switch (this.getType()) {\n      case 'pool':\n        return currentPool\n      default:\n        return currentProject\n    }\n  }\n\n  getCurrentPool() {\n    const { currentPool } = this.props\n\n    switch (this.getType()) {\n      case 'pool':\n        return currentPool\n      default:\n        return null\n    }\n  }\n\n  getParcelCount() {\n    const currentProject = this.getCurrentProject()\n    if (!currentProject) {\n      return 0\n    }\n\n    return currentProject.layout.cols * currentProject.layout.rows\n  }\n\n  getObjectCount() {\n    const { currentScene } = this.props\n    if (!currentScene) {\n      return 0\n    }\n\n    const parcelCount = this.getParcelCount()\n    if (parcelCount === 0) {\n      return 0\n    }\n\n    const entitiesCount = Object.keys(currentScene.entities).length\n    if (entitiesCount < parcelCount) {\n      return 0\n    }\n\n    return entitiesCount - parcelCount\n  }\n\n  renderNotFount() {\n    return <NotFoundPage />\n  }\n\n  renderLoading() {\n    return (\n      <>\n        <Navbar isFullscreen />\n        <Page isFullscreen>\n          <Loader active size=\"huge\" />\n        </Page>\n        <Footer isFullscreen />\n      </>\n    )\n  }\n\n  render() {\n    const { isFetching, isPreviewing, isReady } = this.props\n\n    if (isFetching) {\n      return this.renderLoading()\n    }\n\n    const currentProject = this.getCurrentProject()\n    if (!currentProject) {\n      return this.renderNotFount()\n    }\n\n    const currentPool = this.getCurrentPool()\n    const { currentAuthor: author, onBack } = this.props\n\n    return (\n      <>\n        {!isPreviewing && (\n          <>\n            <Navbar isFullscreen />\n            <Container className=\"back-container\">\n              <Back absolute onClick={onBack}></Back>\n            </Container>\n          </>\n        )}\n\n        <div className={'SceneViewPage' + (isPreviewing ? ' preview' : ' mini')}>\n          <div className=\"thumbnail\" style={{ backgroundImage: `url(\"${currentProject.thumbnail}\")` }}>\n            <Responsive minWidth={1025} as={React.Fragment}>\n              <ViewPort key={currentProject.id} isReadOnly={true} type={this.getType()} />\n            </Responsive>\n          </div>\n          <div className=\"scene-action-list\">\n            {currentPool && (\n              <div className=\"scene-action\">\n                <Chip\n                  text={\n                    <>\n                      <Icon name={currentPool.like ? 'heart-full' : 'heart'} />\n                      {currentPool.likes > 0 && <span className=\"LikeCount\">{currentPool.likes}</span>}\n                    </>\n                  }\n                  type=\"circle\"\n                  onClick={this.handleLike}\n                />\n              </div>\n            )}\n            <div style={{ flex: 1 }} />\n            <Responsive minWidth={1025} as={React.Fragment}>\n              <div className=\"scene-action\">\n                <Chip icon=\"view\" type=\"circle\" isActive={isPreviewing} isDisabled={!isReady} onClick={this.handlePreview} />\n              </div>\n            </Responsive>\n          </div>\n          <div className=\"detail\">\n            <div className=\"title\">\n              <h1>{currentProject.title}</h1>\n            </div>\n            {author && (\n              <div className=\"author\">\n                {t('public_page.made_by')}\n                <span className=\"author-name\"> {author.avatars.length > 0 ? author.avatars[0].name : t('user_menu.guest')}</span>\n                <div className=\"avatar\">\n                  <img width=\"24\" height=\"24\" src={author.avatars.length > 0 ? author.avatars[0].avatar.snapshots.face256 : ''} />\n                </div>\n              </div>\n            )}\n            {currentProject.description && (\n              <div className=\"description\">\n                <p>{currentProject.description}</p>\n              </div>\n            )}\n            <div className=\"component-list\">\n              <div className=\"component\">\n                <Icon name=\"scene-parcel\" /> {t('public_page.parcel_count', { parcels: this.getParcelCount() })}\n              </div>\n              <div className=\"component\">\n                <Icon name=\"scene-object\" /> {t('public_page.item_count', { items: this.getObjectCount() })}\n              </div>\n            </div>\n          </div>\n        </div>\n        {!isPreviewing && <Footer />}\n      </>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}