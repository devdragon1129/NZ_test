{"ast":null,"code":"import { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { getAddress, getChainId, getLoading, isConnected } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { isWalletCommitteeMember } from 'modules/committee/selectors';\nimport { getSelectedCollectionId, isReviewing } from 'modules/location/selectors';\nimport { setCollectionCurationAssigneeRequest } from 'modules/curations/collectionCuration/actions';\nimport { FETCH_COLLECTION_REQUEST, initiateApprovalFlow, initiateTPApprovalFlow } from 'modules/collection/actions';\nimport TopPanel from './TopPanel';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getCollection } from 'modules/collection/selectors';\nimport { FETCH_ITEM_CURATIONS_REQUEST } from 'modules/curations/itemCuration/actions';\nimport { FETCH_COLLECTION_ITEMS_REQUEST } from 'modules/item/actions';\nimport { getCollectionItems, getLoading as getLoadingItems, getPaginationData } from 'modules/item/selectors';\nimport { getCuration } from 'modules/curations/collectionCuration/selectors';\nimport { getItemCurations, getLoading as getLoadingItemCurations } from 'modules/curations/itemCuration/selectors';\n\nvar mapState = function mapState(state) {\n  var selectedCollectionId = getSelectedCollectionId(state);\n  var collection = selectedCollectionId ? getCollection(state, selectedCollectionId) : null;\n  var items = collection ? getCollectionItems(state, collection.id) : [];\n  var itemCurations = collection ? getItemCurations(state, collection.id) : [];\n  var curation = selectedCollectionId ? getCuration(state, selectedCollectionId) : null;\n  var itemsPaginationData = selectedCollectionId ? getPaginationData(state, selectedCollectionId) : undefined;\n  return {\n    address: getAddress(state),\n    items: items,\n    totalItems: (itemsPaginationData === null || itemsPaginationData === void 0 ? void 0 : itemsPaginationData.total) || null,\n    collection: collection,\n    itemCurations: itemCurations,\n    curation: curation,\n    chainId: getChainId(state),\n    isConnected: isConnected(state),\n    isReviewing: isReviewing(state),\n    isCommitteeMember: isWalletCommitteeMember(state),\n    selectedCollectionId: getSelectedCollectionId(state),\n    isLoading: isLoadingType(getLoading(state), FETCH_COLLECTION_REQUEST) || isLoadingType(getLoadingItemCurations(state), FETCH_ITEM_CURATIONS_REQUEST) || isLoadingType(getLoadingItems(state), FETCH_COLLECTION_ITEMS_REQUEST)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onNavigate: function onNavigate(path) {\n      return dispatch(push(path));\n    },\n    onSetAssignee: function onSetAssignee(collectionId, assignee, curation) {\n      return dispatch(setCollectionCurationAssigneeRequest(collectionId, assignee, curation));\n    },\n    onInitiateTPApprovalFlow: function onInitiateTPApprovalFlow(collection) {\n      return dispatch(initiateTPApprovalFlow(collection));\n    },\n    onInitiateApprovalFlow: function onInitiateApprovalFlow(collection) {\n      return dispatch(initiateApprovalFlow(collection));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(TopPanel);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/ItemEditorPage/TopPanel/TopPanel.container.ts"],"names":["connect","push","getAddress","getChainId","getLoading","isConnected","isWalletCommitteeMember","getSelectedCollectionId","isReviewing","setCollectionCurationAssigneeRequest","FETCH_COLLECTION_REQUEST","initiateApprovalFlow","initiateTPApprovalFlow","TopPanel","isLoadingType","getCollection","FETCH_ITEM_CURATIONS_REQUEST","FETCH_COLLECTION_ITEMS_REQUEST","getCollectionItems","getLoadingItems","getPaginationData","getCuration","getItemCurations","getLoadingItemCurations","mapState","state","selectedCollectionId","collection","items","id","itemCurations","curation","itemsPaginationData","undefined","address","totalItems","total","chainId","isCommitteeMember","isLoading","mapDispatch","dispatch","onNavigate","path","onSetAssignee","collectionId","assignee","onInitiateTPApprovalFlow","onInitiateApprovalFlow"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport { getAddress, getChainId, getLoading, isConnected } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { RootState } from 'modules/common/types'\nimport { isWalletCommitteeMember } from 'modules/committee/selectors'\nimport { getSelectedCollectionId, isReviewing } from 'modules/location/selectors'\nimport { setCollectionCurationAssigneeRequest } from 'modules/curations/collectionCuration/actions'\nimport { FETCH_COLLECTION_REQUEST, initiateApprovalFlow, initiateTPApprovalFlow } from 'modules/collection/actions'\nimport { MapStateProps, MapDispatchProps, MapDispatch } from './TopPanel.types'\nimport TopPanel from './TopPanel'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { getCollection } from 'modules/collection/selectors'\nimport { FETCH_ITEM_CURATIONS_REQUEST } from 'modules/curations/itemCuration/actions'\nimport { FETCH_COLLECTION_ITEMS_REQUEST } from 'modules/item/actions'\nimport { getCollectionItems, getLoading as getLoadingItems, getPaginationData } from 'modules/item/selectors'\nimport { getCuration } from 'modules/curations/collectionCuration/selectors'\nimport { getItemCurations, getLoading as getLoadingItemCurations } from 'modules/curations/itemCuration/selectors'\n\nconst mapState = (state: RootState): MapStateProps => {\n  const selectedCollectionId = getSelectedCollectionId(state)\n  const collection = selectedCollectionId ? getCollection(state, selectedCollectionId) : null\n  const items = collection ? getCollectionItems(state, collection.id) : []\n  const itemCurations = collection ? getItemCurations(state, collection.id) : []\n  const curation = selectedCollectionId ? getCuration(state, selectedCollectionId) : null\n  const itemsPaginationData = selectedCollectionId ? getPaginationData(state, selectedCollectionId) : undefined\n  return {\n    address: getAddress(state),\n    items,\n    totalItems: itemsPaginationData?.total || null,\n    collection,\n    itemCurations,\n    curation,\n    chainId: getChainId(state),\n    isConnected: isConnected(state),\n    isReviewing: isReviewing(state),\n    isCommitteeMember: isWalletCommitteeMember(state),\n    selectedCollectionId: getSelectedCollectionId(state),\n    isLoading:\n      isLoadingType(getLoading(state), FETCH_COLLECTION_REQUEST) ||\n      isLoadingType(getLoadingItemCurations(state), FETCH_ITEM_CURATIONS_REQUEST) ||\n      isLoadingType(getLoadingItems(state), FETCH_COLLECTION_ITEMS_REQUEST)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onNavigate: path => dispatch(push(path)),\n  onSetAssignee: (collectionId, assignee, curation) => dispatch(setCollectionCurationAssigneeRequest(collectionId, assignee, curation)),\n  onInitiateTPApprovalFlow: collection => dispatch(initiateTPApprovalFlow(collection)),\n  onInitiateApprovalFlow: collection => dispatch(initiateApprovalFlow(collection))\n})\n\nexport default connect(mapState, mapDispatch)(TopPanel)\n"]},"metadata":{},"sourceType":"module"}