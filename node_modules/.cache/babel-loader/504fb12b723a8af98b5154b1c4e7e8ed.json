{"ast":null,"code":"import _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { action } from 'typesafe-actions';\nimport { PreviewType } from './types';\n// Bind keyboard shortcuts\nexport var BIND_EDITOR_KEYBOARD_SHORTCUTS = 'Bind editor keyboard shortcuts';\nexport var bindEditorKeyboardShortcuts = function bindEditorKeyboardShortcuts() {\n  return action(BIND_EDITOR_KEYBOARD_SHORTCUTS, {});\n};\n// Unbind keyboard shortcuts\nexport var UNBIND_EDITOR_KEYBOARD_SHORTCUTS = 'Unbind editor keyboard shortcuts';\nexport var unbindEditorKeyboardShortcuts = function unbindEditorKeyboardShortcuts() {\n  return action(UNBIND_EDITOR_KEYBOARD_SHORTCUTS, {});\n};\n// Open editor\nexport var OPEN_EDITOR = 'Open editor';\nexport var openEditor = function openEditor() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return action(OPEN_EDITOR, _objectSpread({\n    isReadOnly: false,\n    type: PreviewType.PROJECT\n  }, options));\n};\n// Close editor\nexport var CLOSE_EDITOR = 'Close editor';\nexport var closeEditor = function closeEditor() {\n  return action(CLOSE_EDITOR, {});\n};\n// Update editor\nexport var UPDATE_EDITOR = 'Update editor';\nexport var updateEditor = function updateEditor(sceneId, scene, mappings) {\n  return action(UPDATE_EDITOR, {\n    sceneId: sceneId,\n    scene: scene,\n    mappings: mappings\n  });\n};\n// Set Script URL\nexport var SET_SCRIPT_URL = 'Set script url';\nexport var setScriptUrl = function setScriptUrl(url) {\n  return action(SET_SCRIPT_URL, {\n    url: url\n  });\n};\n// Undo/Redo\nexport var EDITOR_UNDO = 'Editor undo';\nexport var EDITOR_REDO = 'Editor redo';\nexport var editorUndo = function editorUndo() {\n  return action(EDITOR_UNDO, {});\n};\nexport var editorRedo = function editorRedo() {\n  return action(EDITOR_REDO, {});\n};\n// Set Gizmo\nexport var SET_GIZMO = 'Set gizmo';\nexport var setGizmo = function setGizmo(gizmo) {\n  return action(SET_GIZMO, {\n    gizmo: gizmo\n  });\n};\n// Toggle Play\nexport var TOGGLE_PREVIEW = 'Toggle preview';\nexport var togglePreview = function togglePreview(isEnabled) {\n  return action(TOGGLE_PREVIEW, {\n    isEnabled: isEnabled\n  });\n};\n// Toggle Sidebar\nexport var TOGGLE_SIDEBAR = 'Toggle sidebar';\nexport var toggleSidebar = function toggleSidebar(isEnabled) {\n  return action(TOGGLE_SIDEBAR, {\n    isEnabled: isEnabled\n  });\n};\n// Select Entity\nexport var SET_SELECTED_ENTITIES = 'Set selected entities';\nexport var setSelectedEntities = function setSelectedEntities(entityIds) {\n  return action(SET_SELECTED_ENTITIES, {\n    entityIds: entityIds\n  });\n};\n// Zoom in/out\nexport var ZOOM_IN = 'Zoom in';\nexport var zoomIn = function zoomIn() {\n  return action(ZOOM_IN, {});\n};\nexport var ZOOM_OUT = 'Zoom out';\nexport var zoomOut = function zoomOut() {\n  return action(ZOOM_OUT, {});\n};\n// Reset camera\nexport var RESET_CAMERA = 'Reset camera';\nexport var resetCamera = function resetCamera() {\n  return action(RESET_CAMERA, {});\n};\n// Set editor ready\nexport var SET_EDITOR_READY = 'Set editor ready';\nexport var setEditorReady = function setEditorReady(isReady) {\n  return action(SET_EDITOR_READY, {\n    isReady: isReady\n  });\n};\n// Set editor loading (loading 3D entities)\nexport var SET_EDITOR_LOADING = 'Set editor loading';\nexport var setEditorLoading = function setEditorLoading(isLoading) {\n  return action(SET_EDITOR_LOADING, {\n    isLoading: isLoading\n  });\n};\n// Set editor read only\nexport var SET_EDITOR_READ_ONLY = 'Set editor read only';\nexport var setEditorReadOnly = function setEditorReadOnly(isReadOnly) {\n  return action(SET_EDITOR_READ_ONLY, {\n    isReadOnly: isReadOnly\n  });\n};\n// Screenshot\nexport var TAKE_SCREENSHOT = 'Take screenshot';\nexport var takeScreenshot = function takeScreenshot() {\n  return action(TAKE_SCREENSHOT, {});\n};\nexport var SET_SCREENSHOT_READY = 'Set screenshot ready';\nexport var setScreenshotReady = function setScreenshotReady(isScreenshotReady) {\n  return action(SET_SCREENSHOT_READY, {\n    isScreenshotReady: isScreenshotReady\n  });\n};\n// Toggle snap to grid\nexport var TOGGLE_SNAP_TO_GRID = 'Toggle snap to grid';\nexport var toggleSnapToGrid = function toggleSnapToGrid(enabled) {\n  return action(TOGGLE_SNAP_TO_GRID, {\n    enabled: enabled\n  });\n};\n// Create update the editor scene from a project\nexport var CREATE_EDITOR_SCENE = 'Create editor scene';\nexport var createEditorScene = function createEditorScene(project) {\n  return action(CREATE_EDITOR_SCENE, {\n    project: project\n  });\n};\n// Close editor\nexport var PREFETCH_ASSET = 'Prefetch Asset';\nexport var prefetchAsset = function prefetchAsset(asset) {\n  return action(PREFETCH_ASSET, {\n    asset: asset\n  });\n};\n// Set entities out of bounds\nexport var SET_ENTITIES_OUT_OF_BOUNDARIES = 'Set entities out of boundaries';\nexport var setEntitiesOutOfBoundaries = function setEntitiesOutOfBoundaries(entities) {\n  return action(SET_ENTITIES_OUT_OF_BOUNDARIES, {\n    entities: entities\n  });\n};\n// Set export loading\nexport var SET_EXPORT_PROGRESS = 'Set export progress';\nexport var setExportProgress = function setExportProgress(args) {\n  return action(SET_EXPORT_PROGRESS, args);\n};\n// Toggle snap to grid\nexport var TOGGLE_MULTISELECTION = 'Toggle multiselection';\nexport var toggleMultiselection = function toggleMultiselection(enabled) {\n  return action(TOGGLE_MULTISELECTION, {\n    enabled: enabled\n  });\n};\n// Update items\nexport var SET_ITEMS = 'Set items';\nexport var setItems = function setItems(items) {\n  return action(SET_ITEMS, {\n    items: items\n  });\n};\n// Set body shape\nexport var SET_BODY_SHAPE = 'Set body shape';\nexport var setBodyShape = function setBodyShape(bodyShape) {\n  return action(SET_BODY_SHAPE, {\n    bodyShape: bodyShape\n  });\n};\n// Set avatar animation\nexport var SET_EMOTE = 'Set emote';\nexport var setEmote = function setEmote(emote) {\n  return action(SET_EMOTE, {\n    emote: emote\n  });\n};\n// Set skin color\nexport var SET_SKIN_COLOR = 'Set skin color';\nexport var setSkinColor = function setSkinColor(skinColor) {\n  return action(SET_SKIN_COLOR, {\n    skinColor: skinColor\n  });\n};\n// Set eye color\nexport var SET_EYE_COLOR = 'Set eye color';\nexport var setEyeColor = function setEyeColor(eyeColor) {\n  return action(SET_EYE_COLOR, {\n    eyeColor: eyeColor\n  });\n};\n// Set hair color\nexport var SET_HAIR_COLOR = 'Set hair color';\nexport var setHairColor = function setHairColor(hairColor) {\n  return action(SET_HAIR_COLOR, {\n    hairColor: hairColor\n  });\n};\n// Set default wearable\nexport var SET_BASE_WEARABLE = 'Set base wearable';\nexport var setBaseWearable = function setBaseWearable(category, bodyShape, wearable) {\n  return action(SET_BASE_WEARABLE, {\n    category: category,\n    bodyShape: bodyShape,\n    wearable: wearable\n  });\n};\n// Fetch Base Wearables\nexport var FETCH_BASE_WEARABLES_REQUEST = '[Request] Fetch base wearables';\nexport var FETCH_BASE_WEARABLES_SUCCESS = '[Success] Fetch base wearables';\nexport var FETCH_BASE_WEARABLES_FAILURE = '[Failure] Fetch base wearables';\nexport var fetchBaseWearablesRequest = function fetchBaseWearablesRequest() {\n  return action(FETCH_BASE_WEARABLES_REQUEST);\n};\nexport var fetchBaseWearablesSuccess = function fetchBaseWearablesSuccess(wearables) {\n  return action(FETCH_BASE_WEARABLES_SUCCESS, {\n    wearables: wearables\n  });\n};\nexport var fetchBaseWearablesFailure = function fetchBaseWearablesFailure(error) {\n  return action(FETCH_BASE_WEARABLES_FAILURE, {\n    error: error\n  });\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/editor/actions.ts"],"names":["action","PreviewType","BIND_EDITOR_KEYBOARD_SHORTCUTS","bindEditorKeyboardShortcuts","UNBIND_EDITOR_KEYBOARD_SHORTCUTS","unbindEditorKeyboardShortcuts","OPEN_EDITOR","openEditor","options","isReadOnly","type","PROJECT","CLOSE_EDITOR","closeEditor","UPDATE_EDITOR","updateEditor","sceneId","scene","mappings","SET_SCRIPT_URL","setScriptUrl","url","EDITOR_UNDO","EDITOR_REDO","editorUndo","editorRedo","SET_GIZMO","setGizmo","gizmo","TOGGLE_PREVIEW","togglePreview","isEnabled","TOGGLE_SIDEBAR","toggleSidebar","SET_SELECTED_ENTITIES","setSelectedEntities","entityIds","ZOOM_IN","zoomIn","ZOOM_OUT","zoomOut","RESET_CAMERA","resetCamera","SET_EDITOR_READY","setEditorReady","isReady","SET_EDITOR_LOADING","setEditorLoading","isLoading","SET_EDITOR_READ_ONLY","setEditorReadOnly","TAKE_SCREENSHOT","takeScreenshot","SET_SCREENSHOT_READY","setScreenshotReady","isScreenshotReady","TOGGLE_SNAP_TO_GRID","toggleSnapToGrid","enabled","CREATE_EDITOR_SCENE","createEditorScene","project","PREFETCH_ASSET","prefetchAsset","asset","SET_ENTITIES_OUT_OF_BOUNDARIES","setEntitiesOutOfBoundaries","entities","SET_EXPORT_PROGRESS","setExportProgress","args","TOGGLE_MULTISELECTION","toggleMultiselection","SET_ITEMS","setItems","items","SET_BODY_SHAPE","setBodyShape","bodyShape","SET_EMOTE","setEmote","emote","SET_SKIN_COLOR","setSkinColor","skinColor","SET_EYE_COLOR","setEyeColor","eyeColor","SET_HAIR_COLOR","setHairColor","hairColor","SET_BASE_WEARABLE","setBaseWearable","category","wearable","FETCH_BASE_WEARABLES_REQUEST","FETCH_BASE_WEARABLES_SUCCESS","FETCH_BASE_WEARABLES_FAILURE","fetchBaseWearablesRequest","fetchBaseWearablesSuccess","wearables","fetchBaseWearablesFailure","error"],"mappings":"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","sourcesContent":["import { action } from 'typesafe-actions'\nimport { PreviewEmote, WearableBodyShape, WearableCategory } from '@dcl/schemas'\n\nimport { Scene } from 'modules/scene/types'\nimport { Asset } from 'modules/asset/types'\nimport { Project } from 'modules/project/types'\nimport { Gizmo, OpenEditorOptions, PreviewType } from './types'\nimport { Item } from 'modules/item/types'\nimport { Color4, Wearable } from 'decentraland-ecs'\n\n// Bind keyboard shortcuts\n\nexport const BIND_EDITOR_KEYBOARD_SHORTCUTS = 'Bind editor keyboard shortcuts'\n\nexport const bindEditorKeyboardShortcuts = () => action(BIND_EDITOR_KEYBOARD_SHORTCUTS, {})\n\nexport type BindEditorKeybardShortcutsAction = ReturnType<typeof bindEditorKeyboardShortcuts>\n\n// Unbind keyboard shortcuts\n\nexport const UNBIND_EDITOR_KEYBOARD_SHORTCUTS = 'Unbind editor keyboard shortcuts'\n\nexport const unbindEditorKeyboardShortcuts = () => action(UNBIND_EDITOR_KEYBOARD_SHORTCUTS, {})\n\nexport type UnbindEditorKeybardShortcutsAction = ReturnType<typeof unbindEditorKeyboardShortcuts>\n\n// Open editor\n\nexport const OPEN_EDITOR = 'Open editor'\n\nexport const openEditor = (options: Partial<OpenEditorOptions> = {}) =>\n  action(OPEN_EDITOR, { isReadOnly: false, type: PreviewType.PROJECT, ...options } as OpenEditorOptions)\n\nexport type OpenEditorAction = ReturnType<typeof openEditor>\n\n// Close editor\n\nexport const CLOSE_EDITOR = 'Close editor'\n\nexport const closeEditor = () => action(CLOSE_EDITOR, {})\n\nexport type CloseEditorAction = ReturnType<typeof closeEditor>\n\n// Update editor\n\nexport const UPDATE_EDITOR = 'Update editor'\n\nexport const updateEditor = (sceneId: string, scene: Scene, mappings: Record<string, string>) =>\n  action(UPDATE_EDITOR, { sceneId, scene, mappings })\n\nexport type UpdateEditorAction = ReturnType<typeof updateEditor>\n\n// Set Script URL\nexport const SET_SCRIPT_URL = 'Set script url'\n\nexport const setScriptUrl = (url: string) => action(SET_SCRIPT_URL, { url })\n\nexport type SetScriptUrlAction = ReturnType<typeof setScriptUrl>\n\n// Undo/Redo\n\nexport const EDITOR_UNDO = 'Editor undo'\nexport const EDITOR_REDO = 'Editor redo'\n\nexport const editorUndo = () => action(EDITOR_UNDO, {})\nexport const editorRedo = () => action(EDITOR_REDO, {})\n\nexport type EditorUndoAction = ReturnType<typeof editorUndo>\nexport type EditorRedoAction = ReturnType<typeof editorRedo>\n\n// Set Gizmo\n\nexport const SET_GIZMO = 'Set gizmo'\n\nexport const setGizmo = (gizmo: Gizmo) => action(SET_GIZMO, { gizmo })\n\nexport type SetGizmoAction = ReturnType<typeof setGizmo>\n\n// Toggle Play\n\nexport const TOGGLE_PREVIEW = 'Toggle preview'\n\nexport const togglePreview = (isEnabled: boolean) => action(TOGGLE_PREVIEW, { isEnabled })\n\nexport type TogglePreviewAction = ReturnType<typeof togglePreview>\n\n// Toggle Sidebar\n\nexport const TOGGLE_SIDEBAR = 'Toggle sidebar'\n\nexport const toggleSidebar = (isEnabled: boolean) => action(TOGGLE_SIDEBAR, { isEnabled })\n\nexport type ToggleSidebarAction = ReturnType<typeof toggleSidebar>\n\n// Select Entity\n\nexport const SET_SELECTED_ENTITIES = 'Set selected entities'\n\nexport const setSelectedEntities = (entityIds: string[]) => action(SET_SELECTED_ENTITIES, { entityIds })\n\nexport type SetSelectedEntitiesAction = ReturnType<typeof setSelectedEntities>\n\n// Zoom in/out\n\nexport const ZOOM_IN = 'Zoom in'\n\nexport const zoomIn = () => action(ZOOM_IN, {})\n\nexport type ZoomInAction = ReturnType<typeof zoomIn>\n\nexport const ZOOM_OUT = 'Zoom out'\n\nexport const zoomOut = () => action(ZOOM_OUT, {})\n\nexport type ZoomOutAction = ReturnType<typeof zoomOut>\n\n// Reset camera\n\nexport const RESET_CAMERA = 'Reset camera'\n\nexport const resetCamera = () => action(RESET_CAMERA, {})\n\nexport type ResetCameraAction = ReturnType<typeof resetCamera>\n\n// Set editor ready\n\nexport const SET_EDITOR_READY = 'Set editor ready'\n\nexport const setEditorReady = (isReady: boolean) => action(SET_EDITOR_READY, { isReady })\n\nexport type SetEditorReadyAction = ReturnType<typeof setEditorReady>\n\n// Set editor loading (loading 3D entities)\n\nexport const SET_EDITOR_LOADING = 'Set editor loading'\n\nexport const setEditorLoading = (isLoading: boolean) => action(SET_EDITOR_LOADING, { isLoading })\n\nexport type SetEditorLoadingAction = ReturnType<typeof setEditorLoading>\n\n// Set editor read only\n\nexport const SET_EDITOR_READ_ONLY = 'Set editor read only'\n\nexport const setEditorReadOnly = (isReadOnly: boolean) => action(SET_EDITOR_READ_ONLY, { isReadOnly })\n\nexport type SetEditorReadOnlyAction = ReturnType<typeof setEditorReadOnly>\n\n// Screenshot\n\nexport const TAKE_SCREENSHOT = 'Take screenshot'\n\nexport const takeScreenshot = () => action(TAKE_SCREENSHOT, {})\n\nexport type TakeScreenshotAction = ReturnType<typeof takeScreenshot>\n\nexport const SET_SCREENSHOT_READY = 'Set screenshot ready'\n\nexport const setScreenshotReady = (isScreenshotReady: boolean) => action(SET_SCREENSHOT_READY, { isScreenshotReady })\n\nexport type SetScreenshotReadyAction = ReturnType<typeof setScreenshotReady>\n\n// Toggle snap to grid\n\nexport const TOGGLE_SNAP_TO_GRID = 'Toggle snap to grid'\n\nexport const toggleSnapToGrid = (enabled: boolean) => action(TOGGLE_SNAP_TO_GRID, { enabled })\n\nexport type ToggleSnapToGridAction = ReturnType<typeof toggleSnapToGrid>\n\n// Create update the editor scene from a project\n\nexport const CREATE_EDITOR_SCENE = 'Create editor scene'\n\nexport const createEditorScene = (project: Project) => action(CREATE_EDITOR_SCENE, { project })\n\nexport type CreateEditorSceneAction = ReturnType<typeof createEditorScene>\n\n// Close editor\n\nexport const PREFETCH_ASSET = 'Prefetch Asset'\n\nexport const prefetchAsset = (asset: Asset) => action(PREFETCH_ASSET, { asset })\n\nexport type PrefetchAssetAction = ReturnType<typeof prefetchAsset>\n\n// Set entities out of bounds\n\nexport const SET_ENTITIES_OUT_OF_BOUNDARIES = 'Set entities out of boundaries'\n\nexport const setEntitiesOutOfBoundaries = (entities: string[]) => action(SET_ENTITIES_OUT_OF_BOUNDARIES, { entities })\n\nexport type SetEntitiesOutOfBoundariesAction = ReturnType<typeof setEntitiesOutOfBoundaries>\n\n// Set export loading\n\nexport const SET_EXPORT_PROGRESS = 'Set export progress'\n\nexport const setExportProgress = (args: { loaded: number; total: number }) => action(SET_EXPORT_PROGRESS, args)\n\nexport type SetExportProgressAction = ReturnType<typeof setExportProgress>\n\n// Toggle snap to grid\n\nexport const TOGGLE_MULTISELECTION = 'Toggle multiselection'\n\nexport const toggleMultiselection = (enabled: boolean) => action(TOGGLE_MULTISELECTION, { enabled })\n\nexport type ToggleMultiselectionAction = ReturnType<typeof toggleMultiselection>\n\n// Update items\nexport const SET_ITEMS = 'Set items'\n\nexport const setItems = (items: Item[]) => action(SET_ITEMS, { items })\n\nexport type SetItemsAction = ReturnType<typeof setItems>\n\n// Set body shape\nexport const SET_BODY_SHAPE = 'Set body shape'\n\nexport const setBodyShape = (bodyShape: WearableBodyShape) => action(SET_BODY_SHAPE, { bodyShape })\n\nexport type SetBodyShapeAction = ReturnType<typeof setBodyShape>\n\n// Set avatar animation\nexport const SET_EMOTE = 'Set emote'\n\nexport const setEmote = (emote: PreviewEmote) => action(SET_EMOTE, { emote })\n\nexport type SetEmoteAction = ReturnType<typeof setEmote>\n\n// Set skin color\nexport const SET_SKIN_COLOR = 'Set skin color'\n\nexport const setSkinColor = (skinColor: Color4) => action(SET_SKIN_COLOR, { skinColor })\n\nexport type SetSkinColorAction = ReturnType<typeof setSkinColor>\n\n// Set eye color\nexport const SET_EYE_COLOR = 'Set eye color'\n\nexport const setEyeColor = (eyeColor: Color4) => action(SET_EYE_COLOR, { eyeColor })\n\nexport type SetEyeColorAction = ReturnType<typeof setEyeColor>\n\n// Set hair color\nexport const SET_HAIR_COLOR = 'Set hair color'\n\nexport const setHairColor = (hairColor: Color4) => action(SET_HAIR_COLOR, { hairColor })\n\nexport type SetHairColorAction = ReturnType<typeof setHairColor>\n\n// Set default wearable\nexport const SET_BASE_WEARABLE = 'Set base wearable'\n\nexport const setBaseWearable = (category: WearableCategory, bodyShape: WearableBodyShape, wearable: Wearable | null) =>\n  action(SET_BASE_WEARABLE, { category, bodyShape, wearable })\n\nexport type SetBaseWearableAction = ReturnType<typeof setBaseWearable>\n\n// Fetch Base Wearables\n\nexport const FETCH_BASE_WEARABLES_REQUEST = '[Request] Fetch base wearables'\nexport const FETCH_BASE_WEARABLES_SUCCESS = '[Success] Fetch base wearables'\nexport const FETCH_BASE_WEARABLES_FAILURE = '[Failure] Fetch base wearables'\n\nexport const fetchBaseWearablesRequest = () => action(FETCH_BASE_WEARABLES_REQUEST)\nexport const fetchBaseWearablesSuccess = (wearables: Wearable[]) => action(FETCH_BASE_WEARABLES_SUCCESS, { wearables })\nexport const fetchBaseWearablesFailure = (error: string) => action(FETCH_BASE_WEARABLES_FAILURE, { error })\n\nexport type FetchBaseWearablesRequestAction = ReturnType<typeof fetchBaseWearablesRequest>\nexport type FetchBaseWearablesSuccessAction = ReturnType<typeof fetchBaseWearablesSuccess>\nexport type FetchBaseWearablesFailureAction = ReturnType<typeof fetchBaseWearablesFailure>\n"]},"metadata":{},"sourceType":"module"}