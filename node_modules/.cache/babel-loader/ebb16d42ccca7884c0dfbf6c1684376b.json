{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar CONSTRUCTORS = {\n  Object: Object,\n  Array: Array,\n  Function: Function,\n  Number: Number,\n  String: String,\n  Date: Date,\n  RegExp: RegExp\n};\n/* istanbul ignore else */\n\nif (typeof Buffer != \"undefined\") CONSTRUCTORS.Buffer = Buffer;\n/* istanbul ignore else */\n\nif (typeof Promise != \"undefined\") CONSTRUCTORS.Promise = Promise;\nvar getDef = Object.assign(_getDef, {\n  CONSTRUCTORS: CONSTRUCTORS\n});\n\nfunction _getDef() {\n  return {\n    keyword: \"instanceof\",\n    schemaType: [\"string\", \"array\"],\n    compile: function compile(schema) {\n      if (typeof schema == \"string\") {\n        var C = getConstructor(schema);\n        return function (data) {\n          return data instanceof C;\n        };\n      }\n\n      if (Array.isArray(schema)) {\n        var constructors = schema.map(getConstructor);\n        return function (data) {\n          var _iterator = _createForOfIteratorHelper(constructors),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var _C = _step.value;\n              if (data instanceof _C) return true;\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          return false;\n        };\n      }\n      /* istanbul ignore next */\n\n\n      throw new Error(\"ajv implementation error\");\n    },\n    metaSchema: {\n      anyOf: [{\n        type: \"string\"\n      }, {\n        type: \"array\",\n        items: {\n          type: \"string\"\n        }\n      }]\n    }\n  };\n}\n\nfunction getConstructor(c) {\n  var C = CONSTRUCTORS[c];\n  if (C) return C;\n  throw new Error(\"invalid \\\"instanceof\\\" keyword value \".concat(c));\n}\n\nexports.default = getDef;\nmodule.exports = getDef;","map":null,"metadata":{},"sourceType":"script"}