{"ast":null,"code":"import { DeepCopier } from \"../Misc/deepCopier\";\nimport { Color3 } from \"../Maths/math.color\";\nimport { Engine } from \"../Engines/engine\";\nimport { SerializationHelper } from \"../Misc/decorators\";\n/**\r\n * This represents all the required information to add a fresnel effect on a material:\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_fresnelparameters\r\n */\n\nvar FresnelParameters =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new FresnelParameters object.\r\n   *\r\n   * @param options provide your own settings to optionally to override defaults\r\n   */\n  function FresnelParameters(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._isEnabled = true;\n    this.bias = options.bias === undefined ? 0 : options.bias;\n    this.power = options.power === undefined ? 1 : options.power;\n    this.leftColor = options.leftColor || Color3.White();\n    this.rightColor = options.rightColor || Color3.Black();\n\n    if (options.isEnabled === false) {\n      this.isEnabled = false;\n    }\n  }\n\n  Object.defineProperty(FresnelParameters.prototype, \"isEnabled\", {\n    /**\r\n     * Define if the fresnel effect is enable or not.\r\n     */\n    get: function get() {\n      return this._isEnabled;\n    },\n    set: function set(value) {\n      if (this._isEnabled === value) {\n        return;\n      }\n\n      this._isEnabled = value;\n      Engine.MarkAllMaterialsAsDirty(4 | 16);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Clones the current fresnel and its valuues\r\n   * @returns a clone fresnel configuration\r\n   */\n\n  FresnelParameters.prototype.clone = function () {\n    var newFresnelParameters = new FresnelParameters();\n    DeepCopier.DeepCopy(this, newFresnelParameters);\n    return newFresnelParameters;\n  };\n  /**\r\n   * Determines equality between FresnelParameters objects\r\n   * @param otherFresnelParameters defines the second operand\r\n   * @returns true if the power, bias, leftColor, rightColor and isEnabled values are equal to the given ones\r\n   */\n\n\n  FresnelParameters.prototype.equals = function (otherFresnelParameters) {\n    return otherFresnelParameters && this.bias === otherFresnelParameters.bias && this.power === otherFresnelParameters.power && this.leftColor.equals(otherFresnelParameters.leftColor) && this.rightColor.equals(otherFresnelParameters.rightColor) && this.isEnabled === otherFresnelParameters.isEnabled;\n  };\n  /**\r\n   * Serializes the current fresnel parameters to a JSON representation.\r\n   * @return the JSON serialization\r\n   */\n\n\n  FresnelParameters.prototype.serialize = function () {\n    return {\n      isEnabled: this.isEnabled,\n      leftColor: this.leftColor.asArray(),\n      rightColor: this.rightColor.asArray(),\n      bias: this.bias,\n      power: this.power\n    };\n  };\n  /**\r\n   * Parse a JSON object and deserialize it to a new Fresnel parameter object.\r\n   * @param parsedFresnelParameters Define the JSON representation\r\n   * @returns the parsed parameters\r\n   */\n\n\n  FresnelParameters.Parse = function (parsedFresnelParameters) {\n    return new FresnelParameters({\n      isEnabled: parsedFresnelParameters.isEnabled,\n      leftColor: Color3.FromArray(parsedFresnelParameters.leftColor),\n      rightColor: Color3.FromArray(parsedFresnelParameters.rightColor),\n      bias: parsedFresnelParameters.bias,\n      power: parsedFresnelParameters.power || 1.0\n    });\n  };\n\n  return FresnelParameters;\n}();\n\nexport { FresnelParameters }; // References the dependencies.\n\nSerializationHelper._FresnelParametersParser = FresnelParameters.Parse;","map":null,"metadata":{},"sourceType":"module"}