{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Contract } from 'web3x/contract';\nimport abi from './ENSAbi';\nexport var ENS = /*#__PURE__*/function (_Contract) {\n  _inherits(ENS, _Contract);\n\n  function ENS(eth, address, options) {\n    _classCallCheck(this, ENS);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ENS).call(this, eth, abi, address, options));\n  }\n\n  return ENS;\n}(Contract);\nexport var ENSAbi = abi;","map":{"version":3,"sources":["/opt/work/NZ_test/src/contracts/ENS.ts"],"names":["Contract","abi","ENS","eth","address","options","ENSAbi"],"mappings":";;;;AAGA,SAASA,QAAT,QAAoF,gBAApF;AAEA,OAAOC,GAAP,MAAgB,UAAhB;AAuDA,WAAaC,GAAb;AAAA;;AACE,eAAYC,GAAZ,EAAsBC,OAAtB,EAAyCC,OAAzC,EAAoE;AAAA;;AAAA,4EAC5DF,GAD4D,EACvDF,GADuD,EAClDG,OADkD,EACzCC,OADyC;AAEnE;;AAHH;AAAA,EAAyBL,QAAzB;AAKA,OAAO,IAAIM,MAAM,GAAGL,GAAb","sourcesContent":["import BN from 'bn.js'\nimport { Address } from 'web3x/address'\nimport { EventLog, TransactionReceipt } from 'web3x/formatters'\nimport { Contract, ContractOptions, TxCall, TxSend, EventSubscriptionFactory } from 'web3x/contract'\nimport { Eth } from 'web3x/eth'\nimport abi from './ENSAbi'\nexport type TransferEvent = {\n  node: string\n  owner: Address\n}\nexport type NewOwnerEvent = {\n  node: string\n  label: string\n  owner: Address\n}\nexport type NewResolverEvent = {\n  node: string\n  resolver: Address\n}\nexport type NewTTLEvent = {\n  node: string\n  ttl: string\n}\nexport interface TransferEventLog extends EventLog<TransferEvent, 'Transfer'> {}\nexport interface NewOwnerEventLog extends EventLog<NewOwnerEvent, 'NewOwner'> {}\nexport interface NewResolverEventLog extends EventLog<NewResolverEvent, 'NewResolver'> {}\nexport interface NewTTLEventLog extends EventLog<NewTTLEvent, 'NewTTL'> {}\ninterface ENSEvents {\n  Transfer: EventSubscriptionFactory<TransferEventLog>\n  NewOwner: EventSubscriptionFactory<NewOwnerEventLog>\n  NewResolver: EventSubscriptionFactory<NewResolverEventLog>\n  NewTTL: EventSubscriptionFactory<NewTTLEventLog>\n}\ninterface ENSEventLogs {\n  Transfer: TransferEventLog\n  NewOwner: NewOwnerEventLog\n  NewResolver: NewResolverEventLog\n  NewTTL: NewTTLEventLog\n}\ninterface ENSTxEventLogs {\n  Transfer: TransferEventLog[]\n  NewOwner: NewOwnerEventLog[]\n  NewResolver: NewResolverEventLog[]\n  NewTTL: NewTTLEventLog[]\n}\nexport interface ENSTransactionReceipt extends TransactionReceipt<ENSTxEventLogs> {}\ninterface ENSMethods {\n  resolver(node: string): TxCall<Address>\n  owner(node: string): TxCall<Address>\n  setSubnodeOwner(node: string, label: string, owner: Address): TxSend<ENSTransactionReceipt>\n  setTTL(node: string, ttl: number | string | BN): TxSend<ENSTransactionReceipt>\n  ttl(node: string): TxCall<string>\n  setResolver(node: string, resolver: Address): TxSend<ENSTransactionReceipt>\n  setOwner(node: string, owner: Address): TxSend<ENSTransactionReceipt>\n}\nexport interface ENSDefinition {\n  methods: ENSMethods\n  events: ENSEvents\n  eventLogs: ENSEventLogs\n}\nexport class ENS extends Contract<ENSDefinition> {\n  constructor(eth: Eth, address?: Address, options?: ContractOptions) {\n    super(eth, abi, address, options)\n  }\n}\nexport let ENSAbi = abi\n"]},"metadata":{},"sourceType":"module"}