{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getWallet);\n\nimport { call, select } from 'redux-saga/effects';\nimport { Eth } from 'web3x/eth';\nimport { LegacyProviderAdapter } from 'web3x/providers';\nimport { getConnectedProvider } from 'decentraland-dapps/dist/lib/eth';\nimport { getData as getBaseWallet } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { config } from 'config';\nexport var TRANSACTIONS_API_URL = config.get('TRANSACTIONS_API_URL');\nexport function getEth() {\n  return _getEth.apply(this, arguments);\n}\n\nfunction _getEth() {\n  _getEth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var provider;\n    return _regeneratorRuntime.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getConnectedProvider();\n\n          case 2:\n            provider = _context2.sent;\n\n            if (provider) {\n              _context2.next = 5;\n              break;\n            }\n\n            throw new Error('Could not get a valid connected Wallet');\n\n          case 5:\n            return _context2.abrupt(\"return\", new Eth(new LegacyProviderAdapter(provider)));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getEth.apply(this, arguments);\n}\n\nexport function getWallet() {\n  var eth, wallet;\n  return _regeneratorRuntime.wrap(function getWallet$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(getEth);\n\n        case 2:\n          eth = _context.sent;\n          _context.next = 5;\n          return select(getBaseWallet);\n\n        case 5:\n          wallet = _context.sent;\n\n          if (wallet) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new Error('Could not get current wallet from state');\n\n        case 8:\n          return _context.abrupt(\"return\", [wallet, eth]);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function getMethodData(_x) {\n  return _getMethodData.apply(this, arguments);\n}\n\nfunction _getMethodData() {\n  _getMethodData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(populatedTransactionPromise) {\n    var populatedTransaction;\n    return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return populatedTransactionPromise;\n\n          case 2:\n            populatedTransaction = _context3.sent;\n            return _context3.abrupt(\"return\", populatedTransaction.data);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getMethodData.apply(this, arguments);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/wallet/utils.ts"],"names":["getWallet","call","select","Eth","LegacyProviderAdapter","getConnectedProvider","getData","getBaseWallet","config","TRANSACTIONS_API_URL","get","getEth","provider","Error","eth","wallet","getMethodData","populatedTransactionPromise","populatedTransaction","data"],"mappings":";;;oDAoBiBA,S;;AApBjB,SAASC,IAAT,EAAeC,MAAf,QAA6B,oBAA7B;AAEA,SAASC,GAAT,QAAoB,WAApB;AACA,SAASC,qBAAT,QAAsC,iBAAtC;AACA,SAASC,oBAAT,QAAqC,iCAArC;AAEA,SAASC,OAAO,IAAIC,aAApB,QAAyC,kDAAzC;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,OAAO,IAAMC,oBAAoB,GAAGD,MAAM,CAACE,GAAP,CAAW,sBAAX,CAA7B;AAEP,gBAAsBC,MAAtB;AAAA;AAAA;;;qEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmCN,oBAAoB,EADvD;;AAAA;AACCO,YAAAA,QADD;;AAAA,gBAEAA,QAFA;AAAA;AAAA;AAAA;;AAAA,kBAGG,IAAIC,KAAJ,CAAU,wCAAV,CAHH;;AAAA;AAAA,8CAME,IAAIV,GAAJ,CAAQ,IAAIC,qBAAJ,CAA0BQ,QAA1B,CAAR,CANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AASP,OAAO,SAAUZ,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACY,iBAAMC,IAAI,CAACU,MAAD,CAAV;;AADZ;AACCG,UAAAA,GADD;AAAA;AAGyB,iBAAMZ,MAAM,CAACK,aAAD,CAAZ;;AAHzB;AAGCQ,UAAAA,MAHD;;AAAA,cAIAA,MAJA;AAAA;AAAA;AAAA;;AAAA,gBAKG,IAAIF,KAAJ,CAAU,yCAAV,CALH;;AAAA;AAAA,2CAQE,CAACE,MAAD,EAASD,GAAT,CARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWP,gBAAsBE,aAAtB;AAAA;AAAA;;;4EAAO,kBAA6BC,2BAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC8BA,2BAD9B;;AAAA;AACCC,YAAAA,oBADD;AAAA,8CAEEA,oBAAoB,CAACC,IAFvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { call, select } from 'redux-saga/effects'\nimport { PopulatedTransaction } from 'ethers'\nimport { Eth } from 'web3x/eth'\nimport { LegacyProviderAdapter } from 'web3x/providers'\nimport { getConnectedProvider } from 'decentraland-dapps/dist/lib/eth'\nimport { Wallet, Provider } from 'decentraland-dapps/dist/modules/wallet/types'\nimport { getData as getBaseWallet } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { config } from 'config'\n\nexport const TRANSACTIONS_API_URL = config.get('TRANSACTIONS_API_URL')\n\nexport async function getEth(): Promise<Eth> {\n  const provider: Provider | null = await getConnectedProvider()\n  if (!provider) {\n    throw new Error('Could not get a valid connected Wallet')\n  }\n\n  return new Eth(new LegacyProviderAdapter(provider as any))\n}\n\nexport function* getWallet() {\n  const eth: Eth = yield call(getEth)\n\n  const wallet: Wallet | null = yield select(getBaseWallet)\n  if (!wallet) {\n    throw new Error('Could not get current wallet from state')\n  }\n\n  return [wallet, eth]\n}\n\nexport async function getMethodData(populatedTransactionPromise: Promise<PopulatedTransaction>) {\n  const populatedTransaction = await populatedTransactionPromise\n  return populatedTransaction.data!\n}\n"]},"metadata":{},"sourceType":"module"}