{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { BezierCurve } from \"../Maths/math.path\";\n/**\r\n * Base class used for every default easing function.\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar EasingFunction =\n/** @class */\nfunction () {\n  function EasingFunction() {\n    this._easingMode = EasingFunction.EASINGMODE_EASEIN;\n  }\n  /**\r\n   * Sets the easing mode of the current function.\r\n   * @param easingMode Defines the willing mode (EASINGMODE_EASEIN, EASINGMODE_EASEOUT or EASINGMODE_EASEINOUT)\r\n   */\n\n\n  EasingFunction.prototype.setEasingMode = function (easingMode) {\n    var n = Math.min(Math.max(easingMode, 0), 2);\n    this._easingMode = n;\n  };\n  /**\r\n   * Gets the current easing mode.\r\n   * @returns the easing mode\r\n   */\n\n\n  EasingFunction.prototype.getEasingMode = function () {\n    return this._easingMode;\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  EasingFunction.prototype.easeInCore = function (gradient) {\n    throw new Error('You must implement this method');\n  };\n  /**\r\n   * Given an input gradient between 0 and 1, this returns the corresponding value\r\n   * of the easing function.\r\n   * @param gradient Defines the value between 0 and 1 we want the easing value for\r\n   * @returns the corresponding value on the curve defined by the easing function\r\n   */\n\n\n  EasingFunction.prototype.ease = function (gradient) {\n    switch (this._easingMode) {\n      case EasingFunction.EASINGMODE_EASEIN:\n        return this.easeInCore(gradient);\n\n      case EasingFunction.EASINGMODE_EASEOUT:\n        return 1 - this.easeInCore(1 - gradient);\n    }\n\n    if (gradient >= 0.5) {\n      return (1 - this.easeInCore((1 - gradient) * 2)) * 0.5 + 0.5;\n    }\n\n    return this.easeInCore(gradient * 2) * 0.5;\n  };\n  /**\r\n   * Interpolation follows the mathematical formula associated with the easing function.\r\n   */\n\n\n  EasingFunction.EASINGMODE_EASEIN = 0;\n  /**\r\n   * Interpolation follows 100% interpolation minus the output of the formula associated with the easing function.\r\n   */\n\n  EasingFunction.EASINGMODE_EASEOUT = 1;\n  /**\r\n   * Interpolation uses EaseIn for the first half of the animation and EaseOut for the second half.\r\n   */\n\n  EasingFunction.EASINGMODE_EASEINOUT = 2;\n  return EasingFunction;\n}();\n\nexport { EasingFunction };\n/**\r\n * Easing function with a circle shape (see link below).\r\n * @see https://easings.net/#easeInCirc\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar CircleEase =\n/** @class */\nfunction (_super) {\n  __extends(CircleEase, _super);\n\n  function CircleEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /** @hidden */\n\n\n  CircleEase.prototype.easeInCore = function (gradient) {\n    gradient = Math.max(0, Math.min(1, gradient));\n    return 1.0 - Math.sqrt(1.0 - gradient * gradient);\n  };\n\n  return CircleEase;\n}(EasingFunction);\n\nexport { CircleEase };\n/**\r\n * Easing function with a ease back shape (see link below).\r\n * @see https://easings.net/#easeInBack\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar BackEase =\n/** @class */\nfunction (_super) {\n  __extends(BackEase, _super);\n  /**\r\n   * Instantiates a back ease easing\r\n   * @see https://easings.net/#easeInBack\r\n   * @param amplitude Defines the amplitude of the function\r\n   */\n\n\n  function BackEase(\n  /** Defines the amplitude of the function */\n  amplitude) {\n    if (amplitude === void 0) {\n      amplitude = 1;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.amplitude = amplitude;\n    return _this;\n  }\n  /** @hidden */\n\n\n  BackEase.prototype.easeInCore = function (gradient) {\n    var num = Math.max(0, this.amplitude);\n    return Math.pow(gradient, 3.0) - gradient * num * Math.sin(3.1415926535897931 * gradient);\n  };\n\n  return BackEase;\n}(EasingFunction);\n\nexport { BackEase };\n/**\r\n * Easing function with a bouncing shape (see link below).\r\n * @see https://easings.net/#easeInBounce\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar BounceEase =\n/** @class */\nfunction (_super) {\n  __extends(BounceEase, _super);\n  /**\r\n   * Instantiates a bounce easing\r\n   * @see https://easings.net/#easeInBounce\r\n   * @param bounces Defines the number of bounces\r\n   * @param bounciness Defines the amplitude of the bounce\r\n   */\n\n\n  function BounceEase(\n  /** Defines the number of bounces */\n  bounces,\n  /** Defines the amplitude of the bounce */\n  bounciness) {\n    if (bounces === void 0) {\n      bounces = 3;\n    }\n\n    if (bounciness === void 0) {\n      bounciness = 2;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.bounces = bounces;\n    _this.bounciness = bounciness;\n    return _this;\n  }\n  /** @hidden */\n\n\n  BounceEase.prototype.easeInCore = function (gradient) {\n    var y = Math.max(0.0, this.bounces);\n    var bounciness = this.bounciness;\n\n    if (bounciness <= 1.0) {\n      bounciness = 1.001;\n    }\n\n    var num9 = Math.pow(bounciness, y);\n    var num5 = 1.0 - bounciness;\n    var num4 = (1.0 - num9) / num5 + num9 * 0.5;\n    var num15 = gradient * num4;\n    var num65 = Math.log(-num15 * (1.0 - bounciness) + 1.0) / Math.log(bounciness);\n    var num3 = Math.floor(num65);\n    var num13 = num3 + 1.0;\n    var num8 = (1.0 - Math.pow(bounciness, num3)) / (num5 * num4);\n    var num12 = (1.0 - Math.pow(bounciness, num13)) / (num5 * num4);\n    var num7 = (num8 + num12) * 0.5;\n    var num6 = gradient - num7;\n    var num2 = num7 - num8;\n    return -Math.pow(1.0 / bounciness, y - num3) / (num2 * num2) * (num6 - num2) * (num6 + num2);\n  };\n\n  return BounceEase;\n}(EasingFunction);\n\nexport { BounceEase };\n/**\r\n * Easing function with a power of 3 shape (see link below).\r\n * @see https://easings.net/#easeInCubic\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar CubicEase =\n/** @class */\nfunction (_super) {\n  __extends(CubicEase, _super);\n\n  function CubicEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /** @hidden */\n\n\n  CubicEase.prototype.easeInCore = function (gradient) {\n    return gradient * gradient * gradient;\n  };\n\n  return CubicEase;\n}(EasingFunction);\n\nexport { CubicEase };\n/**\r\n * Easing function with an elastic shape (see link below).\r\n * @see https://easings.net/#easeInElastic\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar ElasticEase =\n/** @class */\nfunction (_super) {\n  __extends(ElasticEase, _super);\n  /**\r\n   * Instantiates an elastic easing function\r\n   * @see https://easings.net/#easeInElastic\r\n   * @param oscillations Defines the number of oscillations\r\n   * @param springiness Defines the amplitude of the oscillations\r\n   */\n\n\n  function ElasticEase(\n  /** Defines the number of oscillations*/\n  oscillations,\n  /** Defines the amplitude of the oscillations*/\n  springiness) {\n    if (oscillations === void 0) {\n      oscillations = 3;\n    }\n\n    if (springiness === void 0) {\n      springiness = 3;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.oscillations = oscillations;\n    _this.springiness = springiness;\n    return _this;\n  }\n  /** @hidden */\n\n\n  ElasticEase.prototype.easeInCore = function (gradient) {\n    var num2;\n    var num3 = Math.max(0.0, this.oscillations);\n    var num = Math.max(0.0, this.springiness);\n\n    if (num == 0) {\n      num2 = gradient;\n    } else {\n      num2 = (Math.exp(num * gradient) - 1.0) / (Math.exp(num) - 1.0);\n    }\n\n    return num2 * Math.sin((6.2831853071795862 * num3 + 1.5707963267948966) * gradient);\n  };\n\n  return ElasticEase;\n}(EasingFunction);\n\nexport { ElasticEase };\n/**\r\n * Easing function with an exponential shape (see link below).\r\n * @see https://easings.net/#easeInExpo\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar ExponentialEase =\n/** @class */\nfunction (_super) {\n  __extends(ExponentialEase, _super);\n  /**\r\n   * Instantiates an exponential easing function\r\n   * @see https://easings.net/#easeInExpo\r\n   * @param exponent Defines the exponent of the function\r\n   */\n\n\n  function ExponentialEase(\n  /** Defines the exponent of the function */\n  exponent) {\n    if (exponent === void 0) {\n      exponent = 2;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.exponent = exponent;\n    return _this;\n  }\n  /** @hidden */\n\n\n  ExponentialEase.prototype.easeInCore = function (gradient) {\n    if (this.exponent <= 0) {\n      return gradient;\n    }\n\n    return (Math.exp(this.exponent * gradient) - 1.0) / (Math.exp(this.exponent) - 1.0);\n  };\n\n  return ExponentialEase;\n}(EasingFunction);\n\nexport { ExponentialEase };\n/**\r\n * Easing function with a power shape (see link below).\r\n * @see https://easings.net/#easeInQuad\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar PowerEase =\n/** @class */\nfunction (_super) {\n  __extends(PowerEase, _super);\n  /**\r\n   * Instantiates an power base easing function\r\n   * @see https://easings.net/#easeInQuad\r\n   * @param power Defines the power of the function\r\n   */\n\n\n  function PowerEase(\n  /** Defines the power of the function */\n  power) {\n    if (power === void 0) {\n      power = 2;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.power = power;\n    return _this;\n  }\n  /** @hidden */\n\n\n  PowerEase.prototype.easeInCore = function (gradient) {\n    var y = Math.max(0.0, this.power);\n    return Math.pow(gradient, y);\n  };\n\n  return PowerEase;\n}(EasingFunction);\n\nexport { PowerEase };\n/**\r\n * Easing function with a power of 2 shape (see link below).\r\n * @see https://easings.net/#easeInQuad\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar QuadraticEase =\n/** @class */\nfunction (_super) {\n  __extends(QuadraticEase, _super);\n\n  function QuadraticEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /** @hidden */\n\n\n  QuadraticEase.prototype.easeInCore = function (gradient) {\n    return gradient * gradient;\n  };\n\n  return QuadraticEase;\n}(EasingFunction);\n\nexport { QuadraticEase };\n/**\r\n * Easing function with a power of 4 shape (see link below).\r\n * @see https://easings.net/#easeInQuart\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar QuarticEase =\n/** @class */\nfunction (_super) {\n  __extends(QuarticEase, _super);\n\n  function QuarticEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /** @hidden */\n\n\n  QuarticEase.prototype.easeInCore = function (gradient) {\n    return gradient * gradient * gradient * gradient;\n  };\n\n  return QuarticEase;\n}(EasingFunction);\n\nexport { QuarticEase };\n/**\r\n * Easing function with a power of 5 shape (see link below).\r\n * @see https://easings.net/#easeInQuint\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar QuinticEase =\n/** @class */\nfunction (_super) {\n  __extends(QuinticEase, _super);\n\n  function QuinticEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /** @hidden */\n\n\n  QuinticEase.prototype.easeInCore = function (gradient) {\n    return gradient * gradient * gradient * gradient * gradient;\n  };\n\n  return QuinticEase;\n}(EasingFunction);\n\nexport { QuinticEase };\n/**\r\n * Easing function with a sin shape (see link below).\r\n * @see https://easings.net/#easeInSine\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar SineEase =\n/** @class */\nfunction (_super) {\n  __extends(SineEase, _super);\n\n  function SineEase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /** @hidden */\n\n\n  SineEase.prototype.easeInCore = function (gradient) {\n    return 1.0 - Math.sin(1.5707963267948966 * (1.0 - gradient));\n  };\n\n  return SineEase;\n}(EasingFunction);\n\nexport { SineEase };\n/**\r\n * Easing function with a bezier shape (see link below).\r\n * @see http://cubic-bezier.com/#.17,.67,.83,.67\r\n * @see https://doc.babylonjs.com/babylon101/animations#easing-functions\r\n */\n\nvar BezierCurveEase =\n/** @class */\nfunction (_super) {\n  __extends(BezierCurveEase, _super);\n  /**\r\n   * Instantiates a bezier function\r\n   * @see http://cubic-bezier.com/#.17,.67,.83,.67\r\n   * @param x1 Defines the x component of the start tangent in the bezier curve\r\n   * @param y1 Defines the y component of the start tangent in the bezier curve\r\n   * @param x2 Defines the x component of the end tangent in the bezier curve\r\n   * @param y2 Defines the y component of the end tangent in the bezier curve\r\n   */\n\n\n  function BezierCurveEase(\n  /** Defines the x component of the start tangent in the bezier curve */\n  x1,\n  /** Defines the y component of the start tangent in the bezier curve */\n  y1,\n  /** Defines the x component of the end tangent in the bezier curve */\n  x2,\n  /** Defines the y component of the end tangent in the bezier curve */\n  y2) {\n    if (x1 === void 0) {\n      x1 = 0;\n    }\n\n    if (y1 === void 0) {\n      y1 = 0;\n    }\n\n    if (x2 === void 0) {\n      x2 = 1;\n    }\n\n    if (y2 === void 0) {\n      y2 = 1;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.x1 = x1;\n    _this.y1 = y1;\n    _this.x2 = x2;\n    _this.y2 = y2;\n    return _this;\n  }\n  /** @hidden */\n\n\n  BezierCurveEase.prototype.easeInCore = function (gradient) {\n    return BezierCurve.Interpolate(gradient, this.x1, this.y1, this.x2, this.y2);\n  };\n\n  return BezierCurveEase;\n}(EasingFunction);\n\nexport { BezierCurveEase };","map":null,"metadata":{},"sourceType":"module"}