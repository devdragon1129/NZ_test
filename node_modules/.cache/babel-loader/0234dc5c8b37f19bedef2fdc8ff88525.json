{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebXRAbstractMotionController } from \"./webXRAbstractMotionController\";\nimport { WebXRMotionControllerManager } from \"./webXRMotionControllerManager\";\nimport { Mesh } from \"../../Meshes/mesh\";\nimport { Quaternion } from \"../../Maths/math.vector\";\n/**\r\n * The motion controller class for oculus touch (quest, rift).\r\n * This class supports legacy mapping as well the standard xr mapping\r\n */\n\nvar WebXROculusTouchMotionController =\n/** @class */\nfunction (_super) {\n  __extends(WebXROculusTouchMotionController, _super);\n\n  function WebXROculusTouchMotionController(scene, gamepadObject, handedness, legacyMapping, _forceLegacyControllers) {\n    if (legacyMapping === void 0) {\n      legacyMapping = false;\n    }\n\n    if (_forceLegacyControllers === void 0) {\n      _forceLegacyControllers = false;\n    }\n\n    var _this = _super.call(this, scene, OculusTouchLayouts[handedness], gamepadObject, handedness) || this;\n\n    _this._forceLegacyControllers = _forceLegacyControllers;\n    _this.profileId = \"oculus-touch\";\n    return _this;\n  }\n\n  WebXROculusTouchMotionController.prototype._getFilenameAndPath = function () {\n    var filename = \"\";\n\n    if (this.handedness === \"left\") {\n      filename = WebXROculusTouchMotionController.MODEL_LEFT_FILENAME;\n    } else {\n      // Right is the default if no hand is specified\n      filename = WebXROculusTouchMotionController.MODEL_RIGHT_FILENAME;\n    }\n\n    var path = this._isQuest() ? WebXROculusTouchMotionController.QUEST_MODEL_BASE_URL : WebXROculusTouchMotionController.MODEL_BASE_URL;\n    return {\n      filename: filename,\n      path: path\n    };\n  };\n\n  WebXROculusTouchMotionController.prototype._getModelLoadingConstraints = function () {\n    return true;\n  };\n\n  WebXROculusTouchMotionController.prototype._processLoadedModel = function (_meshes) {\n    var _this = this;\n\n    var isQuest = this._isQuest();\n\n    var triggerDirection = this.handedness === \"right\" ? -1 : 1;\n    this.getComponentIds().forEach(function (id) {\n      var comp = id && _this.getComponent(id);\n\n      if (comp) {\n        comp.onButtonStateChangedObservable.add(function (component) {\n          if (!_this.rootMesh || _this.disableAnimation) {\n            return;\n          }\n\n          switch (id) {\n            case \"xr-standard-trigger\":\n              // index trigger\n              if (!isQuest) {\n                _this._modelRootNode.getChildren()[3].rotation.x = -component.value * 0.2;\n                _this._modelRootNode.getChildren()[3].position.y = -component.value * 0.005;\n                _this._modelRootNode.getChildren()[3].position.z = -component.value * 0.005;\n              }\n\n              return;\n\n            case \"xr-standard-squeeze\":\n              // secondary trigger\n              if (!isQuest) {\n                _this._modelRootNode.getChildren()[4].position.x = triggerDirection * component.value * 0.0035;\n              }\n\n              return;\n\n            case \"xr-standard-thumbstick\":\n              // thumbstick\n              return;\n\n            case \"a-button\":\n            case \"x-button\":\n              if (!isQuest) {\n                if (component.pressed) {\n                  _this._modelRootNode.getChildren()[1].position.y = -0.001;\n                } else {\n                  _this._modelRootNode.getChildren()[1].position.y = 0;\n                }\n              }\n\n              return;\n\n            case \"b-button\":\n            case \"y-button\":\n              if (!isQuest) {\n                if (component.pressed) {\n                  _this._modelRootNode.getChildren()[2].position.y = -0.001;\n                } else {\n                  _this._modelRootNode.getChildren()[2].position.y = 0;\n                }\n              }\n\n              return;\n          }\n        }, undefined, true);\n      }\n    });\n  };\n\n  WebXROculusTouchMotionController.prototype._setRootMesh = function (meshes) {\n    this.rootMesh = new Mesh(this.profileId + \" \" + this.handedness, this.scene);\n\n    if (!this.scene.useRightHandedSystem) {\n      this.rootMesh.rotationQuaternion = Quaternion.FromEulerAngles(0, Math.PI, 0);\n    }\n\n    meshes.forEach(function (mesh) {\n      mesh.isPickable = false;\n    });\n\n    if (this._isQuest()) {\n      this._modelRootNode = meshes[0];\n    } else {\n      this._modelRootNode = meshes[1];\n      this.rootMesh.position.y = 0.034;\n      this.rootMesh.position.z = 0.052;\n    }\n\n    this._modelRootNode.parent = this.rootMesh;\n  };\n\n  WebXROculusTouchMotionController.prototype._updateModel = function () {// no-op. model is updated using observables.\n  };\n  /**\r\n   * Is this the new type of oculus touch. At the moment both have the same profile and it is impossible to differentiate\r\n   * between the touch and touch 2.\r\n   */\n\n\n  WebXROculusTouchMotionController.prototype._isQuest = function () {\n    // this is SADLY the only way to currently check. Until proper profiles will be available.\n    return !!navigator.userAgent.match(/Quest/gi) && !this._forceLegacyControllers;\n  };\n  /**\r\n   * The base url used to load the left and right controller models\r\n   */\n\n\n  WebXROculusTouchMotionController.MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculus/\";\n  /**\r\n   * The name of the left controller model file\r\n   */\n\n  WebXROculusTouchMotionController.MODEL_LEFT_FILENAME = \"left.babylon\";\n  /**\r\n   * The name of the right controller model file\r\n   */\n\n  WebXROculusTouchMotionController.MODEL_RIGHT_FILENAME = \"right.babylon\";\n  /**\r\n   * Base Url for the Quest controller model.\r\n   */\n\n  WebXROculusTouchMotionController.QUEST_MODEL_BASE_URL = \"https://controllers.babylonjs.com/oculusQuest/\";\n  return WebXROculusTouchMotionController;\n}(WebXRAbstractMotionController);\n\nexport { WebXROculusTouchMotionController }; // register the profile\n\nWebXRMotionControllerManager.RegisterController(\"oculus-touch\", function (xrInput, scene) {\n  return new WebXROculusTouchMotionController(scene, xrInput.gamepad, xrInput.handedness);\n});\nWebXRMotionControllerManager.RegisterController(\"oculus-touch-legacy\", function (xrInput, scene) {\n  return new WebXROculusTouchMotionController(scene, xrInput.gamepad, xrInput.handedness, true);\n});\nvar OculusTouchLayouts = {\n  left: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {}\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {}\n      },\n      \"xr-standard-thumbstick\": {\n        type: \"thumbstick\",\n        gamepadIndices: {\n          button: 3,\n          xAxis: 2,\n          yAxis: 3\n        },\n        rootNodeName: \"xr_standard_thumbstick\",\n        visualResponses: {}\n      },\n      \"x-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 4\n        },\n        rootNodeName: \"x_button\",\n        visualResponses: {}\n      },\n      \"y-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 5\n        },\n        rootNodeName: \"y_button\",\n        visualResponses: {}\n      },\n      thumbrest: {\n        type: \"button\",\n        gamepadIndices: {\n          button: 6\n        },\n        rootNodeName: \"thumbrest\",\n        visualResponses: {}\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"oculus-touch-v2-left\",\n    assetPath: \"left.glb\"\n  },\n  right: {\n    selectComponentId: \"xr-standard-trigger\",\n    components: {\n      \"xr-standard-trigger\": {\n        type: \"trigger\",\n        gamepadIndices: {\n          button: 0\n        },\n        rootNodeName: \"xr_standard_trigger\",\n        visualResponses: {}\n      },\n      \"xr-standard-squeeze\": {\n        type: \"squeeze\",\n        gamepadIndices: {\n          button: 1\n        },\n        rootNodeName: \"xr_standard_squeeze\",\n        visualResponses: {}\n      },\n      \"xr-standard-thumbstick\": {\n        type: \"thumbstick\",\n        gamepadIndices: {\n          button: 3,\n          xAxis: 2,\n          yAxis: 3\n        },\n        rootNodeName: \"xr_standard_thumbstick\",\n        visualResponses: {}\n      },\n      \"a-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 4\n        },\n        rootNodeName: \"a_button\",\n        visualResponses: {}\n      },\n      \"b-button\": {\n        type: \"button\",\n        gamepadIndices: {\n          button: 5\n        },\n        rootNodeName: \"b_button\",\n        visualResponses: {}\n      },\n      thumbrest: {\n        type: \"button\",\n        gamepadIndices: {\n          button: 6\n        },\n        rootNodeName: \"thumbrest\",\n        visualResponses: {}\n      }\n    },\n    gamepadMapping: \"xr-standard\",\n    rootNodeName: \"oculus-touch-v2-right\",\n    assetPath: \"right.glb\"\n  }\n};","map":null,"metadata":{},"sourceType":"module"}