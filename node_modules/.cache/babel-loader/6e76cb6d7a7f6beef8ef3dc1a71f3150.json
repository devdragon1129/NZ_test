{"ast":null,"code":"import _slicedToArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(landSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleSetUpdateManagerRequest),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleDissolveEstateRequest),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(handleCreateEstateRequest),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(handleEditEstateRequest),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(handleSetOperatorRequest),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(handleEditLandRequest),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(handleTransferLandRequest),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchLandRequest),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(handleWallet);\n\nimport { Address } from 'web3x/address';\nimport { CONNECT_WALLET_SUCCESS, CHANGE_ACCOUNT } from 'decentraland-dapps/dist/modules/wallet/actions';\nimport { takeLatest, call, put, takeEvery, all } from 'redux-saga/effects';\nimport { FETCH_LANDS_REQUEST, fetchLandsFailure, fetchLandsSuccess, fetchLandsRequest, TRANSFER_LAND_REQUEST, transferLandSuccess, transferLandFailure, EDIT_LAND_REQUEST, editLandSuccess, editLandFailure, SET_OPERATOR_REQUEST, setOperatorSuccess, setOperatorFailure, CREATE_ESTATE_REQUEST, createEstateSuccess, createEstateFailure, editEstateSuccess, editEstateFailure, EDIT_ESTATE_REQUEST, DISSOLVE_ESTATE_REQUEST, dissolveEstateSuccess, dissolveEstateFailure, SET_UPDATE_MANAGER_REQUEST, setUpdateManagerSuccess, setUpdateManagerFailure } from './actions';\nimport { manager } from 'lib/api/manager';\nimport { LANDRegistry } from 'contracts/LANDRegistry';\nimport { LAND_REGISTRY_ADDRESS, ESTATE_REGISTRY_ADDRESS } from 'modules/common/contracts';\nimport { EstateRegistry } from 'contracts/EstateRegistry';\nimport { push } from 'connected-react-router';\nimport { locations } from 'routing/locations';\nimport { closeModal } from 'modules/modal/actions';\nimport { getWallet } from 'modules/wallet/utils';\nimport { splitCoords, buildMetadata } from './utils';\nimport { LandType } from './types';\nexport function landSaga() {\n  return _regeneratorRuntime.wrap(function landSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeEvery(SET_UPDATE_MANAGER_REQUEST, handleSetUpdateManagerRequest);\n\n        case 2:\n          _context.next = 4;\n          return takeEvery(DISSOLVE_ESTATE_REQUEST, handleDissolveEstateRequest);\n\n        case 4:\n          _context.next = 6;\n          return takeEvery(EDIT_ESTATE_REQUEST, handleEditEstateRequest);\n\n        case 6:\n          _context.next = 8;\n          return takeEvery(CREATE_ESTATE_REQUEST, handleCreateEstateRequest);\n\n        case 8:\n          _context.next = 10;\n          return takeEvery(SET_OPERATOR_REQUEST, handleSetOperatorRequest);\n\n        case 10:\n          _context.next = 12;\n          return takeEvery(EDIT_LAND_REQUEST, handleEditLandRequest);\n\n        case 12:\n          _context.next = 14;\n          return takeEvery(TRANSFER_LAND_REQUEST, handleTransferLandRequest);\n\n        case 14:\n          _context.next = 16;\n          return takeEvery(FETCH_LANDS_REQUEST, handleFetchLandRequest);\n\n        case 16:\n          _context.next = 18;\n          return takeLatest(CONNECT_WALLET_SUCCESS, handleWallet);\n\n        case 18:\n          _context.next = 20;\n          return takeLatest(CHANGE_ACCOUNT, handleWallet);\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction handleSetUpdateManagerRequest(action) {\n  var _action$payload, address, isApproved, type, _yield$getWallet, _yield$getWallet2, wallet, eth, from, _manager, landRegistry, txHash, estateRegistry, _txHash;\n\n  return _regeneratorRuntime.wrap(function handleSetUpdateManagerRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _action$payload = action.payload, address = _action$payload.address, isApproved = _action$payload.isApproved, type = _action$payload.type;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return getWallet();\n\n        case 4:\n          _yield$getWallet = _context2.sent;\n          _yield$getWallet2 = _slicedToArray(_yield$getWallet, 2);\n          wallet = _yield$getWallet2[0];\n          eth = _yield$getWallet2[1];\n          from = Address.fromString(wallet.address);\n          _manager = Address.fromString(address);\n          _context2.t0 = type;\n          _context2.next = _context2.t0 === LandType.PARCEL ? 13 : _context2.t0 === LandType.ESTATE ? 20 : 27;\n          break;\n\n        case 13:\n          landRegistry = new LANDRegistry(eth, Address.fromString(LAND_REGISTRY_ADDRESS));\n          _context2.next = 16;\n          return call(function () {\n            return landRegistry.methods.setUpdateManager(from, _manager, isApproved).send({\n              from: from\n            }).getTxHash();\n          });\n\n        case 16:\n          txHash = _context2.sent;\n          _context2.next = 19;\n          return put(setUpdateManagerSuccess(address, type, isApproved, wallet.chainId, txHash));\n\n        case 19:\n          return _context2.abrupt(\"break\", 27);\n\n        case 20:\n          estateRegistry = new EstateRegistry(eth, Address.fromString(ESTATE_REGISTRY_ADDRESS));\n          _context2.next = 23;\n          return call(function () {\n            return estateRegistry.methods.setUpdateManager(from, _manager, isApproved).send({\n              from: from\n            }).getTxHash();\n          });\n\n        case 23:\n          _txHash = _context2.sent;\n          _context2.next = 26;\n          return put(setUpdateManagerSuccess(address, type, isApproved, wallet.chainId, _txHash));\n\n        case 26:\n          return _context2.abrupt(\"break\", 27);\n\n        case 27:\n          _context2.next = 29;\n          return put(push(locations.activity()));\n\n        case 29:\n          _context2.next = 35;\n          break;\n\n        case 31:\n          _context2.prev = 31;\n          _context2.t1 = _context2[\"catch\"](1);\n          _context2.next = 35;\n          return put(setUpdateManagerFailure(address, type, isApproved, _context2.t1.message));\n\n        case 35:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 31]]);\n}\n\nfunction handleDissolveEstateRequest(action) {\n  var land, _yield$getWallet3, _yield$getWallet4, wallet, eth, from, landRegistry, estateRegistry, tokenIds, txHash;\n\n  return _regeneratorRuntime.wrap(function handleDissolveEstateRequest$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          land = action.payload.land;\n          _context3.prev = 1;\n\n          if (!(land.type !== LandType.ESTATE)) {\n            _context3.next = 4;\n            break;\n          }\n\n          throw new Error(\"Invalid LandType: \\\"\".concat(land.type, \"\\\"\"));\n\n        case 4:\n          _context3.next = 6;\n          return getWallet();\n\n        case 6:\n          _yield$getWallet3 = _context3.sent;\n          _yield$getWallet4 = _slicedToArray(_yield$getWallet3, 2);\n          wallet = _yield$getWallet4[0];\n          eth = _yield$getWallet4[1];\n          from = Address.fromString(wallet.address);\n          landRegistry = new LANDRegistry(eth, Address.fromString(LAND_REGISTRY_ADDRESS));\n          estateRegistry = new EstateRegistry(eth, Address.fromString(ESTATE_REGISTRY_ADDRESS));\n          _context3.next = 15;\n          return all(land.parcels.map(function (parcel) {\n            return landRegistry.methods.encodeTokenId(parcel.x, parcel.y).call();\n          }));\n\n        case 15:\n          tokenIds = _context3.sent;\n          _context3.next = 18;\n          return call(function () {\n            return estateRegistry.methods.transferManyLands(land.id, tokenIds, from).send({\n              from: from\n            }).getTxHash();\n          });\n\n        case 18:\n          txHash = _context3.sent;\n          _context3.next = 21;\n          return put(dissolveEstateSuccess(land, wallet.chainId, txHash));\n\n        case 21:\n          _context3.next = 23;\n          return put(closeModal('DissolveModal'));\n\n        case 23:\n          _context3.next = 25;\n          return put(push(locations.activity()));\n\n        case 25:\n          _context3.next = 31;\n          break;\n\n        case 27:\n          _context3.prev = 27;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 31;\n          return put(dissolveEstateFailure(land, _context3.t0.message));\n\n        case 31:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 27]]);\n}\n\nfunction handleCreateEstateRequest(action) {\n  var _action$payload2, name, description, coords, _yield$getWallet5, _yield$getWallet6, wallet, eth, from, _splitCoords, _splitCoords2, xs, ys, landRegistry, metadata, txHash;\n\n  return _regeneratorRuntime.wrap(function handleCreateEstateRequest$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _action$payload2 = action.payload, name = _action$payload2.name, description = _action$payload2.description, coords = _action$payload2.coords;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return getWallet();\n\n        case 4:\n          _yield$getWallet5 = _context4.sent;\n          _yield$getWallet6 = _slicedToArray(_yield$getWallet5, 2);\n          wallet = _yield$getWallet6[0];\n          eth = _yield$getWallet6[1];\n          from = Address.fromString(wallet.address);\n          _splitCoords = splitCoords(coords), _splitCoords2 = _slicedToArray(_splitCoords, 2), xs = _splitCoords2[0], ys = _splitCoords2[1];\n          landRegistry = new LANDRegistry(eth, Address.fromString(LAND_REGISTRY_ADDRESS));\n          metadata = buildMetadata(name, description);\n          _context4.next = 14;\n          return call(function () {\n            return landRegistry.methods.createEstateWithMetadata(xs, ys, from, metadata).send({\n              from: from\n            }).getTxHash();\n          });\n\n        case 14:\n          txHash = _context4.sent;\n          _context4.next = 17;\n          return put(createEstateSuccess(name, description, coords, wallet.chainId, txHash));\n\n        case 17:\n          _context4.next = 19;\n          return put(closeModal('EstateEditorModal'));\n\n        case 19:\n          _context4.next = 21;\n          return put(push(locations.activity()));\n\n        case 21:\n          _context4.next = 27;\n          break;\n\n        case 23:\n          _context4.prev = 23;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 27;\n          return put(createEstateFailure(name, description, coords, _context4.t0.message));\n\n        case 27:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 23]]);\n}\n\nfunction handleEditEstateRequest(action) {\n  var _action$payload3, land, toAdd, toRemove, _yield$getWallet7, _yield$getWallet8, wallet, eth, from, landRegistry, _splitCoords3, _splitCoords4, xsToAdd, ysToAdd, txHash, estateRegistry, tokenIds, _txHash2;\n\n  return _regeneratorRuntime.wrap(function handleEditEstateRequest$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _action$payload3 = action.payload, land = _action$payload3.land, toAdd = _action$payload3.toAdd, toRemove = _action$payload3.toRemove;\n          _context5.prev = 1;\n          _context5.next = 4;\n          return getWallet();\n\n        case 4:\n          _yield$getWallet7 = _context5.sent;\n          _yield$getWallet8 = _slicedToArray(_yield$getWallet7, 2);\n          wallet = _yield$getWallet8[0];\n          eth = _yield$getWallet8[1];\n          from = Address.fromString(wallet.address);\n          landRegistry = new LANDRegistry(eth, Address.fromString(LAND_REGISTRY_ADDRESS));\n\n          if (!(toAdd.length > 0)) {\n            _context5.next = 17;\n            break;\n          }\n\n          _splitCoords3 = splitCoords(toAdd), _splitCoords4 = _slicedToArray(_splitCoords3, 2), xsToAdd = _splitCoords4[0], ysToAdd = _splitCoords4[1];\n          _context5.next = 14;\n          return call(function () {\n            return landRegistry.methods.transferManyLandToEstate(xsToAdd, ysToAdd, land.id).send({\n              from: from\n            }).getTxHash();\n          });\n\n        case 14:\n          txHash = _context5.sent;\n          _context5.next = 17;\n          return put(editEstateSuccess(land, toAdd, 'add', wallet.chainId, txHash));\n\n        case 17:\n          if (!(toRemove.length > 0)) {\n            _context5.next = 27;\n            break;\n          }\n\n          estateRegistry = new EstateRegistry(eth, Address.fromString(ESTATE_REGISTRY_ADDRESS));\n          _context5.next = 21;\n          return all(toRemove.map(function (_ref) {\n            var x = _ref.x,\n                y = _ref.y;\n            return landRegistry.methods.encodeTokenId(x, y).call();\n          }));\n\n        case 21:\n          tokenIds = _context5.sent;\n          _context5.next = 24;\n          return call(function () {\n            return estateRegistry.methods.transferManyLands(land.id, tokenIds, from).send({\n              from: from\n            }).getTxHash();\n          });\n\n        case 24:\n          _txHash2 = _context5.sent;\n          _context5.next = 27;\n          return put(editEstateSuccess(land, toRemove, 'remove', wallet.chainId, _txHash2));\n\n        case 27:\n          _context5.next = 29;\n          return put(closeModal('EstateEditorModal'));\n\n        case 29:\n          _context5.next = 31;\n          return put(push(locations.activity()));\n\n        case 31:\n          _context5.next = 37;\n          break;\n\n        case 33:\n          _context5.prev = 33;\n          _context5.t0 = _context5[\"catch\"](1);\n          _context5.next = 37;\n          return put(editEstateFailure(land, toAdd, toRemove, _context5.t0.message));\n\n        case 37:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[1, 33]]);\n}\n\nfunction handleSetOperatorRequest(action) {\n  var _action$payload4, land, address, _yield$getWallet9, _yield$getWallet10, wallet, eth, from, operator, landRegistry, tokenId, txHash, estateRegistry, _txHash3;\n\n  return _regeneratorRuntime.wrap(function handleSetOperatorRequest$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _action$payload4 = action.payload, land = _action$payload4.land, address = _action$payload4.address;\n          _context6.prev = 1;\n          _context6.next = 4;\n          return getWallet();\n\n        case 4:\n          _yield$getWallet9 = _context6.sent;\n          _yield$getWallet10 = _slicedToArray(_yield$getWallet9, 2);\n          wallet = _yield$getWallet10[0];\n          eth = _yield$getWallet10[1];\n          from = Address.fromString(wallet.address);\n          operator = address ? Address.fromString(address) : Address.ZERO;\n          _context6.t0 = land.type;\n          _context6.next = _context6.t0 === LandType.PARCEL ? 13 : _context6.t0 === LandType.ESTATE ? 23 : 30;\n          break;\n\n        case 13:\n          landRegistry = new LANDRegistry(eth, Address.fromString(LAND_REGISTRY_ADDRESS));\n          _context6.next = 16;\n          return call(function () {\n            return landRegistry.methods.encodeTokenId(land.x, land.y).call();\n          });\n\n        case 16:\n          tokenId = _context6.sent;\n          _context6.next = 19;\n          return call(function () {\n            return landRegistry.methods.setUpdateOperator(tokenId, operator).send({\n              from: from\n            }).getTxHash();\n          });\n\n        case 19:\n          txHash = _context6.sent;\n          _context6.next = 22;\n          return put(setOperatorSuccess(land, address, wallet.chainId, txHash));\n\n        case 22:\n          return _context6.abrupt(\"break\", 31);\n\n        case 23:\n          estateRegistry = new EstateRegistry(eth, Address.fromString(ESTATE_REGISTRY_ADDRESS));\n          _context6.next = 26;\n          return call(function () {\n            return estateRegistry.methods.setUpdateOperator(land.id, operator).send({\n              from: from\n            }).getTxHash();\n          });\n\n        case 26:\n          _txHash3 = _context6.sent;\n          _context6.next = 29;\n          return put(setOperatorSuccess(land, address, wallet.chainId, _txHash3));\n\n        case 29:\n          return _context6.abrupt(\"break\", 31);\n\n        case 30:\n          throw new Error(\"Unknown Land Type: \".concat(land.type));\n\n        case 31:\n          _context6.next = 33;\n          return put(push(locations.activity()));\n\n        case 33:\n          _context6.next = 39;\n          break;\n\n        case 35:\n          _context6.prev = 35;\n          _context6.t1 = _context6[\"catch\"](1);\n          _context6.next = 39;\n          return put(setOperatorFailure(land, address, _context6.t1.message));\n\n        case 39:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[1, 35]]);\n}\n\nfunction handleEditLandRequest(action) {\n  var _action$payload5, land, name, description, metadata, _yield$getWallet11, _yield$getWallet12, wallet, eth, from, landRegistry, txHash, estateRegistry, _txHash4;\n\n  return _regeneratorRuntime.wrap(function handleEditLandRequest$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _action$payload5 = action.payload, land = _action$payload5.land, name = _action$payload5.name, description = _action$payload5.description;\n          metadata = buildMetadata(name, description);\n          _context7.prev = 2;\n          _context7.next = 5;\n          return getWallet();\n\n        case 5:\n          _yield$getWallet11 = _context7.sent;\n          _yield$getWallet12 = _slicedToArray(_yield$getWallet11, 2);\n          wallet = _yield$getWallet12[0];\n          eth = _yield$getWallet12[1];\n          from = Address.fromString(wallet.address);\n          _context7.t0 = land.type;\n          _context7.next = _context7.t0 === LandType.PARCEL ? 13 : _context7.t0 === LandType.ESTATE ? 20 : 27;\n          break;\n\n        case 13:\n          landRegistry = new LANDRegistry(eth, Address.fromString(LAND_REGISTRY_ADDRESS));\n          _context7.next = 16;\n          return call(function () {\n            return landRegistry.methods.updateLandData(land.x, land.y, metadata).send({\n              from: from\n            }).getTxHash();\n          });\n\n        case 16:\n          txHash = _context7.sent;\n          _context7.next = 19;\n          return put(editLandSuccess(land, name, description, wallet.chainId, txHash));\n\n        case 19:\n          return _context7.abrupt(\"break\", 28);\n\n        case 20:\n          estateRegistry = new EstateRegistry(eth, Address.fromString(ESTATE_REGISTRY_ADDRESS));\n          _context7.next = 23;\n          return call(function () {\n            return estateRegistry.methods.updateMetadata(land.id, metadata).send({\n              from: from\n            }).getTxHash();\n          });\n\n        case 23:\n          _txHash4 = _context7.sent;\n          _context7.next = 26;\n          return put(editLandSuccess(land, name, description, wallet.chainId, _txHash4));\n\n        case 26:\n          return _context7.abrupt(\"break\", 28);\n\n        case 27:\n          throw new Error(\"Unknown Land Type: \".concat(land.type));\n\n        case 28:\n          _context7.next = 30;\n          return put(push(locations.activity()));\n\n        case 30:\n          _context7.next = 36;\n          break;\n\n        case 32:\n          _context7.prev = 32;\n          _context7.t1 = _context7[\"catch\"](2);\n          _context7.next = 36;\n          return put(editLandFailure(land, name, description, _context7.t1.message));\n\n        case 36:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[2, 32]]);\n}\n\nfunction handleTransferLandRequest(action) {\n  var _action$payload6, land, address, _yield$getWallet13, _yield$getWallet14, wallet, eth, from, to, landRegistry, id, txHash, estateRegistry, _txHash5;\n\n  return _regeneratorRuntime.wrap(function handleTransferLandRequest$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _action$payload6 = action.payload, land = _action$payload6.land, address = _action$payload6.address;\n          _context8.prev = 1;\n          _context8.next = 4;\n          return getWallet();\n\n        case 4:\n          _yield$getWallet13 = _context8.sent;\n          _yield$getWallet14 = _slicedToArray(_yield$getWallet13, 2);\n          wallet = _yield$getWallet14[0];\n          eth = _yield$getWallet14[1];\n          from = Address.fromString(wallet.address);\n          to = Address.fromString(address);\n          _context8.t0 = land.type;\n          _context8.next = _context8.t0 === LandType.PARCEL ? 13 : _context8.t0 === LandType.ESTATE ? 23 : 30;\n          break;\n\n        case 13:\n          landRegistry = new LANDRegistry(eth, Address.fromString(LAND_REGISTRY_ADDRESS));\n          _context8.next = 16;\n          return call(function () {\n            return landRegistry.methods.encodeTokenId(land.x, land.y).call();\n          });\n\n        case 16:\n          id = _context8.sent;\n          _context8.next = 19;\n          return call(function () {\n            return landRegistry.methods.transferFrom(from, to, id).send({\n              from: from\n            }).getTxHash();\n          });\n\n        case 19:\n          txHash = _context8.sent;\n          _context8.next = 22;\n          return put(transferLandSuccess(land, address, wallet.chainId, txHash));\n\n        case 22:\n          return _context8.abrupt(\"break\", 31);\n\n        case 23:\n          estateRegistry = new EstateRegistry(eth, Address.fromString(ESTATE_REGISTRY_ADDRESS));\n          _context8.next = 26;\n          return call(function () {\n            return estateRegistry.methods.transferFrom(from, to, land.id).send({\n              from: from\n            }).getTxHash();\n          });\n\n        case 26:\n          _txHash5 = _context8.sent;\n          _context8.next = 29;\n          return put(transferLandSuccess(land, address, wallet.chainId, _txHash5));\n\n        case 29:\n          return _context8.abrupt(\"break\", 31);\n\n        case 30:\n          throw new Error(\"Unknown Land Type: \".concat(land.type));\n\n        case 31:\n          _context8.next = 33;\n          return put(push(locations.activity()));\n\n        case 33:\n          _context8.next = 39;\n          break;\n\n        case 35:\n          _context8.prev = 35;\n          _context8.t1 = _context8[\"catch\"](1);\n          _context8.next = 39;\n          return put(transferLandFailure(land, address, _context8.t1.message));\n\n        case 39:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[1, 35]]);\n}\n\nfunction handleFetchLandRequest(action) {\n  var address, _yield$call, _yield$call2, land, authorizations;\n\n  return _regeneratorRuntime.wrap(function handleFetchLandRequest$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          address = action.payload.address;\n          _context9.prev = 1;\n          _context9.next = 4;\n          return call(function () {\n            return manager.fetchLand(address);\n          });\n\n        case 4:\n          _yield$call = _context9.sent;\n          _yield$call2 = _slicedToArray(_yield$call, 2);\n          land = _yield$call2[0];\n          authorizations = _yield$call2[1];\n          _context9.next = 10;\n          return put(fetchLandsSuccess(address, land, authorizations));\n\n        case 10:\n          _context9.next = 16;\n          break;\n\n        case 12:\n          _context9.prev = 12;\n          _context9.t0 = _context9[\"catch\"](1);\n          _context9.next = 16;\n          return put(fetchLandsFailure(address, _context9.t0.message));\n\n        case 16:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[1, 12]]);\n}\n\nfunction handleWallet(action) {\n  var address;\n  return _regeneratorRuntime.wrap(function handleWallet$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          address = action.payload.wallet.address;\n          _context10.next = 3;\n          return put(fetchLandsRequest(address));\n\n        case 3:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/land/sagas.ts"],"names":["landSaga","handleSetUpdateManagerRequest","handleDissolveEstateRequest","handleCreateEstateRequest","handleEditEstateRequest","handleSetOperatorRequest","handleEditLandRequest","handleTransferLandRequest","handleFetchLandRequest","handleWallet","Address","CONNECT_WALLET_SUCCESS","CHANGE_ACCOUNT","takeLatest","call","put","takeEvery","all","FETCH_LANDS_REQUEST","fetchLandsFailure","fetchLandsSuccess","fetchLandsRequest","TRANSFER_LAND_REQUEST","transferLandSuccess","transferLandFailure","EDIT_LAND_REQUEST","editLandSuccess","editLandFailure","SET_OPERATOR_REQUEST","setOperatorSuccess","setOperatorFailure","CREATE_ESTATE_REQUEST","createEstateSuccess","createEstateFailure","editEstateSuccess","editEstateFailure","EDIT_ESTATE_REQUEST","DISSOLVE_ESTATE_REQUEST","dissolveEstateSuccess","dissolveEstateFailure","SET_UPDATE_MANAGER_REQUEST","setUpdateManagerSuccess","setUpdateManagerFailure","manager","LANDRegistry","LAND_REGISTRY_ADDRESS","ESTATE_REGISTRY_ADDRESS","EstateRegistry","push","locations","closeModal","getWallet","splitCoords","buildMetadata","LandType","action","payload","address","isApproved","type","wallet","eth","from","fromString","PARCEL","ESTATE","landRegistry","methods","setUpdateManager","send","getTxHash","txHash","chainId","estateRegistry","activity","message","land","Error","parcels","map","parcel","encodeTokenId","x","y","tokenIds","transferManyLands","id","name","description","coords","xs","ys","metadata","createEstateWithMetadata","toAdd","toRemove","length","xsToAdd","ysToAdd","transferManyLandToEstate","operator","ZERO","tokenId","setUpdateOperator","updateLandData","updateMetadata","to","transferFrom","fetchLand","authorizations"],"mappings":"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","sourcesContent":["import { Eth } from 'web3x/eth'\nimport { Address } from 'web3x/address'\nimport {\n  CONNECT_WALLET_SUCCESS,\n  CHANGE_ACCOUNT,\n  ConnectWalletSuccessAction,\n  ChangeAccountAction\n} from 'decentraland-dapps/dist/modules/wallet/actions'\nimport { Wallet } from 'decentraland-dapps/dist/modules/wallet/types'\nimport { takeLatest, call, put, takeEvery, all } from 'redux-saga/effects'\nimport {\n  FETCH_LANDS_REQUEST,\n  FetchLandsRequestAction,\n  fetchLandsFailure,\n  fetchLandsSuccess,\n  fetchLandsRequest,\n  TRANSFER_LAND_REQUEST,\n  TransferLandRequestAction,\n  transferLandSuccess,\n  transferLandFailure,\n  EDIT_LAND_REQUEST,\n  EditLandRequestAction,\n  editLandSuccess,\n  editLandFailure,\n  SET_OPERATOR_REQUEST,\n  SetOperatorRequestAction,\n  setOperatorSuccess,\n  setOperatorFailure,\n  CREATE_ESTATE_REQUEST,\n  CreateEstateRequestAction,\n  createEstateSuccess,\n  createEstateFailure,\n  EditEstateRequestAction,\n  editEstateSuccess,\n  editEstateFailure,\n  EDIT_ESTATE_REQUEST,\n  DISSOLVE_ESTATE_REQUEST,\n  DissolveEstateRequestAction,\n  dissolveEstateSuccess,\n  dissolveEstateFailure,\n  SET_UPDATE_MANAGER_REQUEST,\n  SetUpdateManagerRequestAction,\n  setUpdateManagerSuccess,\n  setUpdateManagerFailure\n} from './actions'\nimport { manager } from 'lib/api/manager'\nimport { LANDRegistry } from 'contracts/LANDRegistry'\nimport { LAND_REGISTRY_ADDRESS, ESTATE_REGISTRY_ADDRESS } from 'modules/common/contracts'\nimport { EstateRegistry } from 'contracts/EstateRegistry'\nimport { push } from 'connected-react-router'\nimport { locations } from 'routing/locations'\nimport { closeModal } from 'modules/modal/actions'\nimport { getWallet } from 'modules/wallet/utils'\nimport { splitCoords, buildMetadata } from './utils'\nimport { Land, LandType, Authorization } from './types'\n\nexport function* landSaga() {\n  yield takeEvery(SET_UPDATE_MANAGER_REQUEST, handleSetUpdateManagerRequest)\n  yield takeEvery(DISSOLVE_ESTATE_REQUEST, handleDissolveEstateRequest)\n  yield takeEvery(EDIT_ESTATE_REQUEST, handleEditEstateRequest)\n  yield takeEvery(CREATE_ESTATE_REQUEST, handleCreateEstateRequest)\n  yield takeEvery(SET_OPERATOR_REQUEST, handleSetOperatorRequest)\n  yield takeEvery(EDIT_LAND_REQUEST, handleEditLandRequest)\n  yield takeEvery(TRANSFER_LAND_REQUEST, handleTransferLandRequest)\n  yield takeEvery(FETCH_LANDS_REQUEST, handleFetchLandRequest)\n  yield takeLatest(CONNECT_WALLET_SUCCESS, handleWallet)\n  yield takeLatest(CHANGE_ACCOUNT, handleWallet)\n}\n\nfunction* handleSetUpdateManagerRequest(action: SetUpdateManagerRequestAction) {\n  const { address, isApproved, type } = action.payload\n  try {\n    const [wallet, eth]: [Wallet, Eth] = yield getWallet()\n    const from = Address.fromString(wallet.address)\n    const manager = Address.fromString(address)\n    switch (type) {\n      case LandType.PARCEL: {\n        const landRegistry = new LANDRegistry(eth, Address.fromString(LAND_REGISTRY_ADDRESS))\n        const txHash: string = yield call(() =>\n          landRegistry.methods\n            .setUpdateManager(from, manager, isApproved)\n            .send({ from })\n            .getTxHash()\n        )\n        yield put(setUpdateManagerSuccess(address, type, isApproved, wallet.chainId, txHash))\n        break\n      }\n      case LandType.ESTATE: {\n        const estateRegistry = new EstateRegistry(eth, Address.fromString(ESTATE_REGISTRY_ADDRESS))\n        const txHash: string = yield call(() =>\n          estateRegistry.methods\n            .setUpdateManager(from, manager, isApproved)\n            .send({ from })\n            .getTxHash()\n        )\n        yield put(setUpdateManagerSuccess(address, type, isApproved, wallet.chainId, txHash))\n        break\n      }\n    }\n    yield put(push(locations.activity()))\n  } catch (error) {\n    yield put(setUpdateManagerFailure(address, type, isApproved, error.message))\n  }\n}\n\nfunction* handleDissolveEstateRequest(action: DissolveEstateRequestAction) {\n  const { land } = action.payload\n\n  try {\n    if (land.type !== LandType.ESTATE) {\n      throw new Error(`Invalid LandType: \"${land.type}\"`)\n    }\n    const [wallet, eth]: [Wallet, Eth] = yield getWallet()\n    const from = Address.fromString(wallet.address)\n    const landRegistry = new LANDRegistry(eth, Address.fromString(LAND_REGISTRY_ADDRESS))\n    const estateRegistry = new EstateRegistry(eth, Address.fromString(ESTATE_REGISTRY_ADDRESS))\n    const tokenIds: string[] = yield all(land.parcels!.map(parcel => landRegistry.methods.encodeTokenId(parcel.x, parcel.y).call()))\n    const txHash: string = yield call(() =>\n      estateRegistry.methods\n        .transferManyLands(land.id, tokenIds, from)\n        .send({ from })\n        .getTxHash()\n    )\n    yield put(dissolveEstateSuccess(land, wallet.chainId, txHash))\n    yield put(closeModal('DissolveModal'))\n    yield put(push(locations.activity()))\n  } catch (error) {\n    yield put(dissolveEstateFailure(land, error.message))\n  }\n}\n\nfunction* handleCreateEstateRequest(action: CreateEstateRequestAction) {\n  const { name, description, coords } = action.payload\n  try {\n    const [wallet, eth]: [Wallet, Eth] = yield getWallet()\n    const from = Address.fromString(wallet.address)\n    const [xs, ys] = splitCoords(coords)\n    const landRegistry = new LANDRegistry(eth, Address.fromString(LAND_REGISTRY_ADDRESS))\n    const metadata = buildMetadata(name, description)\n    const txHash: string = yield call(() =>\n      landRegistry.methods\n        .createEstateWithMetadata(xs, ys, from, metadata)\n        .send({ from })\n        .getTxHash()\n    )\n\n    yield put(createEstateSuccess(name, description, coords, wallet.chainId, txHash))\n    yield put(closeModal('EstateEditorModal'))\n    yield put(push(locations.activity()))\n  } catch (error) {\n    yield put(createEstateFailure(name, description, coords, error.message))\n  }\n}\n\nfunction* handleEditEstateRequest(action: EditEstateRequestAction) {\n  const { land, toAdd, toRemove } = action.payload\n  try {\n    const [wallet, eth]: [Wallet, Eth] = yield getWallet()\n    const from = Address.fromString(wallet.address)\n    const landRegistry = new LANDRegistry(eth, Address.fromString(LAND_REGISTRY_ADDRESS))\n\n    if (toAdd.length > 0) {\n      const [xsToAdd, ysToAdd] = splitCoords(toAdd)\n      const txHash: string = yield call(() =>\n        landRegistry.methods\n          .transferManyLandToEstate(xsToAdd, ysToAdd, land.id)\n          .send({ from })\n          .getTxHash()\n      )\n      yield put(editEstateSuccess(land, toAdd, 'add', wallet.chainId, txHash))\n    }\n\n    if (toRemove.length > 0) {\n      const estateRegistry = new EstateRegistry(eth, Address.fromString(ESTATE_REGISTRY_ADDRESS))\n      const tokenIds: string[] = yield all(toRemove.map(({ x, y }) => landRegistry.methods.encodeTokenId(x, y).call()))\n      const txHash: string = yield call(() =>\n        estateRegistry.methods\n          .transferManyLands(land.id, tokenIds, from)\n          .send({ from })\n          .getTxHash()\n      )\n      yield put(editEstateSuccess(land, toRemove, 'remove', wallet.chainId, txHash))\n    }\n    yield put(closeModal('EstateEditorModal'))\n    yield put(push(locations.activity()))\n  } catch (error) {\n    yield put(editEstateFailure(land, toAdd, toRemove, error.message))\n  }\n}\n\nfunction* handleSetOperatorRequest(action: SetOperatorRequestAction) {\n  const { land, address } = action.payload\n\n  try {\n    const [wallet, eth]: [Wallet, Eth] = yield getWallet()\n    const from = Address.fromString(wallet.address)\n    const operator = address ? Address.fromString(address) : Address.ZERO\n\n    switch (land.type) {\n      case LandType.PARCEL: {\n        const landRegistry = new LANDRegistry(eth, Address.fromString(LAND_REGISTRY_ADDRESS))\n        const tokenId: string = yield call(() => landRegistry.methods.encodeTokenId(land.x!, land.y!).call())\n        const txHash: string = yield call(() =>\n          landRegistry.methods\n            .setUpdateOperator(tokenId, operator)\n            .send({ from })\n            .getTxHash()\n        )\n        yield put(setOperatorSuccess(land, address, wallet.chainId, txHash))\n        break\n      }\n      case LandType.ESTATE: {\n        const estateRegistry = new EstateRegistry(eth, Address.fromString(ESTATE_REGISTRY_ADDRESS))\n        const txHash: string = yield call(() =>\n          estateRegistry.methods\n            .setUpdateOperator(land.id, operator)\n            .send({ from })\n            .getTxHash()\n        )\n        yield put(setOperatorSuccess(land, address, wallet.chainId, txHash))\n        break\n      }\n      default:\n        throw new Error(`Unknown Land Type: ${land.type}`)\n    }\n    yield put(push(locations.activity()))\n  } catch (error) {\n    yield put(setOperatorFailure(land, address, error.message))\n  }\n}\n\nfunction* handleEditLandRequest(action: EditLandRequestAction) {\n  const { land, name, description } = action.payload\n\n  const metadata = buildMetadata(name, description)\n\n  try {\n    const [wallet, eth]: [Wallet, Eth] = yield getWallet()\n    const from = Address.fromString(wallet.address)\n\n    switch (land.type) {\n      case LandType.PARCEL: {\n        const landRegistry = new LANDRegistry(eth, Address.fromString(LAND_REGISTRY_ADDRESS))\n        const txHash: string = yield call(() =>\n          landRegistry.methods\n            .updateLandData(land.x!, land.y!, metadata)\n            .send({ from })\n            .getTxHash()\n        )\n        yield put(editLandSuccess(land, name, description, wallet.chainId, txHash))\n        break\n      }\n      case LandType.ESTATE: {\n        const estateRegistry = new EstateRegistry(eth, Address.fromString(ESTATE_REGISTRY_ADDRESS))\n        const txHash: string = yield call(() =>\n          estateRegistry.methods\n            .updateMetadata(land.id, metadata)\n            .send({ from })\n            .getTxHash()\n        )\n        yield put(editLandSuccess(land, name, description, wallet.chainId, txHash))\n        break\n      }\n      default:\n        throw new Error(`Unknown Land Type: ${land.type}`)\n    }\n    yield put(push(locations.activity()))\n  } catch (error) {\n    yield put(editLandFailure(land, name, description, error.message))\n  }\n}\n\nfunction* handleTransferLandRequest(action: TransferLandRequestAction) {\n  const { land, address } = action.payload\n\n  try {\n    const [wallet, eth]: [Wallet, Eth] = yield getWallet()\n    const from = Address.fromString(wallet.address)\n    const to = Address.fromString(address)\n\n    switch (land.type) {\n      case LandType.PARCEL: {\n        const landRegistry = new LANDRegistry(eth, Address.fromString(LAND_REGISTRY_ADDRESS))\n        const id: string = yield call(() => landRegistry.methods.encodeTokenId(land.x!, land.y!).call())\n        const txHash: string = yield call(() =>\n          landRegistry.methods\n            .transferFrom(from, to, id)\n            .send({ from })\n            .getTxHash()\n        )\n        yield put(transferLandSuccess(land, address, wallet.chainId, txHash))\n        break\n      }\n      case LandType.ESTATE: {\n        const estateRegistry = new EstateRegistry(eth, Address.fromString(ESTATE_REGISTRY_ADDRESS))\n        const txHash: string = yield call(() =>\n          estateRegistry.methods\n            .transferFrom(from, to, land.id)\n            .send({ from })\n            .getTxHash()\n        )\n        yield put(transferLandSuccess(land, address, wallet.chainId, txHash))\n        break\n      }\n      default:\n        throw new Error(`Unknown Land Type: ${land.type}`)\n    }\n    yield put(push(locations.activity()))\n  } catch (error) {\n    yield put(transferLandFailure(land, address, error.message))\n  }\n}\n\nfunction* handleFetchLandRequest(action: FetchLandsRequestAction) {\n  const { address } = action.payload\n  try {\n    const [land, authorizations]: [Land[], Authorization[]] = yield call(() => manager.fetchLand(address))\n    yield put(fetchLandsSuccess(address, land, authorizations))\n  } catch (error) {\n    yield put(fetchLandsFailure(address, error.message))\n  }\n}\n\nfunction* handleWallet(action: ConnectWalletSuccessAction | ChangeAccountAction) {\n  const { address } = action.payload.wallet\n  yield put(fetchLandsRequest(address))\n}\n"]},"metadata":{},"sourceType":"module"}