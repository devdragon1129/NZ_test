{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/displayPass.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { SerializationHelper } from '../Misc/decorators';\n/**\r\n * DisplayPassPostProcess which produces an output the same as it's input\r\n */\n\nvar DisplayPassPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(DisplayPassPostProcess, _super);\n  /**\r\n   * Creates the DisplayPassPostProcess\r\n   * @param name The name of the effect.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   */\n\n\n  function DisplayPassPostProcess(name, options, camera, samplingMode, engine, reusable) {\n    return _super.call(this, name, \"displayPass\", [\"passSampler\"], [\"passSampler\"], options, camera, samplingMode, engine, reusable) || this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"DisplayPassPostProcess\" string\r\n   */\n\n\n  DisplayPassPostProcess.prototype.getClassName = function () {\n    return \"DisplayPassPostProcess\";\n  };\n  /** @hidden */\n\n\n  DisplayPassPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new DisplayPassPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  return DisplayPassPostProcess;\n}(PostProcess);\n\nexport { DisplayPassPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.DisplayPassPostProcess\"] = DisplayPassPostProcess;","map":null,"metadata":{},"sourceType":"module"}