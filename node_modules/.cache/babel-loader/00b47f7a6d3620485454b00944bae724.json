{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEnv = exports.getDefaultEnv = exports.parseEnvVar = exports.isEnv = exports.getEnvList = exports.Env = void 0;\n\nvar location_1 = require(\"./location\");\n\nvar Env;\n\n(function (Env) {\n  Env[\"DEVELOPMENT\"] = \"dev\";\n  Env[\"STAGING\"] = \"stg\";\n  Env[\"PRODUCTION\"] = \"prod\";\n})(Env = exports.Env || (exports.Env = {}));\n/**\n * Returns an array with all the possible envs\n */\n\n\nfunction getEnvList() {\n  return Object.values(Env);\n}\n\nexports.getEnvList = getEnvList;\n/**\n * Helper to detect if a string value is an Env\n * @param value\n * @returns boolean\n */\n\nfunction isEnv(value) {\n  return getEnvList().includes(value);\n}\n\nexports.isEnv = isEnv;\n/**\n * Helper to convert a string value into an Env type or throw if not valid\n * @param envVar - An environment variable to be parsed\n * @returns - The same envVar value as Env\n */\n\nfunction parseEnvVar(envVar) {\n  if (isEnv(envVar)) {\n    return envVar;\n  } else {\n    throw new Error(\"Invalid value for DCL_DEFAULT_ENV. Found \\\"\".concat(envVar, \"\\\", possible values are \").concat(getEnvList().map(function (env) {\n      return \"\\\"\".concat(env, \"\\\"\");\n    }).join(', '), \".\"));\n  }\n}\n\nexports.parseEnvVar = parseEnvVar;\n/**\n * Return the default Env\n * @param envVars - Process environment vars\n * @returns Env\n */\n\nfunction getDefaultEnv() {\n  var envVars = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var DCL_DEFAULT_ENV = envVars.DCL_DEFAULT_ENV,\n      REACT_APP_DCL_DEFAULT_ENV = envVars.REACT_APP_DCL_DEFAULT_ENV;\n\n  if (DCL_DEFAULT_ENV && REACT_APP_DCL_DEFAULT_ENV && DCL_DEFAULT_ENV !== REACT_APP_DCL_DEFAULT_ENV) {\n    throw new Error('You have defined both DCL_DEFAULT_ENV and REACT_APP_DCL_DEFAULT_ENV with different values');\n  }\n\n  if (DCL_DEFAULT_ENV) {\n    return parseEnvVar(DCL_DEFAULT_ENV);\n  }\n\n  if (REACT_APP_DCL_DEFAULT_ENV) {\n    return parseEnvVar(REACT_APP_DCL_DEFAULT_ENV);\n  }\n\n  return Env.PRODUCTION;\n}\n\nexports.getDefaultEnv = getDefaultEnv;\n/**\n * Returns the Env to be used\n * @returns Env\n */\n\nfunction getEnv() {\n  var envFromQueryParam = (0, location_1.getEnvFromQueryParam)(window.location);\n\n  if (envFromQueryParam) {\n    return envFromQueryParam;\n  }\n\n  var envFromTLD = (0, location_1.getEnvFromTLD)(window.location);\n\n  if (envFromTLD) {\n    return envFromTLD;\n  }\n\n  return getDefaultEnv(process.env);\n}\n\nexports.getEnv = getEnv;","map":null,"metadata":{},"sourceType":"script"}