{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Logger } from \"../Misc/logger\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Action } from \"./action\";\nimport { _TypeStore } from '../Misc/typeStore';\n/**\r\n * This defines an action responsible to toggle a boolean once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar SwitchBooleanAction =\n/** @class */\nfunction (_super) {\n  __extends(SwitchBooleanAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param target defines the object containing the boolean\r\n   * @param propertyPath defines the path to the boolean property in the target object\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function SwitchBooleanAction(triggerOptions, target, propertyPath, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.propertyPath = propertyPath;\n    _this._target = _this._effectiveTarget = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  SwitchBooleanAction.prototype._prepare = function () {\n    this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\n    this._property = this._getProperty(this.propertyPath);\n  };\n  /**\r\n   * Execute the action toggle the boolean value.\r\n   */\n\n\n  SwitchBooleanAction.prototype.execute = function () {\n    this._effectiveTarget[this._property] = !this._effectiveTarget[this._property];\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  SwitchBooleanAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"SwitchBooleanAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }]\n    }, parent);\n  };\n\n  return SwitchBooleanAction;\n}(Action);\n\nexport { SwitchBooleanAction };\n/**\r\n * This defines an action responsible to set a the state field of the target\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar SetStateAction =\n/** @class */\nfunction (_super) {\n  __extends(SetStateAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param target defines the object containing the state property\r\n   * @param value defines the value to store in the state field\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function SetStateAction(triggerOptions, target, value, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.value = value;\n    _this._target = target;\n    return _this;\n  }\n  /**\r\n   * Execute the action and store the value on the target state property.\r\n   */\n\n\n  SetStateAction.prototype.execute = function () {\n    this._target.state = this.value;\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  SetStateAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"SetStateAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"value\",\n        value: this.value\n      }]\n    }, parent);\n  };\n\n  return SetStateAction;\n}(Action);\n\nexport { SetStateAction };\n/**\r\n * This defines an action responsible to set a property of the target\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar SetValueAction =\n/** @class */\nfunction (_super) {\n  __extends(SetValueAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param target defines the object containing the property\r\n   * @param propertyPath defines the path of the property to set in the target\r\n   * @param value defines the value to set in the property\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function SetValueAction(triggerOptions, target, propertyPath, value, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.propertyPath = propertyPath;\n    _this.value = value;\n    _this._target = _this._effectiveTarget = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  SetValueAction.prototype._prepare = function () {\n    this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\n    this._property = this._getProperty(this.propertyPath);\n  };\n  /**\r\n   * Execute the action and set the targetted property to the desired value.\r\n   */\n\n\n  SetValueAction.prototype.execute = function () {\n    this._effectiveTarget[this._property] = this.value;\n\n    if (this._target.markAsDirty) {\n      this._target.markAsDirty(this._property);\n    }\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  SetValueAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"SetValueAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }, {\n        name: \"value\",\n        value: Action._SerializeValueAsString(this.value)\n      }]\n    }, parent);\n  };\n\n  return SetValueAction;\n}(Action);\n\nexport { SetValueAction };\n/**\r\n * This defines an action responsible to increment the target value\r\n *  to a desired value once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar IncrementValueAction =\n/** @class */\nfunction (_super) {\n  __extends(IncrementValueAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param target defines the object containing the property\r\n   * @param propertyPath defines the path of the property to increment in the target\r\n   * @param value defines the value value we should increment the property by\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function IncrementValueAction(triggerOptions, target, propertyPath, value, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.propertyPath = propertyPath;\n    _this.value = value;\n    _this._target = _this._effectiveTarget = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  IncrementValueAction.prototype._prepare = function () {\n    this._effectiveTarget = this._getEffectiveTarget(this._effectiveTarget, this.propertyPath);\n    this._property = this._getProperty(this.propertyPath);\n\n    if (typeof this._effectiveTarget[this._property] !== \"number\") {\n      Logger.Warn(\"Warning: IncrementValueAction can only be used with number values\");\n    }\n  };\n  /**\r\n   * Execute the action and increment the target of the value amount.\r\n   */\n\n\n  IncrementValueAction.prototype.execute = function () {\n    this._effectiveTarget[this._property] += this.value;\n\n    if (this._target.markAsDirty) {\n      this._target.markAsDirty(this._property);\n    }\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  IncrementValueAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"IncrementValueAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }, {\n        name: \"value\",\n        value: Action._SerializeValueAsString(this.value)\n      }]\n    }, parent);\n  };\n\n  return IncrementValueAction;\n}(Action);\n\nexport { IncrementValueAction };\n/**\r\n * This defines an action responsible to start an animation once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar PlayAnimationAction =\n/** @class */\nfunction (_super) {\n  __extends(PlayAnimationAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param target defines the target animation or animation name\r\n   * @param from defines from where the animation should start (animation frame)\r\n   * @param end defines where the animation should stop (animation frame)\r\n   * @param loop defines if the animation should loop or stop after the first play\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function PlayAnimationAction(triggerOptions, target, from, to, loop, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.from = from;\n    _this.to = to;\n    _this.loop = loop;\n    _this._target = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  PlayAnimationAction.prototype._prepare = function () {};\n  /**\r\n   * Execute the action and play the animation.\r\n   */\n\n\n  PlayAnimationAction.prototype.execute = function () {\n    var scene = this._actionManager.getScene();\n\n    scene.beginAnimation(this._target, this.from, this.to, this.loop);\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  PlayAnimationAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"PlayAnimationAction\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"from\",\n        value: String(this.from)\n      }, {\n        name: \"to\",\n        value: String(this.to)\n      }, {\n        name: \"loop\",\n        value: Action._SerializeValueAsString(this.loop) || false\n      }]\n    }, parent);\n  };\n\n  return PlayAnimationAction;\n}(Action);\n\nexport { PlayAnimationAction };\n/**\r\n * This defines an action responsible to stop an animation once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar StopAnimationAction =\n/** @class */\nfunction (_super) {\n  __extends(StopAnimationAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param target defines the target animation or animation name\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function StopAnimationAction(triggerOptions, target, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this._target = target;\n    return _this;\n  }\n  /** @hidden */\n\n\n  StopAnimationAction.prototype._prepare = function () {};\n  /**\r\n   * Execute the action and stop the animation.\r\n   */\n\n\n  StopAnimationAction.prototype.execute = function () {\n    var scene = this._actionManager.getScene();\n\n    scene.stopAnimation(this._target);\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  StopAnimationAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"StopAnimationAction\",\n      properties: [Action._GetTargetProperty(this._target)]\n    }, parent);\n  };\n\n  return StopAnimationAction;\n}(Action);\n\nexport { StopAnimationAction };\n/**\r\n * This defines an action responsible that does nothing once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar DoNothingAction =\n/** @class */\nfunction (_super) {\n  __extends(DoNothingAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function DoNothingAction(triggerOptions, condition) {\n    if (triggerOptions === void 0) {\n      triggerOptions = 0;\n    }\n\n    return _super.call(this, triggerOptions, condition) || this;\n  }\n  /**\r\n   * Execute the action and do nothing.\r\n   */\n\n\n  DoNothingAction.prototype.execute = function () {};\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  DoNothingAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"DoNothingAction\",\n      properties: []\n    }, parent);\n  };\n\n  return DoNothingAction;\n}(Action);\n\nexport { DoNothingAction };\n/**\r\n * This defines an action responsible to trigger several actions once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar CombineAction =\n/** @class */\nfunction (_super) {\n  __extends(CombineAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param children defines the list of aggregated animations to run\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function CombineAction(triggerOptions, children, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.children = children;\n    return _this;\n  }\n  /** @hidden */\n\n\n  CombineAction.prototype._prepare = function () {\n    for (var index = 0; index < this.children.length; index++) {\n      this.children[index]._actionManager = this._actionManager;\n\n      this.children[index]._prepare();\n    }\n  };\n  /**\r\n   * Execute the action and executes all the aggregated actions.\r\n   */\n\n\n  CombineAction.prototype.execute = function (evt) {\n    for (var index = 0; index < this.children.length; index++) {\n      this.children[index].execute(evt);\n    }\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  CombineAction.prototype.serialize = function (parent) {\n    var serializationObject = _super.prototype._serialize.call(this, {\n      name: \"CombineAction\",\n      properties: [],\n      combine: []\n    }, parent);\n\n    for (var i = 0; i < this.children.length; i++) {\n      serializationObject.combine.push(this.children[i].serialize(null));\n    }\n\n    return serializationObject;\n  };\n\n  return CombineAction;\n}(Action);\n\nexport { CombineAction };\n/**\r\n * This defines an action responsible to run code (external event) once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar ExecuteCodeAction =\n/** @class */\nfunction (_super) {\n  __extends(ExecuteCodeAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param func defines the callback function to run\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function ExecuteCodeAction(triggerOptions, func, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this.func = func;\n    return _this;\n  }\n  /**\r\n   * Execute the action and run the attached code.\r\n   */\n\n\n  ExecuteCodeAction.prototype.execute = function (evt) {\n    this.func(evt);\n  };\n\n  return ExecuteCodeAction;\n}(Action);\n\nexport { ExecuteCodeAction };\n/**\r\n * This defines an action responsible to set the parent property of the target once triggered.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions\r\n */\n\nvar SetParentAction =\n/** @class */\nfunction (_super) {\n  __extends(SetParentAction, _super);\n  /**\r\n   * Instantiate the action\r\n   * @param triggerOptions defines the trigger options\r\n   * @param target defines the target containing the parent property\r\n   * @param parent defines from where the animation should start (animation frame)\r\n   * @param condition defines the trigger related conditions\r\n   */\n\n\n  function SetParentAction(triggerOptions, target, parent, condition) {\n    var _this = _super.call(this, triggerOptions, condition) || this;\n\n    _this._target = target;\n    _this._parent = parent;\n    return _this;\n  }\n  /** @hidden */\n\n\n  SetParentAction.prototype._prepare = function () {};\n  /**\r\n   * Execute the action and set the parent property.\r\n   */\n\n\n  SetParentAction.prototype.execute = function () {\n    if (this._target.parent === this._parent) {\n      return;\n    }\n\n    var invertParentWorldMatrix = this._parent.getWorldMatrix().clone();\n\n    invertParentWorldMatrix.invert();\n    this._target.position = Vector3.TransformCoordinates(this._target.position, invertParentWorldMatrix);\n    this._target.parent = this._parent;\n  };\n  /**\r\n   * Serializes the actions and its related information.\r\n   * @param parent defines the object to serialize in\r\n   * @returns the serialized object\r\n   */\n\n\n  SetParentAction.prototype.serialize = function (parent) {\n    return _super.prototype._serialize.call(this, {\n      name: \"SetParentAction\",\n      properties: [Action._GetTargetProperty(this._target), Action._GetTargetProperty(this._parent)]\n    }, parent);\n  };\n\n  return SetParentAction;\n}(Action);\n\nexport { SetParentAction };\n_TypeStore.RegisteredTypes[\"BABYLON.SetParentAction\"] = SetParentAction;\n_TypeStore.RegisteredTypes[\"BABYLON.ExecuteCodeAction\"] = ExecuteCodeAction;\n_TypeStore.RegisteredTypes[\"BABYLON.DoNothingAction\"] = DoNothingAction;\n_TypeStore.RegisteredTypes[\"BABYLON.StopAnimationAction\"] = StopAnimationAction;\n_TypeStore.RegisteredTypes[\"BABYLON.PlayAnimationAction\"] = PlayAnimationAction;\n_TypeStore.RegisteredTypes[\"BABYLON.IncrementValueAction\"] = IncrementValueAction;\n_TypeStore.RegisteredTypes[\"BABYLON.SetValueAction\"] = SetValueAction;\n_TypeStore.RegisteredTypes[\"BABYLON.SetStateAction\"] = SetStateAction;\n_TypeStore.RegisteredTypes[\"BABYLON.SetParentAction\"] = SetParentAction;","map":null,"metadata":{},"sourceType":"module"}