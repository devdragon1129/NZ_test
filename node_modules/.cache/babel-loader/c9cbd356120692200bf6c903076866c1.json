{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Should be called to pad string to expected length\n *\n * @method leftPad\n * @param {String} str to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\n\nexports.leftPad = function (str, chars) {\n  var sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';\n  var hasPrefix = /^0x/i.test(str) || typeof str === 'number';\n  str = str.toString().replace(/^0x/i, '');\n  var padding = chars - str.length + 1 >= 0 ? chars - str.length + 1 : 0;\n  return (hasPrefix ? '0x' : '') + new Array(padding).join(sign ? sign : '0') + str;\n};\n/**\n * Should be called to pad string to expected length\n *\n * @method rightPad\n * @param {String} str to be padded\n * @param {Number} chars that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\n\n\nexports.rightPad = function (str, chars) {\n  var sign = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '0';\n  var hasPrefix = /^0x/i.test(str) || typeof str === 'number';\n  str = str.toString().replace(/^0x/i, '');\n  var padding = chars - str.length + 1 >= 0 ? chars - str.length + 1 : 0;\n  return (hasPrefix ? '0x' : '') + str + new Array(padding).join(sign ? sign : '0');\n};","map":null,"metadata":{},"sourceType":"script"}