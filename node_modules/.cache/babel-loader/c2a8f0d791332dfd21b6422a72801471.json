{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/grain.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize, SerializationHelper } from '../Misc/decorators';\n/**\r\n * The GrainPostProcess adds noise to the image at mid luminance levels\r\n */\n\nvar GrainPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(GrainPostProcess, _super);\n  /**\r\n   * Creates a new instance of @see GrainPostProcess\r\n   * @param name The name of the effect.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function GrainPostProcess(name, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"grain\", [\"intensity\", \"animatedSeed\"], [], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, blockCompilation) || this;\n    /**\r\n     * The intensity of the grain added (default: 30)\r\n     */\n\n\n    _this.intensity = 30;\n    /**\r\n     * If the grain should be randomized on every frame\r\n     */\n\n    _this.animated = false;\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setFloat('intensity', _this.intensity);\n      effect.setFloat('animatedSeed', _this.animated ? Math.random() + 1 : 1);\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"GrainPostProcess\" string\r\n   */\n\n\n  GrainPostProcess.prototype.getClassName = function () {\n    return \"GrainPostProcess\";\n  };\n  /** @hidden */\n\n\n  GrainPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new GrainPostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], GrainPostProcess.prototype, \"intensity\", void 0);\n\n  __decorate([serialize()], GrainPostProcess.prototype, \"animated\", void 0);\n\n  return GrainPostProcess;\n}(PostProcess);\n\nexport { GrainPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.GrainPostProcess\"] = GrainPostProcess;","map":null,"metadata":{},"sourceType":"module"}