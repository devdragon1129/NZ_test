{"ast":null,"code":"import _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(itemSaga),\n    _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(handleResetItemRequest);\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport PQueue from 'p-queue';\nimport { Contract } from 'ethers';\nimport { getLocation, push, replace } from 'connected-react-router';\nimport { takeEvery, call, put, takeLatest, select, take, delay, fork, race, cancelled } from 'redux-saga/effects';\nimport { channel } from 'redux-saga';\nimport { Network } from '@dcl/schemas';\nimport { ContractName, getContract } from 'decentraland-transactions';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { getOpenModals } from 'decentraland-dapps/dist/modules/modal/selectors';\nimport { closeModal } from 'decentraland-dapps/dist/modules/modal/actions';\nimport { sendTransaction } from 'decentraland-dapps/dist/modules/wallet/utils';\nimport { getChainIdByNetwork } from 'decentraland-dapps/dist/lib/eth';\nimport { EntityType } from 'dcl-catalyst-commons';\nimport { fetchItemsSuccess, fetchItemsFailure, FETCH_ITEMS_REQUEST, fetchItemSuccess, fetchItemFailure, FETCH_ITEM_REQUEST, saveItemRequest, saveItemSuccess, saveItemFailure, SAVE_ITEM_REQUEST, SAVE_ITEM_SUCCESS, setPriceAndBeneficiarySuccess, setPriceAndBeneficiaryFailure, SET_PRICE_AND_BENEFICIARY_REQUEST, deleteItemSuccess, deleteItemFailure, DELETE_ITEM_REQUEST, SET_COLLECTION, SET_ITEMS_TOKEN_ID_REQUEST, SET_ITEMS_TOKEN_ID_FAILURE, setItemsTokenIdRequest, setItemsTokenIdSuccess, setItemsTokenIdFailure, FETCH_COLLECTION_ITEMS_REQUEST, fetchCollectionItemsSuccess, fetchCollectionItemsFailure, fetchRaritiesSuccess, fetchRaritiesFailure, FETCH_RARITIES_REQUEST, FETCH_ITEMS_SUCCESS, RESCUE_ITEMS_REQUEST, rescueItemsSuccess, rescueItemsFailure, RESET_ITEM_REQUEST, resetItemSuccess, resetItemFailure, SAVE_ITEM_FAILURE, DOWNLOAD_ITEM_REQUEST, downloadItemFailure, downloadItemSuccess, SAVE_MULTIPLE_ITEMS_REQUEST, saveMultipleItemsSuccess, CANCEL_SAVE_MULTIPLE_ITEMS, saveMultipleItemsCancelled, rescueItemsChunkSuccess, FETCH_COLLECTION_ITEMS_SUCCESS, DELETE_ITEM_SUCCESS, fetchCollectionItemsRequest, SAVE_MULTIPLE_ITEMS_SUCCESS, SAVE_MULTIPLE_ITEMS_CANCELLED, fetchItemsRequest } from './actions';\nimport { fromRemoteItem } from 'lib/api/transformations';\nimport { isThirdParty } from 'lib/urn';\nimport { fetchItemCurationRequest } from 'modules/curations/itemCuration/actions';\nimport { updateProgressSaveMultipleItems } from 'modules/ui/createMultipleItems/action';\nimport { isLocked } from 'modules/collection/utils';\nimport { locations } from 'routing/locations';\nimport { DEFAULT_PAGE } from 'lib/api/pagination';\nimport { getCollection, getCollections } from 'modules/collection/selectors';\nimport { getItemId } from 'modules/location/selectors';\nimport { MAX_ITEMS } from 'modules/collection/constants';\nimport { fetchEntitiesByPointersRequest } from 'modules/entity/actions';\nimport { takeLatestCancellable } from 'modules/common/utils';\nimport { waitForTx } from 'modules/transaction/utils';\nimport { getMethodData } from 'modules/wallet/utils';\nimport { getCatalystContentUrl } from 'lib/api/peer';\nimport { downloadZip } from 'lib/zip';\nimport { calculateFinalSize, reHashOlderContents } from './export';\nimport { BodyShapeType, IMAGE_PATH, THUMBNAIL_PATH } from './types';\nimport { getData as getItemsById, getItems, getEntityByItemId, getCollectionItems, getItem, getPaginationData } from './selectors';\nimport { ItemTooBigError } from './errors';\nimport { buildZipContents, getMetadata, groupsOf, isValidText, generateCatalystImage, MAX_FILE_SIZE } from './utils';\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nexport var SAVE_AND_EDIT_FILES_BATCH_SIZE = 8;\nexport function itemSaga(legacyBuilder, builder) {\n  var _marked, _marked2, _marked3, _marked4, _marked5, _marked6, _marked7, _marked8, _marked9, _marked10, _marked11, _marked12, _marked13, _marked14, _marked15, _marked16, _marked17, _marked18, _marked19, _marked20, _marked21, createOrEditCancelledItemsChannel, createOrEditProgressChannel, handleFetchRaritiesRequest, handleFetchItemsRequest, handleFetchItemRequest, fetchCollectionItemsWithBatch, handleFetchCollectionItemsRequest, handleCreateOrEditProgress, handleCreateOrEditCancelledItems, handleSaveMultipleItemsRequest, handleSaveItemRequest, fetchNewCollectionItemsPaginated, handleSaveMultipleItemsSuccess, handleSaveItemSuccess, handleSetPriceAndBeneficiaryRequest, handleDeleteItemRequest, handleDeleteItemSuccess, handleSetCollection, handleSetItemsTokenIdRequest, handleRetrySetItemsTokenId, fetchItemEntities, handleRescueItemsRequest, handleDownloadItemRequest;\n\n  return _regeneratorRuntime.wrap(function itemSaga$(_context25) {\n    while (1) {\n      switch (_context25.prev = _context25.next) {\n        case 0:\n          handleDownloadItemRequest = function _handleDownloadItemRe(action) {\n            var itemId, items, item, files, maleHashes, femaleHashes, _i, _Object$keys, path, hash, areRepresentationsEqual, zip, name;\n\n            return _regeneratorRuntime.wrap(function handleDownloadItemRequest$(_context24) {\n              while (1) {\n                switch (_context24.prev = _context24.next) {\n                  case 0:\n                    itemId = action.payload.itemId;\n                    _context24.prev = 1;\n                    _context24.next = 4;\n                    return select(getItemsById);\n\n                  case 4:\n                    items = _context24.sent;\n                    item = items[itemId];\n\n                    if (item) {\n                      _context24.next = 8;\n                      break;\n                    }\n\n                    throw new Error(\"Item not found for itemId=\\\"\".concat(itemId, \"\\\"\"));\n\n                  case 8:\n                    _context24.next = 10;\n                    return call([legacyBuilder, 'fetchContents'], item.contents);\n\n                  case 10:\n                    files = _context24.sent;\n                    // check if both representations are equal\n                    maleHashes = [];\n                    femaleHashes = [];\n\n                    for (_i = 0, _Object$keys = Object.keys(item.contents); _i < _Object$keys.length; _i++) {\n                      path = _Object$keys[_i];\n                      hash = item.contents[path];\n\n                      if (path.startsWith(BodyShapeType.MALE)) {\n                        maleHashes.push(hash);\n                      } else if (path.startsWith(BodyShapeType.FEMALE)) {\n                        femaleHashes.push(hash);\n                      }\n                    }\n\n                    areRepresentationsEqual = maleHashes.length === femaleHashes.length && maleHashes.every(function (hash) {\n                      return femaleHashes.includes(hash);\n                    }); // build zip files, if both representations are equal, the /male and /female directories can be merged\n\n                    _context24.next = 17;\n                    return call(buildZipContents, files, areRepresentationsEqual);\n\n                  case 17:\n                    zip = _context24.sent;\n                    // download zip\n                    name = item.name.replace(/\\s/g, '_');\n                    _context24.next = 21;\n                    return call(downloadZip, name, zip);\n\n                  case 21:\n                    _context24.next = 23;\n                    return put(downloadItemSuccess(itemId));\n\n                  case 23:\n                    _context24.next = 29;\n                    break;\n\n                  case 25:\n                    _context24.prev = 25;\n                    _context24.t0 = _context24[\"catch\"](1);\n                    _context24.next = 29;\n                    return put(downloadItemFailure(itemId, _context24.t0.message));\n\n                  case 29:\n                  case \"end\":\n                    return _context24.stop();\n                }\n              }\n            }, _marked21, null, [[1, 25]]);\n          };\n\n          handleRescueItemsRequest = function _handleRescueItemsReq(action) {\n            var _action$payload7, collection, items, contentHashes;\n\n            return _regeneratorRuntime.wrap(function handleRescueItemsRequest$(_context23) {\n              while (1) {\n                switch (_context23.prev = _context23.next) {\n                  case 0:\n                    _action$payload7 = action.payload, collection = _action$payload7.collection, items = _action$payload7.items, contentHashes = _action$payload7.contentHashes;\n                    _context23.prev = 1;\n                    return _context23.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                      var chainId, tokenIds, metadatas, contract, _getContract, abi, implementation, manager, forwarder, tokenIdsChunks, itemsChunks, metadatasChunks, contentHashesChunks, txHashes, _loop2, i, newItems;\n\n                      return _regeneratorRuntime.wrap(function _callee2$(_context22) {\n                        while (1) {\n                          switch (_context22.prev = _context22.next) {\n                            case 0:\n                              _context22.next = 2;\n                              return call(getChainIdByNetwork, Network.MATIC);\n\n                            case 2:\n                              chainId = _context22.sent;\n                              tokenIds = items.map(function (item) {\n                                return item.tokenId;\n                              });\n                              metadatas = items.map(function (item) {\n                                return getMetadata(item);\n                              });\n                              contract = getContract(ContractName.Committee, chainId);\n                              _getContract = getContract(ContractName.ERC721CollectionV2, chainId), abi = _getContract.abi;\n                              implementation = new Contract(collection.contractAddress, abi);\n                              manager = getContract(ContractName.CollectionManager, chainId);\n                              forwarder = getContract(ContractName.Forwarder, chainId);\n                              tokenIdsChunks = groupsOf(tokenIds, MAX_ITEMS);\n                              itemsChunks = groupsOf(items, MAX_ITEMS);\n                              metadatasChunks = groupsOf(metadatas, MAX_ITEMS);\n                              contentHashesChunks = groupsOf(contentHashes, MAX_ITEMS);\n                              txHashes = [];\n                              _loop2 = /*#__PURE__*/_regeneratorRuntime.mark(function _loop2(i) {\n                                var data, txHash;\n                                return _regeneratorRuntime.wrap(function _loop2$(_context21) {\n                                  while (1) {\n                                    switch (_context21.prev = _context21.next) {\n                                      case 0:\n                                        _context21.next = 2;\n                                        return call(getMethodData, implementation.populateTransaction.rescueItems(tokenIdsChunks[i], contentHashesChunks[i], metadatasChunks[i]));\n\n                                      case 2:\n                                        data = _context21.sent;\n                                        _context21.next = 5;\n                                        return call(sendTransaction, contract, function (committee) {\n                                          return committee.manageCollection(manager.address, forwarder.address, collection.contractAddress, [data]);\n                                        });\n\n                                      case 5:\n                                        txHash = _context21.sent;\n                                        txHashes.push(txHash);\n                                        _context21.next = 9;\n                                        return put(rescueItemsChunkSuccess(collection, itemsChunks[i], contentHashesChunks[i], chainId, txHash));\n\n                                      case 9:\n                                        _context21.next = 11;\n                                        return call(waitForTx, txHash);\n\n                                      case 11:\n                                      case \"end\":\n                                        return _context21.stop();\n                                    }\n                                  }\n                                }, _loop2);\n                              });\n                              i = 0;\n\n                            case 17:\n                              if (!(i < tokenIdsChunks.length)) {\n                                _context22.next = 22;\n                                break;\n                              }\n\n                              return _context22.delegateYield(_loop2(i), \"t0\", 19);\n\n                            case 19:\n                              i++;\n                              _context22.next = 17;\n                              break;\n\n                            case 22:\n                              newItems = items.map(function (item, index) {\n                                return _objectSpread({}, item, {\n                                  blockchainContentHash: contentHashes[index]\n                                });\n                              });\n                              _context22.next = 25;\n                              return put(rescueItemsSuccess(collection, newItems, contentHashes, chainId, txHashes));\n\n                            case 25:\n                            case \"end\":\n                              return _context22.stop();\n                          }\n                        }\n                      }, _callee2);\n                    })(), \"t0\", 3);\n\n                  case 3:\n                    _context23.next = 9;\n                    break;\n\n                  case 5:\n                    _context23.prev = 5;\n                    _context23.t1 = _context23[\"catch\"](1);\n                    _context23.next = 9;\n                    return put(rescueItemsFailure(collection, items, contentHashes, _context23.t1.message));\n\n                  case 9:\n                  case \"end\":\n                    return _context23.stop();\n                }\n              }\n            }, _marked20, null, [[1, 5]]);\n          };\n\n          fetchItemEntities = function _fetchItemEntities() {\n            var result, items, pointers;\n            return _regeneratorRuntime.wrap(function fetchItemEntities$(_context20) {\n              while (1) {\n                switch (_context20.prev = _context20.next) {\n                  case 0:\n                    if (!true) {\n                      _context20.next = 11;\n                      break;\n                    }\n\n                    _context20.next = 3;\n                    return take([FETCH_ITEMS_SUCCESS, FETCH_COLLECTION_ITEMS_SUCCESS]);\n\n                  case 3:\n                    result = _context20.sent;\n                    items = result.payload.items;\n                    pointers = items.filter(function (item) {\n                      return item.isPublished;\n                    }).map(function (item) {\n                      return item.urn;\n                    });\n\n                    if (!(pointers.length > 0)) {\n                      _context20.next = 9;\n                      break;\n                    }\n\n                    _context20.next = 9;\n                    return put(fetchEntitiesByPointersRequest(EntityType.WEARABLE, pointers));\n\n                  case 9:\n                    _context20.next = 0;\n                    break;\n\n                  case 11:\n                  case \"end\":\n                    return _context20.stop();\n                }\n              }\n            }, _marked19);\n          };\n\n          handleRetrySetItemsTokenId = function _handleRetrySetItemsT(action) {\n            var collection, newCollection, newItems;\n            return _regeneratorRuntime.wrap(function handleRetrySetItemsTokenId$(_context19) {\n              while (1) {\n                switch (_context19.prev = _context19.next) {\n                  case 0:\n                    collection = action.payload.collection;\n                    _context19.next = 3;\n                    return delay(5000);\n\n                  case 3:\n                    _context19.next = 5;\n                    return select(function (state) {\n                      return getCollection(state, collection.id);\n                    });\n\n                  case 5:\n                    newCollection = _context19.sent;\n                    _context19.next = 8;\n                    return select(function (state) {\n                      return getCollectionItems(state, collection.id);\n                    });\n\n                  case 8:\n                    newItems = _context19.sent;\n                    _context19.next = 11;\n                    return put(setItemsTokenIdRequest(newCollection, newItems));\n\n                  case 11:\n                  case \"end\":\n                    return _context19.stop();\n                }\n              }\n            }, _marked18);\n          };\n\n          handleSetItemsTokenIdRequest = function _handleSetItemsTokenI(action) {\n            var _action$payload6, collection, items, _yield$call2, newItems;\n\n            return _regeneratorRuntime.wrap(function handleSetItemsTokenIdRequest$(_context18) {\n              while (1) {\n                switch (_context18.prev = _context18.next) {\n                  case 0:\n                    _action$payload6 = action.payload, collection = _action$payload6.collection, items = _action$payload6.items;\n                    _context18.prev = 1;\n                    _context18.next = 4;\n                    return call(function () {\n                      return legacyBuilder.publishStandardCollection(collection.id);\n                    });\n\n                  case 4:\n                    _yield$call2 = _context18.sent;\n                    newItems = _yield$call2.items;\n                    _context18.next = 8;\n                    return put(setItemsTokenIdSuccess(newItems));\n\n                  case 8:\n                    _context18.next = 14;\n                    break;\n\n                  case 10:\n                    _context18.prev = 10;\n                    _context18.t0 = _context18[\"catch\"](1);\n                    _context18.next = 14;\n                    return put(setItemsTokenIdFailure(collection, items, _context18.t0.message));\n\n                  case 14:\n                  case \"end\":\n                    return _context18.stop();\n                }\n              }\n            }, _marked17, null, [[1, 10]]);\n          };\n\n          handleSetCollection = function _handleSetCollection(action) {\n            var _action$payload5, item, collectionId, newItem;\n\n            return _regeneratorRuntime.wrap(function handleSetCollection$(_context17) {\n              while (1) {\n                switch (_context17.prev = _context17.next) {\n                  case 0:\n                    _action$payload5 = action.payload, item = _action$payload5.item, collectionId = _action$payload5.collectionId;\n                    newItem = _objectSpread({}, item);\n\n                    if (collectionId === null) {\n                      delete newItem.collectionId;\n                    } else {\n                      newItem.collectionId = collectionId;\n                    }\n\n                    _context17.next = 5;\n                    return put(saveItemRequest(newItem, {}));\n\n                  case 5:\n                    _context17.next = 7;\n                    return take(SAVE_ITEM_SUCCESS);\n\n                  case 7:\n                    _context17.next = 9;\n                    return put(closeModal('AddExistingItemModal'));\n\n                  case 9:\n                  case \"end\":\n                    return _context17.stop();\n                }\n              }\n            }, _marked16);\n          };\n\n          handleDeleteItemSuccess = function _handleDeleteItemSucc(action) {\n            var item, collectionId, location, isTPCollectionPage, isCollectionsPage, address, paginationIndex, paginationData, currentPage, limit, ids, shouldGoToPreviousPage, fetchFn;\n            return _regeneratorRuntime.wrap(function handleDeleteItemSuccess$(_context16) {\n              while (1) {\n                switch (_context16.prev = _context16.next) {\n                  case 0:\n                    item = action.payload.item;\n                    collectionId = item.collectionId;\n                    _context16.next = 4;\n                    return select(getLocation);\n\n                  case 4:\n                    location = _context16.sent;\n                    isTPCollectionPage = location.pathname === locations.thirdPartyCollectionDetail(collectionId);\n                    isCollectionsPage = location.pathname === locations.collections();\n\n                    if (!(isTPCollectionPage || isCollectionsPage)) {\n                      _context16.next = 25;\n                      break;\n                    }\n\n                    _context16.next = 10;\n                    return select(getAddress);\n\n                  case 10:\n                    address = _context16.sent;\n                    paginationIndex = isTPCollectionPage ? collectionId : address;\n                    _context16.next = 14;\n                    return select(getPaginationData, paginationIndex);\n\n                  case 14:\n                    paginationData = _context16.sent;\n                    currentPage = paginationData.currentPage, limit = paginationData.limit, ids = paginationData.ids;\n                    shouldGoToPreviousPage = currentPage > 1 && ids.length === 1 && ids[0] === item.id;\n\n                    if (!(isTPCollectionPage && shouldGoToPreviousPage)) {\n                      _context16.next = 22;\n                      break;\n                    }\n\n                    _context16.next = 20;\n                    return put(push(locations.thirdPartyCollectionDetail(collectionId, {\n                      page: currentPage - 1\n                    })));\n\n                  case 20:\n                    _context16.next = 25;\n                    break;\n\n                  case 22:\n                    fetchFn = isTPCollectionPage ? fetchCollectionItemsRequest : fetchItemsRequest;\n                    _context16.next = 25;\n                    return put(fetchFn(paginationIndex, {\n                      page: currentPage,\n                      limit: limit\n                    }));\n\n                  case 25:\n                  case \"end\":\n                    return _context16.stop();\n                }\n              }\n            }, _marked15);\n          };\n\n          handleDeleteItemRequest = function _handleDeleteItemRequ(action) {\n            var item, itemIdInUriParam;\n            return _regeneratorRuntime.wrap(function handleDeleteItemRequest$(_context15) {\n              while (1) {\n                switch (_context15.prev = _context15.next) {\n                  case 0:\n                    item = action.payload.item;\n                    _context15.prev = 1;\n                    _context15.next = 4;\n                    return call(function () {\n                      return legacyBuilder.deleteItem(item.id);\n                    });\n\n                  case 4:\n                    _context15.next = 6;\n                    return put(deleteItemSuccess(item));\n\n                  case 6:\n                    _context15.next = 8;\n                    return select(getItemId);\n\n                  case 8:\n                    itemIdInUriParam = _context15.sent;\n\n                    if (!(itemIdInUriParam === item.id)) {\n                      _context15.next = 12;\n                      break;\n                    }\n\n                    _context15.next = 12;\n                    return put(replace(locations.collections()));\n\n                  case 12:\n                    _context15.next = 18;\n                    break;\n\n                  case 14:\n                    _context15.prev = 14;\n                    _context15.t0 = _context15[\"catch\"](1);\n                    _context15.next = 18;\n                    return put(deleteItemFailure(item, _context15.t0.message));\n\n                  case 18:\n                  case \"end\":\n                    return _context15.stop();\n                }\n              }\n            }, _marked14, null, [[1, 14]]);\n          };\n\n          handleSetPriceAndBeneficiaryRequest = function _handleSetPriceAndBen(action) {\n            var _action$payload4, itemId, price, beneficiary, items, item, collections, collection, newItem, metadata, chainId, contract, txHash;\n\n            return _regeneratorRuntime.wrap(function handleSetPriceAndBeneficiaryRequest$(_context14) {\n              while (1) {\n                switch (_context14.prev = _context14.next) {\n                  case 0:\n                    _action$payload4 = action.payload, itemId = _action$payload4.itemId, price = _action$payload4.price, beneficiary = _action$payload4.beneficiary;\n                    _context14.prev = 1;\n                    _context14.next = 4;\n                    return select(getItems);\n\n                  case 4:\n                    items = _context14.sent;\n                    item = items.find(function (item) {\n                      return item.id === itemId;\n                    });\n                    _context14.next = 8;\n                    return select(getCollections);\n\n                  case 8:\n                    collections = _context14.sent;\n                    collection = collections.find(function (_collection) {\n                      return item && _collection.id === item.collectionId;\n                    });\n\n                    if (!(!item || !collection)) {\n                      _context14.next = 16;\n                      break;\n                    }\n\n                    _context14.t0 = Error;\n                    _context14.next = 14;\n                    return call(t, 'sagas.item.not_found');\n\n                  case 14:\n                    _context14.t1 = _context14.sent;\n                    throw new _context14.t0(_context14.t1);\n\n                  case 16:\n                    if (item.isPublished) {\n                      _context14.next = 22;\n                      break;\n                    }\n\n                    _context14.t2 = Error;\n                    _context14.next = 20;\n                    return call(t, 'sagas.item.not_published');\n\n                  case 20:\n                    _context14.t3 = _context14.sent;\n                    throw new _context14.t2(_context14.t3);\n\n                  case 22:\n                    newItem = _objectSpread({}, item, {\n                      price: price,\n                      beneficiary: beneficiary,\n                      updatedAt: Date.now()\n                    });\n                    metadata = getMetadata(newItem);\n                    _context14.next = 26;\n                    return call(getChainIdByNetwork, Network.MATIC);\n\n                  case 26:\n                    chainId = _context14.sent;\n                    contract = _objectSpread({}, getContract(ContractName.ERC721CollectionV2, chainId), {\n                      address: collection.contractAddress\n                    });\n                    _context14.next = 30;\n                    return call(sendTransaction, contract, function (collection) {\n                      return collection.editItemsData([newItem.tokenId], [newItem.price], [newItem.beneficiary], [metadata]);\n                    });\n\n                  case 30:\n                    txHash = _context14.sent;\n                    _context14.next = 33;\n                    return put(setPriceAndBeneficiarySuccess(newItem, chainId, txHash));\n\n                  case 33:\n                    _context14.next = 39;\n                    break;\n\n                  case 35:\n                    _context14.prev = 35;\n                    _context14.t4 = _context14[\"catch\"](1);\n                    _context14.next = 39;\n                    return put(setPriceAndBeneficiaryFailure(itemId, price, beneficiary, _context14.t4.message));\n\n                  case 39:\n                  case \"end\":\n                    return _context14.stop();\n                }\n              }\n            }, _marked13, null, [[1, 35]]);\n          };\n\n          handleSaveItemSuccess = function _handleSaveItemSucces(action) {\n            var openModals, location, _item, item, collectionId;\n\n            return _regeneratorRuntime.wrap(function handleSaveItemSuccess$(_context13) {\n              while (1) {\n                switch (_context13.prev = _context13.next) {\n                  case 0:\n                    _context13.next = 2;\n                    return select(getOpenModals);\n\n                  case 2:\n                    openModals = _context13.sent;\n                    _context13.next = 5;\n                    return select(getLocation);\n\n                  case 5:\n                    location = _context13.sent;\n\n                    if (!openModals['EditItemURNModal']) {\n                      _context13.next = 11;\n                      break;\n                    }\n\n                    _context13.next = 9;\n                    return put(closeModal('EditItemURNModal'));\n\n                  case 9:\n                    _context13.next = 15;\n                    break;\n\n                  case 11:\n                    if (!(openModals['CreateSingleItemModal'] && location.pathname === locations.collections())) {\n                      _context13.next = 15;\n                      break;\n                    }\n\n                    // Redirect to the newly created item detail\n                    _item = action.payload.item;\n                    _context13.next = 15;\n                    return put(push(locations.itemDetail(_item.id)));\n\n                  case 15:\n                    item = action.payload.item;\n                    collectionId = item.collectionId; // Fetch the the collection items again, we don't know where the item is going to be in the pagination data\n\n                    if (!(location.pathname === locations.thirdPartyCollectionDetail(collectionId))) {\n                      _context13.next = 20;\n                      break;\n                    }\n\n                    _context13.next = 20;\n                    return call(fetchNewCollectionItemsPaginated, collectionId);\n\n                  case 20:\n                    if (!isThirdParty(item.urn)) {\n                      _context13.next = 23;\n                      break;\n                    }\n\n                    _context13.next = 23;\n                    return put(fetchItemCurationRequest(item.collectionId, item.id));\n\n                  case 23:\n                  case \"end\":\n                    return _context13.stop();\n                }\n              }\n            }, _marked12);\n          };\n\n          handleSaveMultipleItemsSuccess = function _handleSaveMultipleIt2(action) {\n            var _items$;\n\n            var items, collectionId, location;\n            return _regeneratorRuntime.wrap(function handleSaveMultipleItemsSuccess$(_context12) {\n              while (1) {\n                switch (_context12.prev = _context12.next) {\n                  case 0:\n                    items = action.payload.items;\n                    collectionId = (_items$ = items[0]) === null || _items$ === void 0 ? void 0 : _items$.collectionId;\n                    _context12.next = 4;\n                    return select(getLocation);\n\n                  case 4:\n                    location = _context12.sent;\n\n                    if (!(items.length > 0 && location.pathname === locations.thirdPartyCollectionDetail(collectionId))) {\n                      _context12.next = 8;\n                      break;\n                    }\n\n                    _context12.next = 8;\n                    return call(fetchNewCollectionItemsPaginated, collectionId, items.length);\n\n                  case 8:\n                  case \"end\":\n                    return _context12.stop();\n                }\n              }\n            }, _marked11);\n          };\n\n          fetchNewCollectionItemsPaginated = function _fetchNewCollectionIt(collectionId) {\n            var newItemsAmount,\n                paginationData,\n                _ref8,\n                currentPage,\n                limit,\n                total,\n                newItemPage,\n                _args11 = arguments;\n\n            return _regeneratorRuntime.wrap(function fetchNewCollectionItemsPaginated$(_context11) {\n              while (1) {\n                switch (_context11.prev = _context11.next) {\n                  case 0:\n                    newItemsAmount = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : 1;\n                    _context11.next = 3;\n                    return select(getPaginationData, collectionId);\n\n                  case 3:\n                    paginationData = _context11.sent;\n                    _ref8 = paginationData || {}, currentPage = _ref8.currentPage, limit = _ref8.limit, total = _ref8.total;\n                    newItemPage = Math.ceil((total + newItemsAmount) / limit); // optimistic computation, in case the save is successful\n\n                    if (!(newItemPage !== currentPage)) {\n                      _context11.next = 11;\n                      break;\n                    }\n\n                    _context11.next = 9;\n                    return put(push(locations.thirdPartyCollectionDetail(collectionId, {\n                      page: newItemPage\n                    })));\n\n                  case 9:\n                    _context11.next = 13;\n                    break;\n\n                  case 11:\n                    _context11.next = 13;\n                    return put(fetchCollectionItemsRequest(collectionId, {\n                      page: currentPage,\n                      limit: limit\n                    }));\n\n                  case 13:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }\n            }, _marked10);\n          };\n\n          handleSaveItemRequest = function _handleSaveItemReques(action) {\n            var _action$payload3, actionItem, actionContents, item, oldItem, rarityChanged, oldReHashedContentAndHashes, oldReHashedContent, oldReHashedContentWithNewHashes, contents, collection, catalystImage, finalSize;\n\n            return _regeneratorRuntime.wrap(function handleSaveItemRequest$(_context10) {\n              while (1) {\n                switch (_context10.prev = _context10.next) {\n                  case 0:\n                    _action$payload3 = action.payload, actionItem = _action$payload3.item, actionContents = _action$payload3.contents;\n                    _context10.prev = 1;\n                    item = _objectSpread({}, actionItem, {\n                      updatedAt: Date.now()\n                    });\n                    _context10.next = 5;\n                    return select(getItem, actionItem.id);\n\n                  case 5:\n                    oldItem = _context10.sent;\n                    rarityChanged = oldItem && oldItem.rarity !== item.rarity;\n\n                    if (!(!isValidText(item.name) || !isValidText(item.description))) {\n                      _context10.next = 9;\n                      break;\n                    }\n\n                    throw new Error(t('sagas.item.invalid_character'));\n\n                  case 9:\n                    _context10.next = 11;\n                    return call(reHashOlderContents, item.contents, legacyBuilder);\n\n                  case 11:\n                    oldReHashedContentAndHashes = _context10.sent;\n                    oldReHashedContent = Object.fromEntries(Object.entries(oldReHashedContentAndHashes).map(function (_ref4) {\n                      var _ref5 = _slicedToArray(_ref4, 2),\n                          key = _ref5[0],\n                          value = _ref5[1];\n\n                      return [key, value.hash];\n                    }));\n                    oldReHashedContentWithNewHashes = Object.fromEntries(Object.entries(oldReHashedContentAndHashes).map(function (_ref6) {\n                      var _ref7 = _slicedToArray(_ref6, 2),\n                          key = _ref7[0],\n                          value = _ref7[1];\n\n                      return [key, value.content];\n                    })); // Re-write the contents so the files have the new hash\n\n                    item.contents = _objectSpread({}, item.contents, oldReHashedContent); // Add the old content to be uploaded again with the new hash\n\n                    contents = _objectSpread({}, actionContents, oldReHashedContentWithNewHashes);\n\n                    if (!item.collectionId) {\n                      _context10.next = 22;\n                      break;\n                    }\n\n                    _context10.next = 19;\n                    return select(getCollection, item.collectionId);\n\n                  case 19:\n                    _context10.t0 = _context10.sent;\n                    _context10.next = 23;\n                    break;\n\n                  case 22:\n                    _context10.t0 = undefined;\n\n                  case 23:\n                    collection = _context10.t0;\n\n                    if (!(collection && isLocked(collection))) {\n                      _context10.next = 26;\n                      break;\n                    }\n\n                    throw new Error(t('sagas.collection.collection_locked'));\n\n                  case 26:\n                    if (!(contents[THUMBNAIL_PATH] || !item.contents[IMAGE_PATH] || rarityChanged)) {\n                      _context10.next = 32;\n                      break;\n                    }\n\n                    _context10.next = 29;\n                    return call(generateCatalystImage, item, {\n                      thumbnail: contents[THUMBNAIL_PATH]\n                    });\n\n                  case 29:\n                    catalystImage = _context10.sent;\n                    contents[IMAGE_PATH] = catalystImage.content;\n                    item.contents[IMAGE_PATH] = catalystImage.hash;\n\n                  case 32:\n                    if (!(Object.keys(contents).length > 0)) {\n                      _context10.next = 38;\n                      break;\n                    }\n\n                    _context10.next = 35;\n                    return call(calculateFinalSize, item, contents, legacyBuilder);\n\n                  case 35:\n                    finalSize = _context10.sent;\n\n                    if (!(finalSize > MAX_FILE_SIZE)) {\n                      _context10.next = 38;\n                      break;\n                    }\n\n                    throw new ItemTooBigError();\n\n                  case 38:\n                    _context10.next = 40;\n                    return call([legacyBuilder, 'saveItem'], item, contents);\n\n                  case 40:\n                    _context10.next = 42;\n                    return put(saveItemSuccess(item, contents));\n\n                  case 42:\n                    _context10.next = 48;\n                    break;\n\n                  case 44:\n                    _context10.prev = 44;\n                    _context10.t1 = _context10[\"catch\"](1);\n                    _context10.next = 48;\n                    return put(saveItemFailure(actionItem, actionContents, _context10.t1.message));\n\n                  case 48:\n                  case \"end\":\n                    return _context10.stop();\n                }\n              }\n            }, _marked9, null, [[1, 44]]);\n          };\n\n          handleSaveMultipleItemsRequest = function _handleSaveMultipleIt(action) {\n            var builtFiles, fileNamesSucceeded, fileNamesFailed, remoteItems, queue, promisesOfItemsToSave, _iterator, _step, _loop, _ref2, wasCancelled;\n\n            return _regeneratorRuntime.wrap(function handleSaveMultipleItemsRequest$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    builtFiles = action.payload.builtFiles;\n                    fileNamesSucceeded = [];\n                    fileNamesFailed = [];\n                    remoteItems = [];\n                    queue = new PQueue({\n                      concurrency: SAVE_AND_EDIT_FILES_BATCH_SIZE\n                    });\n                    _context9.prev = 5;\n                    promisesOfItemsToSave = [];\n                    _iterator = _createForOfIteratorHelper(builtFiles.entries());\n\n                    try {\n                      _loop = function _loop() {\n                        var _ref = _step.value;\n                        _ref2 = _slicedToArray(_ref, 2);\n                        var _index = _ref2[0];\n                        var builtFile = _ref2[1];\n                        promisesOfItemsToSave.push( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                          var remoteItem;\n                          return _regeneratorRuntime.wrap(function _callee$(_context8) {\n                            while (1) {\n                              switch (_context8.prev = _context8.next) {\n                                case 0:\n                                  _context8.prev = 0;\n                                  _context8.next = 3;\n                                  return builder.upsertItem(builtFile.item, builtFile.newContent);\n\n                                case 3:\n                                  remoteItem = _context8.sent;\n                                  fileNamesSucceeded.push(builtFile.fileName);\n                                  remoteItems.push(remoteItem);\n                                  _context8.next = 11;\n                                  break;\n\n                                case 8:\n                                  _context8.prev = 8;\n                                  _context8.t0 = _context8[\"catch\"](0);\n                                  fileNamesFailed.push(builtFile.fileName);\n\n                                case 11:\n                                case \"end\":\n                                  return _context8.stop();\n                              }\n                            }\n                          }, _callee, null, [[0, 8]]);\n                        })));\n                      };\n\n                      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                        _loop();\n                      }\n                    } catch (err) {\n                      _iterator.e(err);\n                    } finally {\n                      _iterator.f();\n                    }\n\n                    queue.on('next', function () {\n                      // queue.size is the number of items in the queue and queue.pending the number of ongoing promises\n                      // the total pending files is the sum of the queue.size and queue.pending\n                      createOrEditProgressChannel.put({\n                        progress: Math.round((builtFiles.length - (queue.size + queue.pending)) / builtFiles.length * 100)\n                      });\n                    });\n                    _context9.next = 12;\n                    return queue.addAll(promisesOfItemsToSave);\n\n                  case 12:\n                    _context9.next = 14;\n                    return put(saveMultipleItemsSuccess(remoteItems.map(function (remoteItem) {\n                      return fromRemoteItem(remoteItem);\n                    }), fileNamesSucceeded, fileNamesFailed));\n\n                  case 14:\n                    _context9.prev = 14;\n                    _context9.next = 17;\n                    return cancelled();\n\n                  case 17:\n                    wasCancelled = _context9.sent;\n\n                    if (wasCancelled) {\n                      queue.clear(); // using on idle to wait until the ongoing promises are finished\n\n                      queue.on('idle', function () {\n                        var cancelledFiles = builtFiles.filter(function (builtFile) {\n                          return !fileNamesSucceeded.includes(builtFile.fileName) && !fileNamesFailed.includes(builtFile.fileName);\n                        });\n                        createOrEditCancelledItemsChannel.put({\n                          items: remoteItems.map(function (remoteItem) {\n                            return fromRemoteItem(remoteItem);\n                          }),\n                          savedFileNames: fileNamesSucceeded,\n                          notSavedFileNames: fileNamesFailed,\n                          cancelledFileNames: cancelledFiles.map(function (builtFile) {\n                            return builtFile.fileName;\n                          })\n                        });\n                      });\n                    }\n\n                    return _context9.finish(14);\n\n                  case 20:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, _marked8, null, [[5,, 14, 20]]);\n          };\n\n          handleCreateOrEditCancelledItems = function _handleCreateOrEditCa(action) {\n            var items, savedFileNames, notSavedFileNames, cancelledFileNames;\n            return _regeneratorRuntime.wrap(function handleCreateOrEditCancelledItems$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    items = action.items, savedFileNames = action.savedFileNames, notSavedFileNames = action.notSavedFileNames, cancelledFileNames = action.cancelledFileNames;\n                    _context7.next = 3;\n                    return put(saveMultipleItemsCancelled(items, savedFileNames, notSavedFileNames, cancelledFileNames));\n\n                  case 3:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _marked7);\n          };\n\n          handleCreateOrEditProgress = function _handleCreateOrEditPr(action) {\n            return _regeneratorRuntime.wrap(function handleCreateOrEditProgress$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _context6.next = 2;\n                    return put(updateProgressSaveMultipleItems(action.progress));\n\n                  case 2:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _marked6);\n          };\n\n          handleFetchCollectionItemsRequest = function _handleFetchCollectio(action) {\n            var _action$payload2, collectionId, _action$payload2$page, page, limit, overridePaginationData, status, isFetchingMultiplePages, _yield$call, items, paginationStats;\n\n            return _regeneratorRuntime.wrap(function handleFetchCollectionItemsRequest$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _action$payload2 = action.payload, collectionId = _action$payload2.collectionId, _action$payload2$page = _action$payload2.page, page = _action$payload2$page === void 0 ? DEFAULT_PAGE : _action$payload2$page, limit = _action$payload2.limit, overridePaginationData = _action$payload2.overridePaginationData, status = _action$payload2.status;\n                    isFetchingMultiplePages = Array.isArray(page);\n                    _context5.prev = 2;\n                    _context5.next = 5;\n                    return call(fetchCollectionItemsWithBatch, collectionId, isFetchingMultiplePages ? page : [page], limit, status);\n\n                  case 5:\n                    _yield$call = _context5.sent;\n                    items = _yield$call.items;\n                    paginationStats = _yield$call.paginationStats;\n                    _context5.next = 10;\n                    return put(fetchCollectionItemsSuccess(collectionId, items, overridePaginationData ? paginationStats : undefined));\n\n                  case 10:\n                    _context5.next = 16;\n                    break;\n\n                  case 12:\n                    _context5.prev = 12;\n                    _context5.t0 = _context5[\"catch\"](2);\n                    _context5.next = 16;\n                    return put(fetchCollectionItemsFailure(collectionId, _context5.t0.message));\n\n                  case 16:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _marked5, null, [[2, 12]]);\n          };\n\n          fetchCollectionItemsWithBatch = function _fetchCollectionItems(collectionId, pagesToFetch, limit, status) {\n            var REQUEST_BATCH_SIZE, queue, promisesOfPagesToFetch, allItemPages, paginationStats, items;\n            return _regeneratorRuntime.wrap(function fetchCollectionItemsWithBatch$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    REQUEST_BATCH_SIZE = 10;\n                    queue = new PQueue({\n                      concurrency: REQUEST_BATCH_SIZE\n                    });\n                    promisesOfPagesToFetch = [];\n                    pagesToFetch.forEach(function (page) {\n                      promisesOfPagesToFetch.push(function () {\n                        return legacyBuilder.fetchCollectionItems(collectionId, {\n                          page: page,\n                          limit: limit,\n                          status: status\n                        });\n                      });\n                    });\n                    _context4.next = 6;\n                    return queue.addAll(promisesOfPagesToFetch);\n\n                  case 6:\n                    allItemPages = _context4.sent;\n                    paginationStats = allItemPages[0].total !== undefined ? {\n                      limit: limit,\n                      page: allItemPages[0].page,\n                      pages: allItemPages[0].pages,\n                      total: allItemPages[0].total\n                    } : undefined; // When there is no limit, the result is not paginated so the response is different. The non-paginated ones will be deprecated\n\n                    items = limit ? allItemPages.flatMap(function (result) {\n                      return result.results;\n                    }) : allItemPages.flat();\n                    return _context4.abrupt(\"return\", {\n                      items: items,\n                      paginationStats: paginationStats\n                    });\n\n                  case 10:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _marked4);\n          };\n\n          handleFetchItemRequest = function _handleFetchItemReque(action) {\n            var id, item;\n            return _regeneratorRuntime.wrap(function handleFetchItemRequest$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    id = action.payload.id;\n                    _context3.prev = 1;\n                    _context3.next = 4;\n                    return call(function () {\n                      return legacyBuilder.fetchItem(id);\n                    });\n\n                  case 4:\n                    item = _context3.sent;\n                    _context3.next = 7;\n                    return put(fetchItemSuccess(id, item));\n\n                  case 7:\n                    _context3.next = 13;\n                    break;\n\n                  case 9:\n                    _context3.prev = 9;\n                    _context3.t0 = _context3[\"catch\"](1);\n                    _context3.next = 13;\n                    return put(fetchItemFailure(id, _context3.t0.message));\n\n                  case 13:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _marked3, null, [[1, 9]]);\n          };\n\n          handleFetchItemsRequest = function _handleFetchItemsRequ(action) {\n            var _action$payload, address, params, response, limit, page, pages, results, total;\n\n            return _regeneratorRuntime.wrap(function handleFetchItemsRequest$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _action$payload = action.payload, address = _action$payload.address, params = _action$payload.params;\n                    _context2.prev = 1;\n                    _context2.next = 4;\n                    return call([legacyBuilder, 'fetchItems'], address, _objectSpread({}, params, {\n                      collectionId: 'null'\n                    }));\n\n                  case 4:\n                    response = _context2.sent;\n                    limit = response.limit, page = response.page, pages = response.pages, results = response.results, total = response.total;\n                    _context2.next = 8;\n                    return put(fetchItemsSuccess(results, {\n                      limit: limit,\n                      page: page,\n                      pages: pages,\n                      total: total\n                    }, address));\n\n                  case 8:\n                    _context2.next = 14;\n                    break;\n\n                  case 10:\n                    _context2.prev = 10;\n                    _context2.t0 = _context2[\"catch\"](1);\n                    _context2.next = 14;\n                    return put(fetchItemsFailure(_context2.t0.message));\n\n                  case 14:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _marked2, null, [[1, 10]]);\n          };\n\n          handleFetchRaritiesRequest = function _handleFetchRaritiesR() {\n            var rarities;\n            return _regeneratorRuntime.wrap(function handleFetchRaritiesRequest$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call([legacyBuilder, legacyBuilder.fetchRarities]);\n\n                  case 3:\n                    rarities = _context.sent;\n                    _context.next = 6;\n                    return put(fetchRaritiesSuccess(rarities));\n\n                  case 6:\n                    _context.next = 12;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](0);\n                    _context.next = 12;\n                    return put(fetchRaritiesFailure(_context.t0.message));\n\n                  case 12:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _marked, null, [[0, 8]]);\n          };\n\n          _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchRaritiesRequest), _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchItemsRequest), _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchItemRequest), _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionItemsWithBatch), _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchCollectionItemsRequest), _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(handleCreateOrEditProgress), _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(handleCreateOrEditCancelledItems), _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(handleSaveMultipleItemsRequest), _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(handleSaveItemRequest), _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(fetchNewCollectionItemsPaginated), _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(handleSaveMultipleItemsSuccess), _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(handleSaveItemSuccess), _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(handleSetPriceAndBeneficiaryRequest), _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(handleDeleteItemRequest), _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(handleDeleteItemSuccess), _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(handleSetCollection), _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(handleSetItemsTokenIdRequest), _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(handleRetrySetItemsTokenId), _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(fetchItemEntities), _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(handleRescueItemsRequest), _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(handleDownloadItemRequest);\n          createOrEditCancelledItemsChannel = channel();\n          createOrEditProgressChannel = channel();\n          _context25.next = 26;\n          return takeEvery(FETCH_ITEMS_REQUEST, handleFetchItemsRequest);\n\n        case 26:\n          _context25.next = 28;\n          return takeEvery(FETCH_ITEM_REQUEST, handleFetchItemRequest);\n\n        case 28:\n          _context25.next = 30;\n          return takeEvery(FETCH_COLLECTION_ITEMS_REQUEST, handleFetchCollectionItemsRequest);\n\n        case 30:\n          _context25.next = 32;\n          return takeEvery(SAVE_ITEM_REQUEST, handleSaveItemRequest);\n\n        case 32:\n          _context25.next = 34;\n          return takeEvery([SAVE_MULTIPLE_ITEMS_SUCCESS, SAVE_MULTIPLE_ITEMS_CANCELLED], handleSaveMultipleItemsSuccess);\n\n        case 34:\n          _context25.next = 36;\n          return takeEvery(SAVE_ITEM_SUCCESS, handleSaveItemSuccess);\n\n        case 36:\n          _context25.next = 38;\n          return takeEvery(SET_PRICE_AND_BENEFICIARY_REQUEST, handleSetPriceAndBeneficiaryRequest);\n\n        case 38:\n          _context25.next = 40;\n          return takeEvery(DELETE_ITEM_REQUEST, handleDeleteItemRequest);\n\n        case 40:\n          _context25.next = 42;\n          return takeEvery(DELETE_ITEM_SUCCESS, handleDeleteItemSuccess);\n\n        case 42:\n          _context25.next = 44;\n          return takeLatest(SET_COLLECTION, handleSetCollection);\n\n        case 44:\n          _context25.next = 46;\n          return takeLatest(SET_ITEMS_TOKEN_ID_REQUEST, handleSetItemsTokenIdRequest);\n\n        case 46:\n          _context25.next = 48;\n          return takeEvery(SET_ITEMS_TOKEN_ID_FAILURE, handleRetrySetItemsTokenId);\n\n        case 48:\n          _context25.next = 50;\n          return takeEvery(FETCH_RARITIES_REQUEST, handleFetchRaritiesRequest);\n\n        case 50:\n          _context25.next = 52;\n          return takeEvery(RESCUE_ITEMS_REQUEST, handleRescueItemsRequest);\n\n        case 52:\n          _context25.next = 54;\n          return takeEvery(RESET_ITEM_REQUEST, handleResetItemRequest);\n\n        case 54:\n          _context25.next = 56;\n          return takeEvery(DOWNLOAD_ITEM_REQUEST, handleDownloadItemRequest);\n\n        case 56:\n          _context25.next = 58;\n          return takeEvery(createOrEditProgressChannel, handleCreateOrEditProgress);\n\n        case 58:\n          _context25.next = 60;\n          return takeEvery(createOrEditCancelledItemsChannel, handleCreateOrEditCancelledItems);\n\n        case 60:\n          _context25.next = 62;\n          return takeLatestCancellable({\n            initializer: SAVE_MULTIPLE_ITEMS_REQUEST,\n            cancellable: CANCEL_SAVE_MULTIPLE_ITEMS\n          }, handleSaveMultipleItemsRequest);\n\n        case 62:\n          _context25.next = 64;\n          return fork(fetchItemEntities);\n\n        case 64:\n        case \"end\":\n          return _context25.stop();\n      }\n    }\n  }, _marked22);\n}\nexport function handleResetItemRequest(action) {\n  var itemId, itemsById, entitiesByItemId, item, entity, catalystItem, entityContentsAsMap, newContents, newItem, saveItemResult;\n  return _regeneratorRuntime.wrap(function handleResetItemRequest$(_context27) {\n    while (1) {\n      switch (_context27.prev = _context27.next) {\n        case 0:\n          itemId = action.payload.itemId;\n          _context27.next = 3;\n          return select(getItemsById);\n\n        case 3:\n          itemsById = _context27.sent;\n          _context27.next = 6;\n          return select(getEntityByItemId);\n\n        case 6:\n          entitiesByItemId = _context27.sent;\n          item = itemsById[itemId];\n          entity = entitiesByItemId[itemId];\n          _context27.prev = 9;\n          catalystItem = entity.metadata;\n\n          if (entity.content) {\n            _context27.next = 13;\n            break;\n          }\n\n          throw new Error('Entity does not have content');\n\n        case 13:\n          entityContentsAsMap = entity.content.reduce(function (contents, _ref9) {\n            var file = _ref9.file,\n                hash = _ref9.hash;\n            contents[file] = hash;\n            return contents;\n          }, {}); // Fetch blobs from the catalyst so they can be reuploaded to the item\n\n          _context27.next = 16;\n          return Promise.all(Object.entries(entityContentsAsMap).map( /*#__PURE__*/function () {\n            var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref10) {\n              var _ref12, key, hash;\n\n              return _regeneratorRuntime.wrap(function _callee3$(_context26) {\n                while (1) {\n                  switch (_context26.prev = _context26.next) {\n                    case 0:\n                      _ref12 = _slicedToArray(_ref10, 2), key = _ref12[0], hash = _ref12[1];\n                      _context26.t0 = key;\n                      _context26.next = 4;\n                      return fetch(getCatalystContentUrl(hash)).then(function (res) {\n                        return res.blob();\n                      });\n\n                    case 4:\n                      _context26.t1 = _context26.sent;\n                      return _context26.abrupt(\"return\", [_context26.t0, _context26.t1]);\n\n                    case 6:\n                    case \"end\":\n                      return _context26.stop();\n                  }\n                }\n              }, _callee3);\n            }));\n\n            return function (_x) {\n              return _ref11.apply(this, arguments);\n            };\n          }())).then(function (res) {\n            return res.reduce(function (contents, _ref13) {\n              var _ref14 = _slicedToArray(_ref13, 2),\n                  key = _ref14[0],\n                  blob = _ref14[1];\n\n              contents[key] = blob;\n              return contents;\n            }, {});\n          });\n\n        case 16:\n          newContents = _context27.sent;\n          // Replace the current item with values from the item in the catalyst\n          newItem = _objectSpread({}, item, {\n            name: catalystItem.name,\n            description: catalystItem.description,\n            contents: entityContentsAsMap,\n            data: catalystItem.data\n          });\n          _context27.next = 20;\n          return put(saveItemRequest(newItem, newContents));\n\n        case 20:\n          _context27.next = 22;\n          return race({\n            success: take(SAVE_ITEM_SUCCESS),\n            failure: take(SAVE_ITEM_FAILURE)\n          });\n\n        case 22:\n          saveItemResult = _context27.sent;\n\n          if (!saveItemResult.success) {\n            _context27.next = 28;\n            break;\n          }\n\n          _context27.next = 26;\n          return put(resetItemSuccess(itemId));\n\n        case 26:\n          _context27.next = 31;\n          break;\n\n        case 28:\n          if (!saveItemResult.failure) {\n            _context27.next = 31;\n            break;\n          }\n\n          _context27.next = 31;\n          return put(resetItemFailure(itemId, saveItemResult.failure.payload.error));\n\n        case 31:\n          _context27.next = 37;\n          break;\n\n        case 33:\n          _context27.prev = 33;\n          _context27.t0 = _context27[\"catch\"](9);\n          _context27.next = 37;\n          return put(resetItemFailure(itemId, _context27.t0.message));\n\n        case 37:\n        case \"end\":\n          return _context27.stop();\n      }\n    }\n  }, _marked23, null, [[9, 33]]);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/item/sagas.ts"],"names":["itemSaga","handleResetItemRequest","PQueue","Contract","getLocation","push","replace","takeEvery","call","put","takeLatest","select","take","delay","fork","race","cancelled","channel","Network","ContractName","getContract","t","getOpenModals","closeModal","sendTransaction","getChainIdByNetwork","EntityType","fetchItemsSuccess","fetchItemsFailure","FETCH_ITEMS_REQUEST","fetchItemSuccess","fetchItemFailure","FETCH_ITEM_REQUEST","saveItemRequest","saveItemSuccess","saveItemFailure","SAVE_ITEM_REQUEST","SAVE_ITEM_SUCCESS","setPriceAndBeneficiarySuccess","setPriceAndBeneficiaryFailure","SET_PRICE_AND_BENEFICIARY_REQUEST","deleteItemSuccess","deleteItemFailure","DELETE_ITEM_REQUEST","SET_COLLECTION","SET_ITEMS_TOKEN_ID_REQUEST","SET_ITEMS_TOKEN_ID_FAILURE","setItemsTokenIdRequest","setItemsTokenIdSuccess","setItemsTokenIdFailure","FETCH_COLLECTION_ITEMS_REQUEST","fetchCollectionItemsSuccess","fetchCollectionItemsFailure","fetchRaritiesSuccess","fetchRaritiesFailure","FETCH_RARITIES_REQUEST","FETCH_ITEMS_SUCCESS","RESCUE_ITEMS_REQUEST","rescueItemsSuccess","rescueItemsFailure","RESET_ITEM_REQUEST","resetItemSuccess","resetItemFailure","SAVE_ITEM_FAILURE","DOWNLOAD_ITEM_REQUEST","downloadItemFailure","downloadItemSuccess","SAVE_MULTIPLE_ITEMS_REQUEST","saveMultipleItemsSuccess","CANCEL_SAVE_MULTIPLE_ITEMS","saveMultipleItemsCancelled","rescueItemsChunkSuccess","FETCH_COLLECTION_ITEMS_SUCCESS","DELETE_ITEM_SUCCESS","fetchCollectionItemsRequest","SAVE_MULTIPLE_ITEMS_SUCCESS","SAVE_MULTIPLE_ITEMS_CANCELLED","fetchItemsRequest","fromRemoteItem","isThirdParty","fetchItemCurationRequest","updateProgressSaveMultipleItems","isLocked","locations","DEFAULT_PAGE","getCollection","getCollections","getItemId","MAX_ITEMS","fetchEntitiesByPointersRequest","takeLatestCancellable","waitForTx","getMethodData","getCatalystContentUrl","downloadZip","calculateFinalSize","reHashOlderContents","BodyShapeType","IMAGE_PATH","THUMBNAIL_PATH","getData","getItemsById","getItems","getEntityByItemId","getCollectionItems","getItem","getPaginationData","ItemTooBigError","buildZipContents","getMetadata","groupsOf","isValidText","generateCatalystImage","MAX_FILE_SIZE","getAddress","SAVE_AND_EDIT_FILES_BATCH_SIZE","legacyBuilder","builder","handleFetchRaritiesRequest","handleFetchItemsRequest","handleFetchItemRequest","fetchCollectionItemsWithBatch","handleFetchCollectionItemsRequest","handleCreateOrEditProgress","handleCreateOrEditCancelledItems","handleSaveMultipleItemsRequest","handleSaveItemRequest","fetchNewCollectionItemsPaginated","handleSaveMultipleItemsSuccess","handleSaveItemSuccess","handleSetPriceAndBeneficiaryRequest","handleDeleteItemRequest","handleDeleteItemSuccess","handleSetCollection","handleSetItemsTokenIdRequest","handleRetrySetItemsTokenId","fetchItemEntities","handleRescueItemsRequest","handleDownloadItemRequest","action","itemId","payload","items","item","Error","contents","files","maleHashes","femaleHashes","Object","keys","path","hash","startsWith","MALE","FEMALE","areRepresentationsEqual","length","every","includes","zip","name","message","collection","contentHashes","MATIC","chainId","tokenIds","map","tokenId","metadatas","contract","Committee","ERC721CollectionV2","abi","implementation","contractAddress","manager","CollectionManager","forwarder","Forwarder","tokenIdsChunks","itemsChunks","metadatasChunks","contentHashesChunks","txHashes","i","populateTransaction","rescueItems","data","committee","manageCollection","address","txHash","newItems","index","blockchainContentHash","result","pointers","filter","isPublished","urn","WEARABLE","state","id","newCollection","publishStandardCollection","collectionId","newItem","location","isTPCollectionPage","pathname","thirdPartyCollectionDetail","isCollectionsPage","collections","paginationIndex","paginationData","currentPage","limit","ids","shouldGoToPreviousPage","page","fetchFn","deleteItem","itemIdInUriParam","price","beneficiary","find","_collection","updatedAt","Date","now","metadata","editItemsData","openModals","itemDetail","newItemsAmount","total","newItemPage","Math","ceil","actionItem","actionContents","oldItem","rarityChanged","rarity","description","oldReHashedContentAndHashes","oldReHashedContent","fromEntries","entries","key","value","oldReHashedContentWithNewHashes","content","undefined","thumbnail","catalystImage","finalSize","builtFiles","fileNamesSucceeded","fileNamesFailed","remoteItems","queue","concurrency","promisesOfItemsToSave","_index","builtFile","upsertItem","newContent","remoteItem","fileName","on","createOrEditProgressChannel","progress","round","size","pending","addAll","wasCancelled","clear","cancelledFiles","createOrEditCancelledItemsChannel","savedFileNames","notSavedFileNames","cancelledFileNames","overridePaginationData","status","isFetchingMultiplePages","Array","isArray","paginationStats","pagesToFetch","REQUEST_BATCH_SIZE","promisesOfPagesToFetch","forEach","fetchCollectionItems","allItemPages","pages","flatMap","results","flat","fetchItem","params","response","fetchRarities","rarities","initializer","cancellable","itemsById","entitiesByItemId","entity","catalystItem","entityContentsAsMap","reduce","file","Promise","all","fetch","then","res","blob","newContents","success","failure","saveItemResult","error"],"mappings":"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","sourcesContent":["import PQueue from 'p-queue'\nimport { Contract } from 'ethers'\nimport { getLocation, push, replace } from 'connected-react-router'\nimport { takeEvery, call, put, takeLatest, select, take, delay, fork, race, cancelled } from 'redux-saga/effects'\nimport { channel } from 'redux-saga'\nimport { ChainId, Network } from '@dcl/schemas'\nimport { ContractName, getContract } from 'decentraland-transactions'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { ModalState } from 'decentraland-dapps/dist/modules/modal/reducer'\nimport { getOpenModals } from 'decentraland-dapps/dist/modules/modal/selectors'\nimport { closeModal } from 'decentraland-dapps/dist/modules/modal/actions'\nimport { sendTransaction } from 'decentraland-dapps/dist/modules/wallet/utils'\nimport { getChainIdByNetwork } from 'decentraland-dapps/dist/lib/eth'\nimport { BuilderClient, RemoteItem } from '@dcl/builder-client'\nimport { Entity, EntityType } from 'dcl-catalyst-commons'\nimport {\n  FetchItemsRequestAction,\n  fetchItemsSuccess,\n  fetchItemsFailure,\n  FETCH_ITEMS_REQUEST,\n  FetchItemRequestAction,\n  fetchItemSuccess,\n  fetchItemFailure,\n  FETCH_ITEM_REQUEST,\n  SaveItemRequestAction,\n  saveItemRequest,\n  saveItemSuccess,\n  saveItemFailure,\n  SAVE_ITEM_REQUEST,\n  SAVE_ITEM_SUCCESS,\n  SetPriceAndBeneficiaryRequestAction,\n  setPriceAndBeneficiarySuccess,\n  setPriceAndBeneficiaryFailure,\n  SET_PRICE_AND_BENEFICIARY_REQUEST,\n  DeleteItemRequestAction,\n  deleteItemSuccess,\n  deleteItemFailure,\n  DELETE_ITEM_REQUEST,\n  SET_COLLECTION,\n  SetCollectionAction,\n  SET_ITEMS_TOKEN_ID_REQUEST,\n  SET_ITEMS_TOKEN_ID_FAILURE,\n  setItemsTokenIdRequest,\n  setItemsTokenIdSuccess,\n  setItemsTokenIdFailure,\n  SetItemsTokenIdRequestAction,\n  SetItemsTokenIdFailureAction,\n  FETCH_COLLECTION_ITEMS_REQUEST,\n  FetchCollectionItemsRequestAction,\n  fetchCollectionItemsSuccess,\n  fetchCollectionItemsFailure,\n  fetchRaritiesSuccess,\n  fetchRaritiesFailure,\n  FETCH_RARITIES_REQUEST,\n  FETCH_ITEMS_SUCCESS,\n  RESCUE_ITEMS_REQUEST,\n  RescueItemsRequestAction,\n  rescueItemsSuccess,\n  rescueItemsFailure,\n  ResetItemRequestAction,\n  RESET_ITEM_REQUEST,\n  resetItemSuccess,\n  resetItemFailure,\n  SAVE_ITEM_FAILURE,\n  SaveItemSuccessAction,\n  SaveItemFailureAction,\n  DOWNLOAD_ITEM_REQUEST,\n  DownloadItemRequestAction,\n  downloadItemFailure,\n  downloadItemSuccess,\n  SaveMultipleItemsRequestAction,\n  SAVE_MULTIPLE_ITEMS_REQUEST,\n  saveMultipleItemsSuccess,\n  CANCEL_SAVE_MULTIPLE_ITEMS,\n  saveMultipleItemsCancelled,\n  rescueItemsChunkSuccess,\n  FETCH_COLLECTION_ITEMS_SUCCESS,\n  FetchItemsSuccessAction,\n  FetchCollectionItemsSuccessAction,\n  DELETE_ITEM_SUCCESS,\n  DeleteItemSuccessAction,\n  fetchCollectionItemsRequest,\n  SAVE_MULTIPLE_ITEMS_SUCCESS,\n  SaveMultipleItemsSuccessAction,\n  SaveMultipleItemsCancelledAction,\n  SAVE_MULTIPLE_ITEMS_CANCELLED,\n  fetchItemsRequest\n} from './actions'\nimport { fromRemoteItem } from 'lib/api/transformations'\nimport { isThirdParty } from 'lib/urn'\nimport { fetchItemCurationRequest } from 'modules/curations/itemCuration/actions'\nimport { updateProgressSaveMultipleItems } from 'modules/ui/createMultipleItems/action'\nimport { isLocked } from 'modules/collection/utils'\nimport { locations } from 'routing/locations'\nimport { BuilderAPI as LegacyBuilderAPI } from 'lib/api/builder'\nimport { DEFAULT_PAGE, PaginatedResource, PaginationStats } from 'lib/api/pagination'\nimport { getCollection, getCollections } from 'modules/collection/selectors'\nimport { getItemId } from 'modules/location/selectors'\nimport { CurationStatus } from 'modules/curations/types'\nimport { Collection } from 'modules/collection/types'\nimport { MAX_ITEMS } from 'modules/collection/constants'\nimport { fetchEntitiesByPointersRequest } from 'modules/entity/actions'\nimport { takeLatestCancellable } from 'modules/common/utils'\nimport { waitForTx } from 'modules/transaction/utils'\nimport { getMethodData } from 'modules/wallet/utils'\nimport { getCatalystContentUrl } from 'lib/api/peer'\nimport { downloadZip } from 'lib/zip'\nimport { calculateFinalSize, reHashOlderContents } from './export'\nimport { Item, Rarity, CatalystItem, BodyShapeType, IMAGE_PATH, THUMBNAIL_PATH, WearableData } from './types'\nimport { getData as getItemsById, getItems, getEntityByItemId, getCollectionItems, getItem, getPaginationData } from './selectors'\nimport { ItemTooBigError } from './errors'\nimport { buildZipContents, getMetadata, groupsOf, isValidText, generateCatalystImage, MAX_FILE_SIZE } from './utils'\nimport { ItemPaginationData } from './reducer'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\n\nexport const SAVE_AND_EDIT_FILES_BATCH_SIZE = 8\n\nexport function* itemSaga(legacyBuilder: LegacyBuilderAPI, builder: BuilderClient) {\n  const createOrEditCancelledItemsChannel = channel()\n  const createOrEditProgressChannel = channel()\n  yield takeEvery(FETCH_ITEMS_REQUEST, handleFetchItemsRequest)\n  yield takeEvery(FETCH_ITEM_REQUEST, handleFetchItemRequest)\n  yield takeEvery(FETCH_COLLECTION_ITEMS_REQUEST, handleFetchCollectionItemsRequest)\n  yield takeEvery(SAVE_ITEM_REQUEST, handleSaveItemRequest)\n  yield takeEvery([SAVE_MULTIPLE_ITEMS_SUCCESS, SAVE_MULTIPLE_ITEMS_CANCELLED], handleSaveMultipleItemsSuccess)\n  yield takeEvery(SAVE_ITEM_SUCCESS, handleSaveItemSuccess)\n  yield takeEvery(SET_PRICE_AND_BENEFICIARY_REQUEST, handleSetPriceAndBeneficiaryRequest)\n  yield takeEvery(DELETE_ITEM_REQUEST, handleDeleteItemRequest)\n  yield takeEvery(DELETE_ITEM_SUCCESS, handleDeleteItemSuccess)\n  yield takeLatest(SET_COLLECTION, handleSetCollection)\n  yield takeLatest(SET_ITEMS_TOKEN_ID_REQUEST, handleSetItemsTokenIdRequest)\n  yield takeEvery(SET_ITEMS_TOKEN_ID_FAILURE, handleRetrySetItemsTokenId)\n  yield takeEvery(FETCH_RARITIES_REQUEST, handleFetchRaritiesRequest)\n  yield takeEvery(RESCUE_ITEMS_REQUEST, handleRescueItemsRequest)\n  yield takeEvery(RESET_ITEM_REQUEST, handleResetItemRequest)\n  yield takeEvery(DOWNLOAD_ITEM_REQUEST, handleDownloadItemRequest)\n  yield takeEvery(createOrEditProgressChannel, handleCreateOrEditProgress)\n  yield takeEvery(createOrEditCancelledItemsChannel, handleCreateOrEditCancelledItems)\n  yield takeLatestCancellable(\n    { initializer: SAVE_MULTIPLE_ITEMS_REQUEST, cancellable: CANCEL_SAVE_MULTIPLE_ITEMS },\n    handleSaveMultipleItemsRequest\n  )\n  yield fork(fetchItemEntities)\n\n  function* handleFetchRaritiesRequest() {\n    try {\n      const rarities: Rarity[] = yield call([legacyBuilder, legacyBuilder.fetchRarities])\n      yield put(fetchRaritiesSuccess(rarities))\n    } catch (error) {\n      yield put(fetchRaritiesFailure(error.message))\n    }\n  }\n\n  function* handleFetchItemsRequest(action: FetchItemsRequestAction) {\n    const { address, params } = action.payload\n    try {\n      // fetch just the orphan items for the address\n      const response: PaginatedResource<Item> = yield call([legacyBuilder, 'fetchItems'], address, { ...params, collectionId: 'null' })\n      const { limit, page, pages, results, total } = response\n      yield put(fetchItemsSuccess(results, { limit, page, pages, total }, address))\n    } catch (error) {\n      yield put(fetchItemsFailure(error.message))\n    }\n  }\n\n  function* handleFetchItemRequest(action: FetchItemRequestAction) {\n    const { id } = action.payload\n    try {\n      const item: Item = yield call(() => legacyBuilder.fetchItem(id))\n      yield put(fetchItemSuccess(id, item))\n    } catch (error) {\n      yield put(fetchItemFailure(id, error.message))\n    }\n  }\n\n  function* fetchCollectionItemsWithBatch(collectionId: string, pagesToFetch: number[], limit?: number, status?: CurationStatus) {\n    const REQUEST_BATCH_SIZE = 10\n    const queue = new PQueue({ concurrency: REQUEST_BATCH_SIZE })\n    const promisesOfPagesToFetch: (() => Promise<PaginatedResource<Item>>)[] = []\n    pagesToFetch.forEach(page => {\n      promisesOfPagesToFetch.push(() => legacyBuilder.fetchCollectionItems(collectionId, { page, limit, status }))\n    })\n    const allItemPages: PaginatedResource<Item>[] = yield queue.addAll(promisesOfPagesToFetch)\n    const paginationStats =\n      allItemPages[0].total !== undefined\n        ? { limit, page: allItemPages[0].page, pages: allItemPages[0].pages, total: allItemPages[0].total }\n        : undefined\n    // When there is no limit, the result is not paginated so the response is different. The non-paginated ones will be deprecated\n    const items = limit ? allItemPages.flatMap(result => result.results) : allItemPages.flat()\n    return { items, paginationStats }\n  }\n\n  function* handleFetchCollectionItemsRequest(action: FetchCollectionItemsRequestAction) {\n    const { collectionId, page = DEFAULT_PAGE, limit, overridePaginationData, status } = action.payload\n    const isFetchingMultiplePages = Array.isArray(page)\n\n    try {\n      const { items, paginationStats }: { items: Item[]; paginationStats?: PaginationStats } = yield call(\n        fetchCollectionItemsWithBatch,\n        collectionId,\n        isFetchingMultiplePages ? page : [page],\n        limit,\n        status\n      )\n      yield put(fetchCollectionItemsSuccess(collectionId, items, overridePaginationData ? paginationStats : undefined))\n    } catch (error) {\n      yield put(fetchCollectionItemsFailure(collectionId, error.message))\n    }\n  }\n\n  function* handleCreateOrEditProgress(action: { progress: number }) {\n    yield put(updateProgressSaveMultipleItems(action.progress))\n  }\n\n  function* handleCreateOrEditCancelledItems(action: SaveMultipleItemsCancelledAction['payload']) {\n    const { items, savedFileNames, notSavedFileNames, cancelledFileNames } = action\n    yield put(saveMultipleItemsCancelled(items, savedFileNames, notSavedFileNames, cancelledFileNames))\n  }\n\n  function* handleSaveMultipleItemsRequest(action: SaveMultipleItemsRequestAction) {\n    const { builtFiles } = action.payload\n    const fileNamesSucceeded: string[] = []\n    const fileNamesFailed: string[] = []\n    const remoteItems: RemoteItem[] = []\n    const queue = new PQueue({ concurrency: SAVE_AND_EDIT_FILES_BATCH_SIZE })\n    try {\n      const promisesOfItemsToSave: (() => Promise<void>)[] = []\n\n      for (const [_index, builtFile] of builtFiles.entries()) {\n        promisesOfItemsToSave.push(async () => {\n          try {\n            const remoteItem: RemoteItem = await builder.upsertItem(builtFile.item, builtFile.newContent)\n            fileNamesSucceeded.push(builtFile.fileName)\n            remoteItems.push(remoteItem)\n          } catch (error) {\n            fileNamesFailed.push(builtFile.fileName)\n          }\n        })\n      }\n\n      queue.on('next', () => {\n        // queue.size is the number of items in the queue and queue.pending the number of ongoing promises\n        // the total pending files is the sum of the queue.size and queue.pending\n        createOrEditProgressChannel.put({\n          progress: Math.round(((builtFiles.length - (queue.size + queue.pending)) / builtFiles.length) * 100)\n        })\n      })\n\n      yield queue.addAll(promisesOfItemsToSave)\n\n      yield put(\n        saveMultipleItemsSuccess(\n          remoteItems.map(remoteItem => fromRemoteItem(remoteItem)),\n          fileNamesSucceeded,\n          fileNamesFailed\n        )\n      )\n    } finally {\n      const wasCancelled: boolean = yield cancelled()\n      if (wasCancelled) {\n        queue.clear()\n        // using on idle to wait until the ongoing promises are finished\n        queue.on('idle', () => {\n          const cancelledFiles = builtFiles.filter(\n            builtFile => !fileNamesSucceeded.includes(builtFile.fileName) && !fileNamesFailed.includes(builtFile.fileName)\n          )\n          createOrEditCancelledItemsChannel.put({\n            items: remoteItems.map(remoteItem => fromRemoteItem(remoteItem)),\n            savedFileNames: fileNamesSucceeded,\n            notSavedFileNames: fileNamesFailed,\n            cancelledFileNames: cancelledFiles.map(builtFile => builtFile.fileName)\n          })\n        })\n      }\n    }\n  }\n\n  function* handleSaveItemRequest(action: SaveItemRequestAction) {\n    const { item: actionItem, contents: actionContents } = action.payload\n    try {\n      const item = { ...actionItem, updatedAt: Date.now() }\n      const oldItem: Item | undefined = yield select(getItem, actionItem.id)\n      const rarityChanged = oldItem && oldItem.rarity !== item.rarity\n\n      if (!isValidText(item.name) || !isValidText(item.description)) {\n        throw new Error(t('sagas.item.invalid_character'))\n      }\n\n      // Get all of the old content that is hashed with an older hashing mechanism\n      const oldReHashedContentAndHashes: Record<string, { hash: string; content: Blob }> = yield call(\n        reHashOlderContents,\n        item.contents,\n        legacyBuilder\n      )\n      const oldReHashedContent = Object.fromEntries(Object.entries(oldReHashedContentAndHashes).map(([key, value]) => [key, value.hash]))\n      const oldReHashedContentWithNewHashes = Object.fromEntries(\n        Object.entries(oldReHashedContentAndHashes).map(([key, value]) => [key, value.content])\n      )\n\n      // Re-write the contents so the files have the new hash\n      item.contents = { ...item.contents, ...oldReHashedContent }\n\n      // Add the old content to be uploaded again with the new hash\n      const contents = { ...actionContents, ...oldReHashedContentWithNewHashes }\n\n      const collection: Collection | undefined = item.collectionId ? yield select(getCollection, item.collectionId!) : undefined\n\n      if (collection && isLocked(collection)) {\n        throw new Error(t('sagas.collection.collection_locked'))\n      }\n\n      // If there's a new thumbnail image or the item doesn't have a catalyst image, create it and add it to the item\n      if (contents[THUMBNAIL_PATH] || !item.contents[IMAGE_PATH] || rarityChanged) {\n        const catalystImage: { content: Blob; hash: string } = yield call(generateCatalystImage, item, {\n          thumbnail: contents[THUMBNAIL_PATH]\n        })\n        contents[IMAGE_PATH] = catalystImage.content\n        item.contents[IMAGE_PATH] = catalystImage.hash\n      }\n\n      if (Object.keys(contents).length > 0) {\n        const finalSize: number = yield call(calculateFinalSize, item, contents, legacyBuilder)\n        if (finalSize > MAX_FILE_SIZE) {\n          throw new ItemTooBigError()\n        }\n      }\n\n      yield call([legacyBuilder, 'saveItem'], item, contents)\n\n      yield put(saveItemSuccess(item, contents))\n    } catch (error) {\n      yield put(saveItemFailure(actionItem, actionContents, error.message))\n    }\n  }\n\n  function* fetchNewCollectionItemsPaginated(collectionId: string, newItemsAmount = 1) {\n    const paginationData: ItemPaginationData = yield select(getPaginationData, collectionId)\n    const { currentPage, limit, total } = paginationData || {}\n    const newItemPage = Math.ceil((total + newItemsAmount) / limit) // optimistic computation, in case the save is successful\n    if (newItemPage !== currentPage) {\n      yield put(push(locations.thirdPartyCollectionDetail(collectionId, { page: newItemPage })))\n    } else {\n      yield put(fetchCollectionItemsRequest(collectionId, { page: currentPage, limit }))\n    }\n  }\n\n  function* handleSaveMultipleItemsSuccess(action: SaveMultipleItemsSuccessAction) {\n    const { items } = action.payload\n    const collectionId = items[0]?.collectionId!\n    const location: ReturnType<typeof getLocation> = yield select(getLocation)\n    if (items.length > 0 && location.pathname === locations.thirdPartyCollectionDetail(collectionId)) {\n      yield call(fetchNewCollectionItemsPaginated, collectionId, items.length)\n    }\n  }\n\n  function* handleSaveItemSuccess(action: SaveItemSuccessAction) {\n    const openModals: ModalState = yield select(getOpenModals)\n    const location: ReturnType<typeof getLocation> = yield select(getLocation)\n    if (openModals['EditItemURNModal']) {\n      yield put(closeModal('EditItemURNModal'))\n    } else if (openModals['CreateSingleItemModal'] && location.pathname === locations.collections()) {\n      // Redirect to the newly created item detail\n      const { item } = action.payload\n      yield put(push(locations.itemDetail(item.id)))\n    }\n    const { item } = action.payload\n    const collectionId = item.collectionId!\n    // Fetch the the collection items again, we don't know where the item is going to be in the pagination data\n    if (location.pathname === locations.thirdPartyCollectionDetail(collectionId)) {\n      yield call(fetchNewCollectionItemsPaginated, collectionId)\n    }\n    if (isThirdParty(item.urn)) {\n      yield put(fetchItemCurationRequest(item.collectionId!, item.id))\n    }\n  }\n\n  function* handleSetPriceAndBeneficiaryRequest(action: SetPriceAndBeneficiaryRequestAction) {\n    const { itemId, price, beneficiary } = action.payload\n    try {\n      const items: ReturnType<typeof getItems> = yield select(getItems)\n      const item = items.find(item => item.id === itemId)\n      const collections: ReturnType<typeof getCollections> = yield select(getCollections)\n      const collection = collections.find(_collection => item && _collection.id === item.collectionId)\n\n      if (!item || !collection) {\n        throw new Error(yield call(t, 'sagas.item.not_found'))\n      }\n\n      if (!item.isPublished) {\n        throw new Error(yield call(t, 'sagas.item.not_published'))\n      }\n\n      const newItem = { ...item, price, beneficiary, updatedAt: Date.now() }\n\n      const metadata = getMetadata(newItem)\n      const chainId: ChainId = yield call(getChainIdByNetwork, Network.MATIC)\n      const contract = { ...getContract(ContractName.ERC721CollectionV2, chainId), address: collection.contractAddress! }\n      const txHash: string = yield call(sendTransaction, contract, collection =>\n        collection.editItemsData([newItem.tokenId!], [newItem.price!], [newItem.beneficiary!], [metadata])\n      )\n\n      yield put(setPriceAndBeneficiarySuccess(newItem, chainId, txHash))\n    } catch (error) {\n      yield put(setPriceAndBeneficiaryFailure(itemId, price, beneficiary, error.message))\n    }\n  }\n\n  function* handleDeleteItemRequest(action: DeleteItemRequestAction) {\n    const { item } = action.payload\n    try {\n      yield call(() => legacyBuilder.deleteItem(item.id))\n      yield put(deleteItemSuccess(item))\n      const itemIdInUriParam: string = yield select(getItemId)\n      if (itemIdInUriParam === item.id) {\n        yield put(replace(locations.collections()))\n      }\n    } catch (error) {\n      yield put(deleteItemFailure(item, error.message))\n    }\n  }\n\n  function* handleDeleteItemSuccess(action: DeleteItemSuccessAction) {\n    const { item } = action.payload\n    const collectionId = item.collectionId!\n    const location: ReturnType<typeof getLocation> = yield select(getLocation)\n    const isTPCollectionPage = location.pathname === locations.thirdPartyCollectionDetail(collectionId)\n    const isCollectionsPage = location.pathname === locations.collections()\n    if (isTPCollectionPage || isCollectionsPage) {\n      const address: string = yield select(getAddress)\n      const paginationIndex = isTPCollectionPage ? collectionId : address\n      const paginationData: ItemPaginationData = yield select(getPaginationData, paginationIndex)\n      const { currentPage, limit, ids } = paginationData\n      const shouldGoToPreviousPage = currentPage > 1 && ids.length === 1 && ids[0] === item.id\n      if (isTPCollectionPage && shouldGoToPreviousPage) {\n        yield put(push(locations.thirdPartyCollectionDetail(collectionId, { page: currentPage - 1 })))\n      } else {\n        const fetchFn = isTPCollectionPage ? fetchCollectionItemsRequest : fetchItemsRequest\n        yield put(fetchFn(paginationIndex, { page: currentPage, limit }))\n      }\n    }\n  }\n\n  function* handleSetCollection(action: SetCollectionAction) {\n    const { item, collectionId } = action.payload\n    const newItem = { ...item }\n    if (collectionId === null) {\n      delete newItem.collectionId\n    } else {\n      newItem.collectionId = collectionId\n    }\n    yield put(saveItemRequest(newItem, {}))\n    yield take(SAVE_ITEM_SUCCESS)\n    yield put(closeModal('AddExistingItemModal'))\n  }\n\n  function* handleSetItemsTokenIdRequest(action: SetItemsTokenIdRequestAction) {\n    const { collection, items } = action.payload\n\n    try {\n      const { items: newItems }: { items: Item[] } = yield call(() => legacyBuilder.publishStandardCollection(collection.id))\n      yield put(setItemsTokenIdSuccess(newItems))\n    } catch (error) {\n      yield put(setItemsTokenIdFailure(collection, items, error.message))\n    }\n  }\n\n  function* handleRetrySetItemsTokenId(action: SetItemsTokenIdFailureAction) {\n    const { collection } = action.payload\n\n    yield delay(5000) // wait five seconds\n\n    // Refresh data from state\n    const newCollection: Collection = yield select(state => getCollection(state, collection.id))\n    const newItems: Item[] = yield select(state => getCollectionItems(state, collection.id))\n    yield put(setItemsTokenIdRequest(newCollection, newItems))\n  }\n\n  function* fetchItemEntities() {\n    while (true) {\n      const result: FetchItemsSuccessAction | FetchCollectionItemsSuccessAction = yield take([\n        FETCH_ITEMS_SUCCESS,\n        FETCH_COLLECTION_ITEMS_SUCCESS\n      ])\n\n      const { items } = result.payload\n      const pointers = items.filter(item => item.isPublished).map(item => item.urn!)\n\n      if (pointers.length > 0) {\n        yield put(fetchEntitiesByPointersRequest(EntityType.WEARABLE, pointers))\n      }\n    }\n  }\n\n  function* handleRescueItemsRequest(action: RescueItemsRequestAction) {\n    const { collection, items, contentHashes } = action.payload\n\n    try {\n      const chainId: ChainId = yield call(getChainIdByNetwork, Network.MATIC)\n      const tokenIds = items.map(item => item.tokenId!)\n      const metadatas = items.map(item => getMetadata(item))\n\n      const contract = getContract(ContractName.Committee, chainId)\n      const { abi } = getContract(ContractName.ERC721CollectionV2, chainId)\n      const implementation = new Contract(collection.contractAddress!, abi)\n\n      const manager = getContract(ContractName.CollectionManager, chainId)\n      const forwarder = getContract(ContractName.Forwarder, chainId)\n\n      const tokenIdsChunks = groupsOf(tokenIds, MAX_ITEMS)\n      const itemsChunks = groupsOf(items, MAX_ITEMS)\n      const metadatasChunks = groupsOf(metadatas, MAX_ITEMS)\n      const contentHashesChunks = groupsOf(contentHashes, MAX_ITEMS)\n      const txHashes: string[] = []\n\n      for (let i = 0; i < tokenIdsChunks.length; i++) {\n        const data: string = yield call(\n          getMethodData,\n          implementation.populateTransaction.rescueItems(tokenIdsChunks[i], contentHashesChunks[i], metadatasChunks[i])\n        )\n\n        const txHash: string = yield call(sendTransaction, contract, committee =>\n          committee.manageCollection(manager.address, forwarder.address, collection.contractAddress!, [data])\n        )\n\n        txHashes.push(txHash)\n        yield put(rescueItemsChunkSuccess(collection, itemsChunks[i], contentHashesChunks[i], chainId, txHash))\n\n        yield call(waitForTx, txHash)\n      }\n      const newItems = items.map<Item>((item, index) => ({ ...item, blockchainContentHash: contentHashes[index] }))\n      yield put(rescueItemsSuccess(collection, newItems, contentHashes, chainId, txHashes))\n    } catch (error) {\n      yield put(rescueItemsFailure(collection, items, contentHashes, error.message))\n    }\n  }\n\n  function* handleDownloadItemRequest(action: DownloadItemRequestAction) {\n    const { itemId } = action.payload\n\n    try {\n      // find item\n      const items: ReturnType<typeof getItemsById> = yield select(getItemsById)\n      const item = items[itemId]\n      if (!item) {\n        throw new Error(`Item not found for itemId=\"${itemId}\"`)\n      }\n\n      // download blobs\n      const files: Record<string, Blob> = yield call([legacyBuilder, 'fetchContents'], item.contents)\n\n      // check if both representations are equal\n      const maleHashes: string[] = []\n      const femaleHashes: string[] = []\n      for (const path of Object.keys(item.contents)) {\n        const hash = item.contents[path]\n        if (path.startsWith(BodyShapeType.MALE)) {\n          maleHashes.push(hash)\n        } else if (path.startsWith(BodyShapeType.FEMALE)) {\n          femaleHashes.push(hash)\n        }\n      }\n      const areRepresentationsEqual = maleHashes.length === femaleHashes.length && maleHashes.every(hash => femaleHashes.includes(hash))\n\n      // build zip files, if both representations are equal, the /male and /female directories can be merged\n      const zip: Record<string, Blob> = yield call(buildZipContents, files, areRepresentationsEqual)\n\n      // download zip\n      const name = item.name.replace(/\\s/g, '_')\n      yield call(downloadZip, name, zip)\n\n      // success 🎉\n      yield put(downloadItemSuccess(itemId))\n    } catch (error) {\n      yield put(downloadItemFailure(itemId, error.message))\n    }\n  }\n}\n\nexport function* handleResetItemRequest(action: ResetItemRequestAction) {\n  const { itemId } = action.payload\n  const itemsById: Record<string, Item> = yield select(getItemsById)\n  const entitiesByItemId: Record<string, Entity> = yield select(getEntityByItemId)\n\n  const item = itemsById[itemId]\n  const entity = entitiesByItemId[itemId]\n\n  try {\n    const catalystItem = entity.metadata as CatalystItem\n\n    if (!entity.content) {\n      throw new Error('Entity does not have content')\n    }\n\n    const entityContentsAsMap = entity.content.reduce<Record<string, string>>((contents, { file, hash }) => {\n      contents[file] = hash\n      return contents\n    }, {})\n\n    // Fetch blobs from the catalyst so they can be reuploaded to the item\n    const newContents: Record<string, Blob> = yield Promise.all(\n      Object.entries(entityContentsAsMap).map<Promise<[string, Blob]>>(async ([key, hash]) => [\n        key,\n        await fetch(getCatalystContentUrl(hash)).then(res => res.blob())\n      ])\n    ).then(res =>\n      res.reduce<Record<string, Blob>>((contents, [key, blob]) => {\n        contents[key] = blob\n        return contents\n      }, {})\n    )\n\n    // Replace the current item with values from the item in the catalyst\n    const newItem: Item = {\n      ...item,\n      name: catalystItem.name,\n      description: catalystItem.description,\n      contents: entityContentsAsMap,\n      data: catalystItem.data as WearableData\n    }\n\n    yield put(saveItemRequest(newItem, newContents))\n\n    const saveItemResult: {\n      success: SaveItemSuccessAction\n      failure: SaveItemFailureAction\n    } = yield race({\n      success: take(SAVE_ITEM_SUCCESS),\n      failure: take(SAVE_ITEM_FAILURE)\n    })\n\n    if (saveItemResult.success) {\n      yield put(resetItemSuccess(itemId))\n    } else if (saveItemResult.failure) {\n      yield put(resetItemFailure(itemId, saveItemResult.failure.payload.error))\n    }\n  } catch (error) {\n    yield put(resetItemFailure(itemId, error.message))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}