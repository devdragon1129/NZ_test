{"ast":null,"code":"import { StringTools } from '../../Misc/stringTools';\n/** @hidden */\n\nvar ShaderCodeNode =\n/** @class */\nfunction () {\n  function ShaderCodeNode() {\n    this.children = [];\n  }\n\n  ShaderCodeNode.prototype.isValid = function (preprocessors) {\n    return true;\n  };\n\n  ShaderCodeNode.prototype.process = function (preprocessors, options) {\n    var result = \"\";\n\n    if (this.line) {\n      var value = this.line;\n      var processor = options.processor;\n\n      if (processor) {\n        // This must be done before other replacements to avoid mistakenly changing something that was already changed.\n        if (processor.lineProcessor) {\n          value = processor.lineProcessor(value, options.isFragment);\n        }\n\n        if (processor.attributeProcessor && StringTools.StartsWith(this.line, \"attribute\")) {\n          value = processor.attributeProcessor(this.line);\n        } else if (processor.varyingProcessor && StringTools.StartsWith(this.line, \"varying\")) {\n          value = processor.varyingProcessor(this.line, options.isFragment);\n        } else if ((processor.uniformProcessor || processor.uniformBufferProcessor) && StringTools.StartsWith(this.line, \"uniform\")) {\n          var regex = /uniform (.+) (.+)/;\n\n          if (regex.test(this.line)) {\n            // uniform\n            if (processor.uniformProcessor) {\n              value = processor.uniformProcessor(this.line, options.isFragment);\n            }\n          } else {\n            // Uniform buffer\n            if (processor.uniformBufferProcessor) {\n              value = processor.uniformBufferProcessor(this.line, options.isFragment);\n              options.lookForClosingBracketForUniformBuffer = true;\n            }\n          }\n        }\n\n        if (processor.endOfUniformBufferProcessor) {\n          if (options.lookForClosingBracketForUniformBuffer && this.line.indexOf(\"}\") !== -1) {\n            options.lookForClosingBracketForUniformBuffer = false;\n            value = processor.endOfUniformBufferProcessor(this.line, options.isFragment);\n          }\n        }\n      }\n\n      result += value + \"\\r\\n\";\n    }\n\n    this.children.forEach(function (child) {\n      result += child.process(preprocessors, options);\n    });\n\n    if (this.additionalDefineKey) {\n      preprocessors[this.additionalDefineKey] = this.additionalDefineValue || \"true\";\n    }\n\n    return result;\n  };\n\n  return ShaderCodeNode;\n}();\n\nexport { ShaderCodeNode };","map":null,"metadata":{},"sourceType":"module"}