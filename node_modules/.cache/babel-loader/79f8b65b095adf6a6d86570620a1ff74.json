{"ast":null,"code":"import { connect } from 'react-redux';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getData as getWallet } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { getCollection, getLoading, getStatusByCollectionId } from 'modules/collection/selectors';\nimport { setCollectionMintersRequest, SET_COLLECTION_MINTERS_REQUEST } from 'modules/collection/actions';\nimport SellCollectionModal from './SellCollectionModal';\nimport { UNSYNCED_STATES } from 'modules/item/utils';\n\nvar mapState = function mapState(state, ownProps) {\n  var collectionId = ownProps.metadata.collectionId;\n  return {\n    collection: getCollection(state, collectionId),\n    wallet: getWallet(state),\n    isLoading: isLoadingType(getLoading(state), SET_COLLECTION_MINTERS_REQUEST),\n    hasUnsyncedItems: UNSYNCED_STATES.has(getStatusByCollectionId(state)[collectionId])\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onSetMinters: function onSetMinters(collection, minters) {\n      return dispatch(setCollectionMintersRequest(collection, minters));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(SellCollectionModal);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/SellCollectionModal/SellCollectionModal.container.ts"],"names":["connect","isLoadingType","getData","getWallet","getCollection","getLoading","getStatusByCollectionId","setCollectionMintersRequest","SET_COLLECTION_MINTERS_REQUEST","SellCollectionModal","UNSYNCED_STATES","mapState","state","ownProps","collectionId","metadata","collection","wallet","isLoading","hasUnsyncedItems","has","mapDispatch","dispatch","onSetMinters","minters"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,OAAO,IAAIC,SAApB,QAAqC,kDAArC;AAEA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,uBAApC,QAAmE,8BAAnE;AACA,SAASC,2BAAT,EAAsCC,8BAAtC,QAA4E,4BAA5E;AAEA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,eAAT,QAAgC,oBAAhC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAmBC,QAAnB,EAAyD;AAAA,MAChEC,YADgE,GAC/CD,QAAQ,CAACE,QADsC,CAChED,YADgE;AAGxE,SAAO;AACLE,IAAAA,UAAU,EAAEZ,aAAa,CAACQ,KAAD,EAAQE,YAAR,CADpB;AAELG,IAAAA,MAAM,EAAEd,SAAS,CAACS,KAAD,CAFZ;AAGLM,IAAAA,SAAS,EAAEjB,aAAa,CAACI,UAAU,CAACO,KAAD,CAAX,EAAoBJ,8BAApB,CAHnB;AAILW,IAAAA,gBAAgB,EAAET,eAAe,CAACU,GAAhB,CAAoBd,uBAAuB,CAACM,KAAD,CAAvB,CAA+BE,YAA/B,CAApB;AAJb,GAAP;AAMD,CATD;;AAWA,IAAMO,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,YAAY,EAAE,sBAACP,UAAD,EAAaQ,OAAb;AAAA,aAAyBF,QAAQ,CAACf,2BAA2B,CAACS,UAAD,EAAaQ,OAAb,CAA5B,CAAjC;AAAA;AADkD,GAA9C;AAAA,CAApB;;AAIA,eAAexB,OAAO,CAACW,QAAD,EAAWU,WAAX,CAAP,CAA+BZ,mBAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { getData as getWallet } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { RootState } from 'modules/common/types'\nimport { getCollection, getLoading, getStatusByCollectionId } from 'modules/collection/selectors'\nimport { setCollectionMintersRequest, SET_COLLECTION_MINTERS_REQUEST } from 'modules/collection/actions'\nimport { OwnProps, MapStateProps, MapDispatchProps, MapDispatch } from './SellCollectionModal.types'\nimport SellCollectionModal from './SellCollectionModal'\nimport { UNSYNCED_STATES } from 'modules/item/utils'\n\nconst mapState = (state: RootState, ownProps: OwnProps): MapStateProps => {\n  const { collectionId } = ownProps.metadata\n\n  return {\n    collection: getCollection(state, collectionId)!,\n    wallet: getWallet(state)!,\n    isLoading: isLoadingType(getLoading(state), SET_COLLECTION_MINTERS_REQUEST),\n    hasUnsyncedItems: UNSYNCED_STATES.has(getStatusByCollectionId(state)[collectionId])\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onSetMinters: (collection, minters) => dispatch(setCollectionMintersRequest(collection, minters))\n})\n\nexport default connect(mapState, mapDispatch)(SellCollectionModal)\n"]},"metadata":{},"sourceType":"module"}