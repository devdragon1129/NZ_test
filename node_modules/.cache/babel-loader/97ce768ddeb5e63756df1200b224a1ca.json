{"ast":null,"code":"/**\r\n * A behavior that when attached to a mesh will allow the mesh to fade in and out\r\n */\nvar FadeInOutBehavior =\n/** @class */\nfunction () {\n  /**\r\n   * Instatiates the FadeInOutBehavior\r\n   */\n  function FadeInOutBehavior() {\n    var _this = this;\n    /**\r\n     * Time in milliseconds to delay before fading in (Default: 0)\r\n     */\n\n\n    this.delay = 0;\n    /**\r\n     * Time in milliseconds for the mesh to fade in (Default: 300)\r\n     */\n\n    this.fadeInTime = 300;\n    this._millisecondsPerFrame = 1000 / 60;\n    this._hovered = false;\n    this._hoverValue = 0;\n    this._ownerNode = null;\n\n    this._update = function () {\n      if (_this._ownerNode) {\n        _this._hoverValue += _this._hovered ? _this._millisecondsPerFrame : -_this._millisecondsPerFrame;\n\n        _this._setAllVisibility(_this._ownerNode, (_this._hoverValue - _this.delay) / _this.fadeInTime);\n\n        if (_this._ownerNode.visibility > 1) {\n          _this._setAllVisibility(_this._ownerNode, 1);\n\n          _this._hoverValue = _this.fadeInTime + _this.delay;\n          return;\n        } else if (_this._ownerNode.visibility < 0) {\n          _this._setAllVisibility(_this._ownerNode, 0);\n\n          if (_this._hoverValue < 0) {\n            _this._hoverValue = 0;\n            return;\n          }\n        }\n\n        setTimeout(_this._update, _this._millisecondsPerFrame);\n      }\n    };\n  }\n\n  Object.defineProperty(FadeInOutBehavior.prototype, \"name\", {\n    /**\r\n     *  The name of the behavior\r\n     */\n    get: function get() {\n      return \"FadeInOut\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   *  Initializes the behavior\r\n   */\n\n  FadeInOutBehavior.prototype.init = function () {};\n  /**\r\n   * Attaches the fade behavior on the passed in mesh\r\n   * @param ownerNode The mesh that will be faded in/out once attached\r\n   */\n\n\n  FadeInOutBehavior.prototype.attach = function (ownerNode) {\n    this._ownerNode = ownerNode;\n\n    this._setAllVisibility(this._ownerNode, 0);\n  };\n  /**\r\n   *  Detaches the behavior from the mesh\r\n   */\n\n\n  FadeInOutBehavior.prototype.detach = function () {\n    this._ownerNode = null;\n  };\n  /**\r\n   * Triggers the mesh to begin fading in or out\r\n   * @param value if the object should fade in or out (true to fade in)\r\n   */\n\n\n  FadeInOutBehavior.prototype.fadeIn = function (value) {\n    this._hovered = value;\n\n    this._update();\n  };\n\n  FadeInOutBehavior.prototype._setAllVisibility = function (mesh, value) {\n    var _this = this;\n\n    mesh.visibility = value;\n    mesh.getChildMeshes().forEach(function (c) {\n      _this._setAllVisibility(c, value);\n    });\n  };\n\n  return FadeInOutBehavior;\n}();\n\nexport { FadeInOutBehavior };","map":null,"metadata":{},"sourceType":"module"}