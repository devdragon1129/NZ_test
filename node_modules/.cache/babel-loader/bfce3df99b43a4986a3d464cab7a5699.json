{"ast":null,"code":"import { Scene } from \"../scene\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { SubSurfaceConfiguration } from \"./subSurfaceConfiguration\";\nimport { AbstractScene } from \"../abstractScene\";\nimport { Color3 } from \"../Maths/math.color\"; // Adds the parser to the scene parsers.\n\nAbstractScene.AddParser(SceneComponentConstants.NAME_SUBSURFACE, function (parsedData, scene) {\n  // Diffusion profiles\n  if (parsedData.ssDiffusionProfileColors !== undefined && parsedData.ssDiffusionProfileColors !== null) {\n    scene.enableSubSurfaceForPrePass();\n\n    if (scene.subSurfaceConfiguration) {\n      for (var index = 0, cache = parsedData.ssDiffusionProfileColors.length; index < cache; index++) {\n        var color = parsedData.ssDiffusionProfileColors[index];\n        scene.subSurfaceConfiguration.addDiffusionProfile(new Color3(color.r, color.g, color.b));\n      }\n    }\n  }\n});\nObject.defineProperty(Scene.prototype, \"subSurfaceConfiguration\", {\n  get: function get() {\n    return this._subSurfaceConfiguration;\n  },\n  set: function set(value) {\n    if (value) {\n      if (this.enablePrePassRenderer()) {\n        this._subSurfaceConfiguration = value;\n      }\n    }\n  },\n  enumerable: true,\n  configurable: true\n});\n\nScene.prototype.enableSubSurfaceForPrePass = function () {\n  if (this._subSurfaceConfiguration) {\n    return this._subSurfaceConfiguration;\n  }\n\n  var prePassRenderer = this.enablePrePassRenderer();\n\n  if (prePassRenderer) {\n    this._subSurfaceConfiguration = new SubSurfaceConfiguration(this);\n    prePassRenderer.addEffectConfiguration(this._subSurfaceConfiguration);\n    return this._subSurfaceConfiguration;\n  }\n\n  return null;\n};\n\nScene.prototype.disableSubSurfaceForPrePass = function () {\n  if (!this._subSurfaceConfiguration) {\n    return;\n  }\n\n  this._subSurfaceConfiguration.dispose();\n\n  this._subSurfaceConfiguration = null;\n};\n/**\r\n * Defines the Geometry Buffer scene component responsible to manage a G-Buffer useful\r\n * in several rendering techniques.\r\n */\n\n\nvar SubSurfaceSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function SubSurfaceSceneComponent(scene) {\n    /**\r\n     * The component name helpful to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_PREPASSRENDERER;\n    this.scene = scene;\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  SubSurfaceSceneComponent.prototype.register = function () {};\n  /**\r\n   * Serializes the component data to the specified json object\r\n   * @param serializationObject The object to serialize to\r\n   */\n\n\n  SubSurfaceSceneComponent.prototype.serialize = function (serializationObject) {\n    if (!this.scene.subSurfaceConfiguration) {\n      return;\n    }\n\n    var ssDiffusionProfileColors = this.scene.subSurfaceConfiguration.ssDiffusionProfileColors;\n    serializationObject.ssDiffusionProfileColors = [];\n\n    for (var i = 0; i < ssDiffusionProfileColors.length; i++) {\n      serializationObject.ssDiffusionProfileColors.push({\n        r: ssDiffusionProfileColors[i].r,\n        g: ssDiffusionProfileColors[i].g,\n        b: ssDiffusionProfileColors[i].b\n      });\n    }\n  };\n  /**\r\n   * Adds all the elements from the container to the scene\r\n   * @param container the container holding the elements\r\n   */\n\n\n  SubSurfaceSceneComponent.prototype.addFromContainer = function (container) {// Nothing to do\n  };\n  /**\r\n   * Removes all the elements in the container from the scene\r\n   * @param container contains the elements to remove\r\n   * @param dispose if the removed element should be disposed (default: false)\r\n   */\n\n\n  SubSurfaceSceneComponent.prototype.removeFromContainer = function (container, dispose) {\n    // Make sure nothing will be serialized\n    if (!this.scene.prePassRenderer) {\n      return;\n    }\n\n    if (this.scene.subSurfaceConfiguration) {\n      this.scene.subSurfaceConfiguration.clearAllDiffusionProfiles();\n    }\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  SubSurfaceSceneComponent.prototype.rebuild = function () {// Nothing to do for this component\n  };\n  /**\r\n   * Disposes the component and the associated ressources\r\n   */\n\n\n  SubSurfaceSceneComponent.prototype.dispose = function () {// Nothing to do for this component\n  };\n\n  return SubSurfaceSceneComponent;\n}();\n\nexport { SubSurfaceSceneComponent };\n\nSubSurfaceConfiguration._SceneComponentInitialization = function (scene) {\n  // Register the G Buffer component to the scene.\n  var component = scene._getComponent(SceneComponentConstants.NAME_SUBSURFACE);\n\n  if (!component) {\n    component = new SubSurfaceSceneComponent(scene);\n\n    scene._addComponent(component);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}