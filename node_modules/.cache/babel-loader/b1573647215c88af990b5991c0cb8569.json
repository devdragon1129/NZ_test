{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialConnectionPointDirection } from '../../nodeMaterialBlockConnectionPoint';\nimport { MaterialHelper } from '../../../materialHelper';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { NodeMaterialSystemValues } from '../../Enums/nodeMaterialSystemValues';\nimport { InputBlock } from '../Input/inputBlock';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport { PBRBaseMaterial } from '../../../PBR/pbrBaseMaterial';\nimport { editableInPropertyPage, PropertyTypeForEdition } from \"../../nodeMaterialDecorator\";\nimport { NodeMaterialConnectionPointCustomObject } from \"../../nodeMaterialConnectionPointCustomObject\";\nimport { SheenBlock } from './sheenBlock';\nimport { BRDFTextureTools } from '../../../../Misc/brdfTextureTools';\nimport { MaterialFlags } from '../../../materialFlags';\nimport { AnisotropyBlock } from './anisotropyBlock';\nimport { ReflectionBlock } from './reflectionBlock';\nimport { ClearCoatBlock } from './clearCoatBlock';\nimport { SubSurfaceBlock } from './subSurfaceBlock';\nimport { Color3, TmpColors } from '../../../../Maths/math.color';\nvar mapOutputToVariable = {\n  \"ambientClr\": [\"finalAmbient\", \"\"],\n  \"diffuseDir\": [\"finalDiffuse\", \"\"],\n  \"specularDir\": [\"finalSpecularScaled\", \"!defined(UNLIT) && defined(SPECULARTERM)\"],\n  \"clearcoatDir\": [\"finalClearCoatScaled\", \"!defined(UNLIT) && defined(CLEARCOAT)\"],\n  \"sheenDir\": [\"finalSheenScaled\", \"!defined(UNLIT) && defined(SHEEN)\"],\n  \"diffuseInd\": [\"finalIrradiance\", \"!defined(UNLIT) && defined(REFLECTION)\"],\n  \"specularInd\": [\"finalRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION)\"],\n  \"clearcoatInd\": [\"clearcoatOut.finalClearCoatRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION) && defined(CLEARCOAT)\"],\n  \"sheenInd\": [\"sheenOut.finalSheenRadianceScaled\", \"!defined(UNLIT) && defined(REFLECTION) && defined(SHEEN) && defined(ENVIRONMENTBRDF)\"],\n  \"refraction\": [\"subSurfaceOut.finalRefraction\", \"!defined(UNLIT) && defined(SS_REFRACTION)\"],\n  \"lighting\": [\"finalColor.rgb\", \"\"],\n  \"shadow\": [\"shadow\", \"\"],\n  \"alpha\": [\"alpha\", \"\"]\n};\n/**\r\n * Block used to implement the PBR metallic/roughness model\r\n */\n\nvar PBRMetallicRoughnessBlock =\n/** @class */\nfunction (_super) {\n  __extends(PBRMetallicRoughnessBlock, _super);\n  /**\r\n   * Create a new ReflectionBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function PBRMetallicRoughnessBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.VertexAndFragment) || this;\n\n    _this._environmentBRDFTexture = null;\n    _this._metallicReflectanceColor = Color3.White();\n    _this._metallicF0Factor = 1;\n    /**\r\n     * Intensity of the direct lights e.g. the four lights available in your scene.\r\n     * This impacts both the direct diffuse and specular highlights.\r\n     */\n\n    _this.directIntensity = 1.0;\n    /**\r\n     * Intensity of the environment e.g. how much the environment will light the object\r\n     * either through harmonics for rough material or through the refelction for shiny ones.\r\n     */\n\n    _this.environmentIntensity = 1.0;\n    /**\r\n     * This is a special control allowing the reduction of the specular highlights coming from the\r\n     * four lights of the scene. Those highlights may not be needed in full environment lighting.\r\n     */\n\n    _this.specularIntensity = 1.0;\n    /**\r\n     * Defines the  falloff type used in this material.\r\n     * It by default is Physical.\r\n     */\n\n    _this.lightFalloff = 0;\n    /**\r\n     * Specifies that alpha test should be used\r\n     */\n\n    _this.useAlphaTest = false;\n    /**\r\n     * Defines the alpha limits in alpha test mode.\r\n     */\n\n    _this.alphaTestCutoff = 0.5;\n    /**\r\n     * Specifies that alpha blending should be used\r\n     */\n\n    _this.useAlphaBlending = false;\n    /**\r\n     * Specifies that the material will keeps the reflection highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When the street lights reflects on it you can not see what is behind.\r\n     */\n\n    _this.useRadianceOverAlpha = true;\n    /**\r\n     * Specifies that the material will keeps the specular highlights over a transparent surface (only the most luminous ones).\r\n     * A car glass is a good exemple of that. When sun reflects on it you can not see what is behind.\r\n     */\n\n    _this.useSpecularOverAlpha = true;\n    /**\r\n     * Enables specular anti aliasing in the PBR shader.\r\n     * It will both interacts on the Geometry for analytical and IBL lighting.\r\n     * It also prefilter the roughness map based on the bump values.\r\n     */\n\n    _this.enableSpecularAntiAliasing = false;\n    /**\r\n     * Enables realtime filtering on the texture.\r\n     */\n\n    _this.realTimeFiltering = false;\n    /**\r\n     * Quality switch for realtime filtering\r\n     */\n\n    _this.realTimeFilteringQuality = 8;\n    /**\r\n     * Defines if the material uses energy conservation.\r\n     */\n\n    _this.useEnergyConservation = true;\n    /**\r\n     * This parameters will enable/disable radiance occlusion by preventing the radiance to lit\r\n     * too much the area relying on ambient texture to define their ambient occlusion.\r\n     */\n\n    _this.useRadianceOcclusion = true;\n    /**\r\n     * This parameters will enable/disable Horizon occlusion to prevent normal maps to look shiny when the normal\r\n     * makes the reflect vector face the model (under horizon).\r\n     */\n\n    _this.useHorizonOcclusion = true;\n    /**\r\n     * If set to true, no lighting calculations will be applied.\r\n     */\n\n    _this.unlit = false;\n    /**\r\n     * Force normal to face away from face.\r\n     */\n\n    _this.forceNormalForward = false;\n    /**\r\n     * Defines the material debug mode.\r\n     * It helps seeing only some components of the material while troubleshooting.\r\n     */\n\n    _this.debugMode = 0;\n    /**\r\n     * Specify from where on screen the debug mode should start.\r\n     * The value goes from -1 (full screen) to 1 (not visible)\r\n     * It helps with side by side comparison against the final render\r\n     * This defaults to 0\r\n     */\n\n    _this.debugLimit = 0;\n    /**\r\n     * As the default viewing range might not be enough (if the ambient is really small for instance)\r\n     * You can use the factor to better multiply the final value.\r\n     */\n\n    _this.debugFactor = 1;\n    _this._isUnique = true;\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerInput(\"worldNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"view\", NodeMaterialBlockConnectionPointTypes.Matrix, false);\n\n    _this.registerInput(\"cameraPosition\", NodeMaterialBlockConnectionPointTypes.Vector3, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"perturbedNormal\", NodeMaterialBlockConnectionPointTypes.Vector4, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"baseColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"metallic\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"roughness\", NodeMaterialBlockConnectionPointTypes.Float, false, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"ambientOcc\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"opacity\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"indexOfRefraction\", NodeMaterialBlockConnectionPointTypes.Float, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"ambientColor\", NodeMaterialBlockConnectionPointTypes.Color3, true, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerInput(\"reflection\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"reflection\", _this, NodeMaterialConnectionPointDirection.Input, ReflectionBlock, \"ReflectionBlock\"));\n\n    _this.registerInput(\"clearcoat\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"clearcoat\", _this, NodeMaterialConnectionPointDirection.Input, ClearCoatBlock, \"ClearCoatBlock\"));\n\n    _this.registerInput(\"sheen\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"sheen\", _this, NodeMaterialConnectionPointDirection.Input, SheenBlock, \"SheenBlock\"));\n\n    _this.registerInput(\"subsurface\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"subsurface\", _this, NodeMaterialConnectionPointDirection.Input, SubSurfaceBlock, \"SubSurfaceBlock\"));\n\n    _this.registerInput(\"anisotropy\", NodeMaterialBlockConnectionPointTypes.Object, true, NodeMaterialBlockTargets.Fragment, new NodeMaterialConnectionPointCustomObject(\"anisotropy\", _this, NodeMaterialConnectionPointDirection.Input, AnisotropyBlock, \"AnisotropyBlock\"));\n\n    _this.registerOutput(\"ambientClr\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"diffuseDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"specularDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"clearcoatDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"sheenDir\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"diffuseInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"specularInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"clearcoatInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"sheenInd\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"refraction\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"lighting\", NodeMaterialBlockConnectionPointTypes.Color3, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"shadow\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    _this.registerOutput(\"alpha\", NodeMaterialBlockConnectionPointTypes.Float, NodeMaterialBlockTargets.Fragment);\n\n    return _this;\n  }\n  /**\r\n   * Initialize the block and prepare the context for build\r\n   * @param state defines the state that will be used for the build\r\n   */\n\n\n  PBRMetallicRoughnessBlock.prototype.initialize = function (state) {\n    state._excludeVariableName(\"vLightingIntensity\");\n\n    state._excludeVariableName(\"geometricNormalW\");\n\n    state._excludeVariableName(\"normalW\");\n\n    state._excludeVariableName(\"faceNormal\");\n\n    state._excludeVariableName(\"albedoOpacityOut\");\n\n    state._excludeVariableName(\"surfaceAlbedo\");\n\n    state._excludeVariableName(\"alpha\");\n\n    state._excludeVariableName(\"aoOut\");\n\n    state._excludeVariableName(\"baseColor\");\n\n    state._excludeVariableName(\"reflectivityOut\");\n\n    state._excludeVariableName(\"microSurface\");\n\n    state._excludeVariableName(\"roughness\");\n\n    state._excludeVariableName(\"NdotVUnclamped\");\n\n    state._excludeVariableName(\"NdotV\");\n\n    state._excludeVariableName(\"alphaG\");\n\n    state._excludeVariableName(\"AARoughnessFactors\");\n\n    state._excludeVariableName(\"environmentBrdf\");\n\n    state._excludeVariableName(\"ambientMonochrome\");\n\n    state._excludeVariableName(\"seo\");\n\n    state._excludeVariableName(\"eho\");\n\n    state._excludeVariableName(\"environmentRadiance\");\n\n    state._excludeVariableName(\"irradianceVector\");\n\n    state._excludeVariableName(\"environmentIrradiance\");\n\n    state._excludeVariableName(\"diffuseBase\");\n\n    state._excludeVariableName(\"specularBase\");\n\n    state._excludeVariableName(\"preInfo\");\n\n    state._excludeVariableName(\"info\");\n\n    state._excludeVariableName(\"shadow\");\n\n    state._excludeVariableName(\"finalDiffuse\");\n\n    state._excludeVariableName(\"finalAmbient\");\n\n    state._excludeVariableName(\"ambientOcclusionForDirectDiffuse\");\n\n    state._excludeVariableName(\"finalColor\");\n\n    state._excludeVariableName(\"vClipSpacePosition\");\n\n    state._excludeVariableName(\"vDebugMode\");\n  };\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  PBRMetallicRoughnessBlock.prototype.getClassName = function () {\n    return \"PBRMetallicRoughnessBlock\";\n  };\n\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"worldPosition\", {\n    /**\r\n     * Gets the world position input component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"worldNormal\", {\n    /**\r\n     * Gets the world normal input component\r\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"view\", {\n    /**\r\n     * Gets the view matrix parameter\r\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"cameraPosition\", {\n    /**\r\n     * Gets the camera position input component\r\n     */\n    get: function get() {\n      return this._inputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"perturbedNormal\", {\n    /**\r\n     * Gets the perturbed normal input component\r\n     */\n    get: function get() {\n      return this._inputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"baseColor\", {\n    /**\r\n     * Gets the base color input component\r\n     */\n    get: function get() {\n      return this._inputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"metallic\", {\n    /**\r\n     * Gets the metallic input component\r\n     */\n    get: function get() {\n      return this._inputs[6];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"roughness\", {\n    /**\r\n     * Gets the roughness input component\r\n     */\n    get: function get() {\n      return this._inputs[7];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"ambientOcc\", {\n    /**\r\n     * Gets the ambient occlusion input component\r\n     */\n    get: function get() {\n      return this._inputs[8];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"opacity\", {\n    /**\r\n     * Gets the opacity input component\r\n     */\n    get: function get() {\n      return this._inputs[9];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"indexOfRefraction\", {\n    /**\r\n     * Gets the index of refraction input component\r\n     */\n    get: function get() {\n      return this._inputs[10];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"ambientColor\", {\n    /**\r\n     * Gets the ambient color input component\r\n     */\n    get: function get() {\n      return this._inputs[11];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"reflection\", {\n    /**\r\n     * Gets the reflection object parameters\r\n     */\n    get: function get() {\n      return this._inputs[12];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"clearcoat\", {\n    /**\r\n     * Gets the clear coat object parameters\r\n     */\n    get: function get() {\n      return this._inputs[13];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"sheen\", {\n    /**\r\n     * Gets the sheen object parameters\r\n     */\n    get: function get() {\n      return this._inputs[14];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"subsurface\", {\n    /**\r\n     * Gets the sub surface object parameters\r\n     */\n    get: function get() {\n      return this._inputs[15];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"anisotropy\", {\n    /**\r\n     * Gets the anisotropy object parameters\r\n     */\n    get: function get() {\n      return this._inputs[16];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"ambientClr\", {\n    /**\r\n     * Gets the ambient output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"diffuseDir\", {\n    /**\r\n     * Gets the diffuse output component\r\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"specularDir\", {\n    /**\r\n     * Gets the specular output component\r\n     */\n    get: function get() {\n      return this._outputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"clearcoatDir\", {\n    /**\r\n     * Gets the clear coat output component\r\n     */\n    get: function get() {\n      return this._outputs[3];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"sheenDir\", {\n    /**\r\n     * Gets the sheen output component\r\n     */\n    get: function get() {\n      return this._outputs[4];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"diffuseIndirect\", {\n    /**\r\n     * Gets the indirect diffuse output component\r\n     */\n    get: function get() {\n      return this._outputs[5];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"specularIndirect\", {\n    /**\r\n     * Gets the indirect specular output component\r\n     */\n    get: function get() {\n      return this._outputs[6];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"clearcoatIndirect\", {\n    /**\r\n     * Gets the indirect clear coat output component\r\n     */\n    get: function get() {\n      return this._outputs[7];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"sheenIndirect\", {\n    /**\r\n     * Gets the indirect sheen output component\r\n     */\n    get: function get() {\n      return this._outputs[8];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"refraction\", {\n    /**\r\n     * Gets the refraction output component\r\n     */\n    get: function get() {\n      return this._outputs[9];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"lighting\", {\n    /**\r\n     * Gets the global lighting output component\r\n     */\n    get: function get() {\n      return this._outputs[10];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"shadow\", {\n    /**\r\n     * Gets the shadow output component\r\n     */\n    get: function get() {\n      return this._outputs[11];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PBRMetallicRoughnessBlock.prototype, \"alpha\", {\n    /**\r\n     * Gets the alpha output component\r\n     */\n    get: function get() {\n      return this._outputs[12];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  PBRMetallicRoughnessBlock.prototype.autoConfigure = function (material) {\n    if (!this.cameraPosition.isConnected) {\n      var cameraPositionInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.CameraPosition;\n      });\n\n      if (!cameraPositionInput) {\n        cameraPositionInput = new InputBlock(\"cameraPosition\");\n        cameraPositionInput.setAsSystemValue(NodeMaterialSystemValues.CameraPosition);\n      }\n\n      cameraPositionInput.output.connectTo(this.cameraPosition);\n    }\n\n    if (!this.view.isConnected) {\n      var viewInput = material.getInputBlockByPredicate(function (b) {\n        return b.systemValue === NodeMaterialSystemValues.View;\n      });\n\n      if (!viewInput) {\n        viewInput = new InputBlock(\"view\");\n        viewInput.setAsSystemValue(NodeMaterialSystemValues.View);\n      }\n\n      viewInput.output.connectTo(this.view);\n    }\n  };\n\n  PBRMetallicRoughnessBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    // General\n    defines.setValue(\"PBR\", true);\n    defines.setValue(\"METALLICWORKFLOW\", true);\n    defines.setValue(\"DEBUGMODE\", this.debugMode, true);\n    defines.setValue(\"NORMALXYSCALE\", true);\n    defines.setValue(\"BUMP\", this.perturbedNormal.isConnected, true);\n    defines.setValue(\"LODBASEDMICROSFURACE\", this._scene.getEngine().getCaps().textureLOD); // Albedo & Opacity\n\n    defines.setValue(\"ALBEDO\", false, true);\n    defines.setValue(\"OPACITY\", this.opacity.isConnected, true); // Ambient occlusion\n\n    defines.setValue(\"AMBIENT\", true, true);\n    defines.setValue(\"AMBIENTINGRAYSCALE\", false, true); // Reflectivity\n\n    defines.setValue(\"REFLECTIVITY\", false, true);\n    defines.setValue(\"AOSTOREINMETALMAPRED\", false, true);\n    defines.setValue(\"METALLNESSSTOREINMETALMAPBLUE\", false, true);\n    defines.setValue(\"ROUGHNESSSTOREINMETALMAPALPHA\", false, true);\n    defines.setValue(\"ROUGHNESSSTOREINMETALMAPGREEN\", false, true); // Lighting & colors\n\n    if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_STANDARD) {\n      defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\n      defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\n    } else if (this.lightFalloff === PBRBaseMaterial.LIGHTFALLOFF_GLTF) {\n      defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", false);\n      defines.setValue(\"USEGLTFLIGHTFALLOFF\", true);\n    } else {\n      defines.setValue(\"USEPHYSICALLIGHTFALLOFF\", true);\n      defines.setValue(\"USEGLTFLIGHTFALLOFF\", false);\n    } // Transparency\n\n\n    var alphaTestCutOffString = this.alphaTestCutoff.toString();\n    defines.setValue(\"ALPHABLEND\", this.useAlphaBlending, true);\n    defines.setValue(\"ALPHAFROMALBEDO\", false, true);\n    defines.setValue(\"ALPHATEST\", this.useAlphaTest, true);\n    defines.setValue(\"ALPHATESTVALUE\", alphaTestCutOffString.indexOf('.') < 0 ? alphaTestCutOffString + \".\" : alphaTestCutOffString, true);\n    defines.setValue(\"OPACITYRGB\", false, true); // Rendering\n\n    defines.setValue(\"RADIANCEOVERALPHA\", this.useRadianceOverAlpha, true);\n    defines.setValue(\"SPECULAROVERALPHA\", this.useSpecularOverAlpha, true);\n    defines.setValue(\"SPECULARAA\", this._scene.getEngine().getCaps().standardDerivatives && this.enableSpecularAntiAliasing, true);\n    defines.setValue(\"REALTIME_FILTERING\", this.realTimeFiltering, true);\n\n    if (this._scene.getEngine().webGLVersion > 1) {\n      defines.setValue(\"NUM_SAMPLES\", this.realTimeFilteringQuality + \"u\", true);\n    } else {\n      defines.setValue(\"NUM_SAMPLES\", \"\" + this.realTimeFilteringQuality, true);\n    } // Advanced\n\n\n    defines.setValue(\"BRDF_V_HEIGHT_CORRELATED\", true);\n    defines.setValue(\"MS_BRDF_ENERGY_CONSERVATION\", this.useEnergyConservation, true);\n    defines.setValue(\"RADIANCEOCCLUSION\", this.useRadianceOcclusion, true);\n    defines.setValue(\"HORIZONOCCLUSION\", this.useHorizonOcclusion, true);\n    defines.setValue(\"UNLIT\", this.unlit, true);\n    defines.setValue(\"FORCENORMALFORWARD\", this.forceNormalForward, true);\n\n    if (this._environmentBRDFTexture && MaterialFlags.ReflectionTextureEnabled) {\n      defines.setValue(\"ENVIRONMENTBRDF\", true);\n      defines.setValue(\"ENVIRONMENTBRDF_RGBD\", this._environmentBRDFTexture.isRGBD, true);\n    } else {\n      defines.setValue(\"ENVIRONMENTBRDF\", false);\n      defines.setValue(\"ENVIRONMENTBRDF_RGBD\", false);\n    }\n\n    if (!defines._areLightsDirty) {\n      return;\n    }\n\n    var scene = mesh.getScene();\n\n    if (!this.light) {\n      // Lights\n      MaterialHelper.PrepareDefinesForLights(scene, mesh, defines, true, nodeMaterial.maxSimultaneousLights);\n      defines._needNormals = true; // Multiview\n\n      MaterialHelper.PrepareDefinesForMultiview(scene, defines);\n    } else {\n      var state = {\n        needNormals: false,\n        needRebuild: false,\n        lightmapMode: false,\n        shadowEnabled: false,\n        specularEnabled: false\n      };\n      MaterialHelper.PrepareDefinesForLight(scene, mesh, this.light, this._lightId, defines, true, state);\n\n      if (state.needRebuild) {\n        defines.rebuild();\n      }\n    }\n  };\n\n  PBRMetallicRoughnessBlock.prototype.updateUniformsAndSamples = function (state, nodeMaterial, defines, uniformBuffers) {\n    for (var lightIndex = 0; lightIndex < nodeMaterial.maxSimultaneousLights; lightIndex++) {\n      if (!defines[\"LIGHT\" + lightIndex]) {\n        break;\n      }\n\n      var onlyUpdateBuffersList = state.uniforms.indexOf(\"vLightData\" + lightIndex) >= 0;\n      MaterialHelper.PrepareUniformsAndSamplersForLight(lightIndex, state.uniforms, state.samplers, defines[\"PROJECTEDLIGHTTEXTURE\" + lightIndex], uniformBuffers, onlyUpdateBuffersList);\n    }\n  };\n\n  PBRMetallicRoughnessBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    var _a, _b;\n\n    if (!mesh) {\n      return;\n    }\n\n    var scene = mesh.getScene();\n\n    if (!this.light) {\n      MaterialHelper.BindLights(scene, mesh, effect, true, nodeMaterial.maxSimultaneousLights);\n    } else {\n      MaterialHelper.BindLight(this.light, this._lightId, scene, effect, true);\n    }\n\n    effect.setTexture(this._environmentBrdfSamplerName, this._environmentBRDFTexture);\n    effect.setFloat2(\"vDebugMode\", this.debugLimit, this.debugFactor);\n    var ambientScene = this._scene.ambientColor;\n\n    if (ambientScene) {\n      effect.setColor3(\"ambientFromScene\", ambientScene);\n    }\n\n    var invertNormal = scene.useRightHandedSystem === (scene._mirroredCameraPosition != null);\n    effect.setFloat(this._invertNormalName, invertNormal ? -1 : 1);\n    effect.setFloat4(\"vLightingIntensity\", this.directIntensity, 1, this.environmentIntensity * this._scene.environmentIntensity, this.specularIntensity); // reflectivity bindings\n\n    var outside_ior = 1; // consider air as clear coat and other layers would remap in the shader.\n\n    var ior = (_b = (_a = this.indexOfRefraction.connectInputBlock) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1.5; // We are here deriving our default reflectance from a common value for none metallic surface.\n    // Based of the schlick fresnel approximation model\n    // for dielectrics.\n\n    var f0 = Math.pow((ior - outside_ior) / (ior + outside_ior), 2); // Tweak the default F0 and F90 based on our given setup\n\n    this._metallicReflectanceColor.scaleToRef(f0 * this._metallicF0Factor, TmpColors.Color3[0]);\n\n    var metallicF90 = this._metallicF0Factor;\n    effect.setColor4(this._vMetallicReflectanceFactorsName, TmpColors.Color3[0], metallicF90);\n  };\n\n  PBRMetallicRoughnessBlock.prototype._injectVertexCode = function (state) {\n    var _a, _b;\n\n    var worldPos = this.worldPosition;\n    var comments = \"//\" + this.name; // Declaration\n\n    if (!this.light) {\n      // Emit for all lights\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n\n      this._lightId = 0;\n      state.sharedData.dynamicUniformBlocks.push(this);\n    } else {\n      this._lightId = (state.counters[\"lightCounter\"] !== undefined ? state.counters[\"lightCounter\"] : -1) + 1;\n      state.counters[\"lightCounter\"] = this._lightId;\n\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }]\n      }, this._lightId.toString());\n    } // Inject code in vertex\n\n\n    var worldPosVaryingName = \"v_\" + worldPos.associatedVariableName;\n\n    if (state._emitVaryingFromString(worldPosVaryingName, \"vec4\")) {\n      state.compilationString += worldPosVaryingName + \" = \" + worldPos.associatedVariableName + \";\\r\\n\";\n    }\n\n    var reflectionBlock = this.reflection.isConnected ? (_a = this.reflection.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock : null;\n\n    if (reflectionBlock) {\n      reflectionBlock.viewConnectionPoint = this.view;\n    }\n\n    state.compilationString += (_b = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock.handleVertexSide(state)) !== null && _b !== void 0 ? _b : \"\";\n\n    state._emitUniformFromString(\"vDebugMode\", \"vec2\", \"defined(IGNORE) || DEBUGMODE > 0\");\n\n    state._emitUniformFromString(\"ambientFromScene\", \"vec3\");\n\n    if (state._emitVaryingFromString(\"vClipSpacePosition\", \"vec4\", \"defined(IGNORE) || DEBUGMODE > 0\")) {\n      state._injectAtEnd += \"#if DEBUGMODE > 0\\r\\n\";\n      state._injectAtEnd += \"vClipSpacePosition = gl_Position;\\r\\n\";\n      state._injectAtEnd += \"#endif\\r\\n\";\n    }\n\n    if (this.light) {\n      state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }, {\n          search: /worldPos/g,\n          replace: worldPos.associatedVariableName\n        }]\n      });\n    } else {\n      state.compilationString += \"vec4 worldPos = \" + worldPos.associatedVariableName + \";\\r\\n\";\n\n      if (this.view.isConnected) {\n        state.compilationString += \"mat4 view = \" + this.view.associatedVariableName + \";\\r\\n\";\n      }\n\n      state.compilationString += state._emitCodeFromInclude(\"shadowsVertex\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n    }\n  };\n\n  PBRMetallicRoughnessBlock.prototype._getAlbedoOpacityCode = function () {\n    var code = \"albedoOpacityOutParams albedoOpacityOut;\\r\\n\";\n    var albedoColor = this.baseColor.isConnected ? this.baseColor.associatedVariableName : \"vec3(1.)\";\n    var opacity = this.opacity.isConnected ? this.opacity.associatedVariableName : \"1.\";\n    code += \"albedoOpacityBlock(\\n                vec4(\" + albedoColor + \", 1.),\\n            #ifdef ALBEDO\\n                vec4(1.),\\n                vec2(1., 1.),\\n            #endif\\n            #ifdef OPACITY\\n                vec4(\" + opacity + \"),\\n                vec2(1., 1.),\\n            #endif\\n                albedoOpacityOut\\n            );\\n\\n            vec3 surfaceAlbedo = albedoOpacityOut.surfaceAlbedo;\\n            float alpha = albedoOpacityOut.alpha;\\r\\n\";\n    return code;\n  };\n\n  PBRMetallicRoughnessBlock.prototype._getAmbientOcclusionCode = function () {\n    var code = \"ambientOcclusionOutParams aoOut;\\r\\n\";\n    var ao = this.ambientOcc.isConnected ? this.ambientOcc.associatedVariableName : \"1.\";\n    code += \"ambientOcclusionBlock(\\n            #ifdef AMBIENT\\n                vec3(\" + ao + \"),\\n                vec4(0., 1.0, 1.0, 0.),\\n            #endif\\n                aoOut\\n            );\\r\\n\";\n    return code;\n  };\n\n  PBRMetallicRoughnessBlock.prototype._getReflectivityCode = function (state) {\n    var code = \"reflectivityOutParams reflectivityOut;\\r\\n\";\n    var aoIntensity = \"1.\";\n    this._vMetallicReflectanceFactorsName = state._getFreeVariableName(\"vMetallicReflectanceFactors\");\n\n    state._emitUniformFromString(this._vMetallicReflectanceFactorsName, \"vec4\");\n\n    code += \"vec3 baseColor = surfaceAlbedo;\\n\\n            reflectivityBlock(\\n                vec4(\" + this.metallic.associatedVariableName + \", \" + this.roughness.associatedVariableName + \", 0., 0.),\\n            #ifdef METALLICWORKFLOW\\n                surfaceAlbedo,\\n                \" + this._vMetallicReflectanceFactorsName + \",\\n            #endif\\n            #ifdef REFLECTIVITY\\n                vec3(0., 0., \" + aoIntensity + \"),\\n                vec4(1.),\\n            #endif\\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY)  && defined(AOSTOREINMETALMAPRED)\\n                aoOut.ambientOcclusionColor,\\n            #endif\\n            #ifdef MICROSURFACEMAP\\n                microSurfaceTexel, <== not handled!\\n            #endif\\n                reflectivityOut\\n            );\\n\\n            float microSurface = reflectivityOut.microSurface;\\n            float roughness = reflectivityOut.roughness;\\n\\n            #ifdef METALLICWORKFLOW\\n                surfaceAlbedo = reflectivityOut.surfaceAlbedo;\\n            #endif\\n            #if defined(METALLICWORKFLOW) && defined(REFLECTIVITY) && defined(AOSTOREINMETALMAPRED)\\n                aoOut.ambientOcclusionColor = reflectivityOut.ambientOcclusionColor;\\n            #endif\\r\\n\";\n    return code;\n  };\n\n  PBRMetallicRoughnessBlock.prototype._buildBlock = function (state) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14;\n\n    _super.prototype._buildBlock.call(this, state);\n\n    this._scene = state.sharedData.scene;\n\n    if (!this._environmentBRDFTexture) {\n      this._environmentBRDFTexture = BRDFTextureTools.GetEnvironmentBRDFTexture(this._scene);\n    }\n\n    var reflectionBlock = this.reflection.isConnected ? (_a = this.reflection.connectedPoint) === null || _a === void 0 ? void 0 : _a.ownerBlock : null;\n\n    if (reflectionBlock) {\n      // Need those variables to be setup when calling _injectVertexCode\n      reflectionBlock.worldPositionConnectionPoint = this.worldPosition;\n      reflectionBlock.cameraPositionConnectionPoint = this.cameraPosition;\n      reflectionBlock.worldNormalConnectionPoint = this.worldNormal;\n    }\n\n    if (state.target !== NodeMaterialBlockTargets.Fragment) {\n      // Vertex\n      this._injectVertexCode(state);\n\n      return this;\n    } // Fragment\n\n\n    state.sharedData.bindableBlocks.push(this);\n    state.sharedData.blocksWithDefines.push(this);\n    var comments = \"//\" + this.name;\n    var worldPosVarName = \"v_\" + this.worldPosition.associatedVariableName;\n    var normalShading = this.perturbedNormal;\n    this._environmentBrdfSamplerName = state._getFreeVariableName(\"environmentBrdfSampler\");\n\n    state._emit2DSampler(this._environmentBrdfSamplerName);\n\n    state.sharedData.hints.needAlphaBlending = state.sharedData.hints.needAlphaBlending || this.useAlphaBlending;\n    state.sharedData.hints.needAlphaTesting = state.sharedData.hints.needAlphaTesting || this.useAlphaTest;\n\n    state._emitExtension(\"lod\", \"#extension GL_EXT_shader_texture_lod : enable\", \"defined(LODBASEDMICROSFURACE)\");\n\n    state._emitExtension(\"derivatives\", \"#extension GL_OES_standard_derivatives : enable\"); //\n    // Includes\n    //\n\n\n    if (!this.light) {\n      // Emit for all lights\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n    } else {\n      state._emitFunctionFromInclude(state.supportUniformBuffers ? \"lightUboDeclaration\" : \"lightFragmentDeclaration\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }]\n      }, this._lightId.toString());\n    }\n\n    state._emitFunctionFromInclude(\"helperFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"importanceSampling\", comments);\n\n    state._emitFunctionFromInclude(\"pbrHelperFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"imageProcessingFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"shadowsFragmentFunctions\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }]\n    });\n\n    state._emitFunctionFromInclude(\"pbrDirectLightingSetupFunctions\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }]\n    });\n\n    state._emitFunctionFromInclude(\"pbrDirectLightingFalloffFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBRDFFunctions\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_b = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _b !== void 0 ? _b : \"REFLECTIONMAP_SKYBOX\"\n      }]\n    });\n\n    state._emitFunctionFromInclude(\"hdrFilteringFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"pbrDirectLightingFunctions\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }]\n    });\n\n    state._emitFunctionFromInclude(\"pbrIBLFunctions\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBlockAlbedoOpacity\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBlockReflectivity\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBlockAmbientOcclusion\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBlockAlphaFresnel\", comments);\n\n    state._emitFunctionFromInclude(\"pbrBlockAnisotropic\", comments); //\n    // code\n    //\n\n\n    state._emitUniformFromString(\"vLightingIntensity\", \"vec4\"); // _____________________________ Geometry Information ____________________________\n\n\n    this._vNormalWName = state._getFreeVariableName(\"vNormalW\");\n    state.compilationString += \"vec4 \" + this._vNormalWName + \" = normalize(\" + this.worldNormal.associatedVariableName + \");\\r\\n\";\n\n    if (state._registerTempVariable(\"viewDirectionW\")) {\n      state.compilationString += \"vec3 viewDirectionW = normalize(\" + this.cameraPosition.associatedVariableName + \" - \" + worldPosVarName + \".xyz);\\r\\n\";\n    }\n\n    state.compilationString += \"vec3 geometricNormalW = \" + this._vNormalWName + \".xyz;\\r\\n\";\n    state.compilationString += \"vec3 normalW = \" + (normalShading.isConnected ? \"normalize(\" + normalShading.associatedVariableName + \".xyz)\" : \"geometricNormalW\") + \";\\r\\n\";\n    this._invertNormalName = state._getFreeVariableName(\"invertNormal\");\n\n    state._emitUniformFromString(this._invertNormalName, \"float\");\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockNormalFinal\", comments, {\n      replaceStrings: [{\n        search: /vPositionW/g,\n        replace: worldPosVarName + \".xyz\"\n      }, {\n        search: /vEyePosition.w/g,\n        replace: this._invertNormalName\n      }]\n    }); // _____________________________ Albedo & Opacity ______________________________\n\n    state.compilationString += this._getAlbedoOpacityCode();\n    state.compilationString += state._emitCodeFromInclude(\"depthPrePass\", comments); // _____________________________ AO  _______________________________\n\n    state.compilationString += this._getAmbientOcclusionCode();\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockLightmapInit\", comments); // _____________________________ UNLIT  _______________________________\n\n    state.compilationString += \"#ifdef UNLIT\\n                vec3 diffuseBase = vec3(1., 1., 1.);\\n            #else\\r\\n\"; // _____________________________ Reflectivity _______________________________\n\n    state.compilationString += this._getReflectivityCode(state); // _____________________________ Geometry info _________________________________\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockGeometryInfo\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_c = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _c !== void 0 ? _c : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_d = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _d !== void 0 ? _d : \"REFLECTIONMAP_3D\"\n      }]\n    }); // _____________________________ Anisotropy _______________________________________\n\n    var anisotropyBlock = this.anisotropy.isConnected ? (_e = this.anisotropy.connectedPoint) === null || _e === void 0 ? void 0 : _e.ownerBlock : null;\n\n    if (anisotropyBlock) {\n      anisotropyBlock.worldPositionConnectionPoint = this.worldPosition;\n      anisotropyBlock.worldNormalConnectionPoint = this.worldNormal;\n      state.compilationString += anisotropyBlock.getCode(state, !this.perturbedNormal.isConnected);\n    } // _____________________________ Reflection _______________________________________\n\n\n    if (reflectionBlock && reflectionBlock.hasTexture) {\n      state.compilationString += reflectionBlock.getCode(state, anisotropyBlock ? \"anisotropicOut.anisotropicNormal\" : \"normalW\");\n    }\n\n    state._emitFunctionFromInclude(\"pbrBlockReflection\", comments, {\n      replaceStrings: [{\n        search: /computeReflectionCoords/g,\n        replace: \"computeReflectionCoordsPBR\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_f = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _f !== void 0 ? _f : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_OPPOSITEZ/g,\n        replace: (_g = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineOppositeZ) !== null && _g !== void 0 ? _g : \"REFLECTIONMAP_OPPOSITEZ\"\n      }, {\n        search: /REFLECTIONMAP_PROJECTION/g,\n        replace: (_h = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineProjectionName) !== null && _h !== void 0 ? _h : \"REFLECTIONMAP_PROJECTION\"\n      }, {\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_j = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _j !== void 0 ? _j : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /LODINREFLECTIONALPHA/g,\n        replace: (_k = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLODReflectionAlpha) !== null && _k !== void 0 ? _k : \"LODINREFLECTIONALPHA\"\n      }, {\n        search: /LINEARSPECULARREFLECTION/g,\n        replace: (_l = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLinearSpecularReflection) !== null && _l !== void 0 ? _l : \"LINEARSPECULARREFLECTION\"\n      }, {\n        search: /vReflectionFilteringInfo/g,\n        replace: (_m = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._vReflectionFilteringInfoName) !== null && _m !== void 0 ? _m : \"vReflectionFilteringInfo\"\n      }]\n    }); // ___________________ Compute Reflectance aka R0 F0 info _________________________\n\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance0\", comments, {\n      replaceStrings: [{\n        search: /metallicReflectanceFactors/g,\n        replace: this._vMetallicReflectanceFactorsName\n      }]\n    }); // ________________________________ Sheen ______________________________\n\n    var sheenBlock = this.sheen.isConnected ? (_o = this.sheen.connectedPoint) === null || _o === void 0 ? void 0 : _o.ownerBlock : null;\n\n    if (sheenBlock) {\n      state.compilationString += sheenBlock.getCode(reflectionBlock);\n    }\n\n    state._emitFunctionFromInclude(\"pbrBlockSheen\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_p = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _p !== void 0 ? _p : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_q = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _q !== void 0 ? _q : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /LODINREFLECTIONALPHA/g,\n        replace: (_r = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLODReflectionAlpha) !== null && _r !== void 0 ? _r : \"LODINREFLECTIONALPHA\"\n      }, {\n        search: /LINEARSPECULARREFLECTION/g,\n        replace: (_s = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLinearSpecularReflection) !== null && _s !== void 0 ? _s : \"LINEARSPECULARREFLECTION\"\n      }]\n    }); // _____________________________ Clear Coat ____________________________\n\n\n    var clearcoatBlock = this.clearcoat.isConnected ? (_t = this.clearcoat.connectedPoint) === null || _t === void 0 ? void 0 : _t.ownerBlock : null;\n    var generateTBNSpace = !this.perturbedNormal.isConnected && !this.anisotropy.isConnected;\n    var isTangentConnectedToPerturbNormal = this.perturbedNormal.isConnected && ((_u = this.perturbedNormal.connectedPoint) === null || _u === void 0 ? void 0 : _u.ownerBlock).worldTangent.isConnected;\n    var isTangentConnectedToAnisotropy = this.anisotropy.isConnected && ((_v = this.anisotropy.connectedPoint) === null || _v === void 0 ? void 0 : _v.ownerBlock).worldTangent.isConnected;\n    var vTBNAvailable = isTangentConnectedToPerturbNormal || !this.perturbedNormal.isConnected && isTangentConnectedToAnisotropy;\n    state.compilationString += ClearCoatBlock.GetCode(state, clearcoatBlock, reflectionBlock, worldPosVarName, generateTBNSpace, vTBNAvailable, this.worldNormal.associatedVariableName);\n\n    if (generateTBNSpace) {\n      vTBNAvailable = (_w = clearcoatBlock === null || clearcoatBlock === void 0 ? void 0 : clearcoatBlock.worldTangent.isConnected) !== null && _w !== void 0 ? _w : false;\n    }\n\n    state._emitFunctionFromInclude(\"pbrBlockClearcoat\", comments, {\n      replaceStrings: [{\n        search: /computeReflectionCoords/g,\n        replace: \"computeReflectionCoordsPBR\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_x = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _x !== void 0 ? _x : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_OPPOSITEZ/g,\n        replace: (_y = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineOppositeZ) !== null && _y !== void 0 ? _y : \"REFLECTIONMAP_OPPOSITEZ\"\n      }, {\n        search: /REFLECTIONMAP_PROJECTION/g,\n        replace: (_z = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineProjectionName) !== null && _z !== void 0 ? _z : \"REFLECTIONMAP_PROJECTION\"\n      }, {\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_0 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _0 !== void 0 ? _0 : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /LODINREFLECTIONALPHA/g,\n        replace: (_1 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLODReflectionAlpha) !== null && _1 !== void 0 ? _1 : \"LODINREFLECTIONALPHA\"\n      }, {\n        search: /LINEARSPECULARREFLECTION/g,\n        replace: (_2 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineLinearSpecularReflection) !== null && _2 !== void 0 ? _2 : \"LINEARSPECULARREFLECTION\"\n      }, {\n        search: /defined\\(TANGENT\\)/g,\n        replace: vTBNAvailable ? \"defined(TANGENT)\" : \"defined(IGNORE)\"\n      }]\n    }); // _________________________ Specular Environment Reflectance __________________________\n\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockReflectance\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_SKYBOX/g,\n        replace: (_3 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineSkyboxName) !== null && _3 !== void 0 ? _3 : \"REFLECTIONMAP_SKYBOX\"\n      }, {\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_4 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _4 !== void 0 ? _4 : \"REFLECTIONMAP_3D\"\n      }]\n    }); // ___________________________________ SubSurface ______________________________________\n\n    var subsurfaceBlock = this.subsurface.isConnected ? (_5 = this.subsurface.connectedPoint) === null || _5 === void 0 ? void 0 : _5.ownerBlock : null;\n    var refractionBlock = this.subsurface.isConnected ? (_7 = ((_6 = this.subsurface.connectedPoint) === null || _6 === void 0 ? void 0 : _6.ownerBlock).refraction.connectedPoint) === null || _7 === void 0 ? void 0 : _7.ownerBlock : null;\n\n    if (refractionBlock) {\n      refractionBlock.viewConnectionPoint = this.view;\n      refractionBlock.indexOfRefractionConnectionPoint = this.indexOfRefraction;\n    }\n\n    state.compilationString += SubSurfaceBlock.GetCode(state, subsurfaceBlock, reflectionBlock, worldPosVarName);\n\n    state._emitFunctionFromInclude(\"pbrBlockSubSurface\", comments, {\n      replaceStrings: [{\n        search: /REFLECTIONMAP_3D/g,\n        replace: (_8 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._define3DName) !== null && _8 !== void 0 ? _8 : \"REFLECTIONMAP_3D\"\n      }, {\n        search: /REFLECTIONMAP_OPPOSITEZ/g,\n        replace: (_9 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineOppositeZ) !== null && _9 !== void 0 ? _9 : \"REFLECTIONMAP_OPPOSITEZ\"\n      }, {\n        search: /REFLECTIONMAP_PROJECTION/g,\n        replace: (_10 = reflectionBlock === null || reflectionBlock === void 0 ? void 0 : reflectionBlock._defineProjectionName) !== null && _10 !== void 0 ? _10 : \"REFLECTIONMAP_PROJECTION\"\n      }, {\n        search: /SS_REFRACTIONMAP_3D/g,\n        replace: (_11 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._define3DName) !== null && _11 !== void 0 ? _11 : \"SS_REFRACTIONMAP_3D\"\n      }, {\n        search: /SS_LODINREFRACTIONALPHA/g,\n        replace: (_12 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLODRefractionAlpha) !== null && _12 !== void 0 ? _12 : \"SS_LODINREFRACTIONALPHA\"\n      }, {\n        search: /SS_LINEARSPECULARREFRACTION/g,\n        replace: (_13 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineLinearSpecularRefraction) !== null && _13 !== void 0 ? _13 : \"SS_LINEARSPECULARREFRACTION\"\n      }, {\n        search: /SS_REFRACTIONMAP_OPPOSITEZ/g,\n        replace: (_14 = refractionBlock === null || refractionBlock === void 0 ? void 0 : refractionBlock._defineOppositeZ) !== null && _14 !== void 0 ? _14 : \"SS_REFRACTIONMAP_OPPOSITEZ\"\n      }]\n    }); // _____________________________ Direct Lighting Info __________________________________\n\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockDirectLighting\", comments);\n\n    if (this.light) {\n      state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\n        replaceStrings: [{\n          search: /{X}/g,\n          replace: this._lightId.toString()\n        }]\n      });\n    } else {\n      state.compilationString += state._emitCodeFromInclude(\"lightFragment\", comments, {\n        repeatKey: \"maxSimultaneousLights\"\n      });\n    } // _____________________________ Compute Final Lit Components ________________________\n\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalLitComponents\", comments); // _____________________________ UNLIT (2) ________________________\n\n    state.compilationString += \"#endif\\r\\n\"; // UNLIT\n    // _____________________________ Compute Final Unlit Components ________________________\n\n    var aoColor = this.ambientColor.isConnected ? this.ambientColor.associatedVariableName : \"vec3(0., 0., 0.)\";\n    var aoDirectLightIntensity = PBRBaseMaterial.DEFAULT_AO_ON_ANALYTICAL_LIGHTS.toString();\n\n    if (aoDirectLightIntensity.indexOf('.') === -1) {\n      aoDirectLightIntensity += \".\";\n    }\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalUnlitComponents\", comments, {\n      replaceStrings: [{\n        search: /vec3 finalEmissive[\\s\\S]*?finalEmissive\\*=vLightingIntensity\\.y;/g,\n        replace: \"\"\n      }, {\n        search: /vAmbientColor/g,\n        replace: aoColor + \" * ambientFromScene\"\n      }, {\n        search: /vAmbientInfos\\.w/g,\n        replace: aoDirectLightIntensity\n      }]\n    }); // _____________________________ Output Final Color Composition ________________________\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockFinalColorComposition\", comments, {\n      replaceStrings: [{\n        search: /finalEmissive/g,\n        replace: \"vec3(0.)\"\n      }]\n    }); // _____________________________ Apply image processing ________________________\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrBlockImageProcessing\", comments, {\n      replaceStrings: [{\n        search: /visibility/g,\n        replace: \"1.\"\n      }]\n    }); // _____________________________ Generate debug code ________________________\n\n    state.compilationString += state._emitCodeFromInclude(\"pbrDebug\", comments, {\n      replaceStrings: [{\n        search: /vNormalW/g,\n        replace: this._vNormalWName\n      }, {\n        search: /vPositionW/g,\n        replace: worldPosVarName\n      }, {\n        search: /albedoTexture\\.rgb;/g,\n        replace: \"vec3(1.);\\r\\ngl_FragColor.rgb = toGammaSpace(gl_FragColor.rgb);\\r\\n\"\n      }]\n    }); // _____________________________ Generate end points ________________________\n\n    for (var _i = 0, _15 = this._outputs; _i < _15.length; _i++) {\n      var output = _15[_i];\n\n      if (output.hasEndpoints) {\n        var remap = mapOutputToVariable[output.name];\n\n        if (remap) {\n          var varName = remap[0],\n              conditions = remap[1];\n\n          if (conditions) {\n            state.compilationString += \"#if \" + conditions + \"\\r\\n\";\n          }\n\n          state.compilationString += this._declareOutput(output, state) + \" = \" + varName + \";\\r\\n\";\n\n          if (conditions) {\n            state.compilationString += \"#else\\r\\n\";\n            state.compilationString += this._declareOutput(output, state) + \" = vec3(0.);\\r\\n\";\n            state.compilationString += \"#endif\\r\\n\";\n          }\n        } else {\n          console.error(\"There's no remapping for the \" + output.name + \" end point! No code generated\");\n        }\n      }\n    }\n\n    return this;\n  };\n\n  PBRMetallicRoughnessBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = \"\";\n    codeString += this._codeVariableName + \".lightFalloff = \" + this.lightFalloff + \";\\r\\n\";\n    codeString += this._codeVariableName + \".useAlphaTest = \" + this.useAlphaTest + \";\\r\\n\";\n    codeString += this._codeVariableName + \".alphaTestCutoff = \" + this.alphaTestCutoff + \";\\r\\n\";\n    codeString += this._codeVariableName + \".useAlphaBlending = \" + this.useAlphaBlending + \";\\r\\n\";\n    codeString += this._codeVariableName + \".useRadianceOverAlpha = \" + this.useRadianceOverAlpha + \";\\r\\n\";\n    codeString += this._codeVariableName + \".useSpecularOverAlpha = \" + this.useSpecularOverAlpha + \";\\r\\n\";\n    codeString += this._codeVariableName + \".enableSpecularAntiAliasing = \" + this.enableSpecularAntiAliasing + \";\\r\\n\";\n    codeString += this._codeVariableName + \".realTimeFiltering = \" + this.realTimeFiltering + \";\\r\\n\";\n    codeString += this._codeVariableName + \".realTimeFilteringQuality = \" + this.realTimeFilteringQuality + \";\\r\\n\";\n    codeString += this._codeVariableName + \".useEnergyConservation = \" + this.useEnergyConservation + \";\\r\\n\";\n    codeString += this._codeVariableName + \".useRadianceOcclusion = \" + this.useRadianceOcclusion + \";\\r\\n\";\n    codeString += this._codeVariableName + \".useHorizonOcclusion = \" + this.useHorizonOcclusion + \";\\r\\n\";\n    codeString += this._codeVariableName + \".unlit = \" + this.unlit + \";\\r\\n\";\n    codeString += this._codeVariableName + \".forceNormalForward = \" + this.forceNormalForward + \";\\r\\n\";\n    codeString += this._codeVariableName + \".debugMode = \" + this.debugMode + \";\\r\\n\";\n    codeString += this._codeVariableName + \".debugLimit = \" + this.debugLimit + \";\\r\\n\";\n    codeString += this._codeVariableName + \".debugFactor = \" + this.debugFactor + \";\\r\\n\";\n    return codeString;\n  };\n\n  PBRMetallicRoughnessBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    if (this.light) {\n      serializationObject.lightId = this.light.id;\n    }\n\n    serializationObject.lightFalloff = this.lightFalloff;\n    serializationObject.useAlphaTest = this.useAlphaTest;\n    serializationObject.alphaTestCutoff = this.alphaTestCutoff;\n    serializationObject.useAlphaBlending = this.useAlphaBlending;\n    serializationObject.useRadianceOverAlpha = this.useRadianceOverAlpha;\n    serializationObject.useSpecularOverAlpha = this.useSpecularOverAlpha;\n    serializationObject.enableSpecularAntiAliasing = this.enableSpecularAntiAliasing;\n    serializationObject.realTimeFiltering = this.realTimeFiltering;\n    serializationObject.realTimeFilteringQuality = this.realTimeFilteringQuality;\n    serializationObject.useEnergyConservation = this.useEnergyConservation;\n    serializationObject.useRadianceOcclusion = this.useRadianceOcclusion;\n    serializationObject.useHorizonOcclusion = this.useHorizonOcclusion;\n    serializationObject.unlit = this.unlit;\n    serializationObject.forceNormalForward = this.forceNormalForward;\n    serializationObject.debugMode = this.debugMode;\n    serializationObject.debugLimit = this.debugLimit;\n    serializationObject.debugFactor = this.debugFactor;\n    return serializationObject;\n  };\n\n  PBRMetallicRoughnessBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    var _a, _b;\n\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    if (serializationObject.lightId) {\n      this.light = scene.getLightByID(serializationObject.lightId);\n    }\n\n    this.lightFalloff = (_a = serializationObject.lightFalloff) !== null && _a !== void 0 ? _a : 0;\n    this.useAlphaTest = serializationObject.useAlphaTest;\n    this.alphaTestCutoff = serializationObject.alphaTestCutoff;\n    this.useAlphaBlending = serializationObject.useAlphaBlending;\n    this.useRadianceOverAlpha = serializationObject.useRadianceOverAlpha;\n    this.useSpecularOverAlpha = serializationObject.useSpecularOverAlpha;\n    this.enableSpecularAntiAliasing = serializationObject.enableSpecularAntiAliasing;\n    this.realTimeFiltering = !!serializationObject.realTimeFiltering;\n    this.realTimeFilteringQuality = (_b = serializationObject.realTimeFilteringQuality) !== null && _b !== void 0 ? _b : 8;\n    this.useEnergyConservation = serializationObject.useEnergyConservation;\n    this.useRadianceOcclusion = serializationObject.useRadianceOcclusion;\n    this.useHorizonOcclusion = serializationObject.useHorizonOcclusion;\n    this.unlit = serializationObject.unlit;\n    this.forceNormalForward = !!serializationObject.forceNormalForward;\n    this.debugMode = serializationObject.debugMode;\n    this.debugLimit = serializationObject.debugLimit;\n    this.debugFactor = serializationObject.debugFactor;\n  };\n\n  __decorate([editableInPropertyPage(\"Direct lights\", PropertyTypeForEdition.Float, \"INTENSITY\", {\n    min: 0,\n    max: 1,\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"directIntensity\", void 0);\n\n  __decorate([editableInPropertyPage(\"Environment lights\", PropertyTypeForEdition.Float, \"INTENSITY\", {\n    min: 0,\n    max: 1,\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"environmentIntensity\", void 0);\n\n  __decorate([editableInPropertyPage(\"Specular highlights\", PropertyTypeForEdition.Float, \"INTENSITY\", {\n    min: 0,\n    max: 1,\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"specularIntensity\", void 0);\n\n  __decorate([editableInPropertyPage(\"Light falloff\", PropertyTypeForEdition.List, \"LIGHTING & COLORS\", {\n    \"notifiers\": {\n      \"update\": true\n    },\n    \"options\": [{\n      label: \"Physical\",\n      value: PBRBaseMaterial.LIGHTFALLOFF_PHYSICAL\n    }, {\n      label: \"GLTF\",\n      value: PBRBaseMaterial.LIGHTFALLOFF_GLTF\n    }, {\n      label: \"Standard\",\n      value: PBRBaseMaterial.LIGHTFALLOFF_STANDARD\n    }]\n  })], PBRMetallicRoughnessBlock.prototype, \"lightFalloff\", void 0);\n\n  __decorate([editableInPropertyPage(\"Alpha Testing\", PropertyTypeForEdition.Boolean, \"OPACITY\")], PBRMetallicRoughnessBlock.prototype, \"useAlphaTest\", void 0);\n\n  __decorate([editableInPropertyPage(\"Alpha CutOff\", PropertyTypeForEdition.Float, \"OPACITY\", {\n    min: 0,\n    max: 1,\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"alphaTestCutoff\", void 0);\n\n  __decorate([editableInPropertyPage(\"Alpha blending\", PropertyTypeForEdition.Boolean, \"OPACITY\")], PBRMetallicRoughnessBlock.prototype, \"useAlphaBlending\", void 0);\n\n  __decorate([editableInPropertyPage(\"Radiance over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"useRadianceOverAlpha\", void 0);\n\n  __decorate([editableInPropertyPage(\"Specular over alpha\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"useSpecularOverAlpha\", void 0);\n\n  __decorate([editableInPropertyPage(\"Specular anti-aliasing\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"enableSpecularAntiAliasing\", void 0);\n\n  __decorate([editableInPropertyPage(\"Realtime filtering\", PropertyTypeForEdition.Boolean, \"RENDERING\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"realTimeFiltering\", void 0);\n\n  __decorate([editableInPropertyPage(\"Realtime filtering quality\", PropertyTypeForEdition.List, \"RENDERING\", {\n    \"notifiers\": {\n      \"update\": true\n    },\n    \"options\": [{\n      label: \"Low\",\n      value: 8\n    }, {\n      label: \"Medium\",\n      value: 16\n    }, {\n      label: \"High\",\n      value: 64\n    }]\n  })], PBRMetallicRoughnessBlock.prototype, \"realTimeFilteringQuality\", void 0);\n\n  __decorate([editableInPropertyPage(\"Energy Conservation\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"useEnergyConservation\", void 0);\n\n  __decorate([editableInPropertyPage(\"Radiance occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"useRadianceOcclusion\", void 0);\n\n  __decorate([editableInPropertyPage(\"Horizon occlusion\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"useHorizonOcclusion\", void 0);\n\n  __decorate([editableInPropertyPage(\"Unlit\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"unlit\", void 0);\n\n  __decorate([editableInPropertyPage(\"Force normal forward\", PropertyTypeForEdition.Boolean, \"ADVANCED\", {\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"forceNormalForward\", void 0);\n\n  __decorate([editableInPropertyPage(\"Debug mode\", PropertyTypeForEdition.List, \"DEBUG\", {\n    \"notifiers\": {\n      \"update\": true\n    },\n    \"options\": [{\n      label: \"None\",\n      value: 0\n    }, // Geometry\n    {\n      label: \"Normalized position\",\n      value: 1\n    }, {\n      label: \"Normals\",\n      value: 2\n    }, {\n      label: \"Tangents\",\n      value: 3\n    }, {\n      label: \"Bitangents\",\n      value: 4\n    }, {\n      label: \"Bump Normals\",\n      value: 5\n    }, //{ label: \"UV1\", value: 6 },\n    //{ label: \"UV2\", value: 7 },\n    {\n      label: \"ClearCoat Normals\",\n      value: 8\n    }, {\n      label: \"ClearCoat Tangents\",\n      value: 9\n    }, {\n      label: \"ClearCoat Bitangents\",\n      value: 10\n    }, {\n      label: \"Anisotropic Normals\",\n      value: 11\n    }, {\n      label: \"Anisotropic Tangents\",\n      value: 12\n    }, {\n      label: \"Anisotropic Bitangents\",\n      value: 13\n    }, // Maps\n    //{ label: \"Emissive Map\", value: 23 },\n    //{ label: \"Light Map\", value: 24 },\n    // Env\n    {\n      label: \"Env Refraction\",\n      value: 40\n    }, {\n      label: \"Env Reflection\",\n      value: 41\n    }, {\n      label: \"Env Clear Coat\",\n      value: 42\n    }, // Lighting\n    {\n      label: \"Direct Diffuse\",\n      value: 50\n    }, {\n      label: \"Direct Specular\",\n      value: 51\n    }, {\n      label: \"Direct Clear Coat\",\n      value: 52\n    }, {\n      label: \"Direct Sheen\",\n      value: 53\n    }, {\n      label: \"Env Irradiance\",\n      value: 54\n    }, // Lighting Params\n    {\n      label: \"Surface Albedo\",\n      value: 60\n    }, {\n      label: \"Reflectance 0\",\n      value: 61\n    }, {\n      label: \"Metallic\",\n      value: 62\n    }, {\n      label: \"Metallic F0\",\n      value: 71\n    }, {\n      label: \"Roughness\",\n      value: 63\n    }, {\n      label: \"AlphaG\",\n      value: 64\n    }, {\n      label: \"NdotV\",\n      value: 65\n    }, {\n      label: \"ClearCoat Color\",\n      value: 66\n    }, {\n      label: \"ClearCoat Roughness\",\n      value: 67\n    }, {\n      label: \"ClearCoat NdotV\",\n      value: 68\n    }, {\n      label: \"Transmittance\",\n      value: 69\n    }, {\n      label: \"Refraction Transmittance\",\n      value: 70\n    }, // Misc\n    {\n      label: \"SEO\",\n      value: 80\n    }, {\n      label: \"EHO\",\n      value: 81\n    }, {\n      label: \"Energy Factor\",\n      value: 82\n    }, {\n      label: \"Specular Reflectance\",\n      value: 83\n    }, {\n      label: \"Clear Coat Reflectance\",\n      value: 84\n    }, {\n      label: \"Sheen Reflectance\",\n      value: 85\n    }, {\n      label: \"Luminance Over Alpha\",\n      value: 86\n    }, {\n      label: \"Alpha\",\n      value: 87\n    }]\n  })], PBRMetallicRoughnessBlock.prototype, \"debugMode\", void 0);\n\n  __decorate([editableInPropertyPage(\"Split position\", PropertyTypeForEdition.Float, \"DEBUG\", {\n    min: -1,\n    max: 1,\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"debugLimit\", void 0);\n\n  __decorate([editableInPropertyPage(\"Output factor\", PropertyTypeForEdition.Float, \"DEBUG\", {\n    min: 0,\n    max: 5,\n    \"notifiers\": {\n      \"update\": true\n    }\n  })], PBRMetallicRoughnessBlock.prototype, \"debugFactor\", void 0);\n\n  return PBRMetallicRoughnessBlock;\n}(NodeMaterialBlock);\n\nexport { PBRMetallicRoughnessBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.PBRMetallicRoughnessBlock\"] = PBRMetallicRoughnessBlock;","map":null,"metadata":{},"sourceType":"module"}