{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n\nvar jsonrpc_1 = require(\"./jsonrpc\");\n\nvar LegacyProviderAdapter = /*#__PURE__*/function () {\n  function LegacyProviderAdapter(provider) {\n    _classCallCheck(this, LegacyProviderAdapter);\n\n    this.provider = provider;\n    this.eventEmitter = new events_1.EventEmitter();\n  }\n\n  _createClass(LegacyProviderAdapter, [{\n    key: \"subscribeToLegacyProvider\",\n    value: function subscribeToLegacyProvider() {\n      var _this = this;\n\n      if (!this.provider.on) {\n        throw new Error('Legacy provider does not support subscriptions.');\n      }\n\n      this.provider.on('data', function (result, deprecatedResult) {\n        result = result || deprecatedResult;\n\n        if (!result.method) {\n          return;\n        }\n\n        _this.eventEmitter.emit('notification', result.params);\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(method, params) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        var payload = jsonrpc_1.createJsonRpcPayload(method, params);\n\n        _this2.provider.send(payload, function (err, message) {\n          if (err) {\n            return reject(err);\n          }\n\n          if (!message) {\n            return reject(new Error('No response.'));\n          }\n\n          if (!jsonrpc_1.isValidJsonRpcResponse(message)) {\n            var msg = message.error && message.error.message ? message.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(message);\n            return reject(new Error(msg));\n          }\n\n          var response = message;\n\n          if (response.error) {\n            var _message = response.error.message ? response.error.message : JSON.stringify(response);\n\n            return reject(new Error('Returned error: ' + _message));\n          }\n\n          if (response.id && payload.id !== response.id) {\n            return reject(new Error(\"Wrong response id \".concat(payload.id, \" != \").concat(response.id, \" in \").concat(JSON.stringify(payload))));\n          }\n\n          resolve(response.result);\n        });\n      });\n    }\n  }, {\n    key: \"on\",\n    value: function on(notification, listener) {\n      if (notification !== 'notification') {\n        throw new Error('Legacy providers only support notification event.');\n      }\n\n      if (this.eventEmitter.listenerCount('notification') === 0) {\n        this.subscribeToLegacyProvider();\n      }\n\n      this.eventEmitter.on('notification', listener);\n      return this;\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(notification, listener) {\n      if (!this.provider.removeListener) {\n        throw new Error('Legacy provider does not support subscriptions.');\n      }\n\n      if (notification !== 'notification') {\n        throw new Error('Legacy providers only support notification event.');\n      }\n\n      this.eventEmitter.removeListener('notification', listener);\n\n      if (this.eventEmitter.listenerCount('notification') === 0) {\n        this.provider.removeAllListeners('data');\n      }\n\n      return this;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(notification) {\n      this.eventEmitter.removeAllListeners('notification');\n\n      if (this.provider.removeAllListeners) {\n        this.provider.removeAllListeners('data');\n      }\n    }\n  }]);\n\n  return LegacyProviderAdapter;\n}();\n\nexports.LegacyProviderAdapter = LegacyProviderAdapter;","map":null,"metadata":{},"sourceType":"script"}