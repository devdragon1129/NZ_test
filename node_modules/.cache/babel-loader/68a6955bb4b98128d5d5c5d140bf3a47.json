{"ast":null,"code":"import { NodeMaterialBlockConnectionPointTypes } from './Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from './Enums/nodeMaterialBlockTargets';\nimport { Observable } from '../../Misc/observable';\n/**\r\n * Enum used to define the compatibility state between two connection points\r\n */\n\nexport var NodeMaterialConnectionPointCompatibilityStates;\n\n(function (NodeMaterialConnectionPointCompatibilityStates) {\n  /** Points are compatibles */\n  NodeMaterialConnectionPointCompatibilityStates[NodeMaterialConnectionPointCompatibilityStates[\"Compatible\"] = 0] = \"Compatible\";\n  /** Points are incompatible because of their types */\n\n  NodeMaterialConnectionPointCompatibilityStates[NodeMaterialConnectionPointCompatibilityStates[\"TypeIncompatible\"] = 1] = \"TypeIncompatible\";\n  /** Points are incompatible because of their targets (vertex vs fragment) */\n\n  NodeMaterialConnectionPointCompatibilityStates[NodeMaterialConnectionPointCompatibilityStates[\"TargetIncompatible\"] = 2] = \"TargetIncompatible\";\n})(NodeMaterialConnectionPointCompatibilityStates || (NodeMaterialConnectionPointCompatibilityStates = {}));\n/**\r\n * Defines the direction of a connection point\r\n */\n\n\nexport var NodeMaterialConnectionPointDirection;\n\n(function (NodeMaterialConnectionPointDirection) {\n  /** Input */\n  NodeMaterialConnectionPointDirection[NodeMaterialConnectionPointDirection[\"Input\"] = 0] = \"Input\";\n  /** Output */\n\n  NodeMaterialConnectionPointDirection[NodeMaterialConnectionPointDirection[\"Output\"] = 1] = \"Output\";\n})(NodeMaterialConnectionPointDirection || (NodeMaterialConnectionPointDirection = {}));\n/**\r\n * Defines a connection point for a block\r\n */\n\n\nvar NodeMaterialConnectionPoint =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new connection point\r\n   * @param name defines the connection point name\r\n   * @param ownerBlock defines the block hosting this connection point\r\n   * @param direction defines the direction of the connection point\r\n   */\n  function NodeMaterialConnectionPoint(name, ownerBlock, direction) {\n    /** @hidden */\n    this._connectedPoint = null;\n    this._endpoints = new Array();\n    /** @hidden */\n\n    this._typeConnectionSource = null;\n    /** @hidden */\n\n    this._linkedConnectionSource = null;\n    /** @hidden */\n\n    this._acceptedConnectionPointType = null;\n    this._type = NodeMaterialBlockConnectionPointTypes.Float;\n    /** @hidden */\n\n    this._enforceAssociatedVariableName = false;\n    /** Indicates that this connection point needs dual validation before being connected to another point */\n\n    this.needDualDirectionValidation = false;\n    /**\r\n     * Gets or sets the additional types supported by this connection point\r\n     */\n\n    this.acceptedConnectionPointTypes = new Array();\n    /**\r\n     * Gets or sets the additional types excluded by this connection point\r\n     */\n\n    this.excludedConnectionPointTypes = new Array();\n    /**\r\n     * Observable triggered when this point is connected\r\n     */\n\n    this.onConnectionObservable = new Observable();\n    /**\r\n     * Gets or sets a boolean indicating that this connection point is exposed on a frame\r\n     */\n\n    this.isExposedOnFrame = false;\n    /**\r\n     * Gets or sets number indicating the position that the port is exposed to on a frame\r\n     */\n\n    this.exposedPortPosition = -1;\n    /** @hidden */\n\n    this._prioritizeVertex = false;\n    this._target = NodeMaterialBlockTargets.VertexAndFragment;\n    this._ownerBlock = ownerBlock;\n    this.name = name;\n    this._direction = direction;\n  }\n  /**\r\n   * Checks if two types are equivalent\r\n   * @param type1 type 1 to check\r\n   * @param type2 type 2 to check\r\n   * @returns true if both types are equivalent, else false\r\n   */\n\n\n  NodeMaterialConnectionPoint.AreEquivalentTypes = function (type1, type2) {\n    switch (type1) {\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        {\n          if (type2 === NodeMaterialBlockConnectionPointTypes.Color3) {\n            return true;\n          }\n\n          break;\n        }\n\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        {\n          if (type2 === NodeMaterialBlockConnectionPointTypes.Color4) {\n            return true;\n          }\n\n          break;\n        }\n\n      case NodeMaterialBlockConnectionPointTypes.Color3:\n        {\n          if (type2 === NodeMaterialBlockConnectionPointTypes.Vector3) {\n            return true;\n          }\n\n          break;\n        }\n\n      case NodeMaterialBlockConnectionPointTypes.Color4:\n        {\n          if (type2 === NodeMaterialBlockConnectionPointTypes.Vector4) {\n            return true;\n          }\n\n          break;\n        }\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"direction\", {\n    /** Gets the direction of the point */\n    get: function get() {\n      return this._direction;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"associatedVariableName\", {\n    /**\r\n     * Gets or sets the associated variable name in the shader\r\n     */\n    get: function get() {\n      if (this._ownerBlock.isInput) {\n        return this._ownerBlock.associatedVariableName;\n      }\n\n      if ((!this._enforceAssociatedVariableName || !this._associatedVariableName) && this._connectedPoint) {\n        return this._connectedPoint.associatedVariableName;\n      }\n\n      return this._associatedVariableName;\n    },\n    set: function set(value) {\n      this._associatedVariableName = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"innerType\", {\n    /** Get the inner type (ie AutoDetect for instance instead of the inferred one) */\n    get: function get() {\n      if (this._linkedConnectionSource && this._linkedConnectionSource.isConnected) {\n        return this.type;\n      }\n\n      return this._type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"type\", {\n    /**\r\n     * Gets or sets the connection point type (default is float)\r\n     */\n    get: function get() {\n      if (this._type === NodeMaterialBlockConnectionPointTypes.AutoDetect) {\n        if (this._ownerBlock.isInput) {\n          return this._ownerBlock.type;\n        }\n\n        if (this._connectedPoint) {\n          return this._connectedPoint.type;\n        }\n\n        if (this._linkedConnectionSource && this._linkedConnectionSource.isConnected) {\n          return this._linkedConnectionSource.type;\n        }\n      }\n\n      if (this._type === NodeMaterialBlockConnectionPointTypes.BasedOnInput && this._typeConnectionSource) {\n        return this._typeConnectionSource.type;\n      }\n\n      return this._type;\n    },\n    set: function set(value) {\n      this._type = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"target\", {\n    /** Gets or sets the target of that connection point */\n    get: function get() {\n      if (!this._prioritizeVertex || !this._ownerBlock) {\n        return this._target;\n      }\n\n      if (this._target !== NodeMaterialBlockTargets.VertexAndFragment) {\n        return this._target;\n      }\n\n      if (this._ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\n        return NodeMaterialBlockTargets.Fragment;\n      }\n\n      return NodeMaterialBlockTargets.Vertex;\n    },\n    set: function set(value) {\n      this._target = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"isConnected\", {\n    /**\r\n     * Gets a boolean indicating that the current point is connected to another NodeMaterialBlock\r\n     */\n    get: function get() {\n      return this.connectedPoint !== null || this.hasEndpoints;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"isConnectedToInputBlock\", {\n    /**\r\n     * Gets a boolean indicating that the current point is connected to an input block\r\n     */\n    get: function get() {\n      return this.connectedPoint !== null && this.connectedPoint.ownerBlock.isInput;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"connectInputBlock\", {\n    /**\r\n     * Gets a the connected input block (if any)\r\n     */\n    get: function get() {\n      if (!this.isConnectedToInputBlock) {\n        return null;\n      }\n\n      return this.connectedPoint.ownerBlock;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"connectedPoint\", {\n    /** Get the other side of the connection (if any) */\n    get: function get() {\n      return this._connectedPoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"ownerBlock\", {\n    /** Get the block that owns this connection point */\n    get: function get() {\n      return this._ownerBlock;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"sourceBlock\", {\n    /** Get the block connected on the other side of this connection (if any) */\n    get: function get() {\n      if (!this._connectedPoint) {\n        return null;\n      }\n\n      return this._connectedPoint.ownerBlock;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"connectedBlocks\", {\n    /** Get the block connected on the endpoints of this connection (if any) */\n    get: function get() {\n      if (this._endpoints.length === 0) {\n        return [];\n      }\n\n      return this._endpoints.map(function (e) {\n        return e.ownerBlock;\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"endpoints\", {\n    /** Gets the list of connected endpoints */\n    get: function get() {\n      return this._endpoints;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"hasEndpoints\", {\n    /** Gets a boolean indicating if that output point is connected to at least one input */\n    get: function get() {\n      return this._endpoints && this._endpoints.length > 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"isConnectedInVertexShader\", {\n    /** Gets a boolean indicating that this connection will be used in the vertex shader */\n    get: function get() {\n      if (this.target === NodeMaterialBlockTargets.Vertex) {\n        return true;\n      }\n\n      if (!this.hasEndpoints) {\n        return false;\n      }\n\n      for (var _i = 0, _a = this._endpoints; _i < _a.length; _i++) {\n        var endpoint = _a[_i];\n\n        if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Vertex) {\n          return true;\n        }\n\n        if (endpoint.target === NodeMaterialBlockTargets.Vertex) {\n          return true;\n        }\n\n        if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Neutral || endpoint.ownerBlock.target === NodeMaterialBlockTargets.VertexAndFragment) {\n          if (endpoint.ownerBlock.outputs.some(function (o) {\n            return o.isConnectedInVertexShader;\n          })) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NodeMaterialConnectionPoint.prototype, \"isConnectedInFragmentShader\", {\n    /** Gets a boolean indicating that this connection will be used in the fragment shader */\n    get: function get() {\n      if (this.target === NodeMaterialBlockTargets.Fragment) {\n        return true;\n      }\n\n      if (!this.hasEndpoints) {\n        return false;\n      }\n\n      for (var _i = 0, _a = this._endpoints; _i < _a.length; _i++) {\n        var endpoint = _a[_i];\n\n        if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\n          return true;\n        }\n\n        if (endpoint.ownerBlock.target === NodeMaterialBlockTargets.Neutral || endpoint.ownerBlock.target === NodeMaterialBlockTargets.VertexAndFragment) {\n          if (endpoint.ownerBlock.outputs.some(function (o) {\n            return o.isConnectedInFragmentShader;\n          })) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Creates a block suitable to be used as an input for this input point.\r\n   * If null is returned, a block based on the point type will be created.\r\n   * @returns The returned string parameter is the name of the output point of NodeMaterialBlock (first parameter of the returned array) that can be connected to the input\r\n   */\n\n  NodeMaterialConnectionPoint.prototype.createCustomInputBlock = function () {\n    return null;\n  };\n  /**\r\n   * Gets the current class name e.g. \"NodeMaterialConnectionPoint\"\r\n   * @returns the class name\r\n   */\n\n\n  NodeMaterialConnectionPoint.prototype.getClassName = function () {\n    return \"NodeMaterialConnectionPoint\";\n  };\n  /**\r\n   * Gets a boolean indicating if the current point can be connected to another point\r\n   * @param connectionPoint defines the other connection point\r\n   * @returns a boolean\r\n   */\n\n\n  NodeMaterialConnectionPoint.prototype.canConnectTo = function (connectionPoint) {\n    return this.checkCompatibilityState(connectionPoint) === NodeMaterialConnectionPointCompatibilityStates.Compatible;\n  };\n  /**\r\n   * Gets a number indicating if the current point can be connected to another point\r\n   * @param connectionPoint defines the other connection point\r\n   * @returns a number defining the compatibility state\r\n   */\n\n\n  NodeMaterialConnectionPoint.prototype.checkCompatibilityState = function (connectionPoint) {\n    var ownerBlock = this._ownerBlock;\n\n    if (ownerBlock.target === NodeMaterialBlockTargets.Fragment) {\n      // Let's check we are not going reverse\n      var otherBlock = connectionPoint.ownerBlock;\n\n      if (otherBlock.target === NodeMaterialBlockTargets.Vertex) {\n        return NodeMaterialConnectionPointCompatibilityStates.TargetIncompatible;\n      }\n\n      for (var _i = 0, _a = otherBlock.outputs; _i < _a.length; _i++) {\n        var output = _a[_i];\n\n        if (output.isConnectedInVertexShader) {\n          return NodeMaterialConnectionPointCompatibilityStates.TargetIncompatible;\n        }\n      }\n    }\n\n    if (this.type !== connectionPoint.type && connectionPoint.innerType !== NodeMaterialBlockConnectionPointTypes.AutoDetect) {\n      // Equivalents\n      if (NodeMaterialConnectionPoint.AreEquivalentTypes(this.type, connectionPoint.type)) {\n        return NodeMaterialConnectionPointCompatibilityStates.Compatible;\n      } // Accepted types\n\n\n      if (connectionPoint.acceptedConnectionPointTypes && connectionPoint.acceptedConnectionPointTypes.indexOf(this.type) !== -1 || connectionPoint._acceptedConnectionPointType && NodeMaterialConnectionPoint.AreEquivalentTypes(connectionPoint._acceptedConnectionPointType.type, this.type)) {\n        return NodeMaterialConnectionPointCompatibilityStates.Compatible;\n      } else {\n        return NodeMaterialConnectionPointCompatibilityStates.TypeIncompatible;\n      }\n    } // Excluded\n\n\n    if (connectionPoint.excludedConnectionPointTypes && connectionPoint.excludedConnectionPointTypes.indexOf(this.type) !== -1) {\n      return 1;\n    }\n\n    return NodeMaterialConnectionPointCompatibilityStates.Compatible;\n  };\n  /**\r\n   * Connect this point to another connection point\r\n   * @param connectionPoint defines the other connection point\r\n   * @param ignoreConstraints defines if the system will ignore connection type constraints (default is false)\r\n   * @returns the current connection point\r\n   */\n\n\n  NodeMaterialConnectionPoint.prototype.connectTo = function (connectionPoint, ignoreConstraints) {\n    if (ignoreConstraints === void 0) {\n      ignoreConstraints = false;\n    }\n\n    if (!ignoreConstraints && !this.canConnectTo(connectionPoint)) {\n      throw \"Cannot connect these two connectors.\";\n    }\n\n    this._endpoints.push(connectionPoint);\n\n    connectionPoint._connectedPoint = this;\n    this._enforceAssociatedVariableName = false;\n    this.onConnectionObservable.notifyObservers(connectionPoint);\n    connectionPoint.onConnectionObservable.notifyObservers(this);\n    return this;\n  };\n  /**\r\n   * Disconnect this point from one of his endpoint\r\n   * @param endpoint defines the other connection point\r\n   * @returns the current connection point\r\n   */\n\n\n  NodeMaterialConnectionPoint.prototype.disconnectFrom = function (endpoint) {\n    var index = this._endpoints.indexOf(endpoint);\n\n    if (index === -1) {\n      return this;\n    }\n\n    this._endpoints.splice(index, 1);\n\n    endpoint._connectedPoint = null;\n    this._enforceAssociatedVariableName = false;\n    endpoint._enforceAssociatedVariableName = false;\n    return this;\n  };\n  /**\r\n   * Serializes this point in a JSON representation\r\n   * @param isInput defines if the connection point is an input (default is true)\r\n   * @returns the serialized point object\r\n   */\n\n\n  NodeMaterialConnectionPoint.prototype.serialize = function (isInput) {\n    if (isInput === void 0) {\n      isInput = true;\n    }\n\n    var serializationObject = {};\n    serializationObject.name = this.name;\n    serializationObject.displayName = this.displayName;\n\n    if (isInput && this.connectedPoint) {\n      serializationObject.inputName = this.name;\n      serializationObject.targetBlockId = this.connectedPoint.ownerBlock.uniqueId;\n      serializationObject.targetConnectionName = this.connectedPoint.name;\n      serializationObject.isExposedOnFrame = true;\n      serializationObject.exposedPortPosition = this.exposedPortPosition;\n    }\n\n    if (this.isExposedOnFrame || this.exposedPortPosition >= 0) {\n      serializationObject.isExposedOnFrame = true;\n      serializationObject.exposedPortPosition = this.exposedPortPosition;\n    }\n\n    return serializationObject;\n  };\n  /**\r\n   * Release resources\r\n   */\n\n\n  NodeMaterialConnectionPoint.prototype.dispose = function () {\n    this.onConnectionObservable.clear();\n  };\n\n  return NodeMaterialConnectionPoint;\n}();\n\nexport { NodeMaterialConnectionPoint };","map":null,"metadata":{},"sourceType":"module"}