{"ast":null,"code":"import { Vector3, Matrix } from './math.vector';\n/**\r\n * Represents a plane by the equation ax + by + cz + d = 0\r\n */\n\nvar Plane =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0\r\n   * @param a a component of the plane\r\n   * @param b b component of the plane\r\n   * @param c c component of the plane\r\n   * @param d d component of the plane\r\n   */\n  function Plane(a, b, c, d) {\n    this.normal = new Vector3(a, b, c);\n    this.d = d;\n  }\n  /**\r\n   * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].\r\n   */\n\n\n  Plane.prototype.asArray = function () {\n    return [this.normal.x, this.normal.y, this.normal.z, this.d];\n  }; // Methods\n\n  /**\r\n   * @returns a new plane copied from the current Plane.\r\n   */\n\n\n  Plane.prototype.clone = function () {\n    return new Plane(this.normal.x, this.normal.y, this.normal.z, this.d);\n  };\n  /**\r\n   * @returns the string \"Plane\".\r\n   */\n\n\n  Plane.prototype.getClassName = function () {\n    return \"Plane\";\n  };\n  /**\r\n   * @returns the Plane hash code.\r\n   */\n\n\n  Plane.prototype.getHashCode = function () {\n    var hash = this.normal.getHashCode();\n    hash = hash * 397 ^ (this.d | 0);\n    return hash;\n  };\n  /**\r\n   * Normalize the current Plane in place.\r\n   * @returns the updated Plane.\r\n   */\n\n\n  Plane.prototype.normalize = function () {\n    var norm = Math.sqrt(this.normal.x * this.normal.x + this.normal.y * this.normal.y + this.normal.z * this.normal.z);\n    var magnitude = 0.0;\n\n    if (norm !== 0) {\n      magnitude = 1.0 / norm;\n    }\n\n    this.normal.x *= magnitude;\n    this.normal.y *= magnitude;\n    this.normal.z *= magnitude;\n    this.d *= magnitude;\n    return this;\n  };\n  /**\r\n   * Applies a transformation the plane and returns the result\r\n   * @param transformation the transformation matrix to be applied to the plane\r\n   * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.\r\n   */\n\n\n  Plane.prototype.transform = function (transformation) {\n    var invertedMatrix = Plane._TmpMatrix;\n    transformation.invertToRef(invertedMatrix);\n    var m = invertedMatrix.m;\n    var x = this.normal.x;\n    var y = this.normal.y;\n    var z = this.normal.z;\n    var d = this.d;\n    var normalX = x * m[0] + y * m[1] + z * m[2] + d * m[3];\n    var normalY = x * m[4] + y * m[5] + z * m[6] + d * m[7];\n    var normalZ = x * m[8] + y * m[9] + z * m[10] + d * m[11];\n    var finalD = x * m[12] + y * m[13] + z * m[14] + d * m[15];\n    return new Plane(normalX, normalY, normalZ, finalD);\n  };\n  /**\r\n   * Compute the dot product between the point and the plane normal\r\n   * @param point point to calculate the dot product with\r\n   * @returns the dot product (float) of the point coordinates and the plane normal.\r\n   */\n\n\n  Plane.prototype.dotCoordinate = function (point) {\n    return this.normal.x * point.x + this.normal.y * point.y + this.normal.z * point.z + this.d;\n  };\n  /**\r\n   * Updates the current Plane from the plane defined by the three given points.\r\n   * @param point1 one of the points used to contruct the plane\r\n   * @param point2 one of the points used to contruct the plane\r\n   * @param point3 one of the points used to contruct the plane\r\n   * @returns the updated Plane.\r\n   */\n\n\n  Plane.prototype.copyFromPoints = function (point1, point2, point3) {\n    var x1 = point2.x - point1.x;\n    var y1 = point2.y - point1.y;\n    var z1 = point2.z - point1.z;\n    var x2 = point3.x - point1.x;\n    var y2 = point3.y - point1.y;\n    var z2 = point3.z - point1.z;\n    var yz = y1 * z2 - z1 * y2;\n    var xz = z1 * x2 - x1 * z2;\n    var xy = x1 * y2 - y1 * x2;\n    var pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);\n    var invPyth;\n\n    if (pyth !== 0) {\n      invPyth = 1.0 / pyth;\n    } else {\n      invPyth = 0.0;\n    }\n\n    this.normal.x = yz * invPyth;\n    this.normal.y = xz * invPyth;\n    this.normal.z = xy * invPyth;\n    this.d = -(this.normal.x * point1.x + this.normal.y * point1.y + this.normal.z * point1.z);\n    return this;\n  };\n  /**\r\n   * Checks if the plane is facing a given direction (meaning if the plane's normal is pointing in the opposite direction of the given vector).\r\n   * Note that for this function to work as expected you should make sure that:\r\n   *   - direction and the plane normal are normalized\r\n   *   - epsilon is a number just bigger than -1, something like -0.99 for eg\r\n   * @param direction the direction to check if the plane is facing\r\n   * @param epsilon value the dot product is compared against (returns true if dot <= epsilon)\r\n   * @returns True if the plane is facing the given direction\r\n   */\n\n\n  Plane.prototype.isFrontFacingTo = function (direction, epsilon) {\n    var dot = Vector3.Dot(this.normal, direction);\n    return dot <= epsilon;\n  };\n  /**\r\n   * Calculates the distance to a point\r\n   * @param point point to calculate distance to\r\n   * @returns the signed distance (float) from the given point to the Plane.\r\n   */\n\n\n  Plane.prototype.signedDistanceTo = function (point) {\n    return Vector3.Dot(point, this.normal) + this.d;\n  }; // Statics\n\n  /**\r\n   * Creates a plane from an  array\r\n   * @param array the array to create a plane from\r\n   * @returns a new Plane from the given array.\r\n   */\n\n\n  Plane.FromArray = function (array) {\n    return new Plane(array[0], array[1], array[2], array[3]);\n  };\n  /**\r\n   * Creates a plane from three points\r\n   * @param point1 point used to create the plane\r\n   * @param point2 point used to create the plane\r\n   * @param point3 point used to create the plane\r\n   * @returns a new Plane defined by the three given points.\r\n   */\n\n\n  Plane.FromPoints = function (point1, point2, point3) {\n    var result = new Plane(0.0, 0.0, 0.0, 0.0);\n    result.copyFromPoints(point1, point2, point3);\n    return result;\n  };\n  /**\r\n   * Creates a plane from an origin point and a normal\r\n   * @param origin origin of the plane to be constructed\r\n   * @param normal normal of the plane to be constructed\r\n   * @returns a new Plane the normal vector to this plane at the given origin point.\r\n   * Note : the vector \"normal\" is updated because normalized.\r\n   */\n\n\n  Plane.FromPositionAndNormal = function (origin, normal) {\n    var result = new Plane(0.0, 0.0, 0.0, 0.0);\n    normal.normalize();\n    result.normal = normal;\n    result.d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\n    return result;\n  };\n  /**\r\n   * Calculates the distance from a plane and a point\r\n   * @param origin origin of the plane to be constructed\r\n   * @param normal normal of the plane to be constructed\r\n   * @param point point to calculate distance to\r\n   * @returns the signed distance between the plane defined by the normal vector at the \"origin\"\" point and the given other point.\r\n   */\n\n\n  Plane.SignedDistanceToPlaneFromPositionAndNormal = function (origin, normal, point) {\n    var d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\n    return Vector3.Dot(point, normal) + d;\n  };\n\n  Plane._TmpMatrix = Matrix.Identity();\n  return Plane;\n}();\n\nexport { Plane };","map":null,"metadata":{},"sourceType":"module"}