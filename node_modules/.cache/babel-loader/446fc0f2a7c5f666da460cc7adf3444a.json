{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(poolGroupSaga),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handlePoolGroups);\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { takeLatest, put, call, fork } from 'redux-saga/effects';\nimport { LOAD_POOL_GROUPS_REQUEST, loadPoolGroupsFailure, loadPoolGroupsSuccess, loadPoolGroupsRequest } from './actions';\nexport function poolGroupSaga(builder) {\n  var _marked, handleLoadPoolGroups;\n\n  return _regeneratorRuntime.wrap(function poolGroupSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          handleLoadPoolGroups = function _handleLoadPoolGroups(_action) {\n            var poolGroups, record, _iterator, _step, poolGroup;\n\n            return _regeneratorRuntime.wrap(function handleLoadPoolGroups$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.next = 3;\n                    return call(function () {\n                      return builder.fetchPoolGroups();\n                    });\n\n                  case 3:\n                    poolGroups = _context.sent;\n                    record = {};\n                    _iterator = _createForOfIteratorHelper(poolGroups);\n\n                    try {\n                      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                        poolGroup = _step.value;\n                        record[poolGroup.id] = poolGroup;\n                      }\n                    } catch (err) {\n                      _iterator.e(err);\n                    } finally {\n                      _iterator.f();\n                    }\n\n                    _context.next = 9;\n                    return put(loadPoolGroupsSuccess(record));\n\n                  case 9:\n                    _context.next = 15;\n                    break;\n\n                  case 11:\n                    _context.prev = 11;\n                    _context.t0 = _context[\"catch\"](0);\n                    _context.next = 15;\n                    return put(loadPoolGroupsFailure(_context.t0.message));\n\n                  case 15:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _marked, null, [[0, 11]]);\n          };\n\n          _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleLoadPoolGroups);\n          _context2.next = 4;\n          return fork(handlePoolGroups);\n\n        case 4:\n          _context2.next = 6;\n          return takeLatest(LOAD_POOL_GROUPS_REQUEST, handleLoadPoolGroups);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction handlePoolGroups() {\n  return _regeneratorRuntime.wrap(function handlePoolGroups$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return put(loadPoolGroupsRequest());\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/poolGroup/sagas.ts"],"names":["poolGroupSaga","handlePoolGroups","takeLatest","put","call","fork","LOAD_POOL_GROUPS_REQUEST","loadPoolGroupsFailure","loadPoolGroupsSuccess","loadPoolGroupsRequest","builder","handleLoadPoolGroups","_action","fetchPoolGroups","poolGroups","record","poolGroup","id","message"],"mappings":";;qDAYiBA,a;qDAoBPC,gB;;;;;;;;AAhCV,SAASC,UAAT,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,IAAhC,QAA4C,oBAA5C;AAEA,SACEC,wBADF,EAGEC,qBAHF,EAIEC,qBAJF,EAKEC,qBALF,QAMO,WANP;AAUA,OAAO,SAAUT,aAAV,CAAwBU,OAAxB;AAAA,eAIKC,oBAJL;;AAAA;AAAA;AAAA;AAAA;AAIKA,UAAAA,oBAJL,kCAI0BC,OAJ1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAM+B,2BAAMR,IAAI,CAAC;AAAA,6BAAMM,OAAO,CAACG,eAAR,EAAN;AAAA,qBAAD,CAAV;;AAN/B;AAMKC,oBAAAA,UANL;AAOKC,oBAAAA,MAPL,GAOoC,EAPpC;AAAA,2DASuBD,UATvB;;AAAA;AASD,0EAAoC;AAAzBE,wBAAAA,SAAyB;AAClCD,wBAAAA,MAAM,CAACC,SAAS,CAACC,EAAX,CAAN,GAAuBD,SAAvB;AACD;AAXA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAaD,2BAAMb,GAAG,CAACK,qBAAqB,CAACO,MAAD,CAAtB,CAAT;;AAbC;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAeD,2BAAMZ,GAAG,CAACI,qBAAqB,CAAC,YAAEW,OAAH,CAAtB,CAAT;;AAfC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,0DAIKP,oBAJL;AAAA;AACL,iBAAMN,IAAI,CAACJ,gBAAD,CAAV;;AADK;AAAA;AAEL,iBAAMC,UAAU,CAACI,wBAAD,EAA2BK,oBAA3B,CAAhB;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBP,SAAUV,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAME,GAAG,CAACM,qBAAqB,EAAtB,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeLatest, put, call, fork } from 'redux-saga/effects'\nimport { BuilderAPI } from 'lib/api/builder'\nimport {\n  LOAD_POOL_GROUPS_REQUEST,\n  LoadPoolGroupsRequestAction,\n  loadPoolGroupsFailure,\n  loadPoolGroupsSuccess,\n  loadPoolGroupsRequest\n} from './actions'\nimport { PoolGroup } from './types'\nimport { ModelById } from 'decentraland-dapps/dist/lib/types'\n\nexport function* poolGroupSaga(builder: BuilderAPI) {\n  yield fork(handlePoolGroups)\n  yield takeLatest(LOAD_POOL_GROUPS_REQUEST, handleLoadPoolGroups)\n\n  function* handleLoadPoolGroups(_action: LoadPoolGroupsRequestAction) {\n    try {\n      const poolGroups: PoolGroup[] = yield call(() => builder.fetchPoolGroups())\n      const record: ModelById<PoolGroup> = {}\n\n      for (const poolGroup of poolGroups) {\n        record[poolGroup.id] = poolGroup\n      }\n\n      yield put(loadPoolGroupsSuccess(record))\n    } catch (e) {\n      yield put(loadPoolGroupsFailure(e.message))\n    }\n  }\n}\n\nfunction* handlePoolGroups() {\n  yield put(loadPoolGroupsRequest())\n}\n"]},"metadata":{},"sourceType":"module"}