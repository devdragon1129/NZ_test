{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Avatar = exports.AvatarInfo = exports.Snapshots = void 0;\n\nvar misc_1 = require(\"../../misc\");\n\nvar validation_1 = require(\"../../validation\");\n/**\n * Snapshots\n * @alpha\n */\n\n\nvar Snapshots;\n\n(function (Snapshots) {\n  Snapshots.schema = {\n    type: 'object',\n    required: ['face256', 'body'],\n    properties: {\n      face256: misc_1.IPFSv2.schema,\n      body: misc_1.IPFSv2.schema\n    }\n  };\n  var schemaValidator = (0, validation_1.generateValidator)(Snapshots.schema);\n\n  Snapshots.validate = function (snapshots) {\n    return schemaValidator(snapshots);\n  };\n})(Snapshots = exports.Snapshots || (exports.Snapshots = {}));\n/**\n * AvatarInfo\n * @alpha\n */\n\n\nvar AvatarInfo;\n\n(function (AvatarInfo) {\n  AvatarInfo.schema = {\n    type: 'object',\n    required: ['bodyShape', 'eyes', 'hair', 'skin'],\n    properties: {\n      bodyShape: {\n        type: 'string'\n      },\n      eyes: {\n        type: 'object',\n        required: ['color'],\n        properties: {\n          color: misc_1.Color3.schema\n        }\n      },\n      hair: {\n        type: 'object',\n        required: ['color'],\n        properties: {\n          color: misc_1.Color3.schema\n        }\n      },\n      skin: {\n        type: 'object',\n        required: ['color'],\n        properties: {\n          color: misc_1.Color3.schema\n        }\n      },\n      wearables: {\n        type: 'array',\n        items: {\n          type: 'string'\n        }\n      },\n      snapshots: Snapshots.schema\n    },\n    additionalProperties: true\n  };\n  var schemaValidator = (0, validation_1.generateValidator)(AvatarInfo.schema);\n\n  AvatarInfo.validate = function (avatarInfo) {\n    return schemaValidator(avatarInfo);\n  };\n})(AvatarInfo = exports.AvatarInfo || (exports.AvatarInfo = {}));\n/**\n * Avatar\n * @alpha\n */\n\n\nvar Avatar;\n\n(function (Avatar) {\n  Avatar.schema = {\n    type: 'object',\n    required: ['name', 'description', 'ethAddress', 'version', 'tutorialStep', 'avatar'],\n    properties: {\n      userId: {\n        type: 'string'\n      },\n      name: {\n        type: 'string'\n      },\n      description: {\n        type: 'string'\n      },\n      ethAddress: misc_1.EthAddress.schema,\n      version: {\n        type: 'number'\n      },\n      tutorialStep: {\n        type: 'number'\n      },\n      email: {\n        type: 'string',\n        nullable: true\n      },\n      blocked: {\n        type: 'array',\n        items: {\n          type: 'string'\n        },\n        nullable: true\n      },\n      muted: {\n        type: 'array',\n        items: {\n          type: 'string'\n        },\n        nullable: true\n      },\n      interests: {\n        type: 'array',\n        items: {\n          type: 'string'\n        },\n        nullable: true\n      },\n      hasClaimedName: {\n        type: 'boolean',\n        nullable: true\n      },\n      avatar: AvatarInfo.schema\n    },\n    additionalProperties: true\n  };\n  var schemaValidator = (0, validation_1.generateValidator)(Avatar.schema);\n\n  Avatar.validate = function (avatar) {\n    return schemaValidator(avatar);\n  };\n})(Avatar = exports.Avatar || (exports.Avatar = {}));","map":null,"metadata":{},"sourceType":"script"}