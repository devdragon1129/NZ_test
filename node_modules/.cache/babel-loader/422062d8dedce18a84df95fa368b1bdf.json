{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _without2 = _interopRequireDefault(require(\"lodash/without\"));\n\nvar _isNil2 = _interopRequireDefault(require(\"lodash/isNil\"));\n\nvar _clsx = _interopRequireDefault(require(\"clsx\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _lib = require(\"../../lib\");\n\nvar _Icon = _interopRequireDefault(require(\"../../elements/Icon\"));\n\nvar _MessageContent = _interopRequireDefault(require(\"./MessageContent\"));\n\nvar _MessageHeader = _interopRequireDefault(require(\"./MessageHeader\"));\n\nvar _MessageList = _interopRequireDefault(require(\"./MessageList\"));\n\nvar _MessageItem = _interopRequireDefault(require(\"./MessageItem\"));\n/**\n * A message displays information that explains nearby content.\n * @see Form\n */\n\n\nvar Message = /*#__PURE__*/function (_Component) {\n  (0, _inheritsLoose2.default)(Message, _Component);\n\n  function Message() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _this.handleDismiss = function (e) {\n      var onDismiss = _this.props.onDismiss;\n      if (onDismiss) onDismiss(e, _this.props);\n    };\n\n    return _this;\n  }\n\n  var _proto = Message.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        attached = _this$props.attached,\n        children = _this$props.children,\n        className = _this$props.className,\n        color = _this$props.color,\n        compact = _this$props.compact,\n        content = _this$props.content,\n        error = _this$props.error,\n        floating = _this$props.floating,\n        header = _this$props.header,\n        hidden = _this$props.hidden,\n        icon = _this$props.icon,\n        info = _this$props.info,\n        list = _this$props.list,\n        negative = _this$props.negative,\n        onDismiss = _this$props.onDismiss,\n        positive = _this$props.positive,\n        size = _this$props.size,\n        success = _this$props.success,\n        visible = _this$props.visible,\n        warning = _this$props.warning;\n    var classes = (0, _clsx.default)('ui', color, size, (0, _lib.useKeyOnly)(compact, 'compact'), (0, _lib.useKeyOnly)(error, 'error'), (0, _lib.useKeyOnly)(floating, 'floating'), (0, _lib.useKeyOnly)(hidden, 'hidden'), (0, _lib.useKeyOnly)(icon, 'icon'), (0, _lib.useKeyOnly)(info, 'info'), (0, _lib.useKeyOnly)(negative, 'negative'), (0, _lib.useKeyOnly)(positive, 'positive'), (0, _lib.useKeyOnly)(success, 'success'), (0, _lib.useKeyOnly)(visible, 'visible'), (0, _lib.useKeyOnly)(warning, 'warning'), (0, _lib.useKeyOrValueAndKey)(attached, 'attached'), 'message', className);\n\n    var dismissIcon = onDismiss && /*#__PURE__*/_react.default.createElement(_Icon.default, {\n      name: \"close\",\n      onClick: this.handleDismiss\n    });\n\n    var rest = (0, _lib.getUnhandledProps)(Message, this.props);\n    var ElementType = (0, _lib.getElementType)(Message, this.props);\n\n    if (!_lib.childrenUtils.isNil(children)) {\n      return /*#__PURE__*/_react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {\n        className: classes\n      }), dismissIcon, children);\n    }\n\n    return /*#__PURE__*/_react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {\n      className: classes\n    }), dismissIcon, _Icon.default.create(icon, {\n      autoGenerateKey: false\n    }), (!(0, _isNil2.default)(header) || !(0, _isNil2.default)(content) || !(0, _isNil2.default)(list)) && /*#__PURE__*/_react.default.createElement(_MessageContent.default, null, _MessageHeader.default.create(header, {\n      autoGenerateKey: false\n    }), _MessageList.default.create(list, {\n      autoGenerateKey: false\n    }), (0, _lib.createHTMLParagraph)(content, {\n      autoGenerateKey: false\n    })));\n  };\n\n  return Message;\n}(_react.Component);\n\nexports.default = Message;\nMessage.handledProps = [\"as\", \"attached\", \"children\", \"className\", \"color\", \"compact\", \"content\", \"error\", \"floating\", \"header\", \"hidden\", \"icon\", \"info\", \"list\", \"negative\", \"onDismiss\", \"positive\", \"size\", \"success\", \"visible\", \"warning\"];\nMessage.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _propTypes.default.elementType,\n\n  /** A message can be formatted to attach itself to other content. */\n  attached: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.oneOf(['bottom', 'top'])]),\n\n  /** Primary content. */\n  children: _propTypes.default.node,\n\n  /** Additional classes. */\n  className: _propTypes.default.string,\n\n  /** A message can be formatted to be different colors. */\n  color: _propTypes.default.oneOf(_lib.SUI.COLORS),\n\n  /** A message can only take up the width of its content. */\n  compact: _propTypes.default.bool,\n\n  /** Shorthand for primary content. */\n  content: _lib.customPropTypes.contentShorthand,\n\n  /** A message may be formatted to display a negative message. Same as `negative`. */\n  error: _propTypes.default.bool,\n\n  /** A message can float above content that it is related to. */\n  floating: _propTypes.default.bool,\n\n  /** Shorthand for MessageHeader. */\n  header: _lib.customPropTypes.itemShorthand,\n\n  /** A message can be hidden. */\n  hidden: _propTypes.default.bool,\n\n  /** A message can contain an icon. */\n  icon: _propTypes.default.oneOfType([_lib.customPropTypes.itemShorthand, _propTypes.default.bool]),\n\n  /** A message may be formatted to display information. */\n  info: _propTypes.default.bool,\n\n  /** Array shorthand items for the MessageList. Mutually exclusive with children. */\n  list: _lib.customPropTypes.collectionShorthand,\n\n  /** A message may be formatted to display a negative message. Same as `error`. */\n  negative: _propTypes.default.bool,\n\n  /**\n   * A message that the user can choose to hide.\n   * Called when the user clicks the \"x\" icon. This also adds the \"x\" icon.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onDismiss: _propTypes.default.func,\n\n  /** A message may be formatted to display a positive message.  Same as `success`. */\n  positive: _propTypes.default.bool,\n\n  /** A message can have different sizes. */\n  size: _propTypes.default.oneOf((0, _without2.default)(_lib.SUI.SIZES, 'medium')),\n\n  /** A message may be formatted to display a positive message.  Same as `positive`. */\n  success: _propTypes.default.bool,\n\n  /** A message can be set to visible to force itself to be shown. */\n  visible: _propTypes.default.bool,\n\n  /** A message may be formatted to display warning messages. */\n  warning: _propTypes.default.bool\n} : {};\nMessage.Content = _MessageContent.default;\nMessage.Header = _MessageHeader.default;\nMessage.List = _MessageList.default;\nMessage.Item = _MessageItem.default;","map":null,"metadata":{},"sourceType":"script"}