{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Vector2 } from \"../Maths/math.vector\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/stereoscopicInterlace.fragment\";\n/**\r\n * StereoscopicInterlacePostProcessI used to render stereo views from a rigged camera with support for alternate line interlacing\r\n */\n\nvar StereoscopicInterlacePostProcessI =\n/** @class */\nfunction (_super) {\n  __extends(StereoscopicInterlacePostProcessI, _super);\n  /**\r\n   * Initializes a StereoscopicInterlacePostProcessI\r\n   * @param name The name of the effect.\r\n   * @param rigCameras The rig cameras to be appled to the post process\r\n   * @param isStereoscopicHoriz If the rendered results are horizontal or vertical\r\n   * @param isStereoscopicInterlaced If the rendered results are alternate line interlaced\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   */\n\n\n  function StereoscopicInterlacePostProcessI(name, rigCameras, isStereoscopicHoriz, isStereoscopicInterlaced, samplingMode, engine, reusable) {\n    var _this = _super.call(this, name, \"stereoscopicInterlace\", ['stepSize'], ['camASampler'], 1, rigCameras[1], samplingMode, engine, reusable, isStereoscopicInterlaced ? \"#define IS_STEREOSCOPIC_INTERLACED 1\" : isStereoscopicHoriz ? \"#define IS_STEREOSCOPIC_HORIZ 1\" : undefined) || this;\n\n    _this._passedProcess = rigCameras[0]._rigPostProcess;\n    _this._stepSize = new Vector2(1 / _this.width, 1 / _this.height);\n\n    _this.onSizeChangedObservable.add(function () {\n      _this._stepSize = new Vector2(1 / _this.width, 1 / _this.height);\n    });\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setTextureFromPostProcess(\"camASampler\", _this._passedProcess);\n      effect.setFloat2(\"stepSize\", _this._stepSize.x, _this._stepSize.y);\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"StereoscopicInterlacePostProcessI\" string\r\n   */\n\n\n  StereoscopicInterlacePostProcessI.prototype.getClassName = function () {\n    return \"StereoscopicInterlacePostProcessI\";\n  };\n\n  return StereoscopicInterlacePostProcessI;\n}(PostProcess);\n\nexport { StereoscopicInterlacePostProcessI };\n/**\r\n * StereoscopicInterlacePostProcess used to render stereo views from a rigged camera\r\n */\n\nvar StereoscopicInterlacePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(StereoscopicInterlacePostProcess, _super);\n  /**\r\n   * Initializes a StereoscopicInterlacePostProcess\r\n   * @param name The name of the effect.\r\n   * @param rigCameras The rig cameras to be appled to the post process\r\n   * @param isStereoscopicHoriz If the rendered results are horizontal or verticle\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   */\n\n\n  function StereoscopicInterlacePostProcess(name, rigCameras, isStereoscopicHoriz, samplingMode, engine, reusable) {\n    var _this = _super.call(this, name, \"stereoscopicInterlace\", ['stepSize'], ['camASampler'], 1, rigCameras[1], samplingMode, engine, reusable, isStereoscopicHoriz ? \"#define IS_STEREOSCOPIC_HORIZ 1\" : undefined) || this;\n\n    _this._passedProcess = rigCameras[0]._rigPostProcess;\n    _this._stepSize = new Vector2(1 / _this.width, 1 / _this.height);\n\n    _this.onSizeChangedObservable.add(function () {\n      _this._stepSize = new Vector2(1 / _this.width, 1 / _this.height);\n    });\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setTextureFromPostProcess(\"camASampler\", _this._passedProcess);\n      effect.setFloat2(\"stepSize\", _this._stepSize.x, _this._stepSize.y);\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"StereoscopicInterlacePostProcess\" string\r\n   */\n\n\n  StereoscopicInterlacePostProcess.prototype.getClassName = function () {\n    return \"StereoscopicInterlacePostProcess\";\n  };\n\n  return StereoscopicInterlacePostProcess;\n}(PostProcess);\n\nexport { StereoscopicInterlacePostProcess };","map":null,"metadata":{},"sourceType":"module"}