{"ast":null,"code":"import { Mesh } from \"../mesh\";\nimport { VertexData } from \"../mesh.vertexData\";\n\nVertexData.CreatePlane = function (options) {\n  var indices = [];\n  var positions = [];\n  var normals = [];\n  var uvs = [];\n  var width = options.width || options.size || 1;\n  var height = options.height || options.size || 1;\n  var sideOrientation = options.sideOrientation === 0 ? 0 : options.sideOrientation || VertexData.DEFAULTSIDE; // Vertices\n\n  var halfWidth = width / 2.0;\n  var halfHeight = height / 2.0;\n  positions.push(-halfWidth, -halfHeight, 0);\n  normals.push(0, 0, -1.0);\n  uvs.push(0.0, 0.0);\n  positions.push(halfWidth, -halfHeight, 0);\n  normals.push(0, 0, -1.0);\n  uvs.push(1.0, 0.0);\n  positions.push(halfWidth, halfHeight, 0);\n  normals.push(0, 0, -1.0);\n  uvs.push(1.0, 1.0);\n  positions.push(-halfWidth, halfHeight, 0);\n  normals.push(0, 0, -1.0);\n  uvs.push(0.0, 1.0); // Indices\n\n  indices.push(0);\n  indices.push(1);\n  indices.push(2);\n  indices.push(0);\n  indices.push(2);\n  indices.push(3); // Sides\n\n  VertexData._ComputeSides(sideOrientation, positions, indices, normals, uvs, options.frontUVs, options.backUVs); // Result\n\n\n  var vertexData = new VertexData();\n  vertexData.indices = indices;\n  vertexData.positions = positions;\n  vertexData.normals = normals;\n  vertexData.uvs = uvs;\n  return vertexData;\n};\n\nMesh.CreatePlane = function (name, size, scene, updatable, sideOrientation) {\n  var options = {\n    size: size,\n    width: size,\n    height: size,\n    sideOrientation: sideOrientation,\n    updatable: updatable\n  };\n  return PlaneBuilder.CreatePlane(name, options, scene);\n};\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\n\n\nvar PlaneBuilder =\n/** @class */\nfunction () {\n  function PlaneBuilder() {}\n  /**\r\n   * Creates a plane mesh\r\n   * * The parameter `size` sets the size (float) of both sides of the plane at once (default 1)\r\n   * * You can set some different plane dimensions by using the parameters `width` and `height` (both by default have the same value of `size`)\r\n   * * The parameter `sourcePlane` is a Plane instance. It builds a mesh plane from a Math plane\r\n   * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n   * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n   * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n   * @param name defines the name of the mesh\r\n   * @param options defines the options used to create the mesh\r\n   * @param scene defines the hosting scene\r\n   * @returns the plane mesh\r\n   * @see https://doc.babylonjs.com/how_to/set_shapes#plane\r\n   */\n\n\n  PlaneBuilder.CreatePlane = function (name, options, scene) {\n    if (scene === void 0) {\n      scene = null;\n    }\n\n    var plane = new Mesh(name, scene);\n    options.sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n    plane._originalBuilderSideOrientation = options.sideOrientation;\n    var vertexData = VertexData.CreatePlane(options);\n    vertexData.applyToMesh(plane, options.updatable);\n\n    if (options.sourcePlane) {\n      plane.translate(options.sourcePlane.normal, -options.sourcePlane.d);\n      plane.setDirection(options.sourcePlane.normal.scale(-1));\n    }\n\n    return plane;\n  };\n\n  return PlaneBuilder;\n}();\n\nexport { PlaneBuilder };","map":null,"metadata":{},"sourceType":"module"}