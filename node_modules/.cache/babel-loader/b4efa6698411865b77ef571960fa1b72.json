{"ast":null,"code":"import { Camera } from \"../camera\";\nimport { Matrix } from \"../../Maths/math.vector\";\nimport { VRDistortionCorrectionPostProcess } from \"../../PostProcesses/vrDistortionCorrectionPostProcess\";\nimport { VRMultiviewToSingleviewPostProcess } from '../../PostProcesses/vrMultiviewToSingleviewPostProcess';\nimport { VRCameraMetrics } from \"../VR/vrCameraMetrics\";\nimport { Logger } from '../../Misc/logger';\nimport { Viewport } from '../../Maths/math.viewport';\n\nCamera._setVRRigMode = function (camera, rigParams) {\n  var metrics = rigParams.vrCameraMetrics || VRCameraMetrics.GetDefault();\n  camera._rigCameras[0]._cameraRigParams.vrMetrics = metrics;\n  camera._rigCameras[0].viewport = new Viewport(0, 0, 0.5, 1.0);\n  camera._rigCameras[0]._cameraRigParams.vrWorkMatrix = new Matrix();\n  camera._rigCameras[0]._cameraRigParams.vrHMatrix = metrics.leftHMatrix;\n  camera._rigCameras[0]._cameraRigParams.vrPreViewMatrix = metrics.leftPreViewMatrix;\n  camera._rigCameras[0].getProjectionMatrix = camera._rigCameras[0]._getVRProjectionMatrix;\n  camera._rigCameras[1]._cameraRigParams.vrMetrics = metrics;\n  camera._rigCameras[1].viewport = new Viewport(0.5, 0, 0.5, 1.0);\n  camera._rigCameras[1]._cameraRigParams.vrWorkMatrix = new Matrix();\n  camera._rigCameras[1]._cameraRigParams.vrHMatrix = metrics.rightHMatrix;\n  camera._rigCameras[1]._cameraRigParams.vrPreViewMatrix = metrics.rightPreViewMatrix;\n  camera._rigCameras[1].getProjectionMatrix = camera._rigCameras[1]._getVRProjectionMatrix; // For multiview on a webVR camera\n  // First multiview will be rendered to camera._multiviewTexture\n  // Then this postprocess will run on each eye to copy the right texture to each eye\n\n  if (metrics.multiviewEnabled) {\n    if (!camera.getScene().getEngine().getCaps().multiview) {\n      Logger.Warn(\"Multiview is not supported, falling back to standard rendering\");\n      metrics.multiviewEnabled = false;\n    } else {\n      camera._useMultiviewToSingleView = true;\n      camera._rigPostProcess = new VRMultiviewToSingleviewPostProcess(\"VRMultiviewToSingleview\", camera, metrics.postProcessScaleFactor);\n    }\n  }\n\n  if (metrics.compensateDistortion) {\n    camera._rigCameras[0]._rigPostProcess = new VRDistortionCorrectionPostProcess(\"VR_Distort_Compensation_Left\", camera._rigCameras[0], false, metrics);\n    camera._rigCameras[1]._rigPostProcess = new VRDistortionCorrectionPostProcess(\"VR_Distort_Compensation_Right\", camera._rigCameras[1], true, metrics);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}