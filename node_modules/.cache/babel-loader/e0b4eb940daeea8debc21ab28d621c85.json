{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// caching the stats promise since it should not change for 24hs. Caching the promise instead of using await so simultaneous calls to the function would result in a single request.\nvar statsPromise = undefined;\n\nvar AnalyticsAPI = /*#__PURE__*/function () {\n  function AnalyticsAPI() {\n    _classCallCheck(this, AnalyticsAPI);\n  }\n\n  _createClass(AnalyticsAPI, [{\n    key: \"fetchWeeklyStats\",\n    value: function () {\n      var _fetchWeeklyStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(base) {\n        var json, stats, weeklyStats;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!statsPromise) {\n                  statsPromise = fetch('https://cdn-data.decentraland.org/scenes/scene-stats.json').then(function (resp) {\n                    return resp.json();\n                  });\n                }\n\n                _context.next = 3;\n                return statsPromise;\n\n              case 3:\n                json = _context.sent;\n                stats = base in json ? json[base]['last_7d'] : null;\n                weeklyStats = {\n                  base: base,\n                  users: stats ? stats.users : 0,\n                  sessions: stats ? stats.sessions : 0,\n                  medianSessionTime: stats ? stats.median_session_time : 0,\n                  maxConcurrentUsers: stats ? stats.max_concurrent_users || 0 : 0\n                };\n                return _context.abrupt(\"return\", weeklyStats);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function fetchWeeklyStats(_x) {\n        return _fetchWeeklyStats.apply(this, arguments);\n      }\n\n      return fetchWeeklyStats;\n    }()\n  }]);\n\n  return AnalyticsAPI;\n}();\n\nexport var analytics = new AnalyticsAPI();","map":{"version":3,"sources":["/opt/work/NZ_test/src/lib/api/analytics.ts"],"names":["statsPromise","undefined","AnalyticsAPI","base","fetch","then","resp","json","stats","weeklyStats","users","sessions","medianSessionTime","median_session_time","maxConcurrentUsers","max_concurrent_users","analytics"],"mappings":";;;;AAEA;AACA,IAAIA,YAIS,GAAGC,SAJhB;;IAMMC,Y;;;;;;;;wGACmBC,I;;;;;;AACrB,oBAAI,CAACH,YAAL,EAAmB;AACjBA,kBAAAA,YAAY,GAAGI,KAAK,CAAC,2DAAD,CAAL,CAAmEC,IAAnE,CAAwE,UAAAC,IAAI;AAAA,2BAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,mBAA5E,CAAf;AACD;;;uBACkBP,Y;;;AAAbO,gBAAAA,I;AACAC,gBAAAA,K,GAAQL,IAAI,IAAII,IAAR,GAAeA,IAAI,CAACJ,IAAD,CAAJ,CAAW,SAAX,CAAf,GAAuC,I;AAE/CM,gBAAAA,W,GAA2B;AAC/BN,kBAAAA,IAAI,EAAJA,IAD+B;AAE/BO,kBAAAA,KAAK,EAAEF,KAAK,GAAGA,KAAK,CAACE,KAAT,GAAiB,CAFE;AAG/BC,kBAAAA,QAAQ,EAAEH,KAAK,GAAGA,KAAK,CAACG,QAAT,GAAoB,CAHJ;AAI/BC,kBAAAA,iBAAiB,EAAEJ,KAAK,GAAGA,KAAK,CAACK,mBAAT,GAA+B,CAJxB;AAK/BC,kBAAAA,kBAAkB,EAAEN,KAAK,GAAGA,KAAK,CAACO,oBAAN,IAA8B,CAAjC,GAAqC;AAL/B,iB;iDAQ1BN,W;;;;;;;;;;;;;;;;;;;;;AAIX,OAAO,IAAMO,SAAS,GAAG,IAAId,YAAJ,EAAlB","sourcesContent":["import { WeeklyStats } from 'modules/stats/types'\n\n// caching the stats promise since it should not change for 24hs. Caching the promise instead of using await so simultaneous calls to the function would result in a single request.\nlet statsPromise:\n  | Promise<\n      Record<string, { last_7d: { users: number; sessions: number; median_session_time: number; max_concurrent_users: number | null } }>\n    >\n  | undefined = undefined\n\nclass AnalyticsAPI {\n  async fetchWeeklyStats(base: string) {\n    if (!statsPromise) {\n      statsPromise = fetch('https://cdn-data.decentraland.org/scenes/scene-stats.json').then(resp => resp.json())\n    }\n    const json = await statsPromise\n    const stats = base in json ? json[base]['last_7d'] : null\n\n    const weeklyStats: WeeklyStats = {\n      base,\n      users: stats ? stats.users : 0,\n      sessions: stats ? stats.sessions : 0,\n      medianSessionTime: stats ? stats.median_session_time : 0,\n      maxConcurrentUsers: stats ? stats.max_concurrent_users || 0 : 0\n    }\n\n    return weeklyStats\n  }\n}\n\nexport const analytics = new AnalyticsAPI()\n"]},"metadata":{},"sourceType":"module"}