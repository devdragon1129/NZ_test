{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { InternalTexture, InternalTextureSource } from '../../Materials/Textures/internalTexture';\nimport { Logger } from '../../Misc/logger';\nimport { ThinEngine } from '../thinEngine';\n\nThinEngine.prototype.createRenderTargetCubeTexture = function (size, options) {\n  var fullOptions = __assign({\n    generateMipMaps: true,\n    generateDepthBuffer: true,\n    generateStencilBuffer: false,\n    type: 0,\n    samplingMode: 3,\n    format: 5\n  }, options);\n\n  fullOptions.generateStencilBuffer = fullOptions.generateDepthBuffer && fullOptions.generateStencilBuffer;\n\n  if (fullOptions.type === 1 && !this._caps.textureFloatLinearFiltering) {\n    // if floating point linear (gl.FLOAT) then force to NEAREST_SAMPLINGMODE\n    fullOptions.samplingMode = 1;\n  } else if (fullOptions.type === 2 && !this._caps.textureHalfFloatLinearFiltering) {\n    // if floating point linear (HALF_FLOAT) then force to NEAREST_SAMPLINGMODE\n    fullOptions.samplingMode = 1;\n  }\n\n  var gl = this._gl;\n  var texture = new InternalTexture(this, InternalTextureSource.RenderTarget);\n\n  this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\n\n  var filters = this._getSamplingParameters(fullOptions.samplingMode, fullOptions.generateMipMaps);\n\n  if (fullOptions.type === 1 && !this._caps.textureFloat) {\n    fullOptions.type = 0;\n    Logger.Warn(\"Float textures are not supported. Cube render target forced to TEXTURETYPE_UNESIGNED_BYTE type\");\n  }\n\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, filters.mag);\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, filters.min);\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n  for (var face = 0; face < 6; face++) {\n    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + face, 0, this._getRGBABufferInternalSizedFormat(fullOptions.type, fullOptions.format), size, size, 0, this._getInternalFormat(fullOptions.format), this._getWebGLTextureType(fullOptions.type), null);\n  } // Create the framebuffer\n\n\n  var framebuffer = gl.createFramebuffer();\n\n  this._bindUnboundFramebuffer(framebuffer);\n\n  texture._depthStencilBuffer = this._setupFramebufferDepthAttachments(fullOptions.generateStencilBuffer, fullOptions.generateDepthBuffer, size, size); // MipMaps\n\n  if (fullOptions.generateMipMaps) {\n    gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\n  } // Unbind\n\n\n  this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\n\n  this._bindUnboundFramebuffer(null);\n\n  texture._framebuffer = framebuffer;\n  texture.width = size;\n  texture.height = size;\n  texture.isReady = true;\n  texture.isCube = true;\n  texture.samples = 1;\n  texture.generateMipMaps = fullOptions.generateMipMaps;\n  texture.samplingMode = fullOptions.samplingMode;\n  texture.type = fullOptions.type;\n  texture.format = fullOptions.format;\n  texture._generateDepthBuffer = fullOptions.generateDepthBuffer;\n  texture._generateStencilBuffer = fullOptions.generateStencilBuffer;\n\n  this._internalTexturesCache.push(texture);\n\n  return texture;\n};","map":null,"metadata":{},"sourceType":"module"}