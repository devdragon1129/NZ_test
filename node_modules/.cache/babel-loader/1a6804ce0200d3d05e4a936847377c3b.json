{"ast":null,"code":"import { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getENSByWallet, getLoading } from 'modules/ens/selectors';\nimport { isLoggingIn, isLoggedIn } from 'modules/identity/selectors';\nimport { FETCH_ENS_LIST_REQUEST } from 'modules/ens/actions';\nimport { getLands, getLoading as getLandsLoading } from 'modules/land/selectors';\nimport { FETCH_LANDS_REQUEST } from 'modules/land/actions';\nimport { getName } from 'modules/profile/selectors';\nimport { openModal } from 'modules/modal/actions';\nimport ENSListPage from './ENSListPage';\n\nvar mapState = function mapState(state) {\n  return {\n    alias: getName(state),\n    address: getAddress(state),\n    ensList: getENSByWallet(state),\n    lands: getLands(state),\n    isLoading: isLoadingType(getLandsLoading(state), FETCH_LANDS_REQUEST) || isLoadingType(getLoading(state), FETCH_ENS_LIST_REQUEST) || isLoggingIn(state),\n    isLoggedIn: isLoggedIn(state)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onNavigate: function onNavigate(path) {\n      return dispatch(push(path));\n    },\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(ENSListPage);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/ENSListPage/ENSListPage.container.ts"],"names":["connect","push","getAddress","isLoadingType","getENSByWallet","getLoading","isLoggingIn","isLoggedIn","FETCH_ENS_LIST_REQUEST","getLands","getLandsLoading","FETCH_LANDS_REQUEST","getName","openModal","ENSListPage","mapState","state","alias","address","ensList","lands","isLoading","mapDispatch","dispatch","onNavigate","path","onOpenModal","name","metadata"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,UAAT,QAA2B,kDAA3B;AACA,SAASC,aAAT,QAA8B,mDAA9B;AAEA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,uBAA3C;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,4BAAxC;AACA,SAASC,sBAAT,QAAuC,qBAAvC;AACA,SAASC,QAAT,EAAmBJ,UAAU,IAAIK,eAAjC,QAAwD,wBAAxD;AACA,SAASC,mBAAT,QAAoC,sBAApC;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAsC;AACrDC,IAAAA,KAAK,EAAEL,OAAO,CAACI,KAAD,CADuC;AAErDE,IAAAA,OAAO,EAAEhB,UAAU,CAACc,KAAD,CAFkC;AAGrDG,IAAAA,OAAO,EAAEf,cAAc,CAACY,KAAD,CAH8B;AAIrDI,IAAAA,KAAK,EAAEX,QAAQ,CAACO,KAAD,CAJsC;AAKrDK,IAAAA,SAAS,EACPlB,aAAa,CAACO,eAAe,CAACM,KAAD,CAAhB,EAAyBL,mBAAzB,CAAb,IACAR,aAAa,CAACE,UAAU,CAACW,KAAD,CAAX,EAAoBR,sBAApB,CADb,IAEAF,WAAW,CAACU,KAAD,CARwC;AASrDT,IAAAA,UAAU,EAAEA,UAAU,CAACS,KAAD;AAT+B,GAAtC;AAAA,CAAjB;;AAYA,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,UAAU,EAAE,oBAAAC,IAAI;AAAA,aAAIF,QAAQ,CAACtB,IAAI,CAACwB,IAAD,CAAL,CAAZ;AAAA,KADgD;AAEhEC,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,QAAP;AAAA,aAAoBL,QAAQ,CAACV,SAAS,CAACc,IAAD,EAAOC,QAAP,CAAV,CAA5B;AAAA;AAFmD,GAA9C;AAAA,CAApB;;AAKA,eAAe5B,OAAO,CAACe,QAAD,EAAWO,WAAX,CAAP,CAA+BR,WAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { RootState } from 'modules/common/types'\nimport { getENSByWallet, getLoading } from 'modules/ens/selectors'\nimport { isLoggingIn, isLoggedIn } from 'modules/identity/selectors'\nimport { FETCH_ENS_LIST_REQUEST } from 'modules/ens/actions'\nimport { getLands, getLoading as getLandsLoading } from 'modules/land/selectors'\nimport { FETCH_LANDS_REQUEST } from 'modules/land/actions'\nimport { getName } from 'modules/profile/selectors'\nimport { openModal } from 'modules/modal/actions'\nimport { MapStateProps, MapDispatchProps, MapDispatch } from './ENSListPage.types'\nimport ENSListPage from './ENSListPage'\n\nconst mapState = (state: RootState): MapStateProps => ({\n  alias: getName(state),\n  address: getAddress(state),\n  ensList: getENSByWallet(state),\n  lands: getLands(state),\n  isLoading:\n    isLoadingType(getLandsLoading(state), FETCH_LANDS_REQUEST) ||\n    isLoadingType(getLoading(state), FETCH_ENS_LIST_REQUEST) ||\n    isLoggingIn(state),\n  isLoggedIn: isLoggedIn(state)\n})\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onNavigate: path => dispatch(push(path)),\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata))\n})\n\nexport default connect(mapState, mapDispatch)(ENSListPage)\n"]},"metadata":{},"sourceType":"module"}