{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkStrictMode = exports.schemaCxtHasRules = exports.subschemaCode = exports.validateFunctionCode = void 0;\n\nvar boolSchema_1 = require(\"./boolSchema\");\n\nvar dataType_1 = require(\"./dataType\");\n\nvar iterate_1 = require(\"./iterate\");\n\nvar codegen_1 = require(\"../codegen\");\n\nvar names_1 = require(\"../names\");\n\nvar resolve_1 = require(\"../resolve\");\n\nvar util_1 = require(\"../util\"); // schema compilation - generates validation function, subschemaCode (below) is used for subschemas\n\n\nfunction validateFunctionCode(it) {\n  if (isSchemaObj(it)) {\n    checkKeywords(it);\n\n    if (schemaCxtHasRules(it)) {\n      topSchemaObjCode(it);\n      return;\n    }\n  }\n\n  validateFunction(it, function () {\n    return boolSchema_1.topBoolOrEmptySchema(it);\n  });\n}\n\nexports.validateFunctionCode = validateFunctionCode;\n\nfunction validateFunction(_ref, body) {\n  var gen = _ref.gen,\n      validateName = _ref.validateName,\n      schema = _ref.schema,\n      schemaEnv = _ref.schemaEnv,\n      opts = _ref.opts;\n\n  if (opts.code.es5) {\n    gen.func(validateName, codegen_1._(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\", \", \", \"\"])), names_1.default.data, names_1.default.valCxt), schemaEnv.$async, function () {\n      gen.code(codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\\"use strict\\\"; \", \"\"])), funcSourceUrl(schema, opts)));\n      destructureValCxtES5(gen, opts);\n      gen.code(body);\n    });\n  } else {\n    gen.func(validateName, codegen_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \", \", \"\"])), names_1.default.data, destructureValCxt(opts)), schemaEnv.$async, function () {\n      return gen.code(funcSourceUrl(schema, opts)).code(body);\n    });\n  }\n}\n\nfunction destructureValCxt(opts) {\n  return codegen_1._(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"{\", \"=\\\"\\\", \", \", \", \", \", \"=\", \"\", \"}={}\"])), names_1.default.dataPath, names_1.default.parentData, names_1.default.parentDataProperty, names_1.default.rootData, names_1.default.data, opts.dynamicRef ? codegen_1._(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\", \", \"={}\"])), names_1.default.dynamicAnchors) : codegen_1.nil);\n}\n\nfunction destructureValCxtES5(gen, opts) {\n  gen.if(names_1.default.valCxt, function () {\n    gen.var(names_1.default.dataPath, codegen_1._(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\", \".\", \"\"])), names_1.default.valCxt, names_1.default.dataPath));\n    gen.var(names_1.default.parentData, codegen_1._(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\", \".\", \"\"])), names_1.default.valCxt, names_1.default.parentData));\n    gen.var(names_1.default.parentDataProperty, codegen_1._(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\", \".\", \"\"])), names_1.default.valCxt, names_1.default.parentDataProperty));\n    gen.var(names_1.default.rootData, codegen_1._(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"\", \".\", \"\"])), names_1.default.valCxt, names_1.default.rootData));\n    if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, codegen_1._(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"\", \".\", \"\"])), names_1.default.valCxt, names_1.default.dynamicAnchors));\n  }, function () {\n    gen.var(names_1.default.dataPath, codegen_1._(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([\"\\\"\\\"\"]))));\n    gen.var(names_1.default.parentData, codegen_1._(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([\"undefined\"]))));\n    gen.var(names_1.default.parentDataProperty, codegen_1._(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral([\"undefined\"]))));\n    gen.var(names_1.default.rootData, names_1.default.data);\n    if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, codegen_1._(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral([\"{}\"]))));\n  });\n}\n\nfunction topSchemaObjCode(it) {\n  var schema = it.schema,\n      opts = it.opts,\n      gen = it.gen;\n  validateFunction(it, function () {\n    if (opts.$comment && schema.$comment) commentKeyword(it);\n    checkNoDefault(it);\n    gen.let(names_1.default.vErrors, null);\n    gen.let(names_1.default.errors, 0);\n    if (opts.unevaluated) resetEvaluated(it);\n    typeAndKeywords(it);\n    returnResults(it);\n  });\n  return;\n}\n\nfunction resetEvaluated(it) {\n  // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated\n  var gen = it.gen,\n      validateName = it.validateName;\n  it.evaluated = gen.const(\"evaluated\", codegen_1._(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral([\"\", \".evaluated\"])), validateName));\n  gen.if(codegen_1._(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral([\"\", \".dynamicProps\"])), it.evaluated), function () {\n    return gen.assign(codegen_1._(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral([\"\", \".props\"])), it.evaluated), codegen_1._(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral([\"undefined\"]))));\n  });\n  gen.if(codegen_1._(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral([\"\", \".dynamicItems\"])), it.evaluated), function () {\n    return gen.assign(codegen_1._(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral([\"\", \".items\"])), it.evaluated), codegen_1._(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral([\"undefined\"]))));\n  });\n}\n\nfunction funcSourceUrl(schema, opts) {\n  return typeof schema == \"object\" && schema.$id && (opts.code.source || opts.code.process) ? codegen_1._(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral([\"/*# sourceURL=\", \" */\"])), schema.$id) : codegen_1.nil;\n} // schema compilation - this function is used recursively to generate code for sub-schemas\n\n\nfunction subschemaCode(it, valid) {\n  if (isSchemaObj(it)) {\n    checkKeywords(it);\n\n    if (schemaCxtHasRules(it)) {\n      subSchemaObjCode(it, valid);\n      return;\n    }\n  }\n\n  boolSchema_1.boolOrEmptySchema(it, valid);\n}\n\nexports.subschemaCode = subschemaCode;\n\nfunction schemaCxtHasRules(_ref2) {\n  var schema = _ref2.schema,\n      self = _ref2.self;\n  if (typeof schema == \"boolean\") return !schema;\n\n  for (var key in schema) {\n    if (self.RULES.all[key]) return true;\n  }\n\n  return false;\n}\n\nexports.schemaCxtHasRules = schemaCxtHasRules;\n\nfunction isSchemaObj(it) {\n  return typeof it.schema != \"boolean\";\n}\n\nfunction subSchemaObjCode(it, valid) {\n  var schema = it.schema,\n      gen = it.gen,\n      opts = it.opts;\n  if (opts.$comment && schema.$comment) commentKeyword(it);\n  updateContext(it);\n  checkAsync(it);\n  var errsCount = gen.const(\"_errs\", names_1.default.errors);\n  typeAndKeywords(it, errsCount); // TODO var\n\n  gen.var(valid, codegen_1._(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral([\"\", \" === \", \"\"])), errsCount, names_1.default.errors));\n}\n\nfunction checkKeywords(it) {\n  util_1.checkUnknownRules(it);\n  checkRefsAndKeywords(it);\n}\n\nfunction typeAndKeywords(it, errsCount) {\n  if (it.opts.jtd) return iterate_1.schemaKeywords(it, [], false, errsCount);\n  var types = dataType_1.getSchemaTypes(it.schema);\n  var checkedTypes = dataType_1.coerceAndCheckDataType(it, types);\n  iterate_1.schemaKeywords(it, types, !checkedTypes, errsCount);\n}\n\nfunction checkRefsAndKeywords(it) {\n  var schema = it.schema,\n      errSchemaPath = it.errSchemaPath,\n      opts = it.opts,\n      self = it.self;\n\n  if (schema.$ref && opts.ignoreKeywordsWithRef && util_1.schemaHasRulesButRef(schema, self.RULES)) {\n    self.logger.warn(\"$ref: keywords ignored in schema at path \\\"\".concat(errSchemaPath, \"\\\"\"));\n  }\n}\n\nfunction checkNoDefault(it) {\n  var schema = it.schema,\n      opts = it.opts;\n\n  if (schema.default !== undefined && opts.useDefaults && opts.strict) {\n    checkStrictMode(it, \"default is ignored in the schema root\");\n  }\n}\n\nfunction updateContext(it) {\n  if (it.schema.$id) it.baseId = resolve_1.resolveUrl(it.baseId, it.schema.$id);\n}\n\nfunction checkAsync(it) {\n  if (it.schema.$async && !it.schemaEnv.$async) throw new Error(\"async schema in sync schema\");\n}\n\nfunction commentKeyword(_ref3) {\n  var gen = _ref3.gen,\n      schemaEnv = _ref3.schemaEnv,\n      schema = _ref3.schema,\n      errSchemaPath = _ref3.errSchemaPath,\n      opts = _ref3.opts;\n  var msg = schema.$comment;\n\n  if (opts.$comment === true) {\n    gen.code(codegen_1._(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral([\"\", \".logger.log(\", \")\"])), names_1.default.self, msg));\n  } else if (typeof opts.$comment == \"function\") {\n    var schemaPath = codegen_1.str(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral([\"\", \"/$comment\"])), errSchemaPath);\n    var rootName = gen.scopeValue(\"root\", {\n      ref: schemaEnv.root\n    });\n    gen.code(codegen_1._(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral([\"\", \".opts.$comment(\", \", \", \", \", \".schema)\"])), names_1.default.self, msg, schemaPath, rootName));\n  }\n}\n\nfunction returnResults(it) {\n  var gen = it.gen,\n      schemaEnv = it.schemaEnv,\n      validateName = it.validateName,\n      ValidationError = it.ValidationError,\n      opts = it.opts;\n\n  if (schemaEnv.$async) {\n    // TODO assign unevaluated\n    gen.if(codegen_1._(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral([\"\", \" === 0\"])), names_1.default.errors), function () {\n      return gen.return(names_1.default.data);\n    }, function () {\n      return gen.throw(codegen_1._(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral([\"new \", \"(\", \")\"])), ValidationError, names_1.default.vErrors));\n    });\n  } else {\n    gen.assign(codegen_1._(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral([\"\", \".errors\"])), validateName), names_1.default.vErrors);\n    if (opts.unevaluated) assignEvaluated(it);\n    gen.return(codegen_1._(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral([\"\", \" === 0\"])), names_1.default.errors));\n  }\n}\n\nfunction assignEvaluated(_ref4) {\n  var gen = _ref4.gen,\n      evaluated = _ref4.evaluated,\n      props = _ref4.props,\n      items = _ref4.items;\n  if (props instanceof codegen_1.Name) gen.assign(codegen_1._(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral([\"\", \".props\"])), evaluated), props);\n  if (items instanceof codegen_1.Name) gen.assign(codegen_1._(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral([\"\", \".items\"])), evaluated), items);\n}\n\nfunction checkStrictMode(it, msg) {\n  var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : it.opts.strict;\n  if (!mode) return;\n  msg = \"strict mode: \".concat(msg);\n  if (mode === true) throw new Error(msg);\n  it.self.logger.warn(msg);\n}\n\nexports.checkStrictMode = checkStrictMode;","map":null,"metadata":{},"sourceType":"script"}