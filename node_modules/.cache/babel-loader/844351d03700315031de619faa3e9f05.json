{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar _objectSpread = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"util\");\n\nvar address_1 = require(\"../address\");\n\nvar utils_1 = require(\"../utils\");\n\nvar transaction_response_formatter_1 = require(\"./transaction-response-formatter\");\n\nfunction toRawBlockHeaderResponse(block) {\n  return {\n    hash: block.hash ? utils_1.bufferToHex(block.hash) : null,\n    parentHash: utils_1.bufferToHex(block.parentHash),\n    sha3Uncles: utils_1.bufferToHex(block.sha3Uncles),\n    miner: block.miner.toString(),\n    stateRoot: utils_1.bufferToHex(block.stateRoot),\n    transactionsRoot: utils_1.bufferToHex(block.transactionsRoot),\n    receiptsRoot: utils_1.bufferToHex(block.receiptsRoot),\n    logsBloom: block.logsBloom ? utils_1.bufferToHex(block.logsBloom) : null,\n    difficulty: utils_1.numberToHex(block.difficulty),\n    number: block.number ? utils_1.numberToHex(block.number) : null,\n    gasLimit: utils_1.numberToHex(block.gasLimit),\n    gasUsed: utils_1.numberToHex(block.gasUsed),\n    timestamp: utils_1.numberToHex(block.timestamp),\n    extraData: utils_1.bufferToHex(block.extraData),\n    nonce: block.nonce ? utils_1.bufferToHex(block.nonce) : null\n  };\n}\n\nexports.toRawBlockHeaderResponse = toRawBlockHeaderResponse;\n\nfunction toRawBlockResponse(block) {\n  return _objectSpread({}, toRawBlockHeaderResponse(block), {\n    totalDifficulty: utils_1.numberToHex(block.totalDifficulty),\n    size: utils_1.numberToHex(block.size),\n    transactions: block.transactions.map(function (tx) {\n      return Buffer.isBuffer(tx) ? utils_1.bufferToHex(tx) : transaction_response_formatter_1.toRawTransactionResponse(tx);\n    }),\n    uncles: block.uncles\n  });\n}\n\nexports.toRawBlockResponse = toRawBlockResponse;\n\nfunction fromRawBlockHeaderResponse(block) {\n  return {\n    hash: block.hash ? utils_1.hexToBuffer(block.hash) : null,\n    parentHash: utils_1.hexToBuffer(block.parentHash),\n    sha3Uncles: utils_1.hexToBuffer(block.sha3Uncles),\n    miner: address_1.Address.fromString(block.miner),\n    stateRoot: utils_1.hexToBuffer(block.stateRoot),\n    transactionsRoot: utils_1.hexToBuffer(block.transactionsRoot),\n    receiptsRoot: utils_1.hexToBuffer(block.receiptsRoot),\n    logsBloom: block.logsBloom ? utils_1.hexToBuffer(block.logsBloom) : null,\n    difficulty: utils_1.hexToNumberString(block.difficulty),\n    number: block.number ? utils_1.hexToNumber(block.number) : null,\n    gasLimit: utils_1.hexToNumber(block.gasLimit),\n    gasUsed: utils_1.hexToNumber(block.gasUsed),\n    timestamp: utils_1.hexToNumber(block.timestamp),\n    extraData: utils_1.hexToBuffer(block.extraData),\n    nonce: block.nonce ? utils_1.hexToBuffer(block.nonce) : null\n  };\n}\n\nexports.fromRawBlockHeaderResponse = fromRawBlockHeaderResponse;\n\nfunction fromRawBlockResponse(block) {\n  return _objectSpread({}, fromRawBlockHeaderResponse(block), {\n    totalDifficulty: utils_1.hexToNumberString(block.totalDifficulty),\n    size: utils_1.hexToNumber(block.size),\n    transactions: block.transactions.map(function (tx) {\n      return util_1.isString(tx) ? utils_1.hexToBuffer(tx) : transaction_response_formatter_1.fromRawTransactionResponse(tx);\n    }),\n    uncles: block.uncles\n  });\n}\n\nexports.fromRawBlockResponse = fromRawBlockResponse;","map":null,"metadata":{},"sourceType":"script"}