{"ast":null,"code":"import { DeviceType } from './InputDevices/deviceEnums';\n/**\r\n * This class will take all inputs from Keyboard, Pointer, and\r\n * any Gamepads and provide a polling system that all devices\r\n * will use.  This class assumes that there will only be one\r\n * pointer device and one keyboard.\r\n */\n\nvar DeviceInputSystem =\n/** @class */\nfunction () {\n  function DeviceInputSystem(engine) {\n    /**\r\n     * Callback to be triggered when a device is disconnected\r\n     */\n    this.onDeviceDisconnected = function () {}; // Private Members\n\n\n    this._inputs = [];\n    this._keyboardActive = false;\n    this._pointerActive = false;\n\n    this._keyboardDownEvent = function (evt) {};\n\n    this._keyboardUpEvent = function (evt) {};\n\n    this._pointerMoveEvent = function (evt) {};\n\n    this._pointerDownEvent = function (evt) {};\n\n    this._pointerUpEvent = function (evt) {};\n\n    this._gamepadConnectedEvent = function (evt) {};\n\n    this._gamepadDisconnectedEvent = function (evt) {};\n\n    this._onDeviceConnected = function () {};\n\n    var inputElement = engine.getInputElement();\n\n    if (inputElement) {\n      this._elementToAttachTo = inputElement;\n\n      this._handleKeyActions();\n\n      this._handlePointerActions();\n\n      this._handleGamepadActions(); // Check for devices that are already connected but aren't registered. Currently, only checks for gamepads and mouse\n\n\n      this._checkForConnectedDevices();\n    }\n  }\n\n  Object.defineProperty(DeviceInputSystem.prototype, \"onDeviceConnected\", {\n    /**\r\n     * Returns onDeviceConnected callback property\r\n     * @returns Callback with function to execute when a device is connected\r\n     */\n    get: function get() {\n      return this._onDeviceConnected;\n    },\n\n    /**\r\n     * Sets callback function when a device is connected and executes against all connected devices\r\n     * @param callback Function to execute when a device is connected\r\n     */\n    set: function set(callback) {\n      this._onDeviceConnected = callback; // Iterate through each active device and rerun new callback\n\n      for (var deviceType = 0; deviceType < this._inputs.length; deviceType++) {\n        if (this._inputs[deviceType]) {\n          for (var deviceSlot = 0; deviceSlot < this._inputs[deviceType].length; deviceSlot++) {\n            if (this._inputs[deviceType][deviceSlot]) {\n              this._onDeviceConnected(deviceType, deviceSlot);\n            }\n          }\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Creates a new DeviceInputSystem instance\r\n   * @param engine Engine to pull input element from\r\n   * @returns The new instance\r\n   */\n\n  DeviceInputSystem.Create = function (engine) {\n    // If running in Babylon Native, then defer to the native input system, which has the same public contract\n    if (typeof _native !== 'undefined' && _native.DeviceInputSystem) {\n      return new _native.DeviceInputSystem(engine);\n    }\n\n    return new DeviceInputSystem(engine);\n  }; // Public functions\n\n  /**\r\n   * Checks for current device input value, given an id and input index\r\n   * @param deviceName Id of connected device\r\n   * @param inputIndex Index of device input\r\n   * @returns Current value of input\r\n   */\n\n  /**\r\n   * Checks for current device input value, given an id and input index. Throws exception if requested device not initialized.\r\n   * @param deviceType Enum specifiying device type\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   * @param inputIndex Id of input to be checked\r\n   * @returns Current value of input\r\n   */\n\n\n  DeviceInputSystem.prototype.pollInput = function (deviceType, deviceSlot, inputIndex) {\n    var device = this._inputs[deviceType][deviceSlot];\n\n    if (!device) {\n      throw \"Unable to find device \" + DeviceType[deviceType];\n    }\n\n    this._updateDevice(deviceType, deviceSlot, inputIndex);\n\n    if (device[inputIndex] === undefined) {\n      throw \"Unable to find input \" + inputIndex + \" for device \" + DeviceType[deviceType] + \" in slot \" + deviceSlot;\n    }\n\n    return device[inputIndex];\n  };\n  /**\r\n   * Dispose of all the eventlisteners\r\n   */\n\n\n  DeviceInputSystem.prototype.dispose = function () {\n    // Keyboard Events\n    if (this._keyboardActive) {\n      window.removeEventListener(\"keydown\", this._keyboardDownEvent);\n      window.removeEventListener(\"keyup\", this._keyboardUpEvent);\n    } // Pointer Events\n\n\n    if (this._pointerActive) {\n      this._elementToAttachTo.removeEventListener(\"pointermove\", this._pointerMoveEvent);\n\n      this._elementToAttachTo.removeEventListener(\"pointerdown\", this._pointerDownEvent);\n\n      this._elementToAttachTo.removeEventListener(\"pointerup\", this._pointerUpEvent);\n    } // Gamepad Events\n\n\n    window.removeEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\n    window.removeEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\n  };\n  /**\r\n   * Checks for existing connections to devices and register them, if necessary\r\n   * Currently handles gamepads and mouse\r\n   */\n\n\n  DeviceInputSystem.prototype._checkForConnectedDevices = function () {\n    var gamepads = navigator.getGamepads();\n\n    for (var _i = 0, gamepads_1 = gamepads; _i < gamepads_1.length; _i++) {\n      var gamepad = gamepads_1[_i];\n\n      if (gamepad) {\n        this._addGamePad(gamepad);\n      }\n    } // If the device in use has mouse capabilities, pre-register mouse\n\n\n    if (matchMedia('(pointer:fine)').matches) {\n      // This will provide a dummy value for the cursor position and is expected to be overriden when the first mouse event happens.\n      // There isn't any good way to get the current position outside of a pointer event so that's why this was done.\n      this._addPointerDevice(DeviceType.Mouse, 0, 0, 0);\n    }\n  }; // Private functions\n\n  /**\r\n   * Add a gamepad to the DeviceInputSystem\r\n   * @param gamepad A single DOM Gamepad object\r\n   */\n\n\n  DeviceInputSystem.prototype._addGamePad = function (gamepad) {\n    var deviceType = this._getGamepadDeviceType(gamepad.id);\n\n    var deviceSlot = gamepad.index;\n\n    this._registerDevice(deviceType, deviceSlot, gamepad.buttons.length + gamepad.axes.length);\n\n    this._gamepads = this._gamepads || new Array(gamepad.index + 1);\n    this._gamepads[deviceSlot] = deviceType;\n  };\n  /**\r\n   * Add pointer device to DeviceInputSystem\r\n   * @param deviceType Type of Pointer to add\r\n   * @param deviceSlot Pointer ID (0 for mouse, pointerId for Touch)\r\n   * @param currentX Current X at point of adding\r\n   * @param currentY Current Y at point of adding\r\n   */\n\n\n  DeviceInputSystem.prototype._addPointerDevice = function (deviceType, deviceSlot, currentX, currentY) {\n    this._pointerActive = true;\n\n    this._registerDevice(deviceType, deviceSlot, DeviceInputSystem._MAX_POINTER_INPUTS);\n\n    var pointer = this._inputs[deviceType][deviceSlot];\n    /* initalize our pointer position immediately after registration */\n\n    pointer[0] = currentX;\n    pointer[1] = currentY;\n  };\n  /**\r\n   * Add device and inputs to device array\r\n   * @param deviceType Enum specifiying device type\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   * @param numberOfInputs Number of input entries to create for given device\r\n   */\n\n\n  DeviceInputSystem.prototype._registerDevice = function (deviceType, deviceSlot, numberOfInputs) {\n    if (!this._inputs[deviceType]) {\n      this._inputs[deviceType] = [];\n    }\n\n    if (!this._inputs[deviceType][deviceSlot]) {\n      var device = new Array(numberOfInputs);\n\n      for (var i = 0; i < numberOfInputs; i++) {\n        device[i] = 0;\n        /* set device input as unpressed */\n      }\n\n      this._inputs[deviceType][deviceSlot] = device;\n      this.onDeviceConnected(deviceType, deviceSlot);\n    }\n  };\n  /**\r\n   * Given a specific device name, remove that device from the device map\r\n   * @param deviceType Enum specifiying device type\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   */\n\n\n  DeviceInputSystem.prototype._unregisterDevice = function (deviceType, deviceSlot) {\n    if (this._inputs[deviceType][deviceSlot]) {\n      delete this._inputs[deviceType][deviceSlot];\n      this.onDeviceDisconnected(deviceType, deviceSlot);\n    }\n  };\n  /**\r\n   * Handle all actions that come from keyboard interaction\r\n   */\n\n\n  DeviceInputSystem.prototype._handleKeyActions = function () {\n    var _this = this;\n\n    this._keyboardDownEvent = function (evt) {\n      if (!_this._keyboardActive) {\n        _this._keyboardActive = true;\n\n        _this._registerDevice(DeviceType.Keyboard, 0, DeviceInputSystem._MAX_KEYCODES);\n      }\n\n      var kbKey = _this._inputs[DeviceType.Keyboard][0];\n\n      if (kbKey) {\n        if (_this.onInputChanged) {\n          _this.onInputChanged(DeviceType.Keyboard, 0, evt.keyCode, kbKey[evt.keyCode], 1);\n        }\n\n        kbKey[evt.keyCode] = 1;\n      }\n    };\n\n    this._keyboardUpEvent = function (evt) {\n      var kbKey = _this._inputs[DeviceType.Keyboard][0];\n\n      if (kbKey) {\n        if (_this.onInputChanged) {\n          _this.onInputChanged(DeviceType.Keyboard, 0, evt.keyCode, kbKey[evt.keyCode], 0);\n        }\n\n        kbKey[evt.keyCode] = 0;\n      }\n    };\n\n    window.addEventListener(\"keydown\", this._keyboardDownEvent);\n    window.addEventListener(\"keyup\", this._keyboardUpEvent);\n  };\n  /**\r\n   * Handle all actions that come from pointer interaction\r\n   */\n\n\n  DeviceInputSystem.prototype._handlePointerActions = function () {\n    var _this = this;\n\n    this._pointerMoveEvent = function (evt) {\n      var deviceType = evt.pointerType == \"mouse\" ? DeviceType.Mouse : DeviceType.Touch;\n      var deviceSlot = evt.pointerType == \"mouse\" ? 0 : evt.pointerId;\n\n      if (!_this._inputs[deviceType]) {\n        _this._inputs[deviceType] = [];\n      }\n\n      if (!_this._inputs[deviceType][deviceSlot]) {\n        _this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\n      }\n\n      var pointer = _this._inputs[deviceType][deviceSlot];\n\n      if (pointer) {\n        if (_this.onInputChanged) {\n          _this.onInputChanged(deviceType, deviceSlot, 0, pointer[0], evt.clientX);\n\n          _this.onInputChanged(deviceType, deviceSlot, 1, pointer[1], evt.clientY);\n        }\n\n        pointer[0] = evt.clientX;\n        pointer[1] = evt.clientY;\n      }\n    };\n\n    this._pointerDownEvent = function (evt) {\n      var deviceType = evt.pointerType == \"mouse\" ? DeviceType.Mouse : DeviceType.Touch;\n      var deviceSlot = evt.pointerType == \"mouse\" ? 0 : evt.pointerId;\n\n      if (!_this._inputs[deviceType]) {\n        _this._inputs[deviceType] = [];\n      }\n\n      if (!_this._inputs[deviceType][deviceSlot]) {\n        _this._addPointerDevice(deviceType, deviceSlot, evt.clientX, evt.clientY);\n      }\n\n      var pointer = _this._inputs[deviceType][deviceSlot];\n\n      if (pointer) {\n        if (_this.onInputChanged) {\n          _this.onInputChanged(deviceType, deviceSlot, 0, pointer[0], evt.clientX);\n\n          _this.onInputChanged(deviceType, deviceSlot, 1, pointer[1], evt.clientY);\n\n          _this.onInputChanged(deviceType, deviceSlot, evt.button + 2, pointer[evt.button + 2], 1);\n        }\n\n        pointer[0] = evt.clientX;\n        pointer[1] = evt.clientY;\n        pointer[evt.button + 2] = 1;\n      }\n    };\n\n    this._pointerUpEvent = function (evt) {\n      var deviceType = evt.pointerType == \"mouse\" ? DeviceType.Mouse : DeviceType.Touch;\n      var deviceSlot = evt.pointerType == \"mouse\" ? 0 : evt.pointerId;\n      var pointer = _this._inputs[deviceType][deviceSlot];\n\n      if (pointer) {\n        if (_this.onInputChanged) {\n          _this.onInputChanged(deviceType, deviceSlot, evt.button + 2, pointer[evt.button + 2], 0);\n        }\n\n        pointer[0] = evt.clientX;\n        pointer[1] = evt.clientY;\n        pointer[evt.button + 2] = 0;\n      } // We don't want to unregister the mouse because we may miss input data when a mouse is moving after a click\n\n\n      if (evt.pointerType != \"mouse\") {\n        _this._unregisterDevice(deviceType, deviceSlot);\n      }\n    };\n\n    this._elementToAttachTo.addEventListener(\"pointermove\", this._pointerMoveEvent);\n\n    this._elementToAttachTo.addEventListener(\"pointerdown\", this._pointerDownEvent);\n\n    this._elementToAttachTo.addEventListener(\"pointerup\", this._pointerUpEvent);\n  };\n  /**\r\n   * Handle all actions that come from gamepad interaction\r\n   */\n\n\n  DeviceInputSystem.prototype._handleGamepadActions = function () {\n    var _this = this;\n\n    this._gamepadConnectedEvent = function (evt) {\n      _this._addGamePad(evt.gamepad);\n    };\n\n    this._gamepadDisconnectedEvent = function (evt) {\n      if (_this._gamepads) {\n        var deviceType = _this._getGamepadDeviceType(evt.gamepad.id);\n\n        var deviceSlot = evt.gamepad.index;\n\n        _this._unregisterDevice(deviceType, deviceSlot);\n\n        delete _this._gamepads[deviceSlot];\n      }\n    };\n\n    window.addEventListener(\"gamepadconnected\", this._gamepadConnectedEvent);\n    window.addEventListener(\"gamepaddisconnected\", this._gamepadDisconnectedEvent);\n  };\n  /**\r\n   * Update all non-event based devices with each frame\r\n   * @param deviceType Enum specifiying device type\r\n   * @param deviceSlot \"Slot\" or index that device is referenced in\r\n   * @param inputIndex Id of input to be checked\r\n   */\n\n\n  DeviceInputSystem.prototype._updateDevice = function (deviceType, deviceSlot, inputIndex) {\n    // Gamepads\n    var gp = navigator.getGamepads()[deviceSlot];\n\n    if (gp && deviceType == this._gamepads[deviceSlot]) {\n      var device = this._inputs[deviceType][deviceSlot];\n\n      if (inputIndex >= gp.buttons.length) {\n        device[inputIndex] = gp.axes[inputIndex - gp.buttons.length].valueOf();\n      } else {\n        device[inputIndex] = gp.buttons[inputIndex].value;\n      }\n    }\n  };\n  /**\r\n   * Gets DeviceType from the device name\r\n   * @param deviceName Name of Device from DeviceInputSystem\r\n   * @returns DeviceType enum value\r\n   */\n\n\n  DeviceInputSystem.prototype._getGamepadDeviceType = function (deviceName) {\n    if (deviceName.indexOf(\"054c\") !== -1) {\n      // DualShock 4 Gamepad\n      return DeviceType.DualShock;\n    } else if (deviceName.indexOf(\"Xbox One\") !== -1 || deviceName.search(\"Xbox 360\") !== -1 || deviceName.search(\"xinput\") !== -1) {\n      // Xbox Gamepad\n      return DeviceType.Xbox;\n    } else if (deviceName.indexOf(\"057e\") !== -1) {\n      // Switch Gamepad\n      return DeviceType.Switch;\n    }\n\n    return DeviceType.Generic;\n  };\n\n  DeviceInputSystem._MAX_KEYCODES = 255;\n  DeviceInputSystem._MAX_POINTER_INPUTS = 7;\n  return DeviceInputSystem;\n}();\n\nexport { DeviceInputSystem };","map":null,"metadata":{},"sourceType":"module"}