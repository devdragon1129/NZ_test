{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../Misc/typeStore';\n/**\r\n * Block used to compute value of one parameter modulo another\r\n */\n\nvar ModBlock =\n/** @class */\nfunction (_super) {\n  __extends(ModBlock, _super);\n  /**\r\n   * Creates a new ModBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function ModBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n\n    _this.registerInput(\"left\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n\n    _this.registerInput(\"right\", NodeMaterialBlockConnectionPointTypes.AutoDetect);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.BasedOnInput);\n\n    _this._outputs[0]._typeConnectionSource = _this._inputs[0];\n\n    _this._linkConnectionTypes(0, 1);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  ModBlock.prototype.getClassName = function () {\n    return \"ModBlock\";\n  };\n\n  Object.defineProperty(ModBlock.prototype, \"left\", {\n    /**\r\n     * Gets the left operand input component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ModBlock.prototype, \"right\", {\n    /**\r\n     * Gets the right operand input component\r\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ModBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ModBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var output = this._outputs[0];\n    state.compilationString += this._declareOutput(output, state) + (\" = mod(\" + this.left.associatedVariableName + \", \" + this.right.associatedVariableName + \");\\r\\n\");\n    return this;\n  };\n\n  return ModBlock;\n}(NodeMaterialBlock);\n\nexport { ModBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.ModBlock\"] = ModBlock;","map":null,"metadata":{},"sourceType":"module"}