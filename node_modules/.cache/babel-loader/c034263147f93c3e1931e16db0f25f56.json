{"ast":null,"code":"import _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { addMappings } from './ISSUE-485';\nimport { INITIAL_STATE as DEPLOYMENT_INITIAL_STATE } from 'modules/deployment/reducer';\nimport { toProjectCloudSchema, addScale, addEntityName, addAssets, removeScriptSrc, sanitizeEntityName, sanitizeEntityName2, dedupeEntityName, replaceUserIdWithEthAddress } from './utils';\nexport var migrations = {\n  '2': function _(state) {\n    return _objectSpread({}, state, {\n      project: _objectSpread({}, state.project, {\n        loading: []\n      })\n    });\n  },\n  '3': function _(state) {\n    for (var _i = 0, _Object$values = Object.values(state && state.scene && state.scene.present && state.scene.present.data || {}); _i < _Object$values.length; _i++) {\n      var scene = _Object$values[_i];\n      // mutation ahead\n      addMappings(scene);\n    }\n\n    return state;\n  },\n  '4': function _(state) {\n    var shouldMigrateProjects = !!state.project && !!state.project.data;\n    /* tslint:disable */\n\n    return _objectSpread({}, state, {\n      project: shouldMigrateProjects ? _objectSpread({}, state.project, {\n        data: Object.keys(state.project.data).reduce(function (data, id) {\n          data[id] = toProjectCloudSchema(state.project.data[id]);\n          return data;\n        }, {})\n      }) : state.project\n    });\n    /* tslint:enable */\n  },\n  '5': function _(state) {\n    for (var _i2 = 0, _Object$values2 = Object.values(state && state.scene && state.scene.present && state.scene.present.data || {}); _i2 < _Object$values2.length; _i2++) {\n      var scene = _Object$values2[_i2];\n      // mutation ahead\n      addScale(scene);\n    }\n\n    return state;\n  },\n  '6': function _(state) {\n    for (var sceneId in state.scene.present.data) {\n      var scene = state.scene.present.data[sceneId];\n      addEntityName(scene);\n    }\n\n    return state;\n  },\n  '7': function _(state) {\n    for (var sceneId in state.scene.present.data) {\n      var scene = state.scene.present.data[sceneId];\n      addAssets(scene);\n    }\n\n    return state;\n  },\n  '8': function _(state) {\n    for (var sceneId in state.scene.present.data) {\n      var scene = state.scene.present.data[sceneId];\n      removeScriptSrc(scene);\n    }\n\n    return state;\n  },\n  '9': function _(state) {\n    for (var sceneId in state.scene.present.data) {\n      var scene = state.scene.present.data[sceneId];\n      sanitizeEntityName(scene);\n    }\n\n    return state;\n  },\n  '10': function _(state) {\n    for (var sceneId in state.scene.present.data) {\n      var scene = state.scene.present.data[sceneId];\n      sanitizeEntityName2(scene);\n    }\n\n    return state;\n  },\n  '11': function _(state) {\n    for (var sceneId in state.scene.present.data) {\n      var scene = state.scene.present.data[sceneId];\n      dedupeEntityName(scene);\n    }\n\n    return state;\n  },\n  '12': function _(state) {\n    for (var projectId in state.project.data) {\n      var project = state.project.data[projectId];\n      replaceUserIdWithEthAddress(project);\n    }\n\n    return state;\n  },\n  '13': function _(state) {\n    // auth0 migration\n    var needsMigration = !!(state && state.ui && state.ui.dashboard && state.ui.dashboard.didSync);\n\n    if (needsMigration) {\n      state.ui.dashboard.needsMigration = needsMigration;\n    }\n\n    return state;\n  },\n  '14': function _(state) {\n    // remove deployments from local storage, since now we always fetch them from the catalyst\n    var isDirty = !!(state.deployment && state.deployment.data && Object.keys(state.deployment.data).length > 0);\n\n    if (isDirty) {\n      state.deployment = DEPLOYMENT_INITIAL_STATE;\n    }\n\n    return state;\n  }\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/migrations/store.ts"],"names":["addMappings","INITIAL_STATE","DEPLOYMENT_INITIAL_STATE","toProjectCloudSchema","addScale","addEntityName","addAssets","removeScriptSrc","sanitizeEntityName","sanitizeEntityName2","dedupeEntityName","replaceUserIdWithEthAddress","migrations","state","project","loading","Object","values","scene","present","data","shouldMigrateProjects","keys","reduce","id","sceneId","projectId","needsMigration","ui","dashboard","didSync","isDirty","deployment","length"],"mappings":"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","sourcesContent":["import { addMappings } from './ISSUE-485'\nimport { RootState } from 'modules/common/types'\nimport { DataByKey } from 'decentraland-dapps/dist/lib/types'\nimport { Project } from 'modules/project/types'\nimport { INITIAL_STATE as DEPLOYMENT_INITIAL_STATE } from 'modules/deployment/reducer'\nimport {\n  toProjectCloudSchema,\n  addScale,\n  addEntityName,\n  addAssets,\n  removeScriptSrc,\n  sanitizeEntityName,\n  sanitizeEntityName2,\n  dedupeEntityName,\n  replaceUserIdWithEthAddress\n} from './utils'\n\nexport const migrations = {\n  '2': (state: RootState) => {\n    return {\n      ...state,\n      project: {\n        ...state.project,\n        loading: []\n      }\n    }\n  },\n  '3': (state: RootState) => {\n    for (const scene of Object.values((state && state.scene && state.scene.present && state.scene.present.data) || {})) {\n      // mutation ahead\n      addMappings(scene)\n    }\n    return state\n  },\n  '4': (state: RootState) => {\n    const shouldMigrateProjects = !!state.project && !!state.project.data\n    /* tslint:disable */\n    return {\n      ...state,\n      project: shouldMigrateProjects\n        ? {\n            ...state.project,\n            data: Object.keys(state.project.data).reduce<DataByKey<Project>>((data, id) => {\n              data[id] = toProjectCloudSchema(state.project.data[id])\n              return data\n            }, {})\n          }\n        : state.project\n    }\n    /* tslint:enable */\n  },\n  '5': (state: RootState) => {\n    for (const scene of Object.values((state && state.scene && state.scene.present && state.scene.present.data) || {})) {\n      // mutation ahead\n      addScale(scene)\n    }\n    return state\n  },\n  '6': (state: RootState) => {\n    for (let sceneId in state.scene.present.data) {\n      const scene = state.scene.present.data[sceneId]\n      addEntityName(scene)\n    }\n\n    return state\n  },\n  '7': (state: RootState) => {\n    for (let sceneId in state.scene.present.data) {\n      const scene = state.scene.present.data[sceneId]\n      addAssets(scene)\n    }\n    return state\n  },\n  '8': (state: RootState) => {\n    for (let sceneId in state.scene.present.data) {\n      const scene = state.scene.present.data[sceneId]\n      removeScriptSrc(scene)\n    }\n    return state\n  },\n  '9': (state: RootState) => {\n    for (let sceneId in state.scene.present.data) {\n      const scene = state.scene.present.data[sceneId]\n      sanitizeEntityName(scene)\n    }\n    return state\n  },\n  '10': (state: RootState) => {\n    for (let sceneId in state.scene.present.data) {\n      const scene = state.scene.present.data[sceneId]\n      sanitizeEntityName2(scene)\n    }\n    return state\n  },\n  '11': (state: RootState) => {\n    for (let sceneId in state.scene.present.data) {\n      const scene = state.scene.present.data[sceneId]\n      dedupeEntityName(scene)\n    }\n    return state\n  },\n  '12': (state: RootState) => {\n    for (let projectId in state.project.data) {\n      const project = state.project.data[projectId]\n      replaceUserIdWithEthAddress(project)\n    }\n    return state\n  },\n  '13': (state: RootState) => {\n    // auth0 migration\n    const needsMigration = !!(state && state.ui && state.ui.dashboard && state.ui.dashboard.didSync)\n    if (needsMigration) {\n      state.ui.dashboard.needsMigration = needsMigration\n    }\n    return state\n  },\n  '14': (state: RootState) => {\n    // remove deployments from local storage, since now we always fetch them from the catalyst\n    const isDirty = !!(state.deployment && state.deployment.data && Object.keys(state.deployment.data).length > 0)\n    if (isDirty) {\n      state.deployment = DEPLOYMENT_INITIAL_STATE\n    }\n    return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}