{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handlerForNetwork = void 0;\n\nvar address_1 = require(\"web3x/address\");\n\nvar eth_1 = require(\"web3x/eth\");\n\nvar providers_1 = require(\"web3x/providers\");\n\nvar Catalyst_1 = require(\"./Catalyst\");\n\nvar networks = {\n  ropsten: {\n    wss: 'wss://ropsten.infura.io/ws/v3/2c902c2e3b8947d3b34bba7ca48635fc',\n    http: 'https://ropsten.infura.io/v3/2c902c2e3b8947d3b34bba7ca48635fc',\n    contracts: {\n      catalyst: {\n        address: '0xadd085f2318e9678bbb18b3e0711328f902b374b',\n        class: Catalyst_1.Catalyst\n      }\n    }\n  },\n  mainnet: {\n    wss: 'wss://mainnet.infura.io/ws/v3/2c902c2e3b8947d3b34bba7ca48635fc',\n    http: 'https://mainnet.infura.io/v3/2c902c2e3b8947d3b34bba7ca48635fc',\n    contracts: {\n      catalyst: {\n        address: '0x4a2f10076101650f40342885b99b6b101d83c486',\n        class: Catalyst_1.Catalyst\n      }\n    }\n  }\n};\n\nfunction handlerForNetwork(networkKey, contractKey) {\n  try {\n    var provider = httpProviderForNetwork(networkKey);\n    var eth = new eth_1.Eth(provider);\n    var network = networks[networkKey];\n    var contract = network.contracts[contractKey];\n    var address = address_1.Address.fromString(contract.address);\n    var contractInstance = new contract.class(eth, address);\n    return {\n      provider: provider,\n      network: network,\n      contract: contractInstance\n    };\n  } catch (error) {\n    return undefined;\n  }\n}\n\nexports.handlerForNetwork = handlerForNetwork;\n\nfunction httpProviderForNetwork(networkKey) {\n  var network = networks[networkKey];\n  var url = network.http;\n  return new providers_1.HttpProvider(url);\n}","map":null,"metadata":{},"sourceType":"script"}