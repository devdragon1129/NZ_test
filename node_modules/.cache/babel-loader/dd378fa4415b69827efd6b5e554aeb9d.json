{"ast":null,"code":"import { SmartArrayNoDuplicate } from \"../../Misc/smartArray\";\nimport { OctreeBlock } from \"./octreeBlock\";\n/**\r\n * Octrees are a really powerful data structure that can quickly select entities based on space coordinates.\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\r\n */\n\nvar Octree =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a octree\r\n   * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\r\n   * @param creationFunc function to be used to instatiate the octree\r\n   * @param maxBlockCapacity defines the maximum number of meshes you want on your octree's leaves (default: 64)\r\n   * @param maxDepth defines the maximum depth (sub-levels) for your octree. Default value is 2, which means 8 8 8 = 512 blocks :) (This parameter takes precedence over capacity.)\r\n   */\n  function Octree(creationFunc, maxBlockCapacity,\n  /** Defines the maximum depth (sub-levels) for your octree. Default value is 2, which means 8 8 8 = 512 blocks :) (This parameter takes precedence over capacity.) */\n  maxDepth) {\n    if (maxDepth === void 0) {\n      maxDepth = 2;\n    }\n\n    this.maxDepth = maxDepth;\n    /**\r\n     * Content stored in the octree\r\n     */\n\n    this.dynamicContent = new Array();\n    this._maxBlockCapacity = maxBlockCapacity || 64;\n    this._selectionContent = new SmartArrayNoDuplicate(1024);\n    this._creationFunc = creationFunc;\n  } // Methods\n\n  /**\r\n   * Updates the octree by adding blocks for the passed in meshes within the min and max world parameters\r\n   * @param worldMin worldMin for the octree blocks var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\r\n   * @param worldMax worldMax for the octree blocks var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2);\r\n   * @param entries meshes to be added to the octree blocks\r\n   */\n\n\n  Octree.prototype.update = function (worldMin, worldMax, entries) {\n    OctreeBlock._CreateBlocks(worldMin, worldMax, entries, this._maxBlockCapacity, 0, this.maxDepth, this, this._creationFunc);\n  };\n  /**\r\n   * Adds a mesh to the octree\r\n   * @param entry Mesh to add to the octree\r\n   */\n\n\n  Octree.prototype.addMesh = function (entry) {\n    for (var index = 0; index < this.blocks.length; index++) {\n      var block = this.blocks[index];\n      block.addEntry(entry);\n    }\n  };\n  /**\r\n   * Remove an element from the octree\r\n   * @param entry defines the element to remove\r\n   */\n\n\n  Octree.prototype.removeMesh = function (entry) {\n    for (var index = 0; index < this.blocks.length; index++) {\n      var block = this.blocks[index];\n      block.removeEntry(entry);\n    }\n  };\n  /**\r\n   * Selects an array of meshes within the frustum\r\n   * @param frustumPlanes The frustum planes to use which will select all meshes within it\r\n   * @param allowDuplicate If duplicate objects are allowed in the resulting object array\r\n   * @returns array of meshes within the frustum\r\n   */\n\n\n  Octree.prototype.select = function (frustumPlanes, allowDuplicate) {\n    this._selectionContent.reset();\n\n    for (var index = 0; index < this.blocks.length; index++) {\n      var block = this.blocks[index];\n      block.select(frustumPlanes, this._selectionContent, allowDuplicate);\n    }\n\n    if (allowDuplicate) {\n      this._selectionContent.concat(this.dynamicContent);\n    } else {\n      this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\n    }\n\n    return this._selectionContent;\n  };\n  /**\r\n   * Test if the octree intersect with the given bounding sphere and if yes, then add its content to the selection array\r\n   * @param sphereCenter defines the bounding sphere center\r\n   * @param sphereRadius defines the bounding sphere radius\r\n   * @param allowDuplicate defines if the selection array can contains duplicated entries\r\n   * @returns an array of objects that intersect the sphere\r\n   */\n\n\n  Octree.prototype.intersects = function (sphereCenter, sphereRadius, allowDuplicate) {\n    this._selectionContent.reset();\n\n    for (var index = 0; index < this.blocks.length; index++) {\n      var block = this.blocks[index];\n      block.intersects(sphereCenter, sphereRadius, this._selectionContent, allowDuplicate);\n    }\n\n    if (allowDuplicate) {\n      this._selectionContent.concat(this.dynamicContent);\n    } else {\n      this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\n    }\n\n    return this._selectionContent;\n  };\n  /**\r\n  * Test if the octree intersect with the given ray and if yes, then add its content to resulting array\r\n   * @param ray defines the ray to test with\r\n   * @returns array of intersected objects\r\n   */\n\n\n  Octree.prototype.intersectsRay = function (ray) {\n    this._selectionContent.reset();\n\n    for (var index = 0; index < this.blocks.length; index++) {\n      var block = this.blocks[index];\n      block.intersectsRay(ray, this._selectionContent);\n    }\n\n    this._selectionContent.concatWithNoDuplicate(this.dynamicContent);\n\n    return this._selectionContent;\n  };\n  /**\r\n   * Adds a mesh into the octree block if it intersects the block\r\n   */\n\n\n  Octree.CreationFuncForMeshes = function (entry, block) {\n    var boundingInfo = entry.getBoundingInfo();\n\n    if (!entry.isBlocked && boundingInfo.boundingBox.intersectsMinMax(block.minPoint, block.maxPoint)) {\n      block.entries.push(entry);\n    }\n  };\n  /**\r\n   * Adds a submesh into the octree block if it intersects the block\r\n   */\n\n\n  Octree.CreationFuncForSubMeshes = function (entry, block) {\n    var boundingInfo = entry.getBoundingInfo();\n\n    if (boundingInfo.boundingBox.intersectsMinMax(block.minPoint, block.maxPoint)) {\n      block.entries.push(entry);\n    }\n  };\n\n  return Octree;\n}();\n\nexport { Octree };","map":null,"metadata":{},"sourceType":"module"}