{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Observable } from \"../Misc/observable\";\nimport { ArcRotateCamera } from \"../Cameras/arcRotateCamera\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Color3, Color4 } from '../Maths/math.color';\nimport { Mesh } from \"../Meshes/mesh\";\nimport { BaseTexture } from \"../Materials/Textures/baseTexture\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { MirrorTexture } from \"../Materials/Textures/mirrorTexture\";\nimport { CubeTexture } from \"../Materials/Textures/cubeTexture\";\nimport { BackgroundMaterial } from \"../Materials/Background/backgroundMaterial\";\nimport \"../Meshes/Builders/planeBuilder\";\nimport \"../Meshes/Builders/boxBuilder\";\nimport { Plane } from '../Maths/math.plane';\n/**\r\n * The Environment helper class can be used to add a fully featuread none expensive background to your scene.\r\n * It includes by default a skybox and a ground relying on the BackgroundMaterial.\r\n * It also helps with the default setup of your imageProcessing configuration.\r\n */\n\nvar EnvironmentHelper =\n/** @class */\nfunction () {\n  /**\r\n   * constructor\r\n   * @param options Defines the options we want to customize the helper\r\n   * @param scene The scene to add the material to\r\n   */\n  function EnvironmentHelper(options, scene) {\n    var _this = this;\n\n    this._errorHandler = function (message, exception) {\n      _this.onErrorObservable.notifyObservers({\n        message: message,\n        exception: exception\n      });\n    };\n\n    this._options = __assign(__assign({}, EnvironmentHelper._getDefaultOptions()), options);\n    this._scene = scene;\n    this.onErrorObservable = new Observable();\n\n    this._setupBackground();\n\n    this._setupImageProcessing();\n  }\n  /**\r\n   * Creates the default options for the helper.\r\n   */\n\n\n  EnvironmentHelper._getDefaultOptions = function () {\n    return {\n      createGround: true,\n      groundSize: 15,\n      groundTexture: this._groundTextureCDNUrl,\n      groundColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\n      groundOpacity: 0.9,\n      enableGroundShadow: true,\n      groundShadowLevel: 0.5,\n      enableGroundMirror: false,\n      groundMirrorSizeRatio: 0.3,\n      groundMirrorBlurKernel: 64,\n      groundMirrorAmount: 1,\n      groundMirrorFresnelWeight: 1,\n      groundMirrorFallOffDistance: 0,\n      groundMirrorTextureType: 0,\n      groundYBias: 0.00001,\n      createSkybox: true,\n      skyboxSize: 20,\n      skyboxTexture: this._skyboxTextureCDNUrl,\n      skyboxColor: new Color3(0.2, 0.2, 0.3).toLinearSpace().scale(3),\n      backgroundYRotation: 0,\n      sizeAuto: true,\n      rootPosition: Vector3.Zero(),\n      setupImageProcessing: true,\n      environmentTexture: this._environmentTextureCDNUrl,\n      cameraExposure: 0.8,\n      cameraContrast: 1.2,\n      toneMappingEnabled: true\n    };\n  };\n\n  Object.defineProperty(EnvironmentHelper.prototype, \"rootMesh\", {\n    /**\r\n     * Gets the root mesh created by the helper.\r\n     */\n    get: function get() {\n      return this._rootMesh;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"skybox\", {\n    /**\r\n     * Gets the skybox created by the helper.\r\n     */\n    get: function get() {\n      return this._skybox;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"skyboxTexture\", {\n    /**\r\n     * Gets the skybox texture created by the helper.\r\n     */\n    get: function get() {\n      return this._skyboxTexture;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"skyboxMaterial\", {\n    /**\r\n     * Gets the skybox material created by the helper.\r\n     */\n    get: function get() {\n      return this._skyboxMaterial;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"ground\", {\n    /**\r\n     * Gets the ground mesh created by the helper.\r\n     */\n    get: function get() {\n      return this._ground;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"groundTexture\", {\n    /**\r\n     * Gets the ground texture created by the helper.\r\n     */\n    get: function get() {\n      return this._groundTexture;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"groundMirror\", {\n    /**\r\n     * Gets the ground mirror created by the helper.\r\n     */\n    get: function get() {\n      return this._groundMirror;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"groundMirrorRenderList\", {\n    /**\r\n     * Gets the ground mirror render list to helps pushing the meshes\r\n     * you wish in the ground reflection.\r\n     */\n    get: function get() {\n      if (this._groundMirror) {\n        return this._groundMirror.renderList;\n      }\n\n      return null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EnvironmentHelper.prototype, \"groundMaterial\", {\n    /**\r\n     * Gets the ground material created by the helper.\r\n     */\n    get: function get() {\n      return this._groundMaterial;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Updates the background according to the new options\r\n   * @param options\r\n   */\n\n  EnvironmentHelper.prototype.updateOptions = function (options) {\n    var newOptions = __assign(__assign({}, this._options), options);\n\n    if (this._ground && !newOptions.createGround) {\n      this._ground.dispose();\n\n      this._ground = null;\n    }\n\n    if (this._groundMaterial && !newOptions.createGround) {\n      this._groundMaterial.dispose();\n\n      this._groundMaterial = null;\n    }\n\n    if (this._groundTexture) {\n      if (this._options.groundTexture != newOptions.groundTexture) {\n        this._groundTexture.dispose();\n\n        this._groundTexture = null;\n      }\n    }\n\n    if (this._skybox && !newOptions.createSkybox) {\n      this._skybox.dispose();\n\n      this._skybox = null;\n    }\n\n    if (this._skyboxMaterial && !newOptions.createSkybox) {\n      this._skyboxMaterial.dispose();\n\n      this._skyboxMaterial = null;\n    }\n\n    if (this._skyboxTexture) {\n      if (this._options.skyboxTexture != newOptions.skyboxTexture) {\n        this._skyboxTexture.dispose();\n\n        this._skyboxTexture = null;\n      }\n    }\n\n    if (this._groundMirror && !newOptions.enableGroundMirror) {\n      this._groundMirror.dispose();\n\n      this._groundMirror = null;\n    }\n\n    if (this._scene.environmentTexture) {\n      if (this._options.environmentTexture != newOptions.environmentTexture) {\n        this._scene.environmentTexture.dispose();\n      }\n    }\n\n    this._options = newOptions;\n\n    this._setupBackground();\n\n    this._setupImageProcessing();\n  };\n  /**\r\n   * Sets the primary color of all the available elements.\r\n   * @param color the main color to affect to the ground and the background\r\n   */\n\n\n  EnvironmentHelper.prototype.setMainColor = function (color) {\n    if (this.groundMaterial) {\n      this.groundMaterial.primaryColor = color;\n    }\n\n    if (this.skyboxMaterial) {\n      this.skyboxMaterial.primaryColor = color;\n    }\n\n    if (this.groundMirror) {\n      this.groundMirror.clearColor = new Color4(color.r, color.g, color.b, 1.0);\n    }\n  };\n  /**\r\n   * Setup the image processing according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupImageProcessing = function () {\n    if (this._options.setupImageProcessing) {\n      this._scene.imageProcessingConfiguration.contrast = this._options.cameraContrast;\n      this._scene.imageProcessingConfiguration.exposure = this._options.cameraExposure;\n      this._scene.imageProcessingConfiguration.toneMappingEnabled = this._options.toneMappingEnabled;\n\n      this._setupEnvironmentTexture();\n    }\n  };\n  /**\r\n   * Setup the environment texture according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupEnvironmentTexture = function () {\n    if (this._scene.environmentTexture) {\n      return;\n    }\n\n    if (this._options.environmentTexture instanceof BaseTexture) {\n      this._scene.environmentTexture = this._options.environmentTexture;\n      return;\n    }\n\n    var environmentTexture = CubeTexture.CreateFromPrefilteredData(this._options.environmentTexture, this._scene);\n    this._scene.environmentTexture = environmentTexture;\n  };\n  /**\r\n   * Setup the background according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupBackground = function () {\n    if (!this._rootMesh) {\n      this._rootMesh = new Mesh(\"BackgroundHelper\", this._scene);\n    }\n\n    this._rootMesh.rotation.y = this._options.backgroundYRotation;\n\n    var sceneSize = this._getSceneSize();\n\n    if (this._options.createGround) {\n      this._setupGround(sceneSize);\n\n      this._setupGroundMaterial();\n\n      this._setupGroundDiffuseTexture();\n\n      if (this._options.enableGroundMirror) {\n        this._setupGroundMirrorTexture(sceneSize);\n      }\n\n      this._setupMirrorInGroundMaterial();\n    }\n\n    if (this._options.createSkybox) {\n      this._setupSkybox(sceneSize);\n\n      this._setupSkyboxMaterial();\n\n      this._setupSkyboxReflectionTexture();\n    }\n\n    this._rootMesh.position.x = sceneSize.rootPosition.x;\n    this._rootMesh.position.z = sceneSize.rootPosition.z;\n    this._rootMesh.position.y = sceneSize.rootPosition.y;\n  };\n  /**\r\n   * Get the scene sizes according to the setup.\r\n   */\n\n\n  EnvironmentHelper.prototype._getSceneSize = function () {\n    var _this = this;\n\n    var groundSize = this._options.groundSize;\n    var skyboxSize = this._options.skyboxSize;\n    var rootPosition = this._options.rootPosition;\n\n    if (!this._scene.meshes || this._scene.meshes.length === 1) {\n      // 1 only means the root of the helper.\n      return {\n        groundSize: groundSize,\n        skyboxSize: skyboxSize,\n        rootPosition: rootPosition\n      };\n    }\n\n    var sceneExtends = this._scene.getWorldExtends(function (mesh) {\n      return mesh !== _this._ground && mesh !== _this._rootMesh && mesh !== _this._skybox;\n    });\n\n    var sceneDiagonal = sceneExtends.max.subtract(sceneExtends.min);\n\n    if (this._options.sizeAuto) {\n      if (this._scene.activeCamera instanceof ArcRotateCamera && this._scene.activeCamera.upperRadiusLimit) {\n        groundSize = this._scene.activeCamera.upperRadiusLimit * 2;\n        skyboxSize = groundSize;\n      }\n\n      var sceneDiagonalLenght = sceneDiagonal.length();\n\n      if (sceneDiagonalLenght > groundSize) {\n        groundSize = sceneDiagonalLenght * 2;\n        skyboxSize = groundSize;\n      } // 10 % bigger.\n\n\n      groundSize *= 1.1;\n      skyboxSize *= 1.5;\n      rootPosition = sceneExtends.min.add(sceneDiagonal.scale(0.5));\n      rootPosition.y = sceneExtends.min.y - this._options.groundYBias;\n    }\n\n    return {\n      groundSize: groundSize,\n      skyboxSize: skyboxSize,\n      rootPosition: rootPosition\n    };\n  };\n  /**\r\n   * Setup the ground according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupGround = function (sceneSize) {\n    var _this = this;\n\n    if (!this._ground || this._ground.isDisposed()) {\n      this._ground = Mesh.CreatePlane(\"BackgroundPlane\", sceneSize.groundSize, this._scene);\n      this._ground.rotation.x = Math.PI / 2; // Face up by default.\n\n      this._ground.parent = this._rootMesh;\n\n      this._ground.onDisposeObservable.add(function () {\n        _this._ground = null;\n      });\n    }\n\n    this._ground.receiveShadows = this._options.enableGroundShadow;\n  };\n  /**\r\n   * Setup the ground material according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupGroundMaterial = function () {\n    if (!this._groundMaterial) {\n      this._groundMaterial = new BackgroundMaterial(\"BackgroundPlaneMaterial\", this._scene);\n    }\n\n    this._groundMaterial.alpha = this._options.groundOpacity;\n    this._groundMaterial.alphaMode = 8;\n    this._groundMaterial.shadowLevel = this._options.groundShadowLevel;\n    this._groundMaterial.primaryColor = this._options.groundColor;\n    this._groundMaterial.useRGBColor = false;\n    this._groundMaterial.enableNoise = true;\n\n    if (this._ground) {\n      this._ground.material = this._groundMaterial;\n    }\n  };\n  /**\r\n   * Setup the ground diffuse texture according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupGroundDiffuseTexture = function () {\n    if (!this._groundMaterial) {\n      return;\n    }\n\n    if (this._groundTexture) {\n      return;\n    }\n\n    if (this._options.groundTexture instanceof BaseTexture) {\n      this._groundMaterial.diffuseTexture = this._options.groundTexture;\n      return;\n    }\n\n    this._groundTexture = new Texture(this._options.groundTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\n    this._groundTexture.gammaSpace = false;\n    this._groundTexture.hasAlpha = true;\n    this._groundMaterial.diffuseTexture = this._groundTexture;\n  };\n  /**\r\n   * Setup the ground mirror texture according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupGroundMirrorTexture = function (sceneSize) {\n    var wrapping = Texture.CLAMP_ADDRESSMODE;\n\n    if (!this._groundMirror) {\n      this._groundMirror = new MirrorTexture(\"BackgroundPlaneMirrorTexture\", {\n        ratio: this._options.groundMirrorSizeRatio\n      }, this._scene, false, this._options.groundMirrorTextureType, Texture.BILINEAR_SAMPLINGMODE, true);\n      this._groundMirror.mirrorPlane = new Plane(0, -1, 0, sceneSize.rootPosition.y);\n      this._groundMirror.anisotropicFilteringLevel = 1;\n      this._groundMirror.wrapU = wrapping;\n      this._groundMirror.wrapV = wrapping;\n      this._groundMirror.gammaSpace = false;\n\n      if (this._groundMirror.renderList) {\n        for (var i = 0; i < this._scene.meshes.length; i++) {\n          var mesh = this._scene.meshes[i];\n\n          if (mesh !== this._ground && mesh !== this._skybox && mesh !== this._rootMesh) {\n            this._groundMirror.renderList.push(mesh);\n          }\n        }\n      }\n    }\n\n    this._groundMirror.clearColor = new Color4(this._options.groundColor.r, this._options.groundColor.g, this._options.groundColor.b, 1);\n    this._groundMirror.adaptiveBlurKernel = this._options.groundMirrorBlurKernel;\n  };\n  /**\r\n   * Setup the ground to receive the mirror texture.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupMirrorInGroundMaterial = function () {\n    if (this._groundMaterial) {\n      this._groundMaterial.reflectionTexture = this._groundMirror;\n      this._groundMaterial.reflectionFresnel = true;\n      this._groundMaterial.reflectionAmount = this._options.groundMirrorAmount;\n      this._groundMaterial.reflectionStandardFresnelWeight = this._options.groundMirrorFresnelWeight;\n      this._groundMaterial.reflectionFalloffDistance = this._options.groundMirrorFallOffDistance;\n    }\n  };\n  /**\r\n   * Setup the skybox according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupSkybox = function (sceneSize) {\n    var _this = this;\n\n    if (!this._skybox || this._skybox.isDisposed()) {\n      this._skybox = Mesh.CreateBox(\"BackgroundSkybox\", sceneSize.skyboxSize, this._scene, undefined, Mesh.BACKSIDE);\n\n      this._skybox.onDisposeObservable.add(function () {\n        _this._skybox = null;\n      });\n    }\n\n    this._skybox.parent = this._rootMesh;\n  };\n  /**\r\n   * Setup the skybox material according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupSkyboxMaterial = function () {\n    if (!this._skybox) {\n      return;\n    }\n\n    if (!this._skyboxMaterial) {\n      this._skyboxMaterial = new BackgroundMaterial(\"BackgroundSkyboxMaterial\", this._scene);\n    }\n\n    this._skyboxMaterial.useRGBColor = false;\n    this._skyboxMaterial.primaryColor = this._options.skyboxColor;\n    this._skyboxMaterial.enableNoise = true;\n    this._skybox.material = this._skyboxMaterial;\n  };\n  /**\r\n   * Setup the skybox reflection texture according to the specified options.\r\n   */\n\n\n  EnvironmentHelper.prototype._setupSkyboxReflectionTexture = function () {\n    if (!this._skyboxMaterial) {\n      return;\n    }\n\n    if (this._skyboxTexture) {\n      return;\n    }\n\n    if (this._options.skyboxTexture instanceof BaseTexture) {\n      this._skyboxMaterial.reflectionTexture = this._options.skyboxTexture;\n      return;\n    }\n\n    this._skyboxTexture = new CubeTexture(this._options.skyboxTexture, this._scene, undefined, undefined, undefined, undefined, this._errorHandler);\n    this._skyboxTexture.coordinatesMode = Texture.SKYBOX_MODE;\n    this._skyboxTexture.gammaSpace = false;\n    this._skyboxMaterial.reflectionTexture = this._skyboxTexture;\n  };\n  /**\r\n   * Dispose all the elements created by the Helper.\r\n   */\n\n\n  EnvironmentHelper.prototype.dispose = function () {\n    if (this._groundMaterial) {\n      this._groundMaterial.dispose(true, true);\n    }\n\n    if (this._skyboxMaterial) {\n      this._skyboxMaterial.dispose(true, true);\n    }\n\n    this._rootMesh.dispose(false);\n  };\n  /**\r\n   * Default ground texture URL.\r\n   */\n\n\n  EnvironmentHelper._groundTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundGround.png\";\n  /**\r\n   * Default skybox texture URL.\r\n   */\n\n  EnvironmentHelper._skyboxTextureCDNUrl = \"https://assets.babylonjs.com/environments/backgroundSkybox.dds\";\n  /**\r\n   * Default environment texture URL.\r\n   */\n\n  EnvironmentHelper._environmentTextureCDNUrl = \"https://assets.babylonjs.com/environments/environmentSpecular.env\";\n  return EnvironmentHelper;\n}();\n\nexport { EnvironmentHelper };","map":null,"metadata":{},"sourceType":"module"}