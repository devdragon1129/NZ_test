{"ast":null,"code":"import { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial\";\nimport { GLTFLoader } from \"../glTFLoader\";\nvar NAME = \"KHR_materials_clearcoat\";\n/**\r\n * [Specification](https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_materials_clearcoat/README.md)\r\n * [Playground Sample](https://www.babylonjs-playground.com/frame.html#7F7PN6#8)\r\n */\n\nvar KHR_materials_clearcoat =\n/** @class */\nfunction () {\n  /** @hidden */\n  function KHR_materials_clearcoat(loader) {\n    /**\r\n     * The name of this extension.\r\n     */\n    this.name = NAME;\n    /**\r\n     * Defines a number that determines the order the extensions are applied.\r\n     */\n\n    this.order = 190;\n    this._loader = loader;\n    this.enabled = this._loader.isExtensionUsed(NAME);\n  }\n  /** @hidden */\n\n\n  KHR_materials_clearcoat.prototype.dispose = function () {\n    this._loader = null;\n  };\n  /** @hidden */\n\n\n  KHR_materials_clearcoat.prototype.loadMaterialPropertiesAsync = function (context, material, babylonMaterial) {\n    var _this = this;\n\n    return GLTFLoader.LoadExtensionAsync(context, material, this.name, function (extensionContext, extension) {\n      var promises = new Array();\n      promises.push(_this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial));\n      promises.push(_this._loadClearCoatPropertiesAsync(extensionContext, extension, babylonMaterial));\n      return Promise.all(promises).then(function () {});\n    });\n  };\n\n  KHR_materials_clearcoat.prototype._loadClearCoatPropertiesAsync = function (context, properties, babylonMaterial) {\n    if (!(babylonMaterial instanceof PBRMaterial)) {\n      throw new Error(context + \": Material type not supported\");\n    }\n\n    var promises = new Array();\n    babylonMaterial.clearCoat.isEnabled = true;\n    babylonMaterial.clearCoat.useRoughnessFromMainTexture = false;\n    babylonMaterial.clearCoat.remapF0OnInterfaceChange = false;\n\n    if (properties.clearcoatFactor != undefined) {\n      babylonMaterial.clearCoat.intensity = properties.clearcoatFactor;\n    } else {\n      babylonMaterial.clearCoat.intensity = 0;\n    }\n\n    if (properties.clearcoatTexture) {\n      promises.push(this._loader.loadTextureInfoAsync(context + \"/clearcoatTexture\", properties.clearcoatTexture, function (texture) {\n        texture.name = babylonMaterial.name + \" (ClearCoat Intensity)\";\n        babylonMaterial.clearCoat.texture = texture;\n      }));\n    }\n\n    if (properties.clearcoatRoughnessFactor != undefined) {\n      babylonMaterial.clearCoat.roughness = properties.clearcoatRoughnessFactor;\n    } else {\n      babylonMaterial.clearCoat.roughness = 0;\n    }\n\n    if (properties.clearcoatRoughnessTexture) {\n      properties.clearcoatRoughnessTexture.nonColorData = true;\n      promises.push(this._loader.loadTextureInfoAsync(context + \"/clearcoatRoughnessTexture\", properties.clearcoatRoughnessTexture, function (texture) {\n        texture.name = babylonMaterial.name + \" (ClearCoat Roughness)\";\n        babylonMaterial.clearCoat.textureRoughness = texture;\n      }));\n    }\n\n    if (properties.clearcoatNormalTexture) {\n      properties.clearcoatNormalTexture.nonColorData = true;\n      promises.push(this._loader.loadTextureInfoAsync(context + \"/clearcoatNormalTexture\", properties.clearcoatNormalTexture, function (texture) {\n        texture.name = babylonMaterial.name + \" (ClearCoat Normal)\";\n        babylonMaterial.clearCoat.bumpTexture = texture;\n      }));\n      babylonMaterial.invertNormalMapX = !babylonMaterial.getScene().useRightHandedSystem;\n      babylonMaterial.invertNormalMapY = babylonMaterial.getScene().useRightHandedSystem;\n\n      if (properties.clearcoatNormalTexture.scale != undefined) {\n        babylonMaterial.clearCoat.bumpTexture.level = properties.clearcoatNormalTexture.scale;\n      }\n    }\n\n    return Promise.all(promises).then(function () {});\n  };\n\n  return KHR_materials_clearcoat;\n}();\n\nexport { KHR_materials_clearcoat };\nGLTFLoader.RegisterExtension(NAME, function (loader) {\n  return new KHR_materials_clearcoat(loader);\n});","map":null,"metadata":{},"sourceType":"module"}