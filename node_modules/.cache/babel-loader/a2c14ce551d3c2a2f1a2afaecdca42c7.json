{"ast":null,"code":"import _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(mediaSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleTakePictures),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(takeEditorScreenshot);\n\nimport { select, delay, put, call, takeLatest } from 'redux-saga/effects';\nimport { getCurrentProject } from 'modules/project/selectors';\nimport { dataURLToBlob } from 'modules/media/utils';\nimport { PARCEL_SIZE } from 'modules/project/constants';\nimport { RECORD_MEDIA_REQUEST, recordMediaProgress, recordMediaSuccess } from './actions';\nimport { setSelectedEntities } from 'modules/editor/actions';\nvar editorWindow = window;\nvar Rotation = {\n  NORTH: Math.PI / 2,\n  EAST: 0,\n  SOUTH: Math.PI * 1.5,\n  WEST: Math.PI\n};\nexport function mediaSaga() {\n  return _regeneratorRuntime.wrap(function mediaSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeLatest(RECORD_MEDIA_REQUEST, handleTakePictures);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function handleTakePictures() {\n  var project, _project$layout, rows, cols, side, zoom, canvas, previewAngle, screenshots, preview;\n\n  return _regeneratorRuntime.wrap(function handleTakePictures$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return select(getCurrentProject);\n\n        case 2:\n          project = _context2.sent;\n\n          if (project) {\n            _context2.next = 5;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 5:\n          _project$layout = project.layout, rows = _project$layout.rows, cols = _project$layout.cols;\n          _context2.next = 8;\n          return put(setSelectedEntities([]));\n\n        case 8:\n          side = Math.max(cols, rows);\n          zoom = (side - 1) * 32;\n          _context2.next = 12;\n          return call(function () {\n            return editorWindow.editor.getDCLCanvas();\n          });\n\n        case 12:\n          canvas = _context2.sent;\n          previewAngle = Math.PI / 1.5;\n          screenshots = {\n            north: null,\n            east: null,\n            south: null,\n            west: null\n          };\n          // Prepare the canvas for recording\n          canvas.classList.add('recording');\n          editorWindow.editor.resetCameraZoom();\n          _context2.next = 19;\n          return delay(200);\n\n        case 19:\n          // big scenes need some extra time to reset the camera\n          // Prepare the camera to fit the scene\n          editorWindow.editor.setCameraZoomDelta(zoom);\n          editorWindow.editor.setCameraRotation(0, Math.PI / 6);\n          editorWindow.editor.setCameraPosition({\n            x: rows * PARCEL_SIZE / 2,\n            y: 2,\n            z: cols * PARCEL_SIZE / 2\n          });\n          _context2.next = 24;\n          return put(recordMediaProgress(0));\n\n        case 24:\n          _context2.next = 26;\n          return takeEditorScreenshot(Rotation.NORTH);\n\n        case 26:\n          screenshots.north = _context2.sent;\n          _context2.next = 29;\n          return put(recordMediaProgress(20));\n\n        case 29:\n          _context2.next = 31;\n          return takeEditorScreenshot(Rotation.EAST);\n\n        case 31:\n          screenshots.east = _context2.sent;\n          _context2.next = 34;\n          return put(recordMediaProgress(40));\n\n        case 34:\n          _context2.next = 36;\n          return takeEditorScreenshot(Rotation.SOUTH);\n\n        case 36:\n          screenshots.south = _context2.sent;\n          _context2.next = 39;\n          return put(recordMediaProgress(60));\n\n        case 39:\n          _context2.next = 41;\n          return takeEditorScreenshot(Rotation.WEST);\n\n        case 41:\n          screenshots.west = _context2.sent;\n          _context2.next = 44;\n          return put(recordMediaProgress(80));\n\n        case 44:\n          _context2.next = 46;\n          return takeEditorScreenshot(previewAngle);\n\n        case 46:\n          preview = _context2.sent;\n          _context2.next = 49;\n          return put(recordMediaProgress(100));\n\n        case 49:\n          // Cleanup\n          canvas.classList.remove('recording');\n          _context2.next = 52;\n          return put(recordMediaSuccess(_objectSpread({}, screenshots, {\n            preview: preview\n          })));\n\n        case 52:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction takeEditorScreenshot(angle) {\n  var screenshot;\n  return _regeneratorRuntime.wrap(function takeEditorScreenshot$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          editorWindow.editor.setCameraRotation(angle, Math.PI / 6);\n          _context3.next = 3;\n          return call(function () {\n            return editorWindow.editor.takeScreenshot();\n          });\n\n        case 3:\n          screenshot = _context3.sent;\n          return _context3.abrupt(\"return\", dataURLToBlob(screenshot));\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/media/sagas.ts"],"names":["mediaSaga","handleTakePictures","takeEditorScreenshot","select","delay","put","call","takeLatest","getCurrentProject","dataURLToBlob","PARCEL_SIZE","RECORD_MEDIA_REQUEST","recordMediaProgress","recordMediaSuccess","setSelectedEntities","editorWindow","window","Rotation","NORTH","Math","PI","EAST","SOUTH","WEST","project","layout","rows","cols","side","max","zoom","editor","getDCLCanvas","canvas","previewAngle","screenshots","north","east","south","west","classList","add","resetCameraZoom","setCameraZoomDelta","setCameraRotation","setCameraPosition","x","y","z","preview","remove","angle","takeScreenshot","screenshot"],"mappings":"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","sourcesContent":["import { select, delay, put, call, takeLatest } from 'redux-saga/effects'\nimport { Omit } from 'decentraland-dapps/dist/lib/types'\nimport { getCurrentProject } from 'modules/project/selectors'\nimport { dataURLToBlob } from 'modules/media/utils'\nimport { PARCEL_SIZE } from 'modules/project/constants'\nimport { Project } from 'modules/project/types'\nimport { EditorWindow } from 'components/Preview/Preview.types'\nimport { RECORD_MEDIA_REQUEST, recordMediaProgress, recordMediaSuccess } from './actions'\nimport { RawMedia } from './types'\nimport { setSelectedEntities } from 'modules/editor/actions'\n\nconst editorWindow = window as EditorWindow\n\nconst Rotation = {\n  NORTH: Math.PI / 2,\n  EAST: 0,\n  SOUTH: Math.PI * 1.5,\n  WEST: Math.PI\n}\n\nexport function* mediaSaga() {\n  yield takeLatest(RECORD_MEDIA_REQUEST, handleTakePictures)\n}\n\nexport function* handleTakePictures() {\n  const project: Project | null = yield select(getCurrentProject)\n  if (!project) return\n\n  const { rows, cols } = project.layout\n\n  yield put(setSelectedEntities([]))\n\n  const side = Math.max(cols, rows)\n  const zoom = (side - 1) * 32\n  const canvas: HTMLCanvasElement = yield call(() => editorWindow.editor.getDCLCanvas())\n  const previewAngle = Math.PI / 1.5\n  const screenshots: Omit<RawMedia, 'preview'> = {\n    north: null,\n    east: null,\n    south: null,\n    west: null\n  }\n\n  let preview: Blob | null\n\n  // Prepare the canvas for recording\n  canvas.classList.add('recording')\n  editorWindow.editor.resetCameraZoom()\n  yield delay(200) // big scenes need some extra time to reset the camera\n\n  // Prepare the camera to fit the scene\n  editorWindow.editor.setCameraZoomDelta(zoom)\n  editorWindow.editor.setCameraRotation(0, Math.PI / 6)\n  editorWindow.editor.setCameraPosition({ x: (rows * PARCEL_SIZE) / 2, y: 2, z: (cols * PARCEL_SIZE) / 2 })\n\n  yield put(recordMediaProgress(0))\n  screenshots.north = yield takeEditorScreenshot(Rotation.NORTH)\n  yield put(recordMediaProgress(20))\n  screenshots.east = yield takeEditorScreenshot(Rotation.EAST)\n  yield put(recordMediaProgress(40))\n  screenshots.south = yield takeEditorScreenshot(Rotation.SOUTH)\n  yield put(recordMediaProgress(60))\n  screenshots.west = yield takeEditorScreenshot(Rotation.WEST)\n  yield put(recordMediaProgress(80))\n  preview = yield takeEditorScreenshot(previewAngle)\n  yield put(recordMediaProgress(100))\n\n  // Cleanup\n  canvas.classList.remove('recording')\n\n  yield put(recordMediaSuccess({ ...screenshots, preview }))\n}\n\nfunction* takeEditorScreenshot(angle: number) {\n  editorWindow.editor.setCameraRotation(angle, Math.PI / 6)\n  const screenshot: string = yield call(() => editorWindow.editor.takeScreenshot())\n  return dataURLToBlob(screenshot)\n}\n"]},"metadata":{},"sourceType":"module"}