{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar _objectWithoutProperties = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar providers_1 = require(\"../providers\");\n\nvar eth_request_payloads_1 = require(\"./eth-request-payloads\");\n\nvar send_tx_1 = require(\"./send-tx\");\n\nvar logs_1 = require(\"./subscriptions/logs\");\n\nvar new_heads_1 = require(\"./subscriptions/new-heads\");\n\nvar new_pending_transactions_1 = require(\"./subscriptions/new-pending-transactions\");\n\nvar syncing_1 = require(\"./subscriptions/syncing\");\n\nvar Eth = /*#__PURE__*/function () {\n  function Eth(provider) {\n    _classCallCheck(this, Eth);\n\n    this.provider = provider;\n    this.request = new eth_request_payloads_1.EthRequestPayloads(undefined, 'latest');\n  }\n\n  _createClass(Eth, [{\n    key: \"send\",\n    value: function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var method, params, format;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                method = _ref.method, params = _ref.params, format = _ref.format;\n                _context.t0 = format;\n                _context.next = 4;\n                return this.provider.send(method, params);\n\n              case 4:\n                _context.t1 = _context.sent;\n                return _context.abrupt(\"return\", (0, _context.t0)(_context.t1));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function send(_x) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n  }, {\n    key: \"getId\",\n    value: function () {\n      var _getId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.send(this.request.getId());\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getId() {\n        return _getId.apply(this, arguments);\n      }\n\n      return getId;\n    }()\n  }, {\n    key: \"getNodeInfo\",\n    value: function () {\n      var _getNodeInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.send(this.request.getNodeInfo());\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getNodeInfo() {\n        return _getNodeInfo.apply(this, arguments);\n      }\n\n      return getNodeInfo;\n    }()\n  }, {\n    key: \"getProtocolVersion\",\n    value: function () {\n      var _getProtocolVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.send(this.request.getProtocolVersion());\n\n              case 2:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getProtocolVersion() {\n        return _getProtocolVersion.apply(this, arguments);\n      }\n\n      return getProtocolVersion;\n    }()\n  }, {\n    key: \"getCoinbase\",\n    value: function () {\n      var _getCoinbase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.send(this.request.getCoinbase());\n\n              case 2:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getCoinbase() {\n        return _getCoinbase.apply(this, arguments);\n      }\n\n      return getCoinbase;\n    }()\n  }, {\n    key: \"isMining\",\n    value: function () {\n      var _isMining = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.send(this.request.isMining());\n\n              case 2:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function isMining() {\n        return _isMining.apply(this, arguments);\n      }\n\n      return isMining;\n    }()\n  }, {\n    key: \"getHashrate\",\n    value: function () {\n      var _getHashrate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.send(this.request.getHashrate());\n\n              case 2:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getHashrate() {\n        return _getHashrate.apply(this, arguments);\n      }\n\n      return getHashrate;\n    }()\n  }, {\n    key: \"isSyncing\",\n    value: function () {\n      var _isSyncing = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.send(this.request.isSyncing());\n\n              case 2:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function isSyncing() {\n        return _isSyncing.apply(this, arguments);\n      }\n\n      return isSyncing;\n    }()\n  }, {\n    key: \"getGasPrice\",\n    value: function () {\n      var _getGasPrice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.send(this.request.getGasPrice());\n\n              case 2:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getGasPrice() {\n        return _getGasPrice.apply(this, arguments);\n      }\n\n      return getGasPrice;\n    }()\n  }, {\n    key: \"getAccounts\",\n    value: function () {\n      var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.send(this.request.getAccounts());\n\n              case 2:\n                return _context10.abrupt(\"return\", _context10.sent);\n\n              case 3:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getAccounts() {\n        return _getAccounts.apply(this, arguments);\n      }\n\n      return getAccounts;\n    }()\n  }, {\n    key: \"getBlockNumber\",\n    value: function () {\n      var _getBlockNumber = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.send(this.request.getBlockNumber());\n\n              case 2:\n                return _context11.abrupt(\"return\", _context11.sent);\n\n              case 3:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getBlockNumber() {\n        return _getBlockNumber.apply(this, arguments);\n      }\n\n      return getBlockNumber;\n    }()\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(address, block) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.send(this.request.getBalance(address, block));\n\n              case 2:\n                return _context12.abrupt(\"return\", _context12.sent);\n\n              case 3:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getBalance(_x2, _x3) {\n        return _getBalance.apply(this, arguments);\n      }\n\n      return getBalance;\n    }()\n  }, {\n    key: \"getStorageAt\",\n    value: function () {\n      var _getStorageAt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(address, position, block) {\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.send(this.request.getStorageAt(address, position, block));\n\n              case 2:\n                return _context13.abrupt(\"return\", _context13.sent);\n\n              case 3:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getStorageAt(_x4, _x5, _x6) {\n        return _getStorageAt.apply(this, arguments);\n      }\n\n      return getStorageAt;\n    }()\n  }, {\n    key: \"getCode\",\n    value: function () {\n      var _getCode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(address, block) {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.send(this.request.getCode(address, block));\n\n              case 2:\n                return _context14.abrupt(\"return\", _context14.sent);\n\n              case 3:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getCode(_x7, _x8) {\n        return _getCode.apply(this, arguments);\n      }\n\n      return getCode;\n    }()\n  }, {\n    key: \"getBlock\",\n    value: function () {\n      var _getBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(block, returnTxs) {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.send(this.request.getBlock(block, returnTxs));\n\n              case 2:\n                return _context15.abrupt(\"return\", _context15.sent);\n\n              case 3:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function getBlock(_x9, _x10) {\n        return _getBlock.apply(this, arguments);\n      }\n\n      return getBlock;\n    }()\n  }, {\n    key: \"getUncle\",\n    value: function () {\n      var _getUncle = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(block, uncleIndex, returnTxs) {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.send(this.request.getUncle(block, uncleIndex, returnTxs));\n\n              case 2:\n                return _context16.abrupt(\"return\", _context16.sent);\n\n              case 3:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function getUncle(_x11, _x12, _x13) {\n        return _getUncle.apply(this, arguments);\n      }\n\n      return getUncle;\n    }()\n  }, {\n    key: \"getBlockTransactionCount\",\n    value: function () {\n      var _getBlockTransactionCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(block) {\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.send(this.request.getBlockTransactionCount(block));\n\n              case 2:\n                return _context17.abrupt(\"return\", _context17.sent);\n\n              case 3:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function getBlockTransactionCount(_x14) {\n        return _getBlockTransactionCount.apply(this, arguments);\n      }\n\n      return getBlockTransactionCount;\n    }()\n  }, {\n    key: \"getBlockUncleCount\",\n    value: function () {\n      var _getBlockUncleCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(block) {\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.send(this.request.getBlockUncleCount(block));\n\n              case 2:\n                return _context18.abrupt(\"return\", _context18.sent);\n\n              case 3:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function getBlockUncleCount(_x15) {\n        return _getBlockUncleCount.apply(this, arguments);\n      }\n\n      return getBlockUncleCount;\n    }()\n  }, {\n    key: \"getTransaction\",\n    value: function () {\n      var _getTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(hash) {\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this.send(this.request.getTransaction(hash));\n\n              case 2:\n                return _context19.abrupt(\"return\", _context19.sent);\n\n              case 3:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function getTransaction(_x16) {\n        return _getTransaction.apply(this, arguments);\n      }\n\n      return getTransaction;\n    }()\n  }, {\n    key: \"getTransactionFromBlock\",\n    value: function () {\n      var _getTransactionFromBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(block, index) {\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this.send(this.request.getTransactionFromBlock(block, index));\n\n              case 2:\n                return _context20.abrupt(\"return\", _context20.sent);\n\n              case 3:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function getTransactionFromBlock(_x17, _x18) {\n        return _getTransactionFromBlock.apply(this, arguments);\n      }\n\n      return getTransactionFromBlock;\n    }()\n  }, {\n    key: \"getTransactionReceipt\",\n    value: function () {\n      var _getTransactionReceipt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(txHash) {\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this.send(this.request.getTransactionReceipt(txHash));\n\n              case 2:\n                return _context21.abrupt(\"return\", _context21.sent);\n\n              case 3:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function getTransactionReceipt(_x19) {\n        return _getTransactionReceipt.apply(this, arguments);\n      }\n\n      return getTransactionReceipt;\n    }()\n  }, {\n    key: \"getTransactionCount\",\n    value: function () {\n      var _getTransactionCount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(address, block) {\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this.send(this.request.getTransactionCount(address, block));\n\n              case 2:\n                return _context22.abrupt(\"return\", _context22.sent);\n\n              case 3:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function getTransactionCount(_x20, _x21) {\n        return _getTransactionCount.apply(this, arguments);\n      }\n\n      return getTransactionCount;\n    }()\n  }, {\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(tx) {\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return this.send(this.request.signTransaction(tx));\n\n              case 2:\n                return _context23.abrupt(\"return\", _context23.sent);\n\n              case 3:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function signTransaction(_x22) {\n        return _signTransaction.apply(this, arguments);\n      }\n\n      return signTransaction;\n    }()\n  }, {\n    key: \"sendSignedTransaction\",\n    value: function sendSignedTransaction(data) {\n      var _this$request$sendSig = this.request.sendSignedTransaction(data),\n          method = _this$request$sendSig.method,\n          params = _this$request$sendSig.params;\n\n      var txHashPromise = this.provider.send(method, params);\n      return new send_tx_1.SentTransaction(this, txHashPromise);\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(tx) {\n      var _this = this;\n\n      var promise = new Promise( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(resolve, reject) {\n          var account, _this$request$sendTra, method, params, format, txHash, from, fromlessTx, signedTx, _this$request$sendSig2, _method, _params, _format, _txHash;\n\n          return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n            while (1) {\n              switch (_context24.prev = _context24.next) {\n                case 0:\n                  _context24.prev = 0;\n\n                  if (tx.gasPrice) {\n                    _context24.next = 5;\n                    break;\n                  }\n\n                  _context24.next = 4;\n                  return _this.getGasPrice();\n\n                case 4:\n                  tx.gasPrice = _context24.sent;\n\n                case 5:\n                  account = _this.getAccount(tx.from);\n\n                  if (account) {\n                    _context24.next = 16;\n                    break;\n                  }\n\n                  _this$request$sendTra = _this.request.sendTransaction(tx), method = _this$request$sendTra.method, params = _this$request$sendTra.params, format = _this$request$sendTra.format;\n                  _context24.t0 = format;\n                  _context24.next = 11;\n                  return _this.provider.send(method, params);\n\n                case 11:\n                  _context24.t1 = _context24.sent;\n                  txHash = (0, _context24.t0)(_context24.t1);\n                  resolve(txHash);\n                  _context24.next = 27;\n                  break;\n\n                case 16:\n                  from = tx.from, fromlessTx = _objectWithoutProperties(tx, [\"from\"]);\n                  _context24.next = 19;\n                  return account.signTransaction(fromlessTx, _this);\n\n                case 19:\n                  signedTx = _context24.sent;\n                  _this$request$sendSig2 = _this.request.sendSignedTransaction(signedTx.rawTransaction), _method = _this$request$sendSig2.method, _params = _this$request$sendSig2.params, _format = _this$request$sendSig2.format;\n                  _context24.t2 = _format;\n                  _context24.next = 24;\n                  return _this.provider.send(_method, _params);\n\n                case 24:\n                  _context24.t3 = _context24.sent;\n                  _txHash = (0, _context24.t2)(_context24.t3);\n                  resolve(_txHash);\n\n                case 27:\n                  _context24.next = 32;\n                  break;\n\n                case 29:\n                  _context24.prev = 29;\n                  _context24.t4 = _context24[\"catch\"](0);\n                  reject(_context24.t4);\n\n                case 32:\n                case \"end\":\n                  return _context24.stop();\n              }\n            }\n          }, _callee24, null, [[0, 29]]);\n        }));\n\n        return function (_x23, _x24) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n      return new send_tx_1.SentTransaction(this, promise);\n    }\n  }, {\n    key: \"getAccount\",\n    value: function getAccount(address) {\n      address = address || this.defaultFromAddress;\n\n      if (this.wallet && address) {\n        return this.wallet.get(address);\n      }\n    }\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(address, dataToSign) {\n        var account, sig;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                account = this.getAccount(address);\n\n                if (account) {\n                  _context25.next = 7;\n                  break;\n                }\n\n                _context25.next = 4;\n                return this.send(this.request.sign(address, dataToSign));\n\n              case 4:\n                return _context25.abrupt(\"return\", _context25.sent);\n\n              case 7:\n                sig = account.sign(dataToSign);\n                return _context25.abrupt(\"return\", sig.signature);\n\n              case 9:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function sign(_x25, _x26) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"signTypedData\",\n    value: function () {\n      var _signTypedData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(address, dataToSign) {\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.next = 2;\n                return this.send(this.request.signTypedData(address, dataToSign));\n\n              case 2:\n                return _context26.abrupt(\"return\", _context26.sent);\n\n              case 3:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function signTypedData(_x27, _x28) {\n        return _signTypedData.apply(this, arguments);\n      }\n\n      return signTypedData;\n    }()\n  }, {\n    key: \"call\",\n    value: function () {\n      var _call = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(tx, block) {\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                _context27.next = 2;\n                return this.send(this.request.call(tx, block));\n\n              case 2:\n                return _context27.abrupt(\"return\", _context27.sent);\n\n              case 3:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function call(_x29, _x30) {\n        return _call.apply(this, arguments);\n      }\n\n      return call;\n    }()\n  }, {\n    key: \"estimateGas\",\n    value: function () {\n      var _estimateGas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(tx) {\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                _context28.next = 2;\n                return this.send(this.request.estimateGas(tx));\n\n              case 2:\n                return _context28.abrupt(\"return\", _context28.sent);\n\n              case 3:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n\n      function estimateGas(_x31) {\n        return _estimateGas.apply(this, arguments);\n      }\n\n      return estimateGas;\n    }()\n  }, {\n    key: \"submitWork\",\n    value: function () {\n      var _submitWork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(nonce, powHash, digest) {\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                _context29.next = 2;\n                return this.send(this.request.submitWork(nonce, powHash, digest));\n\n              case 2:\n                return _context29.abrupt(\"return\", _context29.sent);\n\n              case 3:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n\n      function submitWork(_x32, _x33, _x34) {\n        return _submitWork.apply(this, arguments);\n      }\n\n      return submitWork;\n    }()\n  }, {\n    key: \"getWork\",\n    value: function () {\n      var _getWork = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30() {\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                _context30.next = 2;\n                return this.send(this.request.getWork());\n\n              case 2:\n                return _context30.abrupt(\"return\", _context30.sent);\n\n              case 3:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n\n      function getWork() {\n        return _getWork.apply(this, arguments);\n      }\n\n      return getWork;\n    }()\n  }, {\n    key: \"getPastLogs\",\n    value: function () {\n      var _getPastLogs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(options) {\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                _context31.next = 2;\n                return this.send(this.request.getPastLogs(options));\n\n              case 2:\n                return _context31.abrupt(\"return\", _context31.sent);\n\n              case 3:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n\n      function getPastLogs(_x35) {\n        return _getPastLogs.apply(this, arguments);\n      }\n\n      return getPastLogs;\n    }()\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(type) {\n      switch (type) {\n        case 'logs':\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          return logs_1.subscribeForLogs.apply(logs_1, [this].concat(args));\n\n        case 'syncing':\n          return syncing_1.subscribeForSyncing(this.provider);\n\n        case 'newBlockHeaders':\n          return new_heads_1.subscribeForNewHeads(this.provider);\n\n        case 'pendingTransactions':\n          return new_pending_transactions_1.subscribeForNewPendingTransactions(this.provider);\n\n        default:\n          throw new Error(\"Unknown subscription type: \".concat(type));\n      }\n    }\n  }, {\n    key: \"defaultFromAddress\",\n    get: function get() {\n      return this.request.defaultFromAddress;\n    },\n    set: function set(address) {\n      this.request.defaultFromAddress = address;\n    }\n  }], [{\n    key: \"fromCurrentProvider\",\n    value: function fromCurrentProvider() {\n      if (typeof web3 === 'undefined') {\n        return;\n      }\n\n      var provider = web3.currentProvider || web3.ethereumProvider;\n\n      if (!provider) {\n        return;\n      }\n\n      return new Eth(new providers_1.LegacyProviderAdapter(provider));\n    }\n  }]);\n\n  return Eth;\n}();\n\nexports.Eth = Eth;","map":null,"metadata":{},"sourceType":"script"}