{"ast":null,"code":"import { NodeMaterialBlockConnectionPointTypes } from './Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from './Enums/nodeMaterialBlockTargets';\nimport { Effect } from '../effect';\nimport { StringTools } from '../../Misc/stringTools';\n/**\r\n * Class used to store node based material build state\r\n */\n\nvar NodeMaterialBuildState =\n/** @class */\nfunction () {\n  function NodeMaterialBuildState() {\n    /** Gets or sets a boolean indicating if the current state can emit uniform buffers */\n    this.supportUniformBuffers = false;\n    /**\r\n     * Gets the list of emitted attributes\r\n     */\n\n    this.attributes = new Array();\n    /**\r\n     * Gets the list of emitted uniforms\r\n     */\n\n    this.uniforms = new Array();\n    /**\r\n    * Gets the list of emitted constants\r\n    */\n\n    this.constants = new Array();\n    /**\r\n     * Gets the list of emitted samplers\r\n     */\n\n    this.samplers = new Array();\n    /**\r\n     * Gets the list of emitted functions\r\n     */\n\n    this.functions = {};\n    /**\r\n     * Gets the list of emitted extensions\r\n     */\n\n    this.extensions = {};\n    /**\r\n     * Gets the list of emitted counters\r\n     */\n\n    this.counters = {};\n    /** @hidden */\n\n    this._attributeDeclaration = \"\";\n    /** @hidden */\n\n    this._uniformDeclaration = \"\";\n    /** @hidden */\n\n    this._constantDeclaration = \"\";\n    /** @hidden */\n\n    this._samplerDeclaration = \"\";\n    /** @hidden */\n\n    this._varyingTransfer = \"\";\n    /** @hidden */\n\n    this._injectAtEnd = \"\";\n    this._repeatableContentAnchorIndex = 0;\n    /** @hidden */\n\n    this._builtCompilationString = \"\";\n    /**\r\n     * Gets the emitted compilation strings\r\n     */\n\n    this.compilationString = \"\";\n  }\n  /**\r\n   * Finalize the compilation strings\r\n   * @param state defines the current compilation state\r\n   */\n\n\n  NodeMaterialBuildState.prototype.finalize = function (state) {\n    var emitComments = state.sharedData.emitComments;\n    var isFragmentMode = this.target === NodeMaterialBlockTargets.Fragment;\n    this.compilationString = \"\\r\\n\" + (emitComments ? \"//Entry point\\r\\n\" : \"\") + \"void main(void) {\\r\\n\" + this.compilationString;\n\n    if (this._constantDeclaration) {\n      this.compilationString = \"\\r\\n\" + (emitComments ? \"//Constants\\r\\n\" : \"\") + this._constantDeclaration + \"\\r\\n\" + this.compilationString;\n    }\n\n    var functionCode = \"\";\n\n    for (var functionName in this.functions) {\n      functionCode += this.functions[functionName] + \"\\r\\n\";\n    }\n\n    this.compilationString = \"\\r\\n\" + functionCode + \"\\r\\n\" + this.compilationString;\n\n    if (!isFragmentMode && this._varyingTransfer) {\n      this.compilationString = this.compilationString + \"\\r\\n\" + this._varyingTransfer;\n    }\n\n    if (this._injectAtEnd) {\n      this.compilationString = this.compilationString + \"\\r\\n\" + this._injectAtEnd;\n    }\n\n    this.compilationString = this.compilationString + \"\\r\\n}\";\n\n    if (this.sharedData.varyingDeclaration) {\n      this.compilationString = \"\\r\\n\" + (emitComments ? \"//Varyings\\r\\n\" : \"\") + this.sharedData.varyingDeclaration + \"\\r\\n\" + this.compilationString;\n    }\n\n    if (this._samplerDeclaration) {\n      this.compilationString = \"\\r\\n\" + (emitComments ? \"//Samplers\\r\\n\" : \"\") + this._samplerDeclaration + \"\\r\\n\" + this.compilationString;\n    }\n\n    if (this._uniformDeclaration) {\n      this.compilationString = \"\\r\\n\" + (emitComments ? \"//Uniforms\\r\\n\" : \"\") + this._uniformDeclaration + \"\\r\\n\" + this.compilationString;\n    }\n\n    if (this._attributeDeclaration && !isFragmentMode) {\n      this.compilationString = \"\\r\\n\" + (emitComments ? \"//Attributes\\r\\n\" : \"\") + this._attributeDeclaration + \"\\r\\n\" + this.compilationString;\n    }\n\n    this.compilationString = \"precision highp float;\\r\\n\" + this.compilationString;\n\n    for (var extensionName in this.extensions) {\n      var extension = this.extensions[extensionName];\n      this.compilationString = \"\\r\\n\" + extension + \"\\r\\n\" + this.compilationString;\n    }\n\n    this._builtCompilationString = this.compilationString;\n  };\n\n  Object.defineProperty(NodeMaterialBuildState.prototype, \"_repeatableContentAnchor\", {\n    /** @hidden */\n    get: function get() {\n      return \"###___ANCHOR\" + this._repeatableContentAnchorIndex++ + \"___###\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @hidden */\n\n  NodeMaterialBuildState.prototype._getFreeVariableName = function (prefix) {\n    prefix = prefix.replace(/[^a-zA-Z_]+/g, \"\");\n\n    if (this.sharedData.variableNames[prefix] === undefined) {\n      this.sharedData.variableNames[prefix] = 0; // Check reserved words\n\n      if (prefix === \"output\" || prefix === \"texture\") {\n        return prefix + this.sharedData.variableNames[prefix];\n      }\n\n      return prefix;\n    } else {\n      this.sharedData.variableNames[prefix]++;\n    }\n\n    return prefix + this.sharedData.variableNames[prefix];\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._getFreeDefineName = function (prefix) {\n    if (this.sharedData.defineNames[prefix] === undefined) {\n      this.sharedData.defineNames[prefix] = 0;\n    } else {\n      this.sharedData.defineNames[prefix]++;\n    }\n\n    return prefix + this.sharedData.defineNames[prefix];\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._excludeVariableName = function (name) {\n    this.sharedData.variableNames[name] = 0;\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emit2DSampler = function (name) {\n    if (this.samplers.indexOf(name) < 0) {\n      this._samplerDeclaration += \"uniform sampler2D \" + name + \";\\r\\n\";\n      this.samplers.push(name);\n    }\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._getGLType = function (type) {\n    switch (type) {\n      case NodeMaterialBlockConnectionPointTypes.Float:\n        return \"float\";\n\n      case NodeMaterialBlockConnectionPointTypes.Int:\n        return \"int\";\n\n      case NodeMaterialBlockConnectionPointTypes.Vector2:\n        return \"vec2\";\n\n      case NodeMaterialBlockConnectionPointTypes.Color3:\n      case NodeMaterialBlockConnectionPointTypes.Vector3:\n        return \"vec3\";\n\n      case NodeMaterialBlockConnectionPointTypes.Color4:\n      case NodeMaterialBlockConnectionPointTypes.Vector4:\n        return \"vec4\";\n\n      case NodeMaterialBlockConnectionPointTypes.Matrix:\n        return \"mat4\";\n    }\n\n    return \"\";\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emitExtension = function (name, extension, define) {\n    if (define === void 0) {\n      define = \"\";\n    }\n\n    if (this.extensions[name]) {\n      return;\n    }\n\n    if (define) {\n      extension = \"#if \" + define + \"\\r\\n\" + extension + \"\\r\\n#endif\";\n    }\n\n    this.extensions[name] = extension;\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emitFunction = function (name, code, comments) {\n    if (this.functions[name]) {\n      return;\n    }\n\n    if (this.sharedData.emitComments) {\n      code = comments + \"\\r\\n\" + code;\n    }\n\n    this.functions[name] = code;\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emitCodeFromInclude = function (includeName, comments, options) {\n    if (options && options.repeatKey) {\n      return \"#include<\" + includeName + \">[0..\" + options.repeatKey + \"]\\r\\n\";\n    }\n\n    var code = Effect.IncludesShadersStore[includeName] + \"\\r\\n\";\n\n    if (this.sharedData.emitComments) {\n      code = comments + \"\\r\\n\" + code;\n    }\n\n    if (!options) {\n      return code;\n    }\n\n    if (options.replaceStrings) {\n      for (var index = 0; index < options.replaceStrings.length; index++) {\n        var replaceString = options.replaceStrings[index];\n        code = code.replace(replaceString.search, replaceString.replace);\n      }\n    }\n\n    return code;\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emitFunctionFromInclude = function (includeName, comments, options, storeKey) {\n    if (storeKey === void 0) {\n      storeKey = \"\";\n    }\n\n    var key = includeName + storeKey;\n\n    if (this.functions[key]) {\n      return;\n    }\n\n    if (!options || !options.removeAttributes && !options.removeUniforms && !options.removeVaryings && !options.removeIfDef && !options.replaceStrings) {\n      if (options && options.repeatKey) {\n        this.functions[key] = \"#include<\" + includeName + \">[0..\" + options.repeatKey + \"]\\r\\n\";\n      } else {\n        this.functions[key] = \"#include<\" + includeName + \">\\r\\n\";\n      }\n\n      if (this.sharedData.emitComments) {\n        this.functions[key] = comments + \"\\r\\n\" + this.functions[key];\n      }\n\n      return;\n    }\n\n    this.functions[key] = Effect.IncludesShadersStore[includeName];\n\n    if (this.sharedData.emitComments) {\n      this.functions[key] = comments + \"\\r\\n\" + this.functions[key];\n    }\n\n    if (options.removeIfDef) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?#ifdef.+$/gm, \"\");\n      this.functions[key] = this.functions[key].replace(/^\\s*?#endif.*$/gm, \"\");\n      this.functions[key] = this.functions[key].replace(/^\\s*?#else.*$/gm, \"\");\n      this.functions[key] = this.functions[key].replace(/^\\s*?#elif.*$/gm, \"\");\n    }\n\n    if (options.removeAttributes) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?attribute.+$/gm, \"\");\n    }\n\n    if (options.removeUniforms) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?uniform.+$/gm, \"\");\n    }\n\n    if (options.removeVaryings) {\n      this.functions[key] = this.functions[key].replace(/^\\s*?varying.+$/gm, \"\");\n    }\n\n    if (options.replaceStrings) {\n      for (var index = 0; index < options.replaceStrings.length; index++) {\n        var replaceString = options.replaceStrings[index];\n        this.functions[key] = this.functions[key].replace(replaceString.search, replaceString.replace);\n      }\n    }\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._registerTempVariable = function (name) {\n    if (this.sharedData.temps.indexOf(name) !== -1) {\n      return false;\n    }\n\n    this.sharedData.temps.push(name);\n    return true;\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emitVaryingFromString = function (name, type, define, notDefine) {\n    if (define === void 0) {\n      define = \"\";\n    }\n\n    if (notDefine === void 0) {\n      notDefine = false;\n    }\n\n    if (this.sharedData.varyings.indexOf(name) !== -1) {\n      return false;\n    }\n\n    this.sharedData.varyings.push(name);\n\n    if (define) {\n      if (StringTools.StartsWith(define, \"defined(\")) {\n        this.sharedData.varyingDeclaration += \"#if \" + define + \"\\r\\n\";\n      } else {\n        this.sharedData.varyingDeclaration += (notDefine ? \"#ifndef\" : \"#ifdef\") + \" \" + define + \"\\r\\n\";\n      }\n    }\n\n    this.sharedData.varyingDeclaration += \"varying \" + type + \" \" + name + \";\\r\\n\";\n\n    if (define) {\n      this.sharedData.varyingDeclaration += \"#endif\\r\\n\";\n    }\n\n    return true;\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emitUniformFromString = function (name, type, define, notDefine) {\n    if (define === void 0) {\n      define = \"\";\n    }\n\n    if (notDefine === void 0) {\n      notDefine = false;\n    }\n\n    if (this.uniforms.indexOf(name) !== -1) {\n      return;\n    }\n\n    this.uniforms.push(name);\n\n    if (define) {\n      if (StringTools.StartsWith(define, \"defined(\")) {\n        this._uniformDeclaration += \"#if \" + define + \"\\r\\n\";\n      } else {\n        this._uniformDeclaration += (notDefine ? \"#ifndef\" : \"#ifdef\") + \" \" + define + \"\\r\\n\";\n      }\n    }\n\n    this._uniformDeclaration += \"uniform \" + type + \" \" + name + \";\\r\\n\";\n\n    if (define) {\n      this._uniformDeclaration += \"#endif\\r\\n\";\n    }\n  };\n  /** @hidden */\n\n\n  NodeMaterialBuildState.prototype._emitFloat = function (value) {\n    if (value.toString() === value.toFixed(0)) {\n      return value + \".0\";\n    }\n\n    return value.toString();\n  };\n\n  return NodeMaterialBuildState;\n}();\n\nexport { NodeMaterialBuildState };","map":null,"metadata":{},"sourceType":"module"}