{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(translationSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleStorageLoad);\n\nimport { put, takeLatest, select } from 'redux-saga/effects';\nimport { getLocale } from 'decentraland-dapps/dist/modules/translation/selectors';\nimport { changeLocale } from 'decentraland-dapps/dist/modules/translation/actions';\nimport { STORAGE_LOAD } from 'decentraland-dapps/dist/modules/storage/actions';\nimport { createTranslationSaga } from 'decentraland-dapps/dist/modules/translation/sagas';\nimport * as languages from './languages';\nexport function translationSaga() {\n  var mainSaga;\n  return _regeneratorRuntime.wrap(function translationSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          mainSaga = createTranslationSaga({\n            translations: languages\n          });\n          _context.next = 3;\n          return takeLatest(STORAGE_LOAD, handleStorageLoad);\n\n        case 3:\n          _context.next = 5;\n          return mainSaga();\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction handleStorageLoad() {\n  var currentLocale, urlParams, locale, locales;\n  return _regeneratorRuntime.wrap(function handleStorageLoad$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return select(getLocale);\n\n        case 2:\n          currentLocale = _context2.sent;\n          urlParams = new URLSearchParams(window.location.search);\n          locale = urlParams.get('locale');\n          locales = Object.keys(languages);\n\n          if (!(locale && locale !== currentLocale && locales.includes(locale))) {\n            _context2.next = 9;\n            break;\n          }\n\n          _context2.next = 9;\n          return put(changeLocale(locale));\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/translation/sagas.ts"],"names":["translationSaga","handleStorageLoad","put","takeLatest","select","getLocale","changeLocale","STORAGE_LOAD","createTranslationSaga","languages","mainSaga","translations","currentLocale","urlParams","URLSearchParams","window","location","search","locale","get","locales","Object","keys","includes"],"mappings":";;oDASiBA,e;qDAOPC,iB;;AAhBV,SAASC,GAAT,EAAcC,UAAd,EAA0BC,MAA1B,QAAwC,oBAAxC;AAEA,SAASC,SAAT,QAA0B,uDAA1B;AACA,SAASC,YAAT,QAA6B,qDAA7B;AACA,SAASC,YAAT,QAA6B,iDAA7B;AACA,SAASC,qBAAT,QAAsC,mDAAtC;AAEA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;AAEA,OAAO,SAAUT,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACCU,UAAAA,QADD,GACYF,qBAAqB,CAAC;AAAEG,YAAAA,YAAY,EAAEF;AAAhB,WAAD,CADjC;AAAA;AAGL,iBAAMN,UAAU,CAACI,YAAD,EAAeN,iBAAf,CAAhB;;AAHK;AAAA;AAIL,iBAAMS,QAAQ,EAAd;;AAJK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOP,SAAUT,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACgC,iBAAMG,MAAM,CAACC,SAAD,CAAZ;;AADhC;AACQO,UAAAA,aADR;AAGQC,UAAAA,SAHR,GAGoB,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAHpB;AAIQC,UAAAA,MAJR,GAIiBL,SAAS,CAACM,GAAV,CAAc,QAAd,CAJjB;AAKQC,UAAAA,OALR,GAKkBC,MAAM,CAACC,IAAP,CAAYb,SAAZ,CALlB;;AAAA,gBAOMS,MAAM,IAAIA,MAAM,KAAKN,aAArB,IAAsCQ,OAAO,CAACG,QAAR,CAAiBL,MAAjB,CAP5C;AAAA;AAAA;AAAA;;AAAA;AAQI,iBAAMhB,GAAG,CAACI,YAAY,CAACY,MAAD,CAAb,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { put, takeLatest, select } from 'redux-saga/effects'\nimport { Locale } from 'decentraland-ui'\nimport { getLocale } from 'decentraland-dapps/dist/modules/translation/selectors'\nimport { changeLocale } from 'decentraland-dapps/dist/modules/translation/actions'\nimport { STORAGE_LOAD } from 'decentraland-dapps/dist/modules/storage/actions'\nimport { createTranslationSaga } from 'decentraland-dapps/dist/modules/translation/sagas'\n\nimport * as languages from './languages'\n\nexport function* translationSaga() {\n  const mainSaga = createTranslationSaga({ translations: languages })\n\n  yield takeLatest(STORAGE_LOAD, handleStorageLoad)\n  yield mainSaga() // This should be last\n}\n\nfunction* handleStorageLoad() {\n  const currentLocale: Locale = yield select(getLocale)\n\n  const urlParams = new URLSearchParams(window.location.search)\n  const locale = urlParams.get('locale')\n  const locales = Object.keys(languages)\n\n  if (locale && locale !== currentLocale && locales.includes(locale)) {\n    yield put(changeLocale(locale as Locale))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}