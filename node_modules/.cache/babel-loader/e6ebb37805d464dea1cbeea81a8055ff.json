{"ast":null,"code":"import { Logger } from \"../Misc/logger\";\nimport { SerializationHelper } from \"../Misc/decorators\";\nimport { Camera } from \"./camera\";\n/**\r\n * @ignore\r\n * This is a list of all the different input types that are available in the application.\r\n * Fo instance: ArcRotateCameraGamepadInput...\r\n */\n\nexport var CameraInputTypes = {};\n/**\r\n * This represents the input manager used within a camera.\r\n * It helps dealing with all the different kind of input attached to a camera.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar CameraInputsManager =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiate a new Camera Input Manager.\r\n   * @param camera Defines the camera the input manager blongs to\r\n   */\n  function CameraInputsManager(camera) {\n    /**\r\n     * Defines the dom element the camera is collecting inputs from.\r\n     * This is null if the controls have not been attached.\r\n     */\n    this.attachedToElement = false;\n    this.attached = {};\n    this.camera = camera;\n\n    this.checkInputs = function () {};\n  }\n  /**\r\n   * Add an input method to a camera\r\n   * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n   * @param input camera input method\r\n   */\n\n\n  CameraInputsManager.prototype.add = function (input) {\n    var type = input.getSimpleName();\n\n    if (this.attached[type]) {\n      Logger.Warn(\"camera input of type \" + type + \" already exists on camera\");\n      return;\n    }\n\n    this.attached[type] = input;\n    input.camera = this.camera; //for checkInputs, we are dynamically creating a function\n    //the goal is to avoid the performance penalty of looping for inputs in the render loop\n\n    if (input.checkInputs) {\n      this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\n    }\n\n    if (this.attachedToElement) {\n      input.attachControl();\n    }\n  };\n  /**\r\n   * Remove a specific input method from a camera\r\n   * example: camera.inputs.remove(camera.inputs.attached.mouse);\r\n   * @param inputToRemove camera input method\r\n   */\n\n\n  CameraInputsManager.prototype.remove = function (inputToRemove) {\n    for (var cam in this.attached) {\n      var input = this.attached[cam];\n\n      if (input === inputToRemove) {\n        input.detachControl();\n        input.camera = null;\n        delete this.attached[cam];\n        this.rebuildInputCheck();\n      }\n    }\n  };\n  /**\r\n   * Remove a specific input type from a camera\r\n   * example: camera.inputs.remove(\"ArcRotateCameraGamepadInput\");\r\n   * @param inputType the type of the input to remove\r\n   */\n\n\n  CameraInputsManager.prototype.removeByType = function (inputType) {\n    for (var cam in this.attached) {\n      var input = this.attached[cam];\n\n      if (input.getClassName() === inputType) {\n        input.detachControl();\n        input.camera = null;\n        delete this.attached[cam];\n        this.rebuildInputCheck();\n      }\n    }\n  };\n\n  CameraInputsManager.prototype._addCheckInputs = function (fn) {\n    var current = this.checkInputs;\n    return function () {\n      current();\n      fn();\n    };\n  };\n  /**\r\n   * Attach the input controls to the currently attached dom element to listen the events from.\r\n   * @param input Defines the input to attach\r\n   */\n\n\n  CameraInputsManager.prototype.attachInput = function (input) {\n    if (this.attachedToElement) {\n      input.attachControl(this.noPreventDefault);\n    }\n  };\n  /**\r\n   * Attach the current manager inputs controls to a specific dom element to listen the events from.\r\n   * @param element Defines the dom element to collect the events from\r\n   * @param noPreventDefault Defines whether event caught by the controls should call preventdefault() (https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)\r\n   */\n\n\n  CameraInputsManager.prototype.attachElement = function (noPreventDefault) {\n    if (noPreventDefault === void 0) {\n      noPreventDefault = false;\n    }\n\n    if (this.attachedToElement) {\n      return;\n    }\n\n    noPreventDefault = Camera.ForceAttachControlToAlwaysPreventDefault ? false : noPreventDefault;\n    this.attachedToElement = true;\n    this.noPreventDefault = noPreventDefault;\n\n    for (var cam in this.attached) {\n      this.attached[cam].attachControl(noPreventDefault);\n    }\n  };\n  /**\r\n   * Detach the current manager inputs controls from a specific dom element.\r\n   * @param element Defines the dom element to collect the events from\r\n   * @param disconnect Defines whether the input should be removed from the current list of attached inputs\r\n   */\n\n\n  CameraInputsManager.prototype.detachElement = function (disconnect) {\n    if (disconnect === void 0) {\n      disconnect = false;\n    }\n\n    for (var cam in this.attached) {\n      this.attached[cam].detachControl();\n\n      if (disconnect) {\n        this.attached[cam].camera = null;\n      }\n    }\n\n    this.attachedToElement = false;\n  };\n  /**\r\n   * Rebuild the dynamic inputCheck function from the current list of\r\n   * defined inputs in the manager.\r\n   */\n\n\n  CameraInputsManager.prototype.rebuildInputCheck = function () {\n    this.checkInputs = function () {};\n\n    for (var cam in this.attached) {\n      var input = this.attached[cam];\n\n      if (input.checkInputs) {\n        this.checkInputs = this._addCheckInputs(input.checkInputs.bind(input));\n      }\n    }\n  };\n  /**\r\n   * Remove all attached input methods from a camera\r\n   */\n\n\n  CameraInputsManager.prototype.clear = function () {\n    if (this.attachedToElement) {\n      this.detachElement(true);\n    }\n\n    this.attached = {};\n    this.attachedToElement = false;\n\n    this.checkInputs = function () {};\n  };\n  /**\r\n   * Serialize the current input manager attached to a camera.\r\n   * This ensures than once parsed,\r\n   * the input associated to the camera will be identical to the current ones\r\n   * @param serializedCamera Defines the camera serialization JSON the input serialization should write to\r\n   */\n\n\n  CameraInputsManager.prototype.serialize = function (serializedCamera) {\n    var inputs = {};\n\n    for (var cam in this.attached) {\n      var input = this.attached[cam];\n      var res = SerializationHelper.Serialize(input);\n      inputs[input.getClassName()] = res;\n    }\n\n    serializedCamera.inputsmgr = inputs;\n  };\n  /**\r\n   * Parses an input manager serialized JSON to restore the previous list of inputs\r\n   * and states associated to a camera.\r\n   * @param parsedCamera Defines the JSON to parse\r\n   */\n\n\n  CameraInputsManager.prototype.parse = function (parsedCamera) {\n    var parsedInputs = parsedCamera.inputsmgr;\n\n    if (parsedInputs) {\n      this.clear();\n\n      for (var n in parsedInputs) {\n        var construct = CameraInputTypes[n];\n\n        if (construct) {\n          var parsedinput = parsedInputs[n];\n          var input = SerializationHelper.Parse(function () {\n            return new construct();\n          }, parsedinput, null);\n          this.add(input);\n        }\n      }\n    } else {\n      //2016-03-08 this part is for managing backward compatibility\n      for (var n in this.attached) {\n        var construct = CameraInputTypes[this.attached[n].getClassName()];\n\n        if (construct) {\n          var input = SerializationHelper.Parse(function () {\n            return new construct();\n          }, parsedCamera, null);\n          this.remove(this.attached[n]);\n          this.add(input);\n        }\n      }\n    }\n  };\n\n  return CameraInputsManager;\n}();\n\nexport { CameraInputsManager };","map":null,"metadata":{},"sourceType":"module"}