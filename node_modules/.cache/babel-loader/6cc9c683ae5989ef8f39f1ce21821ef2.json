{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { isEqual } from 'lib/address';\nimport { getProjectId } from 'modules/location/utils';\nimport { PARCEL_SIZE } from './constants';\nimport { LOAD_PUBLIC_PROJECT_REQUEST } from './actions';\nexport var getState = function getState(state) {\n  return state.project;\n};\nexport var getData = function getData(state) {\n  return getState(state).data;\n};\nexport var getError = function getError(state) {\n  return getState(state).error;\n};\nexport var getLoading = function getLoading(state) {\n  return getState(state).loading;\n};\nexport var getUserProjects = createSelector(getAddress, getData, function (address, projects) {\n  return Object.keys(projects).reduce(function (record, projectId) {\n    var project = projects[projectId];\n    var isOwnedByUser = !!project.ethAddress && !!address && isEqual(project.ethAddress, address);\n\n    if (isOwnedByUser || project.ethAddress === null) {\n      record[projectId] = project;\n    }\n\n    return record;\n  }, {});\n});\nexport var getCurrentProject = createSelector(getProjectId, getData, function (projectId, projects) {\n  return projects[projectId] || null;\n});\nexport var getCurrentBounds = createSelector(getCurrentProject, function (project) {\n  if (!project) return null;\n  var _project$layout = project.layout,\n      rows = _project$layout.rows,\n      cols = _project$layout.cols;\n  return {\n    x: rows * PARCEL_SIZE,\n    y: Math.log2(rows * cols + 1) * 20,\n    z: cols * PARCEL_SIZE\n  };\n});\nexport var isFetching = createSelector(getLoading, function (projectLoading) {\n  return isLoadingType(projectLoading, LOAD_PUBLIC_PROJECT_REQUEST);\n});","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/project/selectors.ts"],"names":["createSelector","isLoadingType","getAddress","isEqual","getProjectId","PARCEL_SIZE","LOAD_PUBLIC_PROJECT_REQUEST","getState","state","project","getData","data","getError","error","getLoading","loading","getUserProjects","address","projects","Object","keys","reduce","record","projectId","isOwnedByUser","ethAddress","getCurrentProject","getCurrentBounds","layout","rows","cols","x","y","Math","log2","z","isFetching","projectLoading"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,SAASC,aAAT,QAA8B,mDAA9B;AAEA,SAASC,UAAT,QAA2B,kDAA3B;AAEA,SAASC,OAAT,QAAwB,aAAxB;AAGA,SAASC,YAAT,QAA6B,wBAA7B;AAGA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,2BAAT,QAA4C,WAA5C;AAEA,OAAO,IAAMC,QAA4C,GAAG,SAA/CA,QAA+C,CAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,OAAV;AAAA,CAA1D;AACP,OAAO,IAAMC,OAAmD,GAAG,SAAtDA,OAAsD,CAAAF,KAAK;AAAA,SAAID,QAAQ,CAACC,KAAD,CAAR,CAAgBG,IAApB;AAAA,CAAjE;AACP,OAAO,IAAMC,QAAqD,GAAG,SAAxDA,QAAwD,CAAAJ,KAAK;AAAA,SAAID,QAAQ,CAACC,KAAD,CAAR,CAAgBK,KAApB;AAAA,CAAnE;AACP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACN,KAAD;AAAA,SAAsBD,QAAQ,CAACC,KAAD,CAAR,CAAgBO,OAAtC;AAAA,CAAnB;AAEP,OAAO,IAAMC,eAAe,GAAGhB,cAAc,CAACE,UAAD,EAAaQ,OAAb,EAAsB,UAACO,OAAD,EAAUC,QAAV,EAAuB;AACxF,SAAOC,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBG,MAAtB,CAA6B,UAACC,MAAD,EAASC,SAAT,EAAuB;AACzD,QAAMd,OAAO,GAAGS,QAAQ,CAACK,SAAD,CAAxB;AACA,QAAMC,aAAa,GAAG,CAAC,CAACf,OAAO,CAACgB,UAAV,IAAwB,CAAC,CAACR,OAA1B,IAAqCd,OAAO,CAACM,OAAO,CAACgB,UAAT,EAAqBR,OAArB,CAAlE;;AACA,QAAIO,aAAa,IAAIf,OAAO,CAACgB,UAAR,KAAuB,IAA5C,EAAkD;AAChDH,MAAAA,MAAM,CAACC,SAAD,CAAN,GAAoBd,OAApB;AACD;;AACD,WAAOa,MAAP;AACD,GAPM,EAOJ,EAPI,CAAP;AAQD,CAT4C,CAAtC;AAWP,OAAO,IAAMI,iBAAiB,GAAG1B,cAAc,CAC7CI,YAD6C,EAE7CM,OAF6C,EAG7C,UAACa,SAAD,EAAYL,QAAZ;AAAA,SAAyBA,QAAQ,CAACK,SAAD,CAAR,IAAwB,IAAjD;AAAA,CAH6C,CAAxC;AAMP,OAAO,IAAMI,gBAAgB,GAAG3B,cAAc,CAA4C0B,iBAA5C,EAA+D,UAAAjB,OAAO,EAAI;AACtH,MAAI,CAACA,OAAL,EAAc,OAAO,IAAP;AADwG,wBAE/FA,OAAO,CAACmB,MAFuF;AAAA,MAE9GC,IAF8G,mBAE9GA,IAF8G;AAAA,MAExGC,IAFwG,mBAExGA,IAFwG;AAGtH,SAAO;AACLC,IAAAA,CAAC,EAAEF,IAAI,GAAGxB,WADL;AAEL2B,IAAAA,CAAC,EAAEC,IAAI,CAACC,IAAL,CAAUL,IAAI,GAAGC,IAAP,GAAc,CAAxB,IAA6B,EAF3B;AAGLK,IAAAA,CAAC,EAAEL,IAAI,GAAGzB;AAHL,GAAP;AAKD,CAR6C,CAAvC;AAUP,OAAO,IAAM+B,UAAU,GAAGpC,cAAc,CAAmCc,UAAnC,EAA+C,UAAAuB,cAAc;AAAA,SACnGpC,aAAa,CAACoC,cAAD,EAAiB/B,2BAAjB,CADsF;AAAA,CAA7D,CAAjC","sourcesContent":["import { createSelector } from 'reselect'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { LoadingState } from 'decentraland-dapps/dist/modules/loading/reducer'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\n\nimport { isEqual } from 'lib/address'\nimport { RootState } from 'modules/common/types'\nimport { ProjectState } from 'modules/project/reducer'\nimport { getProjectId } from 'modules/location/utils'\nimport { Project } from 'modules/project/types'\nimport { Vector3 } from 'modules/models/types'\nimport { PARCEL_SIZE } from './constants'\nimport { LOAD_PUBLIC_PROJECT_REQUEST } from './actions'\n\nexport const getState: (state: RootState) => ProjectState = state => state.project\nexport const getData: (state: RootState) => ProjectState['data'] = state => getState(state).data\nexport const getError: (state: RootState) => ProjectState['error'] = state => getState(state).error\nexport const getLoading = (state: RootState) => getState(state).loading\n\nexport const getUserProjects = createSelector(getAddress, getData, (address, projects) => {\n  return Object.keys(projects).reduce((record, projectId) => {\n    const project = projects[projectId]\n    const isOwnedByUser = !!project.ethAddress && !!address && isEqual(project.ethAddress, address)\n    if (isOwnedByUser || project.ethAddress === null) {\n      record[projectId] = project\n    }\n    return record\n  }, {} as ProjectState['data'])\n})\n\nexport const getCurrentProject = createSelector<RootState, string | undefined, ProjectState['data'], Project | null>(\n  getProjectId,\n  getData,\n  (projectId, projects) => projects[projectId!] || null\n)\n\nexport const getCurrentBounds = createSelector<RootState, Project | null, Vector3 | null>(getCurrentProject, project => {\n  if (!project) return null\n  const { rows, cols } = project.layout\n  return {\n    x: rows * PARCEL_SIZE,\n    y: Math.log2(rows * cols + 1) * 20,\n    z: cols * PARCEL_SIZE\n  }\n})\n\nexport const isFetching = createSelector<RootState, LoadingState, boolean>(getLoading, projectLoading =>\n  isLoadingType(projectLoading, LOAD_PUBLIC_PROJECT_REQUEST)\n)\n"]},"metadata":{},"sourceType":"module"}