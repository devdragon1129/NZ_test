{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Logger } from \"../../../Misc/logger\";\nimport { Vector3, Vector2 } from \"../../../Maths/math.vector\";\nimport { Color4, Color3 } from '../../../Maths/math.color';\nimport { Texture } from \"../../../Materials/Textures/texture\";\nimport { ProceduralTexture } from \"./proceduralTexture\";\nimport { WebRequest } from '../../../Misc/webRequest';\n/**\r\n * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\r\n * Custom Procedural textures are the easiest way to create your own procedural in your application.\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_procedural_textures#creating-custom-procedural-textures\r\n */\n\nvar CustomProceduralTexture =\n/** @class */\nfunction (_super) {\n  __extends(CustomProceduralTexture, _super);\n  /**\r\n   * Instantiates a new Custom Procedural Texture.\r\n   * Procedural texturing is a way to programmatically create a texture. There are 2 types of procedural textures: code-only, and code that references some classic 2D images, sometimes called 'refMaps' or 'sampler' images.\r\n   * Custom Procedural textures are the easiest way to create your own procedural in your application.\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_procedural_textures#creating-custom-procedural-textures\r\n   * @param name Define the name of the texture\r\n   * @param texturePath Define the folder path containing all the cutom texture related files (config, shaders...)\r\n   * @param size Define the size of the texture to create\r\n   * @param scene Define the scene the texture belongs to\r\n   * @param fallbackTexture Define a fallback texture in case there were issues to create the custom texture\r\n   * @param generateMipMaps Define if the texture should creates mip maps or not\r\n   */\n\n\n  function CustomProceduralTexture(name, texturePath, size, scene, fallbackTexture, generateMipMaps) {\n    var _this = _super.call(this, name, size, null, scene, fallbackTexture, generateMipMaps) || this;\n\n    _this._animate = true;\n    _this._time = 0;\n    _this._texturePath = texturePath; //Try to load json\n\n    _this._loadJson(texturePath);\n\n    _this.refreshRate = 1;\n    return _this;\n  }\n\n  CustomProceduralTexture.prototype._loadJson = function (jsonUrl) {\n    var _this = this;\n\n    var noConfigFile = function noConfigFile() {\n      try {\n        _this.setFragment(_this._texturePath);\n      } catch (ex) {\n        Logger.Error(\"No json or ShaderStore or DOM element found for CustomProceduralTexture\");\n      }\n    };\n\n    var configFileUrl = jsonUrl + \"/config.json\";\n    var xhr = new WebRequest();\n    xhr.open(\"GET\", configFileUrl);\n    xhr.addEventListener(\"load\", function () {\n      if (xhr.status === 200 || xhr.responseText && xhr.responseText.length > 0) {\n        try {\n          _this._config = JSON.parse(xhr.response);\n\n          _this.updateShaderUniforms();\n\n          _this.updateTextures();\n\n          _this.setFragment(_this._texturePath + \"/custom\");\n\n          _this._animate = _this._config.animate;\n          _this.refreshRate = _this._config.refreshrate;\n        } catch (ex) {\n          noConfigFile();\n        }\n      } else {\n        noConfigFile();\n      }\n    }, false);\n    xhr.addEventListener(\"error\", function () {\n      noConfigFile();\n    }, false);\n\n    try {\n      xhr.send();\n    } catch (ex) {\n      Logger.Error(\"CustomProceduralTexture: Error on XHR send request.\");\n    }\n  };\n  /**\r\n   * Is the texture ready to be used ? (rendered at least once)\r\n   * @returns true if ready, otherwise, false.\r\n   */\n\n\n  CustomProceduralTexture.prototype.isReady = function () {\n    if (!_super.prototype.isReady.call(this)) {\n      return false;\n    }\n\n    for (var name in this._textures) {\n      var texture = this._textures[name];\n\n      if (!texture.isReady()) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Render the texture to its associated render target.\r\n   * @param useCameraPostProcess Define if camera post process should be applied to the texture\r\n   */\n\n\n  CustomProceduralTexture.prototype.render = function (useCameraPostProcess) {\n    var scene = this.getScene();\n\n    if (this._animate && scene) {\n      this._time += scene.getAnimationRatio() * 0.03;\n      this.updateShaderUniforms();\n    }\n\n    _super.prototype.render.call(this, useCameraPostProcess);\n  };\n  /**\r\n   * Update the list of dependant textures samplers in the shader.\r\n   */\n\n\n  CustomProceduralTexture.prototype.updateTextures = function () {\n    for (var i = 0; i < this._config.sampler2Ds.length; i++) {\n      this.setTexture(this._config.sampler2Ds[i].sample2Dname, new Texture(this._texturePath + \"/\" + this._config.sampler2Ds[i].textureRelativeUrl, this.getScene()));\n    }\n  };\n  /**\r\n   * Update the uniform values of the procedural texture in the shader.\r\n   */\n\n\n  CustomProceduralTexture.prototype.updateShaderUniforms = function () {\n    if (this._config) {\n      for (var j = 0; j < this._config.uniforms.length; j++) {\n        var uniform = this._config.uniforms[j];\n\n        switch (uniform.type) {\n          case \"float\":\n            this.setFloat(uniform.name, uniform.value);\n            break;\n\n          case \"color3\":\n            this.setColor3(uniform.name, new Color3(uniform.r, uniform.g, uniform.b));\n            break;\n\n          case \"color4\":\n            this.setColor4(uniform.name, new Color4(uniform.r, uniform.g, uniform.b, uniform.a));\n            break;\n\n          case \"vector2\":\n            this.setVector2(uniform.name, new Vector2(uniform.x, uniform.y));\n            break;\n\n          case \"vector3\":\n            this.setVector3(uniform.name, new Vector3(uniform.x, uniform.y, uniform.z));\n            break;\n        }\n      }\n    }\n\n    this.setFloat(\"time\", this._time);\n  };\n\n  Object.defineProperty(CustomProceduralTexture.prototype, \"animate\", {\n    /**\r\n     * Define if the texture animates or not.\r\n     */\n    get: function get() {\n      return this._animate;\n    },\n    set: function set(value) {\n      this._animate = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return CustomProceduralTexture;\n}(ProceduralTexture);\n\nexport { CustomProceduralTexture };","map":null,"metadata":{},"sourceType":"module"}