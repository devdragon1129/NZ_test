{"ast":null,"code":"import { connect } from 'react-redux';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getData, getTransactions, getLoading } from 'decentraland-dapps/dist/modules/authorization/selectors';\nimport { grantTokenRequest, GRANT_TOKEN_REQUEST, revokeTokenRequest, REVOKE_TOKEN_REQUEST } from 'decentraland-dapps/dist/modules/authorization/actions';\nimport { isPending } from 'decentraland-dapps/dist/modules/transaction/utils';\nimport { areEqual } from 'decentraland-dapps/dist/modules/authorization/utils';\nimport AuthorizationModal from './AuthorizationModal';\n\nvar mapState = function mapState(state, ownProps) {\n  var hasPendingTransaction = getTransactions(state).some(function (tx) {\n    return areEqual(tx.payload.authorization, ownProps.authorization) && isPending(tx.status);\n  });\n  return {\n    authorizations: getData(state),\n    isLoading: isLoadingType(getLoading(state), GRANT_TOKEN_REQUEST) || isLoadingType(getLoading(state), REVOKE_TOKEN_REQUEST),\n    hasPendingTransaction: hasPendingTransaction\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onGrant: function onGrant(authorization) {\n      return dispatch(grantTokenRequest(authorization));\n    },\n    onRevoke: function onRevoke(authorization) {\n      return dispatch(revokeTokenRequest(authorization));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(AuthorizationModal);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/AuthorizationModal/AuthorizationModal.container.ts"],"names":["connect","isLoadingType","getData","getTransactions","getLoading","grantTokenRequest","GRANT_TOKEN_REQUEST","revokeTokenRequest","REVOKE_TOKEN_REQUEST","isPending","areEqual","AuthorizationModal","mapState","state","ownProps","hasPendingTransaction","some","tx","payload","authorization","status","authorizations","isLoading","mapDispatch","dispatch","onGrant","onRevoke"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AAGA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,UAAnC,QAAqD,yDAArD;AACA,SACEC,iBADF,EAEEC,mBAFF,EAGEC,kBAHF,EAIEC,oBAJF,QAKO,uDALP;AAMA,SAASC,SAAT,QAA0B,mDAA1B;AACA,SAASC,QAAT,QAAyB,qDAAzB;AAEA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAmBC,QAAnB,EAAyD;AACxE,MAAMC,qBAAqB,GAAGZ,eAAe,CAACU,KAAD,CAAf,CAAuBG,IAAvB,CAC5B,UAAAC,EAAE;AAAA,WAAIP,QAAQ,CAACO,EAAE,CAACC,OAAH,CAAWC,aAAZ,EAA2BL,QAAQ,CAACK,aAApC,CAAR,IAA8DV,SAAS,CAACQ,EAAE,CAACG,MAAJ,CAA3E;AAAA,GAD0B,CAA9B;AAIA,SAAO;AACLC,IAAAA,cAAc,EAAEnB,OAAO,CAACW,KAAD,CADlB;AAELS,IAAAA,SAAS,EAAErB,aAAa,CAACG,UAAU,CAACS,KAAD,CAAX,EAAoBP,mBAApB,CAAb,IAAyDL,aAAa,CAACG,UAAU,CAACS,KAAD,CAAX,EAAoBL,oBAApB,CAF5E;AAGLO,IAAAA,qBAAqB,EAArBA;AAHK,GAAP;AAKD,CAVD;;AAYA,IAAMQ,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,OAAO,EAAE,iBAACN,aAAD;AAAA,aAAkCK,QAAQ,CAACnB,iBAAiB,CAACc,aAAD,CAAlB,CAA1C;AAAA,KADuD;AAEhEO,IAAAA,QAAQ,EAAE,kBAACP,aAAD;AAAA,aAAkCK,QAAQ,CAACjB,kBAAkB,CAACY,aAAD,CAAnB,CAA1C;AAAA;AAFsD,GAA9C;AAAA,CAApB;;AAKA,eAAenB,OAAO,CAACY,QAAD,EAAWW,WAAX,CAAP,CAA+BZ,kBAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { RootState } from 'modules/common/types'\nimport { Authorization } from 'decentraland-dapps/dist/modules/authorization/types'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { getData, getTransactions, getLoading } from 'decentraland-dapps/dist/modules/authorization/selectors'\nimport {\n  grantTokenRequest,\n  GRANT_TOKEN_REQUEST,\n  revokeTokenRequest,\n  REVOKE_TOKEN_REQUEST\n} from 'decentraland-dapps/dist/modules/authorization/actions'\nimport { isPending } from 'decentraland-dapps/dist/modules/transaction/utils'\nimport { areEqual } from 'decentraland-dapps/dist/modules/authorization/utils'\nimport { MapStateProps, MapDispatchProps, MapDispatch, OwnProps } from './AuthorizationModal.types'\nimport AuthorizationModal from './AuthorizationModal'\n\nconst mapState = (state: RootState, ownProps: OwnProps): MapStateProps => {\n  const hasPendingTransaction = getTransactions(state).some(\n    tx => areEqual(tx.payload.authorization, ownProps.authorization) && isPending(tx.status)\n  )\n\n  return {\n    authorizations: getData(state),\n    isLoading: isLoadingType(getLoading(state), GRANT_TOKEN_REQUEST) || isLoadingType(getLoading(state), REVOKE_TOKEN_REQUEST),\n    hasPendingTransaction\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onGrant: (authorization: Authorization) => dispatch(grantTokenRequest(authorization)),\n  onRevoke: (authorization: Authorization) => dispatch(revokeTokenRequest(authorization))\n})\n\nexport default connect(mapState, mapDispatch)(AuthorizationModal)\n"]},"metadata":{},"sourceType":"module"}