{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\n/**\r\n * Block used to output the final color\r\n */\n\nvar FragmentOutputBlock =\n/** @class */\nfunction (_super) {\n  __extends(FragmentOutputBlock, _super);\n  /**\r\n   * Create a new FragmentOutputBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function FragmentOutputBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Fragment, true) || this;\n\n    _this.registerInput(\"rgba\", NodeMaterialBlockConnectionPointTypes.Color4, true);\n\n    _this.registerInput(\"rgb\", NodeMaterialBlockConnectionPointTypes.Color3, true);\n\n    _this.registerInput(\"a\", NodeMaterialBlockConnectionPointTypes.Float, true);\n\n    _this.rgb.acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Float);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  FragmentOutputBlock.prototype.getClassName = function () {\n    return \"FragmentOutputBlock\";\n  };\n\n  Object.defineProperty(FragmentOutputBlock.prototype, \"rgba\", {\n    /**\r\n     * Gets the rgba input component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FragmentOutputBlock.prototype, \"rgb\", {\n    /**\r\n     * Gets the rgb input component\r\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FragmentOutputBlock.prototype, \"a\", {\n    /**\r\n     * Gets the a input component\r\n     */\n    get: function get() {\n      return this._inputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FragmentOutputBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var rgba = this.rgba;\n    var rgb = this.rgb;\n    var a = this.a;\n    state.sharedData.hints.needAlphaBlending = rgba.isConnected || a.isConnected;\n\n    if (rgba.connectedPoint) {\n      if (a.isConnected) {\n        state.compilationString += \"gl_FragColor = vec4(\" + rgba.associatedVariableName + \".rgb, \" + a.associatedVariableName + \");\\r\\n\";\n      } else {\n        state.compilationString += \"gl_FragColor = \" + rgba.associatedVariableName + \";\\r\\n\";\n      }\n    } else if (rgb.connectedPoint) {\n      var aValue = \"1.0\";\n\n      if (a.connectedPoint) {\n        aValue = a.associatedVariableName;\n      }\n\n      if (rgb.connectedPoint.type === NodeMaterialBlockConnectionPointTypes.Float) {\n        state.compilationString += \"gl_FragColor = vec4(\" + rgb.associatedVariableName + \", \" + rgb.associatedVariableName + \", \" + rgb.associatedVariableName + \", \" + aValue + \");\\r\\n\";\n      } else {\n        state.compilationString += \"gl_FragColor = vec4(\" + rgb.associatedVariableName + \", \" + aValue + \");\\r\\n\";\n      }\n    } else {\n      state.sharedData.checks.notConnectedNonOptionalInputs.push(rgba);\n    }\n\n    return this;\n  };\n\n  return FragmentOutputBlock;\n}(NodeMaterialBlock);\n\nexport { FragmentOutputBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.FragmentOutputBlock\"] = FragmentOutputBlock;","map":null,"metadata":{},"sourceType":"module"}