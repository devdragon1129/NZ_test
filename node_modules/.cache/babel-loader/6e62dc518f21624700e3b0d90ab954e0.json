{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NFT = exports.NFTSortBy = void 0;\n\nvar validation_1 = require(\"../validation\");\n\nvar body_shape_1 = require(\"./body-shape\");\n\nvar chain_id_1 = require(\"./chain-id\");\n\nvar emote_category_1 = require(\"./emote-category\");\n\nvar network_1 = require(\"./network\");\n\nvar nft_category_1 = require(\"./nft-category\");\n\nvar rarity_1 = require(\"./rarity\");\n\nvar wearable_category_1 = require(\"./wearable-category\");\n\nvar NFTSortBy;\n\n(function (NFTSortBy) {\n  NFTSortBy[\"NAME\"] = \"name\";\n  NFTSortBy[\"NEWEST\"] = \"newest\";\n  NFTSortBy[\"RECENTLY_LISTED\"] = \"recently_listed\";\n  NFTSortBy[\"RECENTLY_SOLD\"] = \"recently_sold\";\n  NFTSortBy[\"CHEAPEST\"] = \"cheapest\";\n})(NFTSortBy = exports.NFTSortBy || (exports.NFTSortBy = {}));\n\nvar NFT;\n\n(function (NFT) {\n  NFT.schema = {\n    type: 'object',\n    properties: {\n      id: {\n        type: 'string'\n      },\n      tokenId: {\n        type: 'string'\n      },\n      contractAddress: {\n        type: 'string'\n      },\n      activeOrderId: {\n        type: ['string'],\n        nullable: true\n      },\n      owner: {\n        type: 'string'\n      },\n      name: {\n        type: 'string'\n      },\n      image: {\n        type: 'string'\n      },\n      url: {\n        type: 'string'\n      },\n      data: {\n        type: 'object',\n        nullable: false,\n        properties: {\n          parcel: {\n            type: 'object',\n            properties: {\n              description: {\n                type: ['string'],\n                nullable: true\n              },\n              x: {\n                type: 'string'\n              },\n              y: {\n                type: 'string'\n              },\n              estate: {\n                type: 'object',\n                properties: {\n                  tokenId: {\n                    type: 'string'\n                  },\n                  name: {\n                    type: 'string'\n                  }\n                },\n                required: ['tokenId', 'name'],\n                nullable: true\n              }\n            },\n            required: ['description', 'x', 'y', 'estate'],\n            nullable: true\n          },\n          estate: {\n            type: 'object',\n            properties: {\n              description: {\n                type: ['string'],\n                nullable: true\n              },\n              size: {\n                type: 'integer'\n              },\n              parcels: {\n                type: 'array',\n                items: {\n                  type: 'object',\n                  properties: {\n                    x: {\n                      type: 'number'\n                    },\n                    y: {\n                      type: 'number'\n                    }\n                  },\n                  required: ['x', 'y']\n                }\n              }\n            },\n            required: ['description', 'size', 'parcels'],\n            nullable: true\n          },\n          wearable: {\n            type: 'object',\n            properties: {\n              bodyShapes: {\n                type: 'array',\n                items: body_shape_1.BodyShape.schema\n              },\n              category: wearable_category_1.WearableCategory.schema,\n              description: {\n                type: 'string'\n              },\n              rarity: rarity_1.Rarity.schema,\n              isSmart: {\n                type: 'boolean'\n              }\n            },\n            required: ['bodyShapes', 'category', 'description', 'rarity', 'isSmart'],\n            nullable: true\n          },\n          ens: {\n            type: 'object',\n            properties: {\n              subdomain: {\n                type: 'string'\n              }\n            },\n            required: ['subdomain'],\n            nullable: true\n          },\n          emote: {\n            type: 'object',\n            properties: {\n              bodyShapes: {\n                type: 'array',\n                items: body_shape_1.BodyShape.schema\n              },\n              category: emote_category_1.EmoteCategory.schema,\n              description: {\n                type: 'string'\n              },\n              rarity: rarity_1.Rarity.schema\n            },\n            required: ['bodyShapes', 'category', 'description', 'rarity'],\n            nullable: true\n          }\n        },\n        required: []\n      },\n      issuedId: {\n        type: 'string',\n        nullable: true\n      },\n      itemId: {\n        type: 'string',\n        nullable: true\n      },\n      category: nft_category_1.NFTCategory.schema,\n      network: network_1.Network.schema,\n      chainId: chain_id_1.ChainId.schema,\n      createdAt: {\n        type: 'integer'\n      },\n      updatedAt: {\n        type: 'integer'\n      },\n      soldAt: {\n        type: 'integer'\n      }\n    },\n    required: ['id', 'tokenId', 'contractAddress', 'activeOrderId', 'owner', 'name', 'image', 'url', 'data', 'issuedId', 'itemId', 'category', 'network', 'chainId', 'createdAt', 'updatedAt', 'soldAt']\n  };\n  NFT.validate = (0, validation_1.generateValidator)(NFT.schema);\n})(NFT = exports.NFT || (exports.NFT = {}));","map":null,"metadata":{},"sourceType":"script"}