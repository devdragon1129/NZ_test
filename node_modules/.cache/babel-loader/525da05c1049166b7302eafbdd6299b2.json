{"ast":null,"code":"import { Vector3 } from \"../../Maths/math.vector\";\nimport { Mesh } from \"../mesh\";\nimport { RibbonBuilder } from \"./ribbonBuilder\";\n\nMesh.CreateLathe = function (name, shape, radius, tessellation, scene, updatable, sideOrientation) {\n  var options = {\n    shape: shape,\n    radius: radius,\n    tessellation: tessellation,\n    sideOrientation: sideOrientation,\n    updatable: updatable\n  };\n  return LatheBuilder.CreateLathe(name, options, scene);\n};\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\n\n\nvar LatheBuilder =\n/** @class */\nfunction () {\n  function LatheBuilder() {}\n  /**\r\n   * Creates lathe mesh.\r\n   * The lathe is a shape with a symetry axis : a 2D model shape is rotated around this axis to design the lathe\r\n   * * The parameter `shape` is a required array of successive Vector3. This array depicts the shape to be rotated in its local space : the shape must be designed in the xOy plane and will be rotated around the Y axis. It's usually a 2D shape, so the Vector3 z coordinates are often set to zero\r\n   * * The parameter `radius` (positive float, default 1) is the radius value of the lathe\r\n   * * The parameter `tessellation` (positive integer, default 64) is the side number of the lathe\r\n   * * The parameter `clip` (positive integer, default 0) is the number of sides to not create without effecting the general shape of the sides\r\n   * * The parameter `arc` (positive float, default 1) is the ratio of the lathe. 0.5 builds for instance half a lathe, so an opened shape\r\n   * * The parameter `closed` (boolean, default true) opens/closes the lathe circumference. This should be set to false when used with the parameter \"arc\"\r\n   * * The parameter `cap` sets the way the extruded shape is capped. Possible values : BABYLON.Mesh.NO_CAP (default), BABYLON.Mesh.CAP_START, BABYLON.Mesh.CAP_END, BABYLON.Mesh.CAP_ALL\r\n   * * You can also set the mesh side orientation with the values : BABYLON.Mesh.FRONTSIDE (default), BABYLON.Mesh.BACKSIDE or BABYLON.Mesh.DOUBLESIDE\r\n   * * If you create a double-sided mesh, you can choose what parts of the texture image to crop and stick respectively on the front and the back sides with the parameters `frontUVs` and `backUVs` (Vector4). Detail here : https://doc.babylonjs.com/babylon101/discover_basic_elements#side-orientation\r\n   * * The optional parameter `invertUV` (boolean, default false) swaps in the geometry the U and V coordinates to apply a texture\r\n   * * The mesh can be set to updatable with the boolean parameter `updatable` (default false) if its internal geometry is supposed to change once created\r\n   * @param name defines the name of the mesh\r\n   * @param options defines the options used to create the mesh\r\n   * @param scene defines the hosting scene\r\n   * @returns the lathe mesh\r\n   * @see https://doc.babylonjs.com/how_to/parametric_shapes#lathe\r\n   */\n\n\n  LatheBuilder.CreateLathe = function (name, options, scene) {\n    if (scene === void 0) {\n      scene = null;\n    }\n\n    var arc = options.arc ? options.arc <= 0 || options.arc > 1 ? 1.0 : options.arc : 1.0;\n    var closed = options.closed === undefined ? true : options.closed;\n    var shape = options.shape;\n    var radius = options.radius || 1;\n    var tessellation = options.tessellation || 64;\n    var clip = options.clip || 0;\n    var updatable = options.updatable;\n\n    var sideOrientation = Mesh._GetDefaultSideOrientation(options.sideOrientation);\n\n    var cap = options.cap || Mesh.NO_CAP;\n    var pi2 = Math.PI * 2;\n    var paths = new Array();\n    var invertUV = options.invertUV || false;\n    var i = 0;\n    var p = 0;\n    var step = pi2 / tessellation * arc;\n    var rotated;\n    var path = new Array();\n\n    for (i = 0; i <= tessellation - clip; i++) {\n      var path = [];\n\n      if (cap == Mesh.CAP_START || cap == Mesh.CAP_ALL) {\n        path.push(new Vector3(0, shape[0].y, 0));\n        path.push(new Vector3(Math.cos(i * step) * shape[0].x * radius, shape[0].y, Math.sin(i * step) * shape[0].x * radius));\n      }\n\n      for (p = 0; p < shape.length; p++) {\n        rotated = new Vector3(Math.cos(i * step) * shape[p].x * radius, shape[p].y, Math.sin(i * step) * shape[p].x * radius);\n        path.push(rotated);\n      }\n\n      if (cap == Mesh.CAP_END || cap == Mesh.CAP_ALL) {\n        path.push(new Vector3(Math.cos(i * step) * shape[shape.length - 1].x * radius, shape[shape.length - 1].y, Math.sin(i * step) * shape[shape.length - 1].x * radius));\n        path.push(new Vector3(0, shape[shape.length - 1].y, 0));\n      }\n\n      paths.push(path);\n    } // lathe ribbon\n\n\n    var lathe = RibbonBuilder.CreateRibbon(name, {\n      pathArray: paths,\n      closeArray: closed,\n      sideOrientation: sideOrientation,\n      updatable: updatable,\n      invertUV: invertUV,\n      frontUVs: options.frontUVs,\n      backUVs: options.backUVs\n    }, scene);\n    return lathe;\n  };\n\n  return LatheBuilder;\n}();\n\nexport { LatheBuilder };","map":null,"metadata":{},"sourceType":"module"}