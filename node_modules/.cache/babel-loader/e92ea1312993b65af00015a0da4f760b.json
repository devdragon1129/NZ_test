{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../Misc/observable\";\n/**\r\n * Represents a gamepad control stick position\r\n */\n\nvar StickValues =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes the gamepad x and y control stick values\r\n   * @param x The x component of the gamepad control stick value\r\n   * @param y The y component of the gamepad control stick value\r\n   */\n  function StickValues(\n  /**\r\n   * The x component of the control stick\r\n   */\n  x,\n  /**\r\n   * The y component of the control stick\r\n   */\n  y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  return StickValues;\n}();\n\nexport { StickValues };\n/**\r\n * Represents a gamepad\r\n */\n\nvar Gamepad =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes the gamepad\r\n   * @param id The id of the gamepad\r\n   * @param index The index of the gamepad\r\n   * @param browserGamepad The browser gamepad\r\n   * @param leftStickX The x component of the left joystick\r\n   * @param leftStickY The y component of the left joystick\r\n   * @param rightStickX The x component of the right joystick\r\n   * @param rightStickY The y component of the right joystick\r\n   */\n  function Gamepad(\n  /**\r\n   * The id of the gamepad\r\n   */\n  id,\n  /**\r\n   * The index of the gamepad\r\n   */\n  index,\n  /**\r\n   * The browser gamepad\r\n   */\n  browserGamepad, leftStickX, leftStickY, rightStickX, rightStickY) {\n    if (leftStickX === void 0) {\n      leftStickX = 0;\n    }\n\n    if (leftStickY === void 0) {\n      leftStickY = 1;\n    }\n\n    if (rightStickX === void 0) {\n      rightStickX = 2;\n    }\n\n    if (rightStickY === void 0) {\n      rightStickY = 3;\n    }\n\n    this.id = id;\n    this.index = index;\n    this.browserGamepad = browserGamepad;\n    this._leftStick = {\n      x: 0,\n      y: 0\n    };\n    this._rightStick = {\n      x: 0,\n      y: 0\n    };\n    /** @hidden */\n\n    this._isConnected = true;\n    /**\r\n     * Specifies whether the left control stick should be Y-inverted\r\n     */\n\n    this._invertLeftStickY = false;\n    this.type = Gamepad.GAMEPAD;\n    this._leftStickAxisX = leftStickX;\n    this._leftStickAxisY = leftStickY;\n    this._rightStickAxisX = rightStickX;\n    this._rightStickAxisY = rightStickY;\n\n    if (this.browserGamepad.axes.length >= 2) {\n      this._leftStick = {\n        x: this.browserGamepad.axes[this._leftStickAxisX],\n        y: this.browserGamepad.axes[this._leftStickAxisY]\n      };\n    }\n\n    if (this.browserGamepad.axes.length >= 4) {\n      this._rightStick = {\n        x: this.browserGamepad.axes[this._rightStickAxisX],\n        y: this.browserGamepad.axes[this._rightStickAxisY]\n      };\n    }\n  }\n\n  Object.defineProperty(Gamepad.prototype, \"isConnected\", {\n    /**\r\n     * Specifies if the gamepad has been connected\r\n     */\n    get: function get() {\n      return this._isConnected;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Callback triggered when the left joystick has changed\r\n   * @param callback\r\n   */\n\n  Gamepad.prototype.onleftstickchanged = function (callback) {\n    this._onleftstickchanged = callback;\n  };\n  /**\r\n   * Callback triggered when the right joystick has changed\r\n   * @param callback\r\n   */\n\n\n  Gamepad.prototype.onrightstickchanged = function (callback) {\n    this._onrightstickchanged = callback;\n  };\n\n  Object.defineProperty(Gamepad.prototype, \"leftStick\", {\n    /**\r\n     * Gets the left joystick\r\n     */\n    get: function get() {\n      return this._leftStick;\n    },\n\n    /**\r\n     * Sets the left joystick values\r\n     */\n    set: function set(newValues) {\n      if (this._onleftstickchanged && (this._leftStick.x !== newValues.x || this._leftStick.y !== newValues.y)) {\n        this._onleftstickchanged(newValues);\n      }\n\n      this._leftStick = newValues;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Gamepad.prototype, \"rightStick\", {\n    /**\r\n     * Gets the right joystick\r\n     */\n    get: function get() {\n      return this._rightStick;\n    },\n\n    /**\r\n     * Sets the right joystick value\r\n     */\n    set: function set(newValues) {\n      if (this._onrightstickchanged && (this._rightStick.x !== newValues.x || this._rightStick.y !== newValues.y)) {\n        this._onrightstickchanged(newValues);\n      }\n\n      this._rightStick = newValues;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Updates the gamepad joystick positions\r\n   */\n\n  Gamepad.prototype.update = function () {\n    if (this._leftStick) {\n      this.leftStick = {\n        x: this.browserGamepad.axes[this._leftStickAxisX],\n        y: this.browserGamepad.axes[this._leftStickAxisY]\n      };\n\n      if (this._invertLeftStickY) {\n        this.leftStick.y *= -1;\n      }\n    }\n\n    if (this._rightStick) {\n      this.rightStick = {\n        x: this.browserGamepad.axes[this._rightStickAxisX],\n        y: this.browserGamepad.axes[this._rightStickAxisY]\n      };\n    }\n  };\n  /**\r\n   * Disposes the gamepad\r\n   */\n\n\n  Gamepad.prototype.dispose = function () {};\n  /**\r\n   * Represents a gamepad controller\r\n   */\n\n\n  Gamepad.GAMEPAD = 0;\n  /**\r\n   * Represents a generic controller\r\n   */\n\n  Gamepad.GENERIC = 1;\n  /**\r\n   * Represents an XBox controller\r\n   */\n\n  Gamepad.XBOX = 2;\n  /**\r\n   * Represents a pose-enabled controller\r\n   */\n\n  Gamepad.POSE_ENABLED = 3;\n  /**\r\n   * Represents an Dual Shock controller\r\n   */\n\n  Gamepad.DUALSHOCK = 4;\n  return Gamepad;\n}();\n\nexport { Gamepad };\n/**\r\n * Represents a generic gamepad\r\n */\n\nvar GenericPad =\n/** @class */\nfunction (_super) {\n  __extends(GenericPad, _super);\n  /**\r\n   * Initializes the generic gamepad\r\n   * @param id The id of the generic gamepad\r\n   * @param index The index of the generic gamepad\r\n   * @param browserGamepad The browser gamepad\r\n   */\n\n\n  function GenericPad(id, index, browserGamepad) {\n    var _this = _super.call(this, id, index, browserGamepad) || this;\n    /**\r\n     * Observable triggered when a button has been pressed\r\n     */\n\n\n    _this.onButtonDownObservable = new Observable();\n    /**\r\n     * Observable triggered when a button has been released\r\n     */\n\n    _this.onButtonUpObservable = new Observable();\n    _this.type = Gamepad.GENERIC;\n    _this._buttons = new Array(browserGamepad.buttons.length);\n    return _this;\n  }\n  /**\r\n   * Callback triggered when a button has been pressed\r\n   * @param callback Called when a button has been pressed\r\n   */\n\n\n  GenericPad.prototype.onbuttondown = function (callback) {\n    this._onbuttondown = callback;\n  };\n  /**\r\n   * Callback triggered when a button has been released\r\n   * @param callback Called when a button has been released\r\n   */\n\n\n  GenericPad.prototype.onbuttonup = function (callback) {\n    this._onbuttonup = callback;\n  };\n\n  GenericPad.prototype._setButtonValue = function (newValue, currentValue, buttonIndex) {\n    if (newValue !== currentValue) {\n      if (newValue === 1) {\n        if (this._onbuttondown) {\n          this._onbuttondown(buttonIndex);\n        }\n\n        this.onButtonDownObservable.notifyObservers(buttonIndex);\n      }\n\n      if (newValue === 0) {\n        if (this._onbuttonup) {\n          this._onbuttonup(buttonIndex);\n        }\n\n        this.onButtonUpObservable.notifyObservers(buttonIndex);\n      }\n    }\n\n    return newValue;\n  };\n  /**\r\n   * Updates the generic gamepad\r\n   */\n\n\n  GenericPad.prototype.update = function () {\n    _super.prototype.update.call(this);\n\n    for (var index = 0; index < this._buttons.length; index++) {\n      this._buttons[index] = this._setButtonValue(this.browserGamepad.buttons[index].value, this._buttons[index], index);\n    }\n  };\n  /**\r\n   * Disposes the generic gamepad\r\n   */\n\n\n  GenericPad.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.onButtonDownObservable.clear();\n    this.onButtonUpObservable.clear();\n  };\n\n  return GenericPad;\n}(Gamepad);\n\nexport { GenericPad };","map":null,"metadata":{},"sourceType":"module"}