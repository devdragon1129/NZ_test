{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport \"../Shaders/kernelBlur.fragment\";\nimport \"../Shaders/kernelBlur.vertex\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize, serializeAsVector2, SerializationHelper } from '../Misc/decorators';\n/**\r\n * The Blur Post Process which blurs an image based on a kernel and direction.\r\n * Can be used twice in x and y directions to perform a guassian blur in two passes.\r\n */\n\nvar BlurPostProcess =\n/** @class */\nfunction (_super) {\n  __extends(BlurPostProcess, _super);\n  /**\r\n   * Creates a new instance BlurPostProcess\r\n   * @param name The name of the effect.\r\n   * @param direction The direction in which to blur the image.\r\n   * @param kernel The size of the kernel to be used when computing the blur. eg. Size of 3 will blur the center pixel by 2 pixels surrounding it.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass. (Use 1.0 for full size)\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function BlurPostProcess(name, direction, kernel, options, camera, samplingMode, engine, reusable, textureType, defines, blockCompilation) {\n    if (samplingMode === void 0) {\n      samplingMode = Texture.BILINEAR_SAMPLINGMODE;\n    }\n\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (defines === void 0) {\n      defines = \"\";\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"kernelBlur\", [\"delta\", \"direction\", \"cameraMinMaxZ\"], [\"circleOfConfusionSampler\"], options, camera, samplingMode, engine, reusable, null, textureType, \"kernelBlur\", {\n      varyingCount: 0,\n      depCount: 0\n    }, true) || this;\n\n    _this.blockCompilation = blockCompilation;\n    _this._packedFloat = false;\n    _this._staticDefines = \"\";\n    _this._staticDefines = defines;\n    _this.direction = direction;\n\n    _this.onApplyObservable.add(function (effect) {\n      if (_this._outputTexture) {\n        effect.setFloat2('delta', 1 / _this._outputTexture.width * _this.direction.x, 1 / _this._outputTexture.height * _this.direction.y);\n      } else {\n        effect.setFloat2('delta', 1 / _this.width * _this.direction.x, 1 / _this.height * _this.direction.y);\n      }\n    });\n\n    _this.kernel = kernel;\n    return _this;\n  }\n\n  Object.defineProperty(BlurPostProcess.prototype, \"kernel\", {\n    /**\r\n     * Gets the length in pixels of the blur sample region\r\n     */\n    get: function get() {\n      return this._idealKernel;\n    },\n\n    /**\r\n     * Sets the length in pixels of the blur sample region\r\n     */\n    set: function set(v) {\n      if (this._idealKernel === v) {\n        return;\n      }\n\n      v = Math.max(v, 1);\n      this._idealKernel = v;\n      this._kernel = this._nearestBestKernel(v);\n\n      if (!this.blockCompilation) {\n        this._updateParameters();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BlurPostProcess.prototype, \"packedFloat\", {\n    /**\r\n     * Gets wether or not the blur is unpacking/repacking floats\r\n     */\n    get: function get() {\n      return this._packedFloat;\n    },\n\n    /**\r\n     * Sets wether or not the blur needs to unpack/repack floats\r\n     */\n    set: function set(v) {\n      if (this._packedFloat === v) {\n        return;\n      }\n\n      this._packedFloat = v;\n\n      if (!this.blockCompilation) {\n        this._updateParameters();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"BlurPostProcess\" string\r\n   */\n\n  BlurPostProcess.prototype.getClassName = function () {\n    return \"BlurPostProcess\";\n  };\n  /**\r\n   * Updates the effect with the current post process compile time values and recompiles the shader.\r\n   * @param defines Define statements that should be added at the beginning of the shader. (default: null)\r\n   * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\r\n   * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\r\n   * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n   * @param onCompiled Called when the shader has been compiled.\r\n   * @param onError Called if there is an error when compiling a shader.\r\n   */\n\n\n  BlurPostProcess.prototype.updateEffect = function (defines, uniforms, samplers, indexParameters, onCompiled, onError) {\n    if (defines === void 0) {\n      defines = null;\n    }\n\n    if (uniforms === void 0) {\n      uniforms = null;\n    }\n\n    if (samplers === void 0) {\n      samplers = null;\n    }\n\n    this._updateParameters(onCompiled, onError);\n  };\n\n  BlurPostProcess.prototype._updateParameters = function (onCompiled, onError) {\n    // Generate sampling offsets and weights\n    var N = this._kernel;\n    var centerIndex = (N - 1) / 2; // Generate Gaussian sampling weights over kernel\n\n    var offsets = [];\n    var weights = [];\n    var totalWeight = 0;\n\n    for (var i = 0; i < N; i++) {\n      var u = i / (N - 1);\n\n      var w = this._gaussianWeight(u * 2.0 - 1);\n\n      offsets[i] = i - centerIndex;\n      weights[i] = w;\n      totalWeight += w;\n    } // Normalize weights\n\n\n    for (var i = 0; i < weights.length; i++) {\n      weights[i] /= totalWeight;\n    } // Optimize: combine samples to take advantage of hardware linear sampling\n    // Walk from left to center, combining pairs (symmetrically)\n\n\n    var linearSamplingWeights = [];\n    var linearSamplingOffsets = [];\n    var linearSamplingMap = [];\n\n    for (var i = 0; i <= centerIndex; i += 2) {\n      var j = Math.min(i + 1, Math.floor(centerIndex));\n      var singleCenterSample = i === j;\n\n      if (singleCenterSample) {\n        linearSamplingMap.push({\n          o: offsets[i],\n          w: weights[i]\n        });\n      } else {\n        var sharedCell = j === centerIndex;\n        var weightLinear = weights[i] + weights[j] * (sharedCell ? .5 : 1.);\n        var offsetLinear = offsets[i] + 1 / (1 + weights[i] / weights[j]);\n\n        if (offsetLinear === 0) {\n          linearSamplingMap.push({\n            o: offsets[i],\n            w: weights[i]\n          });\n          linearSamplingMap.push({\n            o: offsets[i + 1],\n            w: weights[i + 1]\n          });\n        } else {\n          linearSamplingMap.push({\n            o: offsetLinear,\n            w: weightLinear\n          });\n          linearSamplingMap.push({\n            o: -offsetLinear,\n            w: weightLinear\n          });\n        }\n      }\n    }\n\n    for (var i = 0; i < linearSamplingMap.length; i++) {\n      linearSamplingOffsets[i] = linearSamplingMap[i].o;\n      linearSamplingWeights[i] = linearSamplingMap[i].w;\n    } // Replace with optimized\n\n\n    offsets = linearSamplingOffsets;\n    weights = linearSamplingWeights; // Generate shaders\n\n    var maxVaryingRows = this.getEngine().getCaps().maxVaryingVectors;\n    var freeVaryingVec2 = Math.max(maxVaryingRows, 0.) - 1; // Because of sampleCenter\n\n    var varyingCount = Math.min(offsets.length, freeVaryingVec2);\n    var defines = \"\";\n    defines += this._staticDefines; // The DOF fragment should ignore the center pixel when looping as it is handled manualy in the fragment shader.\n\n    if (this._staticDefines.indexOf(\"DOF\") != -1) {\n      defines += \"#define CENTER_WEIGHT \" + this._glslFloat(weights[varyingCount - 1]) + \"\\r\\n\";\n      varyingCount--;\n    }\n\n    for (var i = 0; i < varyingCount; i++) {\n      defines += \"#define KERNEL_OFFSET\" + i + \" \" + this._glslFloat(offsets[i]) + \"\\r\\n\";\n      defines += \"#define KERNEL_WEIGHT\" + i + \" \" + this._glslFloat(weights[i]) + \"\\r\\n\";\n    }\n\n    var depCount = 0;\n\n    for (var i = freeVaryingVec2; i < offsets.length; i++) {\n      defines += \"#define KERNEL_DEP_OFFSET\" + depCount + \" \" + this._glslFloat(offsets[i]) + \"\\r\\n\";\n      defines += \"#define KERNEL_DEP_WEIGHT\" + depCount + \" \" + this._glslFloat(weights[i]) + \"\\r\\n\";\n      depCount++;\n    }\n\n    if (this.packedFloat) {\n      defines += \"#define PACKEDFLOAT 1\";\n    }\n\n    this.blockCompilation = false;\n\n    _super.prototype.updateEffect.call(this, defines, null, null, {\n      varyingCount: varyingCount,\n      depCount: depCount\n    }, onCompiled, onError);\n  };\n  /**\r\n   * Best kernels are odd numbers that when divided by 2, their integer part is even, so 5, 9 or 13.\r\n   * Other odd kernels optimize correctly but require proportionally more samples, even kernels are\r\n   * possible but will produce minor visual artifacts. Since each new kernel requires a new shader we\r\n   * want to minimize kernel changes, having gaps between physical kernels is helpful in that regard.\r\n   * The gaps between physical kernels are compensated for in the weighting of the samples\r\n   * @param idealKernel Ideal blur kernel.\r\n   * @return Nearest best kernel.\r\n   */\n\n\n  BlurPostProcess.prototype._nearestBestKernel = function (idealKernel) {\n    var v = Math.round(idealKernel);\n\n    for (var _i = 0, _a = [v, v - 1, v + 1, v - 2, v + 2]; _i < _a.length; _i++) {\n      var k = _a[_i];\n\n      if (k % 2 !== 0 && Math.floor(k / 2) % 2 === 0 && k > 0) {\n        return Math.max(k, 3);\n      }\n    }\n\n    return Math.max(v, 3);\n  };\n  /**\r\n   * Calculates the value of a Gaussian distribution with sigma 3 at a given point.\r\n   * @param x The point on the Gaussian distribution to sample.\r\n   * @return the value of the Gaussian function at x.\r\n   */\n\n\n  BlurPostProcess.prototype._gaussianWeight = function (x) {\n    //reference: Engines/ImageProcessingBlur.cpp #dcc760\n    // We are evaluating the Gaussian (normal) distribution over a kernel parameter space of [-1,1],\n    // so we truncate at three standard deviations by setting stddev (sigma) to 1/3.\n    // The choice of 3-sigma truncation is common but arbitrary, and means that the signal is\n    // truncated at around 1.3% of peak strength.\n    //the distribution is scaled to account for the difference between the actual kernel size and the requested kernel size\n    var sigma = 1 / 3;\n    var denominator = Math.sqrt(2.0 * Math.PI) * sigma;\n    var exponent = -(x * x / (2.0 * sigma * sigma));\n    var weight = 1.0 / denominator * Math.exp(exponent);\n    return weight;\n  };\n  /**\r\n    * Generates a string that can be used as a floating point number in GLSL.\r\n    * @param x Value to print.\r\n    * @param decimalFigures Number of decimal places to print the number to (excluding trailing 0s).\r\n    * @return GLSL float string.\r\n    */\n\n\n  BlurPostProcess.prototype._glslFloat = function (x, decimalFigures) {\n    if (decimalFigures === void 0) {\n      decimalFigures = 8;\n    }\n\n    return x.toFixed(decimalFigures).replace(/0+$/, '');\n  };\n  /** @hidden */\n\n\n  BlurPostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new BlurPostProcess(parsedPostProcess.name, parsedPostProcess.direction, parsedPostProcess.kernel, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable, parsedPostProcess.textureType, undefined, false);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize(\"kernel\")], BlurPostProcess.prototype, \"_kernel\", void 0);\n\n  __decorate([serialize(\"packedFloat\")], BlurPostProcess.prototype, \"_packedFloat\", void 0);\n\n  __decorate([serializeAsVector2()], BlurPostProcess.prototype, \"direction\", void 0);\n\n  return BlurPostProcess;\n}(PostProcess);\n\nexport { BlurPostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.BlurPostProcess\"] = BlurPostProcess;","map":null,"metadata":{},"sourceType":"module"}