{"ast":null,"code":"export var ASSET_TYPE = 'ASSET';\nexport var assetSource = {\n  beginDrag: function beginDrag(props) {\n    props.onBeginDrag(props.asset);\n    return {\n      asset: props.asset\n    };\n  },\n  canDrag: function canDrag(props) {\n    return !props.asset.isDisabled;\n  }\n}; // @ts-ignore\n\nexport var collect = function collect(connect, monitor) {\n  return {\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging()\n  };\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/AssetCard/AssetCard.dnd.ts"],"names":["ASSET_TYPE","assetSource","beginDrag","props","onBeginDrag","asset","canDrag","isDisabled","collect","connect","monitor","connectDragSource","dragSource","connectDragPreview","dragPreview","isDragging"],"mappings":"AAKA,OAAO,IAAMA,UAAU,GAAG,OAAnB;AAYP,OAAO,IAAMC,WAAuD,GAAG;AACrEC,EAAAA,SADqE,qBAC3DC,KAD2D,EACpD;AACfA,IAAAA,KAAK,CAACC,WAAN,CAAkBD,KAAK,CAACE,KAAxB;AACA,WAAO;AACLA,MAAAA,KAAK,EAAEF,KAAK,CAACE;AADR,KAAP;AAGD,GANoE;AAOrEC,EAAAA,OAPqE,mBAO7DH,KAP6D,EAOtD;AACb,WAAO,CAACA,KAAK,CAACE,KAAN,CAAYE,UAApB;AACD;AAToE,CAAhE,C,CAYP;;AACA,OAAO,IAAMC,OAA4C,GAAG,SAA/CA,OAA+C,CAACC,OAAD,EAAUC,OAAV,EAAsB;AAChF,SAAO;AACLC,IAAAA,iBAAiB,EAAEF,OAAO,CAACG,UAAR,EADd;AAELC,IAAAA,kBAAkB,EAAEJ,OAAO,CAACK,WAAR,EAFf;AAGLC,IAAAA,UAAU,EAAEL,OAAO,CAACK,UAAR;AAHP,GAAP;AAKD,CANM","sourcesContent":["import { DragSourceSpec, DragSourceCollector, ConnectDragSource, ConnectDragPreview } from 'react-dnd'\n\nimport { Asset } from 'modules/asset/types'\nimport { Props } from './AssetCard.types'\n\nexport const ASSET_TYPE = 'ASSET'\n\nexport type AssetCardDragObject = {\n  asset: Asset\n}\n\nexport type CollectedProps = {\n  connectDragSource: ConnectDragSource\n  connectDragPreview: ConnectDragPreview\n  isDragging: boolean\n}\n\nexport const assetSource: DragSourceSpec<Props, AssetCardDragObject> = {\n  beginDrag(props) {\n    props.onBeginDrag(props.asset)\n    return {\n      asset: props.asset\n    }\n  },\n  canDrag(props) {\n    return !props.asset.isDisabled\n  }\n}\n\n// @ts-ignore\nexport const collect: DragSourceCollector<CollectedProps> = (connect, monitor) => {\n  return {\n    connectDragSource: connect.dragSource(),\n    connectDragPreview: connect.dragPreview(),\n    isDragging: monitor.isDragging()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}