{"ast":null,"code":"import _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { action } from 'typesafe-actions';\nimport { buildTransactionPayload } from 'decentraland-dapps/dist/modules/transaction/utils';\nimport { getSelection } from './utils';\nexport var FETCH_LANDS_REQUEST = '[Request] Fetch Lands';\nexport var FETCH_LANDS_SUCCESS = '[Success] Fetch Lands';\nexport var FETCH_LANDS_FAILURE = '[Failure] Fetch Lands';\nexport var fetchLandsRequest = function fetchLandsRequest(address) {\n  return action(FETCH_LANDS_REQUEST, {\n    address: address\n  });\n};\nexport var fetchLandsSuccess = function fetchLandsSuccess(address, lands, authorizations) {\n  return action(FETCH_LANDS_SUCCESS, {\n    address: address,\n    lands: lands,\n    authorizations: authorizations\n  });\n};\nexport var fetchLandsFailure = function fetchLandsFailure(address, error) {\n  return action(FETCH_LANDS_FAILURE, {\n    address: address,\n    error: error\n  });\n};\nexport var TRANSFER_LAND_REQUEST = '[Request] Transfer Land';\nexport var TRANSFER_LAND_SUCCESS = '[Success] Transfer Land';\nexport var TRANSFER_LAND_FAILURE = '[Failure] Transfer Land';\nexport var transferLandRequest = function transferLandRequest(land, address) {\n  return action(TRANSFER_LAND_REQUEST, {\n    land: land,\n    address: address\n  });\n};\nexport var transferLandSuccess = function transferLandSuccess(land, address, chainId, txHash) {\n  return action(TRANSFER_LAND_SUCCESS, _objectSpread({\n    land: land,\n    address: address\n  }, buildTransactionPayload(chainId, txHash, {\n    id: land.id,\n    name: land.name,\n    address: address,\n    selection: getSelection(land)\n  })));\n};\nexport var transferLandFailure = function transferLandFailure(land, address, error) {\n  return action(TRANSFER_LAND_FAILURE, {\n    land: land,\n    address: address,\n    error: error\n  });\n};\nexport var EDIT_LAND_REQUEST = '[Request] Edit Land';\nexport var EDIT_LAND_SUCCESS = '[Success] Edit Land';\nexport var EDIT_LAND_FAILURE = '[Failure] Edit Land';\nexport var editLandRequest = function editLandRequest(land, name, description) {\n  return action(EDIT_LAND_REQUEST, {\n    land: land,\n    name: name,\n    description: description\n  });\n};\nexport var editLandSuccess = function editLandSuccess(land, name, description, chainId, txHash) {\n  return action(EDIT_LAND_SUCCESS, _objectSpread({\n    land: land,\n    name: name,\n    description: description\n  }, buildTransactionPayload(chainId, txHash, {\n    id: land.id,\n    name: name,\n    description: description,\n    selection: getSelection(land)\n  })));\n};\nexport var editLandFailure = function editLandFailure(land, name, description, error) {\n  return action(EDIT_LAND_FAILURE, {\n    land: land,\n    name: name,\n    description: description,\n    error: error\n  });\n};\nexport var SET_OPERATOR_REQUEST = '[Request] Set Operator';\nexport var SET_OPERATOR_SUCCESS = '[Success] Set Operator';\nexport var SET_OPERATOR_FAILURE = '[Failure] Set Operator';\nexport var setOperatorRequest = function setOperatorRequest(land, address) {\n  return action(SET_OPERATOR_REQUEST, {\n    land: land,\n    address: address\n  });\n};\nexport var setOperatorSuccess = function setOperatorSuccess(land, address, chainId, txHash) {\n  return action(SET_OPERATOR_SUCCESS, _objectSpread({\n    land: land,\n    address: address\n  }, buildTransactionPayload(chainId, txHash, {\n    id: land.id,\n    name: land.name,\n    address: address,\n    selection: getSelection(land)\n  })));\n};\nexport var setOperatorFailure = function setOperatorFailure(land, address, error) {\n  return action(SET_OPERATOR_FAILURE, {\n    land: land,\n    address: address,\n    error: error\n  });\n};\nexport var CREATE_ESTATE_REQUEST = '[Request] Create Estate';\nexport var CREATE_ESTATE_SUCCESS = '[Success] Create Estate';\nexport var CREATE_ESTATE_FAILURE = '[Failure] Create Estate';\nexport var createEstateRequest = function createEstateRequest(name, description, coords) {\n  return action(CREATE_ESTATE_REQUEST, {\n    name: name,\n    description: description,\n    coords: coords\n  });\n};\nexport var createEstateSuccess = function createEstateSuccess(name, description, coords, chainId, txHash) {\n  return action(CREATE_ESTATE_SUCCESS, _objectSpread({\n    name: name,\n    description: description,\n    coords: coords\n  }, buildTransactionPayload(chainId, txHash, {\n    name: name,\n    description: description,\n    size: coords.length,\n    selection: coords\n  })));\n};\nexport var createEstateFailure = function createEstateFailure(name, description, coords, error) {\n  return action(CREATE_ESTATE_FAILURE, {\n    name: name,\n    description: description,\n    coords: coords,\n    error: error\n  });\n};\nexport var EDIT_ESTATE_REQUEST = '[Request] Edit Estate';\nexport var EDIT_ESTATE_SUCCESS = '[Success] Edit Estate';\nexport var EDIT_ESTATE_FAILURE = '[Failure] Edit Estate';\nexport var editEstateRequest = function editEstateRequest(land, toAdd, toRemove) {\n  return action(EDIT_ESTATE_REQUEST, {\n    land: land,\n    toAdd: toAdd,\n    toRemove: toRemove\n  });\n};\nexport var editEstateSuccess = function editEstateSuccess(land, coords, type, chainId, txHash) {\n  return action(EDIT_ESTATE_SUCCESS, _objectSpread({\n    land: land,\n    coords: coords,\n    type: type\n  }, buildTransactionPayload(chainId, txHash, {\n    id: land.id,\n    name: land.name,\n    count: coords.length,\n    type: type,\n    selection: getSelection(land)\n  })));\n};\nexport var editEstateFailure = function editEstateFailure(land, toAdd, toRemove, error) {\n  return action(EDIT_ESTATE_FAILURE, {\n    land: land,\n    toAdd: toAdd,\n    toRemove: toRemove,\n    error: error\n  });\n};\nexport var DISSOLVE_ESTATE_REQUEST = '[Request] Dissolve Estate';\nexport var DISSOLVE_ESTATE_SUCCESS = '[Success] Dissolve Estate';\nexport var DISSOLVE_ESTATE_FAILURE = '[Failure] Dissolve Estate';\nexport var dissolveEstateRequest = function dissolveEstateRequest(land) {\n  return action(DISSOLVE_ESTATE_REQUEST, {\n    land: land\n  });\n};\nexport var dissolveEstateSuccess = function dissolveEstateSuccess(land, chainId, txHash) {\n  return action(DISSOLVE_ESTATE_SUCCESS, _objectSpread({\n    land: land\n  }, buildTransactionPayload(chainId, txHash, {\n    id: land.id,\n    name: land.name,\n    selection: getSelection(land)\n  })));\n};\nexport var dissolveEstateFailure = function dissolveEstateFailure(land, error) {\n  return action(DISSOLVE_ESTATE_FAILURE, {\n    land: land,\n    error: error\n  });\n};\nexport var SET_UPDATE_MANAGER_REQUEST = '[Request] Set Update Manager';\nexport var SET_UPDATE_MANAGER_SUCCESS = '[Success] Set Update Manager';\nexport var SET_UPDATE_MANAGER_FAILURE = '[Failure] Set Update Manager';\nexport var setUpdateManagerRequest = function setUpdateManagerRequest(address, type, isApproved) {\n  return action(SET_UPDATE_MANAGER_REQUEST, {\n    address: address,\n    isApproved: isApproved,\n    type: type\n  });\n};\nexport var setUpdateManagerSuccess = function setUpdateManagerSuccess(address, type, isApproved, chainId, txHash) {\n  return action(SET_UPDATE_MANAGER_SUCCESS, _objectSpread({\n    address: address,\n    type: type,\n    isApproved: isApproved\n  }, buildTransactionPayload(chainId, txHash, {\n    address: address,\n    type: type,\n    isApproved: isApproved\n  })));\n};\nexport var setUpdateManagerFailure = function setUpdateManagerFailure(address, type, isApproved, error) {\n  return action(SET_UPDATE_MANAGER_FAILURE, {\n    address: address,\n    type: type,\n    isApproved: isApproved,\n    error: error\n  });\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/land/actions.ts"],"names":["action","buildTransactionPayload","getSelection","FETCH_LANDS_REQUEST","FETCH_LANDS_SUCCESS","FETCH_LANDS_FAILURE","fetchLandsRequest","address","fetchLandsSuccess","lands","authorizations","fetchLandsFailure","error","TRANSFER_LAND_REQUEST","TRANSFER_LAND_SUCCESS","TRANSFER_LAND_FAILURE","transferLandRequest","land","transferLandSuccess","chainId","txHash","id","name","selection","transferLandFailure","EDIT_LAND_REQUEST","EDIT_LAND_SUCCESS","EDIT_LAND_FAILURE","editLandRequest","description","editLandSuccess","editLandFailure","SET_OPERATOR_REQUEST","SET_OPERATOR_SUCCESS","SET_OPERATOR_FAILURE","setOperatorRequest","setOperatorSuccess","setOperatorFailure","CREATE_ESTATE_REQUEST","CREATE_ESTATE_SUCCESS","CREATE_ESTATE_FAILURE","createEstateRequest","coords","createEstateSuccess","size","length","createEstateFailure","EDIT_ESTATE_REQUEST","EDIT_ESTATE_SUCCESS","EDIT_ESTATE_FAILURE","editEstateRequest","toAdd","toRemove","editEstateSuccess","type","count","editEstateFailure","DISSOLVE_ESTATE_REQUEST","DISSOLVE_ESTATE_SUCCESS","DISSOLVE_ESTATE_FAILURE","dissolveEstateRequest","dissolveEstateSuccess","dissolveEstateFailure","SET_UPDATE_MANAGER_REQUEST","SET_UPDATE_MANAGER_SUCCESS","SET_UPDATE_MANAGER_FAILURE","setUpdateManagerRequest","isApproved","setUpdateManagerSuccess","setUpdateManagerFailure"],"mappings":"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","sourcesContent":["import { action } from 'typesafe-actions'\nimport { ChainId } from '@dcl/schemas'\nimport { buildTransactionPayload } from 'decentraland-dapps/dist/modules/transaction/utils'\nimport { Coord } from 'decentraland-ui'\nimport { Land, LandType, Authorization } from './types'\nimport { getSelection } from './utils'\n\nexport const FETCH_LANDS_REQUEST = '[Request] Fetch Lands'\nexport const FETCH_LANDS_SUCCESS = '[Success] Fetch Lands'\nexport const FETCH_LANDS_FAILURE = '[Failure] Fetch Lands'\n\nexport const fetchLandsRequest = (address: string) => action(FETCH_LANDS_REQUEST, { address })\nexport const fetchLandsSuccess = (address: string, lands: Land[], authorizations: Authorization[]) =>\n  action(FETCH_LANDS_SUCCESS, { address, lands, authorizations })\nexport const fetchLandsFailure = (address: string, error: string) => action(FETCH_LANDS_FAILURE, { address, error })\n\nexport type FetchLandsRequestAction = ReturnType<typeof fetchLandsRequest>\nexport type FetchLandsSuccessAction = ReturnType<typeof fetchLandsSuccess>\nexport type FetchLandsFailureAction = ReturnType<typeof fetchLandsFailure>\n\nexport const TRANSFER_LAND_REQUEST = '[Request] Transfer Land'\nexport const TRANSFER_LAND_SUCCESS = '[Success] Transfer Land'\nexport const TRANSFER_LAND_FAILURE = '[Failure] Transfer Land'\n\nexport const transferLandRequest = (land: Land, address: string) => action(TRANSFER_LAND_REQUEST, { land, address })\nexport const transferLandSuccess = (land: Land, address: string, chainId: ChainId, txHash: string) =>\n  action(TRANSFER_LAND_SUCCESS, {\n    land,\n    address,\n    ...buildTransactionPayload(chainId, txHash, {\n      id: land.id,\n      name: land.name,\n      address,\n      selection: getSelection(land)\n    })\n  })\nexport const transferLandFailure = (land: Land, address: string, error: string) => action(TRANSFER_LAND_FAILURE, { land, address, error })\n\nexport type TransferLandRequestAction = ReturnType<typeof transferLandRequest>\nexport type TransferLandSuccessAction = ReturnType<typeof transferLandSuccess>\nexport type TransferLandFailureAction = ReturnType<typeof transferLandFailure>\n\nexport const EDIT_LAND_REQUEST = '[Request] Edit Land'\nexport const EDIT_LAND_SUCCESS = '[Success] Edit Land'\nexport const EDIT_LAND_FAILURE = '[Failure] Edit Land'\n\nexport const editLandRequest = (land: Land, name: string, description: string) => action(EDIT_LAND_REQUEST, { land, name, description })\nexport const editLandSuccess = (land: Land, name: string, description: string, chainId: ChainId, txHash: string) =>\n  action(EDIT_LAND_SUCCESS, {\n    land,\n    name,\n    description,\n    ...buildTransactionPayload(chainId, txHash, {\n      id: land.id,\n      name,\n      description,\n      selection: getSelection(land)\n    })\n  })\nexport const editLandFailure = (land: Land, name: string, description: string, error: string) =>\n  action(EDIT_LAND_FAILURE, { land, name, description, error })\n\nexport type EditLandRequestAction = ReturnType<typeof editLandRequest>\nexport type EditLandSuccessAction = ReturnType<typeof editLandSuccess>\nexport type EditLandFailureAction = ReturnType<typeof editLandFailure>\n\nexport const SET_OPERATOR_REQUEST = '[Request] Set Operator'\nexport const SET_OPERATOR_SUCCESS = '[Success] Set Operator'\nexport const SET_OPERATOR_FAILURE = '[Failure] Set Operator'\n\nexport const setOperatorRequest = (land: Land, address: string | null) => action(SET_OPERATOR_REQUEST, { land, address })\nexport const setOperatorSuccess = (land: Land, address: string | null, chainId: ChainId, txHash: string) =>\n  action(SET_OPERATOR_SUCCESS, {\n    land,\n    address,\n    ...buildTransactionPayload(chainId, txHash, {\n      id: land.id,\n      name: land.name,\n      address,\n      selection: getSelection(land)\n    })\n  })\nexport const setOperatorFailure = (land: Land, address: string | null, error: string) =>\n  action(SET_OPERATOR_FAILURE, { land, address, error })\n\nexport type SetOperatorRequestAction = ReturnType<typeof setOperatorRequest>\nexport type SetOperatorSuccessAction = ReturnType<typeof setOperatorSuccess>\nexport type SetOperatorFailureAction = ReturnType<typeof setOperatorFailure>\n\nexport const CREATE_ESTATE_REQUEST = '[Request] Create Estate'\nexport const CREATE_ESTATE_SUCCESS = '[Success] Create Estate'\nexport const CREATE_ESTATE_FAILURE = '[Failure] Create Estate'\n\nexport const createEstateRequest = (name: string, description: string, coords: Coord[]) =>\n  action(CREATE_ESTATE_REQUEST, { name, description, coords })\nexport const createEstateSuccess = (name: string, description: string, coords: Coord[], chainId: ChainId, txHash: string) =>\n  action(CREATE_ESTATE_SUCCESS, {\n    name,\n    description,\n    coords,\n    ...buildTransactionPayload(chainId, txHash, {\n      name,\n      description,\n      size: coords.length,\n      selection: coords\n    })\n  })\nexport const createEstateFailure = (name: string, description: string, coords: Coord[], error: string) =>\n  action(CREATE_ESTATE_FAILURE, { name, description, coords, error })\n\nexport type CreateEstateRequestAction = ReturnType<typeof createEstateRequest>\nexport type CreateEstateSuccessAction = ReturnType<typeof createEstateSuccess>\nexport type CreateEstateFailureAction = ReturnType<typeof createEstateFailure>\n\nexport const EDIT_ESTATE_REQUEST = '[Request] Edit Estate'\nexport const EDIT_ESTATE_SUCCESS = '[Success] Edit Estate'\nexport const EDIT_ESTATE_FAILURE = '[Failure] Edit Estate'\n\nexport const editEstateRequest = (land: Land, toAdd: Coord[], toRemove: Coord[]) => action(EDIT_ESTATE_REQUEST, { land, toAdd, toRemove })\nexport const editEstateSuccess = (land: Land, coords: Coord[], type: 'add' | 'remove', chainId: ChainId, txHash: string) =>\n  action(EDIT_ESTATE_SUCCESS, {\n    land,\n    coords,\n    type,\n    ...buildTransactionPayload(chainId, txHash, {\n      id: land.id,\n      name: land.name,\n      count: coords.length,\n      type,\n      selection: getSelection(land)\n    })\n  })\nexport const editEstateFailure = (land: Land, toAdd: Coord[], toRemove: Coord[], error: string) =>\n  action(EDIT_ESTATE_FAILURE, { land, toAdd, toRemove, error })\n\nexport type EditEstateRequestAction = ReturnType<typeof editEstateRequest>\nexport type EditEstateSuccessAction = ReturnType<typeof editEstateSuccess>\nexport type EditEstateFailureAction = ReturnType<typeof editEstateFailure>\n\nexport const DISSOLVE_ESTATE_REQUEST = '[Request] Dissolve Estate'\nexport const DISSOLVE_ESTATE_SUCCESS = '[Success] Dissolve Estate'\nexport const DISSOLVE_ESTATE_FAILURE = '[Failure] Dissolve Estate'\n\nexport const dissolveEstateRequest = (land: Land) => action(DISSOLVE_ESTATE_REQUEST, { land })\nexport const dissolveEstateSuccess = (land: Land, chainId: ChainId, txHash: string) =>\n  action(DISSOLVE_ESTATE_SUCCESS, {\n    land,\n    ...buildTransactionPayload(chainId, txHash, {\n      id: land.id,\n      name: land.name,\n      selection: getSelection(land)\n    })\n  })\nexport const dissolveEstateFailure = (land: Land, error: string) => action(DISSOLVE_ESTATE_FAILURE, { land, error })\n\nexport type DissolveEstateRequestAction = ReturnType<typeof dissolveEstateRequest>\nexport type DissolveEstateSuccessAction = ReturnType<typeof dissolveEstateSuccess>\nexport type DissolveEstateFailureAction = ReturnType<typeof dissolveEstateFailure>\n\nexport const SET_UPDATE_MANAGER_REQUEST = '[Request] Set Update Manager'\nexport const SET_UPDATE_MANAGER_SUCCESS = '[Success] Set Update Manager'\nexport const SET_UPDATE_MANAGER_FAILURE = '[Failure] Set Update Manager'\n\nexport const setUpdateManagerRequest = (address: string, type: LandType, isApproved: boolean) =>\n  action(SET_UPDATE_MANAGER_REQUEST, { address, isApproved, type })\nexport const setUpdateManagerSuccess = (address: string, type: LandType, isApproved: boolean, chainId: ChainId, txHash: string) =>\n  action(SET_UPDATE_MANAGER_SUCCESS, {\n    address,\n    type,\n    isApproved,\n    ...buildTransactionPayload(chainId, txHash, {\n      address,\n      type,\n      isApproved\n    })\n  })\nexport const setUpdateManagerFailure = (address: string, type: LandType, isApproved: boolean, error: string) =>\n  action(SET_UPDATE_MANAGER_FAILURE, { address, type, isApproved, error })\n\nexport type SetUpdateManagerRequestAction = ReturnType<typeof setUpdateManagerRequest>\nexport type SetUpdateManagerSuccessAction = ReturnType<typeof setUpdateManagerSuccess>\nexport type SetUpdateManagerFailureAction = ReturnType<typeof setUpdateManagerFailure>\n"]},"metadata":{},"sourceType":"module"}