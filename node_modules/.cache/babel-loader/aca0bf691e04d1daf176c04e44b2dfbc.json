{"ast":null,"code":"/**\r\n * Helper to manipulate strings\r\n */\nvar StringTools =\n/** @class */\nfunction () {\n  function StringTools() {}\n  /**\r\n   * Checks for a matching suffix at the end of a string (for ES5 and lower)\r\n   * @param str Source string\r\n   * @param suffix Suffix to search for in the source string\r\n   * @returns Boolean indicating whether the suffix was found (true) or not (false)\r\n   */\n\n\n  StringTools.EndsWith = function (str, suffix) {\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n  };\n  /**\r\n   * Checks for a matching suffix at the beginning of a string (for ES5 and lower)\r\n   * @param str Source string\r\n   * @param suffix Suffix to search for in the source string\r\n   * @returns Boolean indicating whether the suffix was found (true) or not (false)\r\n   */\n\n\n  StringTools.StartsWith = function (str, suffix) {\n    if (!str) {\n      return false;\n    }\n\n    return str.indexOf(suffix) === 0;\n  };\n  /**\r\n   * Decodes a buffer into a string\r\n   * @param buffer The buffer to decode\r\n   * @returns The decoded string\r\n   */\n\n\n  StringTools.Decode = function (buffer) {\n    if (typeof TextDecoder !== \"undefined\") {\n      return new TextDecoder().decode(buffer);\n    }\n\n    var result = \"\";\n\n    for (var i = 0; i < buffer.byteLength; i++) {\n      result += String.fromCharCode(buffer[i]);\n    }\n\n    return result;\n  };\n  /**\r\n   * Encode a buffer to a base64 string\r\n   * @param buffer defines the buffer to encode\r\n   * @returns the encoded string\r\n   */\n\n\n  StringTools.EncodeArrayBufferToBase64 = function (buffer) {\n    var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    var output = \"\";\n    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n    var i = 0;\n    var bytes = ArrayBuffer.isView(buffer) ? new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength) : new Uint8Array(buffer);\n\n    while (i < bytes.length) {\n      chr1 = bytes[i++];\n      chr2 = i < bytes.length ? bytes[i++] : Number.NaN;\n      chr3 = i < bytes.length ? bytes[i++] : Number.NaN;\n      enc1 = chr1 >> 2;\n      enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n      enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n      enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\n    }\n\n    return output;\n  };\n  /**\r\n  * Converts a number to string and pads with preceeding zeroes until it is of specified length.\r\n  * @param num the number to convert and pad\r\n  * @param length the expected length of the string\r\n  * @returns the padded string\r\n  */\n\n\n  StringTools.PadNumber = function (num, length) {\n    var str = String(num);\n\n    while (str.length < length) {\n      str = \"0\" + str;\n    }\n\n    return str;\n  };\n\n  return StringTools;\n}();\n\nexport { StringTools };","map":null,"metadata":{},"sourceType":"module"}