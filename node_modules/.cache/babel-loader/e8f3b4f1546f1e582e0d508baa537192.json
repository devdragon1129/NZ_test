{"ast":null,"code":"(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.Parallax = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function e(t, n, r) {\n    function s(o, u) {\n      if (!n[o]) {\n        if (!t[o]) {\n          var a = typeof require == \"function\" && require;\n          if (!u && a) return a(o, !0);\n          if (i) return i(o, !0);\n          var f = new Error(\"Cannot find module '\" + o + \"'\");\n          throw f.code = \"MODULE_NOT_FOUND\", f;\n        }\n\n        var l = n[o] = {\n          exports: {}\n        };\n        t[o][0].call(l.exports, function (e) {\n          var n = t[o][1][e];\n          return s(n ? n : e);\n        }, l, l.exports, e, t, n, r);\n      }\n\n      return n[o].exports;\n    }\n\n    var i = typeof require == \"function\" && require;\n\n    for (var o = 0; o < r.length; o++) {\n      s(r[o]);\n    }\n\n    return s;\n  }({\n    1: [function (require, module, exports) {\n      /*\n      object-assign\n      (c) Sindre Sorhus\n      @license MIT\n      */\n      'use strict';\n      /* eslint-disable no-unused-vars */\n\n      var getOwnPropertySymbols = Object.getOwnPropertySymbols;\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n      var propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\n      function toObject(val) {\n        if (val === null || val === undefined) {\n          throw new TypeError('Object.assign cannot be called with null or undefined');\n        }\n\n        return Object(val);\n      }\n\n      function shouldUseNative() {\n        try {\n          if (!Object.assign) {\n            return false;\n          } // Detect buggy property enumeration order in older V8 versions.\n          // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n          var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n          test1[5] = 'de';\n\n          if (Object.getOwnPropertyNames(test1)[0] === '5') {\n            return false;\n          } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n          var test2 = {};\n\n          for (var i = 0; i < 10; i++) {\n            test2['_' + String.fromCharCode(i)] = i;\n          }\n\n          var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n            return test2[n];\n          });\n\n          if (order2.join('') !== '0123456789') {\n            return false;\n          } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n          var test3 = {};\n          'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n            test3[letter] = letter;\n          });\n\n          if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n            return false;\n          }\n\n          return true;\n        } catch (err) {\n          // We don't expect any of the above to throw, but better to be safe.\n          return false;\n        }\n      }\n\n      module.exports = shouldUseNative() ? Object.assign : function (target, source) {\n        var from;\n        var to = toObject(target);\n        var symbols;\n\n        for (var s = 1; s < arguments.length; s++) {\n          from = Object(arguments[s]);\n\n          for (var key in from) {\n            if (hasOwnProperty.call(from, key)) {\n              to[key] = from[key];\n            }\n          }\n\n          if (getOwnPropertySymbols) {\n            symbols = getOwnPropertySymbols(from);\n\n            for (var i = 0; i < symbols.length; i++) {\n              if (propIsEnumerable.call(from, symbols[i])) {\n                to[symbols[i]] = from[symbols[i]];\n              }\n            }\n          }\n        }\n\n        return to;\n      };\n    }, {}],\n    2: [function (require, module, exports) {\n      (function (process) {\n        // Generated by CoffeeScript 1.12.2\n        (function () {\n          var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;\n\n          if (typeof performance !== \"undefined\" && performance !== null && performance.now) {\n            module.exports = function () {\n              return performance.now();\n            };\n          } else if (typeof process !== \"undefined\" && process !== null && process.hrtime) {\n            module.exports = function () {\n              return (getNanoSeconds() - nodeLoadTime) / 1e6;\n            };\n\n            hrtime = process.hrtime;\n\n            getNanoSeconds = function getNanoSeconds() {\n              var hr;\n              hr = hrtime();\n              return hr[0] * 1e9 + hr[1];\n            };\n\n            moduleLoadTime = getNanoSeconds();\n            upTime = process.uptime() * 1e9;\n            nodeLoadTime = moduleLoadTime - upTime;\n          } else if (Date.now) {\n            module.exports = function () {\n              return Date.now() - loadTime;\n            };\n\n            loadTime = Date.now();\n          } else {\n            module.exports = function () {\n              return new Date().getTime() - loadTime;\n            };\n\n            loadTime = new Date().getTime();\n          }\n        }).call(this);\n      }).call(this, require('_process'));\n    }, {\n      \"_process\": 3\n    }],\n    3: [function (require, module, exports) {\n      // shim for using process in browser\n      var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it\n      // don't break things.  But we need to wrap it in a try catch in case it is\n      // wrapped in strict mode code which doesn't define any globals.  It's inside a\n      // function because try/catches deoptimize in certain engines.\n\n      var cachedSetTimeout;\n      var cachedClearTimeout;\n\n      function defaultSetTimout() {\n        throw new Error('setTimeout has not been defined');\n      }\n\n      function defaultClearTimeout() {\n        throw new Error('clearTimeout has not been defined');\n      }\n\n      (function () {\n        try {\n          if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n          } else {\n            cachedSetTimeout = defaultSetTimout;\n          }\n        } catch (e) {\n          cachedSetTimeout = defaultSetTimout;\n        }\n\n        try {\n          if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n          } else {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        } catch (e) {\n          cachedClearTimeout = defaultClearTimeout;\n        }\n      })();\n\n      function runTimeout(fun) {\n        if (cachedSetTimeout === setTimeout) {\n          //normal enviroments in sane situations\n          return setTimeout(fun, 0);\n        } // if setTimeout wasn't available but was latter defined\n\n\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n          cachedSetTimeout = setTimeout;\n          return setTimeout(fun, 0);\n        }\n\n        try {\n          // when when somebody has screwed with setTimeout but no I.E. maddness\n          return cachedSetTimeout(fun, 0);\n        } catch (e) {\n          try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n          } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n          }\n        }\n      }\n\n      function runClearTimeout(marker) {\n        if (cachedClearTimeout === clearTimeout) {\n          //normal enviroments in sane situations\n          return clearTimeout(marker);\n        } // if clearTimeout wasn't available but was latter defined\n\n\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n          cachedClearTimeout = clearTimeout;\n          return clearTimeout(marker);\n        }\n\n        try {\n          // when when somebody has screwed with setTimeout but no I.E. maddness\n          return cachedClearTimeout(marker);\n        } catch (e) {\n          try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n          } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n          }\n        }\n      }\n\n      var queue = [];\n      var draining = false;\n      var currentQueue;\n      var queueIndex = -1;\n\n      function cleanUpNextTick() {\n        if (!draining || !currentQueue) {\n          return;\n        }\n\n        draining = false;\n\n        if (currentQueue.length) {\n          queue = currentQueue.concat(queue);\n        } else {\n          queueIndex = -1;\n        }\n\n        if (queue.length) {\n          drainQueue();\n        }\n      }\n\n      function drainQueue() {\n        if (draining) {\n          return;\n        }\n\n        var timeout = runTimeout(cleanUpNextTick);\n        draining = true;\n        var len = queue.length;\n\n        while (len) {\n          currentQueue = queue;\n          queue = [];\n\n          while (++queueIndex < len) {\n            if (currentQueue) {\n              currentQueue[queueIndex].run();\n            }\n          }\n\n          queueIndex = -1;\n          len = queue.length;\n        }\n\n        currentQueue = null;\n        draining = false;\n        runClearTimeout(timeout);\n      }\n\n      process.nextTick = function (fun) {\n        var args = new Array(arguments.length - 1);\n\n        if (arguments.length > 1) {\n          for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n          }\n        }\n\n        queue.push(new Item(fun, args));\n\n        if (queue.length === 1 && !draining) {\n          runTimeout(drainQueue);\n        }\n      }; // v8 likes predictible objects\n\n\n      function Item(fun, array) {\n        this.fun = fun;\n        this.array = array;\n      }\n\n      Item.prototype.run = function () {\n        this.fun.apply(null, this.array);\n      };\n\n      process.title = 'browser';\n      process.browser = true;\n      process.env = {};\n      process.argv = [];\n      process.version = ''; // empty string to avoid regexp issues\n\n      process.versions = {};\n\n      function noop() {}\n\n      process.on = noop;\n      process.addListener = noop;\n      process.once = noop;\n      process.off = noop;\n      process.removeListener = noop;\n      process.removeAllListeners = noop;\n      process.emit = noop;\n      process.prependListener = noop;\n      process.prependOnceListener = noop;\n\n      process.listeners = function (name) {\n        return [];\n      };\n\n      process.binding = function (name) {\n        throw new Error('process.binding is not supported');\n      };\n\n      process.cwd = function () {\n        return '/';\n      };\n\n      process.chdir = function (dir) {\n        throw new Error('process.chdir is not supported');\n      };\n\n      process.umask = function () {\n        return 0;\n      };\n    }, {}],\n    4: [function (require, module, exports) {\n      (function (global) {\n        var now = require('performance-now'),\n            root = typeof window === 'undefined' ? global : window,\n            vendors = ['moz', 'webkit'],\n            suffix = 'AnimationFrame',\n            raf = root['request' + suffix],\n            caf = root['cancel' + suffix] || root['cancelRequest' + suffix];\n\n        for (var i = 0; !raf && i < vendors.length; i++) {\n          raf = root[vendors[i] + 'Request' + suffix];\n          caf = root[vendors[i] + 'Cancel' + suffix] || root[vendors[i] + 'CancelRequest' + suffix];\n        } // Some versions of FF have rAF but not cAF\n\n\n        if (!raf || !caf) {\n          var last = 0,\n              id = 0,\n              queue = [],\n              frameDuration = 1000 / 60;\n\n          raf = function raf(callback) {\n            if (queue.length === 0) {\n              var _now = now(),\n                  next = Math.max(0, frameDuration - (_now - last));\n\n              last = next + _now;\n              setTimeout(function () {\n                var cp = queue.slice(0); // Clear queue here to prevent\n                // callbacks from appending listeners\n                // to the current frame's queue\n\n                queue.length = 0;\n\n                for (var i = 0; i < cp.length; i++) {\n                  if (!cp[i].cancelled) {\n                    try {\n                      cp[i].callback(last);\n                    } catch (e) {\n                      setTimeout(function () {\n                        throw e;\n                      }, 0);\n                    }\n                  }\n                }\n              }, Math.round(next));\n            }\n\n            queue.push({\n              handle: ++id,\n              callback: callback,\n              cancelled: false\n            });\n            return id;\n          };\n\n          caf = function caf(handle) {\n            for (var i = 0; i < queue.length; i++) {\n              if (queue[i].handle === handle) {\n                queue[i].cancelled = true;\n              }\n            }\n          };\n        }\n\n        module.exports = function (fn) {\n          // Wrap in a new function to prevent\n          // `cancel` potentially being assigned\n          // to the native rAF function\n          return raf.call(root, fn);\n        };\n\n        module.exports.cancel = function () {\n          caf.apply(root, arguments);\n        };\n\n        module.exports.polyfill = function () {\n          root.requestAnimationFrame = raf;\n          root.cancelAnimationFrame = caf;\n        };\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {\n      \"performance-now\": 2\n    }],\n    5: [function (require, module, exports) {\n      'use strict';\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n      /**\n      * Parallax.js\n      * @author Matthew Wagerfield - @wagerfield, René Roth - mail@reneroth.org\n      * @description Creates a parallax effect between an array of layers,\n      *              driving the motion from the gyroscope output of a smartdevice.\n      *              If no gyroscope is available, the cursor position is used.\n      */\n\n\n      var rqAnFr = require('raf');\n\n      var objectAssign = require('object-assign');\n\n      var helpers = {\n        propertyCache: {},\n        vendors: [null, ['-webkit-', 'webkit'], ['-moz-', 'Moz'], ['-o-', 'O'], ['-ms-', 'ms']],\n        clamp: function clamp(value, min, max) {\n          return min < max ? value < min ? min : value > max ? max : value : value < max ? max : value > min ? min : value;\n        },\n        data: function data(element, name) {\n          return helpers.deserialize(element.getAttribute('data-' + name));\n        },\n        deserialize: function deserialize(value) {\n          if (value === 'true') {\n            return true;\n          } else if (value === 'false') {\n            return false;\n          } else if (value === 'null') {\n            return null;\n          } else if (!isNaN(parseFloat(value)) && isFinite(value)) {\n            return parseFloat(value);\n          } else {\n            return value;\n          }\n        },\n        camelCase: function camelCase(value) {\n          return value.replace(/-+(.)?/g, function (match, character) {\n            return character ? character.toUpperCase() : '';\n          });\n        },\n        accelerate: function accelerate(element) {\n          helpers.css(element, 'transform', 'translate3d(0,0,0) rotate(0.0001deg)');\n          helpers.css(element, 'transform-style', 'preserve-3d');\n          helpers.css(element, 'backface-visibility', 'hidden');\n        },\n        transformSupport: function transformSupport(value) {\n          var element = document.createElement('div'),\n              propertySupport = false,\n              propertyValue = null,\n              featureSupport = false,\n              cssProperty = null,\n              jsProperty = null;\n\n          for (var i = 0, l = helpers.vendors.length; i < l; i++) {\n            if (helpers.vendors[i] !== null) {\n              cssProperty = helpers.vendors[i][0] + 'transform';\n              jsProperty = helpers.vendors[i][1] + 'Transform';\n            } else {\n              cssProperty = 'transform';\n              jsProperty = 'transform';\n            }\n\n            if (element.style[jsProperty] !== undefined) {\n              propertySupport = true;\n              break;\n            }\n          }\n\n          switch (value) {\n            case '2D':\n              featureSupport = propertySupport;\n              break;\n\n            case '3D':\n              if (propertySupport) {\n                var body = document.body || document.createElement('body'),\n                    documentElement = document.documentElement,\n                    documentOverflow = documentElement.style.overflow,\n                    isCreatedBody = false;\n\n                if (!document.body) {\n                  isCreatedBody = true;\n                  documentElement.style.overflow = 'hidden';\n                  documentElement.appendChild(body);\n                  body.style.overflow = 'hidden';\n                  body.style.background = '';\n                }\n\n                body.appendChild(element);\n                element.style[jsProperty] = 'translate3d(1px,1px,1px)';\n                propertyValue = window.getComputedStyle(element).getPropertyValue(cssProperty);\n                featureSupport = propertyValue !== undefined && propertyValue.length > 0 && propertyValue !== 'none';\n                documentElement.style.overflow = documentOverflow;\n                body.removeChild(element);\n\n                if (isCreatedBody) {\n                  body.removeAttribute('style');\n                  body.parentNode.removeChild(body);\n                }\n              }\n\n              break;\n          }\n\n          return featureSupport;\n        },\n        css: function css(element, property, value) {\n          var jsProperty = helpers.propertyCache[property];\n\n          if (!jsProperty) {\n            for (var i = 0, l = helpers.vendors.length; i < l; i++) {\n              if (helpers.vendors[i] !== null) {\n                jsProperty = helpers.camelCase(helpers.vendors[i][1] + '-' + property);\n              } else {\n                jsProperty = property;\n              }\n\n              if (element.style[jsProperty] !== undefined) {\n                helpers.propertyCache[property] = jsProperty;\n                break;\n              }\n            }\n          }\n\n          element.style[jsProperty] = value;\n        }\n      };\n      var MAGIC_NUMBER = 30,\n          DEFAULTS = {\n        relativeInput: false,\n        clipRelativeInput: false,\n        inputElement: null,\n        hoverOnly: false,\n        calibrationThreshold: 100,\n        calibrationDelay: 500,\n        supportDelay: 500,\n        calibrateX: false,\n        calibrateY: true,\n        invertX: true,\n        invertY: true,\n        limitX: false,\n        limitY: false,\n        scalarX: 10.0,\n        scalarY: 10.0,\n        frictionX: 0.1,\n        frictionY: 0.1,\n        originX: 0.5,\n        originY: 0.5,\n        pointerEvents: false,\n        precision: 1,\n        onReady: null,\n        selector: null\n      };\n\n      var Parallax = function () {\n        function Parallax(element, options) {\n          _classCallCheck(this, Parallax);\n\n          this.element = element;\n          var data = {\n            calibrateX: helpers.data(this.element, 'calibrate-x'),\n            calibrateY: helpers.data(this.element, 'calibrate-y'),\n            invertX: helpers.data(this.element, 'invert-x'),\n            invertY: helpers.data(this.element, 'invert-y'),\n            limitX: helpers.data(this.element, 'limit-x'),\n            limitY: helpers.data(this.element, 'limit-y'),\n            scalarX: helpers.data(this.element, 'scalar-x'),\n            scalarY: helpers.data(this.element, 'scalar-y'),\n            frictionX: helpers.data(this.element, 'friction-x'),\n            frictionY: helpers.data(this.element, 'friction-y'),\n            originX: helpers.data(this.element, 'origin-x'),\n            originY: helpers.data(this.element, 'origin-y'),\n            pointerEvents: helpers.data(this.element, 'pointer-events'),\n            precision: helpers.data(this.element, 'precision'),\n            relativeInput: helpers.data(this.element, 'relative-input'),\n            clipRelativeInput: helpers.data(this.element, 'clip-relative-input'),\n            hoverOnly: helpers.data(this.element, 'hover-only'),\n            inputElement: document.querySelector(helpers.data(this.element, 'input-element')),\n            selector: helpers.data(this.element, 'selector')\n          };\n\n          for (var key in data) {\n            if (data[key] === null) {\n              delete data[key];\n            }\n          }\n\n          objectAssign(this, DEFAULTS, data, options);\n\n          if (!this.inputElement) {\n            this.inputElement = this.element;\n          }\n\n          this.calibrationTimer = null;\n          this.calibrationFlag = true;\n          this.enabled = false;\n          this.depthsX = [];\n          this.depthsY = [];\n          this.raf = null;\n          this.bounds = null;\n          this.elementPositionX = 0;\n          this.elementPositionY = 0;\n          this.elementWidth = 0;\n          this.elementHeight = 0;\n          this.elementCenterX = 0;\n          this.elementCenterY = 0;\n          this.elementRangeX = 0;\n          this.elementRangeY = 0;\n          this.calibrationX = 0;\n          this.calibrationY = 0;\n          this.inputX = 0;\n          this.inputY = 0;\n          this.motionX = 0;\n          this.motionY = 0;\n          this.velocityX = 0;\n          this.velocityY = 0;\n          this.onMouseMove = this.onMouseMove.bind(this);\n          this.onDeviceOrientation = this.onDeviceOrientation.bind(this);\n          this.onDeviceMotion = this.onDeviceMotion.bind(this);\n          this.onOrientationTimer = this.onOrientationTimer.bind(this);\n          this.onMotionTimer = this.onMotionTimer.bind(this);\n          this.onCalibrationTimer = this.onCalibrationTimer.bind(this);\n          this.onAnimationFrame = this.onAnimationFrame.bind(this);\n          this.onWindowResize = this.onWindowResize.bind(this);\n          this.windowWidth = null;\n          this.windowHeight = null;\n          this.windowCenterX = null;\n          this.windowCenterY = null;\n          this.windowRadiusX = null;\n          this.windowRadiusY = null;\n          this.portrait = false;\n          this.desktop = !navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry|BB10|mobi|tablet|opera mini|nexus 7)/i);\n          this.motionSupport = !!window.DeviceMotionEvent && !this.desktop;\n          this.orientationSupport = !!window.DeviceOrientationEvent && !this.desktop;\n          this.orientationStatus = 0;\n          this.motionStatus = 0;\n          this.initialise();\n        }\n\n        _createClass(Parallax, [{\n          key: 'initialise',\n          value: function initialise() {\n            if (this.transform2DSupport === undefined) {\n              this.transform2DSupport = helpers.transformSupport('2D');\n              this.transform3DSupport = helpers.transformSupport('3D');\n            } // Configure Context Styles\n\n\n            if (this.transform3DSupport) {\n              helpers.accelerate(this.element);\n            }\n\n            var style = window.getComputedStyle(this.element);\n\n            if (style.getPropertyValue('position') === 'static') {\n              this.element.style.position = 'relative';\n            } // Pointer events\n\n\n            if (!this.pointerEvents) {\n              this.element.style.pointerEvents = 'none';\n            } // Setup\n\n\n            this.updateLayers();\n            this.updateDimensions();\n            this.enable();\n            this.queueCalibration(this.calibrationDelay);\n          }\n        }, {\n          key: 'doReadyCallback',\n          value: function doReadyCallback() {\n            if (this.onReady) {\n              this.onReady();\n            }\n          }\n        }, {\n          key: 'updateLayers',\n          value: function updateLayers() {\n            if (this.selector) {\n              this.layers = this.element.querySelectorAll(this.selector);\n            } else {\n              this.layers = this.element.children;\n            }\n\n            if (!this.layers.length) {\n              console.warn('ParallaxJS: Your scene does not have any layers.');\n            }\n\n            this.depthsX = [];\n            this.depthsY = [];\n\n            for (var index = 0; index < this.layers.length; index++) {\n              var layer = this.layers[index];\n\n              if (this.transform3DSupport) {\n                helpers.accelerate(layer);\n              }\n\n              layer.style.position = index ? 'absolute' : 'relative';\n              layer.style.display = 'block';\n              layer.style.left = 0;\n              layer.style.top = 0;\n              var depth = helpers.data(layer, 'depth') || 0;\n              this.depthsX.push(helpers.data(layer, 'depth-x') || depth);\n              this.depthsY.push(helpers.data(layer, 'depth-y') || depth);\n            }\n          }\n        }, {\n          key: 'updateDimensions',\n          value: function updateDimensions() {\n            this.windowWidth = window.innerWidth;\n            this.windowHeight = window.innerHeight;\n            this.windowCenterX = this.windowWidth * this.originX;\n            this.windowCenterY = this.windowHeight * this.originY;\n            this.windowRadiusX = Math.max(this.windowCenterX, this.windowWidth - this.windowCenterX);\n            this.windowRadiusY = Math.max(this.windowCenterY, this.windowHeight - this.windowCenterY);\n          }\n        }, {\n          key: 'updateBounds',\n          value: function updateBounds() {\n            this.bounds = this.inputElement.getBoundingClientRect();\n            this.elementPositionX = this.bounds.left;\n            this.elementPositionY = this.bounds.top;\n            this.elementWidth = this.bounds.width;\n            this.elementHeight = this.bounds.height;\n            this.elementCenterX = this.elementWidth * this.originX;\n            this.elementCenterY = this.elementHeight * this.originY;\n            this.elementRangeX = Math.max(this.elementCenterX, this.elementWidth - this.elementCenterX);\n            this.elementRangeY = Math.max(this.elementCenterY, this.elementHeight - this.elementCenterY);\n          }\n        }, {\n          key: 'queueCalibration',\n          value: function queueCalibration(delay) {\n            clearTimeout(this.calibrationTimer);\n            this.calibrationTimer = setTimeout(this.onCalibrationTimer, delay);\n          }\n        }, {\n          key: 'enable',\n          value: function enable() {\n            if (this.enabled) {\n              return;\n            }\n\n            this.enabled = true;\n\n            if (this.orientationSupport) {\n              this.portrait = false;\n              window.addEventListener('deviceorientation', this.onDeviceOrientation);\n              this.detectionTimer = setTimeout(this.onOrientationTimer, this.supportDelay);\n            } else if (this.motionSupport) {\n              this.portrait = false;\n              window.addEventListener('devicemotion', this.onDeviceMotion);\n              this.detectionTimer = setTimeout(this.onMotionTimer, this.supportDelay);\n            } else {\n              this.calibrationX = 0;\n              this.calibrationY = 0;\n              this.portrait = false;\n              window.addEventListener('mousemove', this.onMouseMove);\n              this.doReadyCallback();\n            }\n\n            window.addEventListener('resize', this.onWindowResize);\n            this.raf = rqAnFr(this.onAnimationFrame);\n          }\n        }, {\n          key: 'disable',\n          value: function disable() {\n            if (!this.enabled) {\n              return;\n            }\n\n            this.enabled = false;\n\n            if (this.orientationSupport) {\n              window.removeEventListener('deviceorientation', this.onDeviceOrientation);\n            } else if (this.motionSupport) {\n              window.removeEventListener('devicemotion', this.onDeviceMotion);\n            } else {\n              window.removeEventListener('mousemove', this.onMouseMove);\n            }\n\n            window.removeEventListener('resize', this.onWindowResize);\n            rqAnFr.cancel(this.raf);\n          }\n        }, {\n          key: 'calibrate',\n          value: function calibrate(x, y) {\n            this.calibrateX = x === undefined ? this.calibrateX : x;\n            this.calibrateY = y === undefined ? this.calibrateY : y;\n          }\n        }, {\n          key: 'invert',\n          value: function invert(x, y) {\n            this.invertX = x === undefined ? this.invertX : x;\n            this.invertY = y === undefined ? this.invertY : y;\n          }\n        }, {\n          key: 'friction',\n          value: function friction(x, y) {\n            this.frictionX = x === undefined ? this.frictionX : x;\n            this.frictionY = y === undefined ? this.frictionY : y;\n          }\n        }, {\n          key: 'scalar',\n          value: function scalar(x, y) {\n            this.scalarX = x === undefined ? this.scalarX : x;\n            this.scalarY = y === undefined ? this.scalarY : y;\n          }\n        }, {\n          key: 'limit',\n          value: function limit(x, y) {\n            this.limitX = x === undefined ? this.limitX : x;\n            this.limitY = y === undefined ? this.limitY : y;\n          }\n        }, {\n          key: 'origin',\n          value: function origin(x, y) {\n            this.originX = x === undefined ? this.originX : x;\n            this.originY = y === undefined ? this.originY : y;\n          }\n        }, {\n          key: 'setInputElement',\n          value: function setInputElement(element) {\n            this.inputElement = element;\n            this.updateDimensions();\n          }\n        }, {\n          key: 'setPosition',\n          value: function setPosition(element, x, y) {\n            x = x.toFixed(this.precision) + 'px';\n            y = y.toFixed(this.precision) + 'px';\n\n            if (this.transform3DSupport) {\n              helpers.css(element, 'transform', 'translate3d(' + x + ',' + y + ',0)');\n            } else if (this.transform2DSupport) {\n              helpers.css(element, 'transform', 'translate(' + x + ',' + y + ')');\n            } else {\n              element.style.left = x;\n              element.style.top = y;\n            }\n          }\n        }, {\n          key: 'onOrientationTimer',\n          value: function onOrientationTimer() {\n            if (this.orientationSupport && this.orientationStatus === 0) {\n              this.disable();\n              this.orientationSupport = false;\n              this.enable();\n            } else {\n              this.doReadyCallback();\n            }\n          }\n        }, {\n          key: 'onMotionTimer',\n          value: function onMotionTimer() {\n            if (this.motionSupport && this.motionStatus === 0) {\n              this.disable();\n              this.motionSupport = false;\n              this.enable();\n            } else {\n              this.doReadyCallback();\n            }\n          }\n        }, {\n          key: 'onCalibrationTimer',\n          value: function onCalibrationTimer() {\n            this.calibrationFlag = true;\n          }\n        }, {\n          key: 'onWindowResize',\n          value: function onWindowResize() {\n            this.updateDimensions();\n          }\n        }, {\n          key: 'onAnimationFrame',\n          value: function onAnimationFrame() {\n            this.updateBounds();\n            var calibratedInputX = this.inputX - this.calibrationX,\n                calibratedInputY = this.inputY - this.calibrationY;\n\n            if (Math.abs(calibratedInputX) > this.calibrationThreshold || Math.abs(calibratedInputY) > this.calibrationThreshold) {\n              this.queueCalibration(0);\n            }\n\n            if (this.portrait) {\n              this.motionX = this.calibrateX ? calibratedInputY : this.inputY;\n              this.motionY = this.calibrateY ? calibratedInputX : this.inputX;\n            } else {\n              this.motionX = this.calibrateX ? calibratedInputX : this.inputX;\n              this.motionY = this.calibrateY ? calibratedInputY : this.inputY;\n            }\n\n            this.motionX *= this.elementWidth * (this.scalarX / 100);\n            this.motionY *= this.elementHeight * (this.scalarY / 100);\n\n            if (!isNaN(parseFloat(this.limitX))) {\n              this.motionX = helpers.clamp(this.motionX, -this.limitX, this.limitX);\n            }\n\n            if (!isNaN(parseFloat(this.limitY))) {\n              this.motionY = helpers.clamp(this.motionY, -this.limitY, this.limitY);\n            }\n\n            this.velocityX += (this.motionX - this.velocityX) * this.frictionX;\n            this.velocityY += (this.motionY - this.velocityY) * this.frictionY;\n\n            for (var index = 0; index < this.layers.length; index++) {\n              var layer = this.layers[index],\n                  depthX = this.depthsX[index],\n                  depthY = this.depthsY[index],\n                  xOffset = this.velocityX * (depthX * (this.invertX ? -1 : 1)),\n                  yOffset = this.velocityY * (depthY * (this.invertY ? -1 : 1));\n              this.setPosition(layer, xOffset, yOffset);\n            }\n\n            this.raf = rqAnFr(this.onAnimationFrame);\n          }\n        }, {\n          key: 'rotate',\n          value: function rotate(beta, gamma) {\n            // Extract Rotation\n            var x = (beta || 0) / MAGIC_NUMBER,\n                //  -90 :: 90\n            y = (gamma || 0) / MAGIC_NUMBER; // -180 :: 180\n            // Detect Orientation Change\n\n            var portrait = this.windowHeight > this.windowWidth;\n\n            if (this.portrait !== portrait) {\n              this.portrait = portrait;\n              this.calibrationFlag = true;\n            }\n\n            if (this.calibrationFlag) {\n              this.calibrationFlag = false;\n              this.calibrationX = x;\n              this.calibrationY = y;\n            }\n\n            this.inputX = x;\n            this.inputY = y;\n          }\n        }, {\n          key: 'onDeviceOrientation',\n          value: function onDeviceOrientation(event) {\n            var beta = event.beta;\n            var gamma = event.gamma;\n\n            if (beta !== null && gamma !== null) {\n              this.orientationStatus = 1;\n              this.rotate(beta, gamma);\n            }\n          }\n        }, {\n          key: 'onDeviceMotion',\n          value: function onDeviceMotion(event) {\n            var beta = event.rotationRate.beta;\n            var gamma = event.rotationRate.gamma;\n\n            if (beta !== null && gamma !== null) {\n              this.motionStatus = 1;\n              this.rotate(beta, gamma);\n            }\n          }\n        }, {\n          key: 'onMouseMove',\n          value: function onMouseMove(event) {\n            var clientX = event.clientX,\n                clientY = event.clientY; // reset input to center if hoverOnly is set and we're not hovering the element\n\n            if (this.hoverOnly && (clientX < this.elementPositionX || clientX > this.elementPositionX + this.elementWidth || clientY < this.elementPositionY || clientY > this.elementPositionY + this.elementHeight)) {\n              this.inputX = 0;\n              this.inputY = 0;\n              return;\n            }\n\n            if (this.relativeInput) {\n              // Clip mouse coordinates inside element bounds.\n              if (this.clipRelativeInput) {\n                clientX = Math.max(clientX, this.elementPositionX);\n                clientX = Math.min(clientX, this.elementPositionX + this.elementWidth);\n                clientY = Math.max(clientY, this.elementPositionY);\n                clientY = Math.min(clientY, this.elementPositionY + this.elementHeight);\n              } // Calculate input relative to the element.\n\n\n              if (this.elementRangeX && this.elementRangeY) {\n                this.inputX = (clientX - this.elementPositionX - this.elementCenterX) / this.elementRangeX;\n                this.inputY = (clientY - this.elementPositionY - this.elementCenterY) / this.elementRangeY;\n              }\n            } else {\n              // Calculate input relative to the window.\n              if (this.windowRadiusX && this.windowRadiusY) {\n                this.inputX = (clientX - this.windowCenterX) / this.windowRadiusX;\n                this.inputY = (clientY - this.windowCenterY) / this.windowRadiusY;\n              }\n            }\n          }\n        }, {\n          key: 'destroy',\n          value: function destroy() {\n            this.disable();\n            clearTimeout(this.calibrationTimer);\n            clearTimeout(this.detectionTimer);\n            this.element.removeAttribute('style');\n\n            for (var index = 0; index < this.layers.length; index++) {\n              this.layers[index].removeAttribute('style');\n            }\n\n            delete this.element;\n            delete this.layers;\n          }\n        }, {\n          key: 'version',\n          value: function version() {\n            return '3.1.0';\n          }\n        }]);\n\n        return Parallax;\n      }();\n\n      module.exports = Parallax;\n    }, {\n      \"object-assign\": 1,\n      \"raf\": 4\n    }]\n  }, {}, [5])(5);\n});","map":null,"metadata":{},"sourceType":"script"}