{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar util_1 = require(\"../../compile/util\");\n\nvar validate_1 = require(\"../../compile/validate\");\n\nvar code_1 = require(\"../code\");\n\nvar def = {\n  keyword: \"items\",\n  type: \"array\",\n  schemaType: [\"object\", \"array\", \"boolean\"],\n  before: \"uniqueItems\",\n  code: function code(cxt) {\n    var gen = cxt.gen,\n        schema = cxt.schema,\n        it = cxt.it;\n\n    if (Array.isArray(schema)) {\n      if (it.opts.unevaluated && schema.length && it.items !== true) {\n        it.items = util_1.mergeEvaluated.items(gen, schema.length, it.items);\n      }\n\n      validateTuple(schema);\n    } else {\n      it.items = true;\n      if (util_1.alwaysValidSchema(it, schema)) return;\n      cxt.ok(code_1.validateArray(cxt));\n    }\n\n    function validateTuple(schArr) {\n      var parentSchema = cxt.parentSchema,\n          data = cxt.data;\n\n      if (it.opts.strictTuples && !fullTupleSchema(schArr.length, parentSchema)) {\n        var msg = \"\\\"items\\\" is \".concat(schArr.length, \"-tuple, but minItems or maxItems/additionalItems are not specified or different\");\n        validate_1.checkStrictMode(it, msg, it.opts.strictTuples);\n      }\n\n      var valid = gen.name(\"valid\");\n      var len = gen.const(\"len\", codegen_1._(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\", \".length\"])), data));\n      schArr.forEach(function (sch, i) {\n        if (util_1.alwaysValidSchema(it, sch)) return;\n        gen.if(codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\", \" > \", \"\"])), len, i), function () {\n          return cxt.subschema({\n            keyword: \"items\",\n            schemaProp: i,\n            dataProp: i\n          }, valid);\n        });\n        cxt.ok(valid);\n      });\n    }\n  }\n};\n\nfunction fullTupleSchema(len, sch) {\n  return len === sch.minItems && (len === sch.maxItems || sch.additionalItems === false);\n}\n\nexports.default = def;","map":null,"metadata":{},"sourceType":"script"}