{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMana = exports.getAppChainId = exports.hasAcceptedNetworkPartialSupport = exports.getNetworks = exports.getNetwork = exports.getProviderType = exports.getChainId = exports.getAddress = exports.isEnabling = exports.isConnecting = exports.isConnected = exports.getError = exports.getLoading = exports.getData = exports.getState = void 0;\n\nvar network_1 = require(\"@dcl/schemas/dist/dapps/network\");\n\nvar selectors_1 = require(\"../loading/selectors\");\n\nvar actions_1 = require(\"./actions\");\n\nvar getState = function getState(state) {\n  return state.wallet;\n};\n\nexports.getState = getState;\n\nvar getData = function getData(state) {\n  return exports.getState(state).data;\n};\n\nexports.getData = getData;\n\nvar getLoading = function getLoading(state) {\n  return exports.getState(state).loading;\n};\n\nexports.getLoading = getLoading;\n\nvar getError = function getError(state) {\n  return exports.getState(state).error;\n};\n\nexports.getError = getError;\n\nvar isConnected = function isConnected(state) {\n  return exports.getData(state) !== null;\n};\n\nexports.isConnected = isConnected;\n\nvar isConnecting = function isConnecting(state) {\n  return selectors_1.isLoadingType(exports.getLoading(state), actions_1.CONNECT_WALLET_REQUEST);\n};\n\nexports.isConnecting = isConnecting;\n\nvar isEnabling = function isEnabling(state) {\n  return selectors_1.isLoadingType(exports.getLoading(state), actions_1.ENABLE_WALLET_REQUEST);\n};\n\nexports.isEnabling = isEnabling;\n\nvar getAddress = function getAddress(state) {\n  return exports.isConnected(state) ? exports.getData(state).address : undefined;\n};\n\nexports.getAddress = getAddress;\n\nvar getChainId = function getChainId(state) {\n  return exports.isConnected(state) ? exports.getData(state).chainId : undefined;\n};\n\nexports.getChainId = getChainId;\n\nvar getProviderType = function getProviderType(state) {\n  return exports.isConnected(state) ? exports.getData(state).providerType : undefined;\n};\n\nexports.getProviderType = getProviderType;\n\nvar getNetwork = function getNetwork(state) {\n  return exports.isConnected(state) ? exports.getData(state).network : undefined;\n};\n\nexports.getNetwork = getNetwork;\n\nvar getNetworks = function getNetworks(state) {\n  return exports.isConnected(state) ? exports.getData(state).networks : undefined;\n};\n\nexports.getNetworks = getNetworks;\n\nvar hasAcceptedNetworkPartialSupport = function hasAcceptedNetworkPartialSupport(state) {\n  return exports.getState(state).hasAcceptedNetworkPartialSupport;\n};\n\nexports.hasAcceptedNetworkPartialSupport = hasAcceptedNetworkPartialSupport; // Casting as ChainId since it will be initialized at the beginning\n\nvar getAppChainId = function getAppChainId(state) {\n  return exports.getState(state).appChainId;\n};\n\nexports.getAppChainId = getAppChainId;\n/**\n * @deprecated This method is deprecated, it only returns the MANA balance on Ethereum, use getNetworks() to get the MANA balances on all the networks.\n */\n\nvar getMana = function getMana(state) {\n  if (!exports.isConnected(state)) {\n    return undefined;\n  }\n\n  var networks = exports.getNetworks(state);\n  return networks[network_1.Network.ETHEREUM].mana;\n};\n\nexports.getMana = getMana;","map":null,"metadata":{},"sourceType":"script"}