{"ast":null,"code":"import { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { getCollections, hasViewAndEditRights } from 'modules/collection/selectors';\nimport { getSelectedCollectionId, isReviewing } from 'modules/location/selectors';\nimport { openModal } from 'modules/modal/actions';\nimport { deleteCollectionRequest } from 'modules/collection/actions';\nimport { deleteItemRequest } from 'modules/item/actions';\nimport { isLoggedIn } from 'modules/identity/selectors';\nimport Header from './Header';\n\nvar mapState = function mapState(state) {\n  var collection;\n  var collectionId = getSelectedCollectionId(state);\n\n  if (collectionId) {\n    var collections = getCollections(state);\n    collection = collections.find(function (collection) {\n      return collection.id === collectionId;\n    });\n  }\n\n  var address = getAddress(state);\n  return {\n    address: address,\n    isLoggedIn: isLoggedIn(state),\n    isReviewing: isReviewing(state),\n    collection: collection,\n    hasEditRights: collection !== undefined && address !== undefined && hasViewAndEditRights(state, address, collection)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    },\n    onNavigate: function onNavigate(path) {\n      return dispatch(push(path));\n    },\n    onDeleteCollection: function onDeleteCollection(collection) {\n      return dispatch(deleteCollectionRequest(collection));\n    },\n    onDeleteItem: function onDeleteItem(item) {\n      return dispatch(deleteItemRequest(item));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(Header);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/ItemEditorPage/LeftPanel/Header/Header.container.ts"],"names":["connect","push","getAddress","getCollections","hasViewAndEditRights","getSelectedCollectionId","isReviewing","openModal","deleteCollectionRequest","deleteItemRequest","isLoggedIn","Header","mapState","state","collection","collectionId","collections","find","id","address","hasEditRights","undefined","mapDispatch","dispatch","onOpenModal","name","metadata","onNavigate","path","onDeleteCollection","onDeleteItem","item"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,UAAT,QAA2B,kDAA3B;AACA,SAASC,cAAT,EAAyBC,oBAAzB,QAAqD,8BAArD;AACA,SAASC,uBAAT,EAAkCC,WAAlC,QAAqD,4BAArD;AAGA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,uBAAT,QAAwC,4BAAxC;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,UAAT,QAA2B,4BAA3B;AAEA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAqC;AACpD,MAAIC,UAAJ;AACA,MAAMC,YAAY,GAAGV,uBAAuB,CAACQ,KAAD,CAA5C;;AACA,MAAIE,YAAJ,EAAkB;AAChB,QAAMC,WAAW,GAAGb,cAAc,CAACU,KAAD,CAAlC;AACAC,IAAAA,UAAU,GAAGE,WAAW,CAACC,IAAZ,CAAiB,UAAAH,UAAU;AAAA,aAAIA,UAAU,CAACI,EAAX,KAAkBH,YAAtB;AAAA,KAA3B,CAAb;AACD;;AACD,MAAMI,OAAO,GAAGjB,UAAU,CAACW,KAAD,CAA1B;AACA,SAAO;AACLM,IAAAA,OAAO,EAAPA,OADK;AAELT,IAAAA,UAAU,EAAEA,UAAU,CAACG,KAAD,CAFjB;AAGLP,IAAAA,WAAW,EAAEA,WAAW,CAACO,KAAD,CAHnB;AAILC,IAAAA,UAAU,EAAVA,UAJK;AAKLM,IAAAA,aAAa,EAAEN,UAAU,KAAKO,SAAf,IAA4BF,OAAO,KAAKE,SAAxC,IAAqDjB,oBAAoB,CAACS,KAAD,EAAQM,OAAR,EAAiBL,UAAjB;AALnF,GAAP;AAOD,CAfD;;AAiBA,IAAMQ,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,QAAP;AAAA,aAAoBH,QAAQ,CAAChB,SAAS,CAACkB,IAAD,EAAOC,QAAP,CAAV,CAA5B;AAAA,KADmD;AAEhEC,IAAAA,UAAU,EAAE,oBAAAC,IAAI;AAAA,aAAIL,QAAQ,CAACtB,IAAI,CAAC2B,IAAD,CAAL,CAAZ;AAAA,KAFgD;AAGhEC,IAAAA,kBAAkB,EAAE,4BAAAf,UAAU;AAAA,aAAIS,QAAQ,CAACf,uBAAuB,CAACM,UAAD,CAAxB,CAAZ;AAAA,KAHkC;AAIhEgB,IAAAA,YAAY,EAAE,sBAAAC,IAAI;AAAA,aAAIR,QAAQ,CAACd,iBAAiB,CAACsB,IAAD,CAAlB,CAAZ;AAAA;AAJ8C,GAA9C;AAAA,CAApB;;AAOA,eAAe/B,OAAO,CAACY,QAAD,EAAWU,WAAX,CAAP,CAA+BX,MAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { getCollections, hasViewAndEditRights } from 'modules/collection/selectors'\nimport { getSelectedCollectionId, isReviewing } from 'modules/location/selectors'\nimport { Collection } from 'modules/collection/types'\nimport { RootState } from 'modules/common/types'\nimport { openModal } from 'modules/modal/actions'\nimport { deleteCollectionRequest } from 'modules/collection/actions'\nimport { deleteItemRequest } from 'modules/item/actions'\nimport { isLoggedIn } from 'modules/identity/selectors'\nimport { MapStateProps, MapDispatchProps, MapDispatch } from './Header.types'\nimport Header from './Header'\n\nconst mapState = (state: RootState): MapStateProps => {\n  let collection: Collection | undefined\n  const collectionId = getSelectedCollectionId(state)\n  if (collectionId) {\n    const collections = getCollections(state)\n    collection = collections.find(collection => collection.id === collectionId)\n  }\n  const address = getAddress(state)\n  return {\n    address,\n    isLoggedIn: isLoggedIn(state),\n    isReviewing: isReviewing(state),\n    collection,\n    hasEditRights: collection !== undefined && address !== undefined && hasViewAndEditRights(state, address, collection)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata)),\n  onNavigate: path => dispatch(push(path)),\n  onDeleteCollection: collection => dispatch(deleteCollectionRequest(collection)),\n  onDeleteItem: item => dispatch(deleteItemRequest(item))\n})\n\nexport default connect(mapState, mapDispatch)(Header)\n"]},"metadata":{},"sourceType":"module"}