{"ast":null,"code":"/**\r\n * Manages the defines for the Material\r\n */\nvar MaterialDefines =\n/** @class */\nfunction () {\n  function MaterialDefines() {\n    this._isDirty = true;\n    /** @hidden */\n\n    this._areLightsDirty = true;\n    /** @hidden */\n\n    this._areLightsDisposed = false;\n    /** @hidden */\n\n    this._areAttributesDirty = true;\n    /** @hidden */\n\n    this._areTexturesDirty = true;\n    /** @hidden */\n\n    this._areFresnelDirty = true;\n    /** @hidden */\n\n    this._areMiscDirty = true;\n    /** @hidden */\n\n    this._arePrePassDirty = true;\n    /** @hidden */\n\n    this._areImageProcessingDirty = true;\n    /** @hidden */\n\n    this._normals = false;\n    /** @hidden */\n\n    this._uvs = false;\n    /** @hidden */\n\n    this._needNormals = false;\n    /** @hidden */\n\n    this._needUVs = false;\n  }\n\n  Object.defineProperty(MaterialDefines.prototype, \"isDirty\", {\n    /**\r\n     * Specifies if the material needs to be re-calculated\r\n     */\n    get: function get() {\n      return this._isDirty;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Marks the material to indicate that it has been re-calculated\r\n   */\n\n  MaterialDefines.prototype.markAsProcessed = function () {\n    this._isDirty = false;\n    this._areAttributesDirty = false;\n    this._areTexturesDirty = false;\n    this._areFresnelDirty = false;\n    this._areLightsDirty = false;\n    this._areLightsDisposed = false;\n    this._areMiscDirty = false;\n    this._arePrePassDirty = false;\n    this._areImageProcessingDirty = false;\n  };\n  /**\r\n   * Marks the material to indicate that it needs to be re-calculated\r\n   */\n\n\n  MaterialDefines.prototype.markAsUnprocessed = function () {\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the material to indicate all of its defines need to be re-calculated\r\n   */\n\n\n  MaterialDefines.prototype.markAllAsDirty = function () {\n    this._areTexturesDirty = true;\n    this._areAttributesDirty = true;\n    this._areLightsDirty = true;\n    this._areFresnelDirty = true;\n    this._areMiscDirty = true;\n    this._areImageProcessingDirty = true;\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the material to indicate that image processing needs to be re-calculated\r\n   */\n\n\n  MaterialDefines.prototype.markAsImageProcessingDirty = function () {\n    this._areImageProcessingDirty = true;\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the material to indicate the lights need to be re-calculated\r\n   * @param disposed Defines whether the light is dirty due to dispose or not\r\n   */\n\n\n  MaterialDefines.prototype.markAsLightDirty = function (disposed) {\n    if (disposed === void 0) {\n      disposed = false;\n    }\n\n    this._areLightsDirty = true;\n    this._areLightsDisposed = this._areLightsDisposed || disposed;\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the attribute state as changed\r\n   */\n\n\n  MaterialDefines.prototype.markAsAttributesDirty = function () {\n    this._areAttributesDirty = true;\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the texture state as changed\r\n   */\n\n\n  MaterialDefines.prototype.markAsTexturesDirty = function () {\n    this._areTexturesDirty = true;\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the fresnel state as changed\r\n   */\n\n\n  MaterialDefines.prototype.markAsFresnelDirty = function () {\n    this._areFresnelDirty = true;\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the misc state as changed\r\n   */\n\n\n  MaterialDefines.prototype.markAsMiscDirty = function () {\n    this._areMiscDirty = true;\n    this._isDirty = true;\n  };\n  /**\r\n   * Marks the prepass state as changed\r\n   */\n\n\n  MaterialDefines.prototype.markAsPrePassDirty = function () {\n    this._arePrePassDirty = true;\n    this._isDirty = true;\n  };\n  /**\r\n   * Rebuilds the material defines\r\n   */\n\n\n  MaterialDefines.prototype.rebuild = function () {\n    this._keys = [];\n\n    for (var _i = 0, _a = Object.keys(this); _i < _a.length; _i++) {\n      var key = _a[_i];\n\n      if (key[0] === \"_\") {\n        continue;\n      }\n\n      this._keys.push(key);\n    }\n  };\n  /**\r\n   * Specifies if two material defines are equal\r\n   * @param other - A material define instance to compare to\r\n   * @returns - Boolean indicating if the material defines are equal (true) or not (false)\r\n   */\n\n\n  MaterialDefines.prototype.isEqual = function (other) {\n    if (this._keys.length !== other._keys.length) {\n      return false;\n    }\n\n    for (var index = 0; index < this._keys.length; index++) {\n      var prop = this._keys[index];\n\n      if (this[prop] !== other[prop]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Clones this instance's defines to another instance\r\n   * @param other - material defines to clone values to\r\n   */\n\n\n  MaterialDefines.prototype.cloneTo = function (other) {\n    if (this._keys.length !== other._keys.length) {\n      other._keys = this._keys.slice(0);\n    }\n\n    for (var index = 0; index < this._keys.length; index++) {\n      var prop = this._keys[index];\n      other[prop] = this[prop];\n    }\n  };\n  /**\r\n   * Resets the material define values\r\n   */\n\n\n  MaterialDefines.prototype.reset = function () {\n    for (var index = 0; index < this._keys.length; index++) {\n      var prop = this._keys[index];\n      var type = typeof this[prop];\n\n      switch (type) {\n        case \"number\":\n          this[prop] = 0;\n          break;\n\n        case \"string\":\n          this[prop] = \"\";\n          break;\n\n        default:\n          this[prop] = false;\n          break;\n      }\n    }\n  };\n  /**\r\n   * Converts the material define values to a string\r\n   * @returns - String of material define information\r\n   */\n\n\n  MaterialDefines.prototype.toString = function () {\n    var result = \"\";\n\n    for (var index = 0; index < this._keys.length; index++) {\n      var prop = this._keys[index];\n      var value = this[prop];\n      var type = typeof value;\n\n      switch (type) {\n        case \"number\":\n        case \"string\":\n          result += \"#define \" + prop + \" \" + value + \"\\n\";\n          break;\n\n        default:\n          if (value) {\n            result += \"#define \" + prop + \"\\n\";\n          }\n\n          break;\n      }\n    }\n\n    return result;\n  };\n\n  return MaterialDefines;\n}();\n\nexport { MaterialDefines };","map":null,"metadata":{},"sourceType":"module"}