{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { TextureDome } from \"./textureDome\";\n/**\r\n * Display a 360 degree photo on an approximately spherical surface, useful for VR applications or skyboxes.\r\n * As a subclass of TransformNode, this allow parenting to the camera with different locations in the scene.\r\n * This class achieves its effect with a Texture and a correctly configured BackgroundMaterial on an inverted sphere.\r\n * Potential additions to this helper include zoom and and non-infinite distance rendering effects.\r\n */\n\nvar PhotoDome =\n/** @class */\nfunction (_super) {\n  __extends(PhotoDome, _super);\n\n  function PhotoDome() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(PhotoDome.prototype, \"photoTexture\", {\n    /**\r\n     * Gets or sets the texture being displayed on the sphere\r\n     */\n    get: function get() {\n      return this.texture;\n    },\n\n    /**\r\n     * sets the texture being displayed on the sphere\r\n     */\n    set: function set(value) {\n      this.texture = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhotoDome.prototype, \"imageMode\", {\n    /**\r\n     * Gets the current video mode for the video. It can be:\r\n     * * TextureDome.MODE_MONOSCOPIC : Define the texture source as a Monoscopic panoramic 360.\r\n     * * TextureDome.MODE_TOPBOTTOM  : Define the texture source as a Stereoscopic TopBottom/OverUnder panoramic 360.\r\n     * * TextureDome.MODE_SIDEBYSIDE : Define the texture source as a Stereoscopic Side by Side panoramic 360.\r\n     */\n    get: function get() {\n      return this.textureMode;\n    },\n\n    /**\r\n     * Sets the current video mode for the video. It can be:\r\n     * * TextureDome.MODE_MONOSCOPIC : Define the texture source as a Monoscopic panoramic 360.\r\n     * * TextureDome.MODE_TOPBOTTOM  : Define the texture source as a Stereoscopic TopBottom/OverUnder panoramic 360.\r\n     * * TextureDome.MODE_SIDEBYSIDE : Define the texture source as a Stereoscopic Side by Side panoramic 360.\r\n     */\n    set: function set(value) {\n      this.textureMode = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  PhotoDome.prototype._initTexture = function (urlsOrElement, scene, options) {\n    var _this = this;\n\n    return new Texture(urlsOrElement, scene, !options.generateMipMaps, !this._useDirectMapping, undefined, undefined, function (message, exception) {\n      _this.onLoadErrorObservable.notifyObservers(message || \"Unknown error occured\");\n\n      if (_this.onError) {\n        _this.onError(message, exception);\n      }\n    });\n  };\n  /**\r\n   * Define the image as a Monoscopic panoramic 360 image.\r\n   */\n\n\n  PhotoDome.MODE_MONOSCOPIC = TextureDome.MODE_MONOSCOPIC;\n  /**\r\n   * Define the image as a Stereoscopic TopBottom/OverUnder panoramic 360 image.\r\n   */\n\n  PhotoDome.MODE_TOPBOTTOM = TextureDome.MODE_TOPBOTTOM;\n  /**\r\n   * Define the image as a Stereoscopic Side by Side panoramic 360 image.\r\n   */\n\n  PhotoDome.MODE_SIDEBYSIDE = TextureDome.MODE_SIDEBYSIDE;\n  return PhotoDome;\n}(TextureDome);\n\nexport { PhotoDome };","map":null,"metadata":{},"sourceType":"module"}