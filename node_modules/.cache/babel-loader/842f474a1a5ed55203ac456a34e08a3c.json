{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(poolSaga);\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { put, call, takeLatest } from 'redux-saga/effects';\nimport { likePoolFailure, likePoolSuccess, LIKE_POOL_REQUEST, loadPoolsFailure, loadPoolsSuccess, LOAD_POOLS_REQUEST } from './actions';\nimport { stackHandle, getPagination } from './utils';\nimport { RECORDS_PER_PAGE } from './types';\nexport function poolSaga(builder) {\n  var _marked, handlePoolLike, handleLoadPools;\n\n  return _regeneratorRuntime.wrap(function poolSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          handleLoadPools = function _handleLoadPools(action) {\n            var _action$payload2, group, page, sortBy, sortOrder, ethAddress, _getPagination, offset, limit, _yield$call, items, total, records, _iterator, _step, item;\n\n            return _regeneratorRuntime.wrap(function handleLoadPools$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _action$payload2 = action.payload, group = _action$payload2.group, page = _action$payload2.page, sortBy = _action$payload2.sortBy, sortOrder = _action$payload2.sortOrder, ethAddress = _action$payload2.ethAddress;\n                    _context2.prev = 1;\n                    _getPagination = getPagination(page || 1, RECORDS_PER_PAGE), offset = _getPagination.offset, limit = _getPagination.limit;\n                    _context2.next = 5;\n                    return call(function () {\n                      return builder.fetchPoolsPage({\n                        offset: offset,\n                        limit: limit,\n                        group: group,\n                        eth_address: ethAddress,\n                        sort_by: sortBy,\n                        sort_order: sortOrder\n                      });\n                    });\n\n                  case 5:\n                    _yield$call = _context2.sent;\n                    items = _yield$call.items;\n                    total = _yield$call.total;\n                    records = {};\n                    _iterator = _createForOfIteratorHelper(items);\n\n                    try {\n                      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                        item = _step.value;\n                        records[item.id] = item;\n                      }\n                    } catch (err) {\n                      _iterator.e(err);\n                    } finally {\n                      _iterator.f();\n                    }\n\n                    _context2.next = 13;\n                    return put(loadPoolsSuccess(records, total));\n\n                  case 13:\n                    _context2.next = 19;\n                    break;\n\n                  case 15:\n                    _context2.prev = 15;\n                    _context2.t0 = _context2[\"catch\"](1);\n                    _context2.next = 19;\n                    return put(loadPoolsFailure(_context2.t0.message));\n\n                  case 19:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _marked, null, [[1, 15]]);\n          };\n\n          _marked = /*#__PURE__*/_regeneratorRuntime.mark(handleLoadPools);\n          handlePoolLike = stackHandle( /*#__PURE__*/_regeneratorRuntime.mark(function handleSinglePool(action) {\n            var _action$payload, pool, like;\n\n            return _regeneratorRuntime.wrap(function handleSinglePool$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _action$payload = action.payload, pool = _action$payload.pool, like = _action$payload.like;\n                    _context.prev = 1;\n                    _context.next = 4;\n                    return call(function () {\n                      return builder.likePool(pool, like);\n                    });\n\n                  case 4:\n                    _context.next = 6;\n                    return put(likePoolSuccess());\n\n                  case 6:\n                    _context.next = 12;\n                    break;\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](1);\n                    _context.next = 12;\n                    return put(likePoolFailure(_context.t0.message));\n\n                  case 12:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, handleSinglePool, null, [[1, 8]]);\n          }), function mergeLikeAction(currentAction, nextAction, newAction) {\n            if (nextAction === null && currentAction.payload.like !== newAction.payload.like) {\n              return newAction;\n            } else if (nextAction && nextAction.payload.like !== newAction.payload.like) {\n              return null;\n            } else {\n              return nextAction;\n            }\n          }, function identifyLikeAction(action) {\n            return action.payload.pool;\n          });\n          _context3.next = 5;\n          return takeLatest(LIKE_POOL_REQUEST, handlePoolLike);\n\n        case 5:\n          _context3.next = 7;\n          return takeLatest(LOAD_POOLS_REQUEST, handleLoadPools);\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/pool/sagas.ts"],"names":["poolSaga","put","call","takeLatest","likePoolFailure","likePoolSuccess","LIKE_POOL_REQUEST","loadPoolsFailure","loadPoolsSuccess","LOAD_POOLS_REQUEST","stackHandle","getPagination","RECORDS_PER_PAGE","builder","handleLoadPools","action","payload","group","page","sortBy","sortOrder","ethAddress","offset","limit","fetchPoolsPage","eth_address","sort_by","sort_order","items","total","records","item","id","message","handlePoolLike","handleSinglePool","pool","like","likePool","mergeLikeAction","currentAction","nextAction","newAction","identifyLikeAction"],"mappings":"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","sourcesContent":["import { put, call, takeLatest } from 'redux-saga/effects'\nimport { ModelById } from 'decentraland-dapps/dist/lib/types'\nimport {\n  LikePoolRequestAction,\n  likePoolFailure,\n  likePoolSuccess,\n  LIKE_POOL_REQUEST,\n  LoadPoolsRequestAction,\n  loadPoolsFailure,\n  loadPoolsSuccess,\n  LOAD_POOLS_REQUEST\n} from './actions'\nimport { BuilderAPI } from 'lib/api/builder'\nimport { stackHandle, getPagination } from './utils'\nimport { Pool, RECORDS_PER_PAGE } from './types'\n\nexport function* poolSaga(builder: BuilderAPI) {\n  const handlePoolLike = stackHandle(\n    function* handleSinglePool(action: LikePoolRequestAction) {\n      const { pool, like } = action.payload\n      try {\n        yield call(() => builder.likePool(pool, like))\n        yield put(likePoolSuccess())\n      } catch (e) {\n        yield put(likePoolFailure(e.message))\n      }\n    },\n    function mergeLikeAction(\n      currentAction: LikePoolRequestAction,\n      nextAction: LikePoolRequestAction | null,\n      newAction: LikePoolRequestAction\n    ) {\n      if (nextAction === null && currentAction.payload.like !== newAction.payload.like) {\n        return newAction\n      } else if (nextAction && nextAction.payload.like !== newAction.payload.like) {\n        return null\n      } else {\n        return nextAction\n      }\n    },\n    function identifyLikeAction(action: LikePoolRequestAction) {\n      return action.payload.pool\n    }\n  )\n\n  yield takeLatest(LIKE_POOL_REQUEST, handlePoolLike)\n  yield takeLatest(LOAD_POOLS_REQUEST, handleLoadPools)\n\n  function* handleLoadPools(action: LoadPoolsRequestAction) {\n    const { group, page, sortBy, sortOrder, ethAddress } = action.payload\n\n    try {\n      const { offset, limit } = getPagination(page || 1, RECORDS_PER_PAGE)\n      const { items, total }: { items: Pool[]; total: number } = yield call(() =>\n        builder.fetchPoolsPage({ offset, limit, group, eth_address: ethAddress, sort_by: sortBy, sort_order: sortOrder })\n      )\n      const records: ModelById<Pool> = {}\n      for (const item of items) {\n        records[item.id] = item\n      }\n      yield put(loadPoolsSuccess(records, total))\n    } catch (e) {\n      yield put(loadPoolsFailure(e.message))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}