{"ast":null,"code":"import { CameraInputTypes } from \"../../Cameras/cameraInputsManager\";\nimport { Quaternion } from \"../../Maths/math.vector\";\nimport { Tools } from \"../../Misc/tools\";\nimport { FreeCameraInputsManager } from \"../../Cameras/freeCameraInputsManager\";\nimport { Observable } from \"../../Misc/observable\";\n/**\r\n * Add orientation input support to the input manager.\r\n * @returns the current input manager\r\n */\n\nFreeCameraInputsManager.prototype.addDeviceOrientation = function () {\n  if (!this._deviceOrientationInput) {\n    this._deviceOrientationInput = new FreeCameraDeviceOrientationInput();\n    this.add(this._deviceOrientationInput);\n  }\n\n  return this;\n};\n/**\r\n * Takes information about the orientation of the device as reported by the deviceorientation event to orient the camera.\r\n * Screen rotation is taken into account.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\n\nvar FreeCameraDeviceOrientationInput =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a new input\r\n   * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n   */\n  function FreeCameraDeviceOrientationInput() {\n    var _this = this;\n\n    this._screenOrientationAngle = 0;\n    this._screenQuaternion = new Quaternion();\n    this._alpha = 0;\n    this._beta = 0;\n    this._gamma = 0;\n    /**\r\n     * @hidden\r\n     */\n\n    this._onDeviceOrientationChangedObservable = new Observable();\n\n    this._orientationChanged = function () {\n      _this._screenOrientationAngle = window.orientation !== undefined ? +window.orientation : window.screen.orientation && window.screen.orientation[\"angle\"] ? window.screen.orientation.angle : 0;\n      _this._screenOrientationAngle = -Tools.ToRadians(_this._screenOrientationAngle / 2);\n\n      _this._screenQuaternion.copyFromFloats(0, Math.sin(_this._screenOrientationAngle), 0, Math.cos(_this._screenOrientationAngle));\n    };\n\n    this._deviceOrientation = function (evt) {\n      _this._alpha = evt.alpha !== null ? evt.alpha : 0;\n      _this._beta = evt.beta !== null ? evt.beta : 0;\n      _this._gamma = evt.gamma !== null ? evt.gamma : 0;\n\n      if (evt.alpha !== null) {\n        _this._onDeviceOrientationChangedObservable.notifyObservers();\n      }\n    };\n\n    this._constantTranform = new Quaternion(-Math.sqrt(0.5), 0, 0, Math.sqrt(0.5));\n\n    this._orientationChanged();\n  }\n  /**\r\n   * Can be used to detect if a device orientation sensor is available on a device\r\n   * @param timeout amount of time in milliseconds to wait for a response from the sensor (default: infinite)\r\n   * @returns a promise that will resolve on orientation change\r\n   */\n\n\n  FreeCameraDeviceOrientationInput.WaitForOrientationChangeAsync = function (timeout) {\n    return new Promise(function (res, rej) {\n      var gotValue = false;\n\n      var eventHandler = function eventHandler() {\n        window.removeEventListener(\"deviceorientation\", eventHandler);\n        gotValue = true;\n        res();\n      }; // If timeout is populated reject the promise\n\n\n      if (timeout) {\n        setTimeout(function () {\n          if (!gotValue) {\n            window.removeEventListener(\"deviceorientation\", eventHandler);\n            rej(\"WaitForOrientationChangeAsync timed out\");\n          }\n        }, timeout);\n      }\n\n      if (typeof DeviceOrientationEvent !== \"undefined\" && typeof DeviceOrientationEvent.requestPermission === \"function\") {\n        DeviceOrientationEvent.requestPermission().then(function (response) {\n          if (response == \"granted\") {\n            window.addEventListener(\"deviceorientation\", eventHandler);\n          } else {\n            Tools.Warn(\"Permission not granted.\");\n          }\n        }).catch(function (error) {\n          Tools.Error(error);\n        });\n      } else {\n        window.addEventListener(\"deviceorientation\", eventHandler);\n      }\n    });\n  };\n\n  Object.defineProperty(FreeCameraDeviceOrientationInput.prototype, \"camera\", {\n    /**\r\n     * Define the camera controlled by the input.\r\n     */\n    get: function get() {\n      return this._camera;\n    },\n    set: function set(camera) {\n      var _this = this;\n\n      this._camera = camera;\n\n      if (this._camera != null && !this._camera.rotationQuaternion) {\n        this._camera.rotationQuaternion = new Quaternion();\n      }\n\n      if (this._camera) {\n        this._camera.onDisposeObservable.add(function () {\n          _this._onDeviceOrientationChangedObservable.clear();\n        });\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Attach the input controls to a specific dom element to get the input from.\r\n   */\n\n  FreeCameraDeviceOrientationInput.prototype.attachControl = function () {\n    var _this = this;\n\n    var hostWindow = this.camera.getScene().getEngine().getHostWindow();\n\n    if (hostWindow) {\n      var eventHandler_1 = function eventHandler_1() {\n        hostWindow.addEventListener(\"orientationchange\", _this._orientationChanged);\n        hostWindow.addEventListener(\"deviceorientation\", _this._deviceOrientation); //In certain cases, the attach control is called AFTER orientation was changed,\n        //So this is needed.\n\n        _this._orientationChanged();\n      };\n\n      if (typeof DeviceOrientationEvent !== \"undefined\" && typeof DeviceOrientationEvent.requestPermission === \"function\") {\n        DeviceOrientationEvent.requestPermission().then(function (response) {\n          if (response === \"granted\") {\n            eventHandler_1();\n          } else {\n            Tools.Warn(\"Permission not granted.\");\n          }\n        }).catch(function (error) {\n          Tools.Error(error);\n        });\n      } else {\n        eventHandler_1();\n      }\n    }\n  };\n  /**\r\n   * Detach the current controls from the specified dom element.\r\n   * @param ignored defines an ignored parameter kept for backward compatibility. If you want to define the source input element, you can set engine.inputElement before calling camera.attachControl\r\n   */\n\n\n  FreeCameraDeviceOrientationInput.prototype.detachControl = function (ignored) {\n    window.removeEventListener(\"orientationchange\", this._orientationChanged);\n    window.removeEventListener(\"deviceorientation\", this._deviceOrientation);\n    this._alpha = 0;\n  };\n  /**\r\n   * Update the current camera state depending on the inputs that have been used this frame.\r\n   * This is a dynamically created lambda to avoid the performance penalty of looping for inputs in the render loop.\r\n   */\n\n\n  FreeCameraDeviceOrientationInput.prototype.checkInputs = function () {\n    //if no device orientation provided, don't update the rotation.\n    //Only testing against alpha under the assumption thatnorientation will never be so exact when set.\n    if (!this._alpha) {\n      return;\n    }\n\n    Quaternion.RotationYawPitchRollToRef(Tools.ToRadians(this._alpha), Tools.ToRadians(this._beta), -Tools.ToRadians(this._gamma), this.camera.rotationQuaternion);\n\n    this._camera.rotationQuaternion.multiplyInPlace(this._screenQuaternion);\n\n    this._camera.rotationQuaternion.multiplyInPlace(this._constantTranform); //Mirror on XY Plane\n\n\n    this._camera.rotationQuaternion.z *= -1;\n    this._camera.rotationQuaternion.w *= -1;\n  };\n  /**\r\n   * Gets the class name of the current intput.\r\n   * @returns the class name\r\n   */\n\n\n  FreeCameraDeviceOrientationInput.prototype.getClassName = function () {\n    return \"FreeCameraDeviceOrientationInput\";\n  };\n  /**\r\n   * Get the friendly name associated with the input class.\r\n   * @returns the input friendly name\r\n   */\n\n\n  FreeCameraDeviceOrientationInput.prototype.getSimpleName = function () {\n    return \"deviceOrientation\";\n  };\n\n  return FreeCameraDeviceOrientationInput;\n}();\n\nexport { FreeCameraDeviceOrientationInput };\nCameraInputTypes[\"FreeCameraDeviceOrientationInput\"] = FreeCameraDeviceOrientationInput;","map":null,"metadata":{},"sourceType":"module"}