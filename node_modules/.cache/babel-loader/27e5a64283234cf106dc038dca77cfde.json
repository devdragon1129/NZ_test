{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/AssetCard/AssetCard.tsx\";\nimport * as React from 'react';\nimport { DragSource } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport VerticalCard from './VerticalCard';\nimport HorizontalCard from './HorizontalCard';\nimport { ASSET_TYPE, collect, assetSource } from './AssetCard.dnd';\nimport './AssetCard.css';\n\nvar AssetCard = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(AssetCard, _React$PureComponent);\n\n  function AssetCard() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AssetCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AssetCard)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleClick = function () {\n      var _this$props = _this.props,\n          asset = _this$props.asset,\n          onClick = _this$props.onClick;\n\n      if (!asset.isDisabled) {\n        onClick(asset);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(AssetCard, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.props.connectDragPreview(getEmptyImage());\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          isHorizontal = _this$props2.isHorizontal,\n          asset = _this$props2.asset,\n          connectDragSource = _this$props2.connectDragSource,\n          isDragging = _this$props2.isDragging;\n      return connectDragSource( /*#__PURE__*/React.createElement(\"div\", {\n        onClick: this.handleClick,\n        \"data-asset-id\": asset.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 7\n        }\n      }, isHorizontal ? /*#__PURE__*/React.createElement(HorizontalCard, {\n        asset: asset,\n        isDragging: isDragging,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }\n      }) : /*#__PURE__*/React.createElement(VerticalCard, {\n        asset: asset,\n        isDragging: isDragging,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 84\n        }\n      })));\n    }\n  }]);\n\n  return AssetCard;\n}(React.PureComponent);\n\nAssetCard.defaultProps = {\n  onClick: function onClick(_) {\n    /* noop */\n  },\n  onBeginDrag: function onBeginDrag(_) {\n    /* noop */\n  }\n};\nexport default DragSource(ASSET_TYPE, assetSource, collect)(AssetCard);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/AssetCard/AssetCard.tsx"],"names":["React","DragSource","getEmptyImage","VerticalCard","HorizontalCard","ASSET_TYPE","collect","assetSource","AssetCard","handleClick","props","asset","onClick","isDisabled","connectDragPreview","isHorizontal","connectDragSource","isDragging","id","PureComponent","defaultProps","_","onBeginDrag"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,WAA3B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AAIA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,UAAT,EAAqBC,OAArB,EAA8BC,WAA9B,QAAiE,iBAAjE;AAEA,OAAO,iBAAP;;IAEMC,S;;;;;;;;;;;;;;;;UAcJC,W,GAAc,YAAM;AAAA,wBACS,MAAKC,KADd;AAAA,UACVC,KADU,eACVA,KADU;AAAA,UACHC,OADG,eACHA,OADG;;AAElB,UAAI,CAACD,KAAK,CAACE,UAAX,EAAuB;AACrBD,QAAAA,OAAO,CAACD,KAAD,CAAP;AACD;AACF,K;;;;;;;yCAToB;AACnB,WAAKD,KAAL,CAAWI,kBAAX,CAA8BZ,aAAa,EAA3C;AACD;;;6BASQ;AAAA,yBACwD,KAAKQ,KAD7D;AAAA,UACCK,YADD,gBACCA,YADD;AAAA,UACeJ,KADf,gBACeA,KADf;AAAA,UACsBK,iBADtB,gBACsBA,iBADtB;AAAA,UACyCC,UADzC,gBACyCA,UADzC;AAEP,aAAOD,iBAAiB,eACtB;AAAK,QAAA,OAAO,EAAE,KAAKP,WAAnB;AAAgC,yBAAeE,KAAK,CAACO,EAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGH,YAAY,gBAAG,oBAAC,cAAD;AAAgB,QAAA,KAAK,EAAEJ,KAAvB;AAA8B,QAAA,UAAU,EAAEM,UAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,gBAA8D,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAEN,KAArB;AAA4B,QAAA,UAAU,EAAEM,UAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAD7E,CADsB,CAAxB;AAKD;;;;EA5BqBjB,KAAK,CAACmB,a;;AAAxBX,S,CACGY,Y,GAA6B;AAClCR,EAAAA,OAAO,EAAE,iBAACS,CAAD,EAAc;AACrB;AACD,GAHiC;AAIlCC,EAAAA,WAAW,EAAE,qBAACD,CAAD,EAAc;AACzB;AACD;AANiC,C;AA8BtC,eAAepB,UAAU,CAAwBI,UAAxB,EAAoCE,WAApC,EAAiDD,OAAjD,CAAV,CAAoEE,SAApE,CAAf","sourcesContent":["import * as React from 'react'\nimport { DragSource } from 'react-dnd'\nimport { getEmptyImage } from 'react-dnd-html5-backend'\n\nimport { Asset } from 'modules/asset/types'\nimport { Props, DefaultProps } from './AssetCard.types'\nimport VerticalCard from './VerticalCard'\nimport HorizontalCard from './HorizontalCard'\nimport { ASSET_TYPE, collect, assetSource, CollectedProps } from './AssetCard.dnd'\n\nimport './AssetCard.css'\n\nclass AssetCard extends React.PureComponent<Props & CollectedProps> {\n  static defaultProps: DefaultProps = {\n    onClick: (_: Asset) => {\n      /* noop */\n    },\n    onBeginDrag: (_: Asset) => {\n      /* noop */\n    }\n  }\n\n  componentWillMount() {\n    this.props.connectDragPreview(getEmptyImage())\n  }\n\n  handleClick = () => {\n    const { asset, onClick } = this.props\n    if (!asset.isDisabled) {\n      onClick(asset)\n    }\n  }\n\n  render() {\n    const { isHorizontal, asset, connectDragSource, isDragging } = this.props\n    return connectDragSource(\n      <div onClick={this.handleClick} data-asset-id={asset.id}>\n        {isHorizontal ? <HorizontalCard asset={asset} isDragging={isDragging} /> : <VerticalCard asset={asset} isDragging={isDragging} />}\n      </div>\n    )\n  }\n}\n\nexport default DragSource<Props, CollectedProps>(ASSET_TYPE, assetSource, collect)(AssetCard)\n"]},"metadata":{},"sourceType":"module"}