{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar util_1 = require(\"../../compile/util\");\n\nvar error = {\n  message: function message(_ref) {\n    var _ref$params = _ref.params,\n        min = _ref$params.min,\n        max = _ref$params.max;\n    return max === undefined ? (0, codegen_1.str)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must contain at least \", \" valid item(s)\"])), min) : (0, codegen_1.str)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"must contain at least \", \" and no more than \", \" valid item(s)\"])), min, max);\n  },\n  params: function params(_ref2) {\n    var _ref2$params = _ref2.params,\n        min = _ref2$params.min,\n        max = _ref2$params.max;\n    return max === undefined ? (0, codegen_1._)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"{minContains: \", \"}\"])), min) : (0, codegen_1._)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"{minContains: \", \", maxContains: \", \"}\"])), min, max);\n  }\n};\nvar def = {\n  keyword: \"contains\",\n  type: \"array\",\n  schemaType: [\"object\", \"boolean\"],\n  before: \"uniqueItems\",\n  trackErrors: true,\n  error: error,\n  code: function code(cxt) {\n    var gen = cxt.gen,\n        schema = cxt.schema,\n        parentSchema = cxt.parentSchema,\n        data = cxt.data,\n        it = cxt.it;\n    var min;\n    var max;\n    var minContains = parentSchema.minContains,\n        maxContains = parentSchema.maxContains;\n\n    if (it.opts.next) {\n      min = minContains === undefined ? 1 : minContains;\n      max = maxContains;\n    } else {\n      min = 1;\n    }\n\n    var len = gen.const(\"len\", (0, codegen_1._)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \".length\"])), data));\n    cxt.setParams({\n      min: min,\n      max: max\n    });\n\n    if (max === undefined && min === 0) {\n      (0, util_1.checkStrictMode)(it, \"\\\"minContains\\\" == 0 without \\\"maxContains\\\": \\\"contains\\\" keyword ignored\");\n      return;\n    }\n\n    if (max !== undefined && min > max) {\n      (0, util_1.checkStrictMode)(it, \"\\\"minContains\\\" > \\\"maxContains\\\" is always invalid\");\n      cxt.fail();\n      return;\n    }\n\n    if ((0, util_1.alwaysValidSchema)(it, schema)) {\n      var cond = (0, codegen_1._)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\", \" >= \", \"\"])), len, min);\n      if (max !== undefined) cond = (0, codegen_1._)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\", \" && \", \" <= \", \"\"])), cond, len, max);\n      cxt.pass(cond);\n      return;\n    }\n\n    it.items = true;\n    var valid = gen.name(\"valid\");\n\n    if (max === undefined && min === 1) {\n      validateItems(valid, function () {\n        return gen.if(valid, function () {\n          return gen.break();\n        });\n      });\n    } else if (min === 0) {\n      gen.let(valid, true);\n      if (max !== undefined) gen.if((0, codegen_1._)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\", \".length > 0\"])), data), validateItemsWithCount);\n    } else {\n      gen.let(valid, false);\n      validateItemsWithCount();\n    }\n\n    cxt.result(valid, function () {\n      return cxt.reset();\n    });\n\n    function validateItemsWithCount() {\n      var schValid = gen.name(\"_valid\");\n      var count = gen.let(\"count\", 0);\n      validateItems(schValid, function () {\n        return gen.if(schValid, function () {\n          return checkLimits(count);\n        });\n      });\n    }\n\n    function validateItems(_valid, block) {\n      gen.forRange(\"i\", 0, len, function (i) {\n        cxt.subschema({\n          keyword: \"contains\",\n          dataProp: i,\n          dataPropType: util_1.Type.Num,\n          compositeRule: true\n        }, _valid);\n        block();\n      });\n    }\n\n    function checkLimits(count) {\n      gen.code((0, codegen_1._)(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"\", \"++\"])), count));\n\n      if (max === undefined) {\n        gen.if((0, codegen_1._)(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"\", \" >= \", \"\"])), count, min), function () {\n          return gen.assign(valid, true).break();\n        });\n      } else {\n        gen.if((0, codegen_1._)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([\"\", \" > \", \"\"])), count, max), function () {\n          return gen.assign(valid, false).break();\n        });\n        if (min === 1) gen.assign(valid, true);else gen.if((0, codegen_1._)(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([\"\", \" >= \", \"\"])), count, min), function () {\n          return gen.assign(valid, true);\n        });\n      }\n    }\n  }\n};\nexports.default = def;","map":null,"metadata":{},"sourceType":"script"}