{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { config } from 'config';\nimport { BaseAPI } from 'decentraland-dapps/dist/lib/api';\nexport var PEER_URL = config.get('PEER_URL', '');\nexport var getCatalystContentUrl = function getCatalystContentUrl() {\n  var hash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return \"\".concat(PEER_URL, \"/content/contents/\").concat(hash);\n};\nexport var PeerAPI = /*#__PURE__*/function (_BaseAPI) {\n  _inherits(PeerAPI, _BaseAPI);\n\n  function PeerAPI() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PeerAPI);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PeerAPI)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.fetchScene = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(x, y) {\n        var req, res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"\".concat(_this.url, \"/content/entities/scene?pointer=\").concat(x, \",\").concat(y));\n\n              case 2:\n                req = _context.sent;\n                _context.next = 5;\n                return req.json();\n\n              case 5:\n                res = _context.sent;\n                return _context.abrupt(\"return\", res);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  return PeerAPI;\n}(BaseAPI);\nexport var content = new PeerAPI(PEER_URL);","map":{"version":3,"sources":["/opt/work/NZ_test/src/lib/api/peer.ts"],"names":["config","BaseAPI","PEER_URL","get","getCatalystContentUrl","hash","PeerAPI","fetchScene","x","y","fetch","url","req","json","res","content"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,OAAT,QAAwB,iCAAxB;AAGA,OAAO,IAAMC,QAAQ,GAAGF,MAAM,CAACG,GAAP,CAAW,UAAX,EAAuB,EAAvB,CAAjB;AAEP,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,MAACC,IAAD,uEAAgB,EAAhB;AAAA,mBAA0BH,QAA1B,+BAAuDG,IAAvD;AAAA,CAA9B;AAEP,WAAaC,OAAb;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,UACEC,UADF;AAAA,0EACe,iBAAOC,CAAP,EAAkBC,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACOC,KAAK,WAAI,MAAKC,GAAT,6CAA+CH,CAA/C,cAAoDC,CAApD,EADZ;;AAAA;AACLG,gBAAAA,GADK;AAAA;AAAA,uBAEOA,GAAG,CAACC,IAAJ,EAFP;;AAAA;AAELC,gBAAAA,GAFK;AAAA,iDAGJA,GAHI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADf;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,EAA6Bb,OAA7B;AAQA,OAAO,IAAMc,OAAO,GAAG,IAAIT,OAAJ,CAAYJ,QAAZ,CAAhB","sourcesContent":["import { config } from 'config'\nimport { BaseAPI } from 'decentraland-dapps/dist/lib/api'\nimport { ContentServiceScene } from 'modules/deployment/types'\n\nexport const PEER_URL = config.get('PEER_URL', '')\n\nexport const getCatalystContentUrl = (hash: string = '') => `${PEER_URL}/content/contents/${hash}`\n\nexport class PeerAPI extends BaseAPI {\n  fetchScene = async (x: number, y: number) => {\n    const req = await fetch(`${this.url}/content/entities/scene?pointer=${x},${y}`)\n    const res = await req.json()\n    return res as ContentServiceScene\n  }\n}\n\nexport const content = new PeerAPI(PEER_URL)\n"]},"metadata":{},"sourceType":"module"}