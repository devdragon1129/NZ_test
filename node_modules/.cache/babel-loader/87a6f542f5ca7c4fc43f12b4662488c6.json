{"ast":null,"code":"import { Logger } from \"../Misc/logger\";\n/**\r\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\r\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\r\n */\n\nvar KhronosTextureContainer =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new KhronosTextureContainer\r\n   * @param data contents of the KTX container file\r\n   * @param facesExpected should be either 1 or 6, based whether a cube texture or or\r\n   * @param threeDExpected provision for indicating that data should be a 3D texture, not implemented\r\n   * @param textureArrayExpected provision for indicating that data should be a texture array, not implemented\r\n   */\n  function KhronosTextureContainer(\n  /** contents of the KTX container file */\n  data, facesExpected, threeDExpected, textureArrayExpected) {\n    this.data = data;\n    /**\r\n     * If the container has been made invalid (eg. constructor failed to correctly load array buffer)\r\n     */\n\n    this.isInvalid = false;\n\n    if (!KhronosTextureContainer.IsValid(data)) {\n      this.isInvalid = true;\n      Logger.Error(\"texture missing KTX identifier\");\n      return;\n    } // load the reset of the header in native 32 bit uint\n\n\n    var dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    var headerDataView = new DataView(this.data.buffer, this.data.byteOffset + 12, 13 * dataSize);\n    var endianness = headerDataView.getUint32(0, true);\n    var littleEndian = endianness === 0x04030201;\n    this.glType = headerDataView.getUint32(1 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glTypeSize = headerDataView.getUint32(2 * dataSize, littleEndian); // must be 1 for compressed textures\n\n    this.glFormat = headerDataView.getUint32(3 * dataSize, littleEndian); // must be 0 for compressed textures\n\n    this.glInternalFormat = headerDataView.getUint32(4 * dataSize, littleEndian); // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n\n    this.glBaseInternalFormat = headerDataView.getUint32(5 * dataSize, littleEndian); // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n\n    this.pixelWidth = headerDataView.getUint32(6 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n\n    this.pixelHeight = headerDataView.getUint32(7 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n\n    this.pixelDepth = headerDataView.getUint32(8 * dataSize, littleEndian); // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n\n    this.numberOfArrayElements = headerDataView.getUint32(9 * dataSize, littleEndian); // used for texture arrays\n\n    this.numberOfFaces = headerDataView.getUint32(10 * dataSize, littleEndian); // used for cubemap textures, should either be 1 or 6\n\n    this.numberOfMipmapLevels = headerDataView.getUint32(11 * dataSize, littleEndian); // number of levels; disregard possibility of 0 for compressed textures\n\n    this.bytesOfKeyValueData = headerDataView.getUint32(12 * dataSize, littleEndian); // the amount of space after the header for meta-data\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n\n    if (this.glType !== 0) {\n      Logger.Error(\"only compressed formats currently supported\");\n      return;\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      this.numberOfMipmapLevels = Math.max(1, this.numberOfMipmapLevels);\n    }\n\n    if (this.pixelHeight === 0 || this.pixelDepth !== 0) {\n      Logger.Error(\"only 2D textures currently supported\");\n      return;\n    }\n\n    if (this.numberOfArrayElements !== 0) {\n      Logger.Error(\"texture arrays not currently supported\");\n      return;\n    }\n\n    if (this.numberOfFaces !== facesExpected) {\n      Logger.Error(\"number of faces expected\" + facesExpected + \", but found \" + this.numberOfFaces);\n      return;\n    } // we now have a completely validated file, so could use existence of loadType as success\n    // would need to make this more elaborate & adjust checks above to support more than one load type\n\n\n    this.loadType = KhronosTextureContainer.COMPRESSED_2D;\n  }\n  /**\r\n   * Uploads KTX content to a Babylon Texture.\r\n   * It is assumed that the texture has already been created & is currently bound\r\n   * @hidden\r\n   */\n\n\n  KhronosTextureContainer.prototype.uploadLevels = function (texture, loadMipmaps) {\n    switch (this.loadType) {\n      case KhronosTextureContainer.COMPRESSED_2D:\n        this._upload2DCompressedLevels(texture, loadMipmaps);\n\n        break;\n\n      case KhronosTextureContainer.TEX_2D:\n      case KhronosTextureContainer.COMPRESSED_3D:\n      case KhronosTextureContainer.TEX_3D:\n    }\n  };\n\n  KhronosTextureContainer.prototype._upload2DCompressedLevels = function (texture, loadMipmaps) {\n    // initialize width & height for level 1\n    var dataOffset = KhronosTextureContainer.HEADER_LEN + this.bytesOfKeyValueData;\n    var width = this.pixelWidth;\n    var height = this.pixelHeight;\n    var mipmapCount = loadMipmaps ? this.numberOfMipmapLevels : 1;\n\n    for (var level = 0; level < mipmapCount; level++) {\n      var imageSize = new Int32Array(this.data.buffer, this.data.byteOffset + dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n\n      dataOffset += 4; //image data starts from next multiple of 4 offset. Each face refers to same imagesize field above.\n\n      for (var face = 0; face < this.numberOfFaces; face++) {\n        var byteArray = new Uint8Array(this.data.buffer, this.data.byteOffset + dataOffset, imageSize);\n        var engine = texture.getEngine();\n\n        engine._uploadCompressedDataToTextureDirectly(texture, this.glInternalFormat, width, height, byteArray, face, level);\n\n        dataOffset += imageSize; // add size of the image for the next face/mipmap\n\n        dataOffset += 3 - (imageSize + 3) % 4; // add padding for odd sized image\n      }\n\n      width = Math.max(1.0, width * 0.5);\n      height = Math.max(1.0, height * 0.5);\n    }\n  };\n  /**\r\n   * Checks if the given data starts with a KTX file identifier.\r\n   * @param data the data to check\r\n   * @returns true if the data is a KTX file or false otherwise\r\n   */\n\n\n  KhronosTextureContainer.IsValid = function (data) {\n    if (data.byteLength >= 12) {\n      // '«', 'K', 'T', 'X', ' ', '1', '1', '»', '\\r', '\\n', '\\x1A', '\\n'\n      var identifier = new Uint8Array(data.buffer, data.byteOffset, 12);\n\n      if (identifier[0] === 0xAB && identifier[1] === 0x4B && identifier[2] === 0x54 && identifier[3] === 0x58 && identifier[4] === 0x20 && identifier[5] === 0x31 && identifier[6] === 0x31 && identifier[7] === 0xBB && identifier[8] === 0x0D && identifier[9] === 0x0A && identifier[10] === 0x1A && identifier[11] === 0x0A) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  KhronosTextureContainer.HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n  // load types\n\n  KhronosTextureContainer.COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\n\n  KhronosTextureContainer.COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\n\n  KhronosTextureContainer.TEX_2D = 2; // uses a gl.texImage2D()\n\n  KhronosTextureContainer.TEX_3D = 3; // uses a gl.texImage3D()\n\n  return KhronosTextureContainer;\n}();\n\nexport { KhronosTextureContainer };","map":null,"metadata":{},"sourceType":"module"}