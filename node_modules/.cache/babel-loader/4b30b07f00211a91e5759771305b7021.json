{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { SerializationHelper, serialize, serializeAsTexture, expandToProperty, serializeAsColor3 } from \"../../Misc/decorators\";\nimport { Color3 } from '../../Maths/math.color';\nimport { MaterialFlags } from \"../materialFlags\";\nimport { MaterialHelper } from \"../../Materials/materialHelper\";\n/**\r\n * Define the code related to the clear coat parameters of the pbr material.\r\n */\n\nvar PBRClearCoatConfiguration =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiate a new istance of clear coat configuration.\r\n   * @param markAllSubMeshesAsTexturesDirty Callback to flag the material to dirty\r\n   */\n  function PBRClearCoatConfiguration(markAllSubMeshesAsTexturesDirty) {\n    this._isEnabled = false;\n    /**\r\n     * Defines if the clear coat is enabled in the material.\r\n     */\n\n    this.isEnabled = false;\n    /**\r\n     * Defines the clear coat layer strength (between 0 and 1) it defaults to 1.\r\n     */\n\n    this.intensity = 1;\n    /**\r\n     * Defines the clear coat layer roughness.\r\n     */\n\n    this.roughness = 0;\n    this._indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    /**\r\n     * Defines the index of refraction of the clear coat.\r\n     * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\r\n     * The default fits with a polyurethane material.\r\n     * Changing the default value is more performance intensive.\r\n     */\n\n    this.indexOfRefraction = PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n    this._texture = null;\n    /**\r\n     * Stores the clear coat values in a texture (red channel is intensity and green channel is roughness)\r\n     * If useRoughnessFromMainTexture is false, the green channel of texture is not used and the green channel of textureRoughness is used instead\r\n     * if textureRoughness is not empty, else no texture roughness is used\r\n     */\n\n    this.texture = null;\n    this._useRoughnessFromMainTexture = true;\n    /**\r\n     * Indicates that the green channel of the texture property will be used for roughness (default: true)\r\n     * If false, the green channel from textureRoughness is used for roughness\r\n     */\n\n    this.useRoughnessFromMainTexture = true;\n    this._textureRoughness = null;\n    /**\r\n     * Stores the clear coat roughness in a texture (green channel)\r\n     * Not used if useRoughnessFromMainTexture is true\r\n     */\n\n    this.textureRoughness = null;\n    this._remapF0OnInterfaceChange = true;\n    /**\r\n     * Defines if the F0 value should be remapped to account for the interface change in the material.\r\n     */\n\n    this.remapF0OnInterfaceChange = true;\n    this._bumpTexture = null;\n    /**\r\n     * Define the clear coat specific bump texture.\r\n     */\n\n    this.bumpTexture = null;\n    this._isTintEnabled = false;\n    /**\r\n     * Defines if the clear coat tint is enabled in the material.\r\n     */\n\n    this.isTintEnabled = false;\n    /**\r\n     * Defines the clear coat tint of the material.\r\n     * This is only use if tint is enabled\r\n     */\n\n    this.tintColor = Color3.White();\n    /**\r\n     * Defines the distance at which the tint color should be found in the\r\n     * clear coat media.\r\n     * This is only use if tint is enabled\r\n     */\n\n    this.tintColorAtDistance = 1;\n    /**\r\n     * Defines the clear coat layer thickness.\r\n     * This is only use if tint is enabled\r\n     */\n\n    this.tintThickness = 1;\n    this._tintTexture = null;\n    /**\r\n     * Stores the clear tint values in a texture.\r\n     * rgb is tint\r\n     * a is a thickness factor\r\n     */\n\n    this.tintTexture = null;\n    this._internalMarkAllSubMeshesAsTexturesDirty = markAllSubMeshesAsTexturesDirty;\n  }\n  /** @hidden */\n\n\n  PBRClearCoatConfiguration.prototype._markAllSubMeshesAsTexturesDirty = function () {\n    this._internalMarkAllSubMeshesAsTexturesDirty();\n  };\n  /**\r\n   * Gets wehter the submesh is ready to be used or not.\r\n   * @param defines the list of \"defines\" to update.\r\n   * @param scene defines the scene the material belongs to.\r\n   * @param engine defines the engine the material belongs to.\r\n   * @param disableBumpMap defines wether the material disables bump or not.\r\n   * @returns - boolean indicating that the submesh is ready or not.\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.isReadyForSubMesh = function (defines, scene, engine, disableBumpMap) {\n    if (defines._areTexturesDirty) {\n      if (scene.texturesEnabled) {\n        if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n          if (!this._texture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n          if (!this._textureRoughness.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n\n        if (engine.getCaps().standardDerivatives && this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n          // Bump texture cannot be not blocking.\n          if (!this._bumpTexture.isReady()) {\n            return false;\n          }\n        }\n\n        if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n          if (!this._tintTexture.isReadyOrNotBlocking()) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  };\n  /**\r\n   * Checks to see if a texture is used in the material.\r\n   * @param defines the list of \"defines\" to update.\r\n   * @param scene defines the scene to the material belongs to.\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.prepareDefines = function (defines, scene) {\n    var _a;\n\n    if (this._isEnabled) {\n      defines.CLEARCOAT = true;\n      defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = this._useRoughnessFromMainTexture;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = this._texture !== null && this._texture._texture === ((_a = this._textureRoughness) === null || _a === void 0 ? void 0 : _a._texture) && this._texture.checkTransformsAreIdentical(this._textureRoughness);\n      defines.CLEARCOAT_REMAP_F0 = this._remapF0OnInterfaceChange;\n\n      if (defines._areTexturesDirty) {\n        if (scene.texturesEnabled) {\n          if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._texture, defines, \"CLEARCOAT_TEXTURE\");\n          } else {\n            defines.CLEARCOAT_TEXTURE = false;\n          }\n\n          if (this._textureRoughness && MaterialFlags.ClearCoatTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._textureRoughness, defines, \"CLEARCOAT_TEXTURE_ROUGHNESS\");\n          } else {\n            defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n          }\n\n          if (this._bumpTexture && MaterialFlags.ClearCoatBumpTextureEnabled) {\n            MaterialHelper.PrepareDefinesForMergedUV(this._bumpTexture, defines, \"CLEARCOAT_BUMP\");\n          } else {\n            defines.CLEARCOAT_BUMP = false;\n          }\n\n          defines.CLEARCOAT_DEFAULTIOR = this._indexOfRefraction === PBRClearCoatConfiguration._DefaultIndexOfRefraction;\n\n          if (this._isTintEnabled) {\n            defines.CLEARCOAT_TINT = true;\n\n            if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n              MaterialHelper.PrepareDefinesForMergedUV(this._tintTexture, defines, \"CLEARCOAT_TINT_TEXTURE\");\n            } else {\n              defines.CLEARCOAT_TINT_TEXTURE = false;\n            }\n          } else {\n            defines.CLEARCOAT_TINT = false;\n            defines.CLEARCOAT_TINT_TEXTURE = false;\n          }\n        }\n      }\n    } else {\n      defines.CLEARCOAT = false;\n      defines.CLEARCOAT_TEXTURE = false;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESS = false;\n      defines.CLEARCOAT_BUMP = false;\n      defines.CLEARCOAT_TINT = false;\n      defines.CLEARCOAT_TINT_TEXTURE = false;\n      defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE = false;\n      defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL = false;\n    }\n  };\n  /**\r\n   * Binds the material data.\r\n   * @param uniformBuffer defines the Uniform buffer to fill in.\r\n   * @param scene defines the scene the material belongs to.\r\n   * @param engine defines the engine the material belongs to.\r\n   * @param disableBumpMap defines wether the material disables bump or not.\r\n   * @param isFrozen defines wether the material is frozen or not.\r\n   * @param invertNormalMapX If sets to true, x component of normal map value will be inverted (x = 1.0 - x).\r\n   * @param invertNormalMapY If sets to true, y component of normal map value will be inverted (y = 1.0 - y).\r\n   * @param subMesh the submesh to bind data for\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.bindForSubMesh = function (uniformBuffer, scene, engine, disableBumpMap, isFrozen, invertNormalMapX, invertNormalMapY, subMesh) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    var defines = subMesh._materialDefines;\n    var identicalTextures = defines.CLEARCOAT_TEXTURE_ROUGHNESS_IDENTICAL;\n\n    if (!uniformBuffer.useUbo || !isFrozen || !uniformBuffer.isSync) {\n      if (identicalTextures && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vClearCoatInfos\", this._texture.coordinatesIndex, this._texture.level, -1, -1);\n        MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\n      } else if ((this._texture || this._textureRoughness) && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.updateFloat4(\"vClearCoatInfos\", (_b = (_a = this._texture) === null || _a === void 0 ? void 0 : _a.coordinatesIndex) !== null && _b !== void 0 ? _b : 0, (_d = (_c = this._texture) === null || _c === void 0 ? void 0 : _c.level) !== null && _d !== void 0 ? _d : 0, (_f = (_e = this._textureRoughness) === null || _e === void 0 ? void 0 : _e.coordinatesIndex) !== null && _f !== void 0 ? _f : 0, (_h = (_g = this._textureRoughness) === null || _g === void 0 ? void 0 : _g.level) !== null && _h !== void 0 ? _h : 0);\n\n        if (this._texture) {\n          MaterialHelper.BindTextureMatrix(this._texture, uniformBuffer, \"clearCoat\");\n        }\n\n        if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE) {\n          MaterialHelper.BindTextureMatrix(this._textureRoughness, uniformBuffer, \"clearCoatRoughness\");\n        }\n      }\n\n      if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatTextureEnabled && !disableBumpMap) {\n        uniformBuffer.updateFloat2(\"vClearCoatBumpInfos\", this._bumpTexture.coordinatesIndex, this._bumpTexture.level);\n        MaterialHelper.BindTextureMatrix(this._bumpTexture, uniformBuffer, \"clearCoatBump\");\n\n        if (scene._mirroredCameraPosition) {\n          uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? 1.0 : -1.0, invertNormalMapY ? 1.0 : -1.0);\n        } else {\n          uniformBuffer.updateFloat2(\"vClearCoatTangentSpaceParams\", invertNormalMapX ? -1.0 : 1.0, invertNormalMapY ? -1.0 : 1.0);\n        }\n      }\n\n      if (this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n        uniformBuffer.updateFloat2(\"vClearCoatTintInfos\", this._tintTexture.coordinatesIndex, this._tintTexture.level);\n        MaterialHelper.BindTextureMatrix(this._tintTexture, uniformBuffer, \"clearCoatTint\");\n      } // Clear Coat General params\n\n\n      uniformBuffer.updateFloat2(\"vClearCoatParams\", this.intensity, this.roughness); // Clear Coat Refraction params\n\n      var a = 1 - this._indexOfRefraction;\n      var b = 1 + this._indexOfRefraction;\n      var f0 = Math.pow(-a / b, 2); // Schlicks approx: (ior1 - ior2) / (ior1 + ior2) where ior2 for air is close to vacuum = 1.\n\n      var eta = 1 / this._indexOfRefraction;\n      uniformBuffer.updateFloat4(\"vClearCoatRefractionParams\", f0, eta, a, b);\n\n      if (this._isTintEnabled) {\n        uniformBuffer.updateFloat4(\"vClearCoatTintParams\", this.tintColor.r, this.tintColor.g, this.tintColor.b, Math.max(0.00001, this.tintThickness));\n        uniformBuffer.updateFloat(\"clearCoatColorAtDistance\", Math.max(0.00001, this.tintColorAtDistance));\n      }\n    } // Textures\n\n\n    if (scene.texturesEnabled) {\n      if (this._texture && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.setTexture(\"clearCoatSampler\", this._texture);\n      }\n\n      if (this._textureRoughness && !identicalTextures && !defines.CLEARCOAT_USE_ROUGHNESS_FROM_MAINTEXTURE && MaterialFlags.ClearCoatTextureEnabled) {\n        uniformBuffer.setTexture(\"clearCoatRoughnessSampler\", this._textureRoughness);\n      }\n\n      if (this._bumpTexture && engine.getCaps().standardDerivatives && MaterialFlags.ClearCoatBumpTextureEnabled && !disableBumpMap) {\n        uniformBuffer.setTexture(\"clearCoatBumpSampler\", this._bumpTexture);\n      }\n\n      if (this._isTintEnabled && this._tintTexture && MaterialFlags.ClearCoatTintTextureEnabled) {\n        uniformBuffer.setTexture(\"clearCoatTintSampler\", this._tintTexture);\n      }\n    }\n  };\n  /**\r\n   * Checks to see if a texture is used in the material.\r\n   * @param texture - Base texture to use.\r\n   * @returns - Boolean specifying if a texture is used in the material.\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.hasTexture = function (texture) {\n    if (this._texture === texture) {\n      return true;\n    }\n\n    if (this._textureRoughness === texture) {\n      return true;\n    }\n\n    if (this._bumpTexture === texture) {\n      return true;\n    }\n\n    if (this._tintTexture === texture) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\r\n   * Returns an array of the actively used textures.\r\n   * @param activeTextures Array of BaseTextures\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.getActiveTextures = function (activeTextures) {\n    if (this._texture) {\n      activeTextures.push(this._texture);\n    }\n\n    if (this._textureRoughness) {\n      activeTextures.push(this._textureRoughness);\n    }\n\n    if (this._bumpTexture) {\n      activeTextures.push(this._bumpTexture);\n    }\n\n    if (this._tintTexture) {\n      activeTextures.push(this._tintTexture);\n    }\n  };\n  /**\r\n   * Returns the animatable textures.\r\n   * @param animatables Array of animatable textures.\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.getAnimatables = function (animatables) {\n    if (this._texture && this._texture.animations && this._texture.animations.length > 0) {\n      animatables.push(this._texture);\n    }\n\n    if (this._textureRoughness && this._textureRoughness.animations && this._textureRoughness.animations.length > 0) {\n      animatables.push(this._textureRoughness);\n    }\n\n    if (this._bumpTexture && this._bumpTexture.animations && this._bumpTexture.animations.length > 0) {\n      animatables.push(this._bumpTexture);\n    }\n\n    if (this._tintTexture && this._tintTexture.animations && this._tintTexture.animations.length > 0) {\n      animatables.push(this._tintTexture);\n    }\n  };\n  /**\r\n   * Disposes the resources of the material.\r\n   * @param forceDisposeTextures - Forces the disposal of all textures.\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.dispose = function (forceDisposeTextures) {\n    var _a, _b, _c, _d;\n\n    if (forceDisposeTextures) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.dispose();\n      (_b = this._textureRoughness) === null || _b === void 0 ? void 0 : _b.dispose();\n      (_c = this._bumpTexture) === null || _c === void 0 ? void 0 : _c.dispose();\n      (_d = this._tintTexture) === null || _d === void 0 ? void 0 : _d.dispose();\n    }\n  };\n  /**\r\n  * Get the current class name of the texture useful for serialization or dynamic coding.\r\n  * @returns \"PBRClearCoatConfiguration\"\r\n  */\n\n\n  PBRClearCoatConfiguration.prototype.getClassName = function () {\n    return \"PBRClearCoatConfiguration\";\n  };\n  /**\r\n   * Add fallbacks to the effect fallbacks list.\r\n   * @param defines defines the Base texture to use.\r\n   * @param fallbacks defines the current fallback list.\r\n   * @param currentRank defines the current fallback rank.\r\n   * @returns the new fallback rank.\r\n   */\n\n\n  PBRClearCoatConfiguration.AddFallbacks = function (defines, fallbacks, currentRank) {\n    if (defines.CLEARCOAT_BUMP) {\n      fallbacks.addFallback(currentRank++, \"CLEARCOAT_BUMP\");\n    }\n\n    if (defines.CLEARCOAT_TINT) {\n      fallbacks.addFallback(currentRank++, \"CLEARCOAT_TINT\");\n    }\n\n    if (defines.CLEARCOAT) {\n      fallbacks.addFallback(currentRank++, \"CLEARCOAT\");\n    }\n\n    return currentRank;\n  };\n  /**\r\n   * Add the required uniforms to the current list.\r\n   * @param uniforms defines the current uniform list.\r\n   */\n\n\n  PBRClearCoatConfiguration.AddUniforms = function (uniforms) {\n    uniforms.push(\"vClearCoatTangentSpaceParams\", \"vClearCoatParams\", \"vClearCoatRefractionParams\", \"vClearCoatTintParams\", \"clearCoatColorAtDistance\", \"clearCoatMatrix\", \"clearCoatRoughnessMatrix\", \"clearCoatBumpMatrix\", \"clearCoatTintMatrix\", \"vClearCoatInfos\", \"vClearCoatBumpInfos\", \"vClearCoatTintInfos\");\n  };\n  /**\r\n   * Add the required samplers to the current list.\r\n   * @param samplers defines the current sampler list.\r\n   */\n\n\n  PBRClearCoatConfiguration.AddSamplers = function (samplers) {\n    samplers.push(\"clearCoatSampler\", \"clearCoatRoughnessSampler\", \"clearCoatBumpSampler\", \"clearCoatTintSampler\");\n  };\n  /**\r\n   * Add the required uniforms to the current buffer.\r\n   * @param uniformBuffer defines the current uniform buffer.\r\n   */\n\n\n  PBRClearCoatConfiguration.PrepareUniformBuffer = function (uniformBuffer) {\n    uniformBuffer.addUniform(\"vClearCoatParams\", 2);\n    uniformBuffer.addUniform(\"vClearCoatRefractionParams\", 4);\n    uniformBuffer.addUniform(\"vClearCoatInfos\", 4);\n    uniformBuffer.addUniform(\"clearCoatMatrix\", 16);\n    uniformBuffer.addUniform(\"clearCoatRoughnessMatrix\", 16);\n    uniformBuffer.addUniform(\"vClearCoatBumpInfos\", 2);\n    uniformBuffer.addUniform(\"vClearCoatTangentSpaceParams\", 2);\n    uniformBuffer.addUniform(\"clearCoatBumpMatrix\", 16);\n    uniformBuffer.addUniform(\"vClearCoatTintParams\", 4);\n    uniformBuffer.addUniform(\"clearCoatColorAtDistance\", 1);\n    uniformBuffer.addUniform(\"vClearCoatTintInfos\", 2);\n    uniformBuffer.addUniform(\"clearCoatTintMatrix\", 16);\n  };\n  /**\r\n   * Makes a duplicate of the current configuration into another one.\r\n   * @param clearCoatConfiguration define the config where to copy the info\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.copyTo = function (clearCoatConfiguration) {\n    SerializationHelper.Clone(function () {\n      return clearCoatConfiguration;\n    }, this);\n  };\n  /**\r\n   * Serializes this clear coat configuration.\r\n   * @returns - An object with the serialized config.\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.serialize = function () {\n    return SerializationHelper.Serialize(this);\n  };\n  /**\r\n   * Parses a anisotropy Configuration from a serialized object.\r\n   * @param source - Serialized object.\r\n   * @param scene Defines the scene we are parsing for\r\n   * @param rootUrl Defines the rootUrl to load from\r\n   */\n\n\n  PBRClearCoatConfiguration.prototype.parse = function (source, scene, rootUrl) {\n    var _this = this;\n\n    SerializationHelper.Parse(function () {\n      return _this;\n    }, source, scene, rootUrl);\n  };\n  /**\r\n   * This defaults to 1.5 corresponding to a 0.04 f0 or a 4% reflectance at normal incidence\r\n   * The default fits with a polyurethane material.\r\n   * @hidden\r\n   */\n\n\n  PBRClearCoatConfiguration._DefaultIndexOfRefraction = 1.5;\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"isEnabled\", void 0);\n\n  __decorate([serialize()], PBRClearCoatConfiguration.prototype, \"intensity\", void 0);\n\n  __decorate([serialize()], PBRClearCoatConfiguration.prototype, \"roughness\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"indexOfRefraction\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"texture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"useRoughnessFromMainTexture\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"textureRoughness\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"remapF0OnInterfaceChange\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"bumpTexture\", void 0);\n\n  __decorate([serialize(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"isTintEnabled\", void 0);\n\n  __decorate([serializeAsColor3()], PBRClearCoatConfiguration.prototype, \"tintColor\", void 0);\n\n  __decorate([serialize()], PBRClearCoatConfiguration.prototype, \"tintColorAtDistance\", void 0);\n\n  __decorate([serialize()], PBRClearCoatConfiguration.prototype, \"tintThickness\", void 0);\n\n  __decorate([serializeAsTexture(), expandToProperty(\"_markAllSubMeshesAsTexturesDirty\")], PBRClearCoatConfiguration.prototype, \"tintTexture\", void 0);\n\n  return PBRClearCoatConfiguration;\n}();\n\nexport { PBRClearCoatConfiguration };","map":null,"metadata":{},"sourceType":"module"}