{"ast":null,"code":"import { PointerEventTypes } from \"../../Events/pointerEvents\";\nimport { PrecisionDate } from \"../../Misc/precisionDate\";\n/**\r\n * The autoRotation behavior (AutoRotationBehavior) is designed to create a smooth rotation of an ArcRotateCamera when there is no user interaction.\r\n * @see https://doc.babylonjs.com/how_to/camera_behaviors#autorotation-behavior\r\n */\n\nvar AutoRotationBehavior =\n/** @class */\nfunction () {\n  function AutoRotationBehavior() {\n    this._zoomStopsAnimation = false;\n    this._idleRotationSpeed = 0.05;\n    this._idleRotationWaitTime = 2000;\n    this._idleRotationSpinupTime = 2000;\n    this._isPointerDown = false;\n    this._lastFrameTime = null;\n    this._lastInteractionTime = -Infinity;\n    this._cameraRotationSpeed = 0;\n    this._lastFrameRadius = 0;\n  }\n\n  Object.defineProperty(AutoRotationBehavior.prototype, \"name\", {\n    /**\r\n     * Gets the name of the behavior.\r\n     */\n    get: function get() {\n      return \"AutoRotation\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AutoRotationBehavior.prototype, \"zoomStopsAnimation\", {\n    /**\r\n    * Gets the flag that indicates if user zooming should stop animation.\r\n    */\n    get: function get() {\n      return this._zoomStopsAnimation;\n    },\n\n    /**\r\n    * Sets the flag that indicates if user zooming should stop animation.\r\n    */\n    set: function set(flag) {\n      this._zoomStopsAnimation = flag;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AutoRotationBehavior.prototype, \"idleRotationSpeed\", {\n    /**\r\n    * Gets the default speed at which the camera rotates around the model.\r\n    */\n    get: function get() {\n      return this._idleRotationSpeed;\n    },\n\n    /**\r\n    * Sets the default speed at which the camera rotates around the model.\r\n    */\n    set: function set(speed) {\n      this._idleRotationSpeed = speed;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AutoRotationBehavior.prototype, \"idleRotationWaitTime\", {\n    /**\r\n    * Gets the time (milliseconds) to wait after user interaction before the camera starts rotating.\r\n    */\n    get: function get() {\n      return this._idleRotationWaitTime;\n    },\n\n    /**\r\n    * Sets the time (in milliseconds) to wait after user interaction before the camera starts rotating.\r\n    */\n    set: function set(time) {\n      this._idleRotationWaitTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AutoRotationBehavior.prototype, \"idleRotationSpinupTime\", {\n    /**\r\n    * Gets the time (milliseconds) to take to spin up to the full idle rotation speed.\r\n    */\n    get: function get() {\n      return this._idleRotationSpinupTime;\n    },\n\n    /**\r\n    * Sets the time (milliseconds) to take to spin up to the full idle rotation speed.\r\n    */\n    set: function set(time) {\n      this._idleRotationSpinupTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AutoRotationBehavior.prototype, \"rotationInProgress\", {\n    /**\r\n     * Gets a value indicating if the camera is currently rotating because of this behavior\r\n     */\n    get: function get() {\n      return Math.abs(this._cameraRotationSpeed) > 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Initializes the behavior.\r\n   */\n\n  AutoRotationBehavior.prototype.init = function () {// Do notihng\n  };\n  /**\r\n   * Attaches the behavior to its arc rotate camera.\r\n   * @param camera Defines the camera to attach the behavior to\r\n   */\n\n\n  AutoRotationBehavior.prototype.attach = function (camera) {\n    var _this = this;\n\n    this._attachedCamera = camera;\n\n    var scene = this._attachedCamera.getScene();\n\n    this._onPrePointerObservableObserver = scene.onPrePointerObservable.add(function (pointerInfoPre) {\n      if (pointerInfoPre.type === PointerEventTypes.POINTERDOWN) {\n        _this._isPointerDown = true;\n        return;\n      }\n\n      if (pointerInfoPre.type === PointerEventTypes.POINTERUP) {\n        _this._isPointerDown = false;\n      }\n    });\n    this._onAfterCheckInputsObserver = camera.onAfterCheckInputsObservable.add(function () {\n      var now = PrecisionDate.Now;\n      var dt = 0;\n\n      if (_this._lastFrameTime != null) {\n        dt = now - _this._lastFrameTime;\n      }\n\n      _this._lastFrameTime = now; // Stop the animation if there is user interaction and the animation should stop for this interaction\n\n      _this._applyUserInteraction();\n\n      var timeToRotation = now - _this._lastInteractionTime - _this._idleRotationWaitTime;\n      var scale = Math.max(Math.min(timeToRotation / _this._idleRotationSpinupTime, 1), 0);\n      _this._cameraRotationSpeed = _this._idleRotationSpeed * scale; // Step camera rotation by rotation speed\n\n      if (_this._attachedCamera) {\n        _this._attachedCamera.alpha -= _this._cameraRotationSpeed * (dt / 1000);\n      }\n    });\n  };\n  /**\r\n   * Detaches the behavior from its current arc rotate camera.\r\n   */\n\n\n  AutoRotationBehavior.prototype.detach = function () {\n    if (!this._attachedCamera) {\n      return;\n    }\n\n    var scene = this._attachedCamera.getScene();\n\n    if (this._onPrePointerObservableObserver) {\n      scene.onPrePointerObservable.remove(this._onPrePointerObservableObserver);\n    }\n\n    this._attachedCamera.onAfterCheckInputsObservable.remove(this._onAfterCheckInputsObserver);\n\n    this._attachedCamera = null;\n  };\n  /**\r\n   * Returns true if user is scrolling.\r\n   * @return true if user is scrolling.\r\n   */\n\n\n  AutoRotationBehavior.prototype._userIsZooming = function () {\n    if (!this._attachedCamera) {\n      return false;\n    }\n\n    return this._attachedCamera.inertialRadiusOffset !== 0;\n  };\n\n  AutoRotationBehavior.prototype._shouldAnimationStopForInteraction = function () {\n    if (!this._attachedCamera) {\n      return false;\n    }\n\n    var zoomHasHitLimit = false;\n\n    if (this._lastFrameRadius === this._attachedCamera.radius && this._attachedCamera.inertialRadiusOffset !== 0) {\n      zoomHasHitLimit = true;\n    } // Update the record of previous radius - works as an approx. indicator of hitting radius limits\n\n\n    this._lastFrameRadius = this._attachedCamera.radius;\n    return this._zoomStopsAnimation ? zoomHasHitLimit : this._userIsZooming();\n  };\n  /**\r\n   *  Applies any current user interaction to the camera. Takes into account maximum alpha rotation.\r\n   */\n\n\n  AutoRotationBehavior.prototype._applyUserInteraction = function () {\n    if (this._userIsMoving() && !this._shouldAnimationStopForInteraction()) {\n      this._lastInteractionTime = PrecisionDate.Now;\n    }\n  }; // Tools\n\n\n  AutoRotationBehavior.prototype._userIsMoving = function () {\n    if (!this._attachedCamera) {\n      return false;\n    }\n\n    return this._attachedCamera.inertialAlphaOffset !== 0 || this._attachedCamera.inertialBetaOffset !== 0 || this._attachedCamera.inertialRadiusOffset !== 0 || this._attachedCamera.inertialPanningX !== 0 || this._attachedCamera.inertialPanningY !== 0 || this._isPointerDown;\n  };\n\n  return AutoRotationBehavior;\n}();\n\nexport { AutoRotationBehavior };","map":null,"metadata":{},"sourceType":"module"}