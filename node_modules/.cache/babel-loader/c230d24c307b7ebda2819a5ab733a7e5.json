{"ast":null,"code":"/**\r\n * Class used to store data that will be store in GPU memory\r\n */\nvar Buffer =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   * @param engine the engine\r\n   * @param data the data to use for this buffer\r\n   * @param updatable whether the data is updatable\r\n   * @param stride the stride (optional)\r\n   * @param postponeInternalCreation whether to postpone creating the internal WebGL buffer (optional)\r\n   * @param instanced whether the buffer is instanced (optional)\r\n   * @param useBytes set to true if the stride in in bytes (optional)\r\n   * @param divisor sets an optional divisor for instances (1 by default)\r\n   */\n  function Buffer(engine, data, updatable, stride, postponeInternalCreation, instanced, useBytes, divisor) {\n    if (stride === void 0) {\n      stride = 0;\n    }\n\n    if (postponeInternalCreation === void 0) {\n      postponeInternalCreation = false;\n    }\n\n    if (instanced === void 0) {\n      instanced = false;\n    }\n\n    if (useBytes === void 0) {\n      useBytes = false;\n    }\n\n    this._isAlreadyOwned = false;\n\n    if (engine.getScene) {\n      // old versions of VertexBuffer accepted 'mesh' instead of 'engine'\n      this._engine = engine.getScene().getEngine();\n    } else {\n      this._engine = engine;\n    }\n\n    this._updatable = updatable;\n    this._instanced = instanced;\n    this._divisor = divisor || 1;\n    this._data = data;\n    this.byteStride = useBytes ? stride : stride * Float32Array.BYTES_PER_ELEMENT;\n\n    if (!postponeInternalCreation) {\n      // by default\n      this.create();\n    }\n  }\n  /**\r\n   * Create a new VertexBuffer based on the current buffer\r\n   * @param kind defines the vertex buffer kind (position, normal, etc.)\r\n   * @param offset defines offset in the buffer (0 by default)\r\n   * @param size defines the size in floats of attributes (position is 3 for instance)\r\n   * @param stride defines the stride size in floats in the buffer (the offset to apply to reach next value when data is interleaved)\r\n   * @param instanced defines if the vertex buffer contains indexed data\r\n   * @param useBytes defines if the offset and stride are in bytes     *\r\n   * @param divisor sets an optional divisor for instances (1 by default)\r\n   * @returns the new vertex buffer\r\n   */\n\n\n  Buffer.prototype.createVertexBuffer = function (kind, offset, size, stride, instanced, useBytes, divisor) {\n    if (useBytes === void 0) {\n      useBytes = false;\n    }\n\n    var byteOffset = useBytes ? offset : offset * Float32Array.BYTES_PER_ELEMENT;\n    var byteStride = stride ? useBytes ? stride : stride * Float32Array.BYTES_PER_ELEMENT : this.byteStride; // a lot of these parameters are ignored as they are overriden by the buffer\n\n    return new VertexBuffer(this._engine, this, kind, this._updatable, true, byteStride, instanced === undefined ? this._instanced : instanced, byteOffset, size, undefined, undefined, true, this._divisor || divisor);\n  }; // Properties\n\n  /**\r\n   * Gets a boolean indicating if the Buffer is updatable?\r\n   * @returns true if the buffer is updatable\r\n   */\n\n\n  Buffer.prototype.isUpdatable = function () {\n    return this._updatable;\n  };\n  /**\r\n   * Gets current buffer's data\r\n   * @returns a DataArray or null\r\n   */\n\n\n  Buffer.prototype.getData = function () {\n    return this._data;\n  };\n  /**\r\n   * Gets underlying native buffer\r\n   * @returns underlying native buffer\r\n   */\n\n\n  Buffer.prototype.getBuffer = function () {\n    return this._buffer;\n  };\n  /**\r\n   * Gets the stride in float32 units (i.e. byte stride / 4).\r\n   * May not be an integer if the byte stride is not divisible by 4.\r\n   * @returns the stride in float32 units\r\n   * @deprecated Please use byteStride instead.\r\n   */\n\n\n  Buffer.prototype.getStrideSize = function () {\n    return this.byteStride / Float32Array.BYTES_PER_ELEMENT;\n  }; // Methods\n\n  /**\r\n   * Store data into the buffer. If the buffer was already used it will be either recreated or updated depending on isUpdatable property\r\n   * @param data defines the data to store\r\n   */\n\n\n  Buffer.prototype.create = function (data) {\n    if (data === void 0) {\n      data = null;\n    }\n\n    if (!data && this._buffer) {\n      return; // nothing to do\n    }\n\n    data = data || this._data;\n\n    if (!data) {\n      return;\n    }\n\n    if (!this._buffer) {\n      // create buffer\n      if (this._updatable) {\n        this._buffer = this._engine.createDynamicVertexBuffer(data);\n        this._data = data;\n      } else {\n        this._buffer = this._engine.createVertexBuffer(data);\n      }\n    } else if (this._updatable) {\n      // update buffer\n      this._engine.updateDynamicVertexBuffer(this._buffer, data);\n\n      this._data = data;\n    }\n  };\n  /** @hidden */\n\n\n  Buffer.prototype._rebuild = function () {\n    this._buffer = null;\n    this.create(this._data);\n  };\n  /**\r\n   * Update current buffer data\r\n   * @param data defines the data to store\r\n   */\n\n\n  Buffer.prototype.update = function (data) {\n    this.create(data);\n  };\n  /**\r\n   * Updates the data directly.\r\n   * @param data the new data\r\n   * @param offset the new offset\r\n   * @param vertexCount the vertex count (optional)\r\n   * @param useBytes set to true if the offset is in bytes\r\n   */\n\n\n  Buffer.prototype.updateDirectly = function (data, offset, vertexCount, useBytes) {\n    if (useBytes === void 0) {\n      useBytes = false;\n    }\n\n    if (!this._buffer) {\n      return;\n    }\n\n    if (this._updatable) {\n      // update buffer\n      this._engine.updateDynamicVertexBuffer(this._buffer, data, useBytes ? offset : offset * Float32Array.BYTES_PER_ELEMENT, vertexCount ? vertexCount * this.byteStride : undefined);\n\n      this._data = null;\n    }\n  };\n  /** @hidden */\n\n\n  Buffer.prototype._increaseReferences = function () {\n    if (!this._buffer) {\n      return;\n    }\n\n    if (!this._isAlreadyOwned) {\n      this._isAlreadyOwned = true;\n      return;\n    }\n\n    this._buffer.references++;\n  };\n  /**\r\n   * Release all resources\r\n   */\n\n\n  Buffer.prototype.dispose = function () {\n    if (!this._buffer) {\n      return;\n    }\n\n    if (this._engine._releaseBuffer(this._buffer)) {\n      this._buffer = null;\n    }\n  };\n\n  return Buffer;\n}();\n\nexport { Buffer };\n/**\r\n     * Specialized buffer used to store vertex data\r\n     */\n\nvar VertexBuffer =\n/** @class */\nfunction () {\n  /**\r\n   * Constructor\r\n   * @param engine the engine\r\n   * @param data the data to use for this vertex buffer\r\n   * @param kind the vertex buffer kind\r\n   * @param updatable whether the data is updatable\r\n   * @param postponeInternalCreation whether to postpone creating the internal WebGL buffer (optional)\r\n   * @param stride the stride (optional)\r\n   * @param instanced whether the buffer is instanced (optional)\r\n   * @param offset the offset of the data (optional)\r\n   * @param size the number of components (optional)\r\n   * @param type the type of the component (optional)\r\n   * @param normalized whether the data contains normalized data (optional)\r\n   * @param useBytes set to true if stride and offset are in bytes (optional)\r\n   * @param divisor defines the instance divisor to use (1 by default)\r\n   * @param takeBufferOwnership defines if the buffer should be released when the vertex buffer is disposed\r\n   */\n  function VertexBuffer(engine, data, kind, updatable, postponeInternalCreation, stride, instanced, offset, size, type, normalized, useBytes, divisor, takeBufferOwnership) {\n    if (normalized === void 0) {\n      normalized = false;\n    }\n\n    if (useBytes === void 0) {\n      useBytes = false;\n    }\n\n    if (divisor === void 0) {\n      divisor = 1;\n    }\n\n    if (takeBufferOwnership === void 0) {\n      takeBufferOwnership = false;\n    }\n\n    if (data instanceof Buffer) {\n      this._buffer = data;\n      this._ownsBuffer = takeBufferOwnership;\n\n      if (takeBufferOwnership) {\n        this._buffer._increaseReferences();\n      }\n    } else {\n      this._buffer = new Buffer(engine, data, updatable, stride, postponeInternalCreation, instanced, useBytes);\n      this._ownsBuffer = true;\n    }\n\n    this._kind = kind;\n\n    if (type == undefined) {\n      var data_1 = this.getData();\n      this.type = VertexBuffer.FLOAT;\n\n      if (data_1 instanceof Int8Array) {\n        this.type = VertexBuffer.BYTE;\n      } else if (data_1 instanceof Uint8Array) {\n        this.type = VertexBuffer.UNSIGNED_BYTE;\n      } else if (data_1 instanceof Int16Array) {\n        this.type = VertexBuffer.SHORT;\n      } else if (data_1 instanceof Uint16Array) {\n        this.type = VertexBuffer.UNSIGNED_SHORT;\n      } else if (data_1 instanceof Int32Array) {\n        this.type = VertexBuffer.INT;\n      } else if (data_1 instanceof Uint32Array) {\n        this.type = VertexBuffer.UNSIGNED_INT;\n      }\n    } else {\n      this.type = type;\n    }\n\n    var typeByteLength = VertexBuffer.GetTypeByteLength(this.type);\n\n    if (useBytes) {\n      this._size = size || (stride ? stride / typeByteLength : VertexBuffer.DeduceStride(kind));\n      this.byteStride = stride || this._buffer.byteStride || this._size * typeByteLength;\n      this.byteOffset = offset || 0;\n    } else {\n      this._size = size || stride || VertexBuffer.DeduceStride(kind);\n      this.byteStride = stride ? stride * typeByteLength : this._buffer.byteStride || this._size * typeByteLength;\n      this.byteOffset = (offset || 0) * typeByteLength;\n    }\n\n    this.normalized = normalized;\n    this._instanced = instanced !== undefined ? instanced : false;\n    this._instanceDivisor = instanced ? divisor : 0;\n  }\n\n  Object.defineProperty(VertexBuffer.prototype, \"instanceDivisor\", {\n    /**\r\n     * Gets or sets the instance divisor when in instanced mode\r\n     */\n    get: function get() {\n      return this._instanceDivisor;\n    },\n    set: function set(value) {\n      this._instanceDivisor = value;\n\n      if (value == 0) {\n        this._instanced = false;\n      } else {\n        this._instanced = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @hidden */\n\n  VertexBuffer.prototype._rebuild = function () {\n    if (!this._buffer) {\n      return;\n    }\n\n    this._buffer._rebuild();\n  };\n  /**\r\n   * Returns the kind of the VertexBuffer (string)\r\n   * @returns a string\r\n   */\n\n\n  VertexBuffer.prototype.getKind = function () {\n    return this._kind;\n  }; // Properties\n\n  /**\r\n   * Gets a boolean indicating if the VertexBuffer is updatable?\r\n   * @returns true if the buffer is updatable\r\n   */\n\n\n  VertexBuffer.prototype.isUpdatable = function () {\n    return this._buffer.isUpdatable();\n  };\n  /**\r\n   * Gets current buffer's data\r\n   * @returns a DataArray or null\r\n   */\n\n\n  VertexBuffer.prototype.getData = function () {\n    return this._buffer.getData();\n  };\n  /**\r\n   * Gets underlying native buffer\r\n   * @returns underlying native buffer\r\n   */\n\n\n  VertexBuffer.prototype.getBuffer = function () {\n    return this._buffer.getBuffer();\n  };\n  /**\r\n   * Gets the stride in float32 units (i.e. byte stride / 4).\r\n   * May not be an integer if the byte stride is not divisible by 4.\r\n   * @returns the stride in float32 units\r\n   * @deprecated Please use byteStride instead.\r\n   */\n\n\n  VertexBuffer.prototype.getStrideSize = function () {\n    return this.byteStride / VertexBuffer.GetTypeByteLength(this.type);\n  };\n  /**\r\n   * Returns the offset as a multiple of the type byte length.\r\n   * @returns the offset in bytes\r\n   * @deprecated Please use byteOffset instead.\r\n   */\n\n\n  VertexBuffer.prototype.getOffset = function () {\n    return this.byteOffset / VertexBuffer.GetTypeByteLength(this.type);\n  };\n  /**\r\n   * Returns the number of components per vertex attribute (integer)\r\n   * @returns the size in float\r\n   */\n\n\n  VertexBuffer.prototype.getSize = function () {\n    return this._size;\n  };\n  /**\r\n   * Gets a boolean indicating is the internal buffer of the VertexBuffer is instanced\r\n   * @returns true if this buffer is instanced\r\n   */\n\n\n  VertexBuffer.prototype.getIsInstanced = function () {\n    return this._instanced;\n  };\n  /**\r\n   * Returns the instancing divisor, zero for non-instanced (integer).\r\n   * @returns a number\r\n   */\n\n\n  VertexBuffer.prototype.getInstanceDivisor = function () {\n    return this._instanceDivisor;\n  }; // Methods\n\n  /**\r\n   * Store data into the buffer. If the buffer was already used it will be either recreated or updated depending on isUpdatable property\r\n   * @param data defines the data to store\r\n   */\n\n\n  VertexBuffer.prototype.create = function (data) {\n    this._buffer.create(data);\n  };\n  /**\r\n   * Updates the underlying buffer according to the passed numeric array or Float32Array.\r\n   * This function will create a new buffer if the current one is not updatable\r\n   * @param data defines the data to store\r\n   */\n\n\n  VertexBuffer.prototype.update = function (data) {\n    this._buffer.update(data);\n  };\n  /**\r\n   * Updates directly the underlying WebGLBuffer according to the passed numeric array or Float32Array.\r\n   * Returns the directly updated WebGLBuffer.\r\n   * @param data the new data\r\n   * @param offset the new offset\r\n   * @param useBytes set to true if the offset is in bytes\r\n   */\n\n\n  VertexBuffer.prototype.updateDirectly = function (data, offset, useBytes) {\n    if (useBytes === void 0) {\n      useBytes = false;\n    }\n\n    this._buffer.updateDirectly(data, offset, undefined, useBytes);\n  };\n  /**\r\n   * Disposes the VertexBuffer and the underlying WebGLBuffer.\r\n   */\n\n\n  VertexBuffer.prototype.dispose = function () {\n    if (this._ownsBuffer) {\n      this._buffer.dispose();\n    }\n  };\n  /**\r\n   * Enumerates each value of this vertex buffer as numbers.\r\n   * @param count the number of values to enumerate\r\n   * @param callback the callback function called for each value\r\n   */\n\n\n  VertexBuffer.prototype.forEach = function (count, callback) {\n    VertexBuffer.ForEach(this._buffer.getData(), this.byteOffset, this.byteStride, this._size, this.type, count, this.normalized, callback);\n  };\n  /**\r\n   * Deduces the stride given a kind.\r\n   * @param kind The kind string to deduce\r\n   * @returns The deduced stride\r\n   */\n\n\n  VertexBuffer.DeduceStride = function (kind) {\n    switch (kind) {\n      case VertexBuffer.UVKind:\n      case VertexBuffer.UV2Kind:\n      case VertexBuffer.UV3Kind:\n      case VertexBuffer.UV4Kind:\n      case VertexBuffer.UV5Kind:\n      case VertexBuffer.UV6Kind:\n        return 2;\n\n      case VertexBuffer.NormalKind:\n      case VertexBuffer.PositionKind:\n        return 3;\n\n      case VertexBuffer.ColorKind:\n      case VertexBuffer.MatricesIndicesKind:\n      case VertexBuffer.MatricesIndicesExtraKind:\n      case VertexBuffer.MatricesWeightsKind:\n      case VertexBuffer.MatricesWeightsExtraKind:\n      case VertexBuffer.TangentKind:\n        return 4;\n\n      default:\n        throw new Error(\"Invalid kind '\" + kind + \"'\");\n    }\n  };\n  /**\r\n   * Gets the byte length of the given type.\r\n   * @param type the type\r\n   * @returns the number of bytes\r\n   */\n\n\n  VertexBuffer.GetTypeByteLength = function (type) {\n    switch (type) {\n      case VertexBuffer.BYTE:\n      case VertexBuffer.UNSIGNED_BYTE:\n        return 1;\n\n      case VertexBuffer.SHORT:\n      case VertexBuffer.UNSIGNED_SHORT:\n        return 2;\n\n      case VertexBuffer.INT:\n      case VertexBuffer.UNSIGNED_INT:\n      case VertexBuffer.FLOAT:\n        return 4;\n\n      default:\n        throw new Error(\"Invalid type '\" + type + \"'\");\n    }\n  };\n  /**\r\n   * Enumerates each value of the given parameters as numbers.\r\n   * @param data the data to enumerate\r\n   * @param byteOffset the byte offset of the data\r\n   * @param byteStride the byte stride of the data\r\n   * @param componentCount the number of components per element\r\n   * @param componentType the type of the component\r\n   * @param count the number of values to enumerate\r\n   * @param normalized whether the data is normalized\r\n   * @param callback the callback function called for each value\r\n   */\n\n\n  VertexBuffer.ForEach = function (data, byteOffset, byteStride, componentCount, componentType, count, normalized, callback) {\n    if (data instanceof Array) {\n      var offset = byteOffset / 4;\n      var stride = byteStride / 4;\n\n      for (var index = 0; index < count; index += componentCount) {\n        for (var componentIndex = 0; componentIndex < componentCount; componentIndex++) {\n          callback(data[offset + componentIndex], index + componentIndex);\n        }\n\n        offset += stride;\n      }\n    } else {\n      var dataView = data instanceof ArrayBuffer ? new DataView(data) : new DataView(data.buffer, data.byteOffset, data.byteLength);\n      var componentByteLength = VertexBuffer.GetTypeByteLength(componentType);\n\n      for (var index = 0; index < count; index += componentCount) {\n        var componentByteOffset = byteOffset;\n\n        for (var componentIndex = 0; componentIndex < componentCount; componentIndex++) {\n          var value = VertexBuffer._GetFloatValue(dataView, componentType, componentByteOffset, normalized);\n\n          callback(value, index + componentIndex);\n          componentByteOffset += componentByteLength;\n        }\n\n        byteOffset += byteStride;\n      }\n    }\n  };\n\n  VertexBuffer._GetFloatValue = function (dataView, type, byteOffset, normalized) {\n    switch (type) {\n      case VertexBuffer.BYTE:\n        {\n          var value = dataView.getInt8(byteOffset);\n\n          if (normalized) {\n            value = Math.max(value / 127, -1);\n          }\n\n          return value;\n        }\n\n      case VertexBuffer.UNSIGNED_BYTE:\n        {\n          var value = dataView.getUint8(byteOffset);\n\n          if (normalized) {\n            value = value / 255;\n          }\n\n          return value;\n        }\n\n      case VertexBuffer.SHORT:\n        {\n          var value = dataView.getInt16(byteOffset, true);\n\n          if (normalized) {\n            value = Math.max(value / 32767, -1);\n          }\n\n          return value;\n        }\n\n      case VertexBuffer.UNSIGNED_SHORT:\n        {\n          var value = dataView.getUint16(byteOffset, true);\n\n          if (normalized) {\n            value = value / 65535;\n          }\n\n          return value;\n        }\n\n      case VertexBuffer.INT:\n        {\n          return dataView.getInt32(byteOffset, true);\n        }\n\n      case VertexBuffer.UNSIGNED_INT:\n        {\n          return dataView.getUint32(byteOffset, true);\n        }\n\n      case VertexBuffer.FLOAT:\n        {\n          return dataView.getFloat32(byteOffset, true);\n        }\n\n      default:\n        {\n          throw new Error(\"Invalid component type \" + type);\n        }\n    }\n  };\n  /**\r\n   * The byte type.\r\n   */\n\n\n  VertexBuffer.BYTE = 5120;\n  /**\r\n   * The unsigned byte type.\r\n   */\n\n  VertexBuffer.UNSIGNED_BYTE = 5121;\n  /**\r\n   * The short type.\r\n   */\n\n  VertexBuffer.SHORT = 5122;\n  /**\r\n   * The unsigned short type.\r\n   */\n\n  VertexBuffer.UNSIGNED_SHORT = 5123;\n  /**\r\n   * The integer type.\r\n   */\n\n  VertexBuffer.INT = 5124;\n  /**\r\n   * The unsigned integer type.\r\n   */\n\n  VertexBuffer.UNSIGNED_INT = 5125;\n  /**\r\n   * The float type.\r\n   */\n\n  VertexBuffer.FLOAT = 5126; // Enums\n\n  /**\r\n   * Positions\r\n   */\n\n  VertexBuffer.PositionKind = \"position\";\n  /**\r\n   * Normals\r\n   */\n\n  VertexBuffer.NormalKind = \"normal\";\n  /**\r\n   * Tangents\r\n   */\n\n  VertexBuffer.TangentKind = \"tangent\";\n  /**\r\n   * Texture coordinates\r\n   */\n\n  VertexBuffer.UVKind = \"uv\";\n  /**\r\n   * Texture coordinates 2\r\n   */\n\n  VertexBuffer.UV2Kind = \"uv2\";\n  /**\r\n   * Texture coordinates 3\r\n   */\n\n  VertexBuffer.UV3Kind = \"uv3\";\n  /**\r\n   * Texture coordinates 4\r\n   */\n\n  VertexBuffer.UV4Kind = \"uv4\";\n  /**\r\n   * Texture coordinates 5\r\n   */\n\n  VertexBuffer.UV5Kind = \"uv5\";\n  /**\r\n   * Texture coordinates 6\r\n   */\n\n  VertexBuffer.UV6Kind = \"uv6\";\n  /**\r\n   * Colors\r\n   */\n\n  VertexBuffer.ColorKind = \"color\";\n  /**\r\n   * Matrix indices (for bones)\r\n   */\n\n  VertexBuffer.MatricesIndicesKind = \"matricesIndices\";\n  /**\r\n   * Matrix weights (for bones)\r\n   */\n\n  VertexBuffer.MatricesWeightsKind = \"matricesWeights\";\n  /**\r\n   * Additional matrix indices (for bones)\r\n   */\n\n  VertexBuffer.MatricesIndicesExtraKind = \"matricesIndicesExtra\";\n  /**\r\n   * Additional matrix weights (for bones)\r\n   */\n\n  VertexBuffer.MatricesWeightsExtraKind = \"matricesWeightsExtra\";\n  return VertexBuffer;\n}();\n\nexport { VertexBuffer };","map":null,"metadata":{},"sourceType":"module"}