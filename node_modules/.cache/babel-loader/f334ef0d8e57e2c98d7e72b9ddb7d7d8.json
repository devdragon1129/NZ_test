{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { SceneLoader } from \"../../Loading/sceneLoader\";\nimport { WebVRController } from \"./webVRController\";\nimport { PoseEnabledControllerType, PoseEnabledControllerHelper } from \"./poseEnabledController\";\n/**\r\n * Vive Controller\r\n */\n\nvar ViveController =\n/** @class */\nfunction (_super) {\n  __extends(ViveController, _super);\n  /**\r\n   * Creates a new ViveController from a gamepad\r\n   * @param vrGamepad the gamepad that the controller should be created from\r\n   */\n\n\n  function ViveController(vrGamepad) {\n    var _this = _super.call(this, vrGamepad) || this;\n\n    _this.controllerType = PoseEnabledControllerType.VIVE;\n    _this._invertLeftStickY = true;\n    return _this;\n  }\n  /**\r\n   * Implements abstract method on WebVRController class, loading controller meshes and calling this.attachToMesh if successful.\r\n   * @param scene scene in which to add meshes\r\n   * @param meshLoaded optional callback function that will be called if the mesh loads successfully.\r\n   */\n\n\n  ViveController.prototype.initControllerMesh = function (scene, meshLoaded) {\n    var _this = this;\n\n    SceneLoader.ImportMesh(\"\", ViveController.MODEL_BASE_URL, ViveController.MODEL_FILENAME, scene, function (newMeshes) {\n      /*\r\n      Parent Mesh name: ViveWand\r\n      - body\r\n      - r_gripper\r\n      - l_gripper\r\n      - menu_button\r\n      - system_button\r\n      - trackpad\r\n      - trigger\r\n      - LED\r\n      */\n      _this._defaultModel = newMeshes[1];\n\n      _this.attachToMesh(_this._defaultModel);\n\n      if (meshLoaded) {\n        meshLoaded(_this._defaultModel);\n      }\n    });\n  };\n\n  Object.defineProperty(ViveController.prototype, \"onLeftButtonStateChangedObservable\", {\n    /**\r\n     * Fired when the left button on this controller is modified\r\n     */\n    get: function get() {\n      return this.onMainButtonStateChangedObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ViveController.prototype, \"onRightButtonStateChangedObservable\", {\n    /**\r\n     * Fired when the right button on this controller is modified\r\n     */\n    get: function get() {\n      return this.onMainButtonStateChangedObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ViveController.prototype, \"onMenuButtonStateChangedObservable\", {\n    /**\r\n     * Fired when the menu button on this controller is modified\r\n     */\n    get: function get() {\n      return this.onSecondaryButtonStateChangedObservable;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Called once for each button that changed state since the last frame\r\n   * Vive mapping:\r\n   * 0: touchpad\r\n   * 1: trigger\r\n   * 2: left AND right buttons\r\n   * 3: menu button\r\n   * @param buttonIdx Which button index changed\r\n   * @param state New state of the button\r\n   * @param changes Which properties on the state changed since last frame\r\n   */\n\n  ViveController.prototype._handleButtonChange = function (buttonIdx, state, changes) {\n    var notifyObject = state; //{ state: state, changes: changes };\n\n    switch (buttonIdx) {\n      case 0:\n        this.onPadStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 1:\n        // index trigger\n        if (this._defaultModel) {\n          this._defaultModel.getChildren()[6].rotation.x = -notifyObject.value * 0.15;\n        }\n\n        this.onTriggerStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 2:\n        // left AND right button\n        this.onMainButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n\n      case 3:\n        if (this._defaultModel) {\n          if (notifyObject.pressed) {\n            this._defaultModel.getChildren()[2].position.y = -0.001;\n          } else {\n            this._defaultModel.getChildren()[2].position.y = 0;\n          }\n        }\n\n        this.onSecondaryButtonStateChangedObservable.notifyObservers(notifyObject);\n        return;\n    }\n  };\n  /**\r\n   * Base Url for the controller model.\r\n   */\n\n\n  ViveController.MODEL_BASE_URL = 'https://controllers.babylonjs.com/vive/';\n  /**\r\n   * File name for the controller model.\r\n   */\n\n  ViveController.MODEL_FILENAME = 'wand.babylon';\n  return ViveController;\n}(WebVRController);\n\nexport { ViveController };\n\nPoseEnabledControllerHelper._ControllerFactories.push({\n  canCreate: function canCreate(gamepadInfo) {\n    return gamepadInfo.id.toLowerCase().indexOf('openvr') !== -1;\n  },\n  create: function create(gamepadInfo) {\n    return new ViveController(gamepadInfo);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}