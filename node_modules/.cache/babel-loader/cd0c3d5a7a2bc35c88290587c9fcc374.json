{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../Misc/typeStore';\nimport { Color3 } from '../../../Maths/math.color';\nimport { Observable } from '../../../Misc/observable';\n/**\r\n * Class used to store a color step for the GradientBlock\r\n */\n\nvar GradientBlockColorStep =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new GradientBlockColorStep\r\n   * @param step defines a value indicating which step this color is associated with (between 0 and 1)\r\n   * @param color defines the color associated with this step\r\n   */\n  function GradientBlockColorStep(step, color) {\n    this.step = step;\n    this.color = color;\n  }\n\n  Object.defineProperty(GradientBlockColorStep.prototype, \"step\", {\n    /**\r\n     * Gets value indicating which step this color is associated with (between 0 and 1)\r\n     */\n    get: function get() {\n      return this._step;\n    },\n\n    /**\r\n     * Sets a value indicating which step this color is associated with (between 0 and 1)\r\n    */\n    set: function set(val) {\n      this._step = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(GradientBlockColorStep.prototype, \"color\", {\n    /**\r\n     * Gets the color associated with this step\r\n     */\n    get: function get() {\n      return this._color;\n    },\n\n    /**\r\n     * Sets the color associated with this step\r\n     */\n    set: function set(val) {\n      this._color = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return GradientBlockColorStep;\n}();\n\nexport { GradientBlockColorStep };\n/**\r\n * Block used to return a color from a gradient based on an input value between 0 and 1\r\n */\n\nvar GradientBlock =\n/** @class */\nfunction (_super) {\n  __extends(GradientBlock, _super);\n  /**\r\n   * Creates a new GradientBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function GradientBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n    /**\r\n     * Gets or sets the list of color steps\r\n     */\n\n\n    _this.colorSteps = [new GradientBlockColorStep(0, Color3.Black()), new GradientBlockColorStep(1.0, Color3.White())];\n    /** Gets an observable raised when the value is changed */\n\n    _this.onValueChangedObservable = new Observable();\n\n    _this.registerInput(\"gradient\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Color3);\n\n    _this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    _this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector3);\n\n    _this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Vector4);\n\n    _this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Color3);\n\n    _this._inputs[0].acceptedConnectionPointTypes.push(NodeMaterialBlockConnectionPointTypes.Color4);\n\n    return _this;\n  }\n  /** calls observable when the value is changed*/\n\n\n  GradientBlock.prototype.colorStepsUpdated = function () {\n    this.onValueChangedObservable.notifyObservers(this);\n  };\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  GradientBlock.prototype.getClassName = function () {\n    return \"GradientBlock\";\n  };\n\n  Object.defineProperty(GradientBlock.prototype, \"gradient\", {\n    /**\r\n     * Gets the gradient input component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(GradientBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  GradientBlock.prototype._writeColorConstant = function (index) {\n    var step = this.colorSteps[index];\n    return \"vec3(\" + step.color.r + \", \" + step.color.g + \", \" + step.color.b + \")\";\n  };\n\n  GradientBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var output = this._outputs[0];\n\n    if (!this.colorSteps.length || !this.gradient.connectedPoint) {\n      state.compilationString += this._declareOutput(output, state) + \" = vec3(0., 0., 0.);\\r\\n\";\n      return;\n    }\n\n    var tempColor = state._getFreeVariableName(\"gradientTempColor\");\n\n    var tempPosition = state._getFreeVariableName(\"gradientTempPosition\");\n\n    state.compilationString += \"vec3 \" + tempColor + \" = \" + this._writeColorConstant(0) + \";\\r\\n\";\n    state.compilationString += \"float \" + tempPosition + \";\\r\\n\";\n    var gradientSource = this.gradient.associatedVariableName;\n\n    if (this.gradient.connectedPoint.type !== NodeMaterialBlockConnectionPointTypes.Float) {\n      gradientSource += \".x\";\n    }\n\n    for (var index = 1; index < this.colorSteps.length; index++) {\n      var step = this.colorSteps[index];\n      var previousStep = this.colorSteps[index - 1];\n      state.compilationString += tempPosition + \" = clamp((\" + gradientSource + \" - \" + state._emitFloat(previousStep.step) + \") / (\" + state._emitFloat(step.step) + \" -  \" + state._emitFloat(previousStep.step) + \"), 0.0, 1.0) * step(\" + state._emitFloat(index) + \", \" + state._emitFloat(this.colorSteps.length - 1) + \");\\r\\n\";\n      state.compilationString += tempColor + \" = mix(\" + tempColor + \", \" + this._writeColorConstant(index) + \", \" + tempPosition + \");\\r\\n\";\n    }\n\n    state.compilationString += this._declareOutput(output, state) + (\" = \" + tempColor + \";\\r\\n\");\n    return this;\n  };\n\n  GradientBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    serializationObject.colorSteps = [];\n\n    for (var _i = 0, _a = this.colorSteps; _i < _a.length; _i++) {\n      var step = _a[_i];\n      serializationObject.colorSteps.push({\n        step: step.step,\n        color: {\n          r: step.color.r,\n          g: step.color.g,\n          b: step.color.b\n        }\n      });\n    }\n\n    return serializationObject;\n  };\n\n  GradientBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    this.colorSteps = [];\n\n    for (var _i = 0, _a = serializationObject.colorSteps; _i < _a.length; _i++) {\n      var step = _a[_i];\n      this.colorSteps.push(new GradientBlockColorStep(step.step, new Color3(step.color.r, step.color.g, step.color.b)));\n    }\n  };\n\n  GradientBlock.prototype._dumpPropertiesCode = function () {\n    var codeString = \"\";\n\n    for (var _i = 0, _a = this.colorSteps; _i < _a.length; _i++) {\n      var colorStep = _a[_i];\n      codeString += this._codeVariableName + \".colorSteps.push(new BABYLON.GradientBlockColorStep(\" + colorStep.step + \", new BABYLON.Color3(\" + colorStep.color.r + \", \" + colorStep.color.g + \", \" + colorStep.color.b + \")));\\r\\n\";\n    }\n\n    return codeString;\n  };\n\n  return GradientBlock;\n}(NodeMaterialBlock);\n\nexport { GradientBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.GradientBlock\"] = GradientBlock;","map":null,"metadata":{},"sourceType":"module"}