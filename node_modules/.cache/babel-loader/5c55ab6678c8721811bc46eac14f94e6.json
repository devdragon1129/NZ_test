{"ast":null,"code":"export var ItemEditorTabs;\n\n(function (ItemEditorTabs) {\n  ItemEditorTabs[\"COLLECTIONS\"] = \"collections\";\n  ItemEditorTabs[\"ORPHAN_ITEMS\"] = \"orphanItems\";\n})(ItemEditorTabs || (ItemEditorTabs = {}));","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/ItemEditorPage/LeftPanel/LeftPanel.types.ts"],"names":["ItemEditorTabs"],"mappings":"AAcA,WAAYA,cAAZ;;WAAYA,c;AAAAA,EAAAA,c;AAAAA,EAAAA,c;GAAAA,c,KAAAA,c","sourcesContent":["import { Dispatch } from 'redux'\nimport { WearableBodyShape } from '@dcl/schemas'\nimport { Collection } from 'modules/collection/types'\nimport { Item } from 'modules/item/types'\nimport { setItems, SetItemsAction } from 'modules/editor/actions'\nimport { fetchCollectionsRequest, FetchCollectionsRequestAction } from 'modules/collection/actions'\nimport {\n  FetchCollectionItemsRequestAction,\n  fetchItemsRequest,\n  FetchItemsRequestAction,\n  setCollection,\n  SetCollectionAction\n} from 'modules/item/actions'\n\nexport enum ItemEditorTabs {\n  COLLECTIONS = 'collections',\n  ORPHAN_ITEMS = 'orphanItems'\n}\n\nexport type Props = {\n  address?: string\n  isConnected: boolean\n  items: Item[]\n  totalItems: number | null\n  totalCollections: number | null\n  orphanItems: Item[]\n  collections: Collection[]\n  selectedItemId: string | null\n  selectedCollectionId: string | null\n  visibleItems: Item[]\n  isReviewing: boolean\n  bodyShape: WearableBodyShape\n  isLoading: boolean\n  onSetItems: typeof setItems\n  onSetCollection: typeof setCollection\n  onFetchOrphanItems: typeof fetchItemsRequest\n  onFetchCollections: typeof fetchCollectionsRequest\n  onSetReviewedItems: (itemIds: Item[]) => void\n}\n\nexport type State = {\n  currentTab: ItemEditorTabs\n  pages: number[]\n}\n\nexport type MapStateProps = Pick<\n  Props,\n  | 'address'\n  | 'items'\n  | 'totalItems'\n  | 'totalCollections'\n  | 'orphanItems'\n  | 'collections'\n  | 'selectedItemId'\n  | 'selectedCollectionId'\n  | 'visibleItems'\n  | 'bodyShape'\n  | 'isConnected'\n  | 'isReviewing'\n  | 'isLoading'\n>\nexport type MapDispatchProps = Pick<Props, 'onSetItems' | 'onSetCollection' | 'onFetchOrphanItems' | 'onFetchCollections'>\nexport type MapDispatch = Dispatch<\n  SetItemsAction | SetCollectionAction | FetchCollectionItemsRequestAction | FetchItemsRequestAction | FetchCollectionsRequestAction\n>\n"]},"metadata":{},"sourceType":"module"}