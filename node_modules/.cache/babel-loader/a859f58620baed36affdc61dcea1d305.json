{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeTranslations = exports.T = exports.t = exports.getCurrentLocale = exports.setCurrentLocale = exports.getPreferredLocale = exports.I18nProvider = void 0;\n\nvar react_intl_1 = require(\"react-intl\");\n\nvar cache = react_intl_1.createIntlCache();\nvar currentLocale;\nexports.I18nProvider = react_intl_1.IntlProvider;\n\nfunction getPreferredLocale(availableLocales) {\n  if (!availableLocales) {\n    throw new Error('Failed to get preferred locale: Missing locale list');\n  }\n\n  var navigator = window.navigator;\n  var navigatorLocale = navigator.languages && navigator.languages[0] || navigator.language;\n  var locale = navigatorLocale.slice(0, 2);\n\n  if (!availableLocales.includes(locale)) {\n    return null;\n  }\n\n  return locale;\n}\n\nexports.getPreferredLocale = getPreferredLocale;\n\nfunction setCurrentLocale(localeName, messages) {\n  var locale = {\n    en: 'en-EN',\n    es: 'es-ES',\n    fr: 'fr-FR',\n    ko: 'ko-KR',\n    zh: 'zh-CN',\n    ja: 'ja-JP'\n  }[localeName];\n  currentLocale = react_intl_1.createIntl({\n    locale: locale,\n    messages: messages\n  }, cache);\n}\n\nexports.setCurrentLocale = setCurrentLocale;\n\nfunction getCurrentLocale() {\n  return currentLocale;\n}\n\nexports.getCurrentLocale = getCurrentLocale;\n\nfunction t(id, values) {\n  return currentLocale.formatMessage({\n    id: id\n  }, values);\n}\n\nexports.t = t;\nexports.T = react_intl_1.FormattedMessage;\n\nfunction mergeTranslations() {\n  var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  return [target].concat(sources).reduce(function (result, obj) {\n    return _mergeTranslations(result, obj);\n  }, {});\n}\n\nexports.mergeTranslations = mergeTranslations;\n\nfunction _mergeTranslations() {\n  var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var merged = Object.keys(source).reduce(function (result, key) {\n    // @ts-ignore\n    result[key] = typeof source[key] === 'object' ? _mergeTranslations(target[key], source[key]) : source[key];\n    return result;\n  }, target);\n  return merged;\n}","map":null,"metadata":{},"sourceType":"script"}