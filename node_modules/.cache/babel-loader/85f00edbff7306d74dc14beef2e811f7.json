{"ast":null,"code":"import { push, goBack } from 'connected-react-router';\nimport { connect } from 'react-redux';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { FETCH_ENS_REQUEST, SET_ENS_CONTENT_REQUEST, setENSContentRequest, SET_ENS_RESOLVER_REQUEST, setENSResolverRequest, FETCH_ENS_LIST_REQUEST } from 'modules/ens/actions';\nimport { findBySubdomain } from 'modules/ens/utils';\nimport { getENSList, getLoading, getError, isWaitingTxSetResolver, isWaitingTxSetLandContent } from 'modules/ens/selectors';\nimport LandAssignENSPage from './LandAssignENSPage';\n\nvar mapState = function mapState(state, ownProps) {\n  var _ownProps$match$param = ownProps.match.params,\n      landId = _ownProps$match$param.landId,\n      subdomain = _ownProps$match$param.subdomain;\n  var ensList = getENSList(state);\n  var ens = findBySubdomain(ensList, subdomain);\n  return {\n    ens: ens,\n    error: getError(state),\n    isWaitingTxSetResolver: isLoadingType(getLoading(state), SET_ENS_RESOLVER_REQUEST) || isWaitingTxSetResolver(state),\n    isWaitingTxSetContent: isLoadingType(getLoading(state), SET_ENS_CONTENT_REQUEST) || isWaitingTxSetLandContent(state, landId),\n    isLoading: isLoadingType(getLoading(state), SET_ENS_RESOLVER_REQUEST) || isLoadingType(getLoading(state), SET_ENS_CONTENT_REQUEST) || isLoadingType(getLoading(state), FETCH_ENS_REQUEST) || isLoadingType(getLoading(state), FETCH_ENS_LIST_REQUEST)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onSetENSResolver: function onSetENSResolver(ens) {\n      return dispatch(setENSResolverRequest(ens));\n    },\n    onSetENSContent: function onSetENSContent(ens, land) {\n      return dispatch(setENSContentRequest(ens, land));\n    },\n    onBack: function onBack() {\n      return dispatch(goBack());\n    },\n    onNavigate: function onNavigate(path) {\n      return dispatch(push(path));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(LandAssignENSPage);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/LandAssignENSPage/LandAssignENSPage.container.ts"],"names":["push","goBack","connect","isLoadingType","FETCH_ENS_REQUEST","SET_ENS_CONTENT_REQUEST","setENSContentRequest","SET_ENS_RESOLVER_REQUEST","setENSResolverRequest","FETCH_ENS_LIST_REQUEST","findBySubdomain","getENSList","getLoading","getError","isWaitingTxSetResolver","isWaitingTxSetLandContent","LandAssignENSPage","mapState","state","ownProps","match","params","landId","subdomain","ensList","ens","error","isWaitingTxSetContent","isLoading","mapDispatch","dispatch","onSetENSResolver","onSetENSContent","land","onBack","onNavigate","path"],"mappings":"AAAA,SAASA,IAAT,EAAeC,MAAf,QAA6B,wBAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AAEA,SACEC,iBADF,EAEEC,uBAFF,EAGEC,oBAHF,EAIEC,wBAJF,EAKEC,qBALF,EAMEC,sBANF,QAOO,qBAPP;AAQA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,QAAjC,EAA2CC,sBAA3C,EAAmEC,yBAAnE,QAAoG,uBAApG;AAEA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAmBC,QAAnB,EAAyD;AAAA,8BAC1CA,QAAQ,CAACC,KAAT,CAAeC,MAD2B;AAAA,MAChEC,MADgE,yBAChEA,MADgE;AAAA,MACxDC,SADwD,yBACxDA,SADwD;AAExE,MAAMC,OAAO,GAAGb,UAAU,CAACO,KAAD,CAA1B;AAEA,MAAMO,GAAG,GAAGf,eAAe,CAACc,OAAD,EAAUD,SAAV,CAA3B;AAEA,SAAO;AACLE,IAAAA,GAAG,EAAHA,GADK;AAELC,IAAAA,KAAK,EAAEb,QAAQ,CAACK,KAAD,CAFV;AAGLJ,IAAAA,sBAAsB,EAAEX,aAAa,CAACS,UAAU,CAACM,KAAD,CAAX,EAAoBX,wBAApB,CAAb,IAA8DO,sBAAsB,CAACI,KAAD,CAHvG;AAILS,IAAAA,qBAAqB,EAAExB,aAAa,CAACS,UAAU,CAACM,KAAD,CAAX,EAAoBb,uBAApB,CAAb,IAA6DU,yBAAyB,CAACG,KAAD,EAAQI,MAAR,CAJxG;AAKLM,IAAAA,SAAS,EACPzB,aAAa,CAACS,UAAU,CAACM,KAAD,CAAX,EAAoBX,wBAApB,CAAb,IACAJ,aAAa,CAACS,UAAU,CAACM,KAAD,CAAX,EAAoBb,uBAApB,CADb,IAEAF,aAAa,CAACS,UAAU,CAACM,KAAD,CAAX,EAAoBd,iBAApB,CAFb,IAGAD,aAAa,CAACS,UAAU,CAACM,KAAD,CAAX,EAAoBT,sBAApB;AATV,GAAP;AAWD,CAjBD;;AAmBA,IAAMoB,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,gBAAgB,EAAE,0BAAAN,GAAG;AAAA,aAAIK,QAAQ,CAACtB,qBAAqB,CAACiB,GAAD,CAAtB,CAAZ;AAAA,KAD2C;AAEhEO,IAAAA,eAAe,EAAE,yBAACP,GAAD,EAAMQ,IAAN;AAAA,aAAeH,QAAQ,CAACxB,oBAAoB,CAACmB,GAAD,EAAMQ,IAAN,CAArB,CAAvB;AAAA,KAF+C;AAGhEC,IAAAA,MAAM,EAAE;AAAA,aAAMJ,QAAQ,CAAC7B,MAAM,EAAP,CAAd;AAAA,KAHwD;AAIhEkC,IAAAA,UAAU,EAAE,oBAAAC,IAAI;AAAA,aAAIN,QAAQ,CAAC9B,IAAI,CAACoC,IAAD,CAAL,CAAZ;AAAA;AAJgD,GAA9C;AAAA,CAApB;;AAOA,eAAelC,OAAO,CAACe,QAAD,EAAWY,WAAX,CAAP,CAA+Bb,iBAA/B,CAAf","sourcesContent":["import { push, goBack } from 'connected-react-router'\nimport { connect } from 'react-redux'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { RootState } from 'modules/common/types'\nimport {\n  FETCH_ENS_REQUEST,\n  SET_ENS_CONTENT_REQUEST,\n  setENSContentRequest,\n  SET_ENS_RESOLVER_REQUEST,\n  setENSResolverRequest,\n  FETCH_ENS_LIST_REQUEST\n} from 'modules/ens/actions'\nimport { findBySubdomain } from 'modules/ens/utils'\nimport { getENSList, getLoading, getError, isWaitingTxSetResolver, isWaitingTxSetLandContent } from 'modules/ens/selectors'\nimport { MapStateProps, MapDispatchProps, MapDispatch, OwnProps } from './LandAssignENSPage.types'\nimport LandAssignENSPage from './LandAssignENSPage'\n\nconst mapState = (state: RootState, ownProps: OwnProps): MapStateProps => {\n  const { landId, subdomain } = ownProps.match.params\n  const ensList = getENSList(state)\n\n  const ens = findBySubdomain(ensList, subdomain)!\n\n  return {\n    ens,\n    error: getError(state),\n    isWaitingTxSetResolver: isLoadingType(getLoading(state), SET_ENS_RESOLVER_REQUEST) || isWaitingTxSetResolver(state),\n    isWaitingTxSetContent: isLoadingType(getLoading(state), SET_ENS_CONTENT_REQUEST) || isWaitingTxSetLandContent(state, landId),\n    isLoading:\n      isLoadingType(getLoading(state), SET_ENS_RESOLVER_REQUEST) ||\n      isLoadingType(getLoading(state), SET_ENS_CONTENT_REQUEST) ||\n      isLoadingType(getLoading(state), FETCH_ENS_REQUEST) ||\n      isLoadingType(getLoading(state), FETCH_ENS_LIST_REQUEST)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onSetENSResolver: ens => dispatch(setENSResolverRequest(ens)),\n  onSetENSContent: (ens, land) => dispatch(setENSContentRequest(ens, land)),\n  onBack: () => dispatch(goBack()),\n  onNavigate: path => dispatch(push(path))\n})\n\nexport default connect(mapState, mapDispatch)(LandAssignENSPage)\n"]},"metadata":{},"sourceType":"module"}