{"ast":null,"code":"import { Quaternion, Vector3, Matrix } from \"../../Maths/math.vector\";\nimport { Logger } from \"../../Misc/logger\";\nimport { PhysicsImpostor } from \"../../Physics/physicsImpostor\";\nimport { PhysicsJoint } from \"../../Physics/physicsJoint\";\nimport { VertexBuffer } from \"../../Meshes/buffer\";\nimport { VertexData } from \"../../Meshes/mesh.vertexData\";\nimport { ShapeBuilder } from \"../../Meshes/Builders/shapeBuilder\";\nimport { LinesBuilder } from \"../../Meshes/Builders/linesBuilder\";\nimport { PhysicsRaycastResult } from \"../physicsRaycastResult\";\nimport { Scalar } from \"../../Maths/math.scalar\";\nimport { Epsilon } from '../../Maths/math.constants';\n/**\r\n * AmmoJS Physics plugin\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n * @see https://github.com/kripken/ammo.js/\r\n */\n\nvar AmmoJSPlugin =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes the ammoJS plugin\r\n   * @param _useDeltaForWorldStep if the time between frames should be used when calculating physics steps (Default: true)\r\n   * @param ammoInjection can be used to inject your own ammo reference\r\n   * @param overlappingPairCache can be used to specify your own overlapping pair cache\r\n   */\n  function AmmoJSPlugin(_useDeltaForWorldStep, ammoInjection, overlappingPairCache) {\n    var _this = this;\n\n    if (_useDeltaForWorldStep === void 0) {\n      _useDeltaForWorldStep = true;\n    }\n\n    if (ammoInjection === void 0) {\n      ammoInjection = Ammo;\n    }\n\n    if (overlappingPairCache === void 0) {\n      overlappingPairCache = null;\n    }\n\n    this._useDeltaForWorldStep = _useDeltaForWorldStep;\n    /**\r\n     * Reference to the Ammo library\r\n     */\n\n    this.bjsAMMO = {};\n    /**\r\n     * Name of the plugin\r\n     */\n\n    this.name = \"AmmoJSPlugin\";\n    this._timeStep = 1 / 60;\n    this._fixedTimeStep = 1 / 60;\n    this._maxSteps = 5;\n    this._tmpQuaternion = new Quaternion();\n    this._tmpContactCallbackResult = false;\n    this._tmpContactPoint = new Vector3();\n    this._tmpMatrix = new Matrix();\n\n    if (typeof ammoInjection === \"function\") {\n      ammoInjection(this.bjsAMMO);\n    } else {\n      this.bjsAMMO = ammoInjection;\n    }\n\n    if (!this.isSupported()) {\n      Logger.Error(\"AmmoJS is not available. Please make sure you included the js file.\");\n      return;\n    } // Initialize the physics world\n\n\n    this._collisionConfiguration = new this.bjsAMMO.btSoftBodyRigidBodyCollisionConfiguration();\n    this._dispatcher = new this.bjsAMMO.btCollisionDispatcher(this._collisionConfiguration);\n    this._overlappingPairCache = overlappingPairCache || new this.bjsAMMO.btDbvtBroadphase();\n    this._solver = new this.bjsAMMO.btSequentialImpulseConstraintSolver();\n    this._softBodySolver = new this.bjsAMMO.btDefaultSoftBodySolver();\n    this.world = new this.bjsAMMO.btSoftRigidDynamicsWorld(this._dispatcher, this._overlappingPairCache, this._solver, this._collisionConfiguration, this._softBodySolver);\n    this._tmpAmmoConcreteContactResultCallback = new this.bjsAMMO.ConcreteContactResultCallback();\n\n    this._tmpAmmoConcreteContactResultCallback.addSingleResult = function (contactPoint, colObj0Wrap, partId0, index0) {\n      contactPoint = _this.bjsAMMO.wrapPointer(contactPoint, Ammo.btManifoldPoint);\n      var worldPoint = contactPoint.getPositionWorldOnA();\n      _this._tmpContactPoint.x = worldPoint.x();\n      _this._tmpContactPoint.y = worldPoint.y();\n      _this._tmpContactPoint.z = worldPoint.z();\n      _this._tmpContactCallbackResult = true;\n    };\n\n    this._raycastResult = new PhysicsRaycastResult(); // Create temp ammo variables\n\n    this._tmpAmmoTransform = new this.bjsAMMO.btTransform();\n\n    this._tmpAmmoTransform.setIdentity();\n\n    this._tmpAmmoQuaternion = new this.bjsAMMO.btQuaternion(0, 0, 0, 1);\n    this._tmpAmmoVectorA = new this.bjsAMMO.btVector3(0, 0, 0);\n    this._tmpAmmoVectorB = new this.bjsAMMO.btVector3(0, 0, 0);\n    this._tmpAmmoVectorC = new this.bjsAMMO.btVector3(0, 0, 0);\n    this._tmpAmmoVectorD = new this.bjsAMMO.btVector3(0, 0, 0);\n  }\n  /**\r\n   * Sets the gravity of the physics world (m/(s^2))\r\n   * @param gravity Gravity to set\r\n   */\n\n\n  AmmoJSPlugin.prototype.setGravity = function (gravity) {\n    this._tmpAmmoVectorA.setValue(gravity.x, gravity.y, gravity.z);\n\n    this.world.setGravity(this._tmpAmmoVectorA);\n    this.world.getWorldInfo().set_m_gravity(this._tmpAmmoVectorA);\n  };\n  /**\r\n   * Amount of time to step forward on each frame (only used if useDeltaForWorldStep is false in the constructor)\r\n   * @param timeStep timestep to use in seconds\r\n   */\n\n\n  AmmoJSPlugin.prototype.setTimeStep = function (timeStep) {\n    this._timeStep = timeStep;\n  };\n  /**\r\n   * Increment to step forward in the physics engine (If timeStep is set to 1/60 and fixedTimeStep is set to 1/120 the physics engine should run 2 steps per frame) (Default: 1/60)\r\n   * @param fixedTimeStep fixedTimeStep to use in seconds\r\n   */\n\n\n  AmmoJSPlugin.prototype.setFixedTimeStep = function (fixedTimeStep) {\n    this._fixedTimeStep = fixedTimeStep;\n  };\n  /**\r\n   * Sets the maximum number of steps by the physics engine per frame (Default: 5)\r\n   * @param maxSteps the maximum number of steps by the physics engine per frame\r\n   */\n\n\n  AmmoJSPlugin.prototype.setMaxSteps = function (maxSteps) {\n    this._maxSteps = maxSteps;\n  };\n  /**\r\n   * Gets the current timestep (only used if useDeltaForWorldStep is false in the constructor)\r\n   * @returns the current timestep in seconds\r\n   */\n\n\n  AmmoJSPlugin.prototype.getTimeStep = function () {\n    return this._timeStep;\n  }; // Ammo's contactTest and contactPairTest take a callback that runs synchronously, wrap them so that they are easier to consume\n\n\n  AmmoJSPlugin.prototype._isImpostorInContact = function (impostor) {\n    this._tmpContactCallbackResult = false;\n    this.world.contactTest(impostor.physicsBody, this._tmpAmmoConcreteContactResultCallback);\n    return this._tmpContactCallbackResult;\n  }; // Ammo's collision events have some weird quirks\n  // contactPairTest fires too many events as it fires events even when objects are close together but contactTest does not\n  // so only fire event if both contactTest and contactPairTest have a hit\n\n\n  AmmoJSPlugin.prototype._isImpostorPairInContact = function (impostorA, impostorB) {\n    this._tmpContactCallbackResult = false;\n    this.world.contactPairTest(impostorA.physicsBody, impostorB.physicsBody, this._tmpAmmoConcreteContactResultCallback);\n    return this._tmpContactCallbackResult;\n  }; // Ammo's behavior when maxSteps > 0 does not behave as described in docs\n  // @see http://www.bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World\n  //\n  // When maxSteps is 0 do the entire simulation in one step\n  // When maxSteps is > 0, run up to maxStep times, if on the last step the (remaining step - fixedTimeStep) is < fixedTimeStep, the remainder will be used for the step. (eg. if remainder is 1.001 and fixedTimeStep is 1 the last step will be 1.001, if instead it did 2 steps (1, 0.001) issues occuered when having a tiny step in ammo)\n  // Note: To get deterministic physics, timeStep would always need to be divisible by fixedTimeStep\n\n\n  AmmoJSPlugin.prototype._stepSimulation = function (timeStep, maxSteps, fixedTimeStep) {\n    if (timeStep === void 0) {\n      timeStep = 1 / 60;\n    }\n\n    if (maxSteps === void 0) {\n      maxSteps = 10;\n    }\n\n    if (fixedTimeStep === void 0) {\n      fixedTimeStep = 1 / 60;\n    }\n\n    if (maxSteps == 0) {\n      this.world.stepSimulation(timeStep, 0);\n    } else {\n      while (maxSteps > 0 && timeStep > 0) {\n        if (timeStep - fixedTimeStep < fixedTimeStep) {\n          this.world.stepSimulation(timeStep, 0);\n          timeStep = 0;\n        } else {\n          timeStep -= fixedTimeStep;\n          this.world.stepSimulation(fixedTimeStep, 0);\n        }\n\n        maxSteps--;\n      }\n    }\n  };\n  /**\r\n   * Moves the physics simulation forward delta seconds and updates the given physics imposters\r\n   * Prior to the step the imposters physics location is set to the position of the babylon meshes\r\n   * After the step the babylon meshes are set to the position of the physics imposters\r\n   * @param delta amount of time to step forward\r\n   * @param impostors array of imposters to update before/after the step\r\n   */\n\n\n  AmmoJSPlugin.prototype.executeStep = function (delta, impostors) {\n    for (var _i = 0, impostors_1 = impostors; _i < impostors_1.length; _i++) {\n      var impostor = impostors_1[_i]; // Update physics world objects to match babylon world\n\n      if (!impostor.soft) {\n        impostor.beforeStep();\n      }\n    }\n\n    this._stepSimulation(this._useDeltaForWorldStep ? delta : this._timeStep, this._maxSteps, this._fixedTimeStep);\n\n    for (var _a = 0, impostors_2 = impostors; _a < impostors_2.length; _a++) {\n      var mainImpostor = impostors_2[_a]; // After physics update make babylon world objects match physics world objects\n\n      if (mainImpostor.soft) {\n        this._afterSoftStep(mainImpostor);\n      } else {\n        mainImpostor.afterStep();\n      } // Handle collision event\n\n\n      if (mainImpostor._onPhysicsCollideCallbacks.length > 0) {\n        if (this._isImpostorInContact(mainImpostor)) {\n          for (var _b = 0, _c = mainImpostor._onPhysicsCollideCallbacks; _b < _c.length; _b++) {\n            var collideCallback = _c[_b];\n\n            for (var _d = 0, _e = collideCallback.otherImpostors; _d < _e.length; _d++) {\n              var otherImpostor = _e[_d];\n\n              if (mainImpostor.physicsBody.isActive() || otherImpostor.physicsBody.isActive()) {\n                if (this._isImpostorPairInContact(mainImpostor, otherImpostor)) {\n                  mainImpostor.onCollide({\n                    body: otherImpostor.physicsBody,\n                    point: this._tmpContactPoint\n                  });\n                  otherImpostor.onCollide({\n                    body: mainImpostor.physicsBody,\n                    point: this._tmpContactPoint\n                  });\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  };\n  /**\r\n   * Update babylon mesh to match physics world object\r\n   * @param impostor imposter to match\r\n   */\n\n\n  AmmoJSPlugin.prototype._afterSoftStep = function (impostor) {\n    if (impostor.type === PhysicsImpostor.RopeImpostor) {\n      this._ropeStep(impostor);\n    } else {\n      this._softbodyOrClothStep(impostor);\n    }\n  };\n  /**\r\n   * Update babylon mesh vertices vertices to match physics world softbody or cloth\r\n   * @param impostor imposter to match\r\n   */\n\n\n  AmmoJSPlugin.prototype._ropeStep = function (impostor) {\n    var bodyVertices = impostor.physicsBody.get_m_nodes();\n    var nbVertices = bodyVertices.size();\n    var node;\n    var nodePositions;\n    var x, y, z;\n    var path = new Array();\n\n    for (var n = 0; n < nbVertices; n++) {\n      node = bodyVertices.at(n);\n      nodePositions = node.get_m_x();\n      x = nodePositions.x();\n      y = nodePositions.y();\n      z = nodePositions.z();\n      path.push(new Vector3(x, y, z));\n    }\n\n    var object = impostor.object;\n    var shape = impostor.getParam(\"shape\");\n\n    if (impostor._isFromLine) {\n      impostor.object = LinesBuilder.CreateLines(\"lines\", {\n        points: path,\n        instance: object\n      });\n    } else {\n      impostor.object = ShapeBuilder.ExtrudeShape(\"ext\", {\n        shape: shape,\n        path: path,\n        instance: object\n      });\n    }\n  };\n  /**\r\n   * Update babylon mesh vertices vertices to match physics world softbody or cloth\r\n   * @param impostor imposter to match\r\n   */\n\n\n  AmmoJSPlugin.prototype._softbodyOrClothStep = function (impostor) {\n    var normalDirection = impostor.type === PhysicsImpostor.ClothImpostor ? 1 : -1;\n    var object = impostor.object;\n    var vertexPositions = object.getVerticesData(VertexBuffer.PositionKind);\n\n    if (!vertexPositions) {\n      vertexPositions = [];\n    }\n\n    var vertexNormals = object.getVerticesData(VertexBuffer.NormalKind);\n\n    if (!vertexNormals) {\n      vertexNormals = [];\n    }\n\n    var nbVertices = vertexPositions.length / 3;\n    var bodyVertices = impostor.physicsBody.get_m_nodes();\n    var node;\n    var nodePositions;\n    var nodeNormals;\n    var x, y, z;\n    var nx, ny, nz;\n\n    for (var n = 0; n < nbVertices; n++) {\n      node = bodyVertices.at(n);\n      nodePositions = node.get_m_x();\n      x = nodePositions.x();\n      y = nodePositions.y();\n      z = nodePositions.z() * normalDirection;\n      var nodeNormals = node.get_m_n();\n      nx = nodeNormals.x();\n      ny = nodeNormals.y();\n      nz = nodeNormals.z() * normalDirection;\n      vertexPositions[3 * n] = x;\n      vertexPositions[3 * n + 1] = y;\n      vertexPositions[3 * n + 2] = z;\n      vertexNormals[3 * n] = nx;\n      vertexNormals[3 * n + 1] = ny;\n      vertexNormals[3 * n + 2] = nz;\n    }\n\n    var vertex_data = new VertexData();\n    vertex_data.positions = vertexPositions;\n    vertex_data.normals = vertexNormals;\n    vertex_data.uvs = object.getVerticesData(VertexBuffer.UVKind);\n    vertex_data.colors = object.getVerticesData(VertexBuffer.ColorKind);\n\n    if (object && object.getIndices) {\n      vertex_data.indices = object.getIndices();\n    }\n\n    vertex_data.applyToMesh(object);\n  };\n  /**\r\n   * Applies an impulse on the imposter\r\n   * @param impostor imposter to apply impulse to\r\n   * @param force amount of force to be applied to the imposter\r\n   * @param contactPoint the location to apply the impulse on the imposter\r\n   */\n\n\n  AmmoJSPlugin.prototype.applyImpulse = function (impostor, force, contactPoint) {\n    if (!impostor.soft) {\n      impostor.physicsBody.activate();\n      var worldPoint = this._tmpAmmoVectorA;\n      var impulse = this._tmpAmmoVectorB; // Convert contactPoint relative to center of mass\n\n      if (impostor.object && impostor.object.getWorldMatrix) {\n        contactPoint.subtractInPlace(impostor.object.getWorldMatrix().getTranslation());\n      }\n\n      worldPoint.setValue(contactPoint.x, contactPoint.y, contactPoint.z);\n      impulse.setValue(force.x, force.y, force.z);\n      impostor.physicsBody.applyImpulse(impulse, worldPoint);\n    } else {\n      Logger.Warn(\"Cannot be applied to a soft body\");\n    }\n  };\n  /**\r\n   * Applies a force on the imposter\r\n   * @param impostor imposter to apply force\r\n   * @param force amount of force to be applied to the imposter\r\n   * @param contactPoint the location to apply the force on the imposter\r\n   */\n\n\n  AmmoJSPlugin.prototype.applyForce = function (impostor, force, contactPoint) {\n    if (!impostor.soft) {\n      impostor.physicsBody.activate();\n      var worldPoint = this._tmpAmmoVectorA;\n      var impulse = this._tmpAmmoVectorB; // Convert contactPoint relative to center of mass\n\n      if (impostor.object && impostor.object.getWorldMatrix) {\n        contactPoint.subtractInPlace(impostor.object.getWorldMatrix().getTranslation());\n      }\n\n      worldPoint.setValue(contactPoint.x, contactPoint.y, contactPoint.z);\n      impulse.setValue(force.x, force.y, force.z);\n      impostor.physicsBody.applyForce(impulse, worldPoint);\n    } else {\n      Logger.Warn(\"Cannot be applied to a soft body\");\n    }\n  };\n  /**\r\n   * Creates a physics body using the plugin\r\n   * @param impostor the imposter to create the physics body on\r\n   */\n\n\n  AmmoJSPlugin.prototype.generatePhysicsBody = function (impostor) {\n    // Note: this method will not be called on child imposotrs for compound impostors\n    impostor._pluginData.toDispose = []; //parent-child relationship\n\n    if (impostor.parent) {\n      if (impostor.physicsBody) {\n        this.removePhysicsBody(impostor);\n        impostor.forceUpdate();\n      }\n\n      return;\n    }\n\n    if (impostor.isBodyInitRequired()) {\n      var colShape = this._createShape(impostor);\n\n      var mass = impostor.getParam(\"mass\");\n      impostor._pluginData.mass = mass;\n\n      if (impostor.soft) {\n        colShape.get_m_cfg().set_collisions(0x11);\n        colShape.get_m_cfg().set_kDP(impostor.getParam(\"damping\"));\n        this.bjsAMMO.castObject(colShape, this.bjsAMMO.btCollisionObject).getCollisionShape().setMargin(impostor.getParam(\"margin\"));\n        colShape.setActivationState(AmmoJSPlugin.DISABLE_DEACTIVATION_FLAG);\n        this.world.addSoftBody(colShape, 1, -1);\n        impostor.physicsBody = colShape;\n\n        impostor._pluginData.toDispose.push(colShape);\n\n        this.setBodyPressure(impostor, 0);\n\n        if (impostor.type === PhysicsImpostor.SoftbodyImpostor) {\n          this.setBodyPressure(impostor, impostor.getParam(\"pressure\"));\n        }\n\n        this.setBodyStiffness(impostor, impostor.getParam(\"stiffness\"));\n        this.setBodyVelocityIterations(impostor, impostor.getParam(\"velocityIterations\"));\n        this.setBodyPositionIterations(impostor, impostor.getParam(\"positionIterations\"));\n      } else {\n        var localInertia = new this.bjsAMMO.btVector3(0, 0, 0);\n        var startTransform = new this.bjsAMMO.btTransform();\n        startTransform.setIdentity();\n\n        if (mass !== 0) {\n          colShape.calculateLocalInertia(mass, localInertia);\n        }\n\n        this._tmpAmmoVectorA.setValue(impostor.object.position.x, impostor.object.position.y, impostor.object.position.z);\n\n        this._tmpAmmoQuaternion.setValue(impostor.object.rotationQuaternion.x, impostor.object.rotationQuaternion.y, impostor.object.rotationQuaternion.z, impostor.object.rotationQuaternion.w);\n\n        startTransform.setOrigin(this._tmpAmmoVectorA);\n        startTransform.setRotation(this._tmpAmmoQuaternion);\n        var myMotionState = new this.bjsAMMO.btDefaultMotionState(startTransform);\n        var rbInfo = new this.bjsAMMO.btRigidBodyConstructionInfo(mass, myMotionState, colShape, localInertia);\n        var body = new this.bjsAMMO.btRigidBody(rbInfo); // Make objects kinematic if it's mass is 0\n\n        if (mass === 0) {\n          body.setCollisionFlags(body.getCollisionFlags() | AmmoJSPlugin.KINEMATIC_FLAG);\n          body.setActivationState(AmmoJSPlugin.DISABLE_DEACTIVATION_FLAG);\n        } // Disable collision if NoImpostor, but keep collision if shape is btCompoundShape\n\n\n        if (impostor.type == PhysicsImpostor.NoImpostor && !colShape.getChildShape) {\n          body.setCollisionFlags(body.getCollisionFlags() | AmmoJSPlugin.DISABLE_COLLISION_FLAG);\n        }\n\n        var group = impostor.getParam(\"group\");\n        var mask = impostor.getParam(\"mask\");\n\n        if (group && mask) {\n          this.world.addRigidBody(body, group, mask);\n        } else {\n          this.world.addRigidBody(body);\n        }\n\n        impostor.physicsBody = body;\n        impostor._pluginData.toDispose = impostor._pluginData.toDispose.concat([body, rbInfo, myMotionState, startTransform, localInertia, colShape]);\n      }\n\n      this.setBodyRestitution(impostor, impostor.getParam(\"restitution\"));\n      this.setBodyFriction(impostor, impostor.getParam(\"friction\"));\n    }\n  };\n  /**\r\n   * Removes the physics body from the imposter and disposes of the body's memory\r\n   * @param impostor imposter to remove the physics body from\r\n   */\n\n\n  AmmoJSPlugin.prototype.removePhysicsBody = function (impostor) {\n    var _this = this;\n\n    if (this.world) {\n      if (impostor.soft) {\n        this.world.removeSoftBody(impostor.physicsBody);\n      } else {\n        this.world.removeRigidBody(impostor.physicsBody);\n      }\n\n      if (impostor._pluginData) {\n        impostor._pluginData.toDispose.forEach(function (d) {\n          _this.bjsAMMO.destroy(d);\n        });\n\n        impostor._pluginData.toDispose = [];\n      }\n    }\n  };\n  /**\r\n   * Generates a joint\r\n   * @param impostorJoint the imposter joint to create the joint with\r\n   */\n\n\n  AmmoJSPlugin.prototype.generateJoint = function (impostorJoint) {\n    var mainBody = impostorJoint.mainImpostor.physicsBody;\n    var connectedBody = impostorJoint.connectedImpostor.physicsBody;\n\n    if (!mainBody || !connectedBody) {\n      return;\n    }\n\n    var jointData = impostorJoint.joint.jointData;\n\n    if (!jointData.mainPivot) {\n      jointData.mainPivot = new Vector3(0, 0, 0);\n    }\n\n    if (!jointData.connectedPivot) {\n      jointData.connectedPivot = new Vector3(0, 0, 0);\n    }\n\n    var joint;\n\n    switch (impostorJoint.joint.type) {\n      case PhysicsJoint.DistanceJoint:\n        var distance = jointData.maxDistance;\n\n        if (distance) {\n          jointData.mainPivot = new Vector3(0, -distance / 2, 0);\n          jointData.connectedPivot = new Vector3(0, distance / 2, 0);\n        }\n\n        joint = new this.bjsAMMO.btPoint2PointConstraint(mainBody, connectedBody, new this.bjsAMMO.btVector3(jointData.mainPivot.x, jointData.mainPivot.y, jointData.mainPivot.z), new this.bjsAMMO.btVector3(jointData.connectedPivot.x, jointData.connectedPivot.y, jointData.connectedPivot.z));\n        break;\n\n      case PhysicsJoint.HingeJoint:\n        if (!jointData.mainAxis) {\n          jointData.mainAxis = new Vector3(0, 0, 0);\n        }\n\n        if (!jointData.connectedAxis) {\n          jointData.connectedAxis = new Vector3(0, 0, 0);\n        }\n\n        var mainAxis = new this.bjsAMMO.btVector3(jointData.mainAxis.x, jointData.mainAxis.y, jointData.mainAxis.z);\n        var connectedAxis = new this.bjsAMMO.btVector3(jointData.connectedAxis.x, jointData.connectedAxis.y, jointData.connectedAxis.z);\n        joint = new this.bjsAMMO.btHingeConstraint(mainBody, connectedBody, new this.bjsAMMO.btVector3(jointData.mainPivot.x, jointData.mainPivot.y, jointData.mainPivot.z), new this.bjsAMMO.btVector3(jointData.connectedPivot.x, jointData.connectedPivot.y, jointData.connectedPivot.z), mainAxis, connectedAxis);\n        break;\n\n      case PhysicsJoint.BallAndSocketJoint:\n        joint = new this.bjsAMMO.btPoint2PointConstraint(mainBody, connectedBody, new this.bjsAMMO.btVector3(jointData.mainPivot.x, jointData.mainPivot.y, jointData.mainPivot.z), new this.bjsAMMO.btVector3(jointData.connectedPivot.x, jointData.connectedPivot.y, jointData.connectedPivot.z));\n        break;\n\n      default:\n        Logger.Warn(\"JointType not currently supported by the Ammo plugin, falling back to PhysicsJoint.BallAndSocketJoint\");\n        joint = new this.bjsAMMO.btPoint2PointConstraint(mainBody, connectedBody, new this.bjsAMMO.btVector3(jointData.mainPivot.x, jointData.mainPivot.y, jointData.mainPivot.z), new this.bjsAMMO.btVector3(jointData.connectedPivot.x, jointData.connectedPivot.y, jointData.connectedPivot.z));\n        break;\n    }\n\n    this.world.addConstraint(joint, !impostorJoint.joint.jointData.collision);\n    impostorJoint.joint.physicsJoint = joint;\n  };\n  /**\r\n   * Removes a joint\r\n   * @param impostorJoint the imposter joint to remove the joint from\r\n   */\n\n\n  AmmoJSPlugin.prototype.removeJoint = function (impostorJoint) {\n    if (this.world) {\n      this.world.removeConstraint(impostorJoint.joint.physicsJoint);\n    }\n  }; // adds all verticies (including child verticies) to the triangle mesh\n\n\n  AmmoJSPlugin.prototype._addMeshVerts = function (btTriangleMesh, topLevelObject, object) {\n    var _this = this;\n\n    var triangleCount = 0;\n\n    if (object && object.getIndices && object.getWorldMatrix && object.getChildMeshes) {\n      var indices = object.getIndices();\n\n      if (!indices) {\n        indices = [];\n      }\n\n      var vertexPositions = object.getVerticesData(VertexBuffer.PositionKind);\n\n      if (!vertexPositions) {\n        vertexPositions = [];\n      }\n\n      object.computeWorldMatrix(false);\n      var faceCount = indices.length / 3;\n\n      for (var i = 0; i < faceCount; i++) {\n        var triPoints = [];\n\n        for (var point = 0; point < 3; point++) {\n          var v = new Vector3(vertexPositions[indices[i * 3 + point] * 3 + 0], vertexPositions[indices[i * 3 + point] * 3 + 1], vertexPositions[indices[i * 3 + point] * 3 + 2]); // Adjust for initial scaling\n\n          Matrix.ScalingToRef(object.scaling.x, object.scaling.y, object.scaling.z, this._tmpMatrix);\n          v = Vector3.TransformCoordinates(v, this._tmpMatrix);\n          var vec;\n\n          if (point == 0) {\n            vec = this._tmpAmmoVectorA;\n          } else if (point == 1) {\n            vec = this._tmpAmmoVectorB;\n          } else {\n            vec = this._tmpAmmoVectorC;\n          }\n\n          vec.setValue(v.x, v.y, v.z);\n          triPoints.push(vec);\n        }\n\n        btTriangleMesh.addTriangle(triPoints[0], triPoints[1], triPoints[2]);\n        triangleCount++;\n      }\n\n      object.getChildMeshes().forEach(function (m) {\n        triangleCount += _this._addMeshVerts(btTriangleMesh, topLevelObject, m);\n      });\n    }\n\n    return triangleCount;\n  };\n  /**\r\n   * Initialise the soft body vertices to match its object's (mesh) vertices\r\n   * Softbody vertices (nodes) are in world space and to match this\r\n   * The object's position and rotation is set to zero and so its vertices are also then set in world space\r\n   * @param impostor to create the softbody for\r\n   */\n\n\n  AmmoJSPlugin.prototype._softVertexData = function (impostor) {\n    var object = impostor.object;\n\n    if (object && object.getIndices && object.getWorldMatrix && object.getChildMeshes) {\n      var indices = object.getIndices();\n\n      if (!indices) {\n        indices = [];\n      }\n\n      var vertexPositions = object.getVerticesData(VertexBuffer.PositionKind);\n\n      if (!vertexPositions) {\n        vertexPositions = [];\n      }\n\n      var vertexNormals = object.getVerticesData(VertexBuffer.NormalKind);\n\n      if (!vertexNormals) {\n        vertexNormals = [];\n      }\n\n      object.computeWorldMatrix(false);\n      var newPoints = [];\n      var newNorms = [];\n\n      for (var i = 0; i < vertexPositions.length; i += 3) {\n        var v = new Vector3(vertexPositions[i], vertexPositions[i + 1], vertexPositions[i + 2]);\n        var n = new Vector3(vertexNormals[i], vertexNormals[i + 1], vertexNormals[i + 2]);\n        v = Vector3.TransformCoordinates(v, object.getWorldMatrix());\n        n = Vector3.TransformNormal(n, object.getWorldMatrix());\n        newPoints.push(v.x, v.y, v.z);\n        newNorms.push(n.x, n.y, n.z);\n      }\n\n      var vertex_data = new VertexData();\n      vertex_data.positions = newPoints;\n      vertex_data.normals = newNorms;\n      vertex_data.uvs = object.getVerticesData(VertexBuffer.UVKind);\n      vertex_data.colors = object.getVerticesData(VertexBuffer.ColorKind);\n\n      if (object && object.getIndices) {\n        vertex_data.indices = object.getIndices();\n      }\n\n      vertex_data.applyToMesh(object);\n      object.position = Vector3.Zero();\n      object.rotationQuaternion = null;\n      object.rotation = Vector3.Zero();\n      object.computeWorldMatrix(true);\n      return vertex_data;\n    }\n\n    return VertexData.ExtractFromMesh(object);\n  };\n  /**\r\n   * Create an impostor's soft body\r\n   * @param impostor to create the softbody for\r\n   */\n\n\n  AmmoJSPlugin.prototype._createSoftbody = function (impostor) {\n    var object = impostor.object;\n\n    if (object && object.getIndices) {\n      var indices = object.getIndices();\n\n      if (!indices) {\n        indices = [];\n      }\n\n      var vertex_data = this._softVertexData(impostor);\n\n      var vertexPositions = vertex_data.positions;\n      var vertexNormals = vertex_data.normals;\n\n      if (vertexPositions === null || vertexNormals === null) {\n        return new this.bjsAMMO.btCompoundShape();\n      } else {\n        var triPoints = [];\n        var triNorms = [];\n\n        for (var i = 0; i < vertexPositions.length; i += 3) {\n          var v = new Vector3(vertexPositions[i], vertexPositions[i + 1], vertexPositions[i + 2]);\n          var n = new Vector3(vertexNormals[i], vertexNormals[i + 1], vertexNormals[i + 2]);\n          triPoints.push(v.x, v.y, -v.z);\n          triNorms.push(n.x, n.y, -n.z);\n        }\n\n        var softBody = new this.bjsAMMO.btSoftBodyHelpers().CreateFromTriMesh(this.world.getWorldInfo(), triPoints, object.getIndices(), indices.length / 3, true);\n        var nbVertices = vertexPositions.length / 3;\n        var bodyVertices = softBody.get_m_nodes();\n        var node;\n        var nodeNormals;\n\n        for (var i = 0; i < nbVertices; i++) {\n          node = bodyVertices.at(i);\n          var nodeNormals = node.get_m_n();\n          nodeNormals.setX(triNorms[3 * i]);\n          nodeNormals.setY(triNorms[3 * i + 1]);\n          nodeNormals.setZ(triNorms[3 * i + 2]);\n        }\n\n        return softBody;\n      }\n    }\n  };\n  /**\r\n   * Create cloth for an impostor\r\n   * @param impostor to create the softbody for\r\n   */\n\n\n  AmmoJSPlugin.prototype._createCloth = function (impostor) {\n    var object = impostor.object;\n\n    if (object && object.getIndices) {\n      var indices = object.getIndices();\n\n      if (!indices) {\n        indices = [];\n      }\n\n      var vertex_data = this._softVertexData(impostor);\n\n      var vertexPositions = vertex_data.positions;\n      var vertexNormals = vertex_data.normals;\n\n      if (vertexPositions === null || vertexNormals === null) {\n        return new this.bjsAMMO.btCompoundShape();\n      } else {\n        var len = vertexPositions.length;\n        var segments = Math.sqrt(len / 3);\n        impostor.segments = segments;\n        var segs = segments - 1;\n\n        this._tmpAmmoVectorA.setValue(vertexPositions[0], vertexPositions[1], vertexPositions[2]);\n\n        this._tmpAmmoVectorB.setValue(vertexPositions[3 * segs], vertexPositions[3 * segs + 1], vertexPositions[3 * segs + 2]);\n\n        this._tmpAmmoVectorD.setValue(vertexPositions[len - 3], vertexPositions[len - 2], vertexPositions[len - 1]);\n\n        this._tmpAmmoVectorC.setValue(vertexPositions[len - 3 - 3 * segs], vertexPositions[len - 2 - 3 * segs], vertexPositions[len - 1 - 3 * segs]);\n\n        var clothBody = new this.bjsAMMO.btSoftBodyHelpers().CreatePatch(this.world.getWorldInfo(), this._tmpAmmoVectorA, this._tmpAmmoVectorB, this._tmpAmmoVectorC, this._tmpAmmoVectorD, segments, segments, impostor.getParam(\"fixedPoints\"), true);\n        return clothBody;\n      }\n    }\n  };\n  /**\r\n   * Create rope for an impostor\r\n   * @param impostor to create the softbody for\r\n   */\n\n\n  AmmoJSPlugin.prototype._createRope = function (impostor) {\n    var len;\n    var segments;\n\n    var vertex_data = this._softVertexData(impostor);\n\n    var vertexPositions = vertex_data.positions;\n    var vertexNormals = vertex_data.normals;\n\n    if (vertexPositions === null || vertexNormals === null) {\n      return new this.bjsAMMO.btCompoundShape();\n    } //force the mesh to be updatable\n\n\n    vertex_data.applyToMesh(impostor.object, true);\n    impostor._isFromLine = true; // If in lines mesh all normals will be zero\n\n    var vertexSquared = vertexNormals.map(function (x) {\n      return x * x;\n    });\n\n    var reducer = function reducer(accumulator, currentValue) {\n      return accumulator + currentValue;\n    };\n\n    var reduced = vertexSquared.reduce(reducer);\n\n    if (reduced === 0) {\n      // line mesh\n      len = vertexPositions.length;\n      segments = len / 3 - 1;\n\n      this._tmpAmmoVectorA.setValue(vertexPositions[0], vertexPositions[1], vertexPositions[2]);\n\n      this._tmpAmmoVectorB.setValue(vertexPositions[len - 3], vertexPositions[len - 2], vertexPositions[len - 1]);\n    } else {\n      //extruded mesh\n      impostor._isFromLine = false;\n      var pathVectors = impostor.getParam(\"path\");\n      var shape = impostor.getParam(\"shape\");\n\n      if (shape === null) {\n        Logger.Warn(\"No shape available for extruded mesh\");\n        return new this.bjsAMMO.btCompoundShape();\n      }\n\n      if (vertexPositions.length % (3 * pathVectors.length) !== 0) {\n        Logger.Warn(\"Path does not match extrusion\");\n        return new this.bjsAMMO.btCompoundShape();\n      }\n\n      len = pathVectors.length;\n      segments = len - 1;\n\n      this._tmpAmmoVectorA.setValue(pathVectors[0].x, pathVectors[0].y, pathVectors[0].z);\n\n      this._tmpAmmoVectorB.setValue(pathVectors[len - 1].x, pathVectors[len - 1].y, pathVectors[len - 1].z);\n    }\n\n    impostor.segments = segments;\n    var fixedPoints = impostor.getParam(\"fixedPoints\");\n    fixedPoints = fixedPoints > 3 ? 3 : fixedPoints;\n    var ropeBody = new this.bjsAMMO.btSoftBodyHelpers().CreateRope(this.world.getWorldInfo(), this._tmpAmmoVectorA, this._tmpAmmoVectorB, segments - 1, fixedPoints);\n    ropeBody.get_m_cfg().set_collisions(0x11);\n    return ropeBody;\n  };\n  /**\r\n   * Create a custom physics impostor shape using the plugin's onCreateCustomShape handler\r\n   * @param impostor to create the custom physics shape for\r\n   */\n\n\n  AmmoJSPlugin.prototype._createCustom = function (impostor) {\n    var returnValue = null;\n\n    if (this.onCreateCustomShape) {\n      returnValue = this.onCreateCustomShape(impostor);\n    }\n\n    if (returnValue == null) {\n      returnValue = new this.bjsAMMO.btCompoundShape();\n    }\n\n    return returnValue;\n  }; // adds all verticies (including child verticies) to the convex hull shape\n\n\n  AmmoJSPlugin.prototype._addHullVerts = function (btConvexHullShape, topLevelObject, object) {\n    var _this = this;\n\n    var triangleCount = 0;\n\n    if (object && object.getIndices && object.getWorldMatrix && object.getChildMeshes) {\n      var indices = object.getIndices();\n\n      if (!indices) {\n        indices = [];\n      }\n\n      var vertexPositions = object.getVerticesData(VertexBuffer.PositionKind);\n\n      if (!vertexPositions) {\n        vertexPositions = [];\n      }\n\n      object.computeWorldMatrix(false);\n      var faceCount = indices.length / 3;\n\n      for (var i = 0; i < faceCount; i++) {\n        var triPoints = [];\n\n        for (var point = 0; point < 3; point++) {\n          var v = new Vector3(vertexPositions[indices[i * 3 + point] * 3 + 0], vertexPositions[indices[i * 3 + point] * 3 + 1], vertexPositions[indices[i * 3 + point] * 3 + 2]); // Adjust for initial scaling\n\n          Matrix.ScalingToRef(object.scaling.x, object.scaling.y, object.scaling.z, this._tmpMatrix);\n          v = Vector3.TransformCoordinates(v, this._tmpMatrix);\n          var vec;\n\n          if (point == 0) {\n            vec = this._tmpAmmoVectorA;\n          } else if (point == 1) {\n            vec = this._tmpAmmoVectorB;\n          } else {\n            vec = this._tmpAmmoVectorC;\n          }\n\n          vec.setValue(v.x, v.y, v.z);\n          triPoints.push(vec);\n        }\n\n        btConvexHullShape.addPoint(triPoints[0], true);\n        btConvexHullShape.addPoint(triPoints[1], true);\n        btConvexHullShape.addPoint(triPoints[2], true);\n        triangleCount++;\n      }\n\n      object.getChildMeshes().forEach(function (m) {\n        triangleCount += _this._addHullVerts(btConvexHullShape, topLevelObject, m);\n      });\n    }\n\n    return triangleCount;\n  };\n\n  AmmoJSPlugin.prototype._createShape = function (impostor, ignoreChildren) {\n    var _this = this;\n\n    if (ignoreChildren === void 0) {\n      ignoreChildren = false;\n    }\n\n    var object = impostor.object;\n    var returnValue;\n    var extendSize = impostor.getObjectExtendSize();\n\n    if (!ignoreChildren) {\n      var meshChildren = impostor.object.getChildMeshes ? impostor.object.getChildMeshes(true) : [];\n      returnValue = new this.bjsAMMO.btCompoundShape(); // Add shape of all children to the compound shape\n\n      var childrenAdded = 0;\n      meshChildren.forEach(function (childMesh) {\n        var childImpostor = childMesh.getPhysicsImpostor();\n\n        if (childImpostor) {\n          if (childImpostor.type == PhysicsImpostor.MeshImpostor) {\n            throw \"A child MeshImpostor is not supported. Only primitive impostors are supported as children (eg. box or sphere)\";\n          }\n\n          var shape = _this._createShape(childImpostor); // Position needs to be scaled based on parent's scaling\n\n\n          var parentMat = childMesh.parent.getWorldMatrix().clone();\n          var s = new Vector3();\n          parentMat.decompose(s);\n\n          _this._tmpAmmoTransform.getOrigin().setValue(childMesh.position.x * s.x, childMesh.position.y * s.y, childMesh.position.z * s.z);\n\n          _this._tmpAmmoQuaternion.setValue(childMesh.rotationQuaternion.x, childMesh.rotationQuaternion.y, childMesh.rotationQuaternion.z, childMesh.rotationQuaternion.w);\n\n          _this._tmpAmmoTransform.setRotation(_this._tmpAmmoQuaternion);\n\n          returnValue.addChildShape(_this._tmpAmmoTransform, shape);\n          childImpostor.dispose();\n          childrenAdded++;\n        }\n      });\n\n      if (childrenAdded > 0) {\n        // Add parents shape as a child if present\n        if (impostor.type != PhysicsImpostor.NoImpostor) {\n          var shape = this._createShape(impostor, true);\n\n          if (shape) {\n            this._tmpAmmoTransform.getOrigin().setValue(0, 0, 0);\n\n            this._tmpAmmoQuaternion.setValue(0, 0, 0, 1);\n\n            this._tmpAmmoTransform.setRotation(this._tmpAmmoQuaternion);\n\n            returnValue.addChildShape(this._tmpAmmoTransform, shape);\n          }\n        }\n\n        return returnValue;\n      } else {\n        // If no children with impostors create the actual shape below instead\n        this.bjsAMMO.destroy(returnValue);\n        returnValue = null;\n      }\n    }\n\n    switch (impostor.type) {\n      case PhysicsImpostor.SphereImpostor:\n        // Is there a better way to compare floats number? With an epsylon or with a Math function\n        if (Scalar.WithinEpsilon(extendSize.x, extendSize.y, 0.0001) && Scalar.WithinEpsilon(extendSize.x, extendSize.z, 0.0001)) {\n          returnValue = new this.bjsAMMO.btSphereShape(extendSize.x / 2);\n        } else {\n          // create a btMultiSphereShape because it's not possible to set a local scaling on a btSphereShape\n          var positions = [new this.bjsAMMO.btVector3(0, 0, 0)];\n          var radii = [1];\n          returnValue = new this.bjsAMMO.btMultiSphereShape(positions, radii, 1);\n          returnValue.setLocalScaling(new this.bjsAMMO.btVector3(extendSize.x / 2, extendSize.y / 2, extendSize.z / 2));\n        }\n\n        break;\n\n      case PhysicsImpostor.CapsuleImpostor:\n        returnValue = new this.bjsAMMO.btCapsuleShape(extendSize.x / 2, extendSize.y / 2);\n        break;\n\n      case PhysicsImpostor.CylinderImpostor:\n        this._tmpAmmoVectorA.setValue(extendSize.x / 2, extendSize.y / 2, extendSize.z / 2);\n\n        returnValue = new this.bjsAMMO.btCylinderShape(this._tmpAmmoVectorA);\n        break;\n\n      case PhysicsImpostor.PlaneImpostor:\n      case PhysicsImpostor.BoxImpostor:\n        this._tmpAmmoVectorA.setValue(extendSize.x / 2, extendSize.y / 2, extendSize.z / 2);\n\n        returnValue = new this.bjsAMMO.btBoxShape(this._tmpAmmoVectorA);\n        break;\n\n      case PhysicsImpostor.MeshImpostor:\n        if (impostor.getParam(\"mass\") == 0) {\n          // Only create btBvhTriangleMeshShape impostor is static\n          // See https://pybullet.org/Bullet/phpBB3/viewtopic.php?t=7283\n          var tetraMesh = new this.bjsAMMO.btTriangleMesh();\n\n          impostor._pluginData.toDispose.push(tetraMesh);\n\n          var triangeCount = this._addMeshVerts(tetraMesh, object, object);\n\n          if (triangeCount == 0) {\n            returnValue = new this.bjsAMMO.btCompoundShape();\n          } else {\n            returnValue = new this.bjsAMMO.btBvhTriangleMeshShape(tetraMesh);\n          }\n\n          break;\n        }\n\n      // Otherwise create convexHullImpostor\n\n      case PhysicsImpostor.ConvexHullImpostor:\n        var convexMesh = new this.bjsAMMO.btConvexHullShape();\n\n        var triangeCount = this._addHullVerts(convexMesh, object, object);\n\n        if (triangeCount == 0) {\n          // Cleanup Unused Convex Hull Shape\n          impostor._pluginData.toDispose.push(convexMesh);\n\n          returnValue = new this.bjsAMMO.btCompoundShape();\n        } else {\n          returnValue = convexMesh;\n        }\n\n        break;\n\n      case PhysicsImpostor.NoImpostor:\n        // Fill with sphere but collision is disabled on the rigid body in generatePhysicsBody, using an empty shape caused unexpected movement with joints\n        returnValue = new this.bjsAMMO.btSphereShape(extendSize.x / 2);\n        break;\n\n      case PhysicsImpostor.CustomImpostor:\n        // Only usable when the plugin's onCreateCustomShape is set\n        returnValue = this._createCustom(impostor);\n        break;\n\n      case PhysicsImpostor.SoftbodyImpostor:\n        // Only usable with a mesh that has sufficient and shared vertices\n        returnValue = this._createSoftbody(impostor);\n        break;\n\n      case PhysicsImpostor.ClothImpostor:\n        // Only usable with a ground mesh that has sufficient and shared vertices\n        returnValue = this._createCloth(impostor);\n        break;\n\n      case PhysicsImpostor.RopeImpostor:\n        // Only usable with a line mesh or an extruded mesh that is updatable\n        returnValue = this._createRope(impostor);\n        break;\n\n      default:\n        Logger.Warn(\"The impostor type is not currently supported by the ammo plugin.\");\n        break;\n    }\n\n    return returnValue;\n  };\n  /**\r\n   * Sets the physics body position/rotation from the babylon mesh's position/rotation\r\n   * @param impostor imposter containing the physics body and babylon object\r\n   */\n\n\n  AmmoJSPlugin.prototype.setTransformationFromPhysicsBody = function (impostor) {\n    impostor.physicsBody.getMotionState().getWorldTransform(this._tmpAmmoTransform);\n    impostor.object.position.set(this._tmpAmmoTransform.getOrigin().x(), this._tmpAmmoTransform.getOrigin().y(), this._tmpAmmoTransform.getOrigin().z());\n\n    if (!impostor.object.rotationQuaternion) {\n      if (impostor.object.rotation) {\n        this._tmpQuaternion.set(this._tmpAmmoTransform.getRotation().x(), this._tmpAmmoTransform.getRotation().y(), this._tmpAmmoTransform.getRotation().z(), this._tmpAmmoTransform.getRotation().w());\n\n        this._tmpQuaternion.toEulerAnglesToRef(impostor.object.rotation);\n      }\n    } else {\n      impostor.object.rotationQuaternion.set(this._tmpAmmoTransform.getRotation().x(), this._tmpAmmoTransform.getRotation().y(), this._tmpAmmoTransform.getRotation().z(), this._tmpAmmoTransform.getRotation().w());\n    }\n  };\n  /**\r\n   * Sets the babylon object's position/rotation from the physics body's position/rotation\r\n   * @param impostor imposter containing the physics body and babylon object\r\n   * @param newPosition new position\r\n   * @param newRotation new rotation\r\n   */\n\n\n  AmmoJSPlugin.prototype.setPhysicsBodyTransformation = function (impostor, newPosition, newRotation) {\n    var trans = impostor.physicsBody.getWorldTransform(); // If rotation/position has changed update and activate rigged body\n\n    if (Math.abs(trans.getOrigin().x() - newPosition.x) > Epsilon || Math.abs(trans.getOrigin().y() - newPosition.y) > Epsilon || Math.abs(trans.getOrigin().z() - newPosition.z) > Epsilon || Math.abs(trans.getRotation().x() - newRotation.x) > Epsilon || Math.abs(trans.getRotation().y() - newRotation.y) > Epsilon || Math.abs(trans.getRotation().z() - newRotation.z) > Epsilon || Math.abs(trans.getRotation().w() - newRotation.w) > Epsilon) {\n      this._tmpAmmoVectorA.setValue(newPosition.x, newPosition.y, newPosition.z);\n\n      trans.setOrigin(this._tmpAmmoVectorA);\n\n      this._tmpAmmoQuaternion.setValue(newRotation.x, newRotation.y, newRotation.z, newRotation.w);\n\n      trans.setRotation(this._tmpAmmoQuaternion);\n      impostor.physicsBody.setWorldTransform(trans);\n\n      if (impostor.mass == 0) {\n        // Kinematic objects must be updated using motion state\n        var motionState = impostor.physicsBody.getMotionState();\n\n        if (motionState) {\n          motionState.setWorldTransform(trans);\n        }\n      } else {\n        impostor.physicsBody.activate();\n      }\n    }\n  };\n  /**\r\n   * If this plugin is supported\r\n   * @returns true if its supported\r\n   */\n\n\n  AmmoJSPlugin.prototype.isSupported = function () {\n    return this.bjsAMMO !== undefined;\n  };\n  /**\r\n   * Sets the linear velocity of the physics body\r\n   * @param impostor imposter to set the velocity on\r\n   * @param velocity velocity to set\r\n   */\n\n\n  AmmoJSPlugin.prototype.setLinearVelocity = function (impostor, velocity) {\n    this._tmpAmmoVectorA.setValue(velocity.x, velocity.y, velocity.z);\n\n    if (impostor.soft) {\n      impostor.physicsBody.linearVelocity(this._tmpAmmoVectorA);\n    } else {\n      impostor.physicsBody.setLinearVelocity(this._tmpAmmoVectorA);\n    }\n  };\n  /**\r\n   * Sets the angular velocity of the physics body\r\n   * @param impostor imposter to set the velocity on\r\n   * @param velocity velocity to set\r\n   */\n\n\n  AmmoJSPlugin.prototype.setAngularVelocity = function (impostor, velocity) {\n    this._tmpAmmoVectorA.setValue(velocity.x, velocity.y, velocity.z);\n\n    if (impostor.soft) {\n      impostor.physicsBody.angularVelocity(this._tmpAmmoVectorA);\n    } else {\n      impostor.physicsBody.setAngularVelocity(this._tmpAmmoVectorA);\n    }\n  };\n  /**\r\n   * gets the linear velocity\r\n   * @param impostor imposter to get linear velocity from\r\n   * @returns linear velocity\r\n   */\n\n\n  AmmoJSPlugin.prototype.getLinearVelocity = function (impostor) {\n    if (impostor.soft) {\n      var v = impostor.physicsBody.linearVelocity();\n    } else {\n      var v = impostor.physicsBody.getLinearVelocity();\n    }\n\n    if (!v) {\n      return null;\n    }\n\n    var result = new Vector3(v.x(), v.y(), v.z());\n    this.bjsAMMO.destroy(v);\n    return result;\n  };\n  /**\r\n   * gets the angular velocity\r\n   * @param impostor imposter to get angular velocity from\r\n   * @returns angular velocity\r\n   */\n\n\n  AmmoJSPlugin.prototype.getAngularVelocity = function (impostor) {\n    if (impostor.soft) {\n      var v = impostor.physicsBody.angularVelocity();\n    } else {\n      var v = impostor.physicsBody.getAngularVelocity();\n    }\n\n    if (!v) {\n      return null;\n    }\n\n    var result = new Vector3(v.x(), v.y(), v.z());\n    this.bjsAMMO.destroy(v);\n    return result;\n  };\n  /**\r\n   * Sets the mass of physics body\r\n   * @param impostor imposter to set the mass on\r\n   * @param mass mass to set\r\n   */\n\n\n  AmmoJSPlugin.prototype.setBodyMass = function (impostor, mass) {\n    if (impostor.soft) {\n      impostor.physicsBody.setTotalMass(mass, false);\n    } else {\n      impostor.physicsBody.setMassProps(mass);\n    }\n\n    impostor._pluginData.mass = mass;\n  };\n  /**\r\n   * Gets the mass of the physics body\r\n   * @param impostor imposter to get the mass from\r\n   * @returns mass\r\n   */\n\n\n  AmmoJSPlugin.prototype.getBodyMass = function (impostor) {\n    return impostor._pluginData.mass || 0;\n  };\n  /**\r\n   * Gets friction of the impostor\r\n   * @param impostor impostor to get friction from\r\n   * @returns friction value\r\n   */\n\n\n  AmmoJSPlugin.prototype.getBodyFriction = function (impostor) {\n    return impostor._pluginData.friction || 0;\n  };\n  /**\r\n   * Sets friction of the impostor\r\n   * @param impostor impostor to set friction on\r\n   * @param friction friction value\r\n   */\n\n\n  AmmoJSPlugin.prototype.setBodyFriction = function (impostor, friction) {\n    if (impostor.soft) {\n      impostor.physicsBody.get_m_cfg().set_kDF(friction);\n    } else {\n      impostor.physicsBody.setFriction(friction);\n    }\n\n    impostor._pluginData.friction = friction;\n  };\n  /**\r\n   * Gets restitution of the impostor\r\n   * @param impostor impostor to get restitution from\r\n   * @returns restitution value\r\n   */\n\n\n  AmmoJSPlugin.prototype.getBodyRestitution = function (impostor) {\n    return impostor._pluginData.restitution || 0;\n  };\n  /**\r\n   * Sets resitution of the impostor\r\n   * @param impostor impostor to set resitution on\r\n   * @param restitution resitution value\r\n   */\n\n\n  AmmoJSPlugin.prototype.setBodyRestitution = function (impostor, restitution) {\n    impostor.physicsBody.setRestitution(restitution);\n    impostor._pluginData.restitution = restitution;\n  };\n  /**\r\n   * Gets pressure inside the impostor\r\n   * @param impostor impostor to get pressure from\r\n   * @returns pressure value\r\n   */\n\n\n  AmmoJSPlugin.prototype.getBodyPressure = function (impostor) {\n    if (!impostor.soft) {\n      Logger.Warn(\"Pressure is not a property of a rigid body\");\n      return 0;\n    }\n\n    return impostor._pluginData.pressure || 0;\n  };\n  /**\r\n   * Sets pressure inside a soft body impostor\r\n   * Cloth and rope must remain 0 pressure\r\n   * @param impostor impostor to set pressure on\r\n   * @param pressure pressure value\r\n   */\n\n\n  AmmoJSPlugin.prototype.setBodyPressure = function (impostor, pressure) {\n    if (impostor.soft) {\n      if (impostor.type === PhysicsImpostor.SoftbodyImpostor) {\n        impostor.physicsBody.get_m_cfg().set_kPR(pressure);\n        impostor._pluginData.pressure = pressure;\n      } else {\n        impostor.physicsBody.get_m_cfg().set_kPR(0);\n        impostor._pluginData.pressure = 0;\n      }\n    } else {\n      Logger.Warn(\"Pressure can only be applied to a softbody\");\n    }\n  };\n  /**\r\n   * Gets stiffness of the impostor\r\n   * @param impostor impostor to get stiffness from\r\n   * @returns pressure value\r\n   */\n\n\n  AmmoJSPlugin.prototype.getBodyStiffness = function (impostor) {\n    if (!impostor.soft) {\n      Logger.Warn(\"Stiffness is not a property of a rigid body\");\n      return 0;\n    }\n\n    return impostor._pluginData.stiffness || 0;\n  };\n  /**\r\n   * Sets stiffness of the impostor\r\n   * @param impostor impostor to set stiffness on\r\n   * @param stiffness stiffness value from 0 to 1\r\n   */\n\n\n  AmmoJSPlugin.prototype.setBodyStiffness = function (impostor, stiffness) {\n    if (impostor.soft) {\n      stiffness = stiffness < 0 ? 0 : stiffness;\n      stiffness = stiffness > 1 ? 1 : stiffness;\n      impostor.physicsBody.get_m_materials().at(0).set_m_kLST(stiffness);\n      impostor._pluginData.stiffness = stiffness;\n    } else {\n      Logger.Warn(\"Stiffness cannot be applied to a rigid body\");\n    }\n  };\n  /**\r\n   * Gets velocityIterations of the impostor\r\n   * @param impostor impostor to get velocity iterations from\r\n   * @returns velocityIterations value\r\n   */\n\n\n  AmmoJSPlugin.prototype.getBodyVelocityIterations = function (impostor) {\n    if (!impostor.soft) {\n      Logger.Warn(\"Velocity iterations is not a property of a rigid body\");\n      return 0;\n    }\n\n    return impostor._pluginData.velocityIterations || 0;\n  };\n  /**\r\n   * Sets velocityIterations of the impostor\r\n   * @param impostor impostor to set velocity iterations on\r\n   * @param velocityIterations velocityIterations value\r\n   */\n\n\n  AmmoJSPlugin.prototype.setBodyVelocityIterations = function (impostor, velocityIterations) {\n    if (impostor.soft) {\n      velocityIterations = velocityIterations < 0 ? 0 : velocityIterations;\n      impostor.physicsBody.get_m_cfg().set_viterations(velocityIterations);\n      impostor._pluginData.velocityIterations = velocityIterations;\n    } else {\n      Logger.Warn(\"Velocity iterations cannot be applied to a rigid body\");\n    }\n  };\n  /**\r\n   * Gets positionIterations of the impostor\r\n   * @param impostor impostor to get position iterations from\r\n   * @returns positionIterations value\r\n   */\n\n\n  AmmoJSPlugin.prototype.getBodyPositionIterations = function (impostor) {\n    if (!impostor.soft) {\n      Logger.Warn(\"Position iterations is not a property of a rigid body\");\n      return 0;\n    }\n\n    return impostor._pluginData.positionIterations || 0;\n  };\n  /**\r\n   * Sets positionIterations of the impostor\r\n   * @param impostor impostor to set position on\r\n   * @param positionIterations positionIterations value\r\n   */\n\n\n  AmmoJSPlugin.prototype.setBodyPositionIterations = function (impostor, positionIterations) {\n    if (impostor.soft) {\n      positionIterations = positionIterations < 0 ? 0 : positionIterations;\n      impostor.physicsBody.get_m_cfg().set_piterations(positionIterations);\n      impostor._pluginData.positionIterations = positionIterations;\n    } else {\n      Logger.Warn(\"Position iterations cannot be applied to a rigid body\");\n    }\n  };\n  /**\r\n  * Append an anchor to a cloth object\r\n  * @param impostor is the cloth impostor to add anchor to\r\n  * @param otherImpostor is the rigid impostor to anchor to\r\n  * @param width ratio across width from 0 to 1\r\n  * @param height ratio up height from 0 to 1\r\n  * @param influence the elasticity between cloth impostor and anchor from 0, very stretchy to 1, little strech\r\n  * @param noCollisionBetweenLinkedBodies when true collisions between soft impostor and anchor are ignored; default false\r\n  */\n\n\n  AmmoJSPlugin.prototype.appendAnchor = function (impostor, otherImpostor, width, height, influence, noCollisionBetweenLinkedBodies) {\n    if (influence === void 0) {\n      influence = 1;\n    }\n\n    if (noCollisionBetweenLinkedBodies === void 0) {\n      noCollisionBetweenLinkedBodies = false;\n    }\n\n    var segs = impostor.segments;\n    var nbAcross = Math.round((segs - 1) * width);\n    var nbUp = Math.round((segs - 1) * height);\n    var nbDown = segs - 1 - nbUp;\n    var node = nbAcross + segs * nbDown;\n    impostor.physicsBody.appendAnchor(node, otherImpostor.physicsBody, noCollisionBetweenLinkedBodies, influence);\n  };\n  /**\r\n   * Append an hook to a rope object\r\n   * @param impostor is the rope impostor to add hook to\r\n   * @param otherImpostor is the rigid impostor to hook to\r\n   * @param length ratio along the rope from 0 to 1\r\n   * @param influence the elasticity between soft impostor and anchor from 0, very stretchy to 1, little strech\r\n   * @param noCollisionBetweenLinkedBodies when true collisions between soft impostor and anchor are ignored; default false\r\n   */\n\n\n  AmmoJSPlugin.prototype.appendHook = function (impostor, otherImpostor, length, influence, noCollisionBetweenLinkedBodies) {\n    if (influence === void 0) {\n      influence = 1;\n    }\n\n    if (noCollisionBetweenLinkedBodies === void 0) {\n      noCollisionBetweenLinkedBodies = false;\n    }\n\n    var node = Math.round(impostor.segments * length);\n    impostor.physicsBody.appendAnchor(node, otherImpostor.physicsBody, noCollisionBetweenLinkedBodies, influence);\n  };\n  /**\r\n   * Sleeps the physics body and stops it from being active\r\n   * @param impostor impostor to sleep\r\n   */\n\n\n  AmmoJSPlugin.prototype.sleepBody = function (impostor) {\n    Logger.Warn(\"sleepBody is not currently supported by the Ammo physics plugin\");\n  };\n  /**\r\n   * Activates the physics body\r\n   * @param impostor impostor to activate\r\n   */\n\n\n  AmmoJSPlugin.prototype.wakeUpBody = function (impostor) {\n    impostor.physicsBody.activate();\n  };\n  /**\r\n   * Updates the distance parameters of the joint\r\n   * @param joint joint to update\r\n   * @param maxDistance maximum distance of the joint\r\n   * @param minDistance minimum distance of the joint\r\n   */\n\n\n  AmmoJSPlugin.prototype.updateDistanceJoint = function (joint, maxDistance, minDistance) {\n    Logger.Warn(\"updateDistanceJoint is not currently supported by the Ammo physics plugin\");\n  };\n  /**\r\n   * Sets a motor on the joint\r\n   * @param joint joint to set motor on\r\n   * @param speed speed of the motor\r\n   * @param maxForce maximum force of the motor\r\n   * @param motorIndex index of the motor\r\n   */\n\n\n  AmmoJSPlugin.prototype.setMotor = function (joint, speed, maxForce, motorIndex) {\n    joint.physicsJoint.enableAngularMotor(true, speed, maxForce);\n  };\n  /**\r\n   * Sets the motors limit\r\n   * @param joint joint to set limit on\r\n   * @param upperLimit upper limit\r\n   * @param lowerLimit lower limit\r\n   */\n\n\n  AmmoJSPlugin.prototype.setLimit = function (joint, upperLimit, lowerLimit) {\n    Logger.Warn(\"setLimit is not currently supported by the Ammo physics plugin\");\n  };\n  /**\r\n   * Syncs the position and rotation of a mesh with the impostor\r\n   * @param mesh mesh to sync\r\n   * @param impostor impostor to update the mesh with\r\n   */\n\n\n  AmmoJSPlugin.prototype.syncMeshWithImpostor = function (mesh, impostor) {\n    var body = impostor.physicsBody;\n    body.getMotionState().getWorldTransform(this._tmpAmmoTransform);\n    mesh.position.x = this._tmpAmmoTransform.getOrigin().x();\n    mesh.position.y = this._tmpAmmoTransform.getOrigin().y();\n    mesh.position.z = this._tmpAmmoTransform.getOrigin().z();\n\n    if (mesh.rotationQuaternion) {\n      mesh.rotationQuaternion.x = this._tmpAmmoTransform.getRotation().x();\n      mesh.rotationQuaternion.y = this._tmpAmmoTransform.getRotation().y();\n      mesh.rotationQuaternion.z = this._tmpAmmoTransform.getRotation().z();\n      mesh.rotationQuaternion.w = this._tmpAmmoTransform.getRotation().w();\n    }\n  };\n  /**\r\n   * Gets the radius of the impostor\r\n   * @param impostor impostor to get radius from\r\n   * @returns the radius\r\n   */\n\n\n  AmmoJSPlugin.prototype.getRadius = function (impostor) {\n    var exntend = impostor.getObjectExtendSize();\n    return exntend.x / 2;\n  };\n  /**\r\n   * Gets the box size of the impostor\r\n   * @param impostor impostor to get box size from\r\n   * @param result the resulting box size\r\n   */\n\n\n  AmmoJSPlugin.prototype.getBoxSizeToRef = function (impostor, result) {\n    var exntend = impostor.getObjectExtendSize();\n    result.x = exntend.x;\n    result.y = exntend.y;\n    result.z = exntend.z;\n  };\n  /**\r\n   * Disposes of the impostor\r\n   */\n\n\n  AmmoJSPlugin.prototype.dispose = function () {\n    // Dispose of world\n    this.bjsAMMO.destroy(this.world);\n    this.bjsAMMO.destroy(this._solver);\n    this.bjsAMMO.destroy(this._overlappingPairCache);\n    this.bjsAMMO.destroy(this._dispatcher);\n    this.bjsAMMO.destroy(this._collisionConfiguration); // Dispose of tmp variables\n\n    this.bjsAMMO.destroy(this._tmpAmmoVectorA);\n    this.bjsAMMO.destroy(this._tmpAmmoVectorB);\n    this.bjsAMMO.destroy(this._tmpAmmoVectorC);\n    this.bjsAMMO.destroy(this._tmpAmmoTransform);\n    this.bjsAMMO.destroy(this._tmpAmmoQuaternion);\n    this.bjsAMMO.destroy(this._tmpAmmoConcreteContactResultCallback);\n    this.world = null;\n  };\n  /**\r\n   * Does a raycast in the physics world\r\n   * @param from when should the ray start?\r\n   * @param to when should the ray end?\r\n   * @returns PhysicsRaycastResult\r\n   */\n\n\n  AmmoJSPlugin.prototype.raycast = function (from, to) {\n    this._tmpAmmoVectorRCA = new this.bjsAMMO.btVector3(from.x, from.y, from.z);\n    this._tmpAmmoVectorRCB = new this.bjsAMMO.btVector3(to.x, to.y, to.z);\n    var rayCallback = new this.bjsAMMO.ClosestRayResultCallback(this._tmpAmmoVectorRCA, this._tmpAmmoVectorRCB);\n    this.world.rayTest(this._tmpAmmoVectorRCA, this._tmpAmmoVectorRCB, rayCallback);\n\n    this._raycastResult.reset(from, to);\n\n    if (rayCallback.hasHit()) {\n      // TODO: do we want/need the body? If so, set all the data\n\n      /*\r\n      var rigidBody = this.bjsAMMO.btRigidBody.prototype.upcast(\r\n          rayCallback.get_m_collisionObject()\r\n      );\r\n      var body = {};\r\n      */\n      this._raycastResult.setHitData({\n        x: rayCallback.get_m_hitNormalWorld().x(),\n        y: rayCallback.get_m_hitNormalWorld().y(),\n        z: rayCallback.get_m_hitNormalWorld().z()\n      }, {\n        x: rayCallback.get_m_hitPointWorld().x(),\n        y: rayCallback.get_m_hitPointWorld().y(),\n        z: rayCallback.get_m_hitPointWorld().z()\n      });\n\n      this._raycastResult.calculateHitDistance();\n    }\n\n    this.bjsAMMO.destroy(rayCallback);\n    this.bjsAMMO.destroy(this._tmpAmmoVectorRCA);\n    this.bjsAMMO.destroy(this._tmpAmmoVectorRCB);\n    return this._raycastResult;\n  };\n\n  AmmoJSPlugin.DISABLE_COLLISION_FLAG = 4;\n  AmmoJSPlugin.KINEMATIC_FLAG = 2;\n  AmmoJSPlugin.DISABLE_DEACTIVATION_FLAG = 4;\n  return AmmoJSPlugin;\n}();\n\nexport { AmmoJSPlugin };","map":null,"metadata":{},"sourceType":"module"}