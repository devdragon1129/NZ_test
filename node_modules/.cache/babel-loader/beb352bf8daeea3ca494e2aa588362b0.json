{"ast":null,"code":"import _defineProperty from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// Pseudo Set and Map helpers. They exist because we are storing them in LS\n// and they get converted to regular objects and arrays\nexport function addElement(set, element) {\n  return [].concat(_toConsumableArray(removeElement(set, element)), [element]);\n}\nexport function removeElement(set, element) {\n  return set.filter(function (x) {\n    return x !== element;\n  });\n}\nexport function addEntry(map, id, element) {\n  return _objectSpread({}, map, _defineProperty({}, id, element));\n}\nexport function removeEntry(map, id) {\n  var newMap = _objectSpread({}, map);\n\n  delete newMap[id];\n  return newMap;\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/sync/domain/utils.ts"],"names":["addElement","set","element","removeElement","filter","x","addEntry","map","id","removeEntry","newMap"],"mappings":";;;AAAA;AACA;AAEA,OAAO,SAASA,UAAT,CAAoBC,GAApB,EAAmCC,OAAnC,EAAoD;AACzD,sCAAWC,aAAa,CAACF,GAAD,EAAMC,OAAN,CAAxB,IAAwCA,OAAxC;AACD;AAED,OAAO,SAASC,aAAT,CAAuBF,GAAvB,EAAsCC,OAAtC,EAAuD;AAC5D,SAAOD,GAAG,CAACG,MAAJ,CAAW,UAAAC,CAAC;AAAA,WAAIA,CAAC,KAAKH,OAAV;AAAA,GAAZ,CAAP;AACD;AAED,OAAO,SAASI,QAAT,CAAkBC,GAAlB,EAA+CC,EAA/C,EAA2DN,OAA3D,EAA4E;AACjF,2BACKK,GADL,sBAEGC,EAFH,EAEQN,OAFR;AAID;AAED,OAAO,SAASO,WAAT,CAAqBF,GAArB,EAAkDC,EAAlD,EAA8D;AACnE,MAAME,MAAM,qBAAQH,GAAR,CAAZ;;AACA,SAAOG,MAAM,CAACF,EAAD,CAAb;AACA,SAAOE,MAAP;AACD","sourcesContent":["// Pseudo Set and Map helpers. They exist because we are storing them in LS\n// and they get converted to regular objects and arrays\n\nexport function addElement(set: string[], element: string) {\n  return [...removeElement(set, element), element]\n}\n\nexport function removeElement(set: string[], element: string) {\n  return set.filter(x => x !== element)\n}\n\nexport function addEntry(map: Record<string, string>, id: string, element: string) {\n  return {\n    ...map,\n    [id]: element\n  }\n}\n\nexport function removeEntry(map: Record<string, string>, id: string) {\n  const newMap = { ...map }\n  delete newMap[id]\n  return newMap\n}\n"]},"metadata":{},"sourceType":"module"}