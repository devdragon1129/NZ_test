{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTransaction = void 0;\n\nvar eth_1 = require(\"web3x/eth\");\n\nvar address_1 = require(\"web3x/address\");\n\nvar eth_2 = require(\"../../lib/eth\");\n\nvar types_1 = require(\"./types\");\n\nfunction getTransaction(address, chainId, hash) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var provider, eth, currentNonce, response, _tx2, _tx3, _tx, receipt, _tx4, tx;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return eth_2.getNetworkProvider(chainId);\n\n          case 2:\n            provider = _context.sent;\n\n            if (provider) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 5:\n            eth = new eth_1.Eth(provider);\n\n            if (address) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 8:\n            currentNonce = null;\n            _context.prev = 9;\n            _context.next = 12;\n            return eth.getTransactionCount(address_1.Address.fromString(address));\n\n          case 12:\n            currentNonce = _context.sent;\n            _context.next = 18;\n            break;\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](9);\n            console.warn(\"Could not get current nonce for account \\\"\".concat(address, \"\\\"\"), _context.t0.message);\n\n          case 18:\n            response = null;\n            _context.prev = 19;\n            _context.next = 22;\n            return eth.getTransaction(hash);\n\n          case 22:\n            response = _context.sent;\n            _context.next = 28;\n            break;\n\n          case 25:\n            _context.prev = 25;\n            _context.t1 = _context[\"catch\"](19);\n            console.warn(\"Could not get transaction for hash \\\"\".concat(hash, \"\\\"\"), _context.t1.message);\n\n          case 28:\n            if (!(response == null)) {\n              _context.next = 30;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 30:\n            if (!(response.blockNumber == null)) {\n              _context.next = 40;\n              break;\n            }\n\n            if (!(currentNonce != null)) {\n              _context.next = 38;\n              break;\n            }\n\n            if (!(response.nonce < currentNonce)) {\n              _context.next = 35;\n              break;\n            }\n\n            _tx2 = {\n              hash: hash,\n              status: types_1.TransactionStatus.REPLACED,\n              nonce: response.nonce\n            };\n            return _context.abrupt(\"return\", _tx2);\n\n          case 35:\n            if (!(response.nonce > currentNonce)) {\n              _context.next = 38;\n              break;\n            }\n\n            _tx3 = {\n              hash: hash,\n              status: types_1.TransactionStatus.QUEUED,\n              nonce: response.nonce\n            };\n            return _context.abrupt(\"return\", _tx3);\n\n          case 38:\n            // pending\n            _tx = Object.assign({\n              status: types_1.TransactionStatus.PENDING\n            }, response);\n            return _context.abrupt(\"return\", _tx);\n\n          case 40:\n            _context.next = 42;\n            return eth.getTransactionReceipt(hash);\n\n          case 42:\n            receipt = _context.sent;\n\n            if (!(receipt == null || !receipt.status)) {\n              _context.next = 46;\n              break;\n            }\n\n            _tx4 = Object.assign({\n              status: types_1.TransactionStatus.REVERTED\n            }, response);\n            return _context.abrupt(\"return\", _tx4);\n\n          case 46:\n            // confirmed\n            tx = Object.assign(Object.assign({\n              status: types_1.TransactionStatus.CONFIRMED\n            }, response), {\n              receipt: receipt\n            });\n            return _context.abrupt(\"return\", tx);\n\n          case 48:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[9, 15], [19, 25]]);\n  }));\n}\n\nexports.getTransaction = getTransaction;","map":null,"metadata":{},"sourceType":"script"}