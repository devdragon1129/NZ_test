{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/SceneStats/SceneStats.tsx\";\nimport * as React from 'react';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { formatTime } from 'lib/date';\nimport Stats from './Stats';\nimport { Loader } from 'decentraland-ui';\n\nvar SceneStats = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(SceneStats, _React$PureComponent);\n\n  function SceneStats() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SceneStats);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SceneStats)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.fetchStats = function (base) {\n      var _this$props = _this.props,\n          stats = _this$props.stats,\n          isLoading = _this$props.isLoading,\n          onFetchStats = _this$props.onFetchStats;\n\n      if (!stats && !isLoading) {\n        onFetchStats(base);\n      }\n    };\n\n    _this.renderValue = function (value) {\n      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';\n      var isLoading = _this.props.isLoading;\n      return !value && isLoading ? /*#__PURE__*/React.createElement(Loader, {\n        active: true,\n        size: \"mini\",\n        __self: _assertThisInitialized(_assertThisInitialized(_this)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 34\n        }\n      }) : value ? value : defaultValue;\n    };\n\n    return _this;\n  }\n\n  _createClass(SceneStats, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.fetchStats(this.props.deployment.base);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.deployment.base !== this.props.deployment.base) {\n        this.fetchStats(nextProps.deployment.base);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var stats = this.props.stats;\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Stats, {\n        label: t('analytics.users'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }\n      }, this.renderValue(stats && stats.users.toLocaleString())), /*#__PURE__*/React.createElement(Stats, {\n        label: t('analytics.sessions'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }\n      }, this.renderValue(stats && stats.sessions.toLocaleString())), /*#__PURE__*/React.createElement(Stats, {\n        label: t('analytics.median_session_time'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }\n      }, this.renderValue(stats && formatTime(stats.medianSessionTime), '0s')), /*#__PURE__*/React.createElement(Stats, {\n        label: t('analytics.max_concurrent_users'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }\n      }, this.renderValue(stats && stats.maxConcurrentUsers.toLocaleString())));\n    }\n  }]);\n\n  return SceneStats;\n}(React.PureComponent);\n\nexport { SceneStats as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/SceneStats/SceneStats.tsx"],"names":["React","t","formatTime","Stats","Loader","SceneStats","fetchStats","base","props","stats","isLoading","onFetchStats","renderValue","value","defaultValue","deployment","nextProps","users","toLocaleString","sessions","medianSessionTime","maxConcurrentUsers","PureComponent"],"mappings":";;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,CAAT,QAAkB,mDAAlB;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,SAASC,MAAT,QAAuB,iBAAvB;;IAEqBC,U;;;;;;;;;;;;;;;;UAWnBC,U,GAAa,UAACC,IAAD,EAAkB;AAAA,wBACc,MAAKC,KADnB;AAAA,UACrBC,KADqB,eACrBA,KADqB;AAAA,UACdC,SADc,eACdA,SADc;AAAA,UACHC,YADG,eACHA,YADG;;AAE7B,UAAI,CAACF,KAAD,IAAU,CAACC,SAAf,EAA0B;AACxBC,QAAAA,YAAY,CAACJ,IAAD,CAAZ;AACD;AACF,K;;UAEDK,W,GAAc,UAACC,KAAD,EAAsD;AAAA,UAA/BC,YAA+B,uEAAR,GAAQ;AAAA,UAC1DJ,SAD0D,GAC5C,MAAKF,KADuC,CAC1DE,SAD0D;AAElE,aAAO,CAACG,KAAD,IAAUH,SAAV,gBAAsB,oBAAC,MAAD;AAAQ,QAAA,MAAM,MAAd;AAAe,QAAA,IAAI,EAAC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAtB,GAAsDG,KAAK,GAAGA,KAAH,GAAWC,YAA7E;AACD,K;;;;;;;yCApBoB;AACnB,WAAKR,UAAL,CAAgB,KAAKE,KAAL,CAAWO,UAAX,CAAsBR,IAAtC;AACD;;;8CAEyBS,S,EAAkB;AAC1C,UAAIA,SAAS,CAACD,UAAV,CAAqBR,IAArB,KAA8B,KAAKC,KAAL,CAAWO,UAAX,CAAsBR,IAAxD,EAA8D;AAC5D,aAAKD,UAAL,CAAgBU,SAAS,CAACD,UAAV,CAAqBR,IAArC;AACD;AACF;;;6BAcQ;AAAA,UACCE,KADD,GACW,KAAKD,KADhB,CACCC,KADD;AAEP,0BACE,uDACE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAER,CAAC,CAAC,iBAAD,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqC,KAAKW,WAAL,CAAiBH,KAAK,IAAIA,KAAK,CAACQ,KAAN,CAAYC,cAAZ,EAA1B,CAArC,CADF,eAEE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEjB,CAAC,CAAC,oBAAD,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwC,KAAKW,WAAL,CAAiBH,KAAK,IAAIA,KAAK,CAACU,QAAN,CAAeD,cAAf,EAA1B,CAAxC,CAFF,eAGE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEjB,CAAC,CAAC,+BAAD,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmD,KAAKW,WAAL,CAAiBH,KAAK,IAAIP,UAAU,CAACO,KAAK,CAACW,iBAAP,CAApC,EAA+D,IAA/D,CAAnD,CAHF,eAIE,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAEnB,CAAC,CAAC,gCAAD,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoD,KAAKW,WAAL,CAAiBH,KAAK,IAAIA,KAAK,CAACY,kBAAN,CAAyBH,cAAzB,EAA1B,CAApD,CAJF,CADF;AAQD;;;;EAjCqClB,KAAK,CAACsB,a;;SAAzBjB,U","sourcesContent":["import * as React from 'react'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { formatTime } from 'lib/date'\nimport Stats from './Stats'\nimport { Props } from './SceneStats.types'\nimport { Loader } from 'decentraland-ui'\n\nexport default class SceneStats extends React.PureComponent<Props> {\n  componentWillMount() {\n    this.fetchStats(this.props.deployment.base)\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.deployment.base !== this.props.deployment.base) {\n      this.fetchStats(nextProps.deployment.base)\n    }\n  }\n\n  fetchStats = (base: string) => {\n    const { stats, isLoading, onFetchStats } = this.props\n    if (!stats && !isLoading) {\n      onFetchStats(base)\n    }\n  }\n\n  renderValue = (value: string | null, defaultValue: string = '0') => {\n    const { isLoading } = this.props\n    return !value && isLoading ? <Loader active size=\"mini\" /> : value ? value : defaultValue\n  }\n\n  render() {\n    const { stats } = this.props\n    return (\n      <>\n        <Stats label={t('analytics.users')}>{this.renderValue(stats && stats.users.toLocaleString())}</Stats>\n        <Stats label={t('analytics.sessions')}>{this.renderValue(stats && stats.sessions.toLocaleString())}</Stats>\n        <Stats label={t('analytics.median_session_time')}>{this.renderValue(stats && formatTime(stats.medianSessionTime), '0s')}</Stats>\n        <Stats label={t('analytics.max_concurrent_users')}>{this.renderValue(stats && stats.maxConcurrentUsers.toLocaleString())}</Stats>\n      </>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}