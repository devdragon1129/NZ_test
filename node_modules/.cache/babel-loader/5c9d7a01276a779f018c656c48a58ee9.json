{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _awaitAsyncGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\nvar _require = require('ipld-dag-pb'),\n    DAGLink = _require.DAGLink,\n    DAGNode = _require.DAGNode;\n\nvar _require2 = require('ipfs-unixfs'),\n    UnixFS = _require2.UnixFS;\n\nvar Dir = require('./dir');\n\nvar persist = require('./utils/persist');\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('./types').BlockAPI} BlockAPI\n * @typedef {import('./dir').DirProps} DirProps\n * @typedef {import('cids')} CID\n */\n\n\nvar DirFlat = /*#__PURE__*/function (_Dir) {\n  _inherits(DirFlat, _Dir);\n\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  function DirFlat(props, options) {\n    var _this3;\n\n    _classCallCheck(this, DirFlat);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(DirFlat).call(this, props, options));\n    /** @type {{ [key: string]: InProgressImportResult | Dir }} */\n\n    _this3._children = {};\n    return _this3;\n  }\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n\n\n  _createClass(DirFlat, [{\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name, value) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.cid = undefined;\n                this.size = undefined;\n                this._children[name] = value;\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function put(_x, _x2) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n    /**\n     * @param {string} name\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      return Promise.resolve(this._children[name]);\n    }\n  }, {\n    key: \"childCount\",\n    value: function childCount() {\n      return Object.keys(this._children).length;\n    }\n  }, {\n    key: \"directChildrenCount\",\n    value: function directChildrenCount() {\n      return this.childCount();\n    }\n  }, {\n    key: \"onlyChild\",\n    value: function onlyChild() {\n      return this._children[Object.keys(this._children)[0]];\n    }\n  }, {\n    key: \"eachChildSeries\",\n    value: function eachChildSeries() {\n      var _this = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var keys, i, key;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                keys = Object.keys(_this._children);\n                i = 0;\n\n              case 2:\n                if (!(i < keys.length)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                key = keys[i];\n                _context2.next = 6;\n                return {\n                  key: key,\n                  child: _this._children[key]\n                };\n\n              case 6:\n                i++;\n                _context2.next = 2;\n                break;\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    }\n    /**\n     * @param {BlockAPI} block\n     * @returns {AsyncIterable<ImportResult>}\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush(block) {\n      var _this2 = this;\n\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var children, links, i, child, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry, unixfs, node, buffer, cid, size;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                children = Object.keys(_this2._children);\n                links = [];\n                i = 0;\n\n              case 3:\n                if (!(i < children.length)) {\n                  _context3.next = 40;\n                  break;\n                }\n\n                child = _this2._children[children[i]];\n\n                if (!(child instanceof Dir)) {\n                  _context3.next = 36;\n                  break;\n                }\n\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context3.prev = 8;\n                _iterator = _asyncIterator(child.flush(block));\n\n              case 10:\n                _context3.next = 12;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 12:\n                if (!(_iteratorAbruptCompletion = !(_step = _context3.sent).done)) {\n                  _context3.next = 20;\n                  break;\n                }\n\n                entry = _step.value;\n                child = entry;\n                _context3.next = 17;\n                return child;\n\n              case 17:\n                _iteratorAbruptCompletion = false;\n                _context3.next = 10;\n                break;\n\n              case 20:\n                _context3.next = 26;\n                break;\n\n              case 22:\n                _context3.prev = 22;\n                _context3.t0 = _context3[\"catch\"](8);\n                _didIteratorError = true;\n                _iteratorError = _context3.t0;\n\n              case 26:\n                _context3.prev = 26;\n                _context3.prev = 27;\n\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context3.next = 31;\n                  break;\n                }\n\n                _context3.next = 31;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 31:\n                _context3.prev = 31;\n\n                if (!_didIteratorError) {\n                  _context3.next = 34;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 34:\n                return _context3.finish(31);\n\n              case 35:\n                return _context3.finish(26);\n\n              case 36:\n                if (child.size != null && child.cid) {\n                  links.push(new DAGLink(children[i], child.size, child.cid));\n                }\n\n              case 37:\n                i++;\n                _context3.next = 3;\n                break;\n\n              case 40:\n                unixfs = new UnixFS({\n                  type: 'directory',\n                  mtime: _this2.mtime,\n                  mode: _this2.mode\n                });\n                node = new DAGNode(unixfs.marshal(), links);\n                buffer = node.serialize();\n                _context3.next = 45;\n                return _awaitAsyncGenerator(persist(buffer, block, _this2.options));\n\n              case 45:\n                cid = _context3.sent;\n                size = buffer.length + node.Links.reduce(\n                /**\n                 * @param {number} acc\n                 * @param {DAGLink} curr\n                 */\n                function (acc, curr) {\n                  return acc + curr.Tsize;\n                }, 0);\n                _this2.cid = cid;\n                _this2.size = size;\n                _context3.next = 51;\n                return {\n                  cid: cid,\n                  unixfs: unixfs,\n                  path: _this2.path,\n                  size: size\n                };\n\n              case 51:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[8, 22, 26, 36], [27,, 31, 35]]);\n      }))();\n    }\n  }]);\n\n  return DirFlat;\n}(Dir);\n\nmodule.exports = DirFlat;","map":null,"metadata":{},"sourceType":"script"}