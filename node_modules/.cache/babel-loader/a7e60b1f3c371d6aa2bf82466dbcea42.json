{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;\n\nvar codegen_1 = require(\"./codegen\");\n\nvar names_1 = require(\"./names\");\n\nexports.keywordError = {\n  message: function message(_ref) {\n    var keyword = _ref.keyword;\n    return codegen_1.str(_templateObject || (_templateObject = _taggedTemplateLiteral([\"should pass \\\"\", \"\\\" keyword validation\"])), keyword);\n  }\n};\nexports.keyword$DataError = {\n  message: function message(_ref2) {\n    var keyword = _ref2.keyword,\n        schemaType = _ref2.schemaType;\n    return schemaType ? codegen_1.str(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\\"\", \"\\\" keyword must be \", \" ($data)\"])), keyword, schemaType) : codegen_1.str(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\\"\", \"\\\" keyword is invalid ($data)\"])), keyword);\n  }\n};\n\nfunction reportError(cxt) {\n  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.keywordError;\n  var overrideAllErrors = arguments.length > 2 ? arguments[2] : undefined;\n  var it = cxt.it;\n  var gen = it.gen,\n      compositeRule = it.compositeRule,\n      allErrors = it.allErrors;\n  var errObj = errorObjectCode(cxt, error);\n\n  if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {\n    addError(gen, errObj);\n  } else {\n    returnErrors(it, codegen_1._(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"[\", \"]\"])), errObj));\n  }\n}\n\nexports.reportError = reportError;\n\nfunction reportExtraError(cxt) {\n  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : exports.keywordError;\n  var it = cxt.it;\n  var gen = it.gen,\n      compositeRule = it.compositeRule,\n      allErrors = it.allErrors;\n  var errObj = errorObjectCode(cxt, error);\n  addError(gen, errObj);\n\n  if (!(compositeRule || allErrors)) {\n    returnErrors(it, names_1.default.vErrors);\n  }\n}\n\nexports.reportExtraError = reportExtraError;\n\nfunction resetErrorsCount(gen, errsCount) {\n  gen.assign(names_1.default.errors, errsCount);\n  gen.if(codegen_1._(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \" !== null\"])), names_1.default.vErrors), function () {\n    return gen.if(errsCount, function () {\n      return gen.assign(codegen_1._(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\", \".length\"])), names_1.default.vErrors), errsCount);\n    }, function () {\n      return gen.assign(names_1.default.vErrors, null);\n    });\n  });\n}\n\nexports.resetErrorsCount = resetErrorsCount;\n\nfunction extendErrors(_ref3) {\n  var gen = _ref3.gen,\n      keyword = _ref3.keyword,\n      schemaValue = _ref3.schemaValue,\n      data = _ref3.data,\n      errsCount = _ref3.errsCount,\n      it = _ref3.it;\n\n  /* istanbul ignore if */\n  if (errsCount === undefined) throw new Error(\"ajv implementation error\");\n  var err = gen.name(\"err\");\n  gen.forRange(\"i\", errsCount, names_1.default.errors, function (i) {\n    gen.const(err, codegen_1._(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\", \"[\", \"]\"])), names_1.default.vErrors, i));\n    gen.if(codegen_1._(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\", \".dataPath === undefined\"])), err), function () {\n      return gen.assign(codegen_1._(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"\", \".dataPath\"])), err), codegen_1.strConcat(names_1.default.dataPath, it.errorPath));\n    });\n    gen.assign(codegen_1._(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"\", \".schemaPath\"])), err), codegen_1.str(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([\"\", \"/\", \"\"])), it.errSchemaPath, keyword));\n\n    if (it.opts.verbose) {\n      gen.assign(codegen_1._(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([\"\", \".schema\"])), err), schemaValue);\n      gen.assign(codegen_1._(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral([\"\", \".data\"])), err), data);\n    }\n  });\n}\n\nexports.extendErrors = extendErrors;\n\nfunction addError(gen, errObj) {\n  var err = gen.const(\"err\", errObj);\n  gen.if(codegen_1._(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral([\"\", \" === null\"])), names_1.default.vErrors), function () {\n    return gen.assign(names_1.default.vErrors, codegen_1._(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral([\"[\", \"]\"])), err));\n  }, codegen_1._(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral([\"\", \".push(\", \")\"])), names_1.default.vErrors, err));\n  gen.code(codegen_1._(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral([\"\", \"++\"])), names_1.default.errors));\n}\n\nfunction returnErrors(it, errs) {\n  var gen = it.gen,\n      validateName = it.validateName,\n      schemaEnv = it.schemaEnv;\n\n  if (schemaEnv.$async) {\n    gen.throw(codegen_1._(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral([\"new \", \"(\", \")\"])), it.ValidationError, errs));\n  } else {\n    gen.assign(codegen_1._(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral([\"\", \".errors\"])), validateName), errs);\n    gen.return(false);\n  }\n}\n\nvar E = {\n  keyword: new codegen_1.Name(\"keyword\"),\n  schemaPath: new codegen_1.Name(\"schemaPath\"),\n  params: new codegen_1.Name(\"params\"),\n  propertyName: new codegen_1.Name(\"propertyName\"),\n  message: new codegen_1.Name(\"message\"),\n  schema: new codegen_1.Name(\"schema\"),\n  parentSchema: new codegen_1.Name(\"parentSchema\"),\n  // JTD error properties\n  instancePath: new codegen_1.Name(\"instancePath\")\n};\n\nfunction errorObjectCode(cxt, error) {\n  var _cxt$it = cxt.it,\n      createErrors = _cxt$it.createErrors,\n      opts = _cxt$it.opts;\n  if (createErrors === false) return codegen_1._(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral([\"{}\"])));\n  return (opts.jtd && !opts.ajvErrors ? jtdErrorObject : ajvErrorObject)(cxt, error);\n}\n\nfunction jtdErrorObject(cxt, _ref4) {\n  var message = _ref4.message;\n  var gen = cxt.gen,\n      keyword = cxt.keyword,\n      it = cxt.it;\n  var errorPath = it.errorPath,\n      errSchemaPath = it.errSchemaPath,\n      opts = it.opts;\n  var keyValues = [[E.instancePath, codegen_1.strConcat(names_1.default.dataPath, errorPath)], [E.schemaPath, codegen_1.str(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral([\"\", \"/\", \"\"])), errSchemaPath, keyword)]];\n\n  if (opts.messages) {\n    keyValues.push([E.message, typeof message == \"function\" ? message(cxt) : message]);\n  }\n\n  return gen.object.apply(gen, keyValues);\n}\n\nfunction ajvErrorObject(cxt, error) {\n  var gen = cxt.gen,\n      keyword = cxt.keyword,\n      data = cxt.data,\n      schemaValue = cxt.schemaValue,\n      it = cxt.it;\n  var topSchemaRef = it.topSchemaRef,\n      schemaPath = it.schemaPath,\n      errorPath = it.errorPath,\n      errSchemaPath = it.errSchemaPath,\n      propertyName = it.propertyName,\n      opts = it.opts;\n  var params = error.params,\n      message = error.message;\n  var keyValues = [[E.keyword, keyword], [names_1.default.dataPath, codegen_1.strConcat(names_1.default.dataPath, errorPath)], [E.schemaPath, codegen_1.str(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral([\"\", \"/\", \"\"])), errSchemaPath, keyword)], [E.params, typeof params == \"function\" ? params(cxt) : params || codegen_1._(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral([\"{}\"])))]];\n  if (propertyName) keyValues.push([E.propertyName, propertyName]);\n\n  if (opts.messages) {\n    keyValues.push([E.message, typeof message == \"function\" ? message(cxt) : message]);\n  }\n\n  if (opts.verbose) {\n    keyValues.push([E.schema, schemaValue], [E.parentSchema, codegen_1._(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral([\"\", \"\", \"\"])), topSchemaRef, schemaPath)], [names_1.default.data, data]);\n  }\n\n  return gen.object.apply(gen, keyValues);\n}","map":null,"metadata":{},"sourceType":"script"}