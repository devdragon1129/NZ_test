{"ast":null,"code":"import { Tools } from \"../Misc/tools\";\nimport { Color4 } from '../Maths/math.color';\nimport { Texture } from \"../Materials/Textures/texture\";\nimport { EngineStore } from \"../Engines/engineStore\";\nimport { GPUParticleSystem } from \"./gpuParticleSystem\";\nimport { ParticleSystemSet } from \"./particleSystemSet\";\nimport { ParticleSystem } from \"./particleSystem\";\nimport { WebRequest } from '../Misc/webRequest';\n/**\r\n * This class is made for on one-liner static method to help creating particle system set.\r\n */\n\nvar ParticleHelper =\n/** @class */\nfunction () {\n  function ParticleHelper() {}\n  /**\r\n   * Create a default particle system that you can tweak\r\n   * @param emitter defines the emitter to use\r\n   * @param capacity defines the system capacity (default is 500 particles)\r\n   * @param scene defines the hosting scene\r\n   * @param useGPU defines if a GPUParticleSystem must be created (default is false)\r\n   * @returns the new Particle system\r\n   */\n\n\n  ParticleHelper.CreateDefault = function (emitter, capacity, scene, useGPU) {\n    if (capacity === void 0) {\n      capacity = 500;\n    }\n\n    if (useGPU === void 0) {\n      useGPU = false;\n    }\n\n    var system;\n\n    if (useGPU) {\n      system = new GPUParticleSystem(\"default system\", {\n        capacity: capacity\n      }, scene);\n    } else {\n      system = new ParticleSystem(\"default system\", capacity, scene);\n    }\n\n    system.emitter = emitter;\n    system.particleTexture = new Texture(\"https://www.babylonjs.com/assets/Flare.png\", system.getScene());\n    system.createConeEmitter(0.1, Math.PI / 4); // Particle color\n\n    system.color1 = new Color4(1.0, 1.0, 1.0, 1.0);\n    system.color2 = new Color4(1.0, 1.0, 1.0, 1.0);\n    system.colorDead = new Color4(1.0, 1.0, 1.0, 0.0); // Particle Size\n\n    system.minSize = 0.1;\n    system.maxSize = 0.1; // Emission speed\n\n    system.minEmitPower = 2;\n    system.maxEmitPower = 2; // Update speed\n\n    system.updateSpeed = 1 / 60;\n    system.emitRate = 30;\n    return system;\n  };\n  /**\r\n   * This is the main static method (one-liner) of this helper to create different particle systems\r\n   * @param type This string represents the type to the particle system to create\r\n   * @param scene The scene where the particle system should live\r\n   * @param gpu If the system will use gpu\r\n   * @returns the ParticleSystemSet created\r\n   */\n\n\n  ParticleHelper.CreateAsync = function (type, scene, gpu) {\n    if (gpu === void 0) {\n      gpu = false;\n    }\n\n    if (!scene) {\n      scene = EngineStore.LastCreatedScene;\n    }\n\n    var token = {};\n\n    scene._addPendingData(token);\n\n    return new Promise(function (resolve, reject) {\n      if (gpu && !GPUParticleSystem.IsSupported) {\n        scene._removePendingData(token);\n\n        return reject(\"Particle system with GPU is not supported.\");\n      }\n\n      Tools.LoadFile(ParticleHelper.BaseAssetsUrl + \"/systems/\" + type + \".json\", function (data) {\n        scene._removePendingData(token);\n\n        var newData = JSON.parse(data.toString());\n        return resolve(ParticleSystemSet.Parse(newData, scene, gpu));\n      }, undefined, undefined, undefined, function () {\n        scene._removePendingData(token);\n\n        return reject(\"An error occured while the creation of your particle system. Check if your type '\" + type + \"' exists.\");\n      });\n    });\n  };\n  /**\r\n   * Static function used to export a particle system to a ParticleSystemSet variable.\r\n   * Please note that the emitter shape is not exported\r\n   * @param systems defines the particle systems to export\r\n   * @returns the created particle system set\r\n   */\n\n\n  ParticleHelper.ExportSet = function (systems) {\n    var set = new ParticleSystemSet();\n\n    for (var _i = 0, systems_1 = systems; _i < systems_1.length; _i++) {\n      var system = systems_1[_i];\n      set.systems.push(system);\n    }\n\n    return set;\n  };\n  /**\r\n   * Creates a particle system from a snippet saved in a remote file\r\n   * @param name defines the name of the particle system to create (can be null or empty to use the one from the json data)\r\n   * @param url defines the url to load from\r\n   * @param scene defines the hosting scene\r\n   * @param gpu If the system will use gpu\r\n   * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n   * @returns a promise that will resolve to the new particle system\r\n   */\n\n\n  ParticleHelper.ParseFromFileAsync = function (name, url, scene, gpu, rootUrl) {\n    if (gpu === void 0) {\n      gpu = false;\n    }\n\n    if (rootUrl === void 0) {\n      rootUrl = \"\";\n    }\n\n    return new Promise(function (resolve, reject) {\n      var request = new WebRequest();\n      request.addEventListener(\"readystatechange\", function () {\n        if (request.readyState == 4) {\n          if (request.status == 200) {\n            var serializationObject = JSON.parse(request.responseText);\n            var output = void 0;\n\n            if (gpu) {\n              output = GPUParticleSystem.Parse(serializationObject, scene, rootUrl);\n            } else {\n              output = ParticleSystem.Parse(serializationObject, scene, rootUrl);\n            }\n\n            if (name) {\n              output.name = name;\n            }\n\n            resolve(output);\n          } else {\n            reject(\"Unable to load the particle system\");\n          }\n        }\n      });\n      request.open(\"GET\", url);\n      request.send();\n    });\n  };\n  /**\r\n   * Creates a particle system from a snippet saved by the particle system editor\r\n   * @param snippetId defines the snippet to load (can be set to _BLANK to create a default one)\r\n   * @param scene defines the hosting scene\r\n   * @param gpu If the system will use gpu\r\n   * @param rootUrl defines the root URL to use to load textures and relative dependencies\r\n   * @returns a promise that will resolve to the new particle system\r\n   */\n\n\n  ParticleHelper.CreateFromSnippetAsync = function (snippetId, scene, gpu, rootUrl) {\n    var _this = this;\n\n    if (gpu === void 0) {\n      gpu = false;\n    }\n\n    if (rootUrl === void 0) {\n      rootUrl = \"\";\n    }\n\n    if (snippetId === \"_BLANK\") {\n      var system = this.CreateDefault(null);\n      system.start();\n      return Promise.resolve(system);\n    }\n\n    return new Promise(function (resolve, reject) {\n      var request = new WebRequest();\n      request.addEventListener(\"readystatechange\", function () {\n        if (request.readyState == 4) {\n          if (request.status == 200) {\n            var snippet = JSON.parse(JSON.parse(request.responseText).jsonPayload);\n            var serializationObject = JSON.parse(snippet.particleSystem);\n            var output = void 0;\n\n            if (gpu) {\n              output = GPUParticleSystem.Parse(serializationObject, scene, rootUrl);\n            } else {\n              output = ParticleSystem.Parse(serializationObject, scene, rootUrl);\n            }\n\n            output.snippetId = snippetId;\n            resolve(output);\n          } else {\n            reject(\"Unable to load the snippet \" + snippetId);\n          }\n        }\n      });\n      request.open(\"GET\", _this.SnippetUrl + \"/\" + snippetId.replace(/#/g, \"/\"));\n      request.send();\n    });\n  };\n  /**\r\n   * Gets or sets base Assets URL\r\n   */\n\n\n  ParticleHelper.BaseAssetsUrl = ParticleSystemSet.BaseAssetsUrl;\n  /** Define the Url to load snippets */\n\n  ParticleHelper.SnippetUrl = \"https://snippet.babylonjs.com\";\n  return ParticleHelper;\n}();\n\nexport { ParticleHelper };","map":null,"metadata":{},"sourceType":"module"}