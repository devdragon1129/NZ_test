{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar window_1 = __importDefault(require(\"./window\"));\n\nvar Variant_1 = require(\"./Variant\");\n\nexports.PERSIST_KEY = 'dcl_experiments';\n\nvar Experiments =\n/** @class */\nfunction () {\n  /**\n   * @param experiments - list of experiment running\n   * @param _storage - to persist the same result for the user\n   * @param _analytics - segment api\n   */\n  function Experiments(experiments, _storage, _analytics) {\n    var _this = this;\n\n    this.experiments = experiments;\n    this._storage = _storage;\n    this._analytics = _analytics;\n    /**\n     * Semaphore to handle localStorage or sessionStorage changes\n     */\n\n    this.localStorageChange = false;\n    /**\n     * list of active experiments\n     */\n\n    this.activeExperiments = new Set();\n    /**\n     * previous resolved variants\n     */\n\n    this.variantForExperiments = new Map();\n\n    this.handleStorageChange = function () {\n      if (_this.localStorageChange) {\n        _this.localStorageChange = false;\n      } else {\n        _this.loadPersisted();\n      }\n    };\n\n    this.handleTrackEvent = function (name, properties) {\n      if (properties === void 0) {\n        properties = {};\n      }\n\n      _this.emit({\n        type: 'track',\n        name: name,\n        properties: properties\n      });\n    };\n\n    if (this.analytics) {\n      this.analytics.on('track', this.handleTrackEvent);\n    } else {\n      console.warn(\"Analytics is not present in the project, experiments framework will not generate any report. Follow this guide to include it: https://segment.com/docs/sources/website/analytics.js/quickstart/\");\n    }\n\n    this.loadPersisted();\n\n    if (this.isBrowserStorage()) {\n      window_1.default.addEventListener('storage', this.handleStorageChange);\n    }\n  }\n\n  Object.defineProperty(Experiments.prototype, \"storage\", {\n    get: function get() {\n      return this._storage || window_1.default.localStorage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Experiments.prototype, \"analytics\", {\n    get: function get() {\n      return this._analytics || window_1.default.analytics || null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Persist methods\n   */\n\n  Experiments.prototype.persist = function () {\n    if (this.isBrowserStorage()) {\n      this.localStorageChange = true;\n    }\n\n    var entries = Array.from(this.variantForExperiments.entries());\n    this.storage.setItem(exports.PERSIST_KEY, JSON.stringify(entries));\n  };\n\n  Experiments.prototype.persistVariant = function (experimentName, variantName) {\n    if (this.variantForExperiments.get(experimentName) !== variantName) {\n      this.variantForExperiments.set(experimentName, variantName);\n      this.persist();\n    }\n  };\n\n  Experiments.prototype.loadPersisted = function () {\n    var e_1, _a;\n\n    var persisted = this.storage.getItem(exports.PERSIST_KEY);\n\n    if (persisted) {\n      try {\n        var entries = JSON.parse(persisted);\n\n        if (Array.isArray(entries)) {\n          try {\n            for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {\n              var entry = entries_1_1.value;\n\n              if (Array.isArray(entry) && entry.length === 2) {\n                var _b = __read(entry, 2),\n                    key = _b[0],\n                    value = _b[1];\n\n                this.variantForExperiments.set(key, value);\n              }\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n        }\n      } catch (err) {\n        console.error(\"Persisted experiments cannot be loaded: \", err, persisted);\n      }\n    }\n  };\n\n  Experiments.prototype.isBrowserStorage = function () {\n    return this.storage === window_1.default.localStorage || this.storage === window_1.default.sessionStorage;\n  };\n  /**\n   * Event tracking methods\n   */\n\n\n  Experiments.prototype.emit = function (event) {\n    var e_2, _a;\n\n    if (this.activeExperiments.size > 0) {\n      try {\n        for (var _b = __values(this.activeExperiments.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var experiment = _c.value;\n\n          try {\n            // Execute track safely\n            experiment.track(event);\n          } catch (err) {\n            experiment.setState({\n              error_message: err.message\n            });\n            experiment.complete();\n            console.error(\"Error executing track method of \\\"\" + experiment.name + \"\\\": \", err, experiment);\n          }\n\n          this.checkCompleteExperiment(experiment);\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n  }; // handlePageEvent = (name: string, properties: any) => {\n  //   this.emit('page', name, properties)\n  // }\n  // handleIdentifyEvent = (name: string, properties: any) => {\n  //   this.emit('identify', name, properties)\n  // }\n\n  /**\n   * report experiment methods\n   */\n\n\n  Experiments.prototype.activateExperiment = function (experiment) {\n    var persistedVariant = this.variantForExperiments.get(experiment.name);\n\n    try {\n      // Execute activate safely\n      experiment.activate(persistedVariant);\n    } catch (err) {\n      experiment.complete();\n      console.error(\"Error executing activate method of \\\"\" + experiment.name + \"\\\": \", err, experiment);\n    }\n\n    if (experiment.isActive()) {\n      this.persistVariant(experiment.name, experiment.variant.name);\n      this.activeExperiments.add(experiment);\n\n      if (this.analytics && experiment.variant !== Variant_1.EmptyVariant) {\n        this.analytics.track('experiment_show', {\n          experiment: experiment.name,\n          variation: experiment.variant.name\n        });\n      }\n    }\n  };\n\n  Experiments.prototype.checkCompleteExperiment = function (experiment) {\n    if (experiment.isCompleted()) {\n      this.activeExperiments.delete(experiment);\n\n      if (this.analytics) {\n        var experimentState = experiment.state;\n        this.analytics.track('experiment_conversion', __assign({\n          experiment: experiment.name,\n          variation: experiment.variant.name\n        }, experimentState));\n      }\n    }\n  };\n  /**\n   * return instance of a experiment by id\n   */\n\n\n  Experiments.prototype.getExperiment = function (experimentId) {\n    return this.experiments && this.experiments[experimentId];\n  };\n  /**\n   * if there are any experiment active for `experimentId` return the testing value\n   * otherwise return `defaultValue`\n   */\n\n\n  Experiments.prototype.getCurrentValueFor = function (experimentId, defaultValue) {\n    if (this.experiments && this.experiments[experimentId]) {\n      var experiment = this.experiments[experimentId];\n\n      if (!experiment.isActive()) {\n        this.activateExperiment(experiment);\n      }\n\n      if (experiment.value !== undefined) {\n        return experiment.value;\n      }\n    }\n\n    return defaultValue;\n  };\n  /**\n   * return an array with all values available for `experimentId`\n   */\n\n\n  Experiments.prototype.getAllValuesFor = function (experimentId) {\n    if (this.experiments && this.experiments[experimentId]) {\n      var experiment = this.experiments[experimentId];\n      return experiment.getAllVariants().map(function (variant) {\n        return variant.value;\n      }).filter(function (value) {\n        return value !== undefined;\n      });\n    }\n\n    return [];\n  };\n  /**\n   * detach all experiments from segment events\n   */\n\n\n  Experiments.prototype.detach = function () {\n    var analytics = this.analytics;\n\n    if (analytics) {\n      analytics.off('track', this.handleTrackEvent);\n    }\n\n    if (this.isBrowserStorage()) {\n      window_1.default.removeEventListener('storage', this.handleStorageChange);\n    }\n  };\n\n  return Experiments;\n}();\n\nexports.default = Experiments;","map":null,"metadata":{},"sourceType":"script"}