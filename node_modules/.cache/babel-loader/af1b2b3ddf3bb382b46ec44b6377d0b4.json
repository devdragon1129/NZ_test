{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport JSZip from 'jszip';\nimport { saveAs } from 'file-saver';\nexport function downloadZip(_x, _x2) {\n  return _downloadZip.apply(this, arguments);\n}\n\nfunction _downloadZip() {\n  _downloadZip = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name, files) {\n    var zip, path, blob, artifact;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            zip = new JSZip();\n\n            for (path in files) {\n              blob = files[path];\n              zip.file(path, blob);\n            }\n\n            _context.next = 4;\n            return zip.generateAsync({\n              type: 'blob'\n            });\n\n          case 4:\n            artifact = _context.sent;\n            return _context.abrupt(\"return\", saveAs(artifact, \"\".concat(name, \".zip\")));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _downloadZip.apply(this, arguments);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/lib/zip.ts"],"names":["JSZip","saveAs","downloadZip","name","files","zip","path","blob","file","generateAsync","type","artifact"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,YAAvB;AAEA,gBAAsBC,WAAtB;AAAA;AAAA;;;0EAAO,iBAA2BC,IAA3B,EAAyCC,KAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,GADD,GACO,IAAIL,KAAJ,EADP;;AAEL,iBAAWM,IAAX,IAAmBF,KAAnB,EAA0B;AAClBG,cAAAA,IADkB,GACXH,KAAK,CAACE,IAAD,CADM;AAExBD,cAAAA,GAAG,CAACG,IAAJ,CAASF,IAAT,EAAeC,IAAf;AACD;;AALI;AAAA,mBAMwBF,GAAG,CAACI,aAAJ,CAAkB;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAAlB,CANxB;;AAAA;AAMCC,YAAAA,QAND;AAAA,6CAOEV,MAAM,CAACU,QAAD,YAAcR,IAAd,UAPR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import JSZip from 'jszip'\nimport { saveAs } from 'file-saver'\n\nexport async function downloadZip(name: string, files: Record<string, Blob | string>) {\n  const zip = new JSZip()\n  for (const path in files) {\n    const blob = files[path]\n    zip.file(path, blob)\n  }\n  const artifact: Blob = await zip.generateAsync({ type: 'blob' })\n  return saveAs(artifact, `${name}.zip`)\n}\n"]},"metadata":{},"sourceType":"module"}