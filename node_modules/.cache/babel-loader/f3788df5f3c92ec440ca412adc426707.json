{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { createSelector } from 'reselect';\nimport { ComponentType } from 'modules/scene/types';\nimport { getEntities, getComponents } from 'modules/scene/selectors';\nimport { getCurrentProject, getLoading as getLoadingProject } from 'modules/project/selectors';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { LOAD_MANIFEST_REQUEST } from 'modules/project/actions';\nimport { getData as getAssets } from 'modules/asset/selectors';\nimport { getData } from 'modules/item/selectors';\nimport { getSelectedCollectionId, isReviewing } from 'modules/location/selectors';\nimport { FETCH_BASE_WEARABLES_REQUEST } from './actions';\n\nvar getLoading = function getLoading(state) {\n  return getState(state).loading;\n};\n\nexport var getState = function getState(state) {\n  return state.editor;\n};\nexport var getGizmo = function getGizmo(state) {\n  return getState(state).gizmo;\n};\nexport var isSidebarOpen = function isSidebarOpen(state) {\n  return getState(state).sidebar;\n};\nexport var isPreviewing = function isPreviewing(state) {\n  return getState(state).preview;\n};\nexport var isSnapToGridEnabled = function isSnapToGridEnabled(state) {\n  return getState(state).snapToGrid;\n};\nexport var isMultiselectEnabled = function isMultiselectEnabled(state) {\n  return getState(state).multiselectionEnabled;\n};\nexport var getSelectedEntityIds = function getSelectedEntityIds(state) {\n  return getState(state).selectedEntityIds;\n};\nexport var isReady = function isReady(state) {\n  return getState(state).isReady;\n};\nexport var isLoading = function isLoading(state) {\n  return getState(state).isLoading;\n};\nexport var isReadOnly = function isReadOnly(state) {\n  return getState(state).isReadOnly;\n};\nexport var hasLoadedAssetPacks = function hasLoadedAssetPacks(state) {\n  return getState(state).hasLoadedAssetPacks;\n};\nexport var isScreenshotReady = function isScreenshotReady(state) {\n  return getState(state).isScreenshotReady;\n};\nexport var getEntitiesOutOfBoundaries = function getEntitiesOutOfBoundaries(state) {\n  return getState(state).entitiesOutOfBoundaries;\n};\nexport var areEntitiesOutOfBoundaries = function areEntitiesOutOfBoundaries(state) {\n  return getState(state).entitiesOutOfBoundaries.length > 0;\n};\nexport var getBodyShape = function getBodyShape(state) {\n  return getState(state).bodyShape;\n};\nexport var getEmote = function getEmote(state) {\n  return getState(state).emote;\n};\nexport var getSkinColor = function getSkinColor(state) {\n  return getState(state).skinColor;\n};\nexport var getEyeColor = function getEyeColor(state) {\n  return getState(state).eyeColor;\n};\nexport var getHairColor = function getHairColor(state) {\n  return getState(state).hairColor;\n};\nexport var getBaseWearables = function getBaseWearables(state) {\n  return getState(state).baseWearables;\n};\nexport var getSelectedBaseWearablesByBodyShape = function getSelectedBaseWearablesByBodyShape(state) {\n  return getState(state).selectedBaseWearablesByBodyShape;\n};\nexport var getSelectedBaseWearables = createSelector(getBodyShape, getSelectedBaseWearablesByBodyShape, function (bodyShape, selectedWearablesByBodyShape) {\n  return selectedWearablesByBodyShape ? selectedWearablesByBodyShape[bodyShape] : null;\n});\nexport var getFetchingBaseWearablesError = function getFetchingBaseWearablesError(state) {\n  return getState(state).fetchingBaseWearablesError;\n};\nexport var isLoadingBaseWearables = function isLoadingBaseWearables(state) {\n  return isLoadingType(getLoading(state), FETCH_BASE_WEARABLES_REQUEST) || getBaseWearables(state).length === 0 && getFetchingBaseWearablesError(state) === null;\n};\nexport var getVisibleItemIds = function getVisibleItemIds(state) {\n  return getState(state).visibleItemIds;\n};\nexport var getSceneMappings = createSelector(getAssets, function (assets) {\n  var mappings = Object.values(assets).reduce(function (mappings, asset) {\n    for (var _i = 0, _Object$keys = Object.keys(asset.contents); _i < _Object$keys.length; _i++) {\n      var path = _Object$keys[_i];\n      mappings[\"\".concat(asset.id, \"/\").concat(path)] = asset.contents[path];\n    }\n\n    return mappings;\n  }, {});\n  return mappings;\n});\nexport var getEnabledTools = createSelector(getSelectedEntityIds, getEntities, getComponents, function (selectedEntityIds, entities, components) {\n  var isNFT = false;\n\n  var _iterator = _createForOfIteratorHelper(selectedEntityIds),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var entityId = _step.value;\n      var entity = entities[entityId];\n\n      if (entity) {\n        var _iterator2 = _createForOfIteratorHelper(entity.components),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var componentId = _step2.value;\n\n            if (components[componentId].type === ComponentType.NFTShape) {\n              isNFT = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    move: selectedEntityIds.length > 0,\n    rotate: selectedEntityIds.length > 0,\n    scale: selectedEntityIds.length > 0,\n    duplicate: selectedEntityIds.length > 0 && !isNFT,\n    reset: selectedEntityIds.length > 0,\n    delete: selectedEntityIds.length > 0\n  };\n});\nexport var isFetching = createSelector(getCurrentProject, isReady, getLoadingProject, function (project, _ready, loadingProject) {\n  if (project) {\n    return false;\n  } else if (isLoadingType(loadingProject, LOAD_MANIFEST_REQUEST)) {\n    return true;\n  }\n\n  return false;\n});\nexport var getVisibleItems = createSelector(getSelectedCollectionId, isReviewing, getVisibleItemIds, getData, function (selectedCollectionId, reviewing, itemIds, itemData) {\n  return itemIds.map(function (id) {\n    return itemData[id];\n  }).filter(function (item) {\n    if (!item) {\n      return false;\n    }\n\n    if (reviewing) {\n      if (selectedCollectionId) {\n        return selectedCollectionId === item.collectionId;\n      } else {\n        return !item.collectionId;\n      }\n    } else {\n      return true;\n    }\n  });\n});","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/editor/selectors.ts"],"names":["createSelector","ComponentType","getEntities","getComponents","getCurrentProject","getLoading","getLoadingProject","isLoadingType","LOAD_MANIFEST_REQUEST","getData","getAssets","getSelectedCollectionId","isReviewing","FETCH_BASE_WEARABLES_REQUEST","state","getState","loading","editor","getGizmo","gizmo","isSidebarOpen","sidebar","isPreviewing","preview","isSnapToGridEnabled","snapToGrid","isMultiselectEnabled","multiselectionEnabled","getSelectedEntityIds","selectedEntityIds","isReady","isLoading","isReadOnly","hasLoadedAssetPacks","isScreenshotReady","getEntitiesOutOfBoundaries","entitiesOutOfBoundaries","areEntitiesOutOfBoundaries","length","getBodyShape","bodyShape","getEmote","emote","getSkinColor","skinColor","getEyeColor","eyeColor","getHairColor","hairColor","getBaseWearables","baseWearables","getSelectedBaseWearablesByBodyShape","selectedBaseWearablesByBodyShape","getSelectedBaseWearables","selectedWearablesByBodyShape","getFetchingBaseWearablesError","fetchingBaseWearablesError","isLoadingBaseWearables","getVisibleItemIds","visibleItemIds","getSceneMappings","assets","mappings","Object","values","reduce","asset","keys","contents","path","id","getEnabledTools","entities","components","isNFT","entityId","entity","componentId","type","NFTShape","move","rotate","scale","duplicate","reset","delete","isFetching","project","_ready","loadingProject","getVisibleItems","selectedCollectionId","reviewing","itemIds","itemData","map","filter","item","collectionId"],"mappings":"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","sourcesContent":["import { createSelector } from 'reselect'\nimport { Wearable } from 'decentraland-ecs'\nimport { WearableBodyShape } from '@dcl/schemas'\n\nimport { RootState } from 'modules/common/types'\nimport { ComponentType, Scene } from 'modules/scene/types'\nimport { getEntities, getComponents } from 'modules/scene/selectors'\nimport { LoadingState } from 'decentraland-dapps/dist/modules/loading/reducer'\nimport { getCurrentProject, getLoading as getLoadingProject } from 'modules/project/selectors'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { LOAD_MANIFEST_REQUEST } from 'modules/project/actions'\nimport { Project } from 'modules/project/types'\nimport { getData as getAssets } from 'modules/asset/selectors'\nimport { DataByKey } from 'decentraland-dapps/dist/lib/types'\nimport { Asset } from 'modules/asset/types'\nimport { ItemState } from 'modules/item/reducer'\nimport { getData } from 'modules/item/selectors'\nimport { Item } from 'modules/item/types'\nimport { getSelectedCollectionId, isReviewing } from 'modules/location/selectors'\nimport { SelectedBaseWearablesByBodyShape } from './types'\nimport { FETCH_BASE_WEARABLES_REQUEST } from './actions'\n\nconst getLoading = (state: RootState) => getState(state).loading\nexport const getState = (state: RootState) => state.editor\nexport const getGizmo = (state: RootState) => getState(state).gizmo\nexport const isSidebarOpen = (state: RootState) => getState(state).sidebar\nexport const isPreviewing = (state: RootState) => getState(state).preview\nexport const isSnapToGridEnabled = (state: RootState) => getState(state).snapToGrid\nexport const isMultiselectEnabled = (state: RootState) => getState(state).multiselectionEnabled\nexport const getSelectedEntityIds = (state: RootState) => getState(state).selectedEntityIds\nexport const isReady = (state: RootState) => getState(state).isReady\nexport const isLoading = (state: RootState) => getState(state).isLoading\nexport const isReadOnly = (state: RootState) => getState(state).isReadOnly\nexport const hasLoadedAssetPacks = (state: RootState) => getState(state).hasLoadedAssetPacks\nexport const isScreenshotReady = (state: RootState) => getState(state).isScreenshotReady\nexport const getEntitiesOutOfBoundaries = (state: RootState) => getState(state).entitiesOutOfBoundaries\nexport const areEntitiesOutOfBoundaries = (state: RootState) => getState(state).entitiesOutOfBoundaries.length > 0\nexport const getBodyShape = (state: RootState) => getState(state).bodyShape\nexport const getEmote = (state: RootState) => getState(state).emote\nexport const getSkinColor = (state: RootState) => getState(state).skinColor\nexport const getEyeColor = (state: RootState) => getState(state).eyeColor\nexport const getHairColor = (state: RootState) => getState(state).hairColor\nexport const getBaseWearables = (state: RootState): Wearable[] => getState(state).baseWearables\nexport const getSelectedBaseWearablesByBodyShape = (state: RootState): SelectedBaseWearablesByBodyShape | null =>\n  getState(state).selectedBaseWearablesByBodyShape\nexport const getSelectedBaseWearables = createSelector<\n  RootState,\n  WearableBodyShape,\n  SelectedBaseWearablesByBodyShape | null,\n  Record<string, Wearable | null> | null\n>(getBodyShape, getSelectedBaseWearablesByBodyShape, (bodyShape, selectedWearablesByBodyShape) =>\n  selectedWearablesByBodyShape ? selectedWearablesByBodyShape[bodyShape] : null\n)\nexport const getFetchingBaseWearablesError = (state: RootState) => getState(state).fetchingBaseWearablesError\nexport const isLoadingBaseWearables = (state: RootState): boolean =>\n  isLoadingType(getLoading(state), FETCH_BASE_WEARABLES_REQUEST) ||\n  (getBaseWearables(state).length === 0 && getFetchingBaseWearablesError(state) === null)\n\nexport const getVisibleItemIds = (state: RootState) => getState(state).visibleItemIds\nexport const getSceneMappings = createSelector<RootState, DataByKey<Asset>, Record<string, string>>(getAssets, assets => {\n  const mappings = Object.values(assets).reduce<Record<string, string>>((mappings, asset) => {\n    for (const path of Object.keys(asset.contents)) {\n      mappings[`${asset.id}/${path}`] = asset.contents[path]\n    }\n    return mappings\n  }, {})\n  return mappings\n})\n\nexport const getEnabledTools = createSelector<\n  RootState,\n  string[],\n  Scene['entities'],\n  Scene['components'],\n  { move: boolean; rotate: boolean; duplicate: boolean; reset: boolean; delete: boolean }\n>(getSelectedEntityIds, getEntities, getComponents, (selectedEntityIds, entities, components) => {\n  let isNFT = false\n\n  for (let entityId of selectedEntityIds) {\n    const entity = entities[entityId]\n    if (entity) {\n      for (let componentId of entity.components) {\n        if (components[componentId].type === ComponentType.NFTShape) {\n          isNFT = true\n          break\n        }\n      }\n    }\n  }\n\n  return {\n    move: selectedEntityIds.length > 0,\n    rotate: selectedEntityIds.length > 0,\n    scale: selectedEntityIds.length > 0,\n    duplicate: selectedEntityIds.length > 0 && !isNFT,\n    reset: selectedEntityIds.length > 0,\n    delete: selectedEntityIds.length > 0\n  }\n})\n\nexport const isFetching = createSelector<RootState, Project | null, boolean, LoadingState, boolean>(\n  getCurrentProject,\n  isReady,\n  getLoadingProject,\n  (project, _ready, loadingProject) => {\n    if (project) {\n      return false\n    } else if (isLoadingType(loadingProject, LOAD_MANIFEST_REQUEST)) {\n      return true\n    }\n    return false\n  }\n)\n\nexport const getVisibleItems = createSelector<RootState, string | null, boolean, string[], ItemState['data'], Item[]>(\n  getSelectedCollectionId,\n  isReviewing,\n  getVisibleItemIds,\n  getData,\n  (selectedCollectionId, reviewing, itemIds, itemData) =>\n    itemIds\n      .map(id => itemData[id])\n      .filter(item => {\n        if (!item) {\n          return false\n        }\n        if (reviewing) {\n          if (selectedCollectionId) {\n            return selectedCollectionId === item.collectionId\n          } else {\n            return !item.collectionId\n          }\n        } else {\n          return true\n        }\n      })\n)\n"]},"metadata":{},"sourceType":"module"}