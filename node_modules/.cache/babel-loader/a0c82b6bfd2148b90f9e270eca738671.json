{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../../Misc/typeStore';\nimport { PointLight } from '../../../../Lights/pointLight';\n/**\r\n * Block used to get data information from a light\r\n */\n\nvar LightInformationBlock =\n/** @class */\nfunction (_super) {\n  __extends(LightInformationBlock, _super);\n  /**\r\n   * Creates a new LightInformationBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function LightInformationBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Vertex) || this;\n\n    _this.registerInput(\"worldPosition\", NodeMaterialBlockConnectionPointTypes.Vector4, false, NodeMaterialBlockTargets.Vertex);\n\n    _this.registerOutput(\"direction\", NodeMaterialBlockConnectionPointTypes.Vector3);\n\n    _this.registerOutput(\"color\", NodeMaterialBlockConnectionPointTypes.Color3);\n\n    _this.registerOutput(\"intensity\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  LightInformationBlock.prototype.getClassName = function () {\n    return \"LightInformationBlock\";\n  };\n\n  Object.defineProperty(LightInformationBlock.prototype, \"worldPosition\", {\n    /**\r\n     * Gets the world position input component\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightInformationBlock.prototype, \"direction\", {\n    /**\r\n     * Gets the direction output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightInformationBlock.prototype, \"color\", {\n    /**\r\n     * Gets the direction output component\r\n     */\n    get: function get() {\n      return this._outputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LightInformationBlock.prototype, \"intensity\", {\n    /**\r\n    * Gets the direction output component\r\n    */\n    get: function get() {\n      return this._outputs[2];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  LightInformationBlock.prototype.bind = function (effect, nodeMaterial, mesh) {\n    if (!mesh) {\n      return;\n    }\n\n    if (this.light && this.light.isDisposed) {\n      this.light = null;\n    }\n\n    var light = this.light;\n    var scene = nodeMaterial.getScene();\n\n    if (!light && scene.lights.length) {\n      light = scene.lights[0];\n    }\n\n    if (!light || !light.isEnabled) {\n      effect.setFloat3(this._lightDataUniformName, 0, 0, 0);\n      effect.setFloat4(this._lightColorUniformName, 0, 0, 0, 0);\n      return;\n    }\n\n    light.transferToNodeMaterialEffect(effect, this._lightDataUniformName);\n    effect.setColor4(this._lightColorUniformName, light.diffuse, light.intensity);\n  };\n\n  LightInformationBlock.prototype.prepareDefines = function (mesh, nodeMaterial, defines) {\n    if (!defines._areLightsDirty) {\n      return;\n    }\n\n    var light = this.light;\n    defines.setValue(this._lightTypeDefineName, light && light instanceof PointLight ? true : false);\n  };\n\n  LightInformationBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    state.sharedData.bindableBlocks.push(this);\n    state.sharedData.blocksWithDefines.push(this);\n    var direction = this.direction;\n    var color = this.color;\n    var intensity = this.intensity;\n    this._lightDataUniformName = state._getFreeVariableName(\"lightData\");\n    this._lightColorUniformName = state._getFreeVariableName(\"lightColor\");\n    this._lightTypeDefineName = state._getFreeDefineName(\"LIGHTPOINTTYPE\");\n\n    state._emitUniformFromString(this._lightDataUniformName, \"vec3\");\n\n    state._emitUniformFromString(this._lightColorUniformName, \"vec4\");\n\n    state.compilationString += \"#ifdef \" + this._lightTypeDefineName + \"\\r\\n\";\n    state.compilationString += this._declareOutput(direction, state) + (\" = normalize(\" + this.worldPosition.associatedVariableName + \".xyz - \" + this._lightDataUniformName + \");\\r\\n\");\n    state.compilationString += \"#else\\r\\n\";\n    state.compilationString += this._declareOutput(direction, state) + (\" = \" + this._lightDataUniformName + \";\\r\\n\");\n    state.compilationString += \"#endif\\r\\n\";\n    state.compilationString += this._declareOutput(color, state) + (\" = \" + this._lightColorUniformName + \".rgb;\\r\\n\");\n    state.compilationString += this._declareOutput(intensity, state) + (\" = \" + this._lightColorUniformName + \".a;\\r\\n\");\n    return this;\n  };\n\n  LightInformationBlock.prototype.serialize = function () {\n    var serializationObject = _super.prototype.serialize.call(this);\n\n    if (this.light) {\n      serializationObject.lightId = this.light.id;\n    }\n\n    return serializationObject;\n  };\n\n  LightInformationBlock.prototype._deserialize = function (serializationObject, scene, rootUrl) {\n    _super.prototype._deserialize.call(this, serializationObject, scene, rootUrl);\n\n    if (serializationObject.lightId) {\n      this.light = scene.getLightByID(serializationObject.lightId);\n    }\n  };\n\n  return LightInformationBlock;\n}(NodeMaterialBlock);\n\nexport { LightInformationBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.LightInformationBlock\"] = LightInformationBlock;","map":null,"metadata":{},"sourceType":"module"}