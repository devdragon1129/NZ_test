{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/blackAndWhite.fragment\";\nimport { _TypeStore } from '../Misc/typeStore';\nimport { serialize, SerializationHelper } from '../Misc/decorators';\n/**\r\n * Post process used to render in black and white\r\n */\n\nvar BlackAndWhitePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(BlackAndWhitePostProcess, _super);\n  /**\r\n   * Creates a black and white post process\r\n   * @see https://doc.babylonjs.com/how_to/how_to_use_postprocesses#black-and-white\r\n   * @param name The name of the effect.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   */\n\n\n  function BlackAndWhitePostProcess(name, options, camera, samplingMode, engine, reusable) {\n    var _this = _super.call(this, name, \"blackAndWhite\", [\"degree\"], null, options, camera, samplingMode, engine, reusable) || this;\n    /**\r\n     * Linear about to convert he result to black and white (default: 1)\r\n     */\n\n\n    _this.degree = 1;\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setFloat(\"degree\", _this.degree);\n    });\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"BlackAndWhitePostProcess\" string\r\n   */\n\n\n  BlackAndWhitePostProcess.prototype.getClassName = function () {\n    return \"BlackAndWhitePostProcess\";\n  };\n  /** @hidden */\n\n\n  BlackAndWhitePostProcess._Parse = function (parsedPostProcess, targetCamera, scene, rootUrl) {\n    return SerializationHelper.Parse(function () {\n      return new BlackAndWhitePostProcess(parsedPostProcess.name, parsedPostProcess.options, targetCamera, parsedPostProcess.renderTargetSamplingMode, scene.getEngine(), parsedPostProcess.reusable);\n    }, parsedPostProcess, scene, rootUrl);\n  };\n\n  __decorate([serialize()], BlackAndWhitePostProcess.prototype, \"degree\", void 0);\n\n  return BlackAndWhitePostProcess;\n}(PostProcess);\n\nexport { BlackAndWhitePostProcess };\n_TypeStore.RegisteredTypes[\"BABYLON.BlackAndWhitePostProcess\"] = BlackAndWhitePostProcess;","map":null,"metadata":{},"sourceType":"module"}