{"ast":null,"code":"import { Color3 } from '@babylonjs/core/Maths/math.color';\nimport { Texture } from \"@babylonjs/core/Materials/Textures/texture\";\nimport { StandardMaterial } from \"@babylonjs/core/Materials/standardMaterial\";\n/**\r\n * Class reading and parsing the MTL file bundled with the obj file.\r\n */\n\nvar MTLFileLoader =\n/** @class */\nfunction () {\n  function MTLFileLoader() {\n    /**\r\n     * All material loaded from the mtl will be set here\r\n     */\n    this.materials = [];\n  }\n  /**\r\n   * This function will read the mtl file and create each material described inside\r\n   * This function could be improve by adding :\r\n   * -some component missing (Ni, Tf...)\r\n   * -including the specific options available\r\n   *\r\n   * @param scene defines the scene the material will be created in\r\n   * @param data defines the mtl data to parse\r\n   * @param rootUrl defines the rooturl to use in order to load relative dependencies\r\n   * @param forAssetContainer defines if the material should be registered in the scene\r\n   */\n\n\n  MTLFileLoader.prototype.parseMTL = function (scene, data, rootUrl, forAssetContainer) {\n    if (data instanceof ArrayBuffer) {\n      return;\n    } //Split the lines from the file\n\n\n    var lines = data.split('\\n'); //Space char\n\n    var delimiter_pattern = /\\s+/; //Array with RGB colors\n\n    var color; //New material\n\n    var material = null; //Look at each line\n\n    for (var i = 0; i < lines.length; i++) {\n      var line = lines[i].trim(); // Blank line or comment\n\n      if (line.length === 0 || line.charAt(0) === '#') {\n        continue;\n      } //Get the first parameter (keyword)\n\n\n      var pos = line.indexOf(' ');\n      var key = pos >= 0 ? line.substring(0, pos) : line;\n      key = key.toLowerCase(); //Get the data following the key\n\n      var value = pos >= 0 ? line.substring(pos + 1).trim() : \"\"; //This mtl keyword will create the new material\n\n      if (key === \"newmtl\") {\n        //Check if it is the first material.\n        // Materials specifications are described after this keyword.\n        if (material) {\n          //Add the previous material in the material array.\n          this.materials.push(material);\n        } //Create a new material.\n        // value is the name of the material read in the mtl file\n\n\n        scene._blockEntityCollection = forAssetContainer;\n        material = new StandardMaterial(value, scene);\n        scene._blockEntityCollection = false;\n      } else if (key === \"kd\" && material) {\n        // Diffuse color (color under white light) using RGB values\n        //value  = \"r g b\"\n        color = value.split(delimiter_pattern, 3).map(parseFloat); //color = [r,g,b]\n        //Set tghe color into the material\n\n        material.diffuseColor = Color3.FromArray(color);\n      } else if (key === \"ka\" && material) {\n        // Ambient color (color under shadow) using RGB values\n        //value = \"r g b\"\n        color = value.split(delimiter_pattern, 3).map(parseFloat); //color = [r,g,b]\n        //Set tghe color into the material\n\n        material.ambientColor = Color3.FromArray(color);\n      } else if (key === \"ks\" && material) {\n        // Specular color (color when light is reflected from shiny surface) using RGB values\n        //value = \"r g b\"\n        color = value.split(delimiter_pattern, 3).map(parseFloat); //color = [r,g,b]\n        //Set the color into the material\n\n        material.specularColor = Color3.FromArray(color);\n      } else if (key === \"ke\" && material) {\n        // Emissive color using RGB values\n        color = value.split(delimiter_pattern, 3).map(parseFloat);\n        material.emissiveColor = Color3.FromArray(color);\n      } else if (key === \"ns\" && material) {\n        //value = \"Integer\"\n        material.specularPower = parseFloat(value);\n      } else if (key === \"d\" && material) {\n        //d is dissolve for current material. It mean alpha for BABYLON\n        material.alpha = parseFloat(value); //Texture\n        //This part can be improved by adding the possible options of texture\n      } else if (key === \"map_ka\" && material) {\n        // ambient texture map with a loaded image\n        //We must first get the folder of the image\n        material.ambientTexture = MTLFileLoader._getTexture(rootUrl, value, scene);\n      } else if (key === \"map_kd\" && material) {\n        // Diffuse texture map with a loaded image\n        material.diffuseTexture = MTLFileLoader._getTexture(rootUrl, value, scene);\n      } else if (key === \"map_ks\" && material) {\n        // Specular texture map with a loaded image\n        //We must first get the folder of the image\n        material.specularTexture = MTLFileLoader._getTexture(rootUrl, value, scene);\n      } else if (key === \"map_ns\") {//Specular\n        //Specular highlight component\n        //We must first get the folder of the image\n        //\n        //Not supported by BABYLON\n        //\n        //    continue;\n      } else if (key === \"map_bump\" && material) {\n        //The bump texture\n        material.bumpTexture = MTLFileLoader._getTexture(rootUrl, value, scene);\n      } else if (key === \"map_d\" && material) {\n        // The dissolve of the material\n        material.opacityTexture = MTLFileLoader._getTexture(rootUrl, value, scene); //Options for illumination\n      } else if (key === \"illum\") {\n        //Illumination\n        if (value === \"0\") {//That mean Kd == Kd\n        } else if (value === \"1\") {//Color on and Ambient on\n        } else if (value === \"2\") {//Highlight on\n        } else if (value === \"3\") {//Reflection on and Ray trace on\n        } else if (value === \"4\") {//Transparency: Glass on, Reflection: Ray trace on\n        } else if (value === \"5\") {//Reflection: Fresnel on and Ray trace on\n        } else if (value === \"6\") {//Transparency: Refraction on, Reflection: Fresnel off and Ray trace on\n        } else if (value === \"7\") {//Transparency: Refraction on, Reflection: Fresnel on and Ray trace on\n        } else if (value === \"8\") {//Reflection on and Ray trace off\n        } else if (value === \"9\") {//Transparency: Glass on, Reflection: Ray trace off\n        } else if (value === \"10\") {//Casts shadows onto invisible surfaces\n        }\n      } else {// console.log(\"Unhandled expression at line : \" + i +'\\n' + \"with value : \" + line);\n      }\n    } //At the end of the file, add the last material\n\n\n    if (material) {\n      this.materials.push(material);\n    }\n  };\n  /**\r\n   * Gets the texture for the material.\r\n   *\r\n   * If the material is imported from input file,\r\n   * We sanitize the url to ensure it takes the textre from aside the material.\r\n   *\r\n   * @param rootUrl The root url to load from\r\n   * @param value The value stored in the mtl\r\n   * @return The Texture\r\n   */\n\n\n  MTLFileLoader._getTexture = function (rootUrl, value, scene) {\n    if (!value) {\n      return null;\n    }\n\n    var url = rootUrl; // Load from input file.\n\n    if (rootUrl === \"file:\") {\n      var lastDelimiter = value.lastIndexOf(\"\\\\\");\n\n      if (lastDelimiter === -1) {\n        lastDelimiter = value.lastIndexOf(\"/\");\n      }\n\n      if (lastDelimiter > -1) {\n        url += value.substr(lastDelimiter + 1);\n      } else {\n        url += value;\n      }\n    } // Not from input file.\n    else {\n      url += value;\n    }\n\n    return new Texture(url, scene, false, MTLFileLoader.INVERT_TEXTURE_Y);\n  };\n  /**\r\n   * Invert Y-Axis of referenced textures on load\r\n   */\n\n\n  MTLFileLoader.INVERT_TEXTURE_Y = true;\n  return MTLFileLoader;\n}();\n\nexport { MTLFileLoader };","map":null,"metadata":{},"sourceType":"module"}