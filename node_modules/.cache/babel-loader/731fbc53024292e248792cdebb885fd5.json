{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _invoke2 = _interopRequireDefault(require(\"lodash/invoke\"));\n\nvar _get2 = _interopRequireDefault(require(\"lodash/get\"));\n\nvar _reactComponentRef = require(\"@fluentui/react-component-ref\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _lib = require(\"../../lib\");\n/**\n * A TextArea can be used to allow for extended user input.\n * @see Form\n */\n\n\nvar TextArea = /*#__PURE__*/function (_Component) {\n  (0, _inheritsLoose2.default)(TextArea, _Component);\n\n  function TextArea() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n    _this.ref = /*#__PURE__*/(0, _react.createRef)();\n\n    _this.focus = function () {\n      return _this.ref.current.focus();\n    };\n\n    _this.handleChange = function (e) {\n      var value = (0, _get2.default)(e, 'target.value');\n      (0, _invoke2.default)(_this.props, 'onChange', e, (0, _extends2.default)({}, _this.props, {\n        value: value\n      }));\n    };\n\n    _this.handleInput = function (e) {\n      var value = (0, _get2.default)(e, 'target.value');\n      (0, _invoke2.default)(_this.props, 'onInput', e, (0, _extends2.default)({}, _this.props, {\n        value: value\n      }));\n    };\n\n    return _this;\n  }\n\n  var _proto = TextArea.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        rows = _this$props.rows,\n        value = _this$props.value;\n    var rest = (0, _lib.getUnhandledProps)(TextArea, this.props);\n    var ElementType = (0, _lib.getElementType)(TextArea, this.props);\n    return /*#__PURE__*/_react.default.createElement(_reactComponentRef.Ref, {\n      innerRef: this.ref\n    }, /*#__PURE__*/_react.default.createElement(ElementType, (0, _extends2.default)({}, rest, {\n      onChange: this.handleChange,\n      onInput: this.handleInput,\n      rows: rows,\n      value: value\n    })));\n  };\n\n  return TextArea;\n}(_react.Component);\n\nTextArea.handledProps = [\"as\", \"onChange\", \"onInput\", \"rows\", \"value\"];\nTextArea.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: _propTypes.default.elementType,\n\n  /**\n   * Called on change.\n   * @param {SyntheticEvent} event - The React SyntheticEvent object\n   * @param {object} data - All props and the event value.\n   */\n  onChange: _propTypes.default.func,\n\n  /**\n   * Called on input.\n   * @param {SyntheticEvent} event - The React SyntheticEvent object\n   * @param {object} data - All props and the event value.\n   */\n  onInput: _propTypes.default.func,\n\n  /** Indicates row count for a TextArea. */\n  rows: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),\n\n  /** The value of the textarea. */\n  value: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])\n} : {};\nTextArea.defaultProps = {\n  as: 'textarea',\n  rows: 3\n};\nvar _default = TextArea;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}