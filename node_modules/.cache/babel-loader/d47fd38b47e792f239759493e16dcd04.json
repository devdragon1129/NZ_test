{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport path from 'path';\nimport uuid from 'uuid';\n\nvar CID = require('cids');\n\nvar MemoryDatastore = require('interface-datastore').MemoryDatastore;\n\nvar pull = require('pull-stream');\n\nvar Importer = require('ipfs-unixfs-engine').Importer;\n\nvar toBuffer = require('blob-to-buffer');\n\nimport { DeploymentStatus } from './types';\nimport { ComponentType } from 'modules/scene/types';\nimport { getContentsStorageUrl } from 'lib/api/builder';\nimport { getCatalystContentUrl } from 'lib/api/peer';\nexport var UNPUBLISHED_PROJECT_ID = 'unpublished-project';\nexport var getDefaultGroundAsset = function getDefaultGroundAsset() {\n  return {\n    id: 'c9b17021-765c-4d9a-9966-ce93a9c323d1',\n    name: 'Bermuda Grass',\n    thumbnail: getContentsStorageUrl('QmexuPHcbEtQCR11dPXxKZmRjGuY4iTooPJYfST7hW71DE'),\n    model: 'FloorBaseGrass_01/FloorBaseGrass_01.glb',\n    script: null,\n    tags: ['ground'],\n    category: 'ground',\n    contents: {\n      'FloorBaseGrass_01/FloorBaseGrass_01.glb': 'QmSyvWnb5nKCaGHw9oHLSkwywvS5NYpj6vgb8L121kWveS',\n      'FloorBaseGrass_01/Floor_Grass01.png.png': 'QmT1WfQPMBVhgwyxV5SfcfWivZ6hqMCT74nxdKXwyZBiXb',\n      'FloorBaseGrass_01/thumbnail.png': 'QmexuPHcbEtQCR11dPXxKZmRjGuY4iTooPJYfST7hW71DE'\n    },\n    assetPackId: 'e6fa9601-3e47-4dff-9a84-e8e017add15a',\n    metrics: {\n      triangles: 0,\n      materials: 0,\n      meshes: 0,\n      bodies: 0,\n      entities: 0,\n      textures: 0\n    },\n    parameters: [],\n    actions: []\n  };\n};\nexport function getCID(_x, _x2) {\n  return _getCID.apply(this, arguments);\n}\n\nfunction _getCID() {\n  _getCID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(files, shareRoot) {\n    var importer;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            importer = new Importer(new MemoryDatastore(), {\n              onlyHash: true\n            });\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              pull(pull.values(files), pull.asyncMap(function (file, cb) {\n                var data = {\n                  path: shareRoot ? '/tmp/' + file.path : file.path,\n                  content: file.content\n                };\n                cb(null, data);\n              }), importer, pull.onEnd(function () {\n                return importer.flush(function (err, content) {\n                  if (err) {\n                    reject(err);\n                  }\n\n                  resolve(new CID(content).toBaseEncodedString());\n                });\n              }));\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getCID.apply(this, arguments);\n}\n\nexport function getFileManifest(_x3) {\n  return _getFileManifest.apply(this, arguments);\n}\n\nfunction _getFileManifest() {\n  _getFileManifest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(files) {\n    var result, _iterator, _step, file, fileCID;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            result = {};\n            _iterator = _createForOfIteratorHelper(files);\n            _context2.prev = 2;\n\n            _iterator.s();\n\n          case 4:\n            if ((_step = _iterator.n()).done) {\n              _context2.next = 12;\n              break;\n            }\n\n            file = _step.value;\n            _context2.next = 8;\n            return getCID([{\n              path: path.basename(file.path),\n              content: file.content,\n              size: file.size\n            }], false);\n\n          case 8:\n            fileCID = _context2.sent;\n            result[file.path] = {\n              cid: fileCID,\n              name: file.path\n            };\n\n          case 10:\n            _context2.next = 4;\n            break;\n\n          case 12:\n            _context2.next = 17;\n            break;\n\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2[\"catch\"](2);\n\n            _iterator.e(_context2.t0);\n\n          case 17:\n            _context2.prev = 17;\n\n            _iterator.f();\n\n            return _context2.finish(17);\n\n          case 20:\n            return _context2.abrupt(\"return\", result);\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[2, 14, 17, 20]]);\n  }));\n  return _getFileManifest.apply(this, arguments);\n}\n\nexport function makeContentFile(path, content) {\n  return new Promise(function (resolve, reject) {\n    if (typeof content === 'string') {\n      var buffer = Buffer.from(content);\n      resolve({\n        path: path,\n        content: buffer,\n        size: Buffer.byteLength(buffer)\n      });\n    } else if (content instanceof Blob) {\n      toBuffer(content, function (err, buffer) {\n        if (err) reject(err);\n        resolve({\n          path: path,\n          content: buffer,\n          size: Buffer.byteLength(buffer)\n        });\n      });\n    } else {\n      reject(new Error('Unable to create ContentFile: content must be a string or a Blob'));\n    }\n  });\n}\nexport function getStatus(project, deployment) {\n  if (project && deployment) {\n    var projectTimestamp = +new Date(project.updatedAt);\n    var deploymentTimestamp = +new Date(deployment.timestamp);\n    return deploymentTimestamp > projectTimestamp ? DeploymentStatus.PUBLISHED : DeploymentStatus.NEEDS_SYNC;\n  }\n\n  return DeploymentStatus.UNPUBLISHED;\n}\nexport function mergeStatuses(statuses) {\n  if (statuses.length === 0 || statuses.some(function (status) {\n    return status === DeploymentStatus.UNPUBLISHED;\n  })) {\n    return DeploymentStatus.UNPUBLISHED;\n  } else if (statuses.some(function (status) {\n    return status === DeploymentStatus.NEEDS_SYNC;\n  })) {\n    return DeploymentStatus.NEEDS_SYNC;\n  } else {\n    return DeploymentStatus.PUBLISHED;\n  }\n}\nexport function getDeployment(project, deployments) {\n  // select a deployment that needs sync, or the first one\n  return deployments.find(function (deployment) {\n    return getStatus(project, deployment) === DeploymentStatus.NEEDS_SYNC;\n  }) || deployments[0];\n}\nexport var getEmptyDeployment = function getEmptyDeployment(projectId) {\n  var sceneId = uuid.v4();\n  var project = {\n    id: projectId,\n    title: 'Empty',\n    description: '',\n    thumbnail: '',\n    isPublic: false,\n    sceneId: sceneId,\n    ethAddress: null,\n    layout: {\n      rows: 1,\n      cols: 1\n    },\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  };\n  var defaultGroundAsset = getDefaultGroundAsset();\n  var scene = {\n    id: sceneId,\n    entities: {\n      '42d414e0-5d9f-40a0-884a-e0cbac9d7e5c': {\n        id: '42d414e0-5d9f-40a0-884a-e0cbac9d7e5c',\n        components: ['25783992-5e2f-4879-b734-eda41c0cc4c0', '49c32fc6-d7f7-4dba-bc55-7a89b898594a'],\n        disableGizmos: true,\n        name: 'entity'\n      }\n    },\n    components: {\n      '25783992-5e2f-4879-b734-eda41c0cc4c0': {\n        id: '25783992-5e2f-4879-b734-eda41c0cc4c0',\n        type: ComponentType.GLTFShape,\n        data: {\n          assetId: 'c9b17021-765c-4d9a-9966-ce93a9c323d1'\n        }\n      },\n      '49c32fc6-d7f7-4dba-bc55-7a89b898594a': {\n        id: '49c32fc6-d7f7-4dba-bc55-7a89b898594a',\n        type: ComponentType.Transform,\n        data: {\n          position: {\n            x: 8,\n            y: 0,\n            z: 8\n          },\n          rotation: {\n            x: 0,\n            y: 0,\n            z: 0,\n            w: 1\n          },\n          scale: {\n            x: 1,\n            y: 1,\n            z: 1\n          }\n        }\n      }\n    },\n    assets: _defineProperty({}, defaultGroundAsset.id, defaultGroundAsset),\n    metrics: {\n      triangles: 32,\n      materials: 1,\n      meshes: 1,\n      bodies: 1,\n      entities: 1,\n      textures: 0\n    },\n    limits: {\n      triangles: 10000,\n      materials: 20,\n      meshes: 200,\n      bodies: 300,\n      entities: 200,\n      textures: 10\n    },\n    ground: {\n      assetId: 'c9b17021-765c-4d9a-9966-ce93a9c323d1',\n      componentId: '25783992-5e2f-4879-b734-eda41c0cc4c0'\n    }\n  };\n  return [project, scene];\n};\n\nfunction isUrl(maybeUrl) {\n  try {\n    new URL(maybeUrl);\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function getThumbnail(definition, content) {\n  if (!definition || !definition.display || !definition.display.navmapThumbnail) {\n    return null;\n  }\n\n  var thumbnail = definition.display.navmapThumbnail;\n\n  if (!isUrl(thumbnail) && content) {\n    var file = content.find(function (reference) {\n      return reference.file === thumbnail;\n    });\n\n    if (file) {\n      thumbnail = getCatalystContentUrl(file.hash);\n    }\n  }\n\n  return thumbnail;\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/deployment/utils.ts"],"names":["path","uuid","CID","require","MemoryDatastore","pull","Importer","toBuffer","DeploymentStatus","ComponentType","getContentsStorageUrl","getCatalystContentUrl","UNPUBLISHED_PROJECT_ID","getDefaultGroundAsset","id","name","thumbnail","model","script","tags","category","contents","assetPackId","metrics","triangles","materials","meshes","bodies","entities","textures","parameters","actions","getCID","files","shareRoot","importer","onlyHash","Promise","resolve","reject","values","asyncMap","file","cb","data","content","onEnd","flush","err","toBaseEncodedString","getFileManifest","result","basename","size","fileCID","cid","makeContentFile","buffer","Buffer","from","byteLength","Blob","Error","getStatus","project","deployment","projectTimestamp","Date","updatedAt","deploymentTimestamp","timestamp","PUBLISHED","NEEDS_SYNC","UNPUBLISHED","mergeStatuses","statuses","length","some","status","getDeployment","deployments","find","getEmptyDeployment","projectId","sceneId","v4","title","description","isPublic","ethAddress","layout","rows","cols","createdAt","toISOString","defaultGroundAsset","scene","components","disableGizmos","type","GLTFShape","assetId","Transform","position","x","y","z","rotation","w","scale","assets","limits","ground","componentId","isUrl","maybeUrl","URL","error","getThumbnail","definition","display","navmapThumbnail","reference","hash"],"mappings":"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","sourcesContent":["import path from 'path'\nimport uuid from 'uuid'\nimport { EntityContentItemReference } from 'dcl-catalyst-commons'\nconst CID = require('cids')\nconst MemoryDatastore = require('interface-datastore').MemoryDatastore\nconst pull = require('pull-stream')\nconst Importer = require('ipfs-unixfs-engine').Importer\nconst toBuffer = require('blob-to-buffer')\nimport { Asset } from 'modules/asset/types'\nimport { ContentIdentifier, ContentServiceFile, ContentManifest, Deployment, DeploymentStatus, SceneDefinition } from './types'\nimport { Project } from 'modules/project/types'\nimport { Scene, ComponentType } from 'modules/scene/types'\nimport { getContentsStorageUrl } from 'lib/api/builder'\nimport { getCatalystContentUrl } from 'lib/api/peer'\n\nexport const UNPUBLISHED_PROJECT_ID = 'unpublished-project'\n\nexport const getDefaultGroundAsset = (): Asset => ({\n  id: 'c9b17021-765c-4d9a-9966-ce93a9c323d1',\n  name: 'Bermuda Grass',\n  thumbnail: getContentsStorageUrl('QmexuPHcbEtQCR11dPXxKZmRjGuY4iTooPJYfST7hW71DE'),\n  model: 'FloorBaseGrass_01/FloorBaseGrass_01.glb',\n  script: null,\n  tags: ['ground'],\n  category: 'ground',\n  contents: {\n    'FloorBaseGrass_01/FloorBaseGrass_01.glb': 'QmSyvWnb5nKCaGHw9oHLSkwywvS5NYpj6vgb8L121kWveS',\n    'FloorBaseGrass_01/Floor_Grass01.png.png': 'QmT1WfQPMBVhgwyxV5SfcfWivZ6hqMCT74nxdKXwyZBiXb',\n    'FloorBaseGrass_01/thumbnail.png': 'QmexuPHcbEtQCR11dPXxKZmRjGuY4iTooPJYfST7hW71DE'\n  },\n  assetPackId: 'e6fa9601-3e47-4dff-9a84-e8e017add15a',\n  metrics: {\n    triangles: 0,\n    materials: 0,\n    meshes: 0,\n    bodies: 0,\n    entities: 0,\n    textures: 0\n  },\n  parameters: [],\n  actions: []\n})\n\nexport async function getCID(files: ContentServiceFile[], shareRoot: boolean): Promise<string> {\n  const importer = new Importer(new MemoryDatastore(), { onlyHash: true })\n  return new Promise<string>((resolve, reject) => {\n    pull(\n      pull.values(files),\n      pull.asyncMap((file: ContentServiceFile, cb: any) => {\n        const data = {\n          path: shareRoot ? '/tmp/' + file.path : file.path,\n          content: file.content\n        }\n        cb(null, data)\n      }),\n      importer,\n      pull.onEnd(() => {\n        return importer.flush((err: any, content: any) => {\n          if (err) {\n            reject(err)\n          }\n          resolve(new CID(content).toBaseEncodedString())\n        })\n      })\n    )\n  })\n}\n\nexport async function getFileManifest(files: ContentServiceFile[]): Promise<ContentManifest> {\n  const result: Record<string, ContentIdentifier> = {}\n  for (const file of files) {\n    const fileCID: string = await getCID([{ path: path.basename(file.path), content: file.content, size: file.size }], false)\n    result[file.path] = { cid: fileCID, name: file.path }\n  }\n  return result\n}\n\nexport function makeContentFile(path: string, content: string | Blob): Promise<ContentServiceFile> {\n  return new Promise((resolve, reject) => {\n    if (typeof content === 'string') {\n      const buffer = Buffer.from(content)\n      resolve({ path, content: buffer, size: Buffer.byteLength(buffer) })\n    } else if (content instanceof Blob) {\n      toBuffer(content, (err: Error, buffer: Buffer) => {\n        if (err) reject(err)\n        resolve({ path, content: buffer, size: Buffer.byteLength(buffer) })\n      })\n    } else {\n      reject(new Error('Unable to create ContentFile: content must be a string or a Blob'))\n    }\n  })\n}\n\nexport function getStatus(project: Project | null, deployment: Deployment | null) {\n  if (project && deployment) {\n    const projectTimestamp = +new Date(project.updatedAt)\n    const deploymentTimestamp = +new Date(deployment.timestamp)\n    return deploymentTimestamp > projectTimestamp ? DeploymentStatus.PUBLISHED : DeploymentStatus.NEEDS_SYNC\n  }\n\n  return DeploymentStatus.UNPUBLISHED\n}\n\nexport function mergeStatuses(statuses: DeploymentStatus[]) {\n  if (statuses.length === 0 || statuses.some(status => status === DeploymentStatus.UNPUBLISHED)) {\n    return DeploymentStatus.UNPUBLISHED\n  } else if (statuses.some(status => status === DeploymentStatus.NEEDS_SYNC)) {\n    return DeploymentStatus.NEEDS_SYNC\n  } else {\n    return DeploymentStatus.PUBLISHED\n  }\n}\n\nexport function getDeployment(project: Project | null, deployments: Deployment[]) {\n  // select a deployment that needs sync, or the first one\n  return deployments.find(deployment => getStatus(project, deployment) === DeploymentStatus.NEEDS_SYNC) || deployments[0]\n}\n\nexport const getEmptyDeployment = (projectId: string): [Project, Scene] => {\n  const sceneId = uuid.v4()\n  const project: Project = {\n    id: projectId,\n    title: 'Empty',\n    description: '',\n    thumbnail: '',\n    isPublic: false,\n    sceneId: sceneId,\n    ethAddress: null,\n    layout: {\n      rows: 1,\n      cols: 1\n    },\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n\n  const defaultGroundAsset = getDefaultGroundAsset()\n\n  const scene: Scene = {\n    id: sceneId,\n    entities: {\n      '42d414e0-5d9f-40a0-884a-e0cbac9d7e5c': {\n        id: '42d414e0-5d9f-40a0-884a-e0cbac9d7e5c',\n        components: ['25783992-5e2f-4879-b734-eda41c0cc4c0', '49c32fc6-d7f7-4dba-bc55-7a89b898594a'],\n        disableGizmos: true,\n        name: 'entity'\n      }\n    },\n    components: {\n      '25783992-5e2f-4879-b734-eda41c0cc4c0': {\n        id: '25783992-5e2f-4879-b734-eda41c0cc4c0',\n        type: ComponentType.GLTFShape,\n        data: {\n          assetId: 'c9b17021-765c-4d9a-9966-ce93a9c323d1'\n        }\n      },\n      '49c32fc6-d7f7-4dba-bc55-7a89b898594a': {\n        id: '49c32fc6-d7f7-4dba-bc55-7a89b898594a',\n        type: ComponentType.Transform,\n        data: {\n          position: {\n            x: 8,\n            y: 0,\n            z: 8\n          },\n          rotation: {\n            x: 0,\n            y: 0,\n            z: 0,\n            w: 1\n          },\n          scale: {\n            x: 1,\n            y: 1,\n            z: 1\n          }\n        }\n      }\n    },\n    assets: {\n      [defaultGroundAsset.id]: defaultGroundAsset\n    },\n    metrics: {\n      triangles: 32,\n      materials: 1,\n      meshes: 1,\n      bodies: 1,\n      entities: 1,\n      textures: 0\n    },\n    limits: {\n      triangles: 10000,\n      materials: 20,\n      meshes: 200,\n      bodies: 300,\n      entities: 200,\n      textures: 10\n    },\n    ground: {\n      assetId: 'c9b17021-765c-4d9a-9966-ce93a9c323d1',\n      componentId: '25783992-5e2f-4879-b734-eda41c0cc4c0'\n    }\n  }\n\n  return [project, scene]\n}\n\nfunction isUrl(maybeUrl: string) {\n  try {\n    new URL(maybeUrl)\n  } catch (error) {\n    return false\n  }\n  return true\n}\n\nexport function getThumbnail(definition?: SceneDefinition | null, content?: EntityContentItemReference[]): string | null {\n  if (!definition || !definition.display || !definition.display.navmapThumbnail) {\n    return null\n  }\n  let thumbnail = definition.display.navmapThumbnail\n  if (!isUrl(thumbnail) && content) {\n    const file = content.find(reference => reference.file === thumbnail)\n    if (file) {\n      thumbnail = getCatalystContentUrl(file.hash)\n    }\n  }\n\n  return thumbnail\n}\n"]},"metadata":{},"sourceType":"module"}