{"ast":null,"code":"import { Engine } from '../engine';\n\nfunction transformTextureUrl(url) {\n  var excludeFn = function excludeFn(entry) {\n    var strRegExPattern = '\\\\b' + entry + '\\\\b';\n    return url && (url === entry || url.match(new RegExp(strRegExPattern, 'g')));\n  };\n\n  if (this._excludedCompressedTextures && this._excludedCompressedTextures.some(excludeFn)) {\n    return url;\n  }\n\n  var lastDot = url.lastIndexOf('.');\n  var lastQuestionMark = url.lastIndexOf('?');\n  var querystring = lastQuestionMark > -1 ? url.substring(lastQuestionMark, url.length) : '';\n  return (lastDot > -1 ? url.substring(0, lastDot) : url) + this._textureFormatInUse + querystring;\n}\n\nObject.defineProperty(Engine.prototype, \"texturesSupported\", {\n  get: function get() {\n    // Intelligently add supported compressed formats in order to check for.\n    // Check for ASTC support first as it is most powerful and to be very cross platform.\n    // Next PVRTC & DXT, which are probably superior to ETC1/2.\n    // Likely no hardware which supports both PVR & DXT, so order matters little.\n    // ETC2 is newer and handles ETC1 (no alpha capability), so check for first.\n    var texturesSupported = new Array();\n\n    if (this._caps.astc) {\n      texturesSupported.push('-astc.ktx');\n    }\n\n    if (this._caps.s3tc) {\n      texturesSupported.push('-dxt.ktx');\n    }\n\n    if (this._caps.pvrtc) {\n      texturesSupported.push('-pvrtc.ktx');\n    }\n\n    if (this._caps.etc2) {\n      texturesSupported.push('-etc2.ktx');\n    }\n\n    if (this._caps.etc1) {\n      texturesSupported.push('-etc1.ktx');\n    }\n\n    return texturesSupported;\n  },\n  enumerable: true,\n  configurable: true\n});\nObject.defineProperty(Engine.prototype, \"textureFormatInUse\", {\n  get: function get() {\n    return this._textureFormatInUse || null;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nEngine.prototype.setCompressedTextureExclusions = function (skippedFiles) {\n  this._excludedCompressedTextures = skippedFiles;\n};\n\nEngine.prototype.setTextureFormatToUse = function (formatsAvailable) {\n  var texturesSupported = this.texturesSupported;\n\n  for (var i = 0, len1 = texturesSupported.length; i < len1; i++) {\n    for (var j = 0, len2 = formatsAvailable.length; j < len2; j++) {\n      if (texturesSupported[i] === formatsAvailable[j].toLowerCase()) {\n        this._transformTextureUrl = transformTextureUrl.bind(this);\n        return this._textureFormatInUse = texturesSupported[i];\n      }\n    }\n  } // actively set format to nothing, to allow this to be called more than once\n  // and possibly fail the 2nd time\n\n\n  this._textureFormatInUse = \"\";\n  this._transformTextureUrl = null;\n  return null;\n};","map":null,"metadata":{},"sourceType":"module"}