{"ast":null,"code":"import { Observable } from \"../Misc/observable\";\nimport { Vector2, Vector3 } from \"../Maths/math.vector\";\nimport { Color3, Color4 } from \"../Maths/math.color\";\nimport { _TypeStore } from '../Misc/typeStore';\n/**\r\n * The action to be carried out following a trigger\r\n * @see https://doc.babylonjs.com/how_to/how_to_use_actions#available-actions\r\n */\n\nvar Action =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Action\r\n   * @param triggerOptions the trigger, with or without parameters, for the action\r\n   * @param condition an optional determinant of action\r\n   */\n  function Action(\n  /** the trigger, with or without parameters, for the action */\n  triggerOptions, condition) {\n    this.triggerOptions = triggerOptions;\n    /**\r\n    * An event triggered prior to action being executed.\r\n    */\n\n    this.onBeforeExecuteObservable = new Observable();\n\n    if (triggerOptions.parameter) {\n      this.trigger = triggerOptions.trigger;\n      this._triggerParameter = triggerOptions.parameter;\n    } else if (triggerOptions.trigger) {\n      this.trigger = triggerOptions.trigger;\n    } else {\n      this.trigger = triggerOptions;\n    }\n\n    this._nextActiveAction = this;\n    this._condition = condition;\n  }\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Action.prototype._prepare = function () {};\n  /**\r\n   * Gets the trigger parameters\r\n   * @returns the trigger parameters\r\n   */\n\n\n  Action.prototype.getTriggerParameter = function () {\n    return this._triggerParameter;\n  };\n  /**\r\n   * Internal only - executes current action event\r\n   * @hidden\r\n   */\n\n\n  Action.prototype._executeCurrent = function (evt) {\n    if (this._nextActiveAction._condition) {\n      var condition = this._nextActiveAction._condition;\n\n      var currentRenderId = this._actionManager.getScene().getRenderId(); // We cache the current evaluation for the current frame\n\n\n      if (condition._evaluationId === currentRenderId) {\n        if (!condition._currentResult) {\n          return;\n        }\n      } else {\n        condition._evaluationId = currentRenderId;\n\n        if (!condition.isValid()) {\n          condition._currentResult = false;\n          return;\n        }\n\n        condition._currentResult = true;\n      }\n    }\n\n    this.onBeforeExecuteObservable.notifyObservers(this);\n\n    this._nextActiveAction.execute(evt);\n\n    this.skipToNextActiveAction();\n  };\n  /**\r\n   * Execute placeholder for child classes\r\n   * @param evt optional action event\r\n   */\n\n\n  Action.prototype.execute = function (evt) {};\n  /**\r\n   * Skips to next active action\r\n   */\n\n\n  Action.prototype.skipToNextActiveAction = function () {\n    if (this._nextActiveAction._child) {\n      if (!this._nextActiveAction._child._actionManager) {\n        this._nextActiveAction._child._actionManager = this._actionManager;\n      }\n\n      this._nextActiveAction = this._nextActiveAction._child;\n    } else {\n      this._nextActiveAction = this;\n    }\n  };\n  /**\r\n   * Adds action to chain of actions, may be a DoNothingAction\r\n   * @param action defines the next action to execute\r\n   * @returns The action passed in\r\n   * @see https://www.babylonjs-playground.com/#1T30HR#0\r\n   */\n\n\n  Action.prototype.then = function (action) {\n    this._child = action;\n    action._actionManager = this._actionManager;\n\n    action._prepare();\n\n    return action;\n  };\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Action.prototype._getProperty = function (propertyPath) {\n    return this._actionManager._getProperty(propertyPath);\n  };\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Action.prototype._getEffectiveTarget = function (target, propertyPath) {\n    return this._actionManager._getEffectiveTarget(target, propertyPath);\n  };\n  /**\r\n   * Serialize placeholder for child classes\r\n   * @param parent of child\r\n   * @returns the serialized object\r\n   */\n\n\n  Action.prototype.serialize = function (parent) {};\n  /**\r\n   * Internal only called by serialize\r\n   * @hidden\r\n   */\n\n\n  Action.prototype._serialize = function (serializedAction, parent) {\n    var serializationObject = {\n      type: 1,\n      children: [],\n      name: serializedAction.name,\n      properties: serializedAction.properties || []\n    }; // Serialize child\n\n    if (this._child) {\n      this._child.serialize(serializationObject);\n    } // Check if \"this\" has a condition\n\n\n    if (this._condition) {\n      var serializedCondition = this._condition.serialize();\n\n      serializedCondition.children.push(serializationObject);\n\n      if (parent) {\n        parent.children.push(serializedCondition);\n      }\n\n      return serializedCondition;\n    }\n\n    if (parent) {\n      parent.children.push(serializationObject);\n    }\n\n    return serializationObject;\n  };\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Action._SerializeValueAsString = function (value) {\n    if (typeof value === \"number\") {\n      return value.toString();\n    }\n\n    if (typeof value === \"boolean\") {\n      return value ? \"true\" : \"false\";\n    }\n\n    if (value instanceof Vector2) {\n      return value.x + \", \" + value.y;\n    }\n\n    if (value instanceof Vector3) {\n      return value.x + \", \" + value.y + \", \" + value.z;\n    }\n\n    if (value instanceof Color3) {\n      return value.r + \", \" + value.g + \", \" + value.b;\n    }\n\n    if (value instanceof Color4) {\n      return value.r + \", \" + value.g + \", \" + value.b + \", \" + value.a;\n    }\n\n    return value; // string\n  };\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Action._GetTargetProperty = function (target) {\n    return {\n      name: \"target\",\n      targetType: target._isMesh ? \"MeshProperties\" : target._isLight ? \"LightProperties\" : target._isCamera ? \"CameraProperties\" : \"SceneProperties\",\n      value: target._isScene ? \"Scene\" : target.name\n    };\n  };\n\n  return Action;\n}();\n\nexport { Action };\n_TypeStore.RegisteredTypes[\"BABYLON.Action\"] = Action;","map":null,"metadata":{},"sourceType":"module"}