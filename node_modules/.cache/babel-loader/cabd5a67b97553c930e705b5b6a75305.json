{"ast":null,"code":"import { ShadowGenerator } from \"./shadowGenerator\";\nimport { CascadedShadowGenerator } from \"./cascadedShadowGenerator\";\nimport { SceneComponentConstants } from \"../../sceneComponent\";\nimport { AbstractScene } from \"../../abstractScene\"; // Adds the parser to the scene parsers.\n\nAbstractScene.AddParser(SceneComponentConstants.NAME_SHADOWGENERATOR, function (parsedData, scene) {\n  // Shadows\n  if (parsedData.shadowGenerators !== undefined && parsedData.shadowGenerators !== null) {\n    for (var index = 0, cache = parsedData.shadowGenerators.length; index < cache; index++) {\n      var parsedShadowGenerator = parsedData.shadowGenerators[index];\n\n      if (parsedShadowGenerator.className === CascadedShadowGenerator.CLASSNAME) {\n        CascadedShadowGenerator.Parse(parsedShadowGenerator, scene);\n      } else {\n        ShadowGenerator.Parse(parsedShadowGenerator, scene);\n      } // SG would be available on their associated lights\n\n    }\n  }\n});\n/**\r\n * Defines the shadow generator component responsible to manage any shadow generators\r\n * in a given scene.\r\n */\n\nvar ShadowGeneratorSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function ShadowGeneratorSceneComponent(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_SHADOWGENERATOR;\n    this.scene = scene;\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  ShadowGeneratorSceneComponent.prototype.register = function () {\n    this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_SHADOWGENERATOR, this, this._gatherRenderTargets);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  ShadowGeneratorSceneComponent.prototype.rebuild = function () {// Nothing To Do Here.\n  };\n  /**\r\n   * Serializes the component data to the specified json object\r\n   * @param serializationObject The object to serialize to\r\n   */\n\n\n  ShadowGeneratorSceneComponent.prototype.serialize = function (serializationObject) {\n    // Shadows\n    serializationObject.shadowGenerators = [];\n    var lights = this.scene.lights;\n\n    for (var _i = 0, lights_1 = lights; _i < lights_1.length; _i++) {\n      var light = lights_1[_i];\n      var shadowGenerator = light.getShadowGenerator();\n\n      if (shadowGenerator) {\n        serializationObject.shadowGenerators.push(shadowGenerator.serialize());\n      }\n    }\n  };\n  /**\r\n   * Adds all the elements from the container to the scene\r\n   * @param container the container holding the elements\r\n   */\n\n\n  ShadowGeneratorSceneComponent.prototype.addFromContainer = function (container) {// Nothing To Do Here. (directly attached to a light)\n  };\n  /**\r\n   * Removes all the elements in the container from the scene\r\n   * @param container contains the elements to remove\r\n   * @param dispose if the removed element should be disposed (default: false)\r\n   */\n\n\n  ShadowGeneratorSceneComponent.prototype.removeFromContainer = function (container, dispose) {// Nothing To Do Here. (directly attached to a light)\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  ShadowGeneratorSceneComponent.prototype.dispose = function () {// Nothing To Do Here.\n  };\n\n  ShadowGeneratorSceneComponent.prototype._gatherRenderTargets = function (renderTargets) {\n    // Shadows\n    var scene = this.scene;\n\n    if (this.scene.shadowsEnabled) {\n      for (var lightIndex = 0; lightIndex < scene.lights.length; lightIndex++) {\n        var light = scene.lights[lightIndex];\n        var shadowGenerator = light.getShadowGenerator();\n\n        if (light.isEnabled() && light.shadowEnabled && shadowGenerator) {\n          var shadowMap = shadowGenerator.getShadowMap();\n\n          if (scene.textures.indexOf(shadowMap) !== -1) {\n            renderTargets.push(shadowMap);\n          }\n        }\n      }\n    }\n  };\n\n  return ShadowGeneratorSceneComponent;\n}();\n\nexport { ShadowGeneratorSceneComponent };\n\nShadowGenerator._SceneComponentInitialization = function (scene) {\n  var component = scene._getComponent(SceneComponentConstants.NAME_SHADOWGENERATOR);\n\n  if (!component) {\n    component = new ShadowGeneratorSceneComponent(scene);\n\n    scene._addComponent(component);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}