{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"ajv/dist/compile/codegen\");\n\nvar _util_1 = require(\"./_util\");\n\nvar error = {\n  message: function message(_ref) {\n    var missingPattern = _ref.params.missingPattern;\n    return codegen_1.str(_templateObject || (_templateObject = _taggedTemplateLiteral([\"should have property matching pattern '\", \"'\"])), missingPattern);\n  },\n  params: function params(_ref2) {\n    var missingPattern = _ref2.params.missingPattern;\n    return codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{missingPattern: \", \"}\"])), missingPattern);\n  }\n};\n\nfunction getDef() {\n  return {\n    keyword: \"patternRequired\",\n    type: \"object\",\n    schemaType: \"array\",\n    error: error,\n    code: function code(cxt) {\n      var gen = cxt.gen,\n          schema = cxt.schema,\n          data = cxt.data;\n      if (schema.length === 0) return;\n      var valid = gen.let(\"valid\", true);\n\n      var _iterator = _createForOfIteratorHelper(schema),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pat = _step.value;\n          validateProperties(pat);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      function validateProperties(pattern) {\n        var matched = gen.let(\"matched\", false);\n        gen.forIn(\"key\", data, function (key) {\n          gen.assign(matched, codegen_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \".test(\", \")\"])), _util_1.usePattern(gen, pattern), key));\n          gen.if(matched, function () {\n            return gen.break();\n          });\n        });\n        cxt.setParams({\n          missingPattern: pattern\n        });\n        gen.assign(valid, codegen_1.and(valid, matched));\n        cxt.pass(valid);\n      }\n    },\n    metaSchema: {\n      type: \"array\",\n      items: {\n        type: \"string\",\n        format: \"regex\"\n      },\n      uniqueItems: true\n    }\n  };\n}\n\nexports.default = getDef;\nmodule.exports = getDef;","map":null,"metadata":{},"sourceType":"script"}