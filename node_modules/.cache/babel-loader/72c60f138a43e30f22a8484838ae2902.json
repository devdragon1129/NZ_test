{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { WebXRFeaturesManager, WebXRFeatureName } from \"../webXRFeaturesManager\";\nimport { Observable } from \"../../Misc/observable\";\nimport { Vector3 } from \"../../Maths/math.vector\";\nimport { WebXRAbstractFeature } from \"./WebXRAbstractFeature\";\n/**\r\n * The feature point system is used to detect feature points from real world geometry.\r\n * This feature is currently experimental and only supported on BabylonNative, and should not be used in the browser.\r\n * The newly introduced API can be seen in webxr.nativeextensions.d.ts and described in FeaturePoints.md.\r\n */\n\nvar WebXRFeaturePointSystem =\n/** @class */\nfunction (_super) {\n  __extends(WebXRFeaturePointSystem, _super);\n  /**\r\n   * construct the feature point system\r\n   * @param _xrSessionManager an instance of xr Session manager\r\n   */\n\n\n  function WebXRFeaturePointSystem(_xrSessionManager) {\n    var _this = _super.call(this, _xrSessionManager) || this;\n\n    _this._enabled = false;\n    _this._featurePointCloud = [];\n    /**\r\n    * Observers registered here will be executed whenever new feature points are added (on XRFrame while the session is tracking).\r\n    * Will notify the observers about which feature points have been added.\r\n    */\n\n    _this.onFeaturePointsAddedObservable = new Observable();\n    /**\r\n     * Observers registered here will be executed whenever a feature point has been updated (on XRFrame while the session is tracking).\r\n     * Will notify the observers about which feature points have been updated.\r\n     */\n\n    _this.onFeaturePointsUpdatedObservable = new Observable();\n    _this.xrNativeFeatureName = \"bjsfeature-points\";\n\n    if (_this._xrSessionManager.session) {\n      _this._init();\n    } else {\n      _this._xrSessionManager.onXRSessionInit.addOnce(function () {\n        _this._init();\n      });\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(WebXRFeaturePointSystem.prototype, \"featurePointCloud\", {\n    /**\r\n     * The current feature point cloud maintained across frames.\r\n     */\n    get: function get() {\n      return this._featurePointCloud;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Detach this feature.\r\n   * Will usually be called by the features manager\r\n   *\r\n   * @returns true if successful.\r\n   */\n\n  WebXRFeaturePointSystem.prototype.detach = function () {\n    if (!_super.prototype.detach.call(this)) {\n      return false;\n    }\n\n    this.featurePointCloud.length = 0;\n    return true;\n  };\n  /**\r\n   * Dispose this feature and all of the resources attached\r\n   */\n\n\n  WebXRFeaturePointSystem.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._featurePointCloud.length = 0;\n    this.onFeaturePointsUpdatedObservable.clear();\n    this.onFeaturePointsAddedObservable.clear();\n  };\n  /**\r\n   * On receiving a new XR frame if this feature is attached notify observers new feature point data is available.\r\n   */\n\n\n  WebXRFeaturePointSystem.prototype._onXRFrame = function (frame) {\n    if (!this.attached || !this._enabled || !frame) {\n      return;\n    }\n\n    var featurePointRawData = frame.featurePointCloud;\n\n    if (!featurePointRawData || featurePointRawData.length === 0) {\n      return;\n    } else {\n      if (featurePointRawData.length % 5 !== 0) {\n        throw new Error(\"Received malformed feature point cloud of length: \" + featurePointRawData.length);\n      }\n\n      var numberOfFeaturePoints = featurePointRawData.length / 5;\n      var updatedFeaturePoints = new Array();\n      var addedFeaturePoints = new Array();\n\n      for (var i = 0; i < numberOfFeaturePoints; i++) {\n        var rawIndex = i * 5;\n        var id = featurePointRawData[rawIndex + 4]; // IDs should be durable across frames and strictly increasing from 0 up, so use them as indexing into the feature point array.\n\n        if (!this._featurePointCloud[id]) {\n          this._featurePointCloud[id] = {\n            position: new Vector3(),\n            confidenceValue: 0\n          };\n          addedFeaturePoints.push(id);\n        } else {\n          updatedFeaturePoints.push(id);\n        } // Set the feature point values.\n\n\n        this._featurePointCloud[id].position.x = featurePointRawData[rawIndex];\n        this._featurePointCloud[id].position.y = featurePointRawData[rawIndex + 1];\n        this._featurePointCloud[id].position.z = featurePointRawData[rawIndex + 2];\n        this._featurePointCloud[id].confidenceValue = featurePointRawData[rawIndex + 3];\n      } // Signal observers that feature points have been added if necessary.\n\n\n      if (addedFeaturePoints.length > 0) {\n        this.onFeaturePointsAddedObservable.notifyObservers(addedFeaturePoints);\n      } // Signal observers that feature points have been updated if necessary.\n\n\n      if (updatedFeaturePoints.length > 0) {\n        this.onFeaturePointsUpdatedObservable.notifyObservers(updatedFeaturePoints);\n      }\n    }\n  };\n  /**\r\n   * Initializes the feature. If the feature point feature is not available for this environment do not mark the feature as enabled.\r\n   */\n\n\n  WebXRFeaturePointSystem.prototype._init = function () {\n    if (!this._xrSessionManager.session.trySetFeaturePointCloudEnabled || !this._xrSessionManager.session.trySetFeaturePointCloudEnabled(true)) {\n      // fail silently\n      return;\n    }\n\n    this._enabled = true;\n  };\n  /**\r\n   * The module's name\r\n   */\n\n\n  WebXRFeaturePointSystem.Name = WebXRFeatureName.FEATURE_POINTS;\n  /**\r\n   * The (Babylon) version of this module.\r\n   * This is an integer representing the implementation version.\r\n   * This number does not correspond to the WebXR specs version\r\n   */\n\n  WebXRFeaturePointSystem.Version = 1;\n  return WebXRFeaturePointSystem;\n}(WebXRAbstractFeature);\n\nexport { WebXRFeaturePointSystem }; // register the plugin\n\nWebXRFeaturesManager.AddWebXRFeature(WebXRFeaturePointSystem.Name, function (xrSessionManager) {\n  return function () {\n    return new WebXRFeaturePointSystem(xrSessionManager);\n  };\n}, WebXRFeaturePointSystem.Version);","map":null,"metadata":{},"sourceType":"module"}