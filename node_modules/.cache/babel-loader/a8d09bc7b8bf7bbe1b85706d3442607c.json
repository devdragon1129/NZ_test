{"ast":null,"code":"import _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getContractInstance),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(thirdPartySaga);\n\nimport PQueue from 'p-queue';\nimport { takeLatest, takeEvery, call, put, select } from 'redux-saga/effects';\nimport { Authenticator } from 'dcl-crypto';\nimport { Contract, providers } from 'ethers';\nimport { Network } from '@dcl/schemas';\nimport { getChainIdByNetwork } from 'decentraland-dapps/dist/lib/eth';\nimport { closeModal } from 'decentraland-dapps/dist/modules/modal/actions';\nimport { ContractName, getContract } from 'decentraland-transactions';\nimport { sendTransaction } from 'decentraland-dapps/dist/modules/wallet/utils';\nimport { LOGIN_SUCCESS } from 'modules/identity/actions';\nimport { getItemCurations } from 'modules/curations/itemCuration/selectors';\nimport { CurationStatus } from 'modules/curations/types';\nimport { getIdentity } from 'modules/identity/utils';\nimport { buildTPItemEntity } from 'modules/item/export';\nimport { waitForTx } from 'modules/transaction/utils';\nimport { FETCH_THIRD_PARTIES_REQUEST, fetchThirdPartiesRequest, fetchThirdPartiesSuccess, fetchThirdPartiesFailure, fetchThirdPartyAvailableSlotsSuccess, FETCH_THIRD_PARTY_AVAILABLE_SLOTS_REQUEST, fetchThirdPartyAvailableSlotsFailure, PUBLISH_THIRD_PARTY_ITEMS_REQUEST, publishThirdPartyItemsSuccess, publishThirdPartyItemsFailure, PUSH_CHANGES_THIRD_PARTY_ITEMS_REQUEST, PUBLISH_AND_PUSH_CHANGES_THIRD_PARTY_ITEMS_REQUEST, pushChangesThirdPartyItemsSuccess, pushChangesThirdPartyItemsFailure, fetchThirdPartyAvailableSlotsRequest, PUBLISH_THIRD_PARTY_ITEMS_SUCCESS, publishAndPushChangesThirdPartyItemsSuccess, publishAndPushChangesThirdPartyItemsFailure, reviewThirdPartySuccess, reviewThirdPartyFailure, REVIEW_THIRD_PARTY_REQUEST, reviewThirdPartyTxSuccess, deployBatchedThirdPartyItemsSuccess, deployBatchedThirdPartyItemsFailure, DEPLOY_BATCHED_THIRD_PARTY_ITEMS_REQUEST } from './actions';\nimport { getPublishItemsSignature } from './utils';\nexport function getContractInstance(contract, chainId, provider) {\n  var contractData, contractInstance;\n  return _regeneratorRuntime.wrap(function getContractInstance$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return call(getContract, contract, chainId);\n\n        case 2:\n          contractData = _context.sent;\n          contractInstance = new Contract(contractData.address, contractData.abi, new providers.Web3Provider(provider));\n          return _context.abrupt(\"return\", contractInstance);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function thirdPartySaga(builder, catalyst) {\n  var _marked2, _marked3, _marked4, _marked5, _marked6, _marked7, _marked8, _marked9, _marked10, _marked11, _marked12, handleLoginSuccess, handleFetchThirdPartiesRequest, handleFetchThirdPartyAvailableSlots, handlePublishThirdPartyItemSuccess, getCollectionId, publishChangesToThirdPartyItems, handlePublishThirdPartyItemRequest, pushChangesToThirdPartyItems, handlePushChangesThirdPartyItemRequest, handlePublishAndPushChangesThirdPartyItemRequest, handleReviewThirdPartyRequest, handleDeployBatchedThirdPartyItemsRequest;\n\n  return _regeneratorRuntime.wrap(function thirdPartySaga$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          handleDeployBatchedThirdPartyItemsRequest = function _handleDeployBatchedT(action) {\n            var _action$payload4, items, collection, tree, hashes, REQUESTS_BATCH_SIZE, queue, identity, promisesOfItemsBeingDeployed, deployedItemsCurations;\n\n            return _regeneratorRuntime.wrap(function handleDeployBatchedThirdPartyItemsRequest$(_context13) {\n              while (1) {\n                switch (_context13.prev = _context13.next) {\n                  case 0:\n                    _action$payload4 = action.payload, items = _action$payload4.items, collection = _action$payload4.collection, tree = _action$payload4.tree, hashes = _action$payload4.hashes;\n                    REQUESTS_BATCH_SIZE = 5;\n                    queue = new PQueue({\n                      concurrency: REQUESTS_BATCH_SIZE\n                    });\n                    _context13.prev = 3;\n                    _context13.next = 6;\n                    return call(getIdentity);\n\n                  case 6:\n                    identity = _context13.sent;\n\n                    if (identity) {\n                      _context13.next = 9;\n                      break;\n                    }\n\n                    throw new Error('Invalid Identity');\n\n                  case 9:\n                    promisesOfItemsBeingDeployed = items.map(function (item) {\n                      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                        var entity;\n                        return _regeneratorRuntime.wrap(function _callee$(_context12) {\n                          while (1) {\n                            switch (_context12.prev = _context12.next) {\n                              case 0:\n                                _context12.next = 2;\n                                return buildTPItemEntity(catalyst, builder, collection, item, tree, hashes[item.id]);\n\n                              case 2:\n                                entity = _context12.sent;\n                                _context12.next = 5;\n                                return catalyst.deployEntity(_objectSpread({}, entity, {\n                                  authChain: Authenticator.signPayload(identity, entity.entityId)\n                                }));\n\n                              case 5:\n                                return _context12.abrupt(\"return\", builder.updateItemCurationStatus(item.id, CurationStatus.APPROVED));\n\n                              case 6:\n                              case \"end\":\n                                return _context12.stop();\n                            }\n                          }\n                        }, _callee);\n                      }));\n                    });\n                    _context13.next = 12;\n                    return call([queue, 'addAll'], promisesOfItemsBeingDeployed);\n\n                  case 12:\n                    deployedItemsCurations = _context13.sent;\n                    _context13.next = 15;\n                    return put(deployBatchedThirdPartyItemsSuccess(collection, deployedItemsCurations));\n\n                  case 15:\n                    _context13.next = 22;\n                    break;\n\n                  case 17:\n                    _context13.prev = 17;\n                    _context13.t0 = _context13[\"catch\"](3);\n                    queue.clear();\n                    _context13.next = 22;\n                    return put(deployBatchedThirdPartyItemsFailure(items, _context13.t0.message));\n\n                  case 22:\n                  case \"end\":\n                    return _context13.stop();\n                }\n              }\n            }, _marked12, null, [[3, 17]]);\n          };\n\n          handleReviewThirdPartyRequest = function _handleReviewThirdPar(action) {\n            var _action$payload3, thirdPartyId, slots, merkleTreeRoot, maticChainId, thirdPartyContract, txHash;\n\n            return _regeneratorRuntime.wrap(function handleReviewThirdPartyRequest$(_context11) {\n              while (1) {\n                switch (_context11.prev = _context11.next) {\n                  case 0:\n                    _action$payload3 = action.payload, thirdPartyId = _action$payload3.thirdPartyId, slots = _action$payload3.slots, merkleTreeRoot = _action$payload3.merkleTreeRoot;\n                    _context11.prev = 1;\n                    _context11.next = 4;\n                    return call(getChainIdByNetwork, Network.MATIC);\n\n                  case 4:\n                    maticChainId = _context11.sent;\n                    _context11.next = 7;\n                    return call(getContract, ContractName.ThirdPartyRegistry, maticChainId);\n\n                  case 7:\n                    thirdPartyContract = _context11.sent;\n                    _context11.next = 10;\n                    return call(sendTransaction, thirdPartyContract, 'reviewThirdPartyWithRoot', thirdPartyId, merkleTreeRoot, slots.map(function (slot) {\n                      return [slot.qty, slot.salt, slot.sigR, slot.sigS, slot.sigV];\n                    }));\n\n                  case 10:\n                    txHash = _context11.sent;\n                    _context11.next = 13;\n                    return put(reviewThirdPartyTxSuccess(txHash, maticChainId));\n\n                  case 13:\n                    _context11.next = 15;\n                    return call(waitForTx, txHash);\n\n                  case 15:\n                    _context11.next = 17;\n                    return put(reviewThirdPartySuccess());\n\n                  case 17:\n                    _context11.next = 23;\n                    break;\n\n                  case 19:\n                    _context11.prev = 19;\n                    _context11.t0 = _context11[\"catch\"](1);\n                    _context11.next = 23;\n                    return put(reviewThirdPartyFailure(_context11.t0));\n\n                  case 23:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }\n            }, _marked11, null, [[1, 19]]);\n          };\n\n          handlePublishAndPushChangesThirdPartyItemRequest = function _handlePublishAndPush(action) {\n            var _action$payload2, thirdParty, itemsToPublish, itemsWithChanges, collectionId, resultFromPublish, resultFromPushChanges, newItemCurations;\n\n            return _regeneratorRuntime.wrap(function handlePublishAndPushChangesThirdPartyItemRequest$(_context10) {\n              while (1) {\n                switch (_context10.prev = _context10.next) {\n                  case 0:\n                    _action$payload2 = action.payload, thirdParty = _action$payload2.thirdParty, itemsToPublish = _action$payload2.itemsToPublish, itemsWithChanges = _action$payload2.itemsWithChanges;\n                    collectionId = getCollectionId(itemsToPublish); // We need to execute these two methods in sequence, because the push changes will create a new curation if there was one already approved.\n                    // It will create them with status PENDING, so the publish will fail if it's executed after that event.\n                    // Publish items\n\n                    _context10.prev = 2;\n                    _context10.next = 5;\n                    return call(publishChangesToThirdPartyItems, thirdParty, itemsToPublish);\n\n                  case 5:\n                    resultFromPublish = _context10.sent;\n                    _context10.next = 8;\n                    return call(pushChangesToThirdPartyItems, itemsWithChanges);\n\n                  case 8:\n                    resultFromPushChanges = _context10.sent;\n                    newItemCurations = [].concat(_toConsumableArray(resultFromPublish.newItemCurations), _toConsumableArray(resultFromPushChanges));\n                    _context10.next = 12;\n                    return put(publishAndPushChangesThirdPartyItemsSuccess(collectionId, resultFromPublish.newItems, newItemCurations));\n\n                  case 12:\n                    _context10.next = 14;\n                    return put(fetchThirdPartyAvailableSlotsRequest(thirdParty.id));\n\n                  case 14:\n                    _context10.next = 16;\n                    return put(closeModal('PublishThirdPartyCollectionModal'));\n\n                  case 16:\n                    _context10.next = 22;\n                    break;\n\n                  case 18:\n                    _context10.prev = 18;\n                    _context10.t0 = _context10[\"catch\"](2);\n                    _context10.next = 22;\n                    return put(publishAndPushChangesThirdPartyItemsFailure(_context10.t0.message));\n\n                  case 22:\n                  case \"end\":\n                    return _context10.stop();\n                }\n              }\n            }, _marked10, null, [[2, 18]]);\n          };\n\n          handlePushChangesThirdPartyItemRequest = function _handlePushChangesThi(action) {\n            var items, collectionId, newItemsCurations;\n            return _regeneratorRuntime.wrap(function handlePushChangesThirdPartyItemRequest$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    items = action.payload.items;\n                    _context9.prev = 1;\n                    collectionId = getCollectionId(items);\n                    _context9.next = 5;\n                    return call(pushChangesToThirdPartyItems, items);\n\n                  case 5:\n                    newItemsCurations = _context9.sent;\n                    _context9.next = 8;\n                    return put(pushChangesThirdPartyItemsSuccess(collectionId, newItemsCurations));\n\n                  case 8:\n                    _context9.next = 10;\n                    return put(closeModal('PublishThirdPartyCollectionModal'));\n\n                  case 10:\n                    _context9.next = 16;\n                    break;\n\n                  case 12:\n                    _context9.prev = 12;\n                    _context9.t0 = _context9[\"catch\"](1);\n                    _context9.next = 16;\n                    return put(pushChangesThirdPartyItemsFailure(_context9.t0.message));\n\n                  case 16:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            }, _marked9, null, [[1, 12]]);\n          };\n\n          pushChangesToThirdPartyItems = function _pushChangesToThirdPa(items) {\n            var collectionId, itemCurations, MAX_CONCURRENT_REQUESTS, queue, promisesOfItemsBeingUpdated, newItemsCurations;\n            return _regeneratorRuntime.wrap(function pushChangesToThirdPartyItems$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    collectionId = getCollectionId(items);\n                    _context8.next = 3;\n                    return select(getItemCurations, collectionId);\n\n                  case 3:\n                    itemCurations = _context8.sent;\n                    MAX_CONCURRENT_REQUESTS = 3;\n                    queue = new PQueue({\n                      concurrency: MAX_CONCURRENT_REQUESTS\n                    });\n                    promisesOfItemsBeingUpdated = items.map(function (item) {\n                      var curation = itemCurations.find(function (itemCuration) {\n                        return itemCuration.itemId === item.id;\n                      });\n\n                      if ((curation === null || curation === void 0 ? void 0 : curation.status) === CurationStatus.PENDING) {\n                        return function () {\n                          return builder.updateItemCurationStatus(item.id, CurationStatus.PENDING);\n                        };\n                      }\n\n                      return function () {\n                        return builder.pushItemCuration(item.id);\n                      }; // FOR CURATIONS REJECTED/APPROVED\n                    });\n                    _context8.next = 9;\n                    return queue.addAll(promisesOfItemsBeingUpdated);\n\n                  case 9:\n                    newItemsCurations = _context8.sent;\n\n                    if (!newItemsCurations.some(function (itemCuration) {\n                      return itemCuration === undefined;\n                    })) {\n                      _context8.next = 12;\n                      break;\n                    }\n\n                    throw Error('Some item curations were not pushed');\n\n                  case 12:\n                    return _context8.abrupt(\"return\", newItemsCurations);\n\n                  case 13:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, _marked8);\n          };\n\n          handlePublishThirdPartyItemRequest = function _handlePublishThirdPa2(action) {\n            var _action$payload, thirdParty, items, collectionId, _yield$call3, newItems, newItemCurations;\n\n            return _regeneratorRuntime.wrap(function handlePublishThirdPartyItemRequest$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _action$payload = action.payload, thirdParty = _action$payload.thirdParty, items = _action$payload.items;\n                    _context7.prev = 1;\n                    collectionId = getCollectionId(items);\n                    _context7.next = 5;\n                    return call(publishChangesToThirdPartyItems, thirdParty, items);\n\n                  case 5:\n                    _yield$call3 = _context7.sent;\n                    newItems = _yield$call3.newItems;\n                    newItemCurations = _yield$call3.newItemCurations;\n                    _context7.next = 10;\n                    return put(publishThirdPartyItemsSuccess(thirdParty.id, collectionId, newItems, newItemCurations));\n\n                  case 10:\n                    _context7.next = 12;\n                    return put(closeModal('PublishThirdPartyCollectionModal'));\n\n                  case 12:\n                    _context7.next = 18;\n                    break;\n\n                  case 14:\n                    _context7.prev = 14;\n                    _context7.t0 = _context7[\"catch\"](1);\n                    _context7.next = 18;\n                    return put(publishThirdPartyItemsFailure(_context7.t0.message));\n\n                  case 18:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, _marked7, null, [[1, 14]]);\n          };\n\n          publishChangesToThirdPartyItems = function _publishChangesToThir(thirdParty, items) {\n            var collectionId, _yield$call, signature, salt, _yield$call2, newItems, newItemCurations;\n\n            return _regeneratorRuntime.wrap(function publishChangesToThirdPartyItems$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    collectionId = getCollectionId(items);\n                    _context6.next = 3;\n                    return call(getPublishItemsSignature, thirdParty.id, items.length);\n\n                  case 3:\n                    _yield$call = _context6.sent;\n                    signature = _yield$call.signature;\n                    salt = _yield$call.salt;\n                    _context6.next = 8;\n                    return call([builder, 'publishTPCollection'], collectionId, items.map(function (i) {\n                      return i.id;\n                    }), {\n                      signature: signature,\n                      qty: items.length,\n                      salt: salt\n                    });\n\n                  case 8:\n                    _yield$call2 = _context6.sent;\n                    newItems = _yield$call2.items;\n                    newItemCurations = _yield$call2.itemCurations;\n                    return _context6.abrupt(\"return\", {\n                      newItems: newItems,\n                      newItemCurations: newItemCurations\n                    });\n\n                  case 12:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, _marked6);\n          };\n\n          getCollectionId = function _getCollectionId(items) {\n            var collectionId = items[0].collectionId;\n\n            if (!collectionId) {\n              throw new Error('The item does not have a collection associated');\n            }\n\n            return collectionId;\n          };\n\n          handlePublishThirdPartyItemSuccess = function _handlePublishThirdPa(action) {\n            var thirdPartyId;\n            return _regeneratorRuntime.wrap(function handlePublishThirdPartyItemSuccess$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    thirdPartyId = action.payload.thirdPartyId;\n                    _context5.next = 3;\n                    return put(fetchThirdPartyAvailableSlotsRequest(thirdPartyId));\n\n                  case 3:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _marked5);\n          };\n\n          handleFetchThirdPartyAvailableSlots = function _handleFetchThirdPart2(action) {\n            var thirdPartyId, availableSlots;\n            return _regeneratorRuntime.wrap(function handleFetchThirdPartyAvailableSlots$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    thirdPartyId = action.payload.thirdPartyId;\n                    _context4.prev = 1;\n                    _context4.next = 4;\n                    return call([builder, 'fetchThirdPartyAvailableSlots'], thirdPartyId);\n\n                  case 4:\n                    availableSlots = _context4.sent;\n                    _context4.next = 7;\n                    return put(fetchThirdPartyAvailableSlotsSuccess(thirdPartyId, availableSlots));\n\n                  case 7:\n                    _context4.next = 13;\n                    break;\n\n                  case 9:\n                    _context4.prev = 9;\n                    _context4.t0 = _context4[\"catch\"](1);\n                    _context4.next = 13;\n                    return put(fetchThirdPartyAvailableSlotsFailure(_context4.t0.message));\n\n                  case 13:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _marked4, null, [[1, 9]]);\n          };\n\n          handleFetchThirdPartiesRequest = function _handleFetchThirdPart(action) {\n            var address, thirdParties;\n            return _regeneratorRuntime.wrap(function handleFetchThirdPartiesRequest$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    address = action.payload.address;\n                    _context3.prev = 1;\n                    _context3.next = 4;\n                    return call([builder, 'fetchThirdParties'], address);\n\n                  case 4:\n                    thirdParties = _context3.sent;\n                    _context3.next = 7;\n                    return put(fetchThirdPartiesSuccess(thirdParties));\n\n                  case 7:\n                    _context3.next = 13;\n                    break;\n\n                  case 9:\n                    _context3.prev = 9;\n                    _context3.t0 = _context3[\"catch\"](1);\n                    _context3.next = 13;\n                    return put(fetchThirdPartiesFailure(_context3.t0.message));\n\n                  case 13:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _marked3, null, [[1, 9]]);\n          };\n\n          handleLoginSuccess = function _handleLoginSuccess(action) {\n            var wallet;\n            return _regeneratorRuntime.wrap(function handleLoginSuccess$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    wallet = action.payload.wallet;\n                    _context2.next = 3;\n                    return put(fetchThirdPartiesRequest(wallet.address));\n\n                  case 3:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _marked2);\n          };\n\n          _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleLoginSuccess), _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchThirdPartiesRequest), _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchThirdPartyAvailableSlots), _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(handlePublishThirdPartyItemSuccess), _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(publishChangesToThirdPartyItems), _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(handlePublishThirdPartyItemRequest), _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(pushChangesToThirdPartyItems), _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(handlePushChangesThirdPartyItemRequest), _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(handlePublishAndPushChangesThirdPartyItemRequest), _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(handleReviewThirdPartyRequest), _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(handleDeployBatchedThirdPartyItemsRequest);\n          _context14.next = 15;\n          return takeLatest(LOGIN_SUCCESS, handleLoginSuccess);\n\n        case 15:\n          _context14.next = 17;\n          return takeLatest(DEPLOY_BATCHED_THIRD_PARTY_ITEMS_REQUEST, handleDeployBatchedThirdPartyItemsRequest);\n\n        case 17:\n          _context14.next = 19;\n          return takeEvery(FETCH_THIRD_PARTIES_REQUEST, handleFetchThirdPartiesRequest);\n\n        case 19:\n          _context14.next = 21;\n          return takeEvery(FETCH_THIRD_PARTY_AVAILABLE_SLOTS_REQUEST, handleFetchThirdPartyAvailableSlots);\n\n        case 21:\n          _context14.next = 23;\n          return takeEvery(PUBLISH_THIRD_PARTY_ITEMS_REQUEST, handlePublishThirdPartyItemRequest);\n\n        case 23:\n          _context14.next = 25;\n          return takeEvery(PUSH_CHANGES_THIRD_PARTY_ITEMS_REQUEST, handlePushChangesThirdPartyItemRequest);\n\n        case 25:\n          _context14.next = 27;\n          return takeEvery(PUBLISH_AND_PUSH_CHANGES_THIRD_PARTY_ITEMS_REQUEST, handlePublishAndPushChangesThirdPartyItemRequest);\n\n        case 27:\n          _context14.next = 29;\n          return takeEvery(PUBLISH_THIRD_PARTY_ITEMS_SUCCESS, handlePublishThirdPartyItemSuccess);\n\n        case 29:\n          _context14.next = 31;\n          return takeLatest(REVIEW_THIRD_PARTY_REQUEST, handleReviewThirdPartyRequest);\n\n        case 31:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked13);\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/thirdParty/sagas.ts"],"names":["getContractInstance","thirdPartySaga","PQueue","takeLatest","takeEvery","call","put","select","Authenticator","Contract","providers","Network","getChainIdByNetwork","closeModal","ContractName","getContract","sendTransaction","LOGIN_SUCCESS","getItemCurations","CurationStatus","getIdentity","buildTPItemEntity","waitForTx","FETCH_THIRD_PARTIES_REQUEST","fetchThirdPartiesRequest","fetchThirdPartiesSuccess","fetchThirdPartiesFailure","fetchThirdPartyAvailableSlotsSuccess","FETCH_THIRD_PARTY_AVAILABLE_SLOTS_REQUEST","fetchThirdPartyAvailableSlotsFailure","PUBLISH_THIRD_PARTY_ITEMS_REQUEST","publishThirdPartyItemsSuccess","publishThirdPartyItemsFailure","PUSH_CHANGES_THIRD_PARTY_ITEMS_REQUEST","PUBLISH_AND_PUSH_CHANGES_THIRD_PARTY_ITEMS_REQUEST","pushChangesThirdPartyItemsSuccess","pushChangesThirdPartyItemsFailure","fetchThirdPartyAvailableSlotsRequest","PUBLISH_THIRD_PARTY_ITEMS_SUCCESS","publishAndPushChangesThirdPartyItemsSuccess","publishAndPushChangesThirdPartyItemsFailure","reviewThirdPartySuccess","reviewThirdPartyFailure","REVIEW_THIRD_PARTY_REQUEST","reviewThirdPartyTxSuccess","deployBatchedThirdPartyItemsSuccess","deployBatchedThirdPartyItemsFailure","DEPLOY_BATCHED_THIRD_PARTY_ITEMS_REQUEST","getPublishItemsSignature","contract","chainId","provider","contractData","contractInstance","address","abi","Web3Provider","builder","catalyst","handleLoginSuccess","handleFetchThirdPartiesRequest","handleFetchThirdPartyAvailableSlots","handlePublishThirdPartyItemSuccess","getCollectionId","publishChangesToThirdPartyItems","handlePublishThirdPartyItemRequest","pushChangesToThirdPartyItems","handlePushChangesThirdPartyItemRequest","handlePublishAndPushChangesThirdPartyItemRequest","handleReviewThirdPartyRequest","handleDeployBatchedThirdPartyItemsRequest","action","payload","items","collection","tree","hashes","REQUESTS_BATCH_SIZE","queue","concurrency","identity","Error","promisesOfItemsBeingDeployed","map","item","id","entity","deployEntity","authChain","signPayload","entityId","updateItemCurationStatus","APPROVED","deployedItemsCurations","clear","message","thirdPartyId","slots","merkleTreeRoot","MATIC","maticChainId","ThirdPartyRegistry","thirdPartyContract","slot","qty","salt","sigR","sigS","sigV","txHash","thirdParty","itemsToPublish","itemsWithChanges","collectionId","resultFromPublish","resultFromPushChanges","newItemCurations","newItems","newItemsCurations","itemCurations","MAX_CONCURRENT_REQUESTS","promisesOfItemsBeingUpdated","curation","find","itemCuration","itemId","status","PENDING","pushItemCuration","addAll","some","undefined","length","signature","i","availableSlots","thirdParties","wallet"],"mappings":"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","sourcesContent":["import PQueue from 'p-queue'\nimport { takeLatest, takeEvery, call, put, select } from 'redux-saga/effects'\nimport { Authenticator, AuthIdentity } from 'dcl-crypto'\nimport { CatalystClient, DeploymentPreparationData } from 'dcl-catalyst-client'\nimport { Contract, providers } from 'ethers'\nimport { ChainId, Network } from '@dcl/schemas'\nimport { getChainIdByNetwork } from 'decentraland-dapps/dist/lib/eth'\nimport { closeModal } from 'decentraland-dapps/dist/modules/modal/actions'\nimport { ContractData, ContractName, getContract } from 'decentraland-transactions'\nimport { sendTransaction } from 'decentraland-dapps/dist/modules/wallet/utils'\nimport { BuilderAPI } from 'lib/api/builder'\nimport { LoginSuccessAction, LOGIN_SUCCESS } from 'modules/identity/actions'\nimport { ItemCuration } from 'modules/curations/itemCuration/types'\nimport { Item } from 'modules/item/types'\nimport { getItemCurations } from 'modules/curations/itemCuration/selectors'\nimport { CurationStatus } from 'modules/curations/types'\nimport { getIdentity } from 'modules/identity/utils'\nimport { buildTPItemEntity } from 'modules/item/export'\nimport { waitForTx } from 'modules/transaction/utils'\nimport {\n  FETCH_THIRD_PARTIES_REQUEST,\n  fetchThirdPartiesRequest,\n  fetchThirdPartiesSuccess,\n  fetchThirdPartiesFailure,\n  FetchThirdPartiesRequestAction,\n  FetchThirdPartyAvailableSlotsRequestAction,\n  fetchThirdPartyAvailableSlotsSuccess,\n  FETCH_THIRD_PARTY_AVAILABLE_SLOTS_REQUEST,\n  fetchThirdPartyAvailableSlotsFailure,\n  PUBLISH_THIRD_PARTY_ITEMS_REQUEST,\n  PublishThirdPartyItemsRequestAction,\n  publishThirdPartyItemsSuccess,\n  publishThirdPartyItemsFailure,\n  PUSH_CHANGES_THIRD_PARTY_ITEMS_REQUEST,\n  PUBLISH_AND_PUSH_CHANGES_THIRD_PARTY_ITEMS_REQUEST,\n  PushChangesThirdPartyItemsRequestAction,\n  PublishAndPushChangesThirdPartyItemsRequestAction,\n  pushChangesThirdPartyItemsSuccess,\n  pushChangesThirdPartyItemsFailure,\n  fetchThirdPartyAvailableSlotsRequest,\n  PUBLISH_THIRD_PARTY_ITEMS_SUCCESS,\n  PublishThirdPartyItemsSuccessAction,\n  publishAndPushChangesThirdPartyItemsSuccess,\n  publishAndPushChangesThirdPartyItemsFailure,\n  ReviewThirdPartyRequestAction,\n  reviewThirdPartySuccess,\n  reviewThirdPartyFailure,\n  REVIEW_THIRD_PARTY_REQUEST,\n  reviewThirdPartyTxSuccess,\n  deployBatchedThirdPartyItemsSuccess,\n  deployBatchedThirdPartyItemsFailure,\n  DEPLOY_BATCHED_THIRD_PARTY_ITEMS_REQUEST,\n  DeployBatchedThirdPartyItemsRequestAction\n} from './actions'\nimport { getPublishItemsSignature } from './utils'\nimport { ThirdParty } from './types'\n\nexport function* getContractInstance(\n  contract: ContractName.ThirdPartyRegistry | ContractName.ChainlinkOracle,\n  chainId: ChainId,\n  provider: providers.ExternalProvider\n) {\n  const contractData: ContractData = yield call(getContract, contract, chainId)\n  const contractInstance = new Contract(contractData.address, contractData.abi, new providers.Web3Provider(provider))\n  return contractInstance\n}\n\nexport function* thirdPartySaga(builder: BuilderAPI, catalyst: CatalystClient) {\n  yield takeLatest(LOGIN_SUCCESS, handleLoginSuccess)\n  yield takeLatest(DEPLOY_BATCHED_THIRD_PARTY_ITEMS_REQUEST, handleDeployBatchedThirdPartyItemsRequest)\n  yield takeEvery(FETCH_THIRD_PARTIES_REQUEST, handleFetchThirdPartiesRequest)\n  yield takeEvery(FETCH_THIRD_PARTY_AVAILABLE_SLOTS_REQUEST, handleFetchThirdPartyAvailableSlots)\n  yield takeEvery(PUBLISH_THIRD_PARTY_ITEMS_REQUEST, handlePublishThirdPartyItemRequest)\n  yield takeEvery(PUSH_CHANGES_THIRD_PARTY_ITEMS_REQUEST, handlePushChangesThirdPartyItemRequest)\n  yield takeEvery(PUBLISH_AND_PUSH_CHANGES_THIRD_PARTY_ITEMS_REQUEST, handlePublishAndPushChangesThirdPartyItemRequest)\n  yield takeEvery(PUBLISH_THIRD_PARTY_ITEMS_SUCCESS, handlePublishThirdPartyItemSuccess)\n  yield takeLatest(REVIEW_THIRD_PARTY_REQUEST, handleReviewThirdPartyRequest)\n\n  function* handleLoginSuccess(action: LoginSuccessAction) {\n    const { wallet } = action.payload\n    yield put(fetchThirdPartiesRequest(wallet.address))\n  }\n\n  function* handleFetchThirdPartiesRequest(action: FetchThirdPartiesRequestAction) {\n    const { address } = action.payload\n    try {\n      const thirdParties: ThirdParty[] = yield call([builder, 'fetchThirdParties'], address)\n      yield put(fetchThirdPartiesSuccess(thirdParties))\n    } catch (error) {\n      yield put(fetchThirdPartiesFailure(error.message))\n    }\n  }\n\n  function* handleFetchThirdPartyAvailableSlots(action: FetchThirdPartyAvailableSlotsRequestAction) {\n    const { thirdPartyId } = action.payload\n    try {\n      const availableSlots: number = yield call([builder, 'fetchThirdPartyAvailableSlots'], thirdPartyId)\n      yield put(fetchThirdPartyAvailableSlotsSuccess(thirdPartyId, availableSlots))\n    } catch (error) {\n      yield put(fetchThirdPartyAvailableSlotsFailure(error.message))\n    }\n  }\n\n  function* handlePublishThirdPartyItemSuccess(action: PublishThirdPartyItemsSuccessAction) {\n    const { thirdPartyId } = action.payload\n    yield put(fetchThirdPartyAvailableSlotsRequest(thirdPartyId))\n  }\n\n  function getCollectionId(items: Item[]): string {\n    const collectionId = items[0].collectionId\n    if (!collectionId) {\n      throw new Error('The item does not have a collection associated')\n    }\n    return collectionId\n  }\n\n  function* publishChangesToThirdPartyItems(thirdParty: ThirdParty, items: Item[]) {\n    const collectionId = getCollectionId(items)\n    const { signature, salt } = yield call(getPublishItemsSignature, thirdParty.id, items.length)\n\n    const { items: newItems, itemCurations: newItemCurations }: { items: Item[]; itemCurations: ItemCuration[] } = yield call(\n      [builder, 'publishTPCollection'],\n      collectionId,\n      items.map(i => i.id),\n      {\n        signature,\n        qty: items.length,\n        salt\n      }\n    )\n    return { newItems, newItemCurations }\n  }\n\n  function* handlePublishThirdPartyItemRequest(action: PublishThirdPartyItemsRequestAction) {\n    const { thirdParty, items } = action.payload\n    try {\n      const collectionId = getCollectionId(items)\n      const { newItems, newItemCurations }: { newItems: Item[]; newItemCurations: ItemCuration[] } = yield call(\n        publishChangesToThirdPartyItems,\n        thirdParty,\n        items\n      )\n\n      yield put(publishThirdPartyItemsSuccess(thirdParty.id, collectionId, newItems, newItemCurations))\n      yield put(closeModal('PublishThirdPartyCollectionModal'))\n    } catch (error) {\n      yield put(publishThirdPartyItemsFailure(error.message))\n    }\n  }\n\n  function* pushChangesToThirdPartyItems(items: Item[]) {\n    const collectionId = getCollectionId(items)\n\n    const itemCurations: ItemCuration[] = yield select(getItemCurations, collectionId!)\n    const MAX_CONCURRENT_REQUESTS = 3\n    const queue = new PQueue({ concurrency: MAX_CONCURRENT_REQUESTS })\n    const promisesOfItemsBeingUpdated: (() => Promise<ItemCuration>)[] = items.map((item: Item) => {\n      const curation = itemCurations.find(itemCuration => itemCuration.itemId === item.id)\n      if (curation?.status === CurationStatus.PENDING) {\n        return () => builder.updateItemCurationStatus(item.id, CurationStatus.PENDING)\n      }\n      return () => builder.pushItemCuration(item.id) // FOR CURATIONS REJECTED/APPROVED\n    })\n    const newItemsCurations: ItemCuration[] = yield queue.addAll(promisesOfItemsBeingUpdated)\n    if (newItemsCurations.some(itemCuration => itemCuration === undefined)) {\n      throw Error('Some item curations were not pushed')\n    }\n    return newItemsCurations\n  }\n\n  function* handlePushChangesThirdPartyItemRequest(action: PushChangesThirdPartyItemsRequestAction) {\n    const { items } = action.payload\n    try {\n      const collectionId = getCollectionId(items)\n      const newItemsCurations: ItemCuration[] = yield call(pushChangesToThirdPartyItems, items)\n      yield put(pushChangesThirdPartyItemsSuccess(collectionId, newItemsCurations))\n      yield put(closeModal('PublishThirdPartyCollectionModal'))\n    } catch (error) {\n      yield put(pushChangesThirdPartyItemsFailure(error.message))\n    }\n  }\n\n  function* handlePublishAndPushChangesThirdPartyItemRequest(action: PublishAndPushChangesThirdPartyItemsRequestAction) {\n    const { thirdParty, itemsToPublish, itemsWithChanges } = action.payload\n    const collectionId = getCollectionId(itemsToPublish)\n    // We need to execute these two methods in sequence, because the push changes will create a new curation if there was one already approved.\n    // It will create them with status PENDING, so the publish will fail if it's executed after that event.\n    // Publish items\n    try {\n      const resultFromPublish: { newItems: Item[]; newItemCurations: ItemCuration[] } = yield call(\n        publishChangesToThirdPartyItems,\n        thirdParty,\n        itemsToPublish\n      )\n\n      const resultFromPushChanges: ItemCuration[] = yield call(pushChangesToThirdPartyItems, itemsWithChanges)\n      const newItemCurations = [...resultFromPublish.newItemCurations, ...resultFromPushChanges]\n\n      yield put(publishAndPushChangesThirdPartyItemsSuccess(collectionId, resultFromPublish.newItems, newItemCurations))\n      yield put(fetchThirdPartyAvailableSlotsRequest(thirdParty.id)) // re-fetch available slots after publishing\n      yield put(closeModal('PublishThirdPartyCollectionModal'))\n    } catch (error) {\n      yield put(publishAndPushChangesThirdPartyItemsFailure(error.message)) // TODO: show to the user that something went wrong\n    }\n  }\n\n  function* handleReviewThirdPartyRequest(action: ReviewThirdPartyRequestAction) {\n    const { thirdPartyId, slots, merkleTreeRoot } = action.payload\n    try {\n      const maticChainId: ChainId = yield call(getChainIdByNetwork, Network.MATIC)\n      const thirdPartyContract: ContractData = yield call(getContract, ContractName.ThirdPartyRegistry, maticChainId)\n      const txHash: string = yield call(\n        sendTransaction as any,\n        thirdPartyContract,\n        'reviewThirdPartyWithRoot',\n        thirdPartyId,\n        merkleTreeRoot,\n        slots.map(slot => [slot.qty, slot.salt, slot.sigR, slot.sigS, slot.sigV])\n      )\n      yield put(reviewThirdPartyTxSuccess(txHash, maticChainId))\n      yield call(waitForTx, txHash)\n      yield put(reviewThirdPartySuccess())\n    } catch (error) {\n      yield put(reviewThirdPartyFailure(error))\n    }\n  }\n\n  function* handleDeployBatchedThirdPartyItemsRequest(action: DeployBatchedThirdPartyItemsRequestAction) {\n    const { items, collection, tree, hashes } = action.payload\n    const REQUESTS_BATCH_SIZE = 5\n\n    let queue = new PQueue({ concurrency: REQUESTS_BATCH_SIZE })\n    try {\n      const identity: AuthIdentity | undefined = yield call(getIdentity)\n\n      if (!identity) {\n        throw new Error('Invalid Identity')\n      }\n\n      const promisesOfItemsBeingDeployed: (() => Promise<ItemCuration>)[] = items.map((item: Item) => async () => {\n        const entity: DeploymentPreparationData = await buildTPItemEntity(catalyst, builder, collection, item, tree, hashes[item.id])\n        await catalyst.deployEntity({ ...entity, authChain: Authenticator.signPayload(identity, entity.entityId) })\n        return builder.updateItemCurationStatus(item.id, CurationStatus.APPROVED)\n      })\n\n      const deployedItemsCurations: ItemCuration[] = yield call([queue, 'addAll'], promisesOfItemsBeingDeployed)\n\n      yield put(deployBatchedThirdPartyItemsSuccess(collection, deployedItemsCurations))\n    } catch (error) {\n      queue.clear()\n      yield put(deployBatchedThirdPartyItemsFailure(items, error.message))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}