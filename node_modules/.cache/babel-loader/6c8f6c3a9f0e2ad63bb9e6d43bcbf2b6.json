{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getIdentity);\n\nimport { select, put, race, take, delay } from 'redux-saga/effects';\nimport { getCurrentIdentity, isLoggedIn } from 'modules/identity/selectors';\nimport { openModal } from 'modules/modal/actions';\nimport { LOGIN_SUCCESS, LOGIN_FAILURE } from './actions';\nexport var ONE_MONTH_IN_MINUTES = 31 * 24 * 60; // Helper that always yields a valid identity\n\nexport function getIdentity() {\n  var shouldLogin, login;\n  return _regeneratorRuntime.wrap(function getIdentity$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return select(function (state) {\n            return !isLoggedIn(state);\n          });\n\n        case 2:\n          shouldLogin = _context.sent;\n\n          if (!shouldLogin) {\n            _context.next = 15;\n            break;\n          }\n\n          _context.next = 6;\n          return put(openModal('WalletLoginModal'));\n\n        case 6:\n          _context.next = 8;\n          return takeRace(LOGIN_SUCCESS, LOGIN_FAILURE);\n\n        case 8:\n          login = _context.sent;\n\n          if (!login.success) {\n            _context.next = 15;\n            break;\n          }\n\n          _context.next = 12;\n          return delay(1000);\n\n        case 12:\n          _context.next = 14;\n          return getIdentity();\n\n        case 14:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 15:\n          _context.next = 17;\n          return select(getCurrentIdentity);\n\n        case 17:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function takeRace(success, failure) {\n  return race({\n    success: take(success),\n    failure: take(failure)\n  });\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/identity/utils.ts"],"names":["getIdentity","select","put","race","take","delay","getCurrentIdentity","isLoggedIn","openModal","LOGIN_SUCCESS","LOGIN_FAILURE","ONE_MONTH_IN_MINUTES","state","shouldLogin","takeRace","login","success","failure"],"mappings":";;oDAQiBA,W;;AARjB,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,IAAtB,EAA4BC,IAA5B,EAAkCC,KAAlC,QAA+C,oBAA/C;AACA,SAASC,kBAAT,EAA6BC,UAA7B,QAA+C,4BAA/C;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,WAA7C;AAEA,OAAO,IAAMC,oBAAoB,GAAG,KAAK,EAAL,GAAU,EAAvC,C,CAEP;;AACA,OAAO,SAAUX,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACe,iBAAMC,MAAM,CAAC,UAAAW,KAAK;AAAA,mBAAI,CAACL,UAAU,CAACK,KAAD,CAAf;AAAA,WAAN,CAAZ;;AADf;AACCC,UAAAA,WADD;;AAAA,eAEDA,WAFC;AAAA;AAAA;AAAA;;AAAA;AAGH,iBAAMX,GAAG,CAACM,SAAS,CAAC,kBAAD,CAAV,CAAT;;AAHG;AAAA;AAIgB,iBAAMM,QAAQ,CAACL,aAAD,EAAgBC,aAAhB,CAAd;;AAJhB;AAIGK,UAAAA,KAJH;;AAAA,eAKCA,KAAK,CAACC,OALP;AAAA;AAAA;AAAA;;AAAA;AAOD,iBAAMX,KAAK,CAAC,IAAD,CAAX;;AAPC;AAAA;AAQM,iBAAML,WAAW,EAAjB;;AARN;AAAA;;AAAA;AAAA;AAYE,iBAAMC,MAAM,CAACK,kBAAD,CAAZ;;AAZF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeP,OAAO,SAASQ,QAAT,CAAkBE,OAAlB,EAAmCC,OAAnC,EAAoD;AACzD,SAAOd,IAAI,CAAC;AACVa,IAAAA,OAAO,EAAEZ,IAAI,CAACY,OAAD,CADH;AAEVC,IAAAA,OAAO,EAAEb,IAAI,CAACa,OAAD;AAFH,GAAD,CAAX;AAID","sourcesContent":["import { select, put, race, take, delay } from 'redux-saga/effects'\nimport { getCurrentIdentity, isLoggedIn } from 'modules/identity/selectors'\nimport { openModal } from 'modules/modal/actions'\nimport { LOGIN_SUCCESS, LOGIN_FAILURE } from './actions'\n\nexport const ONE_MONTH_IN_MINUTES = 31 * 24 * 60\n\n// Helper that always yields a valid identity\nexport function* getIdentity(): IterableIterator<any> {\n  const shouldLogin = yield select(state => !isLoggedIn(state))\n  if (shouldLogin) {\n    yield put(openModal('WalletLoginModal'))\n    const login: any = yield takeRace(LOGIN_SUCCESS, LOGIN_FAILURE)\n    if (login.success) {\n      // wait a sec and retry\n      yield delay(1000)\n      return yield getIdentity()\n    }\n  }\n  // Return current identity\n  return yield select(getCurrentIdentity)\n}\n\nexport function takeRace(success: string, failure: string) {\n  return race({\n    success: take(success),\n    failure: take(failure)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}