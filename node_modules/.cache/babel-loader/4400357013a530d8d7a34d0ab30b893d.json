{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\r\n * This is a holder class for the physics joint created by the physics plugin\r\n * It holds a set of functions to control the underlying joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\n\nvar PhysicsJoint =\n/** @class */\nfunction () {\n  /**\r\n   * Initializes the physics joint\r\n   * @param type The type of the physics joint\r\n   * @param jointData The data for the physics joint\r\n   */\n  function PhysicsJoint(\n  /**\r\n   * The type of the physics joint\r\n   */\n  type,\n  /**\r\n   * The data for the physics joint\r\n   */\n  jointData) {\n    this.type = type;\n    this.jointData = jointData;\n    jointData.nativeParams = jointData.nativeParams || {};\n  }\n\n  Object.defineProperty(PhysicsJoint.prototype, \"physicsJoint\", {\n    /**\r\n     * Gets the physics joint\r\n     */\n    get: function get() {\n      return this._physicsJoint;\n    },\n\n    /**\r\n     * Sets the physics joint\r\n     */\n    set: function set(newJoint) {\n      if (this._physicsJoint) {//remove from the wolrd\n      }\n\n      this._physicsJoint = newJoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PhysicsJoint.prototype, \"physicsPlugin\", {\n    /**\r\n     * Sets the physics plugin\r\n     */\n    set: function set(physicsPlugin) {\n      this._physicsPlugin = physicsPlugin;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Execute a function that is physics-plugin specific.\r\n   * @param {Function} func the function that will be executed.\r\n   *                        It accepts two parameters: the physics world and the physics joint\r\n   */\n\n  PhysicsJoint.prototype.executeNativeFunction = function (func) {\n    func(this._physicsPlugin.world, this._physicsJoint);\n  }; //TODO check if the native joints are the same\n  //Joint Types\n\n  /**\r\n   * Distance-Joint type\r\n   */\n\n\n  PhysicsJoint.DistanceJoint = 0;\n  /**\r\n   * Hinge-Joint type\r\n   */\n\n  PhysicsJoint.HingeJoint = 1;\n  /**\r\n   * Ball-and-Socket joint type\r\n   */\n\n  PhysicsJoint.BallAndSocketJoint = 2;\n  /**\r\n   * Wheel-Joint type\r\n   */\n\n  PhysicsJoint.WheelJoint = 3;\n  /**\r\n   * Slider-Joint type\r\n   */\n\n  PhysicsJoint.SliderJoint = 4; //OIMO\n\n  /**\r\n   * Prismatic-Joint type\r\n   */\n\n  PhysicsJoint.PrismaticJoint = 5; //\n\n  /**\r\n   * Universal-Joint type\r\n   * ENERGY FTW! (compare with this - @see http://ode-wiki.org/wiki/index.php?title=Manual:_Joint_Types_and_Functions)\r\n   */\n\n  PhysicsJoint.UniversalJoint = 6;\n  /**\r\n   * Hinge-Joint 2 type\r\n   */\n\n  PhysicsJoint.Hinge2Joint = PhysicsJoint.WheelJoint; //Cannon\n\n  /**\r\n   * Point to Point Joint type.  Similar to a Ball-Joint.  Different in parameters\r\n   */\n\n  PhysicsJoint.PointToPointJoint = 8; //Cannon only at the moment\n\n  /**\r\n   * Spring-Joint type\r\n   */\n\n  PhysicsJoint.SpringJoint = 9;\n  /**\r\n   * Lock-Joint type\r\n   */\n\n  PhysicsJoint.LockJoint = 10;\n  return PhysicsJoint;\n}();\n\nexport { PhysicsJoint };\n/**\r\n * A class representing a physics distance joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\n\nvar DistanceJoint =\n/** @class */\nfunction (_super) {\n  __extends(DistanceJoint, _super);\n  /**\r\n   *\r\n   * @param jointData The data for the Distance-Joint\r\n   */\n\n\n  function DistanceJoint(jointData) {\n    return _super.call(this, PhysicsJoint.DistanceJoint, jointData) || this;\n  }\n  /**\r\n   * Update the predefined distance.\r\n   * @param maxDistance The maximum preferred distance\r\n   * @param minDistance The minimum preferred distance\r\n   */\n\n\n  DistanceJoint.prototype.updateDistance = function (maxDistance, minDistance) {\n    this._physicsPlugin.updateDistanceJoint(this, maxDistance, minDistance);\n  };\n\n  return DistanceJoint;\n}(PhysicsJoint);\n\nexport { DistanceJoint };\n/**\r\n * Represents a Motor-Enabled Joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\n\nvar MotorEnabledJoint =\n/** @class */\nfunction (_super) {\n  __extends(MotorEnabledJoint, _super);\n  /**\r\n   * Initializes the Motor-Enabled Joint\r\n   * @param type The type of the joint\r\n   * @param jointData The physica joint data for the joint\r\n   */\n\n\n  function MotorEnabledJoint(type, jointData) {\n    return _super.call(this, type, jointData) || this;\n  }\n  /**\r\n   * Set the motor values.\r\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n   * @param force the force to apply\r\n   * @param maxForce max force for this motor.\r\n   */\n\n\n  MotorEnabledJoint.prototype.setMotor = function (force, maxForce) {\n    this._physicsPlugin.setMotor(this, force || 0, maxForce);\n  };\n  /**\r\n   * Set the motor's limits.\r\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n   * @param upperLimit The upper limit of the motor\r\n   * @param lowerLimit The lower limit of the motor\r\n   */\n\n\n  MotorEnabledJoint.prototype.setLimit = function (upperLimit, lowerLimit) {\n    this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\n  };\n\n  return MotorEnabledJoint;\n}(PhysicsJoint);\n\nexport { MotorEnabledJoint };\n/**\r\n * This class represents a single physics Hinge-Joint\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\n\nvar HingeJoint =\n/** @class */\nfunction (_super) {\n  __extends(HingeJoint, _super);\n  /**\r\n   * Initializes the Hinge-Joint\r\n   * @param jointData The joint data for the Hinge-Joint\r\n   */\n\n\n  function HingeJoint(jointData) {\n    return _super.call(this, PhysicsJoint.HingeJoint, jointData) || this;\n  }\n  /**\r\n   * Set the motor values.\r\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n   * @param {number} force the force to apply\r\n   * @param {number} maxForce max force for this motor.\r\n   */\n\n\n  HingeJoint.prototype.setMotor = function (force, maxForce) {\n    this._physicsPlugin.setMotor(this, force || 0, maxForce);\n  };\n  /**\r\n   * Set the motor's limits.\r\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n   * @param upperLimit The upper limit of the motor\r\n   * @param lowerLimit The lower limit of the motor\r\n   */\n\n\n  HingeJoint.prototype.setLimit = function (upperLimit, lowerLimit) {\n    this._physicsPlugin.setLimit(this, upperLimit, lowerLimit);\n  };\n\n  return HingeJoint;\n}(MotorEnabledJoint);\n\nexport { HingeJoint };\n/**\r\n * This class represents a dual hinge physics joint (same as wheel joint)\r\n * @see https://doc.babylonjs.com/how_to/using_the_physics_engine\r\n */\n\nvar Hinge2Joint =\n/** @class */\nfunction (_super) {\n  __extends(Hinge2Joint, _super);\n  /**\r\n   * Initializes the Hinge2-Joint\r\n   * @param jointData The joint data for the Hinge2-Joint\r\n   */\n\n\n  function Hinge2Joint(jointData) {\n    return _super.call(this, PhysicsJoint.Hinge2Joint, jointData) || this;\n  }\n  /**\r\n  * Set the motor values.\r\n  * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n  * @param {number} targetSpeed the speed the motor is to reach\r\n  * @param {number} maxForce max force for this motor.\r\n  * @param {motorIndex} the motor's index, 0 or 1.\r\n  */\n\n\n  Hinge2Joint.prototype.setMotor = function (targetSpeed, maxForce, motorIndex) {\n    if (motorIndex === void 0) {\n      motorIndex = 0;\n    }\n\n    this._physicsPlugin.setMotor(this, targetSpeed || 0, maxForce, motorIndex);\n  };\n  /**\r\n   * Set the motor limits.\r\n   * Attention, this function is plugin specific. Engines won't react 100% the same.\r\n   * @param {number} upperLimit the upper limit\r\n   * @param {number} lowerLimit lower limit\r\n   * @param {motorIndex} the motor's index, 0 or 1.\r\n   */\n\n\n  Hinge2Joint.prototype.setLimit = function (upperLimit, lowerLimit, motorIndex) {\n    if (motorIndex === void 0) {\n      motorIndex = 0;\n    }\n\n    this._physicsPlugin.setLimit(this, upperLimit, lowerLimit, motorIndex);\n  };\n\n  return Hinge2Joint;\n}(MotorEnabledJoint);\n\nexport { Hinge2Joint };","map":null,"metadata":{},"sourceType":"module"}