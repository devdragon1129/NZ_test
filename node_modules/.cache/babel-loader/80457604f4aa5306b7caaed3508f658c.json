{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/ItemEditorPage/CenterPanel/AvatarWearableDropdown/AvatarWearableDropdown.tsx\";\nimport React from 'react';\nimport { Dropdown } from 'decentraland-ui';\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils';\nimport { getName, filterWearables } from 'modules/editor/utils';\n\nvar AvatarWearableDropdown = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(AvatarWearableDropdown, _React$PureComponent);\n\n  function AvatarWearableDropdown() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AvatarWearableDropdown);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AvatarWearableDropdown)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleAvatarChangeWearable = function (_event, data) {\n      var _this$props = _this.props,\n          wearable = _this$props.wearable,\n          category = _this$props.category,\n          bodyShape = _this$props.bodyShape,\n          onChange = _this$props.onChange,\n          baseWearables = _this$props.baseWearables;\n      var newWearable = data.value ? baseWearables.find(function (wearable) {\n        return wearable.id === data.value;\n      }) : null;\n\n      if (wearable !== newWearable) {\n        onChange(category, bodyShape, newWearable !== null && newWearable !== void 0 ? newWearable : null);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(AvatarWearableDropdown, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          wearable = _this$props2.wearable,\n          bodyShape = _this$props2.bodyShape,\n          category = _this$props2.category,\n          label = _this$props2.label,\n          isNullable = _this$props2.isNullable,\n          baseWearables = _this$props2.baseWearables;\n      var options = filterWearables(baseWearables, category, bodyShape).map(function (wearable) {\n        return {\n          value: wearable.id,\n          text: getName(wearable)\n        };\n      });\n\n      if (isNullable) {\n        options.push({\n          value: '',\n          text: t('global.none')\n        });\n      }\n\n      var selected = wearable ? options.find(function (option) {\n        return option.value === wearable.id;\n      }) : null;\n      return /*#__PURE__*/React.createElement(Dropdown, {\n        inline: true,\n        direction: \"right\",\n        className: \"AvatarWearableDropdown Select\",\n        value: wearable ? wearable.id : '',\n        options: options,\n        scrolling: true,\n        onChange: this.handleAvatarChangeWearable,\n        trigger: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"label\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }\n        }, label), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"value\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }\n        }, selected ? selected.text : t('global.none')), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"handle\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return AvatarWearableDropdown;\n}(React.PureComponent);\n\nexport { AvatarWearableDropdown as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/ItemEditorPage/CenterPanel/AvatarWearableDropdown/AvatarWearableDropdown.tsx"],"names":["React","Dropdown","t","getName","filterWearables","AvatarWearableDropdown","handleAvatarChangeWearable","_event","data","props","wearable","category","bodyShape","onChange","baseWearables","newWearable","value","find","id","label","isNullable","options","map","text","push","selected","option","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Dropdown, DropdownItemProps, DropdownProps } from 'decentraland-ui'\nimport { t } from 'decentraland-dapps/dist/modules/translation/utils'\nimport { getName, filterWearables } from 'modules/editor/utils'\nimport { Props } from './AvatarWearableDropdown.types'\n\nexport default class AvatarWearableDropdown extends React.PureComponent<Props> {\n  handleAvatarChangeWearable = (_event: React.SyntheticEvent<HTMLElement, Event>, data: DropdownProps) => {\n    const { wearable, category, bodyShape, onChange, baseWearables } = this.props\n    const newWearable = data.value ? baseWearables.find(wearable => wearable.id === data.value) : null\n    if (wearable !== newWearable) {\n      onChange(category, bodyShape, newWearable ?? null)\n    }\n  }\n\n  render() {\n    const { wearable, bodyShape, category, label, isNullable, baseWearables } = this.props\n    const options: DropdownItemProps[] = filterWearables(baseWearables, category, bodyShape).map(wearable => ({\n      value: wearable.id,\n      text: getName(wearable)\n    }))\n    if (isNullable) {\n      options.push({ value: '', text: t('global.none') })\n    }\n    const selected = wearable ? options.find(option => option.value === wearable.id) : null\n    return (\n      <Dropdown\n        inline\n        direction=\"right\"\n        className=\"AvatarWearableDropdown Select\"\n        value={wearable ? wearable.id : ''}\n        options={options}\n        scrolling\n        onChange={this.handleAvatarChangeWearable}\n        trigger={\n          <>\n            <div className=\"label\">{label}</div>\n            <div className=\"value\">{selected ? selected.text : t('global.none')}</div>\n            <div className=\"handle\" />\n          </>\n        }\n      ></Dropdown>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}