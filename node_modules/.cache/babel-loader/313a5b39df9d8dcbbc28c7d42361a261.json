{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Authenticator } from 'dcl-crypto';\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { getData } from 'modules/identity/selectors';\nvar AUTH_CHAIN_HEADER_PREFIX = 'x-identity-auth-chain-';\nexport var Authorization = /*#__PURE__*/function () {\n  function Authorization(store) {\n    _classCallCheck(this, Authorization);\n\n    this.store = void 0;\n    this.store = store;\n  }\n\n  _createClass(Authorization, [{\n    key: \"createAuthHeaders\",\n    value: function createAuthHeaders() {\n      var method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'get';\n      var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var headers = {};\n      var state = this.store.getState();\n      var address = getAddress(state);\n\n      if (address) {\n        var identities = getData(state);\n        var identity = identities[address];\n\n        if (identity) {\n          var endpoint = (method + ':' + path).toLowerCase();\n          var authChain = Authenticator.signPayload(identity, endpoint);\n\n          for (var i = 0; i < authChain.length; i++) {\n            headers[AUTH_CHAIN_HEADER_PREFIX + i] = JSON.stringify(authChain[i]);\n          }\n        }\n      }\n\n      return headers;\n    }\n  }]);\n\n  return Authorization;\n}();","map":{"version":3,"sources":["/opt/work/NZ_test/src/lib/api/auth.ts"],"names":["Authenticator","getAddress","getData","AUTH_CHAIN_HEADER_PREFIX","Authorization","store","method","path","headers","state","getState","address","identities","identity","endpoint","toLowerCase","authChain","signPayload","i","length","JSON","stringify"],"mappings":";;AAAA,SAASA,aAAT,QAA8B,YAA9B;AACA,SAASC,UAAT,QAA2B,kDAA3B;AAEA,SAASC,OAAT,QAAwB,4BAAxB;AAEA,IAAMC,wBAAwB,GAAG,wBAAjC;AAEA,WAAaC,aAAb;AAGE,yBAAYC,KAAZ,EAA8B;AAAA;;AAAA,SAFtBA,KAEsB;AAC5B,SAAKA,KAAL,GAAaA,KAAb;AACD;;AALH;AAAA;AAAA,wCAO+D;AAAA,UAA3CC,MAA2C,uEAA1B,KAA0B;AAAA,UAAnBC,IAAmB,uEAAJ,EAAI;AAC3D,UAAMC,OAA+B,GAAG,EAAxC;AACA,UAAMC,KAAK,GAAG,KAAKJ,KAAL,CAAWK,QAAX,EAAd;AACA,UAAMC,OAAO,GAAGV,UAAU,CAACQ,KAAD,CAA1B;;AACA,UAAIE,OAAJ,EAAa;AACX,YAAMC,UAAU,GAAGV,OAAO,CAACO,KAAD,CAA1B;AACA,YAAMI,QAAQ,GAAGD,UAAU,CAACD,OAAD,CAA3B;;AACA,YAAIE,QAAJ,EAAc;AACZ,cAAMC,QAAQ,GAAG,CAACR,MAAM,GAAG,GAAT,GAAeC,IAAhB,EAAsBQ,WAAtB,EAAjB;AACA,cAAMC,SAAS,GAAGhB,aAAa,CAACiB,WAAd,CAA0BJ,QAA1B,EAAoCC,QAApC,CAAlB;;AACA,eAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzCV,YAAAA,OAAO,CAACL,wBAAwB,GAAGe,CAA5B,CAAP,GAAwCE,IAAI,CAACC,SAAL,CAAeL,SAAS,CAACE,CAAD,CAAxB,CAAxC;AACD;AACF;AACF;;AACD,aAAOV,OAAP;AACD;AAvBH;;AAAA;AAAA","sourcesContent":["import { Authenticator } from 'dcl-crypto'\nimport { getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { RootStore } from 'modules/common/types'\nimport { getData } from 'modules/identity/selectors'\n\nconst AUTH_CHAIN_HEADER_PREFIX = 'x-identity-auth-chain-'\n\nexport class Authorization {\n  private store: RootStore\n\n  constructor(store: RootStore) {\n    this.store = store\n  }\n\n  createAuthHeaders(method: string = 'get', path: string = '') {\n    const headers: Record<string, string> = {}\n    const state = this.store.getState()\n    const address = getAddress(state)\n    if (address) {\n      const identities = getData(state)\n      const identity = identities[address]\n      if (identity) {\n        const endpoint = (method + ':' + path).toLowerCase()\n        const authChain = Authenticator.signPayload(identity, endpoint)\n        for (let i = 0; i < authChain.length; i++) {\n          headers[AUTH_CHAIN_HEADER_PREFIX + i] = JSON.stringify(authChain[i])\n        }\n      }\n    }\n    return headers\n  }\n}\n"]},"metadata":{},"sourceType":"module"}