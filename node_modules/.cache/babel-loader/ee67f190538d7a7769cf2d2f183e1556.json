{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IntercomWidget = void 0;\n\nvar utils_1 = require(\"../../lib/utils\");\n\nvar intercomWindow = window;\n\nvar IntercomWidget = /*#__PURE__*/function () {\n  function IntercomWidget() {\n    _classCallCheck(this, IntercomWidget);\n  }\n\n  _createClass(IntercomWidget, [{\n    key: \"init\",\n    value: function init(appId, settings) {\n      this.appId = appId;\n\n      if (settings) {\n        this.settings = settings;\n      }\n    }\n  }, {\n    key: \"inject\",\n    value: function inject() {\n      var _this = this;\n\n      return new Promise(function (resolve) {\n        if (_this.isInjected()) {\n          return resolve();\n        }\n\n        var script = utils_1.insertScript({\n          src: \"https://widget.intercom.io/widget/\".concat(_this._appId)\n        });\n        script.addEventListener('load', function () {\n          return resolve();\n        }, true);\n      }).then(function () {\n        _this.client = getWindowClient(_this._appId);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.client('reattach_activator');\n      this.client('update', Object.assign(Object.assign({}, data), {\n        app_id: this._appId\n      }));\n    }\n  }, {\n    key: \"showNewMessage\",\n    value: function showNewMessage(text) {\n      this.client('showNewMessage', text);\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      this.client('shutdown');\n    }\n  }, {\n    key: \"isInjected\",\n    value: function isInjected() {\n      return _isInjected();\n    }\n  }, {\n    key: \"appId\",\n    set: function set(id) {\n      this._appId = id;\n      this.client = getWindowClient(id);\n    },\n    get: function get() {\n      return this._appId;\n    }\n  }, {\n    key: \"settings\",\n    set: function set(settings) {\n      this._settings = settings;\n      intercomWindow.intercomSettings = settings;\n    },\n    get: function get() {\n      return this._settings;\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!this.instance) {\n        this.instance = new IntercomWidget();\n      }\n\n      return this.instance;\n    }\n  }]);\n\n  return IntercomWidget;\n}();\n\nexports.IntercomWidget = IntercomWidget;\n\nfunction getWindowClient(appId) {\n  return function () {\n    if (!appId) {\n      return console.warn('Intercom app id empty. Check that the environment is propery set');\n    }\n\n    if (utils_1.isMobile()) {\n      return;\n    }\n\n    if (!_isInjected()) {\n      return console.warn('Intercom called before injection');\n    }\n\n    intercomWindow.Intercom.apply(intercomWindow, arguments);\n  };\n}\n\nfunction _isInjected() {\n  return typeof intercomWindow.Intercom === 'function';\n}","map":null,"metadata":{},"sourceType":"script"}