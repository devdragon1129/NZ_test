{"ast":null,"code":"import { connect } from 'react-redux';\nimport { getLocation, push } from 'connected-react-router';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getData as getWallet } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { getData as getAuthorizations } from 'decentraland-dapps/dist/modules/authorization/selectors';\nimport { locations } from 'routing/locations';\nimport { getCollectionId } from 'modules/location/selectors';\nimport { getCollection, getLoading as getLoadingCollection } from 'modules/collection/selectors';\nimport { getCollectionItems, getLoading as getLoadingItem, getPaginationData } from 'modules/item/selectors';\nimport { FETCH_COLLECTION_ITEMS_REQUEST } from 'modules/item/actions';\nimport { FETCH_COLLECTIONS_REQUEST, DELETE_COLLECTION_REQUEST } from 'modules/collection/actions';\nimport { openModal } from 'modules/modal/actions';\nimport { getCollectionThirdParty, isFetchingAvailableSlots } from 'modules/thirdParty/selectors';\nimport CollectionDetailPage from './ThirdPartyCollectionDetailPage';\nimport { fetchThirdPartyAvailableSlotsRequest } from 'modules/thirdParty/actions';\nimport { getCollectionType } from 'modules/collection/utils';\nimport { CollectionType } from 'modules/collection/types';\n\nvar mapState = function mapState(state) {\n  var _getPaginationData, _getLocation$query$pa;\n\n  var collectionId = getCollectionId(state) || '';\n  var collection = getCollection(state, collectionId);\n  var totalItems = ((_getPaginationData = getPaginationData(state, collectionId)) === null || _getPaginationData === void 0 ? void 0 : _getPaginationData.total) || null;\n  var items = collection ? getCollectionItems(state, collection.id) : [];\n  var paginatedData = collection && getPaginationData(state, collection.id) || null;\n  var currentPage = Number((_getLocation$query$pa = getLocation(state).query.page) !== null && _getLocation$query$pa !== void 0 ? _getLocation$query$pa : 1);\n  return {\n    items: items,\n    totalItems: totalItems,\n    currentPage: currentPage,\n    paginatedData: paginatedData,\n    wallet: getWallet(state),\n    collection: collection,\n    thirdParty: collection && getCollectionType(collection) === CollectionType.THIRD_PARTY ? getCollectionThirdParty(state, collection) : null,\n    authorizations: getAuthorizations(state),\n    isLoading: isLoadingType(getLoadingCollection(state), FETCH_COLLECTIONS_REQUEST) || isLoadingType(getLoadingCollection(state), DELETE_COLLECTION_REQUEST) || isLoadingType(getLoadingItem(state), FETCH_COLLECTION_ITEMS_REQUEST),\n    isLoadingAvailableSlots: isFetchingAvailableSlots(state)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onNavigate: function onNavigate(path) {\n      return dispatch(push(path));\n    },\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    },\n    onFetchAvailableSlots: function onFetchAvailableSlots(thirdPartyId) {\n      return dispatch(fetchThirdPartyAvailableSlotsRequest(thirdPartyId));\n    },\n    onPageChange: function onPageChange(collectionId, page) {\n      return dispatch(push(locations.thirdPartyCollectionDetail(collectionId, {\n        page: page\n      })));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(CollectionDetailPage);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/ThirdPartyCollectionDetailPage/ThirdPartyCollectionDetailPage.container.ts"],"names":["connect","getLocation","push","isLoadingType","getData","getWallet","getAuthorizations","locations","getCollectionId","getCollection","getLoading","getLoadingCollection","getCollectionItems","getLoadingItem","getPaginationData","FETCH_COLLECTION_ITEMS_REQUEST","FETCH_COLLECTIONS_REQUEST","DELETE_COLLECTION_REQUEST","openModal","getCollectionThirdParty","isFetchingAvailableSlots","CollectionDetailPage","fetchThirdPartyAvailableSlotsRequest","getCollectionType","CollectionType","mapState","state","collectionId","collection","totalItems","total","items","id","paginatedData","currentPage","Number","query","page","wallet","thirdParty","THIRD_PARTY","authorizations","isLoading","isLoadingAvailableSlots","mapDispatch","dispatch","onNavigate","path","onOpenModal","name","metadata","onFetchAvailableSlots","thirdPartyId","onPageChange","thirdPartyCollectionDetail"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,IAAtB,QAAkC,wBAAlC;AACA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,OAAO,IAAIC,SAApB,QAAqC,kDAArC;AACA,SAASD,OAAO,IAAIE,iBAApB,QAA6C,yDAA7C;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,SAASC,eAAT,QAAgC,4BAAhC;AACA,SAASC,aAAT,EAAwBC,UAAU,IAAIC,oBAAtC,QAAkE,8BAAlE;AACA,SAASC,kBAAT,EAA6BF,UAAU,IAAIG,cAA3C,EAA2DC,iBAA3D,QAAoF,wBAApF;AACA,SAASC,8BAAT,QAA+C,sBAA/C;AACA,SAASC,yBAAT,EAAoCC,yBAApC,QAAqE,4BAArE;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,uBAAT,EAAkCC,wBAAlC,QAAkE,8BAAlE;AAEA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,SAASC,oCAAT,QAAqD,4BAArD;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAqC;AAAA;;AACpD,MAAMC,YAAY,GAAGnB,eAAe,CAACkB,KAAD,CAAf,IAA0B,EAA/C;AACA,MAAME,UAAU,GAAGnB,aAAa,CAACiB,KAAD,EAAQC,YAAR,CAAhC;AACA,MAAME,UAAU,GAAG,uBAAAf,iBAAiB,CAACY,KAAD,EAAQC,YAAR,CAAjB,0EAAwCG,KAAxC,KAAiD,IAApE;AACA,MAAMC,KAAK,GAAGH,UAAU,GAAGhB,kBAAkB,CAACc,KAAD,EAAQE,UAAU,CAACI,EAAnB,CAArB,GAA8C,EAAtE;AACA,MAAMC,aAAa,GAAIL,UAAU,IAAId,iBAAiB,CAACY,KAAD,EAAQE,UAAU,CAACI,EAAnB,CAAhC,IAA2D,IAAjF;AACA,MAAME,WAAW,GAAGC,MAAM,0BAAClC,WAAW,CAACyB,KAAD,CAAX,CAAmBU,KAAnB,CAAyBC,IAA1B,yEAAkC,CAAlC,CAA1B;AACA,SAAO;AACLN,IAAAA,KAAK,EAALA,KADK;AAELF,IAAAA,UAAU,EAAVA,UAFK;AAGLK,IAAAA,WAAW,EAAXA,WAHK;AAILD,IAAAA,aAAa,EAAbA,aAJK;AAKLK,IAAAA,MAAM,EAAEjC,SAAS,CAACqB,KAAD,CALZ;AAMLE,IAAAA,UAAU,EAAVA,UANK;AAOLW,IAAAA,UAAU,EACRX,UAAU,IAAIL,iBAAiB,CAACK,UAAD,CAAjB,KAAkCJ,cAAc,CAACgB,WAA/D,GAA6ErB,uBAAuB,CAACO,KAAD,EAAQE,UAAR,CAApG,GAA0H,IARvH;AASLa,IAAAA,cAAc,EAAEnC,iBAAiB,CAACoB,KAAD,CAT5B;AAULgB,IAAAA,SAAS,EACPvC,aAAa,CAACQ,oBAAoB,CAACe,KAAD,CAArB,EAA8BV,yBAA9B,CAAb,IACAb,aAAa,CAACQ,oBAAoB,CAACe,KAAD,CAArB,EAA8BT,yBAA9B,CADb,IAEAd,aAAa,CAACU,cAAc,CAACa,KAAD,CAAf,EAAwBX,8BAAxB,CAbV;AAcL4B,IAAAA,uBAAuB,EAAEvB,wBAAwB,CAACM,KAAD;AAd5C,GAAP;AAgBD,CAvBD;;AAyBA,IAAMkB,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,UAAU,EAAE,oBAAAC,IAAI;AAAA,aAAIF,QAAQ,CAAC3C,IAAI,CAAC6C,IAAD,CAAL,CAAZ;AAAA,KADgD;AAEhEC,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,QAAP;AAAA,aAAoBL,QAAQ,CAAC3B,SAAS,CAAC+B,IAAD,EAAOC,QAAP,CAAV,CAA5B;AAAA,KAFmD;AAGhEC,IAAAA,qBAAqB,EAAE,+BAACC,YAAD;AAAA,aAA0BP,QAAQ,CAACvB,oCAAoC,CAAC8B,YAAD,CAArC,CAAlC;AAAA,KAHyC;AAIhEC,IAAAA,YAAY,EAAE,sBAAC1B,YAAD,EAAuBU,IAAvB;AAAA,aAAwCQ,QAAQ,CAAC3C,IAAI,CAACK,SAAS,CAAC+C,0BAAV,CAAqC3B,YAArC,EAAmD;AAAEU,QAAAA,IAAI,EAAJA;AAAF,OAAnD,CAAD,CAAL,CAAhD;AAAA;AAJkD,GAA9C;AAAA,CAApB;;AAOA,eAAerC,OAAO,CAACyB,QAAD,EAAWmB,WAAX,CAAP,CAA+BvB,oBAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { getLocation, push } from 'connected-react-router'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { getData as getWallet } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { getData as getAuthorizations } from 'decentraland-dapps/dist/modules/authorization/selectors'\nimport { locations } from 'routing/locations'\nimport { RootState } from 'modules/common/types'\nimport { getCollectionId } from 'modules/location/selectors'\nimport { getCollection, getLoading as getLoadingCollection } from 'modules/collection/selectors'\nimport { getCollectionItems, getLoading as getLoadingItem, getPaginationData } from 'modules/item/selectors'\nimport { FETCH_COLLECTION_ITEMS_REQUEST } from 'modules/item/actions'\nimport { FETCH_COLLECTIONS_REQUEST, DELETE_COLLECTION_REQUEST } from 'modules/collection/actions'\nimport { openModal } from 'modules/modal/actions'\nimport { getCollectionThirdParty, isFetchingAvailableSlots } from 'modules/thirdParty/selectors'\nimport { MapStateProps, MapDispatchProps, MapDispatch } from './ThirdPartyCollectionDetailPage.types'\nimport CollectionDetailPage from './ThirdPartyCollectionDetailPage'\nimport { fetchThirdPartyAvailableSlotsRequest } from 'modules/thirdParty/actions'\nimport { getCollectionType } from 'modules/collection/utils'\nimport { CollectionType } from 'modules/collection/types'\n\nconst mapState = (state: RootState): MapStateProps => {\n  const collectionId = getCollectionId(state) || ''\n  const collection = getCollection(state, collectionId)\n  const totalItems = getPaginationData(state, collectionId)?.total || null\n  const items = collection ? getCollectionItems(state, collection.id) : []\n  const paginatedData = (collection && getPaginationData(state, collection.id)) || null\n  const currentPage = Number(getLocation(state).query.page ?? 1)\n  return {\n    items,\n    totalItems,\n    currentPage,\n    paginatedData,\n    wallet: getWallet(state)!,\n    collection,\n    thirdParty:\n      collection && getCollectionType(collection) === CollectionType.THIRD_PARTY ? getCollectionThirdParty(state, collection) : null,\n    authorizations: getAuthorizations(state),\n    isLoading:\n      isLoadingType(getLoadingCollection(state), FETCH_COLLECTIONS_REQUEST) ||\n      isLoadingType(getLoadingCollection(state), DELETE_COLLECTION_REQUEST) ||\n      isLoadingType(getLoadingItem(state), FETCH_COLLECTION_ITEMS_REQUEST),\n    isLoadingAvailableSlots: isFetchingAvailableSlots(state)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onNavigate: path => dispatch(push(path)),\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata)),\n  onFetchAvailableSlots: (thirdPartyId: string) => dispatch(fetchThirdPartyAvailableSlotsRequest(thirdPartyId)),\n  onPageChange: (collectionId: string, page: number) => dispatch(push(locations.thirdPartyCollectionDetail(collectionId, { page })))\n})\n\nexport default connect(mapState, mapDispatch)(CollectionDetailPage)\n"]},"metadata":{},"sourceType":"module"}