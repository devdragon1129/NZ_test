{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Action } from \"./action\";\nimport { _TypeStore } from \"../Misc/typeStore\";\n/**\r\n * A Condition applied to an Action\r\n */\n\nvar Condition =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Condition\r\n   * @param actionManager the manager of the action the condition is applied to\r\n   */\n  function Condition(actionManager) {\n    this._actionManager = actionManager;\n  }\n  /**\r\n   * Check if the current condition is valid\r\n   * @returns a boolean\r\n   */\n\n\n  Condition.prototype.isValid = function () {\n    return true;\n  };\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Condition.prototype._getProperty = function (propertyPath) {\n    return this._actionManager._getProperty(propertyPath);\n  };\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Condition.prototype._getEffectiveTarget = function (target, propertyPath) {\n    return this._actionManager._getEffectiveTarget(target, propertyPath);\n  };\n  /**\r\n   * Serialize placeholder for child classes\r\n   * @returns the serialized object\r\n   */\n\n\n  Condition.prototype.serialize = function () {};\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  Condition.prototype._serialize = function (serializedCondition) {\n    return {\n      type: 2,\n      children: [],\n      name: serializedCondition.name,\n      properties: serializedCondition.properties\n    };\n  };\n\n  return Condition;\n}();\n\nexport { Condition };\n/**\r\n * Defines specific conditional operators as extensions of Condition\r\n */\n\nvar ValueCondition =\n/** @class */\nfunction (_super) {\n  __extends(ValueCondition, _super);\n  /**\r\n   * Creates a new ValueCondition\r\n   * @param actionManager manager for the action the condition applies to\r\n   * @param target for the action\r\n   * @param propertyPath path to specify the property of the target the conditional operator uses\r\n   * @param value the value compared by the conditional operator against the current value of the property\r\n   * @param operator the conditional operator, default ValueCondition.IsEqual\r\n   */\n\n\n  function ValueCondition(actionManager, target,\n  /** path to specify the property of the target the conditional operator uses  */\n  propertyPath,\n  /** the value compared by the conditional operator against the current value of the property */\n  value,\n  /** the conditional operator, default ValueCondition.IsEqual */\n  operator) {\n    if (operator === void 0) {\n      operator = ValueCondition.IsEqual;\n    }\n\n    var _this = _super.call(this, actionManager) || this;\n\n    _this.propertyPath = propertyPath;\n    _this.value = value;\n    _this.operator = operator;\n    _this._target = target;\n    _this._effectiveTarget = _this._getEffectiveTarget(target, _this.propertyPath);\n    _this._property = _this._getProperty(_this.propertyPath);\n    return _this;\n  }\n\n  Object.defineProperty(ValueCondition, \"IsEqual\", {\n    /**\r\n     * returns the number for IsEqual\r\n     */\n    get: function get() {\n      return ValueCondition._IsEqual;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ValueCondition, \"IsDifferent\", {\n    /**\r\n     * Returns the number for IsDifferent\r\n     */\n    get: function get() {\n      return ValueCondition._IsDifferent;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ValueCondition, \"IsGreater\", {\n    /**\r\n     * Returns the number for IsGreater\r\n     */\n    get: function get() {\n      return ValueCondition._IsGreater;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ValueCondition, \"IsLesser\", {\n    /**\r\n     * Returns the number for IsLesser\r\n     */\n    get: function get() {\n      return ValueCondition._IsLesser;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Compares the given value with the property value for the specified conditional operator\r\n   * @returns the result of the comparison\r\n   */\n\n  ValueCondition.prototype.isValid = function () {\n    switch (this.operator) {\n      case ValueCondition.IsGreater:\n        return this._effectiveTarget[this._property] > this.value;\n\n      case ValueCondition.IsLesser:\n        return this._effectiveTarget[this._property] < this.value;\n\n      case ValueCondition.IsEqual:\n      case ValueCondition.IsDifferent:\n        var check;\n\n        if (this.value.equals) {\n          check = this.value.equals(this._effectiveTarget[this._property]);\n        } else {\n          check = this.value === this._effectiveTarget[this._property];\n        }\n\n        return this.operator === ValueCondition.IsEqual ? check : !check;\n    }\n\n    return false;\n  };\n  /**\r\n   * Serialize the ValueCondition into a JSON compatible object\r\n   * @returns serialization object\r\n   */\n\n\n  ValueCondition.prototype.serialize = function () {\n    return this._serialize({\n      name: \"ValueCondition\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"propertyPath\",\n        value: this.propertyPath\n      }, {\n        name: \"value\",\n        value: Action._SerializeValueAsString(this.value)\n      }, {\n        name: \"operator\",\n        value: ValueCondition.GetOperatorName(this.operator)\n      }]\n    });\n  };\n  /**\r\n   * Gets the name of the conditional operator for the ValueCondition\r\n   * @param operator the conditional operator\r\n   * @returns the name\r\n   */\n\n\n  ValueCondition.GetOperatorName = function (operator) {\n    switch (operator) {\n      case ValueCondition._IsEqual:\n        return \"IsEqual\";\n\n      case ValueCondition._IsDifferent:\n        return \"IsDifferent\";\n\n      case ValueCondition._IsGreater:\n        return \"IsGreater\";\n\n      case ValueCondition._IsLesser:\n        return \"IsLesser\";\n\n      default:\n        return \"\";\n    }\n  };\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n\n  ValueCondition._IsEqual = 0;\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n  ValueCondition._IsDifferent = 1;\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n  ValueCondition._IsGreater = 2;\n  /**\r\n   * Internal only\r\n   * @hidden\r\n   */\n\n  ValueCondition._IsLesser = 3;\n  return ValueCondition;\n}(Condition);\n\nexport { ValueCondition };\n/**\r\n * Defines a predicate condition as an extension of Condition\r\n */\n\nvar PredicateCondition =\n/** @class */\nfunction (_super) {\n  __extends(PredicateCondition, _super);\n  /**\r\n   * Creates a new PredicateCondition\r\n   * @param actionManager manager for the action the condition applies to\r\n   * @param predicate defines the predicate function used to validate the condition\r\n   */\n\n\n  function PredicateCondition(actionManager,\n  /** defines the predicate function used to validate the condition */\n  predicate) {\n    var _this = _super.call(this, actionManager) || this;\n\n    _this.predicate = predicate;\n    return _this;\n  }\n  /**\r\n   * @returns the validity of the predicate condition\r\n   */\n\n\n  PredicateCondition.prototype.isValid = function () {\n    return this.predicate();\n  };\n\n  return PredicateCondition;\n}(Condition);\n\nexport { PredicateCondition };\n/**\r\n * Defines a state condition as an extension of Condition\r\n */\n\nvar StateCondition =\n/** @class */\nfunction (_super) {\n  __extends(StateCondition, _super);\n  /**\r\n   * Creates a new StateCondition\r\n   * @param actionManager manager for the action the condition applies to\r\n   * @param target of the condition\r\n   * @param value to compare with target state\r\n   */\n\n\n  function StateCondition(actionManager, target,\n  /** Value to compare with target state  */\n  value) {\n    var _this = _super.call(this, actionManager) || this;\n\n    _this.value = value;\n    _this._target = target;\n    return _this;\n  }\n  /**\r\n   * Gets a boolean indicating if the current condition is met\r\n   * @returns the validity of the state\r\n   */\n\n\n  StateCondition.prototype.isValid = function () {\n    return this._target.state === this.value;\n  };\n  /**\r\n   * Serialize the StateCondition into a JSON compatible object\r\n   * @returns serialization object\r\n   */\n\n\n  StateCondition.prototype.serialize = function () {\n    return this._serialize({\n      name: \"StateCondition\",\n      properties: [Action._GetTargetProperty(this._target), {\n        name: \"value\",\n        value: this.value\n      }]\n    });\n  };\n\n  return StateCondition;\n}(Condition);\n\nexport { StateCondition };\n_TypeStore.RegisteredTypes[\"BABYLON.ValueCondition\"] = ValueCondition;\n_TypeStore.RegisteredTypes[\"BABYLON.PredicateCondition\"] = PredicateCondition;\n_TypeStore.RegisteredTypes[\"BABYLON.StateCondition\"] = StateCondition;","map":null,"metadata":{},"sourceType":"module"}