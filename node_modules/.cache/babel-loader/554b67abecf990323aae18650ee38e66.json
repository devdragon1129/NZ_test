{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Engine } from \"../../Engines/engine\";\nimport { Size } from '../../Maths/math.size';\nimport { Observable } from '../../Misc/observable';\nimport { Tools } from '../../Misc/tools';\nimport { DomManagement } from '../../Misc/domManagement';\nObject.defineProperty(Engine.prototype, \"isInVRExclusivePointerMode\", {\n  get: function get() {\n    return this._vrExclusivePointerMode;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nEngine.prototype._prepareVRComponent = function () {\n  this._vrSupported = false;\n  this._vrExclusivePointerMode = false;\n  this.onVRDisplayChangedObservable = new Observable();\n  this.onVRRequestPresentComplete = new Observable();\n  this.onVRRequestPresentStart = new Observable();\n};\n\nEngine.prototype.isVRDevicePresent = function () {\n  return !!this._vrDisplay;\n};\n\nEngine.prototype.getVRDevice = function () {\n  return this._vrDisplay;\n};\n\nEngine.prototype.initWebVR = function () {\n  this.initWebVRAsync();\n  return this.onVRDisplayChangedObservable;\n};\n\nEngine.prototype.initWebVRAsync = function () {\n  var _this = this;\n\n  var notifyObservers = function notifyObservers() {\n    var eventArgs = {\n      vrDisplay: _this._vrDisplay,\n      vrSupported: _this._vrSupported\n    };\n\n    _this.onVRDisplayChangedObservable.notifyObservers(eventArgs);\n\n    _this._webVRInitPromise = new Promise(function (res) {\n      res(eventArgs);\n    });\n  };\n\n  if (!this._onVrDisplayConnect) {\n    this._onVrDisplayConnect = function (event) {\n      _this._vrDisplay = event.display;\n      notifyObservers();\n    };\n\n    this._onVrDisplayDisconnect = function () {\n      _this._vrDisplay.cancelAnimationFrame(_this._frameHandler);\n\n      _this._vrDisplay = undefined;\n      _this._frameHandler = Engine.QueueNewFrame(_this._boundRenderFunction);\n      notifyObservers();\n    };\n\n    this._onVrDisplayPresentChange = function () {\n      _this._vrExclusivePointerMode = _this._vrDisplay && _this._vrDisplay.isPresenting;\n    };\n\n    var hostWindow = this.getHostWindow();\n\n    if (hostWindow) {\n      hostWindow.addEventListener('vrdisplayconnect', this._onVrDisplayConnect);\n      hostWindow.addEventListener('vrdisplaydisconnect', this._onVrDisplayDisconnect);\n      hostWindow.addEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);\n    }\n  }\n\n  this._webVRInitPromise = this._webVRInitPromise || this._getVRDisplaysAsync();\n\n  this._webVRInitPromise.then(notifyObservers);\n\n  return this._webVRInitPromise;\n};\n\nEngine.prototype._getVRDisplaysAsync = function () {\n  var _this = this;\n\n  return new Promise(function (res) {\n    if (navigator.getVRDisplays) {\n      navigator.getVRDisplays().then(function (devices) {\n        _this._vrSupported = true; // note that devices may actually be an empty array. This is fine;\n        // we expect this._vrDisplay to be undefined in this case.\n\n        _this._vrDisplay = devices[0];\n        res({\n          vrDisplay: _this._vrDisplay,\n          vrSupported: _this._vrSupported\n        });\n      });\n    } else {\n      _this._vrDisplay = undefined;\n      _this._vrSupported = false;\n      res({\n        vrDisplay: _this._vrDisplay,\n        vrSupported: _this._vrSupported\n      });\n    }\n  });\n};\n\nEngine.prototype.enableVR = function (options) {\n  var _this = this;\n\n  if (this._vrDisplay && !this._vrDisplay.isPresenting) {\n    var onResolved = function onResolved() {\n      _this.onVRRequestPresentComplete.notifyObservers(true);\n\n      _this._onVRFullScreenTriggered();\n    };\n\n    var onRejected = function onRejected() {\n      _this.onVRRequestPresentComplete.notifyObservers(false);\n    };\n\n    this.onVRRequestPresentStart.notifyObservers(this);\n    var presentationAttributes = {\n      highRefreshRate: this.vrPresentationAttributes ? this.vrPresentationAttributes.highRefreshRate : false,\n      foveationLevel: this.vrPresentationAttributes ? this.vrPresentationAttributes.foveationLevel : 1,\n      multiview: (this.getCaps().multiview || this.getCaps().oculusMultiview) && options.useMultiview\n    };\n\n    this._vrDisplay.requestPresent([__assign({\n      source: this.getRenderingCanvas(),\n      attributes: presentationAttributes\n    }, presentationAttributes)]).then(onResolved).catch(onRejected);\n  }\n};\n\nEngine.prototype._onVRFullScreenTriggered = function () {\n  if (this._vrDisplay && this._vrDisplay.isPresenting) {\n    //get the old size before we change\n    this._oldSize = new Size(this.getRenderWidth(), this.getRenderHeight());\n    this._oldHardwareScaleFactor = this.getHardwareScalingLevel(); //get the width and height, change the render size\n\n    var leftEye = this._vrDisplay.getEyeParameters('left');\n\n    this.setHardwareScalingLevel(1);\n    this.setSize(leftEye.renderWidth * 2, leftEye.renderHeight);\n  } else {\n    this.setHardwareScalingLevel(this._oldHardwareScaleFactor);\n    this.setSize(this._oldSize.width, this._oldSize.height);\n  }\n};\n\nEngine.prototype.disableVR = function () {\n  var _this = this;\n\n  if (this._vrDisplay && this._vrDisplay.isPresenting) {\n    this._vrDisplay.exitPresent().then(function () {\n      return _this._onVRFullScreenTriggered();\n    }).catch(function () {\n      return _this._onVRFullScreenTriggered();\n    });\n  }\n\n  if (DomManagement.IsWindowObjectExist()) {\n    window.removeEventListener('vrdisplaypointerrestricted', this._onVRDisplayPointerRestricted);\n    window.removeEventListener('vrdisplaypointerunrestricted', this._onVRDisplayPointerUnrestricted);\n\n    if (this._onVrDisplayConnect) {\n      window.removeEventListener('vrdisplayconnect', this._onVrDisplayConnect);\n\n      if (this._onVrDisplayDisconnect) {\n        window.removeEventListener('vrdisplaydisconnect', this._onVrDisplayDisconnect);\n      }\n\n      if (this._onVrDisplayPresentChange) {\n        window.removeEventListener('vrdisplaypresentchange', this._onVrDisplayPresentChange);\n      }\n\n      this._onVrDisplayConnect = null;\n      this._onVrDisplayDisconnect = null;\n    }\n  }\n};\n\nEngine.prototype._connectVREvents = function (canvas, document) {\n  var _this = this;\n\n  this._onVRDisplayPointerRestricted = function () {\n    if (canvas) {\n      canvas.requestPointerLock();\n    }\n  };\n\n  this._onVRDisplayPointerUnrestricted = function () {\n    // Edge fix - for some reason document is not present and this is window\n    if (!document) {\n      var hostWindow = _this.getHostWindow();\n\n      if (hostWindow.document && hostWindow.document.exitPointerLock) {\n        hostWindow.document.exitPointerLock();\n      }\n\n      return;\n    }\n\n    if (!document.exitPointerLock) {\n      return;\n    }\n\n    document.exitPointerLock();\n  };\n\n  if (DomManagement.IsWindowObjectExist()) {\n    var hostWindow = this.getHostWindow();\n    hostWindow.addEventListener('vrdisplaypointerrestricted', this._onVRDisplayPointerRestricted, false);\n    hostWindow.addEventListener('vrdisplaypointerunrestricted', this._onVRDisplayPointerUnrestricted, false);\n  }\n};\n\nEngine.prototype._submitVRFrame = function () {\n  // Submit frame to the vr device, if enabled\n  if (this._vrDisplay && this._vrDisplay.isPresenting) {\n    // TODO: We should only submit the frame if we read frameData successfully.\n    try {\n      this._vrDisplay.submitFrame();\n    } catch (e) {\n      Tools.Warn(\"webVR submitFrame has had an unexpected failure: \" + e);\n    }\n  }\n};\n\nEngine.prototype.isVRPresenting = function () {\n  return this._vrDisplay && this._vrDisplay.isPresenting;\n};\n\nEngine.prototype._requestVRFrame = function () {\n  this._frameHandler = Engine.QueueNewFrame(this._boundRenderFunction, this._vrDisplay);\n};","map":null,"metadata":{},"sourceType":"module"}