{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Contract } from 'web3x/contract';\nimport abi from './ENSResolverAbi';\nexport var ENSResolver = /*#__PURE__*/function (_Contract) {\n  _inherits(ENSResolver, _Contract);\n\n  function ENSResolver(eth, address, options) {\n    _classCallCheck(this, ENSResolver);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ENSResolver).call(this, eth, abi, address, options));\n  }\n\n  return ENSResolver;\n}(Contract);\nexport var ENSResolverAbi = abi;","map":{"version":3,"sources":["/opt/work/NZ_test/src/contracts/ENSResolver.ts"],"names":["Contract","abi","ENSResolver","eth","address","options","ENSResolverAbi"],"mappings":";;;;AAGA,SAASA,QAAT,QAAoF,gBAApF;AAEA,OAAOC,GAAP,MAAgB,kBAAhB;AA2JA,WAAaC,WAAb;AAAA;;AACE,uBAAYC,GAAZ,EAAsBC,OAAtB,EAAyCC,OAAzC,EAAoE;AAAA;;AAAA,oFAC5DF,GAD4D,EACvDF,GADuD,EAClDG,OADkD,EACzCC,OADyC;AAEnE;;AAHH;AAAA,EAAiCL,QAAjC;AAKA,OAAO,IAAIM,cAAc,GAAGL,GAArB","sourcesContent":["import BN from 'bn.js'\nimport { Address } from 'web3x/address'\nimport { EventLog, TransactionReceipt } from 'web3x/formatters'\nimport { Contract, ContractOptions, TxCall, TxSend, EventSubscriptionFactory } from 'web3x/contract'\nimport { Eth } from 'web3x/eth'\nimport abi from './ENSResolverAbi'\nexport type AuthorisationChangedEvent = {\n  node: string\n  owner: Address\n  target: Address\n  isAuthorised: boolean\n}\nexport type TextChangedEvent = {\n  node: string\n  indexedKey: string\n  key: string\n}\nexport type PubkeyChangedEvent = {\n  node: string\n  x: string\n  y: string\n}\nexport type NameChangedEvent = {\n  node: string\n  name: string\n}\nexport type InterfaceChangedEvent = {\n  node: string\n  interfaceID: string\n  implementer: Address\n}\nexport type DNSRecordChangedEvent = {\n  node: string\n  name: string\n  resource: string\n  record: string\n}\nexport type DNSRecordDeletedEvent = {\n  node: string\n  name: string\n  resource: string\n}\nexport type DNSZoneClearedEvent = {\n  node: string\n}\nexport type ContenthashChangedEvent = {\n  node: string\n  hash: string\n}\nexport type AddrChangedEvent = {\n  node: string\n  a: Address\n}\nexport type AddressChangedEvent = {\n  node: string\n  coinType: string\n  newAddress: string\n}\nexport type ABIChangedEvent = {\n  node: string\n  contentType: string\n}\nexport interface AuthorisationChangedEventLog extends EventLog<AuthorisationChangedEvent, 'AuthorisationChanged'> {}\nexport interface TextChangedEventLog extends EventLog<TextChangedEvent, 'TextChanged'> {}\nexport interface PubkeyChangedEventLog extends EventLog<PubkeyChangedEvent, 'PubkeyChanged'> {}\nexport interface NameChangedEventLog extends EventLog<NameChangedEvent, 'NameChanged'> {}\nexport interface InterfaceChangedEventLog extends EventLog<InterfaceChangedEvent, 'InterfaceChanged'> {}\nexport interface DNSRecordChangedEventLog extends EventLog<DNSRecordChangedEvent, 'DNSRecordChanged'> {}\nexport interface DNSRecordDeletedEventLog extends EventLog<DNSRecordDeletedEvent, 'DNSRecordDeleted'> {}\nexport interface DNSZoneClearedEventLog extends EventLog<DNSZoneClearedEvent, 'DNSZoneCleared'> {}\nexport interface ContenthashChangedEventLog extends EventLog<ContenthashChangedEvent, 'ContenthashChanged'> {}\nexport interface AddrChangedEventLog extends EventLog<AddrChangedEvent, 'AddrChanged'> {}\nexport interface AddressChangedEventLog extends EventLog<AddressChangedEvent, 'AddressChanged'> {}\nexport interface ABIChangedEventLog extends EventLog<ABIChangedEvent, 'ABIChanged'> {}\ninterface ENSResolverEvents {\n  AuthorisationChanged: EventSubscriptionFactory<AuthorisationChangedEventLog>\n  TextChanged: EventSubscriptionFactory<TextChangedEventLog>\n  PubkeyChanged: EventSubscriptionFactory<PubkeyChangedEventLog>\n  NameChanged: EventSubscriptionFactory<NameChangedEventLog>\n  InterfaceChanged: EventSubscriptionFactory<InterfaceChangedEventLog>\n  DNSRecordChanged: EventSubscriptionFactory<DNSRecordChangedEventLog>\n  DNSRecordDeleted: EventSubscriptionFactory<DNSRecordDeletedEventLog>\n  DNSZoneCleared: EventSubscriptionFactory<DNSZoneClearedEventLog>\n  ContenthashChanged: EventSubscriptionFactory<ContenthashChangedEventLog>\n  AddrChanged: EventSubscriptionFactory<AddrChangedEventLog>\n  AddressChanged: EventSubscriptionFactory<AddressChangedEventLog>\n  ABIChanged: EventSubscriptionFactory<ABIChangedEventLog>\n}\ninterface ENSResolverEventLogs {\n  AuthorisationChanged: AuthorisationChangedEventLog\n  TextChanged: TextChangedEventLog\n  PubkeyChanged: PubkeyChangedEventLog\n  NameChanged: NameChangedEventLog\n  InterfaceChanged: InterfaceChangedEventLog\n  DNSRecordChanged: DNSRecordChangedEventLog\n  DNSRecordDeleted: DNSRecordDeletedEventLog\n  DNSZoneCleared: DNSZoneClearedEventLog\n  ContenthashChanged: ContenthashChangedEventLog\n  AddrChanged: AddrChangedEventLog\n  AddressChanged: AddressChangedEventLog\n  ABIChanged: ABIChangedEventLog\n}\ninterface ENSResolverTxEventLogs {\n  AuthorisationChanged: AuthorisationChangedEventLog[]\n  TextChanged: TextChangedEventLog[]\n  PubkeyChanged: PubkeyChangedEventLog[]\n  NameChanged: NameChangedEventLog[]\n  InterfaceChanged: InterfaceChangedEventLog[]\n  DNSRecordChanged: DNSRecordChangedEventLog[]\n  DNSRecordDeleted: DNSRecordDeletedEventLog[]\n  DNSZoneCleared: DNSZoneClearedEventLog[]\n  ContenthashChanged: ContenthashChangedEventLog[]\n  AddrChanged: AddrChangedEventLog[]\n  AddressChanged: AddressChangedEventLog[]\n  ABIChanged: ABIChangedEventLog[]\n}\nexport interface ENSResolverTransactionReceipt extends TransactionReceipt<ENSResolverTxEventLogs> {}\ninterface ENSResolverMethods {\n  supportsInterface(interfaceID: string): TxCall<boolean>\n  setDNSRecords(node: string, data: string): TxSend<ENSResolverTransactionReceipt>\n  setText(node: string, key: string, value: string): TxSend<ENSResolverTransactionReceipt>\n  interfaceImplementer(node: string, interfaceID: string): TxCall<Address>\n  ABI(\n    node: string,\n    contentTypes: number | string | BN\n  ): TxCall<{\n    0: string\n    1: string\n  }>\n  setPubkey(node: string, x: string, y: string): TxSend<ENSResolverTransactionReceipt>\n  setContenthash(node: string, hash: string): TxSend<ENSResolverTransactionReceipt>\n  addr(node: string): TxCall<Address>\n  setAuthorisation(node: string, target: Address, isAuthorised: boolean): TxSend<ENSResolverTransactionReceipt>\n  hasDNSRecords(node: string, name: string): TxCall<boolean>\n  text(node: string, key: string): TxCall<string>\n  setABI(node: string, contentType: number | string | BN, data: string): TxSend<ENSResolverTransactionReceipt>\n  name(node: string): TxCall<string>\n  setName(node: string, name: string): TxSend<ENSResolverTransactionReceipt>\n  setAddr(node: string, coinType: number | string | BN, a: string): TxSend<ENSResolverTransactionReceipt>\n  dnsRecord(node: string, name: string, resource: number | string | BN): TxCall<string>\n  clearDNSZone(node: string): TxSend<ENSResolverTransactionReceipt>\n  contenthash(node: string): TxCall<string>\n  pubkey(\n    node: string\n  ): TxCall<{\n    x: string\n    0: string\n    y: string\n    1: string\n  }>\n  setAddr(node: string, a: Address): TxSend<ENSResolverTransactionReceipt>\n  setInterface(node: string, interfaceID: string, implementer: Address): TxSend<ENSResolverTransactionReceipt>\n  addr(node: string, coinType: number | string | BN): TxCall<string>\n  authorisations(a0: string, a1: Address, a2: Address): TxCall<boolean>\n}\nexport interface ENSResolverDefinition {\n  methods: ENSResolverMethods\n  events: ENSResolverEvents\n  eventLogs: ENSResolverEventLogs\n}\nexport class ENSResolver extends Contract<ENSResolverDefinition> {\n  constructor(eth: Eth, address?: Address, options?: ContractOptions) {\n    super(eth, abi, address, options)\n  }\n}\nexport let ENSResolverAbi = abi\n"]},"metadata":{},"sourceType":"module"}