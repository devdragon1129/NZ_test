{"ast":null,"code":"/**\r\n * EffectFallbacks can be used to add fallbacks (properties to disable) to certain properties when desired to improve performance.\r\n * (Eg. Start at high quality with reflection and fog, if fps is low, remove reflection, if still low remove fog)\r\n */\nvar EffectFallbacks =\n/** @class */\nfunction () {\n  function EffectFallbacks() {\n    this._defines = {};\n    this._currentRank = 32;\n    this._maxRank = -1;\n    this._mesh = null;\n  }\n  /**\r\n   * Removes the fallback from the bound mesh.\r\n   */\n\n\n  EffectFallbacks.prototype.unBindMesh = function () {\n    this._mesh = null;\n  };\n  /**\r\n   * Adds a fallback on the specified property.\r\n   * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n   * @param define The name of the define in the shader\r\n   */\n\n\n  EffectFallbacks.prototype.addFallback = function (rank, define) {\n    if (!this._defines[rank]) {\n      if (rank < this._currentRank) {\n        this._currentRank = rank;\n      }\n\n      if (rank > this._maxRank) {\n        this._maxRank = rank;\n      }\n\n      this._defines[rank] = new Array();\n    }\n\n    this._defines[rank].push(define);\n  };\n  /**\r\n   * Sets the mesh to use CPU skinning when needing to fallback.\r\n   * @param rank The rank of the fallback (Lower ranks will be fallbacked to first)\r\n   * @param mesh The mesh to use the fallbacks.\r\n   */\n\n\n  EffectFallbacks.prototype.addCPUSkinningFallback = function (rank, mesh) {\n    this._mesh = mesh;\n\n    if (rank < this._currentRank) {\n      this._currentRank = rank;\n    }\n\n    if (rank > this._maxRank) {\n      this._maxRank = rank;\n    }\n  };\n\n  Object.defineProperty(EffectFallbacks.prototype, \"hasMoreFallbacks\", {\n    /**\r\n     * Checks to see if more fallbacks are still availible.\r\n     */\n    get: function get() {\n      return this._currentRank <= this._maxRank;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Removes the defines that should be removed when falling back.\r\n   * @param currentDefines defines the current define statements for the shader.\r\n   * @param effect defines the current effect we try to compile\r\n   * @returns The resulting defines with defines of the current rank removed.\r\n   */\n\n  EffectFallbacks.prototype.reduce = function (currentDefines, effect) {\n    // First we try to switch to CPU skinning\n    if (this._mesh && this._mesh.computeBonesUsingShaders && this._mesh.numBoneInfluencers > 0) {\n      this._mesh.computeBonesUsingShaders = false;\n      currentDefines = currentDefines.replace(\"#define NUM_BONE_INFLUENCERS \" + this._mesh.numBoneInfluencers, \"#define NUM_BONE_INFLUENCERS 0\");\n      effect._bonesComputationForcedToCPU = true;\n\n      var scene = this._mesh.getScene();\n\n      for (var index = 0; index < scene.meshes.length; index++) {\n        var otherMesh = scene.meshes[index];\n\n        if (!otherMesh.material) {\n          if (!this._mesh.material && otherMesh.computeBonesUsingShaders && otherMesh.numBoneInfluencers > 0) {\n            otherMesh.computeBonesUsingShaders = false;\n          }\n\n          continue;\n        }\n\n        if (!otherMesh.computeBonesUsingShaders || otherMesh.numBoneInfluencers === 0) {\n          continue;\n        }\n\n        if (otherMesh.material.getEffect() === effect) {\n          otherMesh.computeBonesUsingShaders = false;\n        } else if (otherMesh.subMeshes) {\n          for (var _i = 0, _a = otherMesh.subMeshes; _i < _a.length; _i++) {\n            var subMesh = _a[_i];\n            var subMeshEffect = subMesh.effect;\n\n            if (subMeshEffect === effect) {\n              otherMesh.computeBonesUsingShaders = false;\n              break;\n            }\n          }\n        }\n      }\n    } else {\n      var currentFallbacks = this._defines[this._currentRank];\n\n      if (currentFallbacks) {\n        for (var index = 0; index < currentFallbacks.length; index++) {\n          currentDefines = currentDefines.replace(\"#define \" + currentFallbacks[index], \"\");\n        }\n      }\n\n      this._currentRank++;\n    }\n\n    return currentDefines;\n  };\n\n  return EffectFallbacks;\n}();\n\nexport { EffectFallbacks };","map":null,"metadata":{},"sourceType":"module"}