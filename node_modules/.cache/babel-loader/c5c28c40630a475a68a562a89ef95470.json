{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { TouchCamera } from \"./touchCamera\";\nimport { Node } from \"../node\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { Camera } from \"./camera\";\nimport \"../Gamepads/gamepadSceneComponent\";\nNode.AddNodeConstructor(\"FreeCamera\", function (name, scene) {\n  // Forcing to use the Universal camera\n  return function () {\n    return new UniversalCamera(name, Vector3.Zero(), scene);\n  };\n});\n/**\r\n * The Universal Camera is the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. This replaces the earlier Free Camera,\r\n * which still works and will still be found in many Playgrounds.\r\n * @see https://doc.babylonjs.com/features/cameras#universal-camera\r\n */\n\nvar UniversalCamera =\n/** @class */\nfunction (_super) {\n  __extends(UniversalCamera, _super);\n  /**\r\n   * The Universal Camera is the one to choose for first person shooter type games, and works with all the keyboard, mouse, touch and gamepads. This replaces the earlier Free Camera,\r\n   * which still works and will still be found in many Playgrounds.\r\n   * @see https://doc.babylonjs.com/features/cameras#universal-camera\r\n   * @param name Define the name of the camera in the scene\r\n   * @param position Define the start position of the camera in the scene\r\n   * @param scene Define the scene the camera belongs to\r\n   */\n\n\n  function UniversalCamera(name, position, scene) {\n    var _this = _super.call(this, name, position, scene) || this;\n\n    _this.inputs.addGamepad();\n\n    return _this;\n  }\n\n  Object.defineProperty(UniversalCamera.prototype, \"gamepadAngularSensibility\", {\n    /**\r\n     * Defines the gamepad rotation sensiblity.\r\n     * This is the threshold from when rotation starts to be accounted for to prevent jittering.\r\n     */\n    get: function get() {\n      var gamepad = this.inputs.attached[\"gamepad\"];\n\n      if (gamepad) {\n        return gamepad.gamepadAngularSensibility;\n      }\n\n      return 0;\n    },\n    set: function set(value) {\n      var gamepad = this.inputs.attached[\"gamepad\"];\n\n      if (gamepad) {\n        gamepad.gamepadAngularSensibility = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UniversalCamera.prototype, \"gamepadMoveSensibility\", {\n    /**\r\n     * Defines the gamepad move sensiblity.\r\n     * This is the threshold from when moving starts to be accounted for for to prevent jittering.\r\n     */\n    get: function get() {\n      var gamepad = this.inputs.attached[\"gamepad\"];\n\n      if (gamepad) {\n        return gamepad.gamepadMoveSensibility;\n      }\n\n      return 0;\n    },\n    set: function set(value) {\n      var gamepad = this.inputs.attached[\"gamepad\"];\n\n      if (gamepad) {\n        gamepad.gamepadMoveSensibility = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets the current object class name.\r\n   * @return the class name\r\n   */\n\n  UniversalCamera.prototype.getClassName = function () {\n    return \"UniversalCamera\";\n  };\n\n  return UniversalCamera;\n}(TouchCamera);\n\nexport { UniversalCamera };\n\nCamera._createDefaultParsedCamera = function (name, scene) {\n  return new UniversalCamera(name, Vector3.Zero(), scene);\n};","map":null,"metadata":{},"sourceType":"module"}