{"ast":null,"code":"import { SceneComponentConstants } from \"../../sceneComponent\";\nimport { PostProcessRenderPipelineManager } from \"./postProcessRenderPipelineManager\";\nimport { Scene } from \"../../scene\";\nObject.defineProperty(Scene.prototype, \"postProcessRenderPipelineManager\", {\n  get: function get() {\n    if (!this._postProcessRenderPipelineManager) {\n      // Register the G Buffer component to the scene.\n      var component = this._getComponent(SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER);\n\n      if (!component) {\n        component = new PostProcessRenderPipelineManagerSceneComponent(this);\n\n        this._addComponent(component);\n      }\n\n      this._postProcessRenderPipelineManager = new PostProcessRenderPipelineManager();\n    }\n\n    return this._postProcessRenderPipelineManager;\n  },\n  enumerable: true,\n  configurable: true\n});\n/**\r\n * Defines the Render Pipeline scene component responsible to rendering pipelines\r\n */\n\nvar PostProcessRenderPipelineManagerSceneComponent =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new instance of the component for the given scene\r\n   * @param scene Defines the scene to register the component in\r\n   */\n  function PostProcessRenderPipelineManagerSceneComponent(scene) {\n    /**\r\n     * The component name helpfull to identify the component in the list of scene components.\r\n     */\n    this.name = SceneComponentConstants.NAME_POSTPROCESSRENDERPIPELINEMANAGER;\n    this.scene = scene;\n  }\n  /**\r\n   * Registers the component in a given scene\r\n   */\n\n\n  PostProcessRenderPipelineManagerSceneComponent.prototype.register = function () {\n    this.scene._gatherRenderTargetsStage.registerStep(SceneComponentConstants.STEP_GATHERRENDERTARGETS_POSTPROCESSRENDERPIPELINEMANAGER, this, this._gatherRenderTargets);\n  };\n  /**\r\n   * Rebuilds the elements related to this component in case of\r\n   * context lost for instance.\r\n   */\n\n\n  PostProcessRenderPipelineManagerSceneComponent.prototype.rebuild = function () {\n    if (this.scene._postProcessRenderPipelineManager) {\n      this.scene._postProcessRenderPipelineManager._rebuild();\n    }\n  };\n  /**\r\n   * Disposes the component and the associated ressources\r\n   */\n\n\n  PostProcessRenderPipelineManagerSceneComponent.prototype.dispose = function () {\n    if (this.scene._postProcessRenderPipelineManager) {\n      this.scene._postProcessRenderPipelineManager.dispose();\n    }\n  };\n\n  PostProcessRenderPipelineManagerSceneComponent.prototype._gatherRenderTargets = function () {\n    if (this.scene._postProcessRenderPipelineManager) {\n      this.scene._postProcessRenderPipelineManager.update();\n    }\n  };\n\n  return PostProcessRenderPipelineManagerSceneComponent;\n}();\n\nexport { PostProcessRenderPipelineManagerSceneComponent };","map":null,"metadata":{},"sourceType":"module"}