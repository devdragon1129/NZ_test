{"ast":null,"code":"import _regeneratorRuntime from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Address } from 'web3x/address';\nimport { fromWei } from 'web3x/utils';\nimport { PEER_URL, getCatalystContentUrl } from 'lib/api/peer';\nimport { DCLRegistrar } from 'contracts/DCLRegistrar';\nimport { REGISTRAR_ADDRESS } from 'modules/common/contracts';\nimport { getEth } from 'modules/wallet/utils';\nexport var PRICE_IN_WEI = 100000000000000000000; // 100 MANA\n\nexport var PRICE = fromWei(PRICE_IN_WEI.toString(), 'ether');\nexport var MAX_NAME_SIZE = 15;\nexport var MIN_NAME_SIZE = 2;\n/**\n * The name may have a maximum of 15 characters (length === 15).\n * Names can contain:\n *  - Characters from 0-9, a-z, A-Z\n * Names can not contain:\n *  - Spaces\n *  - Special characters as '/', '_', ':', etc.\n *  - emojis\n */\n\nvar nameRegex = new RegExp(\"^([a-zA-Z0-9]){2,\".concat(MAX_NAME_SIZE, \"}$\"));\nexport function setProfileFromEntity(entity) {\n  entity.metadata.avatars[0].avatar.snapshots.face = getCatalystContentUrl(entity.metadata.avatars[0].avatar.snapshots.face);\n  entity.metadata.avatars[0].avatar.snapshots.body = getCatalystContentUrl(entity.metadata.avatars[0].avatar.snapshots.body);\n  return entity;\n}\nexport function getDefaultProfileEntity() {\n  return _getDefaultProfileEntity.apply(this, arguments);\n}\n\nfunction _getDefaultProfileEntity() {\n  _getDefaultProfileEntity = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var profile;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(PEER_URL + '/content/entities/profile?pointer=default' + Math.floor(Math.random() * 128 + 1)).then(function (resp) {\n              return resp.json();\n            });\n\n          case 2:\n            profile = _context.sent;\n            return _context.abrupt(\"return\", profile[0]);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getDefaultProfileEntity.apply(this, arguments);\n}\n\nexport function isNameAvailable(_x) {\n  return _isNameAvailable.apply(this, arguments);\n}\n\nfunction _isNameAvailable() {\n  _isNameAvailable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name) {\n    var eth, contractDCLRegistrar;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (name) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", false);\n\n          case 2:\n            _context2.next = 4;\n            return getEth();\n\n          case 4:\n            eth = _context2.sent;\n            contractDCLRegistrar = new DCLRegistrar(eth, Address.fromString(REGISTRAR_ADDRESS));\n            return _context2.abrupt(\"return\", contractDCLRegistrar.methods.available(name).call());\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _isNameAvailable.apply(this, arguments);\n}\n\nexport function hasNameMinLength(name) {\n  return name.length >= MIN_NAME_SIZE;\n}\nexport function isNameValid(name) {\n  return nameRegex.test(name);\n}\nexport function findBySubdomain(ensList, subdomain) {\n  return ensList.find(function (ens) {\n    return ens.subdomain === subdomain;\n  });\n}\nexport function isEmpty(ens) {\n  return isResolverEmpty(ens) && isContentEmpty(ens);\n}\nexport function isResolverEmpty(ens) {\n  return ens.resolver === Address.ZERO.toString();\n}\nexport function isContentEmpty(ens) {\n  return ens.content === Address.ZERO.toString();\n}\nexport function isEqualContent(ens, land) {\n  return ens.landId === land.id;\n}\nexport function getDomainFromName(name) {\n  return \"\".concat(name.toLowerCase(), \".dcl.eth\");\n}\nexport function isEnoughClaimMana(mana) {\n  // 100 is the minimum amount of MANA the user needs to claim a new Name\n  // We're checking against this instead of 0 when checking the allowance too because\n  // we do not yet support the double transaction needed to set the user's allowance to 0 first and then bump it up to wichever number\n  return Number(mana) >= 100;\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/ens/utils.ts"],"names":["Address","fromWei","PEER_URL","getCatalystContentUrl","DCLRegistrar","REGISTRAR_ADDRESS","getEth","PRICE_IN_WEI","PRICE","toString","MAX_NAME_SIZE","MIN_NAME_SIZE","nameRegex","RegExp","setProfileFromEntity","entity","metadata","avatars","avatar","snapshots","face","body","getDefaultProfileEntity","fetch","Math","floor","random","then","resp","json","profile","isNameAvailable","name","eth","contractDCLRegistrar","fromString","methods","available","call","hasNameMinLength","length","isNameValid","test","findBySubdomain","ensList","subdomain","find","ens","isEmpty","isResolverEmpty","isContentEmpty","resolver","ZERO","content","isEqualContent","land","landId","id","getDomainFromName","toLowerCase","isEnoughClaimMana","mana","Number"],"mappings":"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","sourcesContent":["import { Entity } from 'dcl-catalyst-commons'\nimport { Address } from 'web3x/address'\nimport { fromWei } from 'web3x/utils'\nimport { PEER_URL, getCatalystContentUrl } from 'lib/api/peer'\nimport { DCLRegistrar } from 'contracts/DCLRegistrar'\nimport { Land } from 'modules/land/types'\nimport { REGISTRAR_ADDRESS } from 'modules/common/contracts'\nimport { ENS } from './types'\nimport { getEth } from 'modules/wallet/utils'\n\nexport const PRICE_IN_WEI = 100000000000000000000 // 100 MANA\nexport const PRICE = fromWei(PRICE_IN_WEI.toString(), 'ether')\nexport const MAX_NAME_SIZE = 15\nexport const MIN_NAME_SIZE = 2\n\n/**\n * The name may have a maximum of 15 characters (length === 15).\n * Names can contain:\n *  - Characters from 0-9, a-z, A-Z\n * Names can not contain:\n *  - Spaces\n *  - Special characters as '/', '_', ':', etc.\n *  - emojis\n */\nconst nameRegex = new RegExp(`^([a-zA-Z0-9]){2,${MAX_NAME_SIZE}}$`)\n\nexport function setProfileFromEntity(entity: Entity): Entity {\n  entity.metadata.avatars[0].avatar.snapshots.face = getCatalystContentUrl(entity.metadata.avatars[0].avatar.snapshots.face)\n  entity.metadata.avatars[0].avatar.snapshots.body = getCatalystContentUrl(entity.metadata.avatars[0].avatar.snapshots.body)\n  return entity\n}\n\nexport async function getDefaultProfileEntity() {\n  const profile = await fetch(PEER_URL + '/content/entities/profile?pointer=default' + Math.floor(Math.random() * 128 + 1)).then(resp =>\n    resp.json()\n  )\n  return profile[0]\n}\n\nexport async function isNameAvailable(name: string): Promise<boolean> {\n  if (!name) {\n    return false\n  }\n  const eth = await getEth()\n  const contractDCLRegistrar = new DCLRegistrar(eth!, Address.fromString(REGISTRAR_ADDRESS))\n  return contractDCLRegistrar.methods.available(name).call()\n}\n\nexport function hasNameMinLength(name: string): boolean {\n  return name.length >= MIN_NAME_SIZE\n}\n\nexport function isNameValid(name: string): boolean {\n  return nameRegex.test(name)\n}\n\nexport function findBySubdomain(ensList: ENS[], subdomain: string) {\n  return ensList.find(ens => ens.subdomain === subdomain)\n}\n\nexport function isEmpty(ens: ENS) {\n  return isResolverEmpty(ens) && isContentEmpty(ens)\n}\n\nexport function isResolverEmpty(ens: ENS) {\n  return ens.resolver === Address.ZERO.toString()\n}\n\nexport function isContentEmpty(ens: ENS) {\n  return ens.content === Address.ZERO.toString()\n}\n\nexport function isEqualContent(ens: ENS, land: Land) {\n  return ens.landId === land.id\n}\n\nexport function getDomainFromName(name: string): string {\n  return `${name.toLowerCase()}.dcl.eth`\n}\n\nexport function isEnoughClaimMana(mana: string) {\n  // 100 is the minimum amount of MANA the user needs to claim a new Name\n  // We're checking against this instead of 0 when checking the allowance too because\n  // we do not yet support the double transaction needed to set the user's allowance to 0 first and then bump it up to wichever number\n  return Number(mana) >= 100\n}\n"]},"metadata":{},"sourceType":"module"}