{"ast":null,"code":"import _defineProperty from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { loadingReducer } from 'decentraland-dapps/dist/modules/loading/reducer';\nimport { FETCH_THIRD_PARTIES_REQUEST, FETCH_THIRD_PARTIES_SUCCESS, FETCH_THIRD_PARTIES_FAILURE, FETCH_THIRD_PARTY_AVAILABLE_SLOTS_REQUEST, FETCH_THIRD_PARTY_AVAILABLE_SLOTS_SUCCESS, FETCH_THIRD_PARTY_AVAILABLE_SLOTS_FAILURE, DEPLOY_BATCHED_THIRD_PARTY_ITEMS_REQUEST, DEPLOY_BATCHED_THIRD_PARTY_ITEMS_FAILURE, DEPLOY_BATCHED_THIRD_PARTY_ITEMS_SUCCESS } from './actions';\nexport var INITIAL_STATE = {\n  data: {},\n  itemSlotPrice: null,\n  loading: [],\n  error: null\n};\nexport function thirdPartyReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case DEPLOY_BATCHED_THIRD_PARTY_ITEMS_REQUEST:\n    case FETCH_THIRD_PARTY_AVAILABLE_SLOTS_REQUEST:\n    case FETCH_THIRD_PARTIES_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action)\n        });\n      }\n\n    case FETCH_THIRD_PARTIES_SUCCESS:\n      {\n        var thirdParties = action.payload.thirdParties;\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, thirdParties.reduce(function (obj, thirdParty) {\n            obj[thirdParty.id] = _objectSpread({}, thirdParty);\n            return obj;\n          }, {})),\n          loading: loadingReducer(state.loading, action),\n          error: null\n        });\n      }\n\n    case FETCH_THIRD_PARTY_AVAILABLE_SLOTS_SUCCESS:\n      {\n        var _action$payload = action.payload,\n            thirdPartyId = _action$payload.thirdPartyId,\n            availableSlots = _action$payload.availableSlots;\n        return _objectSpread({}, state, {\n          data: _objectSpread({}, state.data, _defineProperty({}, thirdPartyId, _objectSpread({}, state.data[thirdPartyId], {\n            availableSlots: availableSlots\n          }))),\n          loading: loadingReducer(state.loading, action),\n          error: null\n        });\n      }\n\n    case DEPLOY_BATCHED_THIRD_PARTY_ITEMS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action),\n          error: null\n        });\n      }\n\n    case DEPLOY_BATCHED_THIRD_PARTY_ITEMS_FAILURE:\n    case FETCH_THIRD_PARTY_AVAILABLE_SLOTS_FAILURE:\n    case FETCH_THIRD_PARTIES_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          loading: loadingReducer(state.loading, action),\n          error: action.payload.error\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/thirdParty/reducer.ts"],"names":["loadingReducer","FETCH_THIRD_PARTIES_REQUEST","FETCH_THIRD_PARTIES_SUCCESS","FETCH_THIRD_PARTIES_FAILURE","FETCH_THIRD_PARTY_AVAILABLE_SLOTS_REQUEST","FETCH_THIRD_PARTY_AVAILABLE_SLOTS_SUCCESS","FETCH_THIRD_PARTY_AVAILABLE_SLOTS_FAILURE","DEPLOY_BATCHED_THIRD_PARTY_ITEMS_REQUEST","DEPLOY_BATCHED_THIRD_PARTY_ITEMS_FAILURE","DEPLOY_BATCHED_THIRD_PARTY_ITEMS_SUCCESS","INITIAL_STATE","data","itemSlotPrice","loading","error","thirdPartyReducer","state","action","type","thirdParties","payload","reduce","obj","thirdParty","id","thirdPartyId","availableSlots"],"mappings":";;AACA,SAAuBA,cAAvB,QAA6C,iDAA7C;AACA,SAIEC,2BAJF,EAKEC,2BALF,EAMEC,2BANF,EAOEC,yCAPF,EAUEC,yCAVF,EAWEC,yCAXF,EAgBEC,wCAhBF,EAiBEC,wCAjBF,EAkBEC,wCAlBF,QAmBO,WAnBP;AA6BA,OAAO,IAAMC,aAA8B,GAAG;AAC5CC,EAAAA,IAAI,EAAE,EADsC;AAE5CC,EAAAA,aAAa,EAAE,IAF6B;AAG5CC,EAAAA,OAAO,EAAE,EAHmC;AAI5CC,EAAAA,KAAK,EAAE;AAJqC,CAAvC;AAmBP,OAAO,SAASC,iBAAT,GAAqH;AAAA,MAA1FC,KAA0F,uEAAjEN,aAAiE;AAAA,MAAlDO,MAAkD;;AAC1H,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKX,wCAAL;AACA,SAAKH,yCAAL;AACA,SAAKH,2BAAL;AAAkC;AAChC,iCACKe,KADL;AAEEH,UAAAA,OAAO,EAAEb,cAAc,CAACgB,KAAK,CAACH,OAAP,EAAgBI,MAAhB;AAFzB;AAID;;AACD,SAAKf,2BAAL;AAAkC;AAAA,YACxBiB,YADwB,GACPF,MAAM,CAACG,OADA,CACxBD,YADwB;AAEhC,iCACKH,KADL;AAEEL,UAAAA,IAAI,oBACCK,KAAK,CAACL,IADP,EAECQ,YAAY,CAACE,MAAb,CAAoB,UAACC,GAAD,EAAMC,UAAN,EAAqB;AAC1CD,YAAAA,GAAG,CAACC,UAAU,CAACC,EAAZ,CAAH,qBAA0BD,UAA1B;AACA,mBAAOD,GAAP;AACD,WAHE,EAGA,EAHA,CAFD,CAFN;AASET,UAAAA,OAAO,EAAEb,cAAc,CAACgB,KAAK,CAACH,OAAP,EAAgBI,MAAhB,CATzB;AAUEH,UAAAA,KAAK,EAAE;AAVT;AAYD;;AACD,SAAKT,yCAAL;AAAgD;AAAA,8BACLY,MAAM,CAACG,OADF;AAAA,YACtCK,YADsC,mBACtCA,YADsC;AAAA,YACxBC,cADwB,mBACxBA,cADwB;AAE9C,iCACKV,KADL;AAEEL,UAAAA,IAAI,oBACCK,KAAK,CAACL,IADP,sBAEDc,YAFC,oBAGGT,KAAK,CAACL,IAAN,CAAWc,YAAX,CAHH;AAIAC,YAAAA,cAAc,EAAdA;AAJA,cAFN;AASEb,UAAAA,OAAO,EAAEb,cAAc,CAACgB,KAAK,CAACH,OAAP,EAAgBI,MAAhB,CATzB;AAUEH,UAAAA,KAAK,EAAE;AAVT;AAYD;;AACD,SAAKL,wCAAL;AAA+C;AAC7C,iCACKO,KADL;AAEEH,UAAAA,OAAO,EAAEb,cAAc,CAACgB,KAAK,CAACH,OAAP,EAAgBI,MAAhB,CAFzB;AAGEH,UAAAA,KAAK,EAAE;AAHT;AAKD;;AACD,SAAKN,wCAAL;AACA,SAAKF,yCAAL;AACA,SAAKH,2BAAL;AAAkC;AAChC,iCACKa,KADL;AAEEH,UAAAA,OAAO,EAAEb,cAAc,CAACgB,KAAK,CAACH,OAAP,EAAgBI,MAAhB,CAFzB;AAGEH,UAAAA,KAAK,EAAEG,MAAM,CAACG,OAAP,CAAeN;AAHxB;AAKD;;AAED;AACE,aAAOE,KAAP;AAzDJ;AA2DD","sourcesContent":["import { FetchTransactionSuccessAction } from 'decentraland-dapps/dist/modules/transaction/actions'\nimport { LoadingState, loadingReducer } from 'decentraland-dapps/dist/modules/loading/reducer'\nimport {\n  FetchThirdPartiesRequestAction,\n  FetchThirdPartiesSuccessAction,\n  FetchThirdPartiesFailureAction,\n  FETCH_THIRD_PARTIES_REQUEST,\n  FETCH_THIRD_PARTIES_SUCCESS,\n  FETCH_THIRD_PARTIES_FAILURE,\n  FETCH_THIRD_PARTY_AVAILABLE_SLOTS_REQUEST,\n  FetchThirdPartyAvailableSlotsRequestAction,\n  FetchThirdPartyAvailableSlotsSuccessAction,\n  FETCH_THIRD_PARTY_AVAILABLE_SLOTS_SUCCESS,\n  FETCH_THIRD_PARTY_AVAILABLE_SLOTS_FAILURE,\n  FetchThirdPartyAvailableSlotsFailureAction,\n  DeployBatchedThirdPartyItemsRequestAction,\n  DeployBatchedThirdPartyItemsSuccessAction,\n  DeployBatchedThirdPartyItemsFailureAction,\n  DEPLOY_BATCHED_THIRD_PARTY_ITEMS_REQUEST,\n  DEPLOY_BATCHED_THIRD_PARTY_ITEMS_FAILURE,\n  DEPLOY_BATCHED_THIRD_PARTY_ITEMS_SUCCESS\n} from './actions'\nimport { ThirdParty } from './types'\n\nexport type ThirdPartyState = {\n  data: Record<string, ThirdParty>\n  itemSlotPrice: number | null\n  loading: LoadingState\n  error: string | null\n}\n\nexport const INITIAL_STATE: ThirdPartyState = {\n  data: {},\n  itemSlotPrice: null,\n  loading: [],\n  error: null\n}\n\ntype ThirdPartyReducerAction =\n  | FetchThirdPartiesRequestAction\n  | FetchThirdPartiesSuccessAction\n  | FetchThirdPartiesFailureAction\n  | FetchTransactionSuccessAction\n  | FetchThirdPartyAvailableSlotsRequestAction\n  | FetchThirdPartyAvailableSlotsSuccessAction\n  | FetchThirdPartyAvailableSlotsFailureAction\n  | DeployBatchedThirdPartyItemsRequestAction\n  | DeployBatchedThirdPartyItemsSuccessAction\n  | DeployBatchedThirdPartyItemsFailureAction\n\nexport function thirdPartyReducer(state: ThirdPartyState = INITIAL_STATE, action: ThirdPartyReducerAction): ThirdPartyState {\n  switch (action.type) {\n    case DEPLOY_BATCHED_THIRD_PARTY_ITEMS_REQUEST:\n    case FETCH_THIRD_PARTY_AVAILABLE_SLOTS_REQUEST:\n    case FETCH_THIRD_PARTIES_REQUEST: {\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action)\n      }\n    }\n    case FETCH_THIRD_PARTIES_SUCCESS: {\n      const { thirdParties } = action.payload\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          ...thirdParties.reduce((obj, thirdParty) => {\n            obj[thirdParty.id] = { ...thirdParty }\n            return obj\n          }, {} as Record<string, ThirdParty>)\n        },\n        loading: loadingReducer(state.loading, action),\n        error: null\n      }\n    }\n    case FETCH_THIRD_PARTY_AVAILABLE_SLOTS_SUCCESS: {\n      const { thirdPartyId, availableSlots } = action.payload\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [thirdPartyId]: {\n            ...state.data[thirdPartyId],\n            availableSlots\n          }\n        },\n        loading: loadingReducer(state.loading, action),\n        error: null\n      }\n    }\n    case DEPLOY_BATCHED_THIRD_PARTY_ITEMS_SUCCESS: {\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: null\n      }\n    }\n    case DEPLOY_BATCHED_THIRD_PARTY_ITEMS_FAILURE:\n    case FETCH_THIRD_PARTY_AVAILABLE_SLOTS_FAILURE:\n    case FETCH_THIRD_PARTIES_FAILURE: {\n      return {\n        ...state,\n        loading: loadingReducer(state.loading, action),\n        error: action.payload.error\n      }\n    }\n\n    default:\n      return state\n  }\n}\n"]},"metadata":{},"sourceType":"module"}