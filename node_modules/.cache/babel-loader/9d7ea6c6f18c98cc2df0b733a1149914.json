{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _asyncGeneratorDelegate = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate\");\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\nvar DirFlat = require('./dir-flat');\n\nvar flatToShard = require('./flat-to-shard');\n\nvar Dir = require('./dir');\n\nvar toPathComponents = require('./utils/to-path-components');\n/**\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').BlockAPI} BlockAPI\n * @typedef {(source: AsyncIterable<InProgressImportResult>, block: BlockAPI, options: ImporterOptions) => AsyncIterable<ImportResult>} TreeBuilder\n */\n\n/**\n * @param {InProgressImportResult} elem\n * @param {Dir} tree\n * @param {ImporterOptions} options\n */\n\n\nfunction addToTree(_x6, _x7, _x8) {\n  return _addToTree.apply(this, arguments);\n}\n/**\n * @param {Dir | InProgressImportResult} tree\n * @param {BlockAPI} block\n */\n\n\nfunction _addToTree() {\n  _addToTree = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(elem, tree, options) {\n    var pathElems, lastIndex, parent, currentPath, i, pathElem, last, dir;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            pathElems = toPathComponents(elem.path || '');\n            lastIndex = pathElems.length - 1;\n            parent = tree;\n            currentPath = '';\n            i = 0;\n\n          case 5:\n            if (!(i < pathElems.length)) {\n              _context3.next = 30;\n              break;\n            }\n\n            pathElem = pathElems[i];\n            currentPath += \"\".concat(currentPath ? '/' : '').concat(pathElem);\n            last = i === lastIndex;\n            parent.dirty = true;\n            parent.cid = undefined;\n            parent.size = undefined;\n\n            if (!last) {\n              _context3.next = 20;\n              break;\n            }\n\n            _context3.next = 15;\n            return parent.put(pathElem, elem);\n\n          case 15:\n            _context3.next = 17;\n            return flatToShard(null, parent, options.shardSplitThreshold, options);\n\n          case 17:\n            tree = _context3.sent;\n            _context3.next = 27;\n            break;\n\n          case 20:\n            _context3.next = 22;\n            return parent.get(pathElem);\n\n          case 22:\n            dir = _context3.sent;\n\n            if (!dir || !(dir instanceof Dir)) {\n              dir = new DirFlat({\n                root: false,\n                dir: true,\n                parent: parent,\n                parentKey: pathElem,\n                path: currentPath,\n                dirty: true,\n                flat: true,\n                mtime: dir && dir.unixfs && dir.unixfs.mtime,\n                mode: dir && dir.unixfs && dir.unixfs.mode\n              }, options);\n            }\n\n            _context3.next = 26;\n            return parent.put(pathElem, dir);\n\n          case 26:\n            parent = dir;\n\n          case 27:\n            i++;\n            _context3.next = 5;\n            break;\n\n          case 30:\n            return _context3.abrupt(\"return\", tree);\n\n          case 31:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _addToTree.apply(this, arguments);\n}\n\nfunction flushAndYield(_x, _x2) {\n  return _flushAndYield.apply(this, arguments);\n}\n/**\n * @type {TreeBuilder}\n */\n\n\nfunction _flushAndYield() {\n  _flushAndYield = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tree, block) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (tree instanceof Dir) {\n              _context.next = 5;\n              break;\n            }\n\n            if (!(tree && tree.unixfs && tree.unixfs.isDirectory())) {\n              _context.next = 4;\n              break;\n            }\n\n            _context.next = 4;\n            return tree;\n\n          case 4:\n            return _context.abrupt(\"return\");\n\n          case 5:\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(tree.flush(block)), _awaitAsyncGenerator), \"t0\", 6);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _flushAndYield.apply(this, arguments);\n}\n\nfunction treeBuilder(_x3, _x4, _x5) {\n  return _treeBuilder.apply(this, arguments);\n}\n\nfunction _treeBuilder() {\n  _treeBuilder = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(source, block, options) {\n    var tree, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, unwrapped;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            /** @type {Dir} */\n            tree = new DirFlat({\n              root: true,\n              dir: true,\n              path: '',\n              dirty: true,\n              flat: true\n            }, options);\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context2.prev = 3;\n            _iterator = _asyncIterator(source);\n\n          case 5:\n            _context2.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 7:\n            if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n              _context2.next = 20;\n              break;\n            }\n\n            entry = _step.value;\n\n            if (entry) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"continue\", 17);\n\n          case 11:\n            _context2.next = 13;\n            return _awaitAsyncGenerator(addToTree(entry, tree, options));\n\n          case 13:\n            tree = _context2.sent;\n\n            if (!(!entry.unixfs || !entry.unixfs.isDirectory())) {\n              _context2.next = 17;\n              break;\n            }\n\n            _context2.next = 17;\n            return entry;\n\n          case 17:\n            _iteratorAbruptCompletion = false;\n            _context2.next = 5;\n            break;\n\n          case 20:\n            _context2.next = 26;\n            break;\n\n          case 22:\n            _context2.prev = 22;\n            _context2.t0 = _context2[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n\n          case 26:\n            _context2.prev = 26;\n            _context2.prev = 27;\n\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context2.next = 31;\n              break;\n            }\n\n            _context2.next = 31;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 31:\n            _context2.prev = 31;\n\n            if (!_didIteratorError) {\n              _context2.next = 34;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 34:\n            return _context2.finish(31);\n\n          case 35:\n            return _context2.finish(26);\n\n          case 36:\n            if (!options.wrapWithDirectory) {\n              _context2.next = 40;\n              break;\n            }\n\n            return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(flushAndYield(tree, block)), _awaitAsyncGenerator), \"t1\", 38);\n\n          case 38:\n            _context2.next = 70;\n            break;\n\n          case 40:\n            _iteratorAbruptCompletion2 = false;\n            _didIteratorError2 = false;\n            _context2.prev = 42;\n            _iterator2 = _asyncIterator(tree.eachChildSeries());\n\n          case 44:\n            _context2.next = 46;\n            return _awaitAsyncGenerator(_iterator2.next());\n\n          case 46:\n            if (!(_iteratorAbruptCompletion2 = !(_step2 = _context2.sent).done)) {\n              _context2.next = 54;\n              break;\n            }\n\n            unwrapped = _step2.value;\n\n            if (unwrapped) {\n              _context2.next = 50;\n              break;\n            }\n\n            return _context2.abrupt(\"continue\", 51);\n\n          case 50:\n            return _context2.delegateYield(_asyncGeneratorDelegate(_asyncIterator(flushAndYield(unwrapped.child, block)), _awaitAsyncGenerator), \"t2\", 51);\n\n          case 51:\n            _iteratorAbruptCompletion2 = false;\n            _context2.next = 44;\n            break;\n\n          case 54:\n            _context2.next = 60;\n            break;\n\n          case 56:\n            _context2.prev = 56;\n            _context2.t3 = _context2[\"catch\"](42);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context2.t3;\n\n          case 60:\n            _context2.prev = 60;\n            _context2.prev = 61;\n\n            if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n              _context2.next = 65;\n              break;\n            }\n\n            _context2.next = 65;\n            return _awaitAsyncGenerator(_iterator2.return());\n\n          case 65:\n            _context2.prev = 65;\n\n            if (!_didIteratorError2) {\n              _context2.next = 68;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 68:\n            return _context2.finish(65);\n\n          case 69:\n            return _context2.finish(60);\n\n          case 70:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 22, 26, 36], [27,, 31, 35], [42, 56, 60, 70], [61,, 65, 69]]);\n  }));\n  return _treeBuilder.apply(this, arguments);\n}\n\nmodule.exports = treeBuilder;","map":null,"metadata":{},"sourceType":"script"}