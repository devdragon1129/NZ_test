{"ast":null,"code":"import { Logger } from \"../Misc/logger\";\nimport { Color3 } from \"../Maths/math.color\";\nimport { SubSurfaceScatteringPostProcess } from \"../PostProcesses/subSurfaceScatteringPostProcess\";\nimport { SceneComponentConstants } from \"../sceneComponent\";\nimport { _DevTools } from '../Misc/devTools';\n/**\r\n * Contains all parameters needed for the prepass to perform\r\n * screen space subsurface scattering\r\n */\n\nvar SubSurfaceConfiguration =\n/** @class */\nfunction () {\n  /**\r\n   * Builds a subsurface configuration object\r\n   * @param scene The scene\r\n   */\n  function SubSurfaceConfiguration(scene) {\n    this._ssDiffusionS = [];\n    this._ssFilterRadii = [];\n    this._ssDiffusionD = [];\n    /**\r\n     * Is subsurface enabled\r\n     */\n\n    this.enabled = false;\n    /**\r\n     * Name of the configuration\r\n     */\n\n    this.name = SceneComponentConstants.NAME_SUBSURFACE;\n    /**\r\n     * Diffusion profile colors for subsurface scattering\r\n     * You can add one diffusion color using `addDiffusionProfile` on `scene.prePassRenderer`\r\n     * See ...\r\n     * Note that you can only store up to 5 of them\r\n     */\n\n    this.ssDiffusionProfileColors = [];\n    /**\r\n     * Defines the ratio real world => scene units.\r\n     * Used for subsurface scattering\r\n     */\n\n    this.metersPerUnit = 1;\n    /**\r\n     * Textures that should be present in the MRT for this effect to work\r\n     */\n\n    this.texturesRequired = [5, 6, 4, 0]; // Adding default diffusion profile\n\n    this.addDiffusionProfile(new Color3(1, 1, 1));\n    this._scene = scene;\n\n    SubSurfaceConfiguration._SceneComponentInitialization(this._scene);\n  }\n\n  Object.defineProperty(SubSurfaceConfiguration.prototype, \"ssDiffusionS\", {\n    /**\r\n     * Diffusion profile color for subsurface scattering\r\n     */\n    get: function get() {\n      return this._ssDiffusionS;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceConfiguration.prototype, \"ssDiffusionD\", {\n    /**\r\n     * Diffusion profile max color channel value for subsurface scattering\r\n     */\n    get: function get() {\n      return this._ssDiffusionD;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SubSurfaceConfiguration.prototype, \"ssFilterRadii\", {\n    /**\r\n     * Diffusion profile filter radius for subsurface scattering\r\n     */\n    get: function get() {\n      return this._ssFilterRadii;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Adds a new diffusion profile.\r\n   * Useful for more realistic subsurface scattering on diverse materials.\r\n   * @param color The color of the diffusion profile. Should be the average color of the material.\r\n   * @return The index of the diffusion profile for the material subsurface configuration\r\n   */\n\n  SubSurfaceConfiguration.prototype.addDiffusionProfile = function (color) {\n    if (this.ssDiffusionD.length >= 5) {\n      // We only suppport 5 diffusion profiles\n      Logger.Error(\"You already reached the maximum number of diffusion profiles.\");\n      return 0; // default profile\n    } // Do not add doubles\n\n\n    for (var i = 0; i < this._ssDiffusionS.length / 3; i++) {\n      if (this._ssDiffusionS[i * 3] === color.r && this._ssDiffusionS[i * 3 + 1] === color.g && this._ssDiffusionS[i * 3 + 2] === color.b) {\n        return i;\n      }\n    }\n\n    this._ssDiffusionS.push(color.r, color.b, color.g);\n\n    this._ssDiffusionD.push(Math.max(Math.max(color.r, color.b), color.g));\n\n    this._ssFilterRadii.push(this.getDiffusionProfileParameters(color));\n\n    this.ssDiffusionProfileColors.push(color);\n    return this._ssDiffusionD.length - 1;\n  };\n  /**\r\n   * Creates the sss post process\r\n   * @return The created post process\r\n   */\n\n\n  SubSurfaceConfiguration.prototype.createPostProcess = function () {\n    this.postProcess = new SubSurfaceScatteringPostProcess(\"subSurfaceScattering\", this._scene, 1, null, undefined, this._scene.getEngine());\n    this.postProcess.autoClear = false;\n    return this.postProcess;\n  };\n  /**\r\n   * Deletes all diffusion profiles.\r\n   * Note that in order to render subsurface scattering, you should have at least 1 diffusion profile.\r\n   */\n\n\n  SubSurfaceConfiguration.prototype.clearAllDiffusionProfiles = function () {\n    this._ssDiffusionD = [];\n    this._ssDiffusionS = [];\n    this._ssFilterRadii = [];\n    this.ssDiffusionProfileColors = [];\n  };\n  /**\r\n   * Disposes this object\r\n   */\n\n\n  SubSurfaceConfiguration.prototype.dispose = function () {\n    this.clearAllDiffusionProfiles();\n    this.postProcess.dispose();\n  };\n  /**\r\n   * @hidden\r\n   * https://zero-radiance.github.io/post/sampling-diffusion/\r\n   *\r\n   * Importance sample the normalized diffuse reflectance profile for the computed value of 's'.\r\n   * ------------------------------------------------------------------------------------\r\n   * R[r, phi, s]   = s * (Exp[-r * s] + Exp[-r * s / 3]) / (8 * Pi * r)\r\n   * PDF[r, phi, s] = r * R[r, phi, s]\r\n   * CDF[r, s]      = 1 - 1/4 * Exp[-r * s] - 3/4 * Exp[-r * s / 3]\r\n   * ------------------------------------------------------------------------------------\r\n   * We importance sample the color channel with the widest scattering distance.\r\n   */\n\n\n  SubSurfaceConfiguration.prototype.getDiffusionProfileParameters = function (color) {\n    var cdf = 0.997;\n    var maxScatteringDistance = Math.max(color.r, color.g, color.b);\n    return this._sampleBurleyDiffusionProfile(cdf, maxScatteringDistance);\n  };\n  /**\r\n   * Performs sampling of a Normalized Burley diffusion profile in polar coordinates.\r\n   * 'u' is the random number (the value of the CDF): [0, 1).\r\n   * rcp(s) = 1 / ShapeParam = ScatteringDistance.\r\n   * Returns the sampled radial distance, s.t. (u = 0 -> r = 0) and (u = 1 -> r = Inf).\r\n   */\n\n\n  SubSurfaceConfiguration.prototype._sampleBurleyDiffusionProfile = function (u, rcpS) {\n    u = 1 - u; // Convert CDF to CCDF\n\n    var g = 1 + 4 * u * (2 * u + Math.sqrt(1 + 4 * u * u));\n    var n = Math.pow(g, -1.0 / 3.0); // g^(-1/3)\n\n    var p = g * n * n; // g^(+1/3)\n\n    var c = 1 + p + n; // 1 + g^(+1/3) + g^(-1/3)\n\n    var x = 3 * Math.log(c / (4 * u));\n    return x * rcpS;\n  };\n  /** @hidden */\n\n\n  SubSurfaceConfiguration._SceneComponentInitialization = function (_) {\n    throw _DevTools.WarnImport(\"PrePassRendererSceneComponent\");\n  };\n\n  return SubSurfaceConfiguration;\n}();\n\nexport { SubSurfaceConfiguration };","map":null,"metadata":{},"sourceType":"module"}