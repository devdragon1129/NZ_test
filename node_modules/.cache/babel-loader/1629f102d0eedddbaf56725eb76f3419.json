{"ast":null,"code":"import { PerfCounter } from \"../Misc/perfCounter\";\n/**\r\n * This class can be used to get instrumentation data from a Babylon engine\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\r\n */\n\nvar EngineInstrumentation =\n/** @class */\nfunction () {\n  /**\r\n   * Instantiates a new engine instrumentation.\r\n   * This class can be used to get instrumentation data from a Babylon engine\r\n   * @see https://doc.babylonjs.com/how_to/optimizing_your_scene#engineinstrumentation\r\n   * @param engine Defines the engine to instrument\r\n   */\n  function EngineInstrumentation(\n  /**\r\n   * Define the instrumented engine.\r\n   */\n  engine) {\n    this.engine = engine;\n    this._captureGPUFrameTime = false;\n    this._gpuFrameTime = new PerfCounter();\n    this._captureShaderCompilationTime = false;\n    this._shaderCompilationTime = new PerfCounter(); // Observers\n\n    this._onBeginFrameObserver = null;\n    this._onEndFrameObserver = null;\n    this._onBeforeShaderCompilationObserver = null;\n    this._onAfterShaderCompilationObserver = null;\n  }\n\n  Object.defineProperty(EngineInstrumentation.prototype, \"gpuFrameTimeCounter\", {\n    // Properties\n\n    /**\r\n     * Gets the perf counter used for GPU frame time\r\n     */\n    get: function get() {\n      return this._gpuFrameTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EngineInstrumentation.prototype, \"captureGPUFrameTime\", {\n    /**\r\n     * Gets the GPU frame time capture status\r\n     */\n    get: function get() {\n      return this._captureGPUFrameTime;\n    },\n\n    /**\r\n     * Enable or disable the GPU frame time capture\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureGPUFrameTime) {\n        return;\n      }\n\n      this._captureGPUFrameTime = value;\n\n      if (value) {\n        this._onBeginFrameObserver = this.engine.onBeginFrameObservable.add(function () {\n          if (!_this._gpuFrameTimeToken) {\n            _this._gpuFrameTimeToken = _this.engine.startTimeQuery();\n          }\n        });\n        this._onEndFrameObserver = this.engine.onEndFrameObservable.add(function () {\n          if (!_this._gpuFrameTimeToken) {\n            return;\n          }\n\n          var time = _this.engine.endTimeQuery(_this._gpuFrameTimeToken);\n\n          if (time > -1) {\n            _this._gpuFrameTimeToken = null;\n\n            _this._gpuFrameTime.fetchNewFrame();\n\n            _this._gpuFrameTime.addCount(time, true);\n          }\n        });\n      } else {\n        this.engine.onBeginFrameObservable.remove(this._onBeginFrameObserver);\n        this._onBeginFrameObserver = null;\n        this.engine.onEndFrameObservable.remove(this._onEndFrameObserver);\n        this._onEndFrameObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EngineInstrumentation.prototype, \"shaderCompilationTimeCounter\", {\n    /**\r\n     * Gets the perf counter used for shader compilation time\r\n     */\n    get: function get() {\n      return this._shaderCompilationTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(EngineInstrumentation.prototype, \"captureShaderCompilationTime\", {\n    /**\r\n     * Gets the shader compilation time capture status\r\n     */\n    get: function get() {\n      return this._captureShaderCompilationTime;\n    },\n\n    /**\r\n     * Enable or disable the shader compilation time capture\r\n     */\n    set: function set(value) {\n      var _this = this;\n\n      if (value === this._captureShaderCompilationTime) {\n        return;\n      }\n\n      this._captureShaderCompilationTime = value;\n\n      if (value) {\n        this._onBeforeShaderCompilationObserver = this.engine.onBeforeShaderCompilationObservable.add(function () {\n          _this._shaderCompilationTime.fetchNewFrame();\n\n          _this._shaderCompilationTime.beginMonitoring();\n        });\n        this._onAfterShaderCompilationObserver = this.engine.onAfterShaderCompilationObservable.add(function () {\n          _this._shaderCompilationTime.endMonitoring();\n        });\n      } else {\n        this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\n        this._onBeforeShaderCompilationObserver = null;\n        this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\n        this._onAfterShaderCompilationObserver = null;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Dispose and release associated resources.\r\n   */\n\n  EngineInstrumentation.prototype.dispose = function () {\n    this.engine.onBeginFrameObservable.remove(this._onBeginFrameObserver);\n    this._onBeginFrameObserver = null;\n    this.engine.onEndFrameObservable.remove(this._onEndFrameObserver);\n    this._onEndFrameObserver = null;\n    this.engine.onBeforeShaderCompilationObservable.remove(this._onBeforeShaderCompilationObserver);\n    this._onBeforeShaderCompilationObserver = null;\n    this.engine.onAfterShaderCompilationObservable.remove(this._onAfterShaderCompilationObserver);\n    this._onAfterShaderCompilationObserver = null;\n    this.engine = null;\n  };\n\n  return EngineInstrumentation;\n}();\n\nexport { EngineInstrumentation };","map":null,"metadata":{},"sourceType":"module"}