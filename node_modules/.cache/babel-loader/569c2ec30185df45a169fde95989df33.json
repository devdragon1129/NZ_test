{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Texture } from \"../../../Materials/Textures/texture\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\nimport \"../../../Shaders/chromaticAberration.fragment\";\nimport \"../../../Shaders/lensHighlights.fragment\";\nimport \"../../../Shaders/depthOfField.fragment\";\n/**\r\n * BABYLON.JS Chromatic Aberration GLSL Shader\r\n * Author: Olivier Guyot\r\n * Separates very slightly R, G and B colors on the edges of the screen\r\n * Inspired by Francois Tarlier & Martins Upitis\r\n */\n\nvar LensRenderingPipeline =\n/** @class */\nfunction (_super) {\n  __extends(LensRenderingPipeline, _super);\n  /**\r\n   * @constructor\r\n   *\r\n   * Effect parameters are as follow:\r\n   * {\r\n   *      chromatic_aberration: number;       // from 0 to x (1 for realism)\r\n   *      edge_blur: number;                  // from 0 to x (1 for realism)\r\n   *      distortion: number;                 // from 0 to x (1 for realism)\r\n   *      grain_amount: number;               // from 0 to 1\r\n   *      grain_texture: BABYLON.Texture;     // texture to use for grain effect; if unset, use random B&W noise\r\n   *      dof_focus_distance: number;         // depth-of-field: focus distance; unset to disable (disabled by default)\r\n   *      dof_aperture: number;               // depth-of-field: focus blur bias (default: 1)\r\n   *      dof_darken: number;                 // depth-of-field: darken that which is out of focus (from 0 to 1, disabled by default)\r\n   *      dof_pentagon: boolean;              // depth-of-field: makes a pentagon-like \"bokeh\" effect\r\n   *      dof_gain: number;                   // depth-of-field: highlights gain; unset to disable (disabled by default)\r\n   *      dof_threshold: number;              // depth-of-field: highlights threshold (default: 1)\r\n   *      blur_noise: boolean;                // add a little bit of noise to the blur (default: true)\r\n   * }\r\n   * Note: if an effect parameter is unset, effect is disabled\r\n   *\r\n   * @param name The rendering pipeline name\r\n   * @param parameters - An object containing all parameters (see above)\r\n   * @param scene The scene linked to this pipeline\r\n   * @param ratio The size of the postprocesses (0.5 means that your postprocess will have a width = canvas.width 0.5 and a height = canvas.height 0.5)\r\n   * @param cameras The array of cameras that the rendering pipeline will be attached to\r\n   */\n\n\n  function LensRenderingPipeline(name, parameters, scene, ratio, cameras) {\n    if (ratio === void 0) {\n      ratio = 1.0;\n    }\n\n    var _this = _super.call(this, scene.getEngine(), name) || this; // Lens effects can be of the following:\n    // - chromatic aberration (slight shift of RGB colors)\n    // - blur on the edge of the lens\n    // - lens distortion\n    // - depth-of-field blur & highlights enhancing\n    // - depth-of-field 'bokeh' effect (shapes appearing in blurred areas)\n    // - grain effect (noise or custom texture)\n    // Two additional texture samplers are needed:\n    // - depth map (for depth-of-field)\n    // - grain texture\n\n    /**\r\n     * @ignore\r\n     * The chromatic aberration PostProcess id in the pipeline\r\n     */\n\n\n    _this.LensChromaticAberrationEffect = \"LensChromaticAberrationEffect\";\n    /**\r\n     * @ignore\r\n     * The highlights enhancing PostProcess id in the pipeline\r\n     */\n\n    _this.HighlightsEnhancingEffect = \"HighlightsEnhancingEffect\";\n    /**\r\n     * @ignore\r\n    * The depth-of-field PostProcess id in the pipeline\r\n    */\n\n    _this.LensDepthOfFieldEffect = \"LensDepthOfFieldEffect\";\n    _this._pentagonBokehIsEnabled = false;\n    _this._scene = scene; // Fetch texture samplers\n\n    _this._depthTexture = scene.enableDepthRenderer().getDepthMap(); // Force depth renderer \"on\"\n\n    if (parameters.grain_texture) {\n      _this._grainTexture = parameters.grain_texture;\n    } else {\n      _this._createGrainTexture();\n    } // save parameters\n\n\n    _this._edgeBlur = parameters.edge_blur ? parameters.edge_blur : 0;\n    _this._grainAmount = parameters.grain_amount ? parameters.grain_amount : 0;\n    _this._chromaticAberration = parameters.chromatic_aberration ? parameters.chromatic_aberration : 0;\n    _this._distortion = parameters.distortion ? parameters.distortion : 0;\n    _this._highlightsGain = parameters.dof_gain !== undefined ? parameters.dof_gain : -1;\n    _this._highlightsThreshold = parameters.dof_threshold ? parameters.dof_threshold : 1;\n    _this._dofDistance = parameters.dof_focus_distance !== undefined ? parameters.dof_focus_distance : -1;\n    _this._dofAperture = parameters.dof_aperture ? parameters.dof_aperture : 1;\n    _this._dofDarken = parameters.dof_darken ? parameters.dof_darken : 0;\n    _this._dofPentagon = parameters.dof_pentagon !== undefined ? parameters.dof_pentagon : true;\n    _this._blurNoise = parameters.blur_noise !== undefined ? parameters.blur_noise : true; // Create effects\n\n    _this._createChromaticAberrationPostProcess(ratio);\n\n    _this._createHighlightsPostProcess(ratio);\n\n    _this._createDepthOfFieldPostProcess(ratio / 4); // Set up pipeline\n\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.LensChromaticAberrationEffect, function () {\n      return _this._chromaticAberrationPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.HighlightsEnhancingEffect, function () {\n      return _this._highlightsPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.LensDepthOfFieldEffect, function () {\n      return _this._depthOfFieldPostProcess;\n    }, true));\n\n    if (_this._highlightsGain === -1) {\n      _this._disableEffect(_this.HighlightsEnhancingEffect, null);\n    } // Finish\n\n\n    scene.postProcessRenderPipelineManager.addPipeline(_this);\n\n    if (cameras) {\n      scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n    }\n\n    return _this;\n  }\n  /**\r\n   * Get the class name\r\n   * @returns \"LensRenderingPipeline\"\r\n   */\n\n\n  LensRenderingPipeline.prototype.getClassName = function () {\n    return \"LensRenderingPipeline\";\n  };\n\n  Object.defineProperty(LensRenderingPipeline.prototype, \"scene\", {\n    // Properties\n\n    /**\r\n     * Gets associated scene\r\n     */\n    get: function get() {\n      return this._scene;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"edgeBlur\", {\n    /**\r\n     * Gets or sets the edge blur\r\n     */\n    get: function get() {\n      return this._edgeBlur;\n    },\n    set: function set(value) {\n      this.setEdgeBlur(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"grainAmount\", {\n    /**\r\n     * Gets or sets the grain amount\r\n     */\n    get: function get() {\n      return this._grainAmount;\n    },\n    set: function set(value) {\n      this.setGrainAmount(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"chromaticAberration\", {\n    /**\r\n     * Gets or sets the chromatic aberration amount\r\n     */\n    get: function get() {\n      return this._chromaticAberration;\n    },\n    set: function set(value) {\n      this.setChromaticAberration(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"dofAperture\", {\n    /**\r\n     * Gets or sets the depth of field aperture\r\n     */\n    get: function get() {\n      return this._dofAperture;\n    },\n    set: function set(value) {\n      this.setAperture(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"edgeDistortion\", {\n    /**\r\n     * Gets or sets the edge distortion\r\n     */\n    get: function get() {\n      return this._distortion;\n    },\n    set: function set(value) {\n      this.setEdgeDistortion(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"dofDistortion\", {\n    /**\r\n     * Gets or sets the depth of field distortion\r\n     */\n    get: function get() {\n      return this._dofDistance;\n    },\n    set: function set(value) {\n      this.setFocusDistance(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"darkenOutOfFocus\", {\n    /**\r\n     * Gets or sets the darken out of focus amount\r\n     */\n    get: function get() {\n      return this._dofDarken;\n    },\n    set: function set(value) {\n      this.setDarkenOutOfFocus(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"blurNoise\", {\n    /**\r\n     * Gets or sets a boolean indicating if blur noise is enabled\r\n     */\n    get: function get() {\n      return this._blurNoise;\n    },\n    set: function set(value) {\n      this._blurNoise = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"pentagonBokeh\", {\n    /**\r\n     * Gets or sets a boolean indicating if pentagon bokeh is enabled\r\n     */\n    get: function get() {\n      return this._pentagonBokehIsEnabled;\n    },\n    set: function set(value) {\n      if (value) {\n        this.enablePentagonBokeh();\n      } else {\n        this.disablePentagonBokeh();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"highlightsGain\", {\n    /**\r\n     * Gets or sets the highlight grain amount\r\n     */\n    get: function get() {\n      return this._highlightsGain;\n    },\n    set: function set(value) {\n      this.setHighlightsGain(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LensRenderingPipeline.prototype, \"highlightsThreshold\", {\n    /**\r\n     * Gets or sets the highlight threshold\r\n     */\n    get: function get() {\n      return this._highlightsThreshold;\n    },\n    set: function set(value) {\n      this.setHighlightsThreshold(value);\n    },\n    enumerable: false,\n    configurable: true\n  }); // public methods (self explanatory)\n\n  /**\r\n   * Sets the amount of blur at the edges\r\n   * @param amount blur amount\r\n   */\n\n  LensRenderingPipeline.prototype.setEdgeBlur = function (amount) {\n    this._edgeBlur = amount;\n  };\n  /**\r\n   * Sets edge blur to 0\r\n   */\n\n\n  LensRenderingPipeline.prototype.disableEdgeBlur = function () {\n    this._edgeBlur = 0;\n  };\n  /**\r\n   * Sets the amout of grain\r\n   * @param amount Amount of grain\r\n   */\n\n\n  LensRenderingPipeline.prototype.setGrainAmount = function (amount) {\n    this._grainAmount = amount;\n  };\n  /**\r\n   * Set grain amount to 0\r\n   */\n\n\n  LensRenderingPipeline.prototype.disableGrain = function () {\n    this._grainAmount = 0;\n  };\n  /**\r\n   * Sets the chromatic aberration amount\r\n   * @param amount amount of chromatic aberration\r\n   */\n\n\n  LensRenderingPipeline.prototype.setChromaticAberration = function (amount) {\n    this._chromaticAberration = amount;\n  };\n  /**\r\n   * Sets chromatic aberration amount to 0\r\n   */\n\n\n  LensRenderingPipeline.prototype.disableChromaticAberration = function () {\n    this._chromaticAberration = 0;\n  };\n  /**\r\n   * Sets the EdgeDistortion amount\r\n   * @param amount amount of EdgeDistortion\r\n   */\n\n\n  LensRenderingPipeline.prototype.setEdgeDistortion = function (amount) {\n    this._distortion = amount;\n  };\n  /**\r\n   * Sets edge distortion to 0\r\n   */\n\n\n  LensRenderingPipeline.prototype.disableEdgeDistortion = function () {\n    this._distortion = 0;\n  };\n  /**\r\n   * Sets the FocusDistance amount\r\n   * @param amount amount of FocusDistance\r\n   */\n\n\n  LensRenderingPipeline.prototype.setFocusDistance = function (amount) {\n    this._dofDistance = amount;\n  };\n  /**\r\n  * Disables depth of field\r\n  */\n\n\n  LensRenderingPipeline.prototype.disableDepthOfField = function () {\n    this._dofDistance = -1;\n  };\n  /**\r\n   * Sets the Aperture amount\r\n   * @param amount amount of Aperture\r\n   */\n\n\n  LensRenderingPipeline.prototype.setAperture = function (amount) {\n    this._dofAperture = amount;\n  };\n  /**\r\n   * Sets the DarkenOutOfFocus amount\r\n   * @param amount amount of DarkenOutOfFocus\r\n   */\n\n\n  LensRenderingPipeline.prototype.setDarkenOutOfFocus = function (amount) {\n    this._dofDarken = amount;\n  };\n  /**\r\n   * Creates a pentagon bokeh effect\r\n   */\n\n\n  LensRenderingPipeline.prototype.enablePentagonBokeh = function () {\n    this._highlightsPostProcess.updateEffect(\"#define PENTAGON\\n\");\n\n    this._pentagonBokehIsEnabled = true;\n  };\n  /**\r\n   * Disables the pentagon bokeh effect\r\n   */\n\n\n  LensRenderingPipeline.prototype.disablePentagonBokeh = function () {\n    this._pentagonBokehIsEnabled = false;\n\n    this._highlightsPostProcess.updateEffect();\n  };\n  /**\r\n   * Enables noise blur\r\n   */\n\n\n  LensRenderingPipeline.prototype.enableNoiseBlur = function () {\n    this._blurNoise = true;\n  };\n  /**\r\n   * Disables noise blur\r\n   */\n\n\n  LensRenderingPipeline.prototype.disableNoiseBlur = function () {\n    this._blurNoise = false;\n  };\n  /**\r\n   * Sets the HighlightsGain amount\r\n   * @param amount amount of HighlightsGain\r\n   */\n\n\n  LensRenderingPipeline.prototype.setHighlightsGain = function (amount) {\n    this._highlightsGain = amount;\n  };\n  /**\r\n   * Sets the HighlightsThreshold amount\r\n   * @param amount amount of HighlightsThreshold\r\n   */\n\n\n  LensRenderingPipeline.prototype.setHighlightsThreshold = function (amount) {\n    if (this._highlightsGain === -1) {\n      this._highlightsGain = 1.0;\n    }\n\n    this._highlightsThreshold = amount;\n  };\n  /**\r\n   * Disables highlights\r\n   */\n\n\n  LensRenderingPipeline.prototype.disableHighlights = function () {\n    this._highlightsGain = -1;\n  };\n  /**\r\n   * Removes the internal pipeline assets and detaches the pipeline from the scene cameras\r\n   * @param disableDepthRender If the scens depth rendering should be disabled (default: false)\r\n   */\n\n\n  LensRenderingPipeline.prototype.dispose = function (disableDepthRender) {\n    if (disableDepthRender === void 0) {\n      disableDepthRender = false;\n    }\n\n    this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n\n    this._chromaticAberrationPostProcess = null;\n    this._highlightsPostProcess = null;\n    this._depthOfFieldPostProcess = null;\n\n    this._grainTexture.dispose();\n\n    if (disableDepthRender) {\n      this._scene.disableDepthRenderer();\n    }\n  }; // colors shifting and distortion\n\n\n  LensRenderingPipeline.prototype._createChromaticAberrationPostProcess = function (ratio) {\n    var _this = this;\n\n    this._chromaticAberrationPostProcess = new PostProcess(\"LensChromaticAberration\", \"chromaticAberration\", [\"chromatic_aberration\", \"screen_width\", \"screen_height\", \"direction\", \"radialIntensity\", \"centerPosition\"], // uniforms\n    [], // samplers\n    ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n\n    this._chromaticAberrationPostProcess.onApply = function (effect) {\n      effect.setFloat('chromatic_aberration', _this._chromaticAberration);\n      effect.setFloat('screen_width', _this._scene.getEngine().getRenderWidth());\n      effect.setFloat('screen_height', _this._scene.getEngine().getRenderHeight());\n      effect.setFloat('radialIntensity', 1);\n      effect.setFloat2('direction', 17, 17);\n      effect.setFloat2('centerPosition', 0.5, 0.5);\n    };\n  }; // highlights enhancing\n\n\n  LensRenderingPipeline.prototype._createHighlightsPostProcess = function (ratio) {\n    var _this = this;\n\n    this._highlightsPostProcess = new PostProcess(\"LensHighlights\", \"lensHighlights\", [\"gain\", \"threshold\", \"screen_width\", \"screen_height\"], // uniforms\n    [], // samplers\n    ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, this._dofPentagon ? \"#define PENTAGON\\n\" : \"\");\n\n    this._highlightsPostProcess.onApply = function (effect) {\n      effect.setFloat('gain', _this._highlightsGain);\n      effect.setFloat('threshold', _this._highlightsThreshold);\n      effect.setTextureFromPostProcess(\"textureSampler\", _this._chromaticAberrationPostProcess);\n      effect.setFloat('screen_width', _this._scene.getEngine().getRenderWidth());\n      effect.setFloat('screen_height', _this._scene.getEngine().getRenderHeight());\n    };\n  }; // colors shifting and distortion\n\n\n  LensRenderingPipeline.prototype._createDepthOfFieldPostProcess = function (ratio) {\n    var _this = this;\n\n    this._depthOfFieldPostProcess = new PostProcess(\"LensDepthOfField\", \"depthOfField\", [\"grain_amount\", \"blur_noise\", \"screen_width\", \"screen_height\", \"distortion\", \"dof_enabled\", \"screen_distance\", \"aperture\", \"darken\", \"edge_blur\", \"highlights\", \"near\", \"far\"], [\"depthSampler\", \"grainSampler\", \"highlightsSampler\"], ratio, null, Texture.TRILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n\n    this._depthOfFieldPostProcess.onApply = function (effect) {\n      effect.setTexture(\"depthSampler\", _this._depthTexture);\n      effect.setTexture(\"grainSampler\", _this._grainTexture);\n      effect.setTextureFromPostProcess(\"textureSampler\", _this._highlightsPostProcess);\n      effect.setTextureFromPostProcess(\"highlightsSampler\", _this._depthOfFieldPostProcess);\n      effect.setFloat('grain_amount', _this._grainAmount);\n      effect.setBool('blur_noise', _this._blurNoise);\n      effect.setFloat('screen_width', _this._scene.getEngine().getRenderWidth());\n      effect.setFloat('screen_height', _this._scene.getEngine().getRenderHeight());\n      effect.setFloat('distortion', _this._distortion);\n      effect.setBool('dof_enabled', _this._dofDistance !== -1);\n      effect.setFloat('screen_distance', 1.0 / (0.1 - 1.0 / _this._dofDistance));\n      effect.setFloat('aperture', _this._dofAperture);\n      effect.setFloat('darken', _this._dofDarken);\n      effect.setFloat('edge_blur', _this._edgeBlur);\n      effect.setBool('highlights', _this._highlightsGain !== -1);\n\n      if (_this._scene.activeCamera) {\n        effect.setFloat('near', _this._scene.activeCamera.minZ);\n        effect.setFloat('far', _this._scene.activeCamera.maxZ);\n      }\n    };\n  }; // creates a black and white random noise texture, 512x512\n\n\n  LensRenderingPipeline.prototype._createGrainTexture = function () {\n    var size = 512;\n    this._grainTexture = new DynamicTexture(\"LensNoiseTexture\", size, this._scene, false, Texture.BILINEAR_SAMPLINGMODE);\n    this._grainTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n    this._grainTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n\n    var context = this._grainTexture.getContext();\n\n    var rand = function rand(min, max) {\n      return Math.random() * (max - min) + min;\n    };\n\n    var value;\n\n    for (var x = 0; x < size; x++) {\n      for (var y = 0; y < size; y++) {\n        value = Math.floor(rand(0.42, 0.58) * 255);\n        context.fillStyle = 'rgb(' + value + ', ' + value + ', ' + value + ')';\n        context.fillRect(x, y, 1, 1);\n      }\n    }\n\n    this._grainTexture.update(false);\n  };\n\n  return LensRenderingPipeline;\n}(PostProcessRenderPipeline);\n\nexport { LensRenderingPipeline };","map":null,"metadata":{},"sourceType":"module"}