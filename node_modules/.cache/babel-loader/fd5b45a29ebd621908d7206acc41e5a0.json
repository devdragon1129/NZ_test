{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialConnectionPoint, NodeMaterialConnectionPointCompatibilityStates } from './nodeMaterialBlockConnectionPoint';\n/**\r\n * Defines a connection point to be used for points with a custom object type\r\n */\n\nvar NodeMaterialConnectionPointCustomObject =\n/** @class */\nfunction (_super) {\n  __extends(NodeMaterialConnectionPointCustomObject, _super);\n  /**\r\n   * Creates a new connection point\r\n   * @param name defines the connection point name\r\n   * @param ownerBlock defines the block hosting this connection point\r\n   * @param direction defines the direction of the connection point\r\n   */\n\n\n  function NodeMaterialConnectionPointCustomObject(name, ownerBlock, direction, _blockType, _blockName, _nameForCheking) {\n    var _this = _super.call(this, name, ownerBlock, direction) || this;\n\n    _this._blockType = _blockType;\n    _this._blockName = _blockName;\n    _this._nameForCheking = _nameForCheking;\n\n    if (!_this._nameForCheking) {\n      _this._nameForCheking = name;\n    }\n\n    _this.needDualDirectionValidation = true;\n    return _this;\n  }\n  /**\r\n   * Gets a number indicating if the current point can be connected to another point\r\n   * @param connectionPoint defines the other connection point\r\n   * @returns a number defining the compatibility state\r\n   */\n\n\n  NodeMaterialConnectionPointCustomObject.prototype.checkCompatibilityState = function (connectionPoint) {\n    return connectionPoint instanceof NodeMaterialConnectionPointCustomObject && connectionPoint.name === this._nameForCheking ? NodeMaterialConnectionPointCompatibilityStates.Compatible : NodeMaterialConnectionPointCompatibilityStates.TypeIncompatible;\n  };\n  /**\r\n   * Creates a block suitable to be used as an input for this input point.\r\n   * If null is returned, a block based on the point type will be created.\r\n   * @returns The returned string parameter is the name of the output point of NodeMaterialBlock (first parameter of the returned array) that can be connected to the input\r\n   */\n\n\n  NodeMaterialConnectionPointCustomObject.prototype.createCustomInputBlock = function () {\n    return [new this._blockType(this._blockName), this.name];\n  };\n\n  return NodeMaterialConnectionPointCustomObject;\n}(NodeMaterialConnectionPoint);\n\nexport { NodeMaterialConnectionPointCustomObject };","map":null,"metadata":{},"sourceType":"module"}