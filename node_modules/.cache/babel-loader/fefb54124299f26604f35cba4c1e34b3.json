{"ast":null,"code":"import { Vector3 } from \"../../Maths/math.vector\";\nimport { BoundingBox } from \"../../Culling/boundingBox\";\n/**\r\n * Class used to store a cell in an octree\r\n * @see https://doc.babylonjs.com/how_to/optimizing_your_scene_with_octrees\r\n */\n\nvar OctreeBlock =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new block\r\n   * @param minPoint defines the minimum vector (in world space) of the block's bounding box\r\n   * @param maxPoint defines the maximum vector (in world space) of the block's bounding box\r\n   * @param capacity defines the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\r\n   * @param depth defines the current depth of this block in the octree\r\n   * @param maxDepth defines the maximal depth allowed (beyond this value, the capacity is ignored)\r\n   * @param creationFunc defines a callback to call when an element is added to the block\r\n   */\n  function OctreeBlock(minPoint, maxPoint, capacity, depth, maxDepth, creationFunc) {\n    /**\r\n     * Gets the content of the current block\r\n     */\n    this.entries = new Array();\n    this._boundingVectors = new Array();\n    this._capacity = capacity;\n    this._depth = depth;\n    this._maxDepth = maxDepth;\n    this._creationFunc = creationFunc;\n    this._minPoint = minPoint;\n    this._maxPoint = maxPoint;\n\n    this._boundingVectors.push(minPoint.clone());\n\n    this._boundingVectors.push(maxPoint.clone());\n\n    this._boundingVectors.push(minPoint.clone());\n\n    this._boundingVectors[2].x = maxPoint.x;\n\n    this._boundingVectors.push(minPoint.clone());\n\n    this._boundingVectors[3].y = maxPoint.y;\n\n    this._boundingVectors.push(minPoint.clone());\n\n    this._boundingVectors[4].z = maxPoint.z;\n\n    this._boundingVectors.push(maxPoint.clone());\n\n    this._boundingVectors[5].z = minPoint.z;\n\n    this._boundingVectors.push(maxPoint.clone());\n\n    this._boundingVectors[6].x = minPoint.x;\n\n    this._boundingVectors.push(maxPoint.clone());\n\n    this._boundingVectors[7].y = minPoint.y;\n  }\n\n  Object.defineProperty(OctreeBlock.prototype, \"capacity\", {\n    // Property\n\n    /**\r\n     * Gets the maximum capacity of this block (if capacity is reached the block will be split into sub blocks)\r\n     */\n    get: function get() {\n      return this._capacity;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(OctreeBlock.prototype, \"minPoint\", {\n    /**\r\n     * Gets the minimum vector (in world space) of the block's bounding box\r\n     */\n    get: function get() {\n      return this._minPoint;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(OctreeBlock.prototype, \"maxPoint\", {\n    /**\r\n     * Gets the maximum vector (in world space) of the block's bounding box\r\n     */\n    get: function get() {\n      return this._maxPoint;\n    },\n    enumerable: false,\n    configurable: true\n  }); // Methods\n\n  /**\r\n   * Add a new element to this block\r\n   * @param entry defines the element to add\r\n   */\n\n  OctreeBlock.prototype.addEntry = function (entry) {\n    if (this.blocks) {\n      for (var index = 0; index < this.blocks.length; index++) {\n        var block = this.blocks[index];\n        block.addEntry(entry);\n      }\n\n      return;\n    }\n\n    this._creationFunc(entry, this);\n\n    if (this.entries.length > this.capacity && this._depth < this._maxDepth) {\n      this.createInnerBlocks();\n    }\n  };\n  /**\r\n   * Remove an element from this block\r\n   * @param entry defines the element to remove\r\n   */\n\n\n  OctreeBlock.prototype.removeEntry = function (entry) {\n    if (this.blocks) {\n      for (var index = 0; index < this.blocks.length; index++) {\n        var block = this.blocks[index];\n        block.removeEntry(entry);\n      }\n\n      return;\n    }\n\n    var entryIndex = this.entries.indexOf(entry);\n\n    if (entryIndex > -1) {\n      this.entries.splice(entryIndex, 1);\n    }\n  };\n  /**\r\n   * Add an array of elements to this block\r\n   * @param entries defines the array of elements to add\r\n   */\n\n\n  OctreeBlock.prototype.addEntries = function (entries) {\n    for (var index = 0; index < entries.length; index++) {\n      var mesh = entries[index];\n      this.addEntry(mesh);\n    }\n  };\n  /**\r\n   * Test if the current block intersects the furstum planes and if yes, then add its content to the selection array\r\n   * @param frustumPlanes defines the frustum planes to test\r\n   * @param selection defines the array to store current content if selection is positive\r\n   * @param allowDuplicate defines if the selection array can contains duplicated entries\r\n   */\n\n\n  OctreeBlock.prototype.select = function (frustumPlanes, selection, allowDuplicate) {\n    if (BoundingBox.IsInFrustum(this._boundingVectors, frustumPlanes)) {\n      if (this.blocks) {\n        for (var index = 0; index < this.blocks.length; index++) {\n          var block = this.blocks[index];\n          block.select(frustumPlanes, selection, allowDuplicate);\n        }\n\n        return;\n      }\n\n      if (allowDuplicate) {\n        selection.concat(this.entries);\n      } else {\n        selection.concatWithNoDuplicate(this.entries);\n      }\n    }\n  };\n  /**\r\n   * Test if the current block intersect with the given bounding sphere and if yes, then add its content to the selection array\r\n   * @param sphereCenter defines the bounding sphere center\r\n   * @param sphereRadius defines the bounding sphere radius\r\n   * @param selection defines the array to store current content if selection is positive\r\n   * @param allowDuplicate defines if the selection array can contains duplicated entries\r\n   */\n\n\n  OctreeBlock.prototype.intersects = function (sphereCenter, sphereRadius, selection, allowDuplicate) {\n    if (BoundingBox.IntersectsSphere(this._minPoint, this._maxPoint, sphereCenter, sphereRadius)) {\n      if (this.blocks) {\n        for (var index = 0; index < this.blocks.length; index++) {\n          var block = this.blocks[index];\n          block.intersects(sphereCenter, sphereRadius, selection, allowDuplicate);\n        }\n\n        return;\n      }\n\n      if (allowDuplicate) {\n        selection.concat(this.entries);\n      } else {\n        selection.concatWithNoDuplicate(this.entries);\n      }\n    }\n  };\n  /**\r\n   * Test if the current block intersect with the given ray and if yes, then add its content to the selection array\r\n   * @param ray defines the ray to test with\r\n   * @param selection defines the array to store current content if selection is positive\r\n   */\n\n\n  OctreeBlock.prototype.intersectsRay = function (ray, selection) {\n    if (ray.intersectsBoxMinMax(this._minPoint, this._maxPoint)) {\n      if (this.blocks) {\n        for (var index = 0; index < this.blocks.length; index++) {\n          var block = this.blocks[index];\n          block.intersectsRay(ray, selection);\n        }\n\n        return;\n      }\n\n      selection.concatWithNoDuplicate(this.entries);\n    }\n  };\n  /**\r\n   * Subdivide the content into child blocks (this block will then be empty)\r\n   */\n\n\n  OctreeBlock.prototype.createInnerBlocks = function () {\n    OctreeBlock._CreateBlocks(this._minPoint, this._maxPoint, this.entries, this._capacity, this._depth, this._maxDepth, this, this._creationFunc);\n  };\n  /**\r\n   * @hidden\r\n   */\n\n\n  OctreeBlock._CreateBlocks = function (worldMin, worldMax, entries, maxBlockCapacity, currentDepth, maxDepth, target, creationFunc) {\n    target.blocks = new Array();\n    var blockSize = new Vector3((worldMax.x - worldMin.x) / 2, (worldMax.y - worldMin.y) / 2, (worldMax.z - worldMin.z) / 2); // Segmenting space\n\n    for (var x = 0; x < 2; x++) {\n      for (var y = 0; y < 2; y++) {\n        for (var z = 0; z < 2; z++) {\n          var localMin = worldMin.add(blockSize.multiplyByFloats(x, y, z));\n          var localMax = worldMin.add(blockSize.multiplyByFloats(x + 1, y + 1, z + 1));\n          var block = new OctreeBlock(localMin, localMax, maxBlockCapacity, currentDepth + 1, maxDepth, creationFunc);\n          block.addEntries(entries);\n          target.blocks.push(block);\n        }\n      }\n    }\n  };\n\n  return OctreeBlock;\n}();\n\nexport { OctreeBlock };","map":null,"metadata":{},"sourceType":"module"}