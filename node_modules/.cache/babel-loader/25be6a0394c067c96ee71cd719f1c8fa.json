{"ast":null,"code":"import { connect } from 'react-redux';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getData as getWallet, isConnecting } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { getPaginatedCollections, getLoading as getLoadingCollection, getPaginationData } from 'modules/collection/selectors';\nimport { getCurationsByCollectionId, getLoading as getLoadingCuration } from 'modules/curations/collectionCuration/selectors';\nimport { getLoading as getLoadingCommittee, getCommitteeMembers, isWalletCommitteeMember } from 'modules/committee/selectors';\nimport { FETCH_COMMITTEE_MEMBERS_REQUEST } from 'modules/committee/action';\nimport { fetchCollectionsRequest, FETCH_COLLECTIONS_REQUEST } from 'modules/collection/actions';\nimport { FETCH_COLLECTION_CURATION_REQUEST } from 'modules/curations/collectionCuration/actions';\nimport CurationPage from './CurationPage';\n\nvar mapState = function mapState(state) {\n  var curationsByCollectionId = getCurationsByCollectionId(state);\n  var paginatedCollections = getPaginatedCollections(state);\n  var paginationData = getPaginationData(state);\n  return {\n    wallet: getWallet(state),\n    collections: paginatedCollections,\n    paginationData: paginationData,\n    curationsByCollectionId: curationsByCollectionId,\n    isCommitteeMember: isWalletCommitteeMember(state),\n    committeeMembers: getCommitteeMembers(state),\n    isConnecting: isConnecting(state),\n    isLoadingCommittee: isLoadingType(getLoadingCommittee(state), FETCH_COMMITTEE_MEMBERS_REQUEST),\n    isLoadingCollectionsData: isLoadingType(getLoadingCollection(state), FETCH_COLLECTIONS_REQUEST) || isLoadingType(getLoadingCuration(state), FETCH_COLLECTION_CURATION_REQUEST)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onFetchCollections: function onFetchCollections(params) {\n      return dispatch(fetchCollectionsRequest(undefined, params));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(CurationPage);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/CurationPage/CurationPage.container.ts"],"names":["connect","isLoadingType","getData","getWallet","isConnecting","getPaginatedCollections","getLoading","getLoadingCollection","getPaginationData","getCurationsByCollectionId","getLoadingCuration","getLoadingCommittee","getCommitteeMembers","isWalletCommitteeMember","FETCH_COMMITTEE_MEMBERS_REQUEST","fetchCollectionsRequest","FETCH_COLLECTIONS_REQUEST","FETCH_COLLECTION_CURATION_REQUEST","CurationPage","mapState","state","curationsByCollectionId","paginatedCollections","paginationData","wallet","collections","isCommitteeMember","committeeMembers","isLoadingCommittee","isLoadingCollectionsData","mapDispatch","dispatch","onFetchCollections","params","undefined"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,OAAO,IAAIC,SAApB,EAA+BC,YAA/B,QAAmD,kDAAnD;AAEA,SAASC,uBAAT,EAAkCC,UAAU,IAAIC,oBAAhD,EAAsEC,iBAAtE,QAA+F,8BAA/F;AACA,SAASC,0BAAT,EAAqCH,UAAU,IAAII,kBAAnD,QAA6E,gDAA7E;AACA,SAASJ,UAAU,IAAIK,mBAAvB,EAA4CC,mBAA5C,EAAiEC,uBAAjE,QAAgG,6BAAhG;AACA,SAASC,+BAAT,QAAgD,0BAAhD;AACA,SAASC,uBAAT,EAAkCC,yBAAlC,QAAmE,4BAAnE;AACA,SAASC,iCAAT,QAAkD,8CAAlD;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAqC;AACpD,MAAMC,uBAAuB,GAAGZ,0BAA0B,CAACW,KAAD,CAA1D;AACA,MAAME,oBAAoB,GAAGjB,uBAAuB,CAACe,KAAD,CAApD;AACA,MAAMG,cAAc,GAAGf,iBAAiB,CAACY,KAAD,CAAxC;AAEA,SAAO;AACLI,IAAAA,MAAM,EAAErB,SAAS,CAACiB,KAAD,CADZ;AAELK,IAAAA,WAAW,EAAEH,oBAFR;AAGLC,IAAAA,cAAc,EAAdA,cAHK;AAILF,IAAAA,uBAAuB,EAAvBA,uBAJK;AAKLK,IAAAA,iBAAiB,EAAEb,uBAAuB,CAACO,KAAD,CALrC;AAMLO,IAAAA,gBAAgB,EAAEf,mBAAmB,CAACQ,KAAD,CANhC;AAOLhB,IAAAA,YAAY,EAAEA,YAAY,CAACgB,KAAD,CAPrB;AAQLQ,IAAAA,kBAAkB,EAAE3B,aAAa,CAACU,mBAAmB,CAACS,KAAD,CAApB,EAA6BN,+BAA7B,CAR5B;AASLe,IAAAA,wBAAwB,EACtB5B,aAAa,CAACM,oBAAoB,CAACa,KAAD,CAArB,EAA8BJ,yBAA9B,CAAb,IACAf,aAAa,CAACS,kBAAkB,CAACU,KAAD,CAAnB,EAA4BH,iCAA5B;AAXV,GAAP;AAaD,CAlBD;;AAoBA,IAAMa,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,kBAAkB,EAAE,4BAAAC,MAAM;AAAA,aAAIF,QAAQ,CAAChB,uBAAuB,CAACmB,SAAD,EAAYD,MAAZ,CAAxB,CAAZ;AAAA;AADsC,GAA9C;AAAA,CAApB;;AAIA,eAAejC,OAAO,CAACmB,QAAD,EAAWW,WAAX,CAAP,CAA+BZ,YAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { getData as getWallet, isConnecting } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { RootState } from 'modules/common/types'\nimport { getPaginatedCollections, getLoading as getLoadingCollection, getPaginationData } from 'modules/collection/selectors'\nimport { getCurationsByCollectionId, getLoading as getLoadingCuration } from 'modules/curations/collectionCuration/selectors'\nimport { getLoading as getLoadingCommittee, getCommitteeMembers, isWalletCommitteeMember } from 'modules/committee/selectors'\nimport { FETCH_COMMITTEE_MEMBERS_REQUEST } from 'modules/committee/action'\nimport { fetchCollectionsRequest, FETCH_COLLECTIONS_REQUEST } from 'modules/collection/actions'\nimport { FETCH_COLLECTION_CURATION_REQUEST } from 'modules/curations/collectionCuration/actions'\nimport { MapDispatch, MapDispatchProps, MapStateProps } from './CurationPage.types'\nimport CurationPage from './CurationPage'\n\nconst mapState = (state: RootState): MapStateProps => {\n  const curationsByCollectionId = getCurationsByCollectionId(state)\n  const paginatedCollections = getPaginatedCollections(state)\n  const paginationData = getPaginationData(state)\n\n  return {\n    wallet: getWallet(state)!,\n    collections: paginatedCollections,\n    paginationData,\n    curationsByCollectionId,\n    isCommitteeMember: isWalletCommitteeMember(state),\n    committeeMembers: getCommitteeMembers(state),\n    isConnecting: isConnecting(state),\n    isLoadingCommittee: isLoadingType(getLoadingCommittee(state), FETCH_COMMITTEE_MEMBERS_REQUEST),\n    isLoadingCollectionsData:\n      isLoadingType(getLoadingCollection(state), FETCH_COLLECTIONS_REQUEST) ||\n      isLoadingType(getLoadingCuration(state), FETCH_COLLECTION_CURATION_REQUEST)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onFetchCollections: params => dispatch(fetchCollectionsRequest(undefined, params))\n})\n\nexport default connect(mapState, mapDispatch)(CurationPage)\n"]},"metadata":{},"sourceType":"module"}