{"ast":null,"code":"import { createSelector } from 'reselect';\nimport { isConnecting, getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { GENERATE_IDENTITY_REQUEST } from './actions';\n\nfunction isValid(identity) {\n  return !!identity && Date.now() < +new Date(identity.expiration);\n}\n\nexport var getState = function getState(state) {\n  return state.identity;\n};\nexport var getData = function getData(state) {\n  return getState(state).data;\n};\nexport var getLoading = function getLoading(state) {\n  return getState(state).loading;\n};\nexport var getError = function getError(state) {\n  return getState(state).error;\n};\nexport var getCurrentIdentity = createSelector(getData, getAddress, function (identities, address) {\n  if (address) {\n    var identity = identities[address];\n\n    if (isValid(identity)) {\n      return identity;\n    }\n  }\n\n  return null;\n});\nexport var isLoggedIn = function isLoggedIn(state) {\n  return getCurrentIdentity(state) !== null;\n};\nexport var isLoggingIn = function isLoggingIn(state) {\n  return isConnecting(state) || isLoadingType(getLoading(state), GENERATE_IDENTITY_REQUEST);\n};","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/identity/selectors.ts"],"names":["createSelector","isConnecting","getAddress","isLoadingType","GENERATE_IDENTITY_REQUEST","isValid","identity","Date","now","expiration","getState","state","getData","data","getLoading","loading","getError","error","getCurrentIdentity","identities","address","isLoggedIn","isLoggingIn"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AAEA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,kDAAzC;AAEA,SAASC,aAAT,QAA8B,mDAA9B;AACA,SAASC,yBAAT,QAA0C,WAA1C;;AAEA,SAASC,OAAT,CAAiBC,QAAjB,EAAiD;AAC/C,SAAO,CAAC,CAACA,QAAF,IAAcC,IAAI,CAACC,GAAL,KAAa,CAAC,IAAID,IAAJ,CAASD,QAAQ,CAACG,UAAlB,CAAnC;AACD;;AAED,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAsBA,KAAK,CAACL,QAA5B;AAAA,CAAjB;AACP,OAAO,IAAMM,OAAO,GAAG,SAAVA,OAAU,CAACD,KAAD;AAAA,SAAsBD,QAAQ,CAACC,KAAD,CAAR,CAAgBE,IAAtC;AAAA,CAAhB;AACP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACH,KAAD;AAAA,SAAsBD,QAAQ,CAACC,KAAD,CAAR,CAAgBI,OAAtC;AAAA,CAAnB;AACP,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACL,KAAD;AAAA,SAAsBD,QAAQ,CAACC,KAAD,CAAR,CAAgBM,KAAtC;AAAA,CAAjB;AACP,OAAO,IAAMC,kBAAkB,GAAGlB,cAAc,CAC9CY,OAD8C,EAE9CV,UAF8C,EAG9C,UAACiB,UAAD,EAAaC,OAAb,EAAyB;AACvB,MAAIA,OAAJ,EAAa;AACX,QAAMd,QAAQ,GAAGa,UAAU,CAACC,OAAD,CAA3B;;AACA,QAAIf,OAAO,CAACC,QAAD,CAAX,EAAuB;AACrB,aAAOA,QAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,CAX6C,CAAzC;AAcP,OAAO,IAAMe,UAAU,GAAG,SAAbA,UAAa,CAACV,KAAD;AAAA,SAAsBO,kBAAkB,CAACP,KAAD,CAAlB,KAA8B,IAApD;AAAA,CAAnB;AACP,OAAO,IAAMW,WAAW,GAAG,SAAdA,WAAc,CAACX,KAAD;AAAA,SAAsBV,YAAY,CAACU,KAAD,CAAZ,IAAuBR,aAAa,CAACW,UAAU,CAACH,KAAD,CAAX,EAAoBP,yBAApB,CAA1D;AAAA,CAApB","sourcesContent":["import { createSelector } from 'reselect'\nimport { AuthIdentity } from 'dcl-crypto'\nimport { isConnecting, getAddress } from 'decentraland-dapps/dist/modules/wallet/selectors'\nimport { RootState } from 'modules/common/types'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { GENERATE_IDENTITY_REQUEST } from './actions'\n\nfunction isValid(identity?: AuthIdentity | null) {\n  return !!identity && Date.now() < +new Date(identity.expiration)\n}\n\nexport const getState = (state: RootState) => state.identity\nexport const getData = (state: RootState) => getState(state).data\nexport const getLoading = (state: RootState) => getState(state).loading\nexport const getError = (state: RootState) => getState(state).error\nexport const getCurrentIdentity = createSelector<RootState, Record<string, AuthIdentity>, string | undefined, AuthIdentity | null>(\n  getData,\n  getAddress,\n  (identities, address) => {\n    if (address) {\n      const identity = identities[address]\n      if (isValid(identity)) {\n        return identity\n      }\n    }\n    return null\n  }\n)\n\nexport const isLoggedIn = (state: RootState) => getCurrentIdentity(state) !== null\nexport const isLoggingIn = (state: RootState) => isConnecting(state) || isLoadingType(getLoading(state), GENERATE_IDENTITY_REQUEST)\n"]},"metadata":{},"sourceType":"module"}