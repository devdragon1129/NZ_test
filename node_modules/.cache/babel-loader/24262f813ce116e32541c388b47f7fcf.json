{"ast":null,"code":"import { ArrayTools } from \"../Misc/arrayTools\";\nimport { Vector3 } from \"../Maths/math.vector\";\nimport { BoundingBox } from \"./boundingBox\";\nimport { BoundingSphere } from \"./boundingSphere\";\nvar _result0 = {\n  min: 0,\n  max: 0\n};\nvar _result1 = {\n  min: 0,\n  max: 0\n};\n\nvar computeBoxExtents = function computeBoxExtents(axis, box, result) {\n  var p = Vector3.Dot(box.centerWorld, axis);\n  var r0 = Math.abs(Vector3.Dot(box.directions[0], axis)) * box.extendSize.x;\n  var r1 = Math.abs(Vector3.Dot(box.directions[1], axis)) * box.extendSize.y;\n  var r2 = Math.abs(Vector3.Dot(box.directions[2], axis)) * box.extendSize.z;\n  var r = r0 + r1 + r2;\n  result.min = p - r;\n  result.max = p + r;\n};\n\nvar axisOverlap = function axisOverlap(axis, box0, box1) {\n  computeBoxExtents(axis, box0, _result0);\n  computeBoxExtents(axis, box1, _result1);\n  return !(_result0.min > _result1.max || _result1.min > _result0.max);\n};\n/**\r\n * Info for a bounding data of a mesh\r\n */\n\n\nvar BoundingInfo =\n/** @class */\nfunction () {\n  /**\r\n   * Constructs bounding info\r\n   * @param minimum min vector of the bounding box/sphere\r\n   * @param maximum max vector of the bounding box/sphere\r\n   * @param worldMatrix defines the new world matrix\r\n   */\n  function BoundingInfo(minimum, maximum, worldMatrix) {\n    this._isLocked = false;\n    this.boundingBox = new BoundingBox(minimum, maximum, worldMatrix);\n    this.boundingSphere = new BoundingSphere(minimum, maximum, worldMatrix);\n  }\n  /**\r\n   * Recreates the entire bounding info from scratch as if we call the constructor in place\r\n   * @param min defines the new minimum vector (in local space)\r\n   * @param max defines the new maximum vector (in local space)\r\n   * @param worldMatrix defines the new world matrix\r\n   */\n\n\n  BoundingInfo.prototype.reConstruct = function (min, max, worldMatrix) {\n    this.boundingBox.reConstruct(min, max, worldMatrix);\n    this.boundingSphere.reConstruct(min, max, worldMatrix);\n  };\n\n  Object.defineProperty(BoundingInfo.prototype, \"minimum\", {\n    /**\r\n     * min vector of the bounding box/sphere\r\n     */\n    get: function get() {\n      return this.boundingBox.minimum;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BoundingInfo.prototype, \"maximum\", {\n    /**\r\n     * max vector of the bounding box/sphere\r\n     */\n    get: function get() {\n      return this.boundingBox.maximum;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BoundingInfo.prototype, \"isLocked\", {\n    /**\r\n     * If the info is locked and won't be updated to avoid perf overhead\r\n     */\n    get: function get() {\n      return this._isLocked;\n    },\n    set: function set(value) {\n      this._isLocked = value;\n    },\n    enumerable: false,\n    configurable: true\n  }); // Methods\n\n  /**\r\n   * Updates the bounding sphere and box\r\n   * @param world world matrix to be used to update\r\n   */\n\n  BoundingInfo.prototype.update = function (world) {\n    if (this._isLocked) {\n      return;\n    }\n\n    this.boundingBox._update(world);\n\n    this.boundingSphere._update(world);\n  };\n  /**\r\n   * Recreate the bounding info to be centered around a specific point given a specific extend.\r\n   * @param center New center of the bounding info\r\n   * @param extend New extend of the bounding info\r\n   * @returns the current bounding info\r\n   */\n\n\n  BoundingInfo.prototype.centerOn = function (center, extend) {\n    var minimum = BoundingInfo.TmpVector3[0].copyFrom(center).subtractInPlace(extend);\n    var maximum = BoundingInfo.TmpVector3[1].copyFrom(center).addInPlace(extend);\n    this.boundingBox.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\n    this.boundingSphere.reConstruct(minimum, maximum, this.boundingBox.getWorldMatrix());\n    return this;\n  };\n  /**\r\n   * Scale the current bounding info by applying a scale factor\r\n   * @param factor defines the scale factor to apply\r\n   * @returns the current bounding info\r\n   */\n\n\n  BoundingInfo.prototype.scale = function (factor) {\n    this.boundingBox.scale(factor);\n    this.boundingSphere.scale(factor);\n    return this;\n  };\n  /**\r\n   * Returns `true` if the bounding info is within the frustum defined by the passed array of planes.\r\n   * @param frustumPlanes defines the frustum to test\r\n   * @param strategy defines the strategy to use for the culling (default is BABYLON.AbstractMesh.CULLINGSTRATEGY_STANDARD)\r\n   * @returns true if the bounding info is in the frustum planes\r\n   */\n\n\n  BoundingInfo.prototype.isInFrustum = function (frustumPlanes, strategy) {\n    if (strategy === void 0) {\n      strategy = 0;\n    }\n\n    var inclusionTest = strategy === 2 || strategy === 3;\n\n    if (inclusionTest) {\n      if (this.boundingSphere.isCenterInFrustum(frustumPlanes)) {\n        return true;\n      }\n    }\n\n    if (!this.boundingSphere.isInFrustum(frustumPlanes)) {\n      return false;\n    }\n\n    var bSphereOnlyTest = strategy === 1 || strategy === 3;\n\n    if (bSphereOnlyTest) {\n      return true;\n    }\n\n    return this.boundingBox.isInFrustum(frustumPlanes);\n  };\n\n  Object.defineProperty(BoundingInfo.prototype, \"diagonalLength\", {\n    /**\r\n     * Gets the world distance between the min and max points of the bounding box\r\n     */\n    get: function get() {\n      var boundingBox = this.boundingBox;\n      var diag = boundingBox.maximumWorld.subtractToRef(boundingBox.minimumWorld, BoundingInfo.TmpVector3[0]);\n      return diag.length();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Checks if a cullable object (mesh...) is in the camera frustum\r\n   * Unlike isInFrustum this cheks the full bounding box\r\n   * @param frustumPlanes Camera near/planes\r\n   * @returns true if the object is in frustum otherwise false\r\n   */\n\n  BoundingInfo.prototype.isCompletelyInFrustum = function (frustumPlanes) {\n    return this.boundingBox.isCompletelyInFrustum(frustumPlanes);\n  };\n  /** @hidden */\n\n\n  BoundingInfo.prototype._checkCollision = function (collider) {\n    return collider._canDoCollision(this.boundingSphere.centerWorld, this.boundingSphere.radiusWorld, this.boundingBox.minimumWorld, this.boundingBox.maximumWorld);\n  };\n  /**\r\n   * Checks if a point is inside the bounding box and bounding sphere or the mesh\r\n   * @see https://doc.babylonjs.com/babylon101/intersect_collisions_-_mesh\r\n   * @param point the point to check intersection with\r\n   * @returns if the point intersects\r\n   */\n\n\n  BoundingInfo.prototype.intersectsPoint = function (point) {\n    if (!this.boundingSphere.centerWorld) {\n      return false;\n    }\n\n    if (!this.boundingSphere.intersectsPoint(point)) {\n      return false;\n    }\n\n    if (!this.boundingBox.intersectsPoint(point)) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\r\n   * Checks if another bounding info intersects the bounding box and bounding sphere or the mesh\r\n   * @see https://doc.babylonjs.com/babylon101/intersect_collisions_-_mesh\r\n   * @param boundingInfo the bounding info to check intersection with\r\n   * @param precise if the intersection should be done using OBB\r\n   * @returns if the bounding info intersects\r\n   */\n\n\n  BoundingInfo.prototype.intersects = function (boundingInfo, precise) {\n    if (!BoundingSphere.Intersects(this.boundingSphere, boundingInfo.boundingSphere)) {\n      return false;\n    }\n\n    if (!BoundingBox.Intersects(this.boundingBox, boundingInfo.boundingBox)) {\n      return false;\n    }\n\n    if (!precise) {\n      return true;\n    }\n\n    var box0 = this.boundingBox;\n    var box1 = boundingInfo.boundingBox;\n\n    if (!axisOverlap(box0.directions[0], box0, box1)) {\n      return false;\n    }\n\n    if (!axisOverlap(box0.directions[1], box0, box1)) {\n      return false;\n    }\n\n    if (!axisOverlap(box0.directions[2], box0, box1)) {\n      return false;\n    }\n\n    if (!axisOverlap(box1.directions[0], box0, box1)) {\n      return false;\n    }\n\n    if (!axisOverlap(box1.directions[1], box0, box1)) {\n      return false;\n    }\n\n    if (!axisOverlap(box1.directions[2], box0, box1)) {\n      return false;\n    }\n\n    if (!axisOverlap(Vector3.Cross(box0.directions[0], box1.directions[0]), box0, box1)) {\n      return false;\n    }\n\n    if (!axisOverlap(Vector3.Cross(box0.directions[0], box1.directions[1]), box0, box1)) {\n      return false;\n    }\n\n    if (!axisOverlap(Vector3.Cross(box0.directions[0], box1.directions[2]), box0, box1)) {\n      return false;\n    }\n\n    if (!axisOverlap(Vector3.Cross(box0.directions[1], box1.directions[0]), box0, box1)) {\n      return false;\n    }\n\n    if (!axisOverlap(Vector3.Cross(box0.directions[1], box1.directions[1]), box0, box1)) {\n      return false;\n    }\n\n    if (!axisOverlap(Vector3.Cross(box0.directions[1], box1.directions[2]), box0, box1)) {\n      return false;\n    }\n\n    if (!axisOverlap(Vector3.Cross(box0.directions[2], box1.directions[0]), box0, box1)) {\n      return false;\n    }\n\n    if (!axisOverlap(Vector3.Cross(box0.directions[2], box1.directions[1]), box0, box1)) {\n      return false;\n    }\n\n    if (!axisOverlap(Vector3.Cross(box0.directions[2], box1.directions[2]), box0, box1)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  BoundingInfo.TmpVector3 = ArrayTools.BuildArray(2, Vector3.Zero);\n  return BoundingInfo;\n}();\n\nexport { BoundingInfo };","map":null,"metadata":{},"sourceType":"module"}