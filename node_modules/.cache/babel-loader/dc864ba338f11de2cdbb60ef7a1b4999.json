{"ast":null,"code":"import _toConsumableArray from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { createSelector } from 'reselect';\nimport { getLocalIds, getErrors, getLoadingIds } from './domain/selectors';\nimport { getCurrentProject, getUserProjects } from 'modules/project/selectors';\nexport var getState = function getState(state) {\n  return state.sync;\n};\nexport var getProjects = function getProjects(state) {\n  return getState(state).project;\n};\nexport var getLocalProjectIds = function getLocalProjectIds(state) {\n  return getLocalIds(getProjects(state));\n};\nexport var getProjectErrors = function getProjectErrors(state) {\n  return getErrors(getProjects(state));\n};\nexport var getLoadingProjectIds = function getLoadingProjectIds(state) {\n  return getLoadingIds(getProjects(state));\n};\nexport var getLoadingSet = createSelector(getLoadingProjectIds, getUserProjects, function (projectIds, projects) {\n  return new Set(_toConsumableArray(projectIds).filter(function (id) {\n    return id in projects;\n  }));\n});\nexport var isSavingCurrentProject = createSelector(getCurrentProject, getLoadingSet, function (currentProject, loadingSet) {\n  if (!currentProject) return false;\n  return loadingSet.has(currentProject.id);\n});\nexport var getFailedProjectIds = createSelector(getProjectErrors, function (projectErrors) {\n  return Object.keys(projectErrors);\n});\nexport var getErrorSet = createSelector(getFailedProjectIds, getUserProjects, function (failedProjectIds, projects) {\n  return new Set(_toConsumableArray(failedProjectIds).filter(function (id) {\n    return id in projects;\n  }));\n});","map":{"version":3,"sources":["/opt/work/NZ_test/src/modules/sync/selectors.ts"],"names":["createSelector","getLocalIds","getErrors","getLoadingIds","getCurrentProject","getUserProjects","getState","state","sync","getProjects","project","getLocalProjectIds","getProjectErrors","getLoadingProjectIds","getLoadingSet","projectIds","projects","Set","filter","id","isSavingCurrentProject","currentProject","loadingSet","has","getFailedProjectIds","projectErrors","Object","keys","getErrorSet","failedProjectIds"],"mappings":";AAAA,SAASA,cAAT,QAA+B,UAA/B;AAEA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,aAAjC,QAAsD,oBAAtD;AACA,SAASC,iBAAT,EAA4BC,eAA5B,QAAmD,2BAAnD;AAIA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD;AAAA,SAAsBA,KAAK,CAACC,IAA5B;AAAA,CAAjB;AACP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACF,KAAD;AAAA,SAAsBD,QAAQ,CAACC,KAAD,CAAR,CAAgBG,OAAtC;AAAA,CAApB;AACP,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACJ,KAAD;AAAA,SAAsBN,WAAW,CAACQ,WAAW,CAACF,KAAD,CAAZ,CAAjC;AAAA,CAA3B;AACP,OAAO,IAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACL,KAAD;AAAA,SAAsBL,SAAS,CAACO,WAAW,CAACF,KAAD,CAAZ,CAA/B;AAAA,CAAzB;AACP,OAAO,IAAMM,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACN,KAAD;AAAA,SAAsBJ,aAAa,CAACM,WAAW,CAACF,KAAD,CAAZ,CAAnC;AAAA,CAA7B;AAEP,OAAO,IAAMO,aAAa,GAAGd,cAAc,CACzCa,oBADyC,EAEzCR,eAFyC,EAGzC,UAACU,UAAD,EAAaC,QAAb;AAAA,SAA0B,IAAIC,GAAJ,CAAQ,mBAAIF,UAAJ,EAAgBG,MAAhB,CAAuB,UAAAC,EAAE;AAAA,WAAIA,EAAE,IAAIH,QAAV;AAAA,GAAzB,CAAR,CAA1B;AAAA,CAHyC,CAApC;AAMP,OAAO,IAAMI,sBAAsB,GAAGpB,cAAc,CAClDI,iBADkD,EAElDU,aAFkD,EAGlD,UAACO,cAAD,EAAiBC,UAAjB,EAAgC;AAC9B,MAAI,CAACD,cAAL,EAAqB,OAAO,KAAP;AACrB,SAAOC,UAAU,CAACC,GAAX,CAAeF,cAAc,CAACF,EAA9B,CAAP;AACD,CANiD,CAA7C;AASP,OAAO,IAAMK,mBAAmB,GAAGxB,cAAc,CAA8CY,gBAA9C,EAAgE,UAAAa,aAAa;AAAA,SAC5HC,MAAM,CAACC,IAAP,CAAYF,aAAZ,CAD4H;AAAA,CAA7E,CAA1C;AAIP,OAAO,IAAMG,WAAW,GAAG5B,cAAc,CACvCwB,mBADuC,EAEvCnB,eAFuC,EAGvC,UAACwB,gBAAD,EAAmBb,QAAnB;AAAA,SAAgC,IAAIC,GAAJ,CAAgB,mBAAIY,gBAAJ,EAAsBX,MAAtB,CAA6B,UAAAC,EAAE;AAAA,WAAIA,EAAE,IAAIH,QAAV;AAAA,GAA/B,CAAhB,CAAhC;AAAA,CAHuC,CAAlC","sourcesContent":["import { createSelector } from 'reselect'\nimport { RootState } from 'modules/common/types'\nimport { getLocalIds, getErrors, getLoadingIds } from './domain/selectors'\nimport { getCurrentProject, getUserProjects } from 'modules/project/selectors'\nimport { Project } from 'modules/project/types'\nimport { ProjectState } from 'modules/project/reducer'\n\nexport const getState = (state: RootState) => state.sync\nexport const getProjects = (state: RootState) => getState(state).project\nexport const getLocalProjectIds = (state: RootState) => getLocalIds(getProjects(state))\nexport const getProjectErrors = (state: RootState) => getErrors(getProjects(state))\nexport const getLoadingProjectIds = (state: RootState) => getLoadingIds(getProjects(state))\n\nexport const getLoadingSet = createSelector<RootState, string[], ProjectState['data'], Set<string>>(\n  getLoadingProjectIds,\n  getUserProjects,\n  (projectIds, projects) => new Set([...projectIds].filter(id => id in projects))\n)\n\nexport const isSavingCurrentProject = createSelector<RootState, Project | null, Set<string>, boolean>(\n  getCurrentProject,\n  getLoadingSet,\n  (currentProject, loadingSet) => {\n    if (!currentProject) return false\n    return loadingSet.has(currentProject.id)\n  }\n)\n\nexport const getFailedProjectIds = createSelector<RootState, Record<string, string>, string[]>(getProjectErrors, projectErrors =>\n  Object.keys(projectErrors)\n)\n\nexport const getErrorSet = createSelector<RootState, string[], ProjectState['data'], Set<string>>(\n  getFailedProjectIds,\n  getUserProjects,\n  (failedProjectIds, projects) => new Set<string>([...failedProjectIds].filter(id => id in projects))\n)\n"]},"metadata":{},"sourceType":"module"}