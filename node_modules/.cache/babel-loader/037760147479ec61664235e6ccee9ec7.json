{"ast":null,"code":"\"use strict\";\n/*\n  This file is part of web3x.\n\n  web3x is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  web3x is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public License\n  along with web3x.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nvar _objectSpread = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"util\");\n\nvar address_1 = require(\"../address\");\n\nvar utils_1 = require(\"../utils\");\n\nvar log_response_formatter_1 = require(\"./log-response-formatter\");\n\nfunction fromRawTransactionReceipt(receipt) {\n  if (!receipt || !receipt.blockHash) {\n    return null;\n  }\n\n  return _objectSpread({}, receipt, {\n    to: receipt.to ? address_1.Address.fromString(receipt.to) : undefined,\n    from: address_1.Address.fromString(receipt.from),\n    blockNumber: utils_1.hexToNumber(receipt.blockNumber),\n    transactionIndex: utils_1.hexToNumber(receipt.transactionIndex),\n    cumulativeGasUsed: utils_1.hexToNumber(receipt.cumulativeGasUsed),\n    gasUsed: utils_1.hexToNumber(receipt.gasUsed),\n    logs: util_1.isArray(receipt.logs) ? receipt.logs.map(log_response_formatter_1.fromRawLogResponse) : undefined,\n    contractAddress: receipt.contractAddress ? address_1.Address.fromString(receipt.contractAddress) : undefined,\n    status: util_1.isString(receipt.status) ? Boolean(utils_1.hexToNumber(receipt.status)) : undefined\n  });\n}\n\nexports.fromRawTransactionReceipt = fromRawTransactionReceipt;\n\nfunction toRawTransactionReceipt(receipt) {\n  return _objectSpread({}, receipt, {\n    to: receipt.to ? receipt.to.toString() : undefined,\n    from: receipt.from.toString(),\n    blockNumber: utils_1.numberToHex(receipt.blockNumber),\n    transactionIndex: utils_1.numberToHex(receipt.transactionIndex),\n    cumulativeGasUsed: utils_1.numberToHex(receipt.cumulativeGasUsed),\n    gasUsed: utils_1.numberToHex(receipt.gasUsed),\n    logs: util_1.isArray(receipt.logs) ? receipt.logs.map(log_response_formatter_1.toRawLogResponse) : undefined,\n    contractAddress: receipt.contractAddress ? receipt.contractAddress.toString() : undefined,\n    status: receipt.status !== undefined ? utils_1.numberToHex(receipt.status ? 1 : 0) : undefined\n  });\n}\n\nexports.toRawTransactionReceipt = toRawTransactionReceipt;","map":null,"metadata":{},"sourceType":"script"}