{"ast":null,"code":"import { connect } from 'react-redux';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getCollectionThirdParty } from 'modules/thirdParty/selectors';\nimport { publishAndPushChangesThirdPartyItemsRequest, publishThirdPartyItemsRequest, PUBLISH_THIRD_PARTY_ITEMS_REQUEST, pushChangesThirdPartyItemsRequest, PUSH_CHANGES_THIRD_PARTY_ITEMS_REQUEST } from 'modules/thirdParty/actions';\nimport { getCollection } from 'modules/collection/selectors';\nimport { getLoading, getCollectionItems, getStatusForItemIds } from 'modules/item/selectors';\nimport { getItemCurations } from 'modules/curations/itemCuration/selectors';\nimport PublishCollectionModal from './PublishThirdPartyCollectionModal';\n\nvar mapState = function mapState(state, ownProps) {\n  var _ownProps$metadata = ownProps.metadata,\n      collectionId = _ownProps$metadata.collectionId,\n      itemIds = _ownProps$metadata.itemIds;\n  var collection = getCollection(state, collectionId);\n  var items = getCollectionItems(state, collectionId).filter(function (item) {\n    return itemIds.includes(item.id);\n  });\n  var itemCurations = getItemCurations(state, collectionId);\n  return {\n    collection: collection,\n    items: items,\n    itemCurations: itemCurations,\n    thirdParty: collection ? getCollectionThirdParty(state, collection) : null,\n    isPublishLoading: isLoadingType(getLoading(state), PUBLISH_THIRD_PARTY_ITEMS_REQUEST) || isLoadingType(getLoading(state), PUSH_CHANGES_THIRD_PARTY_ITEMS_REQUEST),\n    itemsStatus: getStatusForItemIds(state, items.map(function (i) {\n      return i.id;\n    }))\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onPublish: function onPublish(thirdParty, items) {\n      return dispatch(publishThirdPartyItemsRequest(thirdParty, items));\n    },\n    onPushChanges: function onPushChanges(items) {\n      return dispatch(pushChangesThirdPartyItemsRequest(items));\n    },\n    onPublishAndPushChanges: function onPublishAndPushChanges(thirdParty, itemsToPublish, itemsWithChanges) {\n      return dispatch(publishAndPushChangesThirdPartyItemsRequest(thirdParty, itemsToPublish, itemsWithChanges));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(PublishCollectionModal);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/PublishThirdPartyCollectionModal/PublishThirdPartyCollectionModal.container.ts"],"names":["connect","isLoadingType","getCollectionThirdParty","publishAndPushChangesThirdPartyItemsRequest","publishThirdPartyItemsRequest","PUBLISH_THIRD_PARTY_ITEMS_REQUEST","pushChangesThirdPartyItemsRequest","PUSH_CHANGES_THIRD_PARTY_ITEMS_REQUEST","getCollection","getLoading","getCollectionItems","getStatusForItemIds","getItemCurations","PublishCollectionModal","mapState","state","ownProps","metadata","collectionId","itemIds","collection","items","filter","item","includes","id","itemCurations","thirdParty","isPublishLoading","itemsStatus","map","i","mapDispatch","dispatch","onPublish","onPushChanges","onPublishAndPushChanges","itemsToPublish","itemsWithChanges"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AAEA,SAASC,uBAAT,QAAwC,8BAAxC;AACA,SACEC,2CADF,EAEEC,6BAFF,EAGEC,iCAHF,EAIEC,iCAJF,EAKEC,sCALF,QAMO,4BANP;AAOA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,UAAT,EAAqBC,kBAArB,EAAyCC,mBAAzC,QAAoE,wBAApE;AACA,SAASC,gBAAT,QAAiC,0CAAjC;AAEA,OAAOC,sBAAP,MAAmC,oCAAnC;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAmBC,QAAnB,EAAyD;AAAA,2BACtCA,QAAQ,CAACC,QAD6B;AAAA,MAChEC,YADgE,sBAChEA,YADgE;AAAA,MAClDC,OADkD,sBAClDA,OADkD;AAGxE,MAAMC,UAAU,GAAGZ,aAAa,CAACO,KAAD,EAAQG,YAAR,CAAhC;AACA,MAAMG,KAAK,GAAGX,kBAAkB,CAACK,KAAD,EAAQG,YAAR,CAAlB,CAAwCI,MAAxC,CAA+C,UAAAC,IAAI;AAAA,WAAIJ,OAAO,CAACK,QAAR,CAAiBD,IAAI,CAACE,EAAtB,CAAJ;AAAA,GAAnD,CAAd;AACA,MAAMC,aAAa,GAAGd,gBAAgB,CAACG,KAAD,EAAQG,YAAR,CAAtC;AAEA,SAAO;AACLE,IAAAA,UAAU,EAAVA,UADK;AAELC,IAAAA,KAAK,EAALA,KAFK;AAGLK,IAAAA,aAAa,EAAbA,aAHK;AAILC,IAAAA,UAAU,EAAEP,UAAU,GAAGlB,uBAAuB,CAACa,KAAD,EAAQK,UAAR,CAA1B,GAAgD,IAJjE;AAKLQ,IAAAA,gBAAgB,EACd3B,aAAa,CAACQ,UAAU,CAACM,KAAD,CAAX,EAAoBV,iCAApB,CAAb,IACAJ,aAAa,CAACQ,UAAU,CAACM,KAAD,CAAX,EAAoBR,sCAApB,CAPV;AAQLsB,IAAAA,WAAW,EAAElB,mBAAmB,CAC9BI,KAD8B,EAE9BM,KAAK,CAACS,GAAN,CAAU,UAAAC,CAAC;AAAA,aAAIA,CAAC,CAACN,EAAN;AAAA,KAAX,CAF8B;AAR3B,GAAP;AAaD,CApBD;;AAsBA,IAAMO,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,SAAS,EAAE,mBAACP,UAAD,EAAaN,KAAb;AAAA,aAAuBY,QAAQ,CAAC7B,6BAA6B,CAACuB,UAAD,EAAaN,KAAb,CAA9B,CAA/B;AAAA,KADqD;AAEhEc,IAAAA,aAAa,EAAE,uBAAAd,KAAK;AAAA,aAAIY,QAAQ,CAAC3B,iCAAiC,CAACe,KAAD,CAAlC,CAAZ;AAAA,KAF4C;AAGhEe,IAAAA,uBAAuB,EAAE,iCAACT,UAAD,EAAaU,cAAb,EAA6BC,gBAA7B;AAAA,aACvBL,QAAQ,CAAC9B,2CAA2C,CAACwB,UAAD,EAAaU,cAAb,EAA6BC,gBAA7B,CAA5C,CADe;AAAA;AAHuC,GAA9C;AAAA,CAApB;;AAOA,eAAetC,OAAO,CAACc,QAAD,EAAWkB,WAAX,CAAP,CAA+BnB,sBAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { RootState } from 'modules/common/types'\nimport { getCollectionThirdParty } from 'modules/thirdParty/selectors'\nimport {\n  publishAndPushChangesThirdPartyItemsRequest,\n  publishThirdPartyItemsRequest,\n  PUBLISH_THIRD_PARTY_ITEMS_REQUEST,\n  pushChangesThirdPartyItemsRequest,\n  PUSH_CHANGES_THIRD_PARTY_ITEMS_REQUEST\n} from 'modules/thirdParty/actions'\nimport { getCollection } from 'modules/collection/selectors'\nimport { getLoading, getCollectionItems, getStatusForItemIds } from 'modules/item/selectors'\nimport { getItemCurations } from 'modules/curations/itemCuration/selectors'\nimport { OwnProps, MapStateProps, MapDispatchProps, MapDispatch } from './PublishThirdPartyCollectionModal.types'\nimport PublishCollectionModal from './PublishThirdPartyCollectionModal'\n\nconst mapState = (state: RootState, ownProps: OwnProps): MapStateProps => {\n  const { collectionId, itemIds } = ownProps.metadata\n\n  const collection = getCollection(state, collectionId)\n  const items = getCollectionItems(state, collectionId).filter(item => itemIds.includes(item.id))\n  const itemCurations = getItemCurations(state, collectionId)\n\n  return {\n    collection,\n    items,\n    itemCurations,\n    thirdParty: collection ? getCollectionThirdParty(state, collection) : null,\n    isPublishLoading:\n      isLoadingType(getLoading(state), PUBLISH_THIRD_PARTY_ITEMS_REQUEST) ||\n      isLoadingType(getLoading(state), PUSH_CHANGES_THIRD_PARTY_ITEMS_REQUEST),\n    itemsStatus: getStatusForItemIds(\n      state,\n      items.map(i => i.id)\n    )\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onPublish: (thirdParty, items) => dispatch(publishThirdPartyItemsRequest(thirdParty, items)),\n  onPushChanges: items => dispatch(pushChangesThirdPartyItemsRequest(items)),\n  onPublishAndPushChanges: (thirdParty, itemsToPublish, itemsWithChanges) =>\n    dispatch(publishAndPushChangesThirdPartyItemsRequest(thirdParty, itemsToPublish, itemsWithChanges))\n})\n\nexport default connect(mapState, mapDispatch)(PublishCollectionModal)\n"]},"metadata":{},"sourceType":"module"}