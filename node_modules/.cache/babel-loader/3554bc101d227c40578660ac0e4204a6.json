{"ast":null,"code":"import { Matrix } from \"../Maths/math.vector\";\n/**\r\n * Configuration needed for prepass-capable materials\r\n */\n\nvar PrePassConfiguration =\n/** @class */\nfunction () {\n  function PrePassConfiguration() {\n    /**\r\n     * Previous world matrices of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\n    this.previousWorldMatrices = {};\n    /**\r\n     * Previous bones of meshes carrying this material\r\n     * Used for computing velocity\r\n     */\n\n    this.previousBones = {};\n  }\n  /**\r\n   * Add the required uniforms to the current list.\r\n   * @param uniforms defines the current uniform list.\r\n   */\n\n\n  PrePassConfiguration.AddUniforms = function (uniforms) {\n    uniforms.push(\"previousWorld\", \"previousViewProjection\");\n  };\n  /**\r\n   * Add the required samplers to the current list.\r\n   * @param samplers defines the current sampler list.\r\n   */\n\n\n  PrePassConfiguration.AddSamplers = function (samplers) {// pass\n  };\n  /**\r\n   * Binds the material data.\r\n   * @param effect defines the effect to update\r\n   * @param scene defines the scene the material belongs to.\r\n   * @param mesh The mesh\r\n   * @param world World matrix of this mesh\r\n   * @param isFrozen Is the material frozen\r\n   */\n\n\n  PrePassConfiguration.prototype.bindForSubMesh = function (effect, scene, mesh, world, isFrozen) {\n    if (scene.prePassRenderer && scene.prePassRenderer.enabled) {\n      if (scene.prePassRenderer.getIndex(2) !== -1) {\n        if (!this.previousWorldMatrices[mesh.uniqueId]) {\n          this.previousWorldMatrices[mesh.uniqueId] = Matrix.Identity();\n        }\n\n        if (!this.previousViewProjection) {\n          this.previousViewProjection = scene.getTransformMatrix();\n        }\n\n        effect.setMatrix(\"previousWorld\", this.previousWorldMatrices[mesh.uniqueId]);\n        effect.setMatrix(\"previousViewProjection\", this.previousViewProjection);\n        this.previousWorldMatrices[mesh.uniqueId] = world.clone();\n        this.previousViewProjection = scene.getTransformMatrix().clone();\n      }\n    }\n  };\n\n  return PrePassConfiguration;\n}();\n\nexport { PrePassConfiguration };","map":null,"metadata":{},"sourceType":"module"}