{"ast":null,"code":"import { __decorate, __extends } from \"tslib\";\nimport { Vector2, Vector3, TmpVectors } from \"../../../Maths/math.vector\";\nimport { Texture } from \"../../../Materials/Textures/texture\";\nimport { DynamicTexture } from \"../../../Materials/Textures/dynamicTexture\";\nimport { PostProcess } from \"../../../PostProcesses/postProcess\";\nimport { PostProcessRenderPipeline } from \"../../../PostProcesses/RenderPipeline/postProcessRenderPipeline\";\nimport { PostProcessRenderEffect } from \"../../../PostProcesses/RenderPipeline/postProcessRenderEffect\";\nimport { PassPostProcess } from \"../../../PostProcesses/passPostProcess\";\nimport { BlurPostProcess } from \"../../../PostProcesses/blurPostProcess\";\nimport { serialize } from \"../../../Misc/decorators\";\nimport \"../../../PostProcesses/RenderPipeline/postProcessRenderPipelineManagerSceneComponent\";\nimport \"../../../Shaders/ssao.fragment\";\nimport \"../../../Shaders/ssaoCombine.fragment\";\n/**\r\n * Render pipeline to produce ssao effect\r\n */\n\nvar SSAORenderingPipeline =\n/** @class */\nfunction (_super) {\n  __extends(SSAORenderingPipeline, _super);\n  /**\r\n   * @constructor\r\n   * @param name - The rendering pipeline name\r\n   * @param scene - The scene linked to this pipeline\r\n   * @param ratio - The size of the postprocesses. Can be a number shared between passes or an object for more precision: { ssaoRatio: 0.5, combineRatio: 1.0 }\r\n   * @param cameras - The array of cameras that the rendering pipeline will be attached to\r\n   */\n\n\n  function SSAORenderingPipeline(name, scene, ratio, cameras) {\n    var _this = _super.call(this, scene.getEngine(), name) || this; // Members\n\n    /**\r\n     * @ignore\r\n    * The PassPostProcess id in the pipeline that contains the original scene color\r\n    */\n\n\n    _this.SSAOOriginalSceneColorEffect = \"SSAOOriginalSceneColorEffect\";\n    /**\r\n     * @ignore\r\n    * The SSAO PostProcess id in the pipeline\r\n    */\n\n    _this.SSAORenderEffect = \"SSAORenderEffect\";\n    /**\r\n     * @ignore\r\n    * The horizontal blur PostProcess id in the pipeline\r\n    */\n\n    _this.SSAOBlurHRenderEffect = \"SSAOBlurHRenderEffect\";\n    /**\r\n     * @ignore\r\n    * The vertical blur PostProcess id in the pipeline\r\n    */\n\n    _this.SSAOBlurVRenderEffect = \"SSAOBlurVRenderEffect\";\n    /**\r\n     * @ignore\r\n    * The PostProcess id in the pipeline that combines the SSAO-Blur output with the original scene color (SSAOOriginalSceneColorEffect)\r\n    */\n\n    _this.SSAOCombineRenderEffect = \"SSAOCombineRenderEffect\";\n    /**\r\n    * The output strength of the SSAO post-process. Default value is 1.0.\r\n    */\n\n    _this.totalStrength = 1.0;\n    /**\r\n    * The radius around the analyzed pixel used by the SSAO post-process. Default value is 0.0006\r\n    */\n\n    _this.radius = 0.0001;\n    /**\r\n    * Related to fallOff, used to interpolate SSAO samples (first interpolate function input) based on the occlusion difference of each pixel\r\n    * Must not be equal to fallOff and superior to fallOff.\r\n    * Default value is 0.0075\r\n    */\n\n    _this.area = 0.0075;\n    /**\r\n    * Related to area, used to interpolate SSAO samples (second interpolate function input) based on the occlusion difference of each pixel\r\n    * Must not be equal to area and inferior to area.\r\n    * Default value is 0.000001\r\n    */\n\n    _this.fallOff = 0.000001;\n    /**\r\n    * The base color of the SSAO post-process\r\n    * The final result is \"base + ssao\" between [0, 1]\r\n    */\n\n    _this.base = 0.5;\n    _this._firstUpdate = true;\n    _this._scene = scene; // Set up assets\n\n    _this._createRandomTexture();\n\n    _this._depthTexture = scene.enableDepthRenderer().getDepthMap(); // Force depth renderer \"on\"\n\n    var ssaoRatio = ratio.ssaoRatio || ratio;\n    var combineRatio = ratio.combineRatio || ratio;\n    _this._originalColorPostProcess = new PassPostProcess(\"SSAOOriginalSceneColor\", combineRatio, null, Texture.BILINEAR_SAMPLINGMODE, scene.getEngine(), false);\n\n    _this._createSSAOPostProcess(ssaoRatio);\n\n    _this._createBlurPostProcess(ssaoRatio);\n\n    _this._createSSAOCombinePostProcess(combineRatio); // Set up pipeline\n\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOOriginalSceneColorEffect, function () {\n      return _this._originalColorPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAORenderEffect, function () {\n      return _this._ssaoPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurHRenderEffect, function () {\n      return _this._blurHPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOBlurVRenderEffect, function () {\n      return _this._blurVPostProcess;\n    }, true));\n\n    _this.addEffect(new PostProcessRenderEffect(scene.getEngine(), _this.SSAOCombineRenderEffect, function () {\n      return _this._ssaoCombinePostProcess;\n    }, true)); // Finish\n\n\n    scene.postProcessRenderPipelineManager.addPipeline(_this);\n\n    if (cameras) {\n      scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(name, cameras);\n    }\n\n    return _this;\n  }\n\n  Object.defineProperty(SSAORenderingPipeline.prototype, \"scene\", {\n    /**\r\n     * Gets active scene\r\n     */\n    get: function get() {\n      return this._scene;\n    },\n    enumerable: false,\n    configurable: true\n  }); // Public Methods\n\n  /**\r\n   * Get the class name\r\n   * @returns \"SSAORenderingPipeline\"\r\n   */\n\n  SSAORenderingPipeline.prototype.getClassName = function () {\n    return \"SSAORenderingPipeline\";\n  };\n  /**\r\n   * Removes the internal pipeline assets and detatches the pipeline from the scene cameras\r\n   */\n\n\n  SSAORenderingPipeline.prototype.dispose = function (disableDepthRender) {\n    if (disableDepthRender === void 0) {\n      disableDepthRender = false;\n    }\n\n    for (var i = 0; i < this._scene.cameras.length; i++) {\n      var camera = this._scene.cameras[i];\n\n      this._originalColorPostProcess.dispose(camera);\n\n      this._ssaoPostProcess.dispose(camera);\n\n      this._blurHPostProcess.dispose(camera);\n\n      this._blurVPostProcess.dispose(camera);\n\n      this._ssaoCombinePostProcess.dispose(camera);\n    }\n\n    this._randomTexture.dispose();\n\n    if (disableDepthRender) {\n      this._scene.disableDepthRenderer();\n    }\n\n    this._scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(this._name, this._scene.cameras);\n\n    _super.prototype.dispose.call(this);\n  }; // Private Methods\n\n\n  SSAORenderingPipeline.prototype._createBlurPostProcess = function (ratio) {\n    var _this = this;\n\n    var size = 16;\n    this._blurHPostProcess = new BlurPostProcess(\"BlurH\", new Vector2(1, 0), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\n    this._blurVPostProcess = new BlurPostProcess(\"BlurV\", new Vector2(0, 1), size, ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, 0);\n\n    this._blurHPostProcess.onActivateObservable.add(function () {\n      var dw = _this._blurHPostProcess.width / _this._scene.getEngine().getRenderWidth();\n\n      _this._blurHPostProcess.kernel = size * dw;\n    });\n\n    this._blurVPostProcess.onActivateObservable.add(function () {\n      var dw = _this._blurVPostProcess.height / _this._scene.getEngine().getRenderHeight();\n\n      _this._blurVPostProcess.kernel = size * dw;\n    });\n  };\n  /** @hidden */\n\n\n  SSAORenderingPipeline.prototype._rebuild = function () {\n    this._firstUpdate = true;\n\n    _super.prototype._rebuild.call(this);\n  };\n\n  SSAORenderingPipeline.prototype._createSSAOPostProcess = function (ratio) {\n    var _this = this;\n\n    var numSamples = 16;\n    var sampleSphere = [0.5381, 0.1856, -0.4319, 0.1379, 0.2486, 0.4430, 0.3371, 0.5679, -0.0057, -0.6999, -0.0451, -0.0019, 0.0689, -0.1598, -0.8547, 0.0560, 0.0069, -0.1843, -0.0146, 0.1402, 0.0762, 0.0100, -0.1924, -0.0344, -0.3577, -0.5301, -0.4358, -0.3169, 0.1063, 0.0158, 0.0103, -0.5869, 0.0046, -0.0897, -0.4940, 0.3287, 0.7119, -0.0154, -0.0918, -0.0533, 0.0596, -0.5411, 0.0352, -0.0631, 0.5460, -0.4776, 0.2847, -0.0271];\n    var samplesFactor = 1.0 / numSamples;\n    this._ssaoPostProcess = new PostProcess(\"ssao\", \"ssao\", [\"sampleSphere\", \"samplesFactor\", \"randTextureTiles\", \"totalStrength\", \"radius\", \"area\", \"fallOff\", \"base\", \"range\", \"viewport\"], [\"randomSampler\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false, \"#define SAMPLES \" + numSamples + \"\\n#define SSAO\");\n\n    this._ssaoPostProcess.onApply = function (effect) {\n      if (_this._firstUpdate) {\n        effect.setArray3(\"sampleSphere\", sampleSphere);\n        effect.setFloat(\"samplesFactor\", samplesFactor);\n        effect.setFloat(\"randTextureTiles\", 4.0);\n      }\n\n      effect.setFloat(\"totalStrength\", _this.totalStrength);\n      effect.setFloat(\"radius\", _this.radius);\n      effect.setFloat(\"area\", _this.area);\n      effect.setFloat(\"fallOff\", _this.fallOff);\n      effect.setFloat(\"base\", _this.base);\n      effect.setTexture(\"textureSampler\", _this._depthTexture);\n      effect.setTexture(\"randomSampler\", _this._randomTexture);\n    };\n  };\n\n  SSAORenderingPipeline.prototype._createSSAOCombinePostProcess = function (ratio) {\n    var _this = this;\n\n    this._ssaoCombinePostProcess = new PostProcess(\"ssaoCombine\", \"ssaoCombine\", [], [\"originalColor\", \"viewport\"], ratio, null, Texture.BILINEAR_SAMPLINGMODE, this._scene.getEngine(), false);\n\n    this._ssaoCombinePostProcess.onApply = function (effect) {\n      effect.setVector4(\"viewport\", TmpVectors.Vector4[0].copyFromFloats(0, 0, 1.0, 1.0));\n      effect.setTextureFromPostProcess(\"originalColor\", _this._originalColorPostProcess);\n    };\n  };\n\n  SSAORenderingPipeline.prototype._createRandomTexture = function () {\n    var size = 512;\n    this._randomTexture = new DynamicTexture(\"SSAORandomTexture\", size, this._scene, false, Texture.TRILINEAR_SAMPLINGMODE);\n    this._randomTexture.wrapU = Texture.WRAP_ADDRESSMODE;\n    this._randomTexture.wrapV = Texture.WRAP_ADDRESSMODE;\n\n    var context = this._randomTexture.getContext();\n\n    var rand = function rand(min, max) {\n      return Math.random() * (max - min) + min;\n    };\n\n    var randVector = Vector3.Zero();\n\n    for (var x = 0; x < size; x++) {\n      for (var y = 0; y < size; y++) {\n        randVector.x = Math.floor(rand(-1.0, 1.0) * 255);\n        randVector.y = Math.floor(rand(-1.0, 1.0) * 255);\n        randVector.z = Math.floor(rand(-1.0, 1.0) * 255);\n        context.fillStyle = 'rgb(' + randVector.x + ', ' + randVector.y + ', ' + randVector.z + ')';\n        context.fillRect(x, y, 1, 1);\n      }\n    }\n\n    this._randomTexture.update(false);\n  };\n\n  __decorate([serialize()], SSAORenderingPipeline.prototype, \"totalStrength\", void 0);\n\n  __decorate([serialize()], SSAORenderingPipeline.prototype, \"radius\", void 0);\n\n  __decorate([serialize()], SSAORenderingPipeline.prototype, \"area\", void 0);\n\n  __decorate([serialize()], SSAORenderingPipeline.prototype, \"fallOff\", void 0);\n\n  __decorate([serialize()], SSAORenderingPipeline.prototype, \"base\", void 0);\n\n  return SSAORenderingPipeline;\n}(PostProcessRenderPipeline);\n\nexport { SSAORenderingPipeline };","map":null,"metadata":{},"sourceType":"module"}