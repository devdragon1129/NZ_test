{"ast":null,"code":"import { Tools } from \"../Misc/tools\";\nimport { Logger } from \"../Misc/logger\";\nimport { TGATools } from '../Misc/tga';\nimport { Engine } from \"../Engines/engine\";\nimport { WebRequest } from '../Misc/webRequest'; // Sets the default offline provider to Babylon.js\n\nEngine.OfflineProviderFactory = function (urlToScene, callbackManifestChecked, disableManifestCheck) {\n  if (disableManifestCheck === void 0) {\n    disableManifestCheck = false;\n  }\n\n  return new Database(urlToScene, callbackManifestChecked, disableManifestCheck);\n};\n/**\r\n * Class used to enable access to IndexedDB\r\n * @see https://doc.babylonjs.com/how_to/caching_resources_in_indexeddb\r\n */\n\n\nvar Database =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Database\r\n   * @param urlToScene defines the url to load the scene\r\n   * @param callbackManifestChecked defines the callback to use when manifest is checked\r\n   * @param disableManifestCheck defines a boolean indicating that we want to skip the manifest validation (it will be considered validated and up to date)\r\n   */\n  function Database(urlToScene, callbackManifestChecked, disableManifestCheck) {\n    var _this = this;\n\n    if (disableManifestCheck === void 0) {\n      disableManifestCheck = false;\n    } // Handling various flavors of prefixed version of IndexedDB\n\n\n    this._idbFactory = typeof window !== \"undefined\" ? window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB : indexedDB;\n    this._callbackManifestChecked = callbackManifestChecked;\n    this._currentSceneUrl = Database._ReturnFullUrlLocation(urlToScene);\n    this._db = null;\n    this._enableSceneOffline = false;\n    this._enableTexturesOffline = false;\n    this._manifestVersionFound = 0;\n    this._mustUpdateRessources = false;\n    this._hasReachedQuota = false;\n\n    if (!Database.IDBStorageEnabled) {\n      this._callbackManifestChecked(true);\n    } else {\n      if (disableManifestCheck) {\n        this._enableSceneOffline = true;\n        this._enableTexturesOffline = true;\n        this._manifestVersionFound = 1;\n        Tools.SetImmediate(function () {\n          _this._callbackManifestChecked(true);\n        });\n      } else {\n        this._checkManifestFile();\n      }\n    }\n  }\n\n  Object.defineProperty(Database.prototype, \"enableSceneOffline\", {\n    /**\r\n     * Gets a boolean indicating if scene must be saved in the database\r\n     */\n    get: function get() {\n      return this._enableSceneOffline;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Database.prototype, \"enableTexturesOffline\", {\n    /**\r\n     * Gets a boolean indicating if textures must be saved in the database\r\n     */\n    get: function get() {\n      return this._enableTexturesOffline;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Database.prototype._checkManifestFile = function () {\n    var _this = this;\n\n    var noManifestFile = function noManifestFile() {\n      _this._enableSceneOffline = false;\n      _this._enableTexturesOffline = false;\n\n      _this._callbackManifestChecked(false);\n    };\n\n    var timeStampUsed = false;\n    var manifestURL = this._currentSceneUrl + \".manifest\";\n    var xhr = new WebRequest();\n\n    if (navigator.onLine) {\n      // Adding a timestamp to by-pass browsers' cache\n      timeStampUsed = true;\n      manifestURL = manifestURL + (manifestURL.match(/\\?/) == null ? \"?\" : \"&\") + Date.now();\n    }\n\n    xhr.open(\"GET\", manifestURL);\n    xhr.addEventListener(\"load\", function () {\n      if (xhr.status === 200 || Database._ValidateXHRData(xhr, 1)) {\n        try {\n          var manifestFile = JSON.parse(xhr.response);\n          _this._enableSceneOffline = manifestFile.enableSceneOffline;\n          _this._enableTexturesOffline = manifestFile.enableTexturesOffline && Database.IsUASupportingBlobStorage;\n\n          if (manifestFile.version && !isNaN(parseInt(manifestFile.version))) {\n            _this._manifestVersionFound = manifestFile.version;\n          }\n\n          if (_this._callbackManifestChecked) {\n            _this._callbackManifestChecked(true);\n          }\n        } catch (ex) {\n          noManifestFile();\n        }\n      } else {\n        noManifestFile();\n      }\n    }, false);\n    xhr.addEventListener(\"error\", function () {\n      if (timeStampUsed) {\n        timeStampUsed = false; // Let's retry without the timeStamp\n        // It could fail when coupled with HTML5 Offline API\n\n        var retryManifestURL = _this._currentSceneUrl + \".manifest\";\n        xhr.open(\"GET\", retryManifestURL);\n        xhr.send();\n      } else {\n        noManifestFile();\n      }\n    }, false);\n\n    try {\n      xhr.send();\n    } catch (ex) {\n      Logger.Error(\"Error on XHR send request.\");\n\n      this._callbackManifestChecked(false);\n    }\n  };\n  /**\r\n   * Open the database and make it available\r\n   * @param successCallback defines the callback to call on success\r\n   * @param errorCallback defines the callback to call on error\r\n   */\n\n\n  Database.prototype.open = function (successCallback, errorCallback) {\n    var _this = this;\n\n    var handleError = function handleError() {\n      _this._isSupported = false;\n\n      if (errorCallback) {\n        errorCallback();\n      }\n    };\n\n    if (!this._idbFactory || !(this._enableSceneOffline || this._enableTexturesOffline)) {\n      // Your browser doesn't support IndexedDB\n      this._isSupported = false;\n\n      if (errorCallback) {\n        errorCallback();\n      }\n    } else {\n      // If the DB hasn't been opened or created yet\n      if (!this._db) {\n        this._hasReachedQuota = false;\n        this._isSupported = true;\n\n        var request = this._idbFactory.open(\"babylonjs\", 1); // Could occur if user is blocking the quota for the DB and/or doesn't grant access to IndexedDB\n\n\n        request.onerror = function () {\n          handleError();\n        }; // executes when a version change transaction cannot complete due to other active transactions\n\n\n        request.onblocked = function () {\n          Logger.Error(\"IDB request blocked. Please reload the page.\");\n          handleError();\n        }; // DB has been opened successfully\n\n\n        request.onsuccess = function () {\n          _this._db = request.result;\n          successCallback();\n        }; // Initialization of the DB. Creating Scenes & Textures stores\n\n\n        request.onupgradeneeded = function (event) {\n          _this._db = event.target.result;\n\n          if (_this._db) {\n            try {\n              _this._db.createObjectStore(\"scenes\", {\n                keyPath: \"sceneUrl\"\n              });\n\n              _this._db.createObjectStore(\"versions\", {\n                keyPath: \"sceneUrl\"\n              });\n\n              _this._db.createObjectStore(\"textures\", {\n                keyPath: \"textureUrl\"\n              });\n            } catch (ex) {\n              Logger.Error(\"Error while creating object stores. Exception: \" + ex.message);\n              handleError();\n            }\n          }\n        };\n      } // DB has already been created and opened\n      else {\n        if (successCallback) {\n          successCallback();\n        }\n      }\n    }\n  };\n  /**\r\n   * Loads an image from the database\r\n   * @param url defines the url to load from\r\n   * @param image defines the target DOM image\r\n   */\n\n\n  Database.prototype.loadImage = function (url, image) {\n    var _this = this;\n\n    var completeURL = Database._ReturnFullUrlLocation(url);\n\n    var saveAndLoadImage = function saveAndLoadImage() {\n      if (!_this._hasReachedQuota && _this._db !== null) {\n        // the texture is not yet in the DB, let's try to save it\n        _this._saveImageIntoDBAsync(completeURL, image);\n      } // If the texture is not in the DB and we've reached the DB quota limit\n      // let's load it directly from the web\n      else {\n        image.src = url;\n      }\n    };\n\n    if (!this._mustUpdateRessources) {\n      this._loadImageFromDBAsync(completeURL, image, saveAndLoadImage);\n    } // First time we're download the images or update requested in the manifest file by a version change\n    else {\n      saveAndLoadImage();\n    }\n  };\n\n  Database.prototype._loadImageFromDBAsync = function (url, image, notInDBCallback) {\n    if (this._isSupported && this._db !== null) {\n      var texture;\n\n      var transaction = this._db.transaction([\"textures\"]);\n\n      transaction.onabort = function () {\n        image.src = url;\n      };\n\n      transaction.oncomplete = function () {\n        var blobTextureURL;\n\n        if (texture) {\n          var URL = window.URL || window.webkitURL;\n          blobTextureURL = URL.createObjectURL(texture.data);\n\n          image.onerror = function () {\n            Logger.Error(\"Error loading image from blob URL: \" + blobTextureURL + \" switching back to web url: \" + url);\n            image.src = url;\n          };\n\n          image.src = blobTextureURL;\n        } else {\n          notInDBCallback();\n        }\n      };\n\n      var getRequest = transaction.objectStore(\"textures\").get(url);\n\n      getRequest.onsuccess = function (event) {\n        texture = event.target.result;\n      };\n\n      getRequest.onerror = function () {\n        Logger.Error(\"Error loading texture \" + url + \" from DB.\");\n        image.src = url;\n      };\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\n      image.src = url;\n    }\n  };\n\n  Database.prototype._saveImageIntoDBAsync = function (url, image) {\n    var _this = this;\n\n    if (this._isSupported) {\n      // In case of error (type not supported or quota exceeded), we're at least sending back XHR data to allow texture loading later on\n      var generateBlobUrl = function generateBlobUrl() {\n        var blobTextureURL;\n\n        if (blob) {\n          var URL = window.URL || window.webkitURL;\n\n          try {\n            blobTextureURL = URL.createObjectURL(blob);\n          } // Chrome is raising a type error if we're setting the oneTimeOnly parameter\n          catch (ex) {\n            blobTextureURL = URL.createObjectURL(blob);\n          }\n        }\n\n        if (blobTextureURL) {\n          image.src = blobTextureURL;\n        }\n      };\n\n      if (Database.IsUASupportingBlobStorage) {\n        // Create XHR\n        var xhr = new WebRequest(),\n            blob;\n        xhr.open(\"GET\", url);\n        xhr.responseType = \"blob\";\n        xhr.addEventListener(\"load\", function () {\n          if (xhr.status === 200 && _this._db) {\n            // Blob as response (XHR2)\n            blob = xhr.response;\n\n            var transaction = _this._db.transaction([\"textures\"], \"readwrite\"); // the transaction could abort because of a QuotaExceededError error\n\n\n            transaction.onabort = function (event) {\n              try {\n                //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\n                var srcElement = event.srcElement || event.target;\n                var error = srcElement.error;\n\n                if (error && error.name === \"QuotaExceededError\") {\n                  _this._hasReachedQuota = true;\n                }\n              } catch (ex) {}\n\n              generateBlobUrl();\n            };\n\n            transaction.oncomplete = function () {\n              generateBlobUrl();\n            };\n\n            var newTexture = {\n              textureUrl: url,\n              data: blob\n            };\n\n            try {\n              // Put the blob into the dabase\n              var addRequest = transaction.objectStore(\"textures\").put(newTexture);\n\n              addRequest.onsuccess = function () {};\n\n              addRequest.onerror = function () {\n                generateBlobUrl();\n              };\n            } catch (ex) {\n              // \"DataCloneError\" generated by Chrome when you try to inject blob into IndexedDB\n              if (ex.code === 25) {\n                Database.IsUASupportingBlobStorage = false;\n                _this._enableTexturesOffline = false;\n              }\n\n              image.src = url;\n            }\n          } else {\n            image.src = url;\n          }\n        }, false);\n        xhr.addEventListener(\"error\", function () {\n          Logger.Error(\"Error in XHR request in BABYLON.Database.\");\n          image.src = url;\n        }, false);\n        xhr.send();\n      } else {\n        image.src = url;\n      }\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\n      image.src = url;\n    }\n  };\n\n  Database.prototype._checkVersionFromDB = function (url, versionLoaded) {\n    var _this = this;\n\n    var updateVersion = function updateVersion() {\n      // the version is not yet in the DB or we need to update it\n      _this._saveVersionIntoDBAsync(url, versionLoaded);\n    };\n\n    this._loadVersionFromDBAsync(url, versionLoaded, updateVersion);\n  };\n\n  Database.prototype._loadVersionFromDBAsync = function (url, callback, updateInDBCallback) {\n    var _this = this;\n\n    if (this._isSupported && this._db) {\n      var version;\n\n      try {\n        var transaction = this._db.transaction([\"versions\"]);\n\n        transaction.oncomplete = function () {\n          if (version) {\n            // If the version in the JSON file is different from the version in DB\n            if (_this._manifestVersionFound !== version.data) {\n              _this._mustUpdateRessources = true;\n              updateInDBCallback();\n            } else {\n              callback(version.data);\n            }\n          } // version was not found in DB\n          else {\n            _this._mustUpdateRessources = true;\n            updateInDBCallback();\n          }\n        };\n\n        transaction.onabort = function () {\n          callback(-1);\n        };\n\n        var getRequest = transaction.objectStore(\"versions\").get(url);\n\n        getRequest.onsuccess = function (event) {\n          version = event.target.result;\n        };\n\n        getRequest.onerror = function () {\n          Logger.Error(\"Error loading version for scene \" + url + \" from DB.\");\n          callback(-1);\n        };\n      } catch (ex) {\n        Logger.Error(\"Error while accessing 'versions' object store (READ OP). Exception: \" + ex.message);\n        callback(-1);\n      }\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\n      callback(-1);\n    }\n  };\n\n  Database.prototype._saveVersionIntoDBAsync = function (url, callback) {\n    var _this = this;\n\n    if (this._isSupported && !this._hasReachedQuota && this._db) {\n      try {\n        // Open a transaction to the database\n        var transaction = this._db.transaction([\"versions\"], \"readwrite\"); // the transaction could abort because of a QuotaExceededError error\n\n\n        transaction.onabort = function (event) {\n          try {\n            //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\n            var error = event.srcElement['error'];\n\n            if (error && error.name === \"QuotaExceededError\") {\n              _this._hasReachedQuota = true;\n            }\n          } catch (ex) {}\n\n          callback(-1);\n        };\n\n        transaction.oncomplete = function () {\n          callback(_this._manifestVersionFound);\n        };\n\n        var newVersion = {\n          sceneUrl: url,\n          data: this._manifestVersionFound\n        }; // Put the scene into the database\n\n        var addRequest = transaction.objectStore(\"versions\").put(newVersion);\n\n        addRequest.onsuccess = function () {};\n\n        addRequest.onerror = function () {\n          Logger.Error(\"Error in DB add version request in BABYLON.Database.\");\n        };\n      } catch (ex) {\n        Logger.Error(\"Error while accessing 'versions' object store (WRITE OP). Exception: \" + ex.message);\n        callback(-1);\n      }\n    } else {\n      callback(-1);\n    }\n  };\n  /**\r\n   * Loads a file from database\r\n   * @param url defines the URL to load from\r\n   * @param sceneLoaded defines a callback to call on success\r\n   * @param progressCallBack defines a callback to call when progress changed\r\n   * @param errorCallback defines a callback to call on error\r\n   * @param useArrayBuffer defines a boolean to use array buffer instead of text string\r\n   */\n\n\n  Database.prototype.loadFile = function (url, sceneLoaded, progressCallBack, errorCallback, useArrayBuffer) {\n    var _this = this;\n\n    var completeUrl = Database._ReturnFullUrlLocation(url);\n\n    var saveAndLoadFile = function saveAndLoadFile() {\n      // the scene is not yet in the DB, let's try to save it\n      _this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\n    };\n\n    this._checkVersionFromDB(completeUrl, function (version) {\n      if (version !== -1) {\n        if (!_this._mustUpdateRessources) {\n          _this._loadFileAsync(completeUrl, sceneLoaded, saveAndLoadFile);\n        } else {\n          _this._saveFileAsync(completeUrl, sceneLoaded, progressCallBack, useArrayBuffer, errorCallback);\n        }\n      } else {\n        if (errorCallback) {\n          errorCallback();\n        }\n      }\n    });\n  };\n\n  Database.prototype._loadFileAsync = function (url, callback, notInDBCallback) {\n    if (this._isSupported && this._db) {\n      var targetStore;\n\n      if (url.indexOf(\".babylon\") !== -1) {\n        targetStore = \"scenes\";\n      } else {\n        targetStore = \"textures\";\n      }\n\n      var file;\n\n      var transaction = this._db.transaction([targetStore]);\n\n      transaction.oncomplete = function () {\n        if (file) {\n          callback(file.data);\n        } // file was not found in DB\n        else {\n          notInDBCallback();\n        }\n      };\n\n      transaction.onabort = function () {\n        notInDBCallback();\n      };\n\n      var getRequest = transaction.objectStore(targetStore).get(url);\n\n      getRequest.onsuccess = function (event) {\n        file = event.target.result;\n      };\n\n      getRequest.onerror = function () {\n        Logger.Error(\"Error loading file \" + url + \" from DB.\");\n        notInDBCallback();\n      };\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or BabylonJS Database is not open.\");\n      callback();\n    }\n  };\n\n  Database.prototype._saveFileAsync = function (url, callback, progressCallback, useArrayBuffer, errorCallback) {\n    var _this = this;\n\n    if (this._isSupported) {\n      var targetStore;\n\n      if (url.indexOf(\".babylon\") !== -1) {\n        targetStore = \"scenes\";\n      } else {\n        targetStore = \"textures\";\n      } // Create XHR\n\n\n      var xhr = new WebRequest();\n      var fileData;\n      xhr.open(\"GET\", url + \"?\" + Date.now());\n\n      if (useArrayBuffer) {\n        xhr.responseType = \"arraybuffer\";\n      }\n\n      if (progressCallback) {\n        xhr.onprogress = progressCallback;\n      }\n\n      xhr.addEventListener(\"load\", function () {\n        if (xhr.status === 200 || xhr.status < 400 && Database._ValidateXHRData(xhr, !useArrayBuffer ? 1 : 6)) {\n          // Blob as response (XHR2)\n          fileData = !useArrayBuffer ? xhr.responseText : xhr.response;\n\n          if (!_this._hasReachedQuota && _this._db) {\n            // Open a transaction to the database\n            var transaction = _this._db.transaction([targetStore], \"readwrite\"); // the transaction could abort because of a QuotaExceededError error\n\n\n            transaction.onabort = function (event) {\n              try {\n                //backwards compatibility with ts 1.0, srcElement doesn't have an \"error\" according to ts 1.3\n                var error = event.srcElement['error'];\n\n                if (error && error.name === \"QuotaExceededError\") {\n                  _this._hasReachedQuota = true;\n                }\n              } catch (ex) {}\n\n              callback(fileData);\n            };\n\n            transaction.oncomplete = function () {\n              callback(fileData);\n            };\n\n            var newFile;\n\n            if (targetStore === \"scenes\") {\n              newFile = {\n                sceneUrl: url,\n                data: fileData,\n                version: _this._manifestVersionFound\n              };\n            } else {\n              newFile = {\n                textureUrl: url,\n                data: fileData\n              };\n            }\n\n            try {\n              // Put the scene into the database\n              var addRequest = transaction.objectStore(targetStore).put(newFile);\n\n              addRequest.onsuccess = function () {};\n\n              addRequest.onerror = function () {\n                Logger.Error(\"Error in DB add file request in BABYLON.Database.\");\n              };\n            } catch (ex) {\n              callback(fileData);\n            }\n          } else {\n            callback(fileData);\n          }\n        } else {\n          if (xhr.status >= 400 && errorCallback) {\n            errorCallback(xhr);\n          } else {\n            callback();\n          }\n        }\n      }, false);\n      xhr.addEventListener(\"error\", function () {\n        Logger.Error(\"error on XHR request.\");\n        callback();\n      }, false);\n      xhr.send();\n    } else {\n      Logger.Error(\"Error: IndexedDB not supported by your browser or Babylon.js database is not open.\");\n      callback();\n    }\n  };\n  /**\r\n   * Validates if xhr data is correct\r\n   * @param xhr defines the request to validate\r\n   * @param dataType defines the expected data type\r\n   * @returns true if data is correct\r\n   */\n\n\n  Database._ValidateXHRData = function (xhr, dataType) {\n    // 1 for text (.babylon, manifest and shaders), 2 for TGA, 4 for DDS, 7 for all\n    if (dataType === void 0) {\n      dataType = 7;\n    }\n\n    try {\n      if (dataType & 1) {\n        if (xhr.responseText && xhr.responseText.length > 0) {\n          return true;\n        } else if (dataType === 1) {\n          return false;\n        }\n      }\n\n      if (dataType & 2) {\n        // Check header width and height since there is no \"TGA\" magic number\n        var tgaHeader = TGATools.GetTGAHeader(xhr.response);\n\n        if (tgaHeader.width && tgaHeader.height && tgaHeader.width > 0 && tgaHeader.height > 0) {\n          return true;\n        } else if (dataType === 2) {\n          return false;\n        }\n      }\n\n      if (dataType & 4) {\n        // Check for the \"DDS\" magic number\n        var ddsHeader = new Uint8Array(xhr.response, 0, 3);\n\n        if (ddsHeader[0] === 68 && ddsHeader[1] === 68 && ddsHeader[2] === 83) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    } catch (e) {// Global protection\n    }\n\n    return false;\n  };\n  /** Gets a boolean indicating if the user agent supports blob storage (this value will be updated after creating the first Database object) */\n\n\n  Database.IsUASupportingBlobStorage = true;\n  /**\r\n   * Gets a boolean indicating if Database storate is enabled (off by default)\r\n   */\n\n  Database.IDBStorageEnabled = false;\n\n  Database._ParseURL = function (url) {\n    var a = document.createElement('a');\n    a.href = url;\n    var urlWithoutHash = url.substring(0, url.lastIndexOf(\"#\"));\n    var fileName = url.substring(urlWithoutHash.lastIndexOf(\"/\") + 1, url.length);\n    var absLocation = url.substring(0, url.indexOf(fileName, 0));\n    return absLocation;\n  };\n\n  Database._ReturnFullUrlLocation = function (url) {\n    if (url.indexOf(\"http:/\") === -1 && url.indexOf(\"https:/\") === -1 && typeof window !== \"undefined\") {\n      return Database._ParseURL(window.location.href) + url;\n    } else {\n      return url;\n    }\n  };\n\n  return Database;\n}();\n\nexport { Database };","map":null,"metadata":{},"sourceType":"module"}