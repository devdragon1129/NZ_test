{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { CameraInputsManager } from \"./cameraInputsManager\";\nimport { FreeCameraKeyboardMoveInput } from \"../Cameras/Inputs/freeCameraKeyboardMoveInput\";\nimport { FreeCameraMouseInput } from \"../Cameras/Inputs/freeCameraMouseInput\";\nimport { FreeCameraMouseWheelInput } from \"../Cameras/Inputs/freeCameraMouseWheelInput\";\nimport { FreeCameraTouchInput } from \"../Cameras/Inputs/freeCameraTouchInput\";\n/**\r\n * Default Inputs manager for the FreeCamera.\r\n * It groups all the default supported inputs for ease of use.\r\n * @see https://doc.babylonjs.com/how_to/customizing_camera_inputs\r\n */\n\nvar FreeCameraInputsManager =\n/** @class */\nfunction (_super) {\n  __extends(FreeCameraInputsManager, _super);\n  /**\r\n   * Instantiates a new FreeCameraInputsManager.\r\n   * @param camera Defines the camera the inputs belong to\r\n   */\n\n\n  function FreeCameraInputsManager(camera) {\n    var _this = _super.call(this, camera) || this;\n    /**\r\n     * @hidden\r\n     */\n\n\n    _this._mouseInput = null;\n    /**\r\n     * @hidden\r\n     */\n\n    _this._mouseWheelInput = null;\n    return _this;\n  }\n  /**\r\n   * Add keyboard input support to the input manager.\r\n   * @returns the current input manager\r\n   */\n\n\n  FreeCameraInputsManager.prototype.addKeyboard = function () {\n    this.add(new FreeCameraKeyboardMoveInput());\n    return this;\n  };\n  /**\r\n   * Add mouse input support to the input manager.\r\n   * @param touchEnabled if the FreeCameraMouseInput should support touch (default: true)\r\n   * @returns the current input manager\r\n   */\n\n\n  FreeCameraInputsManager.prototype.addMouse = function (touchEnabled) {\n    if (touchEnabled === void 0) {\n      touchEnabled = true;\n    }\n\n    if (!this._mouseInput) {\n      this._mouseInput = new FreeCameraMouseInput(touchEnabled);\n      this.add(this._mouseInput);\n    }\n\n    return this;\n  };\n  /**\r\n   * Removes the mouse input support from the manager\r\n   * @returns the current input manager\r\n   */\n\n\n  FreeCameraInputsManager.prototype.removeMouse = function () {\n    if (this._mouseInput) {\n      this.remove(this._mouseInput);\n    }\n\n    return this;\n  };\n  /**\r\n   * Add mouse wheel input support to the input manager.\r\n   * @returns the current input manager\r\n   */\n\n\n  FreeCameraInputsManager.prototype.addMouseWheel = function () {\n    if (!this._mouseWheelInput) {\n      this._mouseWheelInput = new FreeCameraMouseWheelInput();\n      this.add(this._mouseWheelInput);\n    }\n\n    return this;\n  };\n  /**\r\n   * Removes the mouse wheel input support from the manager\r\n   * @returns the current input manager\r\n   */\n\n\n  FreeCameraInputsManager.prototype.removeMouseWheel = function () {\n    if (this._mouseWheelInput) {\n      this.remove(this._mouseWheelInput);\n    }\n\n    return this;\n  };\n  /**\r\n   * Add touch input support to the input manager.\r\n   * @returns the current input manager\r\n   */\n\n\n  FreeCameraInputsManager.prototype.addTouch = function () {\n    this.add(new FreeCameraTouchInput());\n    return this;\n  };\n  /**\r\n   * Remove all attached input methods from a camera\r\n   */\n\n\n  FreeCameraInputsManager.prototype.clear = function () {\n    _super.prototype.clear.call(this);\n\n    this._mouseInput = null;\n  };\n\n  return FreeCameraInputsManager;\n}(CameraInputsManager);\n\nexport { FreeCameraInputsManager };","map":null,"metadata":{},"sourceType":"module"}