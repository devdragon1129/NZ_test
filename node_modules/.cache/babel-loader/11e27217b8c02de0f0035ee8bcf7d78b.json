{"ast":null,"code":"import _classCallCheck from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/opt/work/NZ_test/src/components/Chip/Chip.tsx\";\nimport * as React from 'react';\nimport { Row } from 'decentraland-ui';\nimport Icon from 'components/Icon';\nimport './Chip.css';\n\nvar Chip = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(Chip, _React$PureComponent);\n\n  function Chip() {\n    _classCallCheck(this, Chip);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Chip).apply(this, arguments));\n  }\n\n  _createClass(Chip, [{\n    key: \"getClassName\",\n    value: function getClassName() {\n      var _this$props = this.props,\n          type = _this$props.type,\n          isActive = _this$props.isActive,\n          isDisabled = _this$props.isDisabled,\n          onClick = _this$props.onClick,\n          className = _this$props.className;\n      var classes = ['Chip', type];\n      if (isActive) classes.push('active');\n      if (isDisabled) classes.push('disabled');\n      if (onClick && !isDisabled) classes.push('clickeable');\n      if (className) classes.push(className);\n      return classes.join(' ');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          text = _this$props2.text,\n          icon = _this$props2.icon,\n          isActive = _this$props2.isActive,\n          isDisabled = _this$props2.isDisabled,\n          onClick = _this$props2.onClick,\n          onIconClick = _this$props2.onIconClick;\n\n      if (!text && !icon) {\n        throw new Error('You need to provide at least one prop: text or icon');\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: this.getClassName(),\n        onClick: isDisabled ? undefined : onClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        align: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }\n      }, text ? /*#__PURE__*/React.createElement(\"span\", {\n        className: \"text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 19\n        }\n      }, text) : null, icon ? /*#__PURE__*/React.createElement(Icon, {\n        name: icon,\n        isActive: isActive,\n        onClick: isDisabled ? undefined : onIconClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 19\n        }\n      }) : null));\n    }\n  }]);\n\n  return Chip;\n}(React.PureComponent);\n\nChip.defaultProps = {\n  text: '',\n  icon: '',\n  type: 'square',\n  isDisabled: false,\n  isActive: false,\n  className: ''\n};\nexport { Chip as default };","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Chip/Chip.tsx"],"names":["React","Row","Icon","Chip","props","type","isActive","isDisabled","onClick","className","classes","push","join","text","icon","onIconClick","Error","getClassName","undefined","PureComponent","defaultProps"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,QAAoB,iBAApB;AAEA,OAAOC,IAAP,MAAiB,iBAAjB;AAGA,OAAO,YAAP;;IAEqBC,I;;;;;;;;;;;mCAUJ;AAAA,wBAC8C,KAAKC,KADnD;AAAA,UACLC,IADK,eACLA,IADK;AAAA,UACCC,QADD,eACCA,QADD;AAAA,UACWC,UADX,eACWA,UADX;AAAA,UACuBC,OADvB,eACuBA,OADvB;AAAA,UACgCC,SADhC,eACgCA,SADhC;AAEb,UAAMC,OAAO,GAAG,CAAC,MAAD,EAASL,IAAT,CAAhB;AAEA,UAAIC,QAAJ,EAAcI,OAAO,CAACC,IAAR,CAAa,QAAb;AACd,UAAIJ,UAAJ,EAAgBG,OAAO,CAACC,IAAR,CAAa,UAAb;AAChB,UAAIH,OAAO,IAAI,CAACD,UAAhB,EAA4BG,OAAO,CAACC,IAAR,CAAa,YAAb;AAC5B,UAAIF,SAAJ,EAAeC,OAAO,CAACC,IAAR,CAAaF,SAAb;AAEf,aAAOC,OAAO,CAACE,IAAR,CAAa,GAAb,CAAP;AACD;;;6BAEQ;AAAA,yBAC4D,KAAKR,KADjE;AAAA,UACCS,IADD,gBACCA,IADD;AAAA,UACOC,IADP,gBACOA,IADP;AAAA,UACaR,QADb,gBACaA,QADb;AAAA,UACuBC,UADvB,gBACuBA,UADvB;AAAA,UACmCC,OADnC,gBACmCA,OADnC;AAAA,UAC4CO,WAD5C,gBAC4CA,WAD5C;;AAEP,UAAI,CAACF,IAAD,IAAS,CAACC,IAAd,EAAoB;AAClB,cAAM,IAAIE,KAAJ,CAAU,qDAAV,CAAN;AACD;;AAED,0BACE;AAAK,QAAA,SAAS,EAAE,KAAKC,YAAL,EAAhB;AAAqC,QAAA,OAAO,EAAEV,UAAU,GAAGW,SAAH,GAAeV,OAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,GAAD;AAAK,QAAA,KAAK,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGK,IAAI,gBAAG;AAAM,QAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwBA,IAAxB,CAAH,GAA0C,IADjD,EAEGC,IAAI,gBAAG,oBAAC,IAAD;AAAM,QAAA,IAAI,EAAEA,IAAZ;AAAkB,QAAA,QAAQ,EAAER,QAA5B;AAAsC,QAAA,OAAO,EAAEC,UAAU,GAAGW,SAAH,GAAeH,WAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAH,GAA6F,IAFpG,CADF,CADF;AAQD;;;;EApC+Bf,KAAK,CAACmB,a;;AAAnBhB,I,CACZiB,Y,GAA6B;AAClCP,EAAAA,IAAI,EAAE,EAD4B;AAElCC,EAAAA,IAAI,EAAE,EAF4B;AAGlCT,EAAAA,IAAI,EAAE,QAH4B;AAIlCE,EAAAA,UAAU,EAAE,KAJsB;AAKlCD,EAAAA,QAAQ,EAAE,KALwB;AAMlCG,EAAAA,SAAS,EAAE;AANuB,C;SADjBN,I","sourcesContent":["import * as React from 'react'\nimport { Row } from 'decentraland-ui'\n\nimport Icon from 'components/Icon'\nimport { Props, DefaultProps } from './Chip.types'\n\nimport './Chip.css'\n\nexport default class Chip extends React.PureComponent<Props> {\n  static defaultProps: DefaultProps = {\n    text: '',\n    icon: '',\n    type: 'square',\n    isDisabled: false,\n    isActive: false,\n    className: ''\n  }\n\n  getClassName() {\n    const { type, isActive, isDisabled, onClick, className } = this.props\n    const classes = ['Chip', type]\n\n    if (isActive) classes.push('active')\n    if (isDisabled) classes.push('disabled')\n    if (onClick && !isDisabled) classes.push('clickeable')\n    if (className) classes.push(className)\n\n    return classes.join(' ')\n  }\n\n  render() {\n    const { text, icon, isActive, isDisabled, onClick, onIconClick } = this.props\n    if (!text && !icon) {\n      throw new Error('You need to provide at least one prop: text or icon')\n    }\n\n    return (\n      <div className={this.getClassName()} onClick={isDisabled ? undefined : onClick}>\n        <Row align=\"center\">\n          {text ? <span className=\"text\">{text}</span> : null}\n          {icon ? <Icon name={icon} isActive={isActive} onClick={isDisabled ? undefined : onIconClick} /> : null}\n        </Row>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}