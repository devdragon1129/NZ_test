{"ast":null,"code":"import { Vector3 } from \"../Maths/math.vector\";\nimport { StandardMaterial } from \"../Materials/standardMaterial\";\nimport { AxisDragGizmo } from \"../Gizmos/axisDragGizmo\";\nimport { Color3 } from '../Maths/math.color';\n/**\r\n     * The Axes viewer will show 3 axes in a specific point in space\r\n     */\n\nvar AxesViewer =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new AxesViewer\r\n   * @param scene defines the hosting scene\r\n   * @param scaleLines defines a number used to scale line length (1 by default)\r\n   * @param renderingGroupId defines a number used to set the renderingGroupId of the meshes (2 by default)\r\n   * @param xAxis defines the node hierarchy used to render the x-axis\r\n   * @param yAxis defines the node hierarchy used to render the y-axis\r\n   * @param zAxis defines the node hierarchy used to render the z-axis\r\n   */\n  function AxesViewer(scene, scaleLines, renderingGroupId, xAxis, yAxis, zAxis) {\n    if (scaleLines === void 0) {\n      scaleLines = 1;\n    }\n\n    if (renderingGroupId === void 0) {\n      renderingGroupId = 2;\n    }\n\n    this._scaleLinesFactor = 4;\n    this._instanced = false;\n    /**\r\n     * Gets the hosting scene\r\n     */\n\n    this.scene = null;\n    /**\r\n     * Gets or sets a number used to scale line length\r\n     */\n\n    this.scaleLines = 1;\n    this.scaleLines = scaleLines;\n\n    if (!xAxis) {\n      var redColoredMaterial = new StandardMaterial(\"\", scene);\n      redColoredMaterial.disableLighting = true;\n      redColoredMaterial.emissiveColor = Color3.Red().scale(0.5);\n      xAxis = AxisDragGizmo._CreateArrow(scene, redColoredMaterial);\n    }\n\n    if (!yAxis) {\n      var greenColoredMaterial = new StandardMaterial(\"\", scene);\n      greenColoredMaterial.disableLighting = true;\n      greenColoredMaterial.emissiveColor = Color3.Green().scale(0.5);\n      yAxis = AxisDragGizmo._CreateArrow(scene, greenColoredMaterial);\n    }\n\n    if (!zAxis) {\n      var blueColoredMaterial = new StandardMaterial(\"\", scene);\n      blueColoredMaterial.disableLighting = true;\n      blueColoredMaterial.emissiveColor = Color3.Blue().scale(0.5);\n      zAxis = AxisDragGizmo._CreateArrow(scene, blueColoredMaterial);\n    }\n\n    this._xAxis = xAxis;\n\n    this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n\n    this._yAxis = yAxis;\n\n    this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n\n    this._zAxis = zAxis;\n\n    this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n\n    if (renderingGroupId != null) {\n      AxesViewer._SetRenderingGroupId(this._xAxis, renderingGroupId);\n\n      AxesViewer._SetRenderingGroupId(this._yAxis, renderingGroupId);\n\n      AxesViewer._SetRenderingGroupId(this._zAxis, renderingGroupId);\n    }\n\n    this.scene = scene;\n    this.update(new Vector3(), Vector3.Right(), Vector3.Up(), Vector3.Forward());\n  }\n\n  Object.defineProperty(AxesViewer.prototype, \"xAxis\", {\n    /** Gets the node hierarchy used to render x-axis */\n    get: function get() {\n      return this._xAxis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AxesViewer.prototype, \"yAxis\", {\n    /** Gets the node hierarchy used to render y-axis */\n    get: function get() {\n      return this._yAxis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AxesViewer.prototype, \"zAxis\", {\n    /** Gets the node hierarchy used to render z-axis */\n    get: function get() {\n      return this._zAxis;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Force the viewer to update\r\n   * @param position defines the position of the viewer\r\n   * @param xaxis defines the x axis of the viewer\r\n   * @param yaxis defines the y axis of the viewer\r\n   * @param zaxis defines the z axis of the viewer\r\n   */\n\n  AxesViewer.prototype.update = function (position, xaxis, yaxis, zaxis) {\n    this._xAxis.position.copyFrom(position);\n\n    this._xAxis.setDirection(xaxis);\n\n    this._xAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n\n    this._yAxis.position.copyFrom(position);\n\n    this._yAxis.setDirection(yaxis);\n\n    this._yAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n\n    this._zAxis.position.copyFrom(position);\n\n    this._zAxis.setDirection(zaxis);\n\n    this._zAxis.scaling.setAll(this.scaleLines * this._scaleLinesFactor);\n  };\n  /**\r\n   * Creates an instance of this axes viewer.\r\n   * @returns a new axes viewer with instanced meshes\r\n   */\n\n\n  AxesViewer.prototype.createInstance = function () {\n    var xAxis = AxisDragGizmo._CreateArrowInstance(this.scene, this._xAxis);\n\n    var yAxis = AxisDragGizmo._CreateArrowInstance(this.scene, this._yAxis);\n\n    var zAxis = AxisDragGizmo._CreateArrowInstance(this.scene, this._zAxis);\n\n    var axesViewer = new AxesViewer(this.scene, this.scaleLines, null, xAxis, yAxis, zAxis);\n    axesViewer._instanced = true;\n    return axesViewer;\n  };\n  /** Releases resources */\n\n\n  AxesViewer.prototype.dispose = function () {\n    if (this._xAxis) {\n      this._xAxis.dispose(false, !this._instanced);\n    }\n\n    if (this._yAxis) {\n      this._yAxis.dispose(false, !this._instanced);\n    }\n\n    if (this._zAxis) {\n      this._zAxis.dispose(false, !this._instanced);\n    }\n\n    this.scene = null;\n  };\n\n  AxesViewer._SetRenderingGroupId = function (node, id) {\n    node.getChildMeshes().forEach(function (mesh) {\n      mesh.renderingGroupId = id;\n    });\n  };\n\n  return AxesViewer;\n}();\n\nexport { AxesViewer };","map":null,"metadata":{},"sourceType":"module"}