{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { NodeMaterialBlock } from '../nodeMaterialBlock';\nimport { NodeMaterialBlockConnectionPointTypes } from '../Enums/nodeMaterialBlockConnectionPointTypes';\nimport { NodeMaterialBlockTargets } from '../Enums/nodeMaterialBlockTargets';\nimport { _TypeStore } from '../../../Misc/typeStore';\nimport { InputBlock } from './Input/inputBlock';\n/**\r\n * Block used to rotate a 2d vector by a given angle\r\n */\n\nvar Rotate2dBlock =\n/** @class */\nfunction (_super) {\n  __extends(Rotate2dBlock, _super);\n  /**\r\n   * Creates a new Rotate2dBlock\r\n   * @param name defines the block name\r\n   */\n\n\n  function Rotate2dBlock(name) {\n    var _this = _super.call(this, name, NodeMaterialBlockTargets.Neutral) || this;\n\n    _this.registerInput(\"input\", NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    _this.registerInput(\"angle\", NodeMaterialBlockConnectionPointTypes.Float);\n\n    _this.registerOutput(\"output\", NodeMaterialBlockConnectionPointTypes.Vector2);\n\n    return _this;\n  }\n  /**\r\n   * Gets the current class name\r\n   * @returns the class name\r\n   */\n\n\n  Rotate2dBlock.prototype.getClassName = function () {\n    return \"Rotate2dBlock\";\n  };\n\n  Object.defineProperty(Rotate2dBlock.prototype, \"input\", {\n    /**\r\n     * Gets the input vector\r\n     */\n    get: function get() {\n      return this._inputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rotate2dBlock.prototype, \"angle\", {\n    /**\r\n     * Gets the input angle\r\n     */\n    get: function get() {\n      return this._inputs[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rotate2dBlock.prototype, \"output\", {\n    /**\r\n     * Gets the output component\r\n     */\n    get: function get() {\n      return this._outputs[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Rotate2dBlock.prototype.autoConfigure = function (material) {\n    if (!this.angle.isConnected) {\n      var angleInput = new InputBlock(\"angle\");\n      angleInput.value = 0;\n      angleInput.output.connectTo(this.angle);\n    }\n  };\n\n  Rotate2dBlock.prototype._buildBlock = function (state) {\n    _super.prototype._buildBlock.call(this, state);\n\n    var output = this._outputs[0];\n    var angle = this.angle;\n    var input = this.input;\n    state.compilationString += this._declareOutput(output, state) + (\" = vec2(cos(\" + angle.associatedVariableName + \") * \" + input.associatedVariableName + \".x - sin(\" + angle.associatedVariableName + \") * \" + input.associatedVariableName + \".y, sin(\" + angle.associatedVariableName + \") * \" + input.associatedVariableName + \".x + cos(\" + angle.associatedVariableName + \") * \" + input.associatedVariableName + \".y);\\r\\n\");\n    return this;\n  };\n\n  return Rotate2dBlock;\n}(NodeMaterialBlock);\n\nexport { Rotate2dBlock };\n_TypeStore.RegisteredTypes[\"BABYLON.Rotate2dBlock\"] = Rotate2dBlock;","map":null,"metadata":{},"sourceType":"module"}