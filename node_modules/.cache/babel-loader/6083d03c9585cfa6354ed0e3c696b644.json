{"ast":null,"code":"import { connect } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors';\nimport { getProjectId } from 'modules/location/selectors';\nimport { getData as getProjects, getLoading } from 'modules/project/selectors';\nimport { getDeploymentsByProjectId } from 'modules/deployment/selectors';\nimport { LOAD_PROJECTS_REQUEST, deleteProject, duplicateProject } from 'modules/project/actions';\nimport { openModal } from 'modules/modal/actions';\nimport SceneDetailPage from './SceneDetailPage';\n\nvar mapState = function mapState(state) {\n  var projectId = getProjectId(state);\n  var projects = getProjects(state);\n  var project = projectId && projectId in projects ? projects[projectId] : null;\n  var deploymentsByProjectId = getDeploymentsByProjectId(state);\n  var deployments = projectId && projectId in deploymentsByProjectId ? deploymentsByProjectId[projectId] : [];\n  return {\n    project: project,\n    deployments: deployments,\n    isLoading: isLoadingType(getLoading(state), LOAD_PROJECTS_REQUEST)\n  };\n};\n\nvar mapDispatch = function mapDispatch(dispatch) {\n  return {\n    onNavigate: function onNavigate(path) {\n      return dispatch(push(path));\n    },\n    onOpenModal: function onOpenModal(name, metadata) {\n      return dispatch(openModal(name, metadata));\n    },\n    onDelete: function onDelete(project) {\n      return dispatch(deleteProject(project));\n    },\n    onDuplicate: function onDuplicate(project) {\n      return dispatch(duplicateProject(project));\n    }\n  };\n};\n\nexport default connect(mapState, mapDispatch)(SceneDetailPage);","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/SceneDetailPage/SceneDetailPage.container.ts"],"names":["connect","push","isLoadingType","getProjectId","getData","getProjects","getLoading","getDeploymentsByProjectId","LOAD_PROJECTS_REQUEST","deleteProject","duplicateProject","openModal","SceneDetailPage","mapState","state","projectId","projects","project","deploymentsByProjectId","deployments","isLoading","mapDispatch","dispatch","onNavigate","path","onOpenModal","name","metadata","onDelete","onDuplicate"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,aAAT,QAA8B,mDAA9B;AAEA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,OAAO,IAAIC,WAApB,EAAiCC,UAAjC,QAAmD,2BAAnD;AACA,SAASC,yBAAT,QAA0C,8BAA1C;AACA,SAASC,qBAAT,EAAgCC,aAAhC,EAA+CC,gBAA/C,QAAuE,yBAAvE;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAqC;AACpD,MAAMC,SAAS,GAAGZ,YAAY,CAACW,KAAD,CAA9B;AACA,MAAME,QAAQ,GAAGX,WAAW,CAACS,KAAD,CAA5B;AACA,MAAMG,OAAO,GAAGF,SAAS,IAAIA,SAAS,IAAIC,QAA1B,GAAqCA,QAAQ,CAACD,SAAD,CAA7C,GAA2D,IAA3E;AACA,MAAMG,sBAAsB,GAAGX,yBAAyB,CAACO,KAAD,CAAxD;AACA,MAAMK,WAAW,GAAGJ,SAAS,IAAIA,SAAS,IAAIG,sBAA1B,GAAmDA,sBAAsB,CAACH,SAAD,CAAzE,GAAuF,EAA3G;AACA,SAAO;AACLE,IAAAA,OAAO,EAAPA,OADK;AAELE,IAAAA,WAAW,EAAXA,WAFK;AAGLC,IAAAA,SAAS,EAAElB,aAAa,CAACI,UAAU,CAACQ,KAAD,CAAX,EAAoBN,qBAApB;AAHnB,GAAP;AAKD,CAXD;;AAaA,IAAMa,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAA8C;AAChEC,IAAAA,UAAU,EAAE,oBAAAC,IAAI;AAAA,aAAIF,QAAQ,CAACrB,IAAI,CAACuB,IAAD,CAAL,CAAZ;AAAA,KADgD;AAEhEC,IAAAA,WAAW,EAAE,qBAACC,IAAD,EAAOC,QAAP;AAAA,aAAoBL,QAAQ,CAACX,SAAS,CAACe,IAAD,EAAOC,QAAP,CAAV,CAA5B;AAAA,KAFmD;AAGhEC,IAAAA,QAAQ,EAAE,kBAAAX,OAAO;AAAA,aAAIK,QAAQ,CAACb,aAAa,CAACQ,OAAD,CAAd,CAAZ;AAAA,KAH+C;AAIhEY,IAAAA,WAAW,EAAE,qBAAAZ,OAAO;AAAA,aAAIK,QAAQ,CAACZ,gBAAgB,CAACO,OAAD,CAAjB,CAAZ;AAAA;AAJ4C,GAA9C;AAAA,CAApB;;AAOA,eAAejB,OAAO,CAACa,QAAD,EAAWQ,WAAX,CAAP,CAA+BT,eAA/B,CAAf","sourcesContent":["import { connect } from 'react-redux'\nimport { push } from 'connected-react-router'\nimport { isLoadingType } from 'decentraland-dapps/dist/modules/loading/selectors'\nimport { RootState } from 'modules/common/types'\nimport { getProjectId } from 'modules/location/selectors'\nimport { getData as getProjects, getLoading } from 'modules/project/selectors'\nimport { getDeploymentsByProjectId } from 'modules/deployment/selectors'\nimport { LOAD_PROJECTS_REQUEST, deleteProject, duplicateProject } from 'modules/project/actions'\nimport { openModal } from 'modules/modal/actions'\nimport { MapStateProps, MapDispatchProps, MapDispatch } from './SceneDetailPage.types'\nimport SceneDetailPage from './SceneDetailPage'\n\nconst mapState = (state: RootState): MapStateProps => {\n  const projectId = getProjectId(state)\n  const projects = getProjects(state)\n  const project = projectId && projectId in projects ? projects[projectId] : null\n  const deploymentsByProjectId = getDeploymentsByProjectId(state)\n  const deployments = projectId && projectId in deploymentsByProjectId ? deploymentsByProjectId[projectId] : []\n  return {\n    project,\n    deployments,\n    isLoading: isLoadingType(getLoading(state), LOAD_PROJECTS_REQUEST)\n  }\n}\n\nconst mapDispatch = (dispatch: MapDispatch): MapDispatchProps => ({\n  onNavigate: path => dispatch(push(path)),\n  onOpenModal: (name, metadata) => dispatch(openModal(name, metadata)),\n  onDelete: project => dispatch(deleteProject(project)),\n  onDuplicate: project => dispatch(duplicateProject(project))\n})\n\nexport default connect(mapState, mapDispatch)(SceneDetailPage)\n"]},"metadata":{},"sourceType":"module"}