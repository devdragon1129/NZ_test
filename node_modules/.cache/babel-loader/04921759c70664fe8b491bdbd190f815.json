{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateTuple = void 0;\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar util_1 = require(\"../../compile/util\");\n\nvar code_1 = require(\"../code\");\n\nvar def = {\n  keyword: \"items\",\n  type: \"array\",\n  schemaType: [\"object\", \"array\", \"boolean\"],\n  before: \"uniqueItems\",\n  code: function code(cxt) {\n    var schema = cxt.schema,\n        it = cxt.it;\n    if (Array.isArray(schema)) return validateTuple(cxt, \"additionalItems\", schema);\n    it.items = true;\n    if ((0, util_1.alwaysValidSchema)(it, schema)) return;\n    cxt.ok((0, code_1.validateArray)(cxt));\n  }\n};\n\nfunction validateTuple(cxt, extraItems) {\n  var schArr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : cxt.schema;\n  var gen = cxt.gen,\n      parentSchema = cxt.parentSchema,\n      data = cxt.data,\n      keyword = cxt.keyword,\n      it = cxt.it;\n  checkStrictTuple(parentSchema);\n\n  if (it.opts.unevaluated && schArr.length && it.items !== true) {\n    it.items = util_1.mergeEvaluated.items(gen, schArr.length, it.items);\n  }\n\n  var valid = gen.name(\"valid\");\n  var len = gen.const(\"len\", (0, codegen_1._)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\", \".length\"])), data));\n  schArr.forEach(function (sch, i) {\n    if ((0, util_1.alwaysValidSchema)(it, sch)) return;\n    gen.if((0, codegen_1._)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\", \" > \", \"\"])), len, i), function () {\n      return cxt.subschema({\n        keyword: keyword,\n        schemaProp: i,\n        dataProp: i\n      }, valid);\n    });\n    cxt.ok(valid);\n  });\n\n  function checkStrictTuple(sch) {\n    var opts = it.opts,\n        errSchemaPath = it.errSchemaPath;\n    var l = schArr.length;\n    var fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);\n\n    if (opts.strictTuples && !fullTuple) {\n      var msg = \"\\\"\".concat(keyword, \"\\\" is \").concat(l, \"-tuple, but minItems or maxItems/\").concat(extraItems, \" are not specified or different at path \\\"\").concat(errSchemaPath, \"\\\"\");\n      (0, util_1.checkStrictMode)(it, msg, opts.strictTuples);\n    }\n  }\n}\n\nexports.validateTuple = validateTuple;\nexports.default = def;","map":null,"metadata":{},"sourceType":"script"}