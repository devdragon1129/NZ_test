{"ast":null,"code":"export var DeployToLandView;\n\n(function (DeployToLandView) {\n  DeployToLandView[\"NONE\"] = \"NONE\";\n  DeployToLandView[\"CONNECT\"] = \"CONNECT\";\n  DeployToLandView[\"PROGRESS\"] = \"PROGRESS\";\n  DeployToLandView[\"MAP\"] = \"MAP\";\n  DeployToLandView[\"SUCCESS\"] = \"SUCCESS\";\n  DeployToLandView[\"CONFIRMATION\"] = \"CONFIRMATION\";\n})(DeployToLandView || (DeployToLandView = {}));","map":{"version":3,"sources":["/opt/work/NZ_test/src/components/Modals/DeployModal/DeployToLand/DeployToLand.types.ts"],"names":["DeployToLandView"],"mappings":"AA4EA,WAAYA,gBAAZ;;WAAYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB","sourcesContent":["import { Dispatch } from 'redux'\nimport { SignInProps } from 'decentraland-ui'\nimport { CallHistoryMethodAction } from 'connected-react-router'\nimport { Coordinate, Rotation, DeploymentStatus, Deployment } from 'modules/deployment/types'\nimport { DeployToLandRequestAction, deployToLandRequest } from 'modules/deployment/actions'\nimport { RecordMediaRequestAction, recordMediaRequest } from 'modules/media/actions'\nimport { OpenModalAction, openModal } from 'modules/modal/actions'\nimport { DeploymentState } from 'modules/deployment/reducer'\nimport { Project } from 'modules/project/types'\nimport { Media } from 'modules/media/types'\nimport { LandTile } from 'modules/land/types'\n\nexport type Props = {\n  name: string\n  error: string | null\n  walletError: SignInProps['hasError']\n  isConnected: SignInProps['isConnected']\n  isConnecting: SignInProps['isConnecting']\n  isRecording: boolean\n  isUploadingAssets: boolean\n  isCreatingFiles: boolean\n  isUploadingRecording: boolean\n  isLoggedIn: boolean\n  mediaProgress: number\n  deploymentProgress: DeploymentState['progress']\n  ethAddress: string | undefined\n  project: Project\n  media: Media | null\n  deploymentStatus: DeploymentStatus\n  deployments: Deployment[]\n  deploymentsByCoord: Record<string, Deployment>\n  landTiles: Record<string, LandTile>\n  onOpenModal: typeof openModal\n  onClose: () => void\n  onDeploy: typeof deployToLandRequest\n  onRecord: typeof recordMediaRequest\n  onDeployToPool: () => void\n  onBack: () => void\n  onNavigateHome: () => void\n}\n\nexport type State = {\n  placement: {\n    point: Coordinate\n    rotation: Rotation\n  } | null\n  needsConfirmation: boolean\n  coords: string | null\n  overrideDeploymentId?: string\n  view: DeployToLandView\n}\n\nexport type MapStateProps = Pick<\n  Props,\n  | 'isConnecting'\n  | 'media'\n  | 'error'\n  | 'walletError'\n  | 'isRecording'\n  | 'isUploadingAssets'\n  | 'isUploadingRecording'\n  | 'isCreatingFiles'\n  | 'isConnected'\n  | 'isLoggedIn'\n  | 'ethAddress'\n  | 'project'\n  | 'deploymentStatus'\n  | 'deployments'\n  | 'mediaProgress'\n  | 'deploymentProgress'\n  | 'deploymentsByCoord'\n  | 'landTiles'\n>\nexport type MapDispatchProps = Pick<Props, 'onOpenModal' | 'onDeploy' | 'onRecord' | 'onNavigateHome'>\nexport type MapDispatch = Dispatch<OpenModalAction | DeployToLandRequestAction | RecordMediaRequestAction | CallHistoryMethodAction>\n\nexport enum DeployToLandView {\n  NONE = 'NONE',\n  CONNECT = 'CONNECT',\n  PROGRESS = 'PROGRESS',\n  MAP = 'MAP',\n  SUCCESS = 'SUCCESS',\n  CONFIRMATION = 'CONFIRMATION'\n}\n"]},"metadata":{},"sourceType":"module"}