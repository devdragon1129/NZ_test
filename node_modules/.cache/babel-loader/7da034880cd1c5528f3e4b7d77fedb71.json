{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(featuresSaga),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(handleFetchApplicationFeaturesRequest);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFetchApplicationFeaturesIntervalGenerator = exports.featuresSaga = void 0;\n\nvar effects_1 = require(\"redux-saga/effects\");\n\nvar actions_1 = require(\"./actions\");\n\nvar utils_1 = require(\"./utils\");\n/**\n * Include this saga to be able to fetch feature flags for different applications.\n * By providing the polling object in the config, this saga will take care of polling every\n * certain amount of time the feature flags for the defined applications.\n * @param config Configuration for the saga\n */\n\n\nfunction featuresSaga(config) {\n  var polling;\n  return _regeneratorRuntime.wrap(function featuresSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          polling = config.polling;\n          _context.next = 3;\n          return effects_1.takeEvery(actions_1.FETCH_APPLICATION_FEATURES_REQUEST, handleFetchApplicationFeaturesRequest);\n\n        case 3:\n          if (!polling) {\n            _context.next = 6;\n            break;\n          }\n\n          _context.next = 6;\n          return effects_1.spawn(exports.getFetchApplicationFeaturesIntervalGenerator(polling));\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nexports.featuresSaga = featuresSaga;\n\nfunction handleFetchApplicationFeaturesRequest(action) {\n  var apps, features;\n  return _regeneratorRuntime.wrap(function handleFetchApplicationFeaturesRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          apps = action.payload.apps;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return effects_1.call(utils_1.fetchApplicationFeatures, apps);\n\n        case 4:\n          features = _context2.sent;\n          _context2.next = 7;\n          return effects_1.put(actions_1.fetchApplicationFeaturesSuccess(apps, features));\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 13;\n          return effects_1.put(actions_1.fetchApplicationFeaturesFailure(apps, _context2.t0.message));\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 9]]);\n}\n\nvar getFetchApplicationFeaturesIntervalGenerator = function getFetchApplicationFeaturesIntervalGenerator(polling) {\n  return /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!true) {\n              _context3.next = 9;\n              break;\n            }\n\n            _context3.next = 3;\n            return effects_1.put(actions_1.fetchApplicationFeaturesRequest(polling.apps));\n\n          case 3:\n            _context3.next = 5;\n            return effects_1.race({\n              success: effects_1.take(actions_1.FETCH_APPLICATION_FEATURES_SUCCESS),\n              failure: effects_1.take(actions_1.FETCH_APPLICATION_FEATURES_FAILURE)\n            });\n\n          case 5:\n            _context3.next = 7;\n            return effects_1.delay(polling.delay);\n\n          case 7:\n            _context3.next = 0;\n            break;\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee);\n  });\n};\n\nexports.getFetchApplicationFeaturesIntervalGenerator = getFetchApplicationFeaturesIntervalGenerator;","map":null,"metadata":{},"sourceType":"script"}