{"ast":null,"code":"import { Mesh } from \"../mesh\";\nimport { SphereBuilder } from '../Builders/sphereBuilder';\n/**\r\n * Creates a hemispheric light\r\n */\n\nMesh.CreateHemisphere = function (name, segments, diameter, scene) {\n  var options = {\n    segments: segments,\n    diameter: diameter\n  };\n  return HemisphereBuilder.CreateHemisphere(name, options, scene);\n};\n/**\r\n * Class containing static functions to help procedurally build meshes\r\n */\n\n\nvar HemisphereBuilder =\n/** @class */\nfunction () {\n  function HemisphereBuilder() {}\n  /**\r\n   * Creates a hemisphere mesh\r\n   * @param name defines the name of the mesh\r\n   * @param options defines the options used to create the mesh\r\n   * @param scene defines the hosting scene\r\n   * @returns the hemisphere mesh\r\n   */\n\n\n  HemisphereBuilder.CreateHemisphere = function (name, options, scene) {\n    if (!options.diameter) {\n      options.diameter = 1;\n    }\n\n    if (!options.segments) {\n      options.segments = 16;\n    }\n\n    var halfSphere = SphereBuilder.CreateSphere(\"\", {\n      slice: 0.5,\n      diameter: options.diameter,\n      segments: options.segments\n    }, scene);\n    var disc = Mesh.CreateDisc(\"\", options.diameter / 2, options.segments * 3 + (4 - options.segments), scene);\n    disc.rotation.x = -Math.PI / 2;\n    disc.parent = halfSphere;\n    var merged = Mesh.MergeMeshes([disc, halfSphere], true);\n    merged.name = name;\n    return merged;\n  };\n\n  return HemisphereBuilder;\n}();\n\nexport { HemisphereBuilder };","map":null,"metadata":{},"sourceType":"module"}