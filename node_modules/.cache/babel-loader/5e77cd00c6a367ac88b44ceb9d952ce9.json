{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { PostProcess } from \"./postProcess\";\nimport \"../Shaders/depthOfFieldMerge.fragment\";\n/**\r\n * Options to be set when merging outputs from the default pipeline.\r\n */\n\nvar DepthOfFieldMergePostProcessOptions =\n/** @class */\nfunction () {\n  function DepthOfFieldMergePostProcessOptions() {}\n\n  return DepthOfFieldMergePostProcessOptions;\n}();\n\nexport { DepthOfFieldMergePostProcessOptions };\n/**\r\n * The DepthOfFieldMergePostProcess merges blurred images with the original based on the values of the circle of confusion.\r\n */\n\nvar DepthOfFieldMergePostProcess =\n/** @class */\nfunction (_super) {\n  __extends(DepthOfFieldMergePostProcess, _super);\n  /**\r\n   * Creates a new instance of DepthOfFieldMergePostProcess\r\n   * @param name The name of the effect.\r\n   * @param originalFromInput Post process which's input will be used for the merge.\r\n   * @param circleOfConfusion Circle of confusion post process which's output will be used to blur each pixel.\r\n   * @param blurSteps Blur post processes from low to high which will be mixed with the original image.\r\n   * @param options The required width/height ratio to downsize to before computing the render pass.\r\n   * @param camera The camera to apply the render pass to.\r\n   * @param samplingMode The sampling mode to be used when computing the pass. (default: 0)\r\n   * @param engine The engine which the post process will be applied. (default: current engine)\r\n   * @param reusable If the post process can be reused on the same frame. (default: false)\r\n   * @param textureType Type of textures used when performing the post process. (default: 0)\r\n   * @param blockCompilation If compilation of the shader should not be done in the constructor. The updateEffect method can be used to compile the shader at a later time. (default: false)\r\n   */\n\n\n  function DepthOfFieldMergePostProcess(name, originalFromInput, circleOfConfusion, blurSteps, options, camera, samplingMode, engine, reusable, textureType, blockCompilation) {\n    if (textureType === void 0) {\n      textureType = 0;\n    }\n\n    if (blockCompilation === void 0) {\n      blockCompilation = false;\n    }\n\n    var _this = _super.call(this, name, \"depthOfFieldMerge\", [], [\"circleOfConfusionSampler\", \"blurStep0\", \"blurStep1\", \"blurStep2\"], options, camera, samplingMode, engine, reusable, null, textureType, undefined, null, true) || this;\n\n    _this.blurSteps = blurSteps;\n\n    _this.onApplyObservable.add(function (effect) {\n      effect.setTextureFromPostProcess(\"textureSampler\", originalFromInput);\n      effect.setTextureFromPostProcessOutput(\"circleOfConfusionSampler\", circleOfConfusion);\n      blurSteps.forEach(function (step, index) {\n        effect.setTextureFromPostProcessOutput(\"blurStep\" + (blurSteps.length - index - 1), step);\n      });\n    });\n\n    if (!blockCompilation) {\n      _this.updateEffect();\n    }\n\n    return _this;\n  }\n  /**\r\n   * Gets a string identifying the name of the class\r\n   * @returns \"DepthOfFieldMergePostProcess\" string\r\n   */\n\n\n  DepthOfFieldMergePostProcess.prototype.getClassName = function () {\n    return \"DepthOfFieldMergePostProcess\";\n  };\n  /**\r\n   * Updates the effect with the current post process compile time values and recompiles the shader.\r\n   * @param defines Define statements that should be added at the beginning of the shader. (default: null)\r\n   * @param uniforms Set of uniform variables that will be passed to the shader. (default: null)\r\n   * @param samplers Set of Texture2D variables that will be passed to the shader. (default: null)\r\n   * @param indexParameters The index parameters to be used for babylons include syntax \"#include<kernelBlurVaryingDeclaration>[0..varyingCount]\". (default: undefined) See usage in babylon.blurPostProcess.ts and kernelBlur.vertex.fx\r\n   * @param onCompiled Called when the shader has been compiled.\r\n   * @param onError Called if there is an error when compiling a shader.\r\n   */\n\n\n  DepthOfFieldMergePostProcess.prototype.updateEffect = function (defines, uniforms, samplers, indexParameters, onCompiled, onError) {\n    if (defines === void 0) {\n      defines = null;\n    }\n\n    if (uniforms === void 0) {\n      uniforms = null;\n    }\n\n    if (samplers === void 0) {\n      samplers = null;\n    }\n\n    if (!defines) {\n      defines = \"\";\n      defines += \"#define BLUR_LEVEL \" + (this.blurSteps.length - 1) + \"\\n\";\n    }\n\n    _super.prototype.updateEffect.call(this, defines, uniforms, samplers, indexParameters, onCompiled, onError);\n  };\n\n  return DepthOfFieldMergePostProcess;\n}(PostProcess);\n\nexport { DepthOfFieldMergePostProcess };","map":null,"metadata":{},"sourceType":"module"}