{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _slicedToArray = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _get = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _toConsumableArray = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _objectSpread = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _possibleConstructorReturn = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _classCallCheck = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/opt/work/NZ_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;\n\nvar code_1 = require(\"./code\");\n\nvar scope_1 = require(\"./scope\");\n\nvar code_2 = require(\"./code\");\n\nObject.defineProperty(exports, \"_\", {\n  enumerable: true,\n  get: function get() {\n    return code_2._;\n  }\n});\nObject.defineProperty(exports, \"str\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.str;\n  }\n});\nObject.defineProperty(exports, \"strConcat\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.strConcat;\n  }\n});\nObject.defineProperty(exports, \"nil\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.nil;\n  }\n});\nObject.defineProperty(exports, \"getProperty\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.getProperty;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.stringify;\n  }\n});\nObject.defineProperty(exports, \"Name\", {\n  enumerable: true,\n  get: function get() {\n    return code_2.Name;\n  }\n});\n\nvar scope_2 = require(\"./scope\");\n\nObject.defineProperty(exports, \"Scope\", {\n  enumerable: true,\n  get: function get() {\n    return scope_2.Scope;\n  }\n});\nObject.defineProperty(exports, \"ValueScope\", {\n  enumerable: true,\n  get: function get() {\n    return scope_2.ValueScope;\n  }\n});\nObject.defineProperty(exports, \"ValueScopeName\", {\n  enumerable: true,\n  get: function get() {\n    return scope_2.ValueScopeName;\n  }\n});\nObject.defineProperty(exports, \"varKinds\", {\n  enumerable: true,\n  get: function get() {\n    return scope_2.varKinds;\n  }\n});\nexports.operators = {\n  GT: new code_1._Code(\">\"),\n  GTE: new code_1._Code(\">=\"),\n  LT: new code_1._Code(\"<\"),\n  LTE: new code_1._Code(\"<=\"),\n  EQ: new code_1._Code(\"===\"),\n  NEQ: new code_1._Code(\"!==\"),\n  NOT: new code_1._Code(\"!\"),\n  OR: new code_1._Code(\"||\"),\n  AND: new code_1._Code(\"&&\"),\n  ADD: new code_1._Code(\"+\")\n};\n\nvar Node = /*#__PURE__*/function () {\n  function Node() {\n    _classCallCheck(this, Node);\n  }\n\n  _createClass(Node, [{\n    key: \"optimizeNodes\",\n    value: function optimizeNodes() {\n      return this;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(_names, _constants) {\n      return this;\n    }\n  }]);\n\n  return Node;\n}();\n\nvar Def = /*#__PURE__*/function (_Node) {\n  _inherits(Def, _Node);\n\n  function Def(varKind, name, rhs) {\n    var _this;\n\n    _classCallCheck(this, Def);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Def).call(this));\n    _this.varKind = varKind;\n    _this.name = name;\n    _this.rhs = rhs;\n    return _this;\n  }\n\n  _createClass(Def, [{\n    key: \"render\",\n    value: function render(_ref) {\n      var es5 = _ref.es5,\n          _n = _ref._n;\n      var varKind = es5 ? scope_1.varKinds.var : this.varKind;\n      var rhs = this.rhs === undefined ? \"\" : \" = \".concat(this.rhs);\n      return \"\".concat(varKind, \" \").concat(this.name).concat(rhs, \";\") + _n;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      if (!names[this.name.str]) return;\n      if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};\n    }\n  }]);\n\n  return Def;\n}(Node);\n\nvar Assign = /*#__PURE__*/function (_Node2) {\n  _inherits(Assign, _Node2);\n\n  function Assign(lhs, rhs, sideEffects) {\n    var _this2;\n\n    _classCallCheck(this, Assign);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Assign).call(this));\n    _this2.lhs = lhs;\n    _this2.rhs = rhs;\n    _this2.sideEffects = sideEffects;\n    return _this2;\n  }\n\n  _createClass(Assign, [{\n    key: \"render\",\n    value: function render(_ref2) {\n      var _n = _ref2._n;\n      return \"\".concat(this.lhs, \" = \").concat(this.rhs, \";\") + _n;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects) return;\n      this.rhs = optimizeExpr(this.rhs, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      var names = this.lhs instanceof code_1.Name ? {} : _objectSpread({}, this.lhs.names);\n      return addExprNames(names, this.rhs);\n    }\n  }]);\n\n  return Assign;\n}(Node);\n\nvar AssignOp = /*#__PURE__*/function (_Assign) {\n  _inherits(AssignOp, _Assign);\n\n  function AssignOp(lhs, op, rhs, sideEffects) {\n    var _this3;\n\n    _classCallCheck(this, AssignOp);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(AssignOp).call(this, lhs, rhs, sideEffects));\n    _this3.op = op;\n    return _this3;\n  }\n\n  _createClass(AssignOp, [{\n    key: \"render\",\n    value: function render(_ref3) {\n      var _n = _ref3._n;\n      return \"\".concat(this.lhs, \" \").concat(this.op, \"= \").concat(this.rhs, \";\") + _n;\n    }\n  }]);\n\n  return AssignOp;\n}(Assign);\n\nvar Label = /*#__PURE__*/function (_Node3) {\n  _inherits(Label, _Node3);\n\n  function Label(label) {\n    var _this4;\n\n    _classCallCheck(this, Label);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(Label).call(this));\n    _this4.label = label;\n    _this4.names = {};\n    return _this4;\n  }\n\n  _createClass(Label, [{\n    key: \"render\",\n    value: function render(_ref4) {\n      var _n = _ref4._n;\n      return \"\".concat(this.label, \":\") + _n;\n    }\n  }]);\n\n  return Label;\n}(Node);\n\nvar Break = /*#__PURE__*/function (_Node4) {\n  _inherits(Break, _Node4);\n\n  function Break(label) {\n    var _this5;\n\n    _classCallCheck(this, Break);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(Break).call(this));\n    _this5.label = label;\n    _this5.names = {};\n    return _this5;\n  }\n\n  _createClass(Break, [{\n    key: \"render\",\n    value: function render(_ref5) {\n      var _n = _ref5._n;\n      var label = this.label ? \" \".concat(this.label) : \"\";\n      return \"break\".concat(label, \";\") + _n;\n    }\n  }]);\n\n  return Break;\n}(Node);\n\nvar Throw = /*#__PURE__*/function (_Node5) {\n  _inherits(Throw, _Node5);\n\n  function Throw(error) {\n    var _this6;\n\n    _classCallCheck(this, Throw);\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Throw).call(this));\n    _this6.error = error;\n    return _this6;\n  }\n\n  _createClass(Throw, [{\n    key: \"render\",\n    value: function render(_ref6) {\n      var _n = _ref6._n;\n      return \"throw \".concat(this.error, \";\") + _n;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return this.error.names;\n    }\n  }]);\n\n  return Throw;\n}(Node);\n\nvar AnyCode = /*#__PURE__*/function (_Node6) {\n  _inherits(AnyCode, _Node6);\n\n  function AnyCode(code) {\n    var _this7;\n\n    _classCallCheck(this, AnyCode);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(AnyCode).call(this));\n    _this7.code = code;\n    return _this7;\n  }\n\n  _createClass(AnyCode, [{\n    key: \"render\",\n    value: function render(_ref7) {\n      var _n = _ref7._n;\n      return \"\".concat(this.code, \";\") + _n;\n    }\n  }, {\n    key: \"optimizeNodes\",\n    value: function optimizeNodes() {\n      return \"\".concat(this.code) ? this : undefined;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      this.code = optimizeExpr(this.code, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return this.code instanceof code_1._CodeOrName ? this.code.names : {};\n    }\n  }]);\n\n  return AnyCode;\n}(Node);\n\nvar ParentNode = /*#__PURE__*/function (_Node7) {\n  _inherits(ParentNode, _Node7);\n\n  function ParentNode() {\n    var _this8;\n\n    var nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    _classCallCheck(this, ParentNode);\n\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(ParentNode).call(this));\n    _this8.nodes = nodes;\n    return _this8;\n  }\n\n  _createClass(ParentNode, [{\n    key: \"render\",\n    value: function render(opts) {\n      return this.nodes.reduce(function (code, n) {\n        return code + n.render(opts);\n      }, \"\");\n    }\n  }, {\n    key: \"optimizeNodes\",\n    value: function optimizeNodes() {\n      var nodes = this.nodes;\n      var i = nodes.length;\n\n      while (i--) {\n        var n = nodes[i].optimizeNodes();\n        if (Array.isArray(n)) nodes.splice.apply(nodes, [i, 1].concat(_toConsumableArray(n)));else if (n) nodes[i] = n;else nodes.splice(i, 1);\n      }\n\n      return nodes.length > 0 ? this : undefined;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      var nodes = this.nodes;\n      var i = nodes.length;\n\n      while (i--) {\n        // iterating backwards improves 1-pass optimization\n        var n = nodes[i];\n        if (n.optimizeNames(names, constants)) continue;\n        subtractNames(names, n.names);\n        nodes.splice(i, 1);\n      }\n\n      return nodes.length > 0 ? this : undefined;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return this.nodes.reduce(function (names, n) {\n        return addNames(names, n.names);\n      }, {});\n    }\n  }]);\n\n  return ParentNode;\n}(Node);\n\nvar BlockNode = /*#__PURE__*/function (_ParentNode) {\n  _inherits(BlockNode, _ParentNode);\n\n  function BlockNode() {\n    _classCallCheck(this, BlockNode);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BlockNode).apply(this, arguments));\n  }\n\n  _createClass(BlockNode, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"{\" + opts._n + _get(_getPrototypeOf(BlockNode.prototype), \"render\", this).call(this, opts) + \"}\" + opts._n;\n    }\n  }]);\n\n  return BlockNode;\n}(ParentNode);\n\nvar Root = /*#__PURE__*/function (_ParentNode2) {\n  _inherits(Root, _ParentNode2);\n\n  function Root() {\n    _classCallCheck(this, Root);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Root).apply(this, arguments));\n  }\n\n  return Root;\n}(ParentNode);\n\nvar Else = /*#__PURE__*/function (_BlockNode) {\n  _inherits(Else, _BlockNode);\n\n  function Else() {\n    _classCallCheck(this, Else);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Else).apply(this, arguments));\n  }\n\n  return Else;\n}(BlockNode);\n\nElse.kind = \"else\";\n\nvar If = /*#__PURE__*/function (_BlockNode2) {\n  _inherits(If, _BlockNode2);\n\n  function If(condition, nodes) {\n    var _this9;\n\n    _classCallCheck(this, If);\n\n    _this9 = _possibleConstructorReturn(this, _getPrototypeOf(If).call(this, nodes));\n    _this9.condition = condition;\n    return _this9;\n  }\n\n  _createClass(If, [{\n    key: \"render\",\n    value: function render(opts) {\n      var code = \"if(\".concat(this.condition, \")\") + _get(_getPrototypeOf(If.prototype), \"render\", this).call(this, opts);\n\n      if (this.else) code += \"else \" + this.else.render(opts);\n      return code;\n    }\n  }, {\n    key: \"optimizeNodes\",\n    value: function optimizeNodes() {\n      _get(_getPrototypeOf(If.prototype), \"optimizeNodes\", this).call(this);\n\n      var cond = this.condition;\n      if (cond === true) return this.nodes; // else is ignored here\n\n      var e = this.else;\n\n      if (e) {\n        var ns = e.optimizeNodes();\n        e = this.else = Array.isArray(ns) ? new Else(ns) : ns;\n      }\n\n      if (e) {\n        if (cond === false) return e instanceof If ? e : e.nodes;\n        if (this.nodes.length) return this;\n        return new If(not(cond), e instanceof If ? [e] : e.nodes);\n      }\n\n      if (cond === false || !this.nodes.length) return undefined;\n      return this;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      var _a;\n\n      this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n      if (!(_get(_getPrototypeOf(If.prototype), \"optimizeNames\", this).call(this, names, constants) || this.else)) return;\n      this.condition = optimizeExpr(this.condition, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      var names = _get(_getPrototypeOf(If.prototype), \"names\", this);\n\n      addExprNames(names, this.condition);\n      if (this.else) addNames(names, this.else.names);\n      return names;\n    }\n  }]);\n\n  return If;\n}(BlockNode);\n\nIf.kind = \"if\";\n\nvar For = /*#__PURE__*/function (_BlockNode3) {\n  _inherits(For, _BlockNode3);\n\n  function For() {\n    _classCallCheck(this, For);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(For).apply(this, arguments));\n  }\n\n  return For;\n}(BlockNode);\n\nFor.kind = \"for\";\n\nvar ForLoop = /*#__PURE__*/function (_For) {\n  _inherits(ForLoop, _For);\n\n  function ForLoop(iteration) {\n    var _this10;\n\n    _classCallCheck(this, ForLoop);\n\n    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(ForLoop).call(this));\n    _this10.iteration = iteration;\n    return _this10;\n  }\n\n  _createClass(ForLoop, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"for(\".concat(this.iteration, \")\") + _get(_getPrototypeOf(ForLoop.prototype), \"render\", this).call(this, opts);\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      if (!_get(_getPrototypeOf(ForLoop.prototype), \"optimizeNames\", this).call(this, names, constants)) return;\n      this.iteration = optimizeExpr(this.iteration, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return addNames(_get(_getPrototypeOf(ForLoop.prototype), \"names\", this), this.iteration.names);\n    }\n  }]);\n\n  return ForLoop;\n}(For);\n\nvar ForRange = /*#__PURE__*/function (_For2) {\n  _inherits(ForRange, _For2);\n\n  function ForRange(varKind, name, from, to) {\n    var _this11;\n\n    _classCallCheck(this, ForRange);\n\n    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(ForRange).call(this));\n    _this11.varKind = varKind;\n    _this11.name = name;\n    _this11.from = from;\n    _this11.to = to;\n    return _this11;\n  }\n\n  _createClass(ForRange, [{\n    key: \"render\",\n    value: function render(opts) {\n      var varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;\n      var name = this.name,\n          from = this.from,\n          to = this.to;\n      return \"for(\".concat(varKind, \" \").concat(name, \"=\").concat(from, \"; \").concat(name, \"<\").concat(to, \"; \").concat(name, \"++)\") + _get(_getPrototypeOf(ForRange.prototype), \"render\", this).call(this, opts);\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      var names = addExprNames(_get(_getPrototypeOf(ForRange.prototype), \"names\", this), this.from);\n      return addExprNames(names, this.to);\n    }\n  }]);\n\n  return ForRange;\n}(For);\n\nvar ForIter = /*#__PURE__*/function (_For3) {\n  _inherits(ForIter, _For3);\n\n  function ForIter(loop, varKind, name, iterable) {\n    var _this12;\n\n    _classCallCheck(this, ForIter);\n\n    _this12 = _possibleConstructorReturn(this, _getPrototypeOf(ForIter).call(this));\n    _this12.loop = loop;\n    _this12.varKind = varKind;\n    _this12.name = name;\n    _this12.iterable = iterable;\n    return _this12;\n  }\n\n  _createClass(ForIter, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"for(\".concat(this.varKind, \" \").concat(this.name, \" \").concat(this.loop, \" \").concat(this.iterable, \")\") + _get(_getPrototypeOf(ForIter.prototype), \"render\", this).call(this, opts);\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      if (!_get(_getPrototypeOf(ForIter.prototype), \"optimizeNames\", this).call(this, names, constants)) return;\n      this.iterable = optimizeExpr(this.iterable, names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      return addNames(_get(_getPrototypeOf(ForIter.prototype), \"names\", this), this.iterable.names);\n    }\n  }]);\n\n  return ForIter;\n}(For);\n\nvar Func = /*#__PURE__*/function (_BlockNode4) {\n  _inherits(Func, _BlockNode4);\n\n  function Func(name, args, async) {\n    var _this13;\n\n    _classCallCheck(this, Func);\n\n    _this13 = _possibleConstructorReturn(this, _getPrototypeOf(Func).call(this));\n    _this13.name = name;\n    _this13.args = args;\n    _this13.async = async;\n    return _this13;\n  }\n\n  _createClass(Func, [{\n    key: \"render\",\n    value: function render(opts) {\n      var _async = this.async ? \"async \" : \"\";\n\n      return \"\".concat(_async, \"function \").concat(this.name, \"(\").concat(this.args, \")\") + _get(_getPrototypeOf(Func.prototype), \"render\", this).call(this, opts);\n    }\n  }]);\n\n  return Func;\n}(BlockNode);\n\nFunc.kind = \"func\";\n\nvar Return = /*#__PURE__*/function (_ParentNode3) {\n  _inherits(Return, _ParentNode3);\n\n  function Return() {\n    _classCallCheck(this, Return);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Return).apply(this, arguments));\n  }\n\n  _createClass(Return, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"return \" + _get(_getPrototypeOf(Return.prototype), \"render\", this).call(this, opts);\n    }\n  }]);\n\n  return Return;\n}(ParentNode);\n\nReturn.kind = \"return\";\n\nvar Try = /*#__PURE__*/function (_BlockNode5) {\n  _inherits(Try, _BlockNode5);\n\n  function Try() {\n    _classCallCheck(this, Try);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Try).apply(this, arguments));\n  }\n\n  _createClass(Try, [{\n    key: \"render\",\n    value: function render(opts) {\n      var code = \"try\" + _get(_getPrototypeOf(Try.prototype), \"render\", this).call(this, opts);\n\n      if (this.catch) code += this.catch.render(opts);\n      if (this.finally) code += this.finally.render(opts);\n      return code;\n    }\n  }, {\n    key: \"optimizeNodes\",\n    value: function optimizeNodes() {\n      var _a, _b;\n\n      _get(_getPrototypeOf(Try.prototype), \"optimizeNodes\", this).call(this);\n\n      (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();\n      (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();\n      return this;\n    }\n  }, {\n    key: \"optimizeNames\",\n    value: function optimizeNames(names, constants) {\n      var _a, _b;\n\n      _get(_getPrototypeOf(Try.prototype), \"optimizeNames\", this).call(this, names, constants);\n\n      (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n      (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);\n      return this;\n    }\n  }, {\n    key: \"names\",\n    get: function get() {\n      var names = _get(_getPrototypeOf(Try.prototype), \"names\", this);\n\n      if (this.catch) addNames(names, this.catch.names);\n      if (this.finally) addNames(names, this.finally.names);\n      return names;\n    }\n  }]);\n\n  return Try;\n}(BlockNode);\n\nvar Catch = /*#__PURE__*/function (_BlockNode6) {\n  _inherits(Catch, _BlockNode6);\n\n  function Catch(error) {\n    var _this14;\n\n    _classCallCheck(this, Catch);\n\n    _this14 = _possibleConstructorReturn(this, _getPrototypeOf(Catch).call(this));\n    _this14.error = error;\n    return _this14;\n  }\n\n  _createClass(Catch, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"catch(\".concat(this.error, \")\") + _get(_getPrototypeOf(Catch.prototype), \"render\", this).call(this, opts);\n    }\n  }]);\n\n  return Catch;\n}(BlockNode);\n\nCatch.kind = \"catch\";\n\nvar Finally = /*#__PURE__*/function (_BlockNode7) {\n  _inherits(Finally, _BlockNode7);\n\n  function Finally() {\n    _classCallCheck(this, Finally);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Finally).apply(this, arguments));\n  }\n\n  _createClass(Finally, [{\n    key: \"render\",\n    value: function render(opts) {\n      return \"finally\" + _get(_getPrototypeOf(Finally.prototype), \"render\", this).call(this, opts);\n    }\n  }]);\n\n  return Finally;\n}(BlockNode);\n\nFinally.kind = \"finally\";\n\nvar CodeGen = /*#__PURE__*/function () {\n  function CodeGen(extScope) {\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, CodeGen);\n\n    this._values = {};\n    this._blockStarts = [];\n    this._constants = {};\n    this.opts = _objectSpread({}, opts, {\n      _n: opts.lines ? \"\\n\" : \"\"\n    });\n    this._extScope = extScope;\n    this._scope = new scope_1.Scope({\n      parent: extScope\n    });\n    this._nodes = [new Root()];\n  }\n\n  _createClass(CodeGen, [{\n    key: \"toString\",\n    value: function toString() {\n      return this._root.render(this.opts);\n    } // returns unique name in the internal scope\n\n  }, {\n    key: \"name\",\n    value: function name(prefix) {\n      return this._scope.name(prefix);\n    } // reserves unique name in the external scope\n\n  }, {\n    key: \"scopeName\",\n    value: function scopeName(prefix) {\n      return this._extScope.name(prefix);\n    } // reserves unique name in the external scope and assigns value to it\n\n  }, {\n    key: \"scopeValue\",\n    value: function scopeValue(prefixOrName, value) {\n      var name = this._extScope.value(prefixOrName, value);\n\n      var vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());\n      vs.add(name);\n      return name;\n    }\n  }, {\n    key: \"getScopeValue\",\n    value: function getScopeValue(prefix, keyOrRef) {\n      return this._extScope.getValue(prefix, keyOrRef);\n    } // return code that assigns values in the external scope to the names that are used internally\n    // (same names that were returned by gen.scopeName or gen.scopeValue)\n\n  }, {\n    key: \"scopeRefs\",\n    value: function scopeRefs(scopeName) {\n      return this._extScope.scopeRefs(scopeName, this._values);\n    }\n  }, {\n    key: \"scopeCode\",\n    value: function scopeCode() {\n      return this._extScope.scopeCode(this._values);\n    }\n  }, {\n    key: \"_def\",\n    value: function _def(varKind, nameOrPrefix, rhs, constant) {\n      var name = this._scope.toName(nameOrPrefix);\n\n      if (rhs !== undefined && constant) this._constants[name.str] = rhs;\n\n      this._leafNode(new Def(varKind, name, rhs));\n\n      return name;\n    } // `const` declaration (`var` in es5 mode)\n\n  }, {\n    key: \"const\",\n    value: function _const(nameOrPrefix, rhs, _constant) {\n      return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);\n    } // `let` declaration with optional assignment (`var` in es5 mode)\n\n  }, {\n    key: \"let\",\n    value: function _let(nameOrPrefix, rhs, _constant) {\n      return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);\n    } // `var` declaration with optional assignment\n\n  }, {\n    key: \"var\",\n    value: function _var(nameOrPrefix, rhs, _constant) {\n      return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);\n    } // assignment code\n\n  }, {\n    key: \"assign\",\n    value: function assign(lhs, rhs, sideEffects) {\n      return this._leafNode(new Assign(lhs, rhs, sideEffects));\n    } // `+=` code\n\n  }, {\n    key: \"add\",\n    value: function add(lhs, rhs) {\n      return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));\n    } // appends passed SafeExpr to code or executes Block\n\n  }, {\n    key: \"code\",\n    value: function code(c) {\n      if (typeof c == \"function\") c();else if (c !== code_1.nil) this._leafNode(new AnyCode(c));\n      return this;\n    } // returns code for object literal for the passed argument list of key-value pairs\n\n  }, {\n    key: \"object\",\n    value: function object() {\n      var code = [\"{\"];\n\n      for (var _len = arguments.length, keyValues = new Array(_len), _key = 0; _key < _len; _key++) {\n        keyValues[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _keyValues = keyValues; _i < _keyValues.length; _i++) {\n        var _keyValues$_i = _slicedToArray(_keyValues[_i], 2),\n            key = _keyValues$_i[0],\n            value = _keyValues$_i[1];\n\n        if (code.length > 1) code.push(\",\");\n        code.push(key);\n\n        if (key !== value || this.opts.es5) {\n          code.push(\":\");\n          code_1.addCodeArg(code, value);\n        }\n      }\n\n      code.push(\"}\");\n      return new code_1._Code(code);\n    } // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n\n  }, {\n    key: \"if\",\n    value: function _if(condition, thenBody, elseBody) {\n      this._blockNode(new If(condition));\n\n      if (thenBody && elseBody) {\n        this.code(thenBody).else().code(elseBody).endIf();\n      } else if (thenBody) {\n        this.code(thenBody).endIf();\n      } else if (elseBody) {\n        throw new Error('CodeGen: \"else\" body without \"then\" body');\n      }\n\n      return this;\n    } // `else if` clause - invalid without `if` or after `else` clauses\n\n  }, {\n    key: \"elseIf\",\n    value: function elseIf(condition) {\n      return this._elseNode(new If(condition));\n    } // `else` clause - only valid after `if` or `else if` clauses\n\n  }, {\n    key: \"else\",\n    value: function _else() {\n      return this._elseNode(new Else());\n    } // end `if` statement (needed if gen.if was used only with condition)\n\n  }, {\n    key: \"endIf\",\n    value: function endIf() {\n      return this._endBlockNode(If, Else);\n    }\n  }, {\n    key: \"_for\",\n    value: function _for(node, forBody) {\n      this._blockNode(node);\n\n      if (forBody) this.code(forBody).endFor();\n      return this;\n    } // a generic `for` clause (or statement if `forBody` is passed)\n\n  }, {\n    key: \"for\",\n    value: function _for(iteration, forBody) {\n      return this._for(new ForLoop(iteration), forBody);\n    } // `for` statement for a range of values\n\n  }, {\n    key: \"forRange\",\n    value: function forRange(nameOrPrefix, from, to, forBody) {\n      var varKind = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let;\n\n      var name = this._scope.toName(nameOrPrefix);\n\n      return this._for(new ForRange(varKind, name, from, to), function () {\n        return forBody(name);\n      });\n    } // `for-of` statement (in es5 mode replace with a normal for loop)\n\n  }, {\n    key: \"forOf\",\n    value: function forOf(nameOrPrefix, iterable, forBody) {\n      var _this15 = this;\n\n      var varKind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : scope_1.varKinds.const;\n\n      var name = this._scope.toName(nameOrPrefix);\n\n      if (this.opts.es5) {\n        var arr = iterable instanceof code_1.Name ? iterable : this.var(\"_arr\", iterable);\n        return this.forRange(\"_i\", 0, code_1._(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\", \".length\"])), arr), function (i) {\n          _this15.var(name, code_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\", \"[\", \"]\"])), arr, i));\n\n          forBody(name);\n        });\n      }\n\n      return this._for(new ForIter(\"of\", varKind, name, iterable), function () {\n        return forBody(name);\n      });\n    } // `for-in` statement.\n    // With option `ownProperties` replaced with a `for-of` loop for object keys\n\n  }, {\n    key: \"forIn\",\n    value: function forIn(nameOrPrefix, obj, forBody) {\n      var varKind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const;\n\n      if (this.opts.ownProperties) {\n        return this.forOf(nameOrPrefix, code_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"Object.keys(\", \")\"])), obj), forBody);\n      }\n\n      var name = this._scope.toName(nameOrPrefix);\n\n      return this._for(new ForIter(\"in\", varKind, name, obj), function () {\n        return forBody(name);\n      });\n    } // end `for` loop\n\n  }, {\n    key: \"endFor\",\n    value: function endFor() {\n      return this._endBlockNode(For);\n    } // `label` statement\n\n  }, {\n    key: \"label\",\n    value: function label(_label) {\n      return this._leafNode(new Label(_label));\n    } // `break` statement\n\n  }, {\n    key: \"break\",\n    value: function _break(label) {\n      return this._leafNode(new Break(label));\n    } // `return` statement\n\n  }, {\n    key: \"return\",\n    value: function _return(value) {\n      var node = new Return();\n\n      this._blockNode(node);\n\n      this.code(value);\n      if (node.nodes.length !== 1) throw new Error('CodeGen: \"return\" should have one node');\n      return this._endBlockNode(Return);\n    } // `try` statement\n\n  }, {\n    key: \"try\",\n    value: function _try(tryBody, catchCode, finallyCode) {\n      if (!catchCode && !finallyCode) throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"');\n      var node = new Try();\n\n      this._blockNode(node);\n\n      this.code(tryBody);\n\n      if (catchCode) {\n        var error = this.name(\"e\");\n        this._currNode = node.catch = new Catch(error);\n        catchCode(error);\n      }\n\n      if (finallyCode) {\n        this._currNode = node.finally = new Finally();\n        this.code(finallyCode);\n      }\n\n      return this._endBlockNode(Catch, Finally);\n    } // `throw` statement\n\n  }, {\n    key: \"throw\",\n    value: function _throw(error) {\n      return this._leafNode(new Throw(error));\n    } // start self-balancing block\n\n  }, {\n    key: \"block\",\n    value: function block(body, nodeCount) {\n      this._blockStarts.push(this._nodes.length);\n\n      if (body) this.code(body).endBlock(nodeCount);\n      return this;\n    } // end the current self-balancing block\n\n  }, {\n    key: \"endBlock\",\n    value: function endBlock(nodeCount) {\n      var len = this._blockStarts.pop();\n\n      if (len === undefined) throw new Error(\"CodeGen: not in self-balancing block\");\n      var toClose = this._nodes.length - len;\n\n      if (toClose < 0 || nodeCount !== undefined && toClose !== nodeCount) {\n        throw new Error(\"CodeGen: wrong number of nodes: \".concat(toClose, \" vs \").concat(nodeCount, \" expected\"));\n      }\n\n      this._nodes.length = len;\n      return this;\n    } // `function` heading (or definition if funcBody is passed)\n\n  }, {\n    key: \"func\",\n    value: function func(name) {\n      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : code_1.nil;\n      var async = arguments.length > 2 ? arguments[2] : undefined;\n      var funcBody = arguments.length > 3 ? arguments[3] : undefined;\n\n      this._blockNode(new Func(name, args, async));\n\n      if (funcBody) this.code(funcBody).endFunc();\n      return this;\n    } // end function definition\n\n  }, {\n    key: \"endFunc\",\n    value: function endFunc() {\n      return this._endBlockNode(Func);\n    }\n  }, {\n    key: \"optimize\",\n    value: function optimize() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n\n      while (n-- > 0) {\n        this._root.optimizeNodes();\n\n        this._root.optimizeNames(this._root.names, this._constants);\n      }\n    }\n  }, {\n    key: \"_leafNode\",\n    value: function _leafNode(node) {\n      this._currNode.nodes.push(node);\n\n      return this;\n    }\n  }, {\n    key: \"_blockNode\",\n    value: function _blockNode(node) {\n      this._currNode.nodes.push(node);\n\n      this._nodes.push(node);\n    }\n  }, {\n    key: \"_endBlockNode\",\n    value: function _endBlockNode(N1, N2) {\n      var n = this._currNode;\n\n      if (n instanceof N1 || N2 && n instanceof N2) {\n        this._nodes.pop();\n\n        return this;\n      }\n\n      throw new Error(\"CodeGen: not in block \\\"\".concat(N2 ? \"\".concat(N1.kind, \"/\").concat(N2.kind) : N1.kind, \"\\\"\"));\n    }\n  }, {\n    key: \"_elseNode\",\n    value: function _elseNode(node) {\n      var n = this._currNode;\n\n      if (!(n instanceof If)) {\n        throw new Error('CodeGen: \"else\" without \"if\"');\n      }\n\n      this._currNode = n.else = node;\n      return this;\n    }\n  }, {\n    key: \"_root\",\n    get: function get() {\n      return this._nodes[0];\n    }\n  }, {\n    key: \"_currNode\",\n    get: function get() {\n      var ns = this._nodes;\n      return ns[ns.length - 1];\n    },\n    set: function set(node) {\n      var ns = this._nodes;\n      ns[ns.length - 1] = node;\n    }\n  }]);\n\n  return CodeGen;\n}();\n\nexports.CodeGen = CodeGen;\n\nfunction addNames(names, from) {\n  for (var n in from) {\n    names[n] = (names[n] || 0) + (from[n] || 0);\n  }\n\n  return names;\n}\n\nfunction addExprNames(names, from) {\n  return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;\n}\n\nfunction optimizeExpr(expr, names, constants) {\n  if (expr instanceof code_1.Name) return replaceName(expr);\n  if (!canOptimize(expr)) return expr;\n  return new code_1._Code(expr._items.reduce(function (items, c) {\n    if (c instanceof code_1.Name) c = replaceName(c);\n    if (c instanceof code_1._Code) items.push.apply(items, _toConsumableArray(c._items));else items.push(c);\n    return items;\n  }, []));\n\n  function replaceName(n) {\n    var c = constants[n.str];\n    if (c === undefined || names[n.str] !== 1) return n;\n    delete names[n.str];\n    return c;\n  }\n\n  function canOptimize(e) {\n    return e instanceof code_1._Code && e._items.some(function (c) {\n      return c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined;\n    });\n  }\n}\n\nfunction subtractNames(names, from) {\n  for (var n in from) {\n    names[n] = (names[n] || 0) - (from[n] || 0);\n  }\n}\n\nfunction not(x) {\n  return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : code_1._(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"!\", \"\"])), par(x));\n}\n\nexports.not = not;\nvar andCode = mappend(exports.operators.AND); // boolean AND (&&) expression with the passed arguments\n\nfunction and() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return args.reduce(andCode);\n}\n\nexports.and = and;\nvar orCode = mappend(exports.operators.OR); // boolean OR (||) expression with the passed arguments\n\nfunction or() {\n  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    args[_key3] = arguments[_key3];\n  }\n\n  return args.reduce(orCode);\n}\n\nexports.or = or;\n\nfunction mappend(op) {\n  return function (x, y) {\n    return x === code_1.nil ? y : y === code_1.nil ? x : code_1._(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \" \", \" \", \"\"])), par(x), op, par(y));\n  };\n}\n\nfunction par(x) {\n  return x instanceof code_1.Name ? x : code_1._(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"(\", \")\"])), x);\n}","map":null,"metadata":{},"sourceType":"script"}