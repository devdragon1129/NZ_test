{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { GLTFLoaderExtension } from \"./glTFLoader\";\nimport { GLTFUtils } from \"./glTFLoaderUtils\";\nimport { EComponentType } from \"./glTFLoaderInterfaces\";\nimport { GLTFLoader, GLTFLoaderBase } from \"./glTFLoader\";\nvar BinaryExtensionBufferName = \"binary_glTF\";\n/** @hidden */\n\nvar GLTFBinaryExtension =\n/** @class */\nfunction (_super) {\n  __extends(GLTFBinaryExtension, _super);\n\n  function GLTFBinaryExtension() {\n    return _super.call(this, \"KHR_binary_glTF\") || this;\n  }\n\n  GLTFBinaryExtension.prototype.loadRuntimeAsync = function (scene, data, rootUrl, onSuccess, onError) {\n    var extensionsUsed = data.json.extensionsUsed;\n\n    if (!extensionsUsed || extensionsUsed.indexOf(this.name) === -1 || !data.bin) {\n      return false;\n    }\n\n    this._bin = data.bin;\n    onSuccess(GLTFLoaderBase.CreateRuntime(data.json, scene, rootUrl));\n    return true;\n  };\n\n  GLTFBinaryExtension.prototype.loadBufferAsync = function (gltfRuntime, id, onSuccess, onError) {\n    if (gltfRuntime.extensionsUsed.indexOf(this.name) === -1) {\n      return false;\n    }\n\n    if (id !== BinaryExtensionBufferName) {\n      return false;\n    }\n\n    this._bin.readAsync(0, this._bin.byteLength).then(onSuccess, function (error) {\n      return onError(error.message);\n    });\n\n    return true;\n  };\n\n  GLTFBinaryExtension.prototype.loadTextureBufferAsync = function (gltfRuntime, id, onSuccess, onError) {\n    var texture = gltfRuntime.textures[id];\n    var source = gltfRuntime.images[texture.source];\n\n    if (!source.extensions || !(this.name in source.extensions)) {\n      return false;\n    }\n\n    var sourceExt = source.extensions[this.name];\n    var bufferView = gltfRuntime.bufferViews[sourceExt.bufferView];\n    var buffer = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\n    onSuccess(buffer);\n    return true;\n  };\n\n  GLTFBinaryExtension.prototype.loadShaderStringAsync = function (gltfRuntime, id, onSuccess, onError) {\n    var shader = gltfRuntime.shaders[id];\n\n    if (!shader.extensions || !(this.name in shader.extensions)) {\n      return false;\n    }\n\n    var binaryExtensionShader = shader.extensions[this.name];\n    var bufferView = gltfRuntime.bufferViews[binaryExtensionShader.bufferView];\n    var shaderBytes = GLTFUtils.GetBufferFromBufferView(gltfRuntime, bufferView, 0, bufferView.byteLength, EComponentType.UNSIGNED_BYTE);\n    setTimeout(function () {\n      var shaderString = GLTFUtils.DecodeBufferToText(shaderBytes);\n      onSuccess(shaderString);\n    });\n    return true;\n  };\n\n  return GLTFBinaryExtension;\n}(GLTFLoaderExtension);\n\nexport { GLTFBinaryExtension };\nGLTFLoader.RegisterExtension(new GLTFBinaryExtension());","map":null,"metadata":{},"sourceType":"module"}